[
    {
        "content": "\u6211\u6765\u53d1\u4e00\u6ce2python\u9898\u89e3\n\n\u8fd9\u9898\u9996\u5148\u6211\u60f3\u5230\u7684\u662f\u7528py\u81ea\u5e26\u7684pow\u51fd\u6570\u8fd0\u7b97\n\n\u4e8e\u662f\u6211\u6572\u51fa\u4e86\u4ee5\u4e0b\u4ee3\u7801\n\nimport math\n\na=int(input())\n\nb=int(input())\n\nprint(math.floor(math.pow(b,1/a)+0.000000001))\n\n\u6ce8\u610f\u4e8b\u9879:\n\n1.\u9664\u53f7\u6253\u4e00\u4e2a\u5c31\u884c\u4e86,\u62532\u4e2a\u5c31\u6210\u4e86\u5411\u4e0b\u53d6\u6574\n\n2.\u540e\u9762\u52a0\u4e00\u4e2a\u5f88\u5c0f\u7684\u6570\u662f\u9632\u6b62\u7cbe\u5ea6\u8bef\u5dee,\u4e0d\u52a0\u7684\u8bdd\u6837\u4f8b\u90fd\u8fc7\u4e0d\u4e86\n\n\u4f46\u662f\u8fd9\u662f\u8fc7\u4e0d\u4e86\u7684,\u53ea\u670950,\u540e\u9762\u4f1aRE\n\n100\u5206\u4ee3\u7801\u7684\u601d\u60f3\u4e0ec++\u4e00\u6837\u4e5f\u662f\u4e8c\u5206\u7b54\u6848,\u53ea\u4e0d\u8fc7py\u56e0\u4e3a\u81ea\u5e26\u9ad8\u7cbe\u8981\u65b9\u4fbf\u4e00\u4e9b\n\n\u4e0b\u9762\u662f100\u5206\u4ee3\u7801\n\n```cpp\na=int(input())\nb=int(input())\nl=0\nr=1\nwhile(r**a<=b):  #\u62532\u4e2a\u4e58\u53f7\u5c31\u662f\u4e58\u65b9\u7684\u610f\u601d\n    l=r;r=r*2  #\u5148\u83b7\u5f97l,r\u521d\u503c\nwhile(l+1<r):  #\u4ee5\u4e0b\u90fd\u662f\u4e8c\u5206,\u53ef\u4ee5\u6ce8\u610f\u4e00\u4e0bwhile\u548cif\u7684\u7528\u6cd5\n    mid=(l+r)//2\n    if (mid**a<=b):\n        l=mid\n    else:\n        r=mid\nif (l**a<=b):\n    print(l)\nelse:\n    print(r)\n\u4ee3\u7801\u867d\u4e0d\u957f\uff0c\u4f46\u7528\u6765\u5b66\u4e60py\u8bed\u6cd5\u8fd8\u662f\u4e0d\u9519\u7684\uff01\n```",
        "postTime": 1508316166,
        "uid": 20821,
        "name": "wjy666",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2293 \u3010[HNOI2004]\u9ad8\u7cbe\u5ea6\u5f00\u6839\u3011"
    },
    {
        "content": "\u7ed9\u51fa\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3a $\\Theta(n\\log^2 n)$ \u4f46\u5e38\u6570\u86ee\u5927\u7684\u65b9\u6cd5\u2026\u2026\u4e0d\u8fc7\u5df2\u7ecf\u8d85\u8fc7\u4e86\u6240\u6709\u5176\u4ed6\u6d1b\u8c37\u7684\u4ee3\u7801\u3002\n\n\u9996\u5148\u6839\u636e\u51ac\u4ee4\u8425 2012 \u5e74\u7684\u300a\u7406\u6027\u6109\u60a6\uff1a\u9ad8\u7cbe\u5ea6\u6570\u503c\u8ba1\u7b97\u300b\uff0c\u6211\u4eec\u5df2\u7ecf\u62e5\u6709\u4e86\u57fa\u4e8e\u500d\u589e\u7684\u725b\u987f\u8fed\u4ee3\u6cd5\uff0c\u5bf9\u4e24\u4e2a\u4f4d\u6570 $\\le n$ \u7684\u6574\u6570 $a, b$ \u5728 $\\Theta(n\\log n)$ \u65f6\u95f4\u5185\u6c42\u51fa $\\lfloor a/b \\rfloor$ \u7684\u65b9\u6cd5\u3002\n\n\u6211\u4eec\u63a5\u7740\u6839\u636e\u725b\u987f\u8fed\u4ee3\u6cd5\u89e3\u65b9\u7a0b\n\n$$f(x) = x^m - n$$\n\n\u90a3\u4e48\u5c31\u6709\u8fed\u4ee3\u65b9\u7a0b\n\n$$ x_{k + 1} = \\frac{(m - 1)x_k + n / x_k^{m - 1}}m $$\n\n\u6211\u4eec\u8981\u53d6\u6574\u7684\u8bdd\u5373\u6539\u5199\u6210\n\n$$ x_{k + 1} = \\left\\lfloor\\frac{(m - 1)x_k + \\lfloor n / x_k^{m - 1} \\rfloor}m\\right\\rfloor $$\n\n\u53ef\u4ee5\u8bc1\u660e\u5f53 $x_{k + 1} \\ge x_k$ \u65f6\uff0c\u7b54\u6848\u4e3a $\\lfloor\\sqrt[m]n\\rfloor = x_k$\u3002\n\n\u8fd9\u4e2a\u8fed\u4ee3\u5f0f\u662f 2 \u9636\u6536\u655b\u7684\uff0c\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5982\u679c\u521d\u503c\u9009\u7684\u597d\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u8fed\u4ee3 $\\Theta(\\log n)$ \u8f6e\u5373\u53ef\u5f97\u51fa\u7b54\u6848\u3002\n\n\u521d\u503c\u53ef\u4ee5\u8fd9\u6837\u9009\uff1a\u9996\u5148\u4f30\u7b97\u7b54\u6848\u7684\u4f4d\u6570\u4e3a $\\lceil n/m \\rceil$\uff0c\u7136\u540e\u4e8c\u5206\u6700\u9ad8\u4f4d\u7684\u5f97\u6570\uff0c\u7136\u540e\u8fed\u4ee3\u5373\u53ef\u3002\n\n```cpp\n#include <cstdio>\n#include <cstring>\n\n#include <algorithm>\n#include <iostream>\n#include <complex>\n#include <string>\n#include <vector>\n\n#define LOG(FMT...) fprintf(stderr, FMT)\n\nusing namespace std;\n\ntypedef long long ll;\ntypedef complex<double> cd;\n\nconst int BASE = 5, MOD = 100000, LGM = 17;\nconst double PI = 3.1415926535897932384626;\n\nclass UnsignedDigit;\n\nnamespace DivHelper { UnsignedDigit quasiInv(const UnsignedDigit& v); }\n\nclass UnsignedDigit {\npublic:\n\tvector<int> digits;\n\npublic:\n\tUnsignedDigit() : digits(1) {}\n\n\tUnsignedDigit(const vector<int>& digits);\n\n\tUnsignedDigit(ll x);\n\n\tUnsignedDigit(string str);\n\n\tstring toString() const;\n\n\tint size() const { return digits.size(); }\n\n\tbool operator<(const UnsignedDigit& rhs) const;\n\tbool operator<=(const UnsignedDigit& rhs) const;\n\tbool operator==(const UnsignedDigit& rhs) const;\n\n\tUnsignedDigit operator+(const UnsignedDigit& rhs) const;\n\tUnsignedDigit operator-(const UnsignedDigit& rhs) const;\n\tUnsignedDigit operator*(const UnsignedDigit& rhs) const;\n\tUnsignedDigit operator/(const UnsignedDigit& rhs) const;\n\n\tUnsignedDigit operator/(int v) const;\n\n\tUnsignedDigit move(int k) const;\n\n\tfriend UnsignedDigit DivHelper::quasiInv(const UnsignedDigit& v);\n\t\n\tfriend void swap(UnsignedDigit& lhs, UnsignedDigit& rhs) { swap(lhs.digits, rhs.digits); }\n\npublic:\n\tvoid trim();\n};\n\nclass UnsignedDecimal {};\n\nclass Int {};\n\nclass Decimal {};\n\nnamespace ConvHelper {\n\n\tvoid fft(cd* a, int lgn, int d) {\n\t\tint n = 1 << lgn;\n\t\t{\n\t\t\tstatic vector<int> brev;\n\t\t\tif (n != brev.size()) {\n\t\t\t\tbrev.resize(n);\n\t\t\t\tfor (int i = 0; i < n; ++i)\n\t\t\t\t\tbrev[i] = (brev[i >> 1] >> 1) | ((i & 1) << (lgn - 1));\n\t\t\t}\n\t\t\tfor (int i = 0; i < n; ++i)\n\t\t\t\tif (brev[i] < i)\n\t\t\t\t\tswap(a[brev[i]], a[i]);\n\t\t}\n\t\tfor (int t = 1; t < n; t <<= 1) {\n\t\t\tcd omega(cos(PI / t), sin(PI * d / t));\n\t\t\tfor (int i = 0; i < n; i += t << 1) {\n\t\t\t\tcd* p = a + i;\n\t\t\t\tcd w(1);\n\t\t\t\tfor (int j = 0; j < t; ++j) {\n\t\t\t\t\tcd x = p[j + t] * w;\n\t\t\t\t\tp[j + t] = p[j] - x;\n\t\t\t\t\tp[j] += x;\n\t\t\t\t\tw *= omega;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (d == -1) {\n\t\t\tfor (int i = 0; i < n; ++i)\n\t\t\t\ta[i] /= n;\n\t\t}\n\t}\n\n\tvector<ll> conv(const vector<int>& a, const vector<int>& b) {\n\t\tint n = a.size() - 1, m = b.size() - 1;\n\t\tif (n < 1000 / (m + 1) || n < 10 || m < 10) {\n\t\t\tvector<ll> ret(n + m + 1);\n\t\t\tfor (int i = 0; i <= n; ++i)\n\t\t\t\tfor (int j = 0; j <= m; ++j)\n\t\t\t\t\tret[i + j] += a[i] * (ll)b[j];\n\t\t\treturn ret;\n\t\t}\n\t\tint lgn = 0;\n\t\twhile ((1 << lgn) <= n + m)\n\t\t\t++lgn;\n\t\tvector<cd> ta(a.begin(), a.end()), tb(b.begin(), b.end());\n\t\tta.resize(1 << lgn);\n\t\ttb.resize(1 << lgn);\n\t\tfft(ta.begin().base(), lgn, 1);\n\t\tfft(tb.begin().base(), lgn, 1);\n\t\tfor (int i = 0; i < (1 << lgn); ++i)\n\t\t\tta[i] *= tb[i];\n\t\tfft(ta.begin().base(), lgn, -1);\n\t\tvector<ll> ret(n + m + 1);\n\t\tfor (int i = 0; i <= n + m; ++i)\n\t\t\tret[i] = ta[i].real() + 0.5;\n\t\treturn ret;\n\t}\n\n}\n\nnamespace DivHelper {\n\n\tUnsignedDigit quasiInv(const UnsignedDigit& v) {\n\t\tif (v.digits.size() == 1) {\n\t\t\tUnsignedDigit tmp;\n\t\t\ttmp.digits.resize(3);\n\t\t\ttmp.digits[2] = 1;\n\t\t\treturn tmp / v.digits[0];\n\t\t}\n\t\tif (v.digits.size() == 2) {\n\t\t\tUnsignedDigit sum = 0, go = 1;\n\t\t\tvector<int> tmp(4);\n\t\t\tgo = go.move(4);\n\t\t\tvector<UnsignedDigit> db(LGM);\n\t\t\tdb[0] = v;\n\t\t\tfor (int i = 1; i < LGM; ++i)\n\t\t\t\tdb[i] = db[i - 1] + db[i - 1];\n\t\t\tfor (int i = 3; i >= 0; --i) {\n\t\t\t\tfor (int k = LGM - 1; k >= 0; --k)\n\t\t\t\t\tif (sum + db[k].move(i) <= go) {\n\t\t\t\t\t\tsum = sum + db[k].move(i);\n\t\t\t\t\t\ttmp[i] |= 1 << k;\n\t\t\t\t\t}\n\t\t\t}\n\t\t\treturn tmp;\n\t\t}\n\t\tint n = v.digits.size(), k = (n + 2) / 2;\n\t\tUnsignedDigit tmp = quasiInv(vector<int>(v.digits.end().base() - k, v.digits.end().base()));\n\t\treturn (UnsignedDigit(2) * tmp).move(n - k) - (v * tmp * tmp).move(-2 * k);\n\t}\n\n}\n\nUnsignedDigit::UnsignedDigit(ll x) {\n\twhile (x) {\n\t\tdigits.push_back(x % MOD);\n\t\tx /= MOD;\n\t}\n\tif (digits.empty())\n\t\tdigits.push_back(0);\n}\n\nUnsignedDigit UnsignedDigit::move(int k) const {\n\tif (k == 0)\n\t\treturn *this;\n\tif (k < 0) {\n\t\tif (-k >= digits.size())\n\t\t\treturn UnsignedDigit();\n\t\treturn vector<int>(digits.begin().base() + (-k), digits.end().base());\n\t}\n\tif (digits.size() == 1 && digits[0] == 0)\n\t\treturn UnsignedDigit();\n\tUnsignedDigit ret;\n\tret.digits.resize(k, 0);\n\tret.digits.insert(ret.digits.end(), digits.begin(), digits.end());\n\treturn ret;\n}\n\nbool UnsignedDigit::operator<(const UnsignedDigit& rhs) const {\n\tint n = digits.size(), m = rhs.digits.size();\n\tif (n != m)\n\t\treturn n < m;\n\tfor (int i = n - 1; i >= 0; --i)\n\t\tif (digits[i] != rhs.digits[i])\n\t\t\treturn digits[i] < rhs.digits[i];\n\treturn false;\n}\n\nbool UnsignedDigit::operator<=(const UnsignedDigit& rhs) const {\n\tint n = digits.size(), m = rhs.digits.size();\n\tif (n != m)\n\t\treturn n < m;\n\tfor (int i = n - 1; i >= 0; --i)\n\t\tif (digits[i] != rhs.digits[i])\n\t\t\treturn digits[i] < rhs.digits[i];\n\treturn true;\n}\n\nbool UnsignedDigit::operator==(const UnsignedDigit& rhs) const {\n\tint n = digits.size(), m = rhs.digits.size();\n\tif (n != m)\n\t\treturn false;\n\treturn memcmp(digits.begin().base(), rhs.digits.begin().base(), n) == 0;\n}\n\nUnsignedDigit UnsignedDigit::operator+(const UnsignedDigit& rhs) const {\n\tint n = digits.size(), m = rhs.digits.size();\n\tvector<int> tmp = digits;\n\tif (m > n) {\n\t\ttmp.resize(m + 1);\n\t\tfor (int i = 0; i < m; ++i)\n\t\t\tif ((tmp[i] += rhs.digits[i]) >= MOD) {\n\t\t\t\ttmp[i] -= MOD;\n\t\t\t\t++tmp[i + 1];\n\t\t\t}\n\t} else {\n\t\ttmp.resize(n + 1);\n\t\tfor (int i = 0; i < m; ++i)\n\t\t\tif ((tmp[i] += rhs.digits[i]) >= MOD) {\n\t\t\t\ttmp[i] -= MOD;\n\t\t\t\t++tmp[i + 1];\n\t\t\t}\n\t\tfor (int i = m; i < n; ++i)\n\t\t\tif (tmp[i] == MOD) {\n\t\t\t\ttmp[i] = 0;\n\t\t\t\t++tmp[i + 1];\n\t\t\t}\n\t}\n\treturn tmp;\n}\n\nUnsignedDigit UnsignedDigit::operator*(const UnsignedDigit& rhs) const {\n\tvector<ll> tmp = ConvHelper::conv(digits, rhs.digits);\n\tfor (int i = 0; i + 1 < tmp.size(); ++i) {\n\t\ttmp[i + 1] += tmp[i] / MOD;\n\t\ttmp[i] %= MOD;\n\t}\n\twhile (tmp.back() >= MOD) {\n\t\tll remain = tmp.back() / MOD;\n\t\ttmp.back() %= MOD;\n\t\ttmp.push_back(remain);\n\t}\n\treturn vector<int>(tmp.begin(), tmp.end());\n}\n\nUnsignedDigit UnsignedDigit::operator/(const UnsignedDigit& rhs) const {\n\tint m = digits.size(), n = rhs.digits.size(), t = 0;\n\tif (m < n)\n\t\treturn 0;\n\tif (m > n * 2)\n\t\tt = m - 2 * n;\n\tUnsignedDigit sv = DivHelper::quasiInv(rhs.move(t));\n\tUnsignedDigit ret = move(t) * sv;\n\tret = ret.move(-2 * (n + t));\n\tif ((ret + 1) * rhs <= *this)\n\t\tret = ret + 1;\n\treturn ret;\n}\n\nUnsignedDigit UnsignedDigit::operator/(int k) const {\n\tUnsignedDigit ret;\n\tint n = digits.size();\n\tret.digits.resize(n);\n\tll r = 0;\n\tfor (int i = n - 1; i >= 0; --i) {\n\t\tr = r * MOD + digits[i];\n\t\tret.digits[i] = r / k;\n\t\tr %= k;\n\t}\n\tret.trim();\n\treturn ret;\n}\n\nUnsignedDigit UnsignedDigit::operator-(const UnsignedDigit& rhs) const {\n\tUnsignedDigit ret(*this);\n\tint n = rhs.digits.size();\n\tfor (int i = 0; i < n; ++i)\n\t\tif ((ret.digits[i] -= rhs.digits[i]) < 0) {\n\t\t\tret.digits[i] += MOD;\n\t\t\t--ret.digits[i + 1];\n\t\t}\n\tret.trim();\n\treturn ret;\n}\n\nUnsignedDigit::UnsignedDigit(const vector<int>& digits) : digits(digits) {\n\tif (this->digits.empty())\n\t\tthis->digits.resize(1);\n\ttrim();\n}\n\nvoid UnsignedDigit::trim() {\n\twhile (digits.size() > 1 && digits.back() == 0)\n\t\tdigits.pop_back();\n}\n\nstring UnsignedDigit::toString() const {\n\tstatic char buf[BASE + 1];\n\tsprintf(buf, \"%d\", digits.back());\n\tstring ret = buf;\n\tint q = ret.size();\n\tret.resize(q + BASE * (digits.size() - 1));\n\tint j = 0;\n\tfor (int i = (int)digits.size() - 2; i >= 0; --i) {\n\t\tsprintf(const_cast<char*>(ret.c_str()) + q + j * BASE, \"%05d\", digits[i]);\n\t\t++j;\n\t}\n\treturn ret;\n}\n\nUnsignedDigit::UnsignedDigit(string str) {\n\treverse(str.begin(), str.end());\n\tdigits.resize((str.size() + BASE - 1) / BASE);\n\tint cur = 1;\n\tfor (int i = 0; i < str.size(); ++i) {\n\t\tif (i % BASE == 0)\n\t\t\tcur = 1;\n\t\tdigits[i / BASE] += cur * (str[i] - '0');\n\t\tcur *= 10;\n\t}\n\ttrim();\n}\n\nUnsignedDigit pow(UnsignedDigit x, int k) {\n\tUnsignedDigit ret = 1;\n\twhile (k) {\n\t\tif (k & 1)\n\t\t\tret = ret * x;\n\t\tif (k >>= 1)\n\t\t\tx = x * x;\n\t}\n\treturn ret;\n}\n\nint main() {\n\tint m;\n\tcin >> m;\n\tstring s;\n\tcin >> s;\n\tif (s == \"0\") {\n\t\tcout << \"0\" << endl;\n\t\treturn 0;\n\t}\n\tif (m == 1) {\n\t\tcout << s << endl;\n\t\treturn 0;\n\t}\n\tUnsignedDigit n(s);\n\tUnsignedDigit x(min(n, UnsignedDigit(MOD - 1).move((n.size() + m - 1) / m - 1))), xx;\n\t{\n\t\tint top = x.size() - 1;\n\t\tint l = 0, r = MOD - 1;\n\t\twhile (l < r) {\n\t\t\tint mid = (l + r) / 2;\n\t\t\tx.digits[top] = mid;\n\t\t\tif (pow(x, m) <= n)\n\t\t\t\tl = mid + 1;\n\t\t\telse\n\t\t\t\tr = mid;\n\t\t}\n\t\tx.digits[top] = l;\n\t\tx.trim();\n\t}\n//cerr << x.toString() << endl;\n\txx = (x * (m - 1) + n / pow(x, m - 1)) / m;\n\twhile (xx < x) {\n//\t\tcout << xx.toString() << endl;\n\t\tswap(x, xx);\n\t\txx = (x * (m - 1) + n / pow(x, m - 1)) / m;\n\t}\n\tcout << x.toString() << endl;\n\n\treturn 0;\n}\n```\n",
        "postTime": 1536290134,
        "uid": 21423,
        "name": "Elegia",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P2293 \u3010[HNOI2004]\u9ad8\u7cbe\u5ea6\u5f00\u6839\u3011"
    },
    {
        "content": "# Python\u515a\u798f\u5229\n\n\u4f5c\u4e3a\u4e00\u4e2aC++\u7231\u597d\u8005\uff0c\u6211\u6700\u8ba8\u538c\u9ad8\u7cbe\u5ea6\u7684\u9898\uff0c\u6bcf\u6b21\u90fd\u8981\u5199\u5f88\u957f\u4e00\u6bb5\u4ee3\u7801\n\n\u6240\u4ee5\u4e0d\u5f97\u4e0d\n\n>\u9ad8\u7cbe\u80cc\u516c\u5f0f\u3002\n\n\u4f46Python\u5c31\u4e0d\u4e00\u6837\u4e86\uff08\u6211\u4eecPython\u81ea\u5e26\u9ad8\u7cbe\uff01\uff01\uff01\uff09\n\n\u6240\u4ee5\u8bf4\u7528Python\u505a\u9ad8\u7cbe\u5ea6\u52a0\u6cd5\uff0c\u5c31\u548c\u7528C++\u505aA+B problem\u4e00\u6837\u7b80\u5355\n\n\u8fd9\u9053\u9898\u4e5f\u662f\u4e00\u6837\uff0c\u6211\u9009\u62e9\u4e86Python\n\n### \u524d\u8a00\n\n\u672c\u4eba\u4ee5\u524d\u4ece\u6ca1\u63a5\u89e6\u8fc7Python\uff0c\u4fbf\u82b110\u5206\u949f\u81ea\u5b66\u4e86\u4e00\u4e0b\n\n### [\u6bd4\u5982\u8bf4\u8fd9\u4e2a\u7f51\u7ad9\u8bb2\u5f97\u5f88\u597d\uff0c\u521d\u5b66\u8005\u53ca\u4e0d\u4f1aPython\u8005\u53ef\u4ee5\u770b\u770b](https://www.runoob.com/python/python-tutorial.html)\n\n### \u601d\u8def\n\n\u597d\uff0c\u6211\u4eec\u56de\u5f52\u6b63\u9898\u3002\n\n\u5728\u8bb2\u601d\u8def\u524d\uff0c\u6211\u5148\u7ed9\u5927\u5bb6\u79d1\u666e\u4e00\u4e0b\u8fd9\u9053\u9898\u8981\u7528\u7684\u4e1c\u897f\uff08C++\u7bc7,Python dalao\u76f4\u63a5\u8df3\u8fc7\uff09\n\n#### input()&print()----------\u76f8\u5f53\u4e8ecin&cout\n#### a**b---------------------\u76f8\u5f53\u4e8epow(a,b)\n\n\u8981\u70b9\u5c31\u8fd9\u4e48\u591a.\n\n### \u8fd9\u91cc\u8fd8\u8981\u8bf4\u660e\u4e00\u4e0b\uff0c\u5982\u679c\u662fa**(1/b)(b\u662f\u6574\u6570)\uff0c\u90a3\u4e48\u5c31\u662f\u8868\u793aa\u7684b\u6b21\u6839\n\n\u90a3\u9898\u76ee\u4e2d\u8981\u6c42a\u7684b\u6b21\u6839\uff0c\u5c82\u4e0d\u662f\u5f88\u7b80\u5355\uff1f\n\n\u4e8e\u662f\u6211\u6572\u51fa\u4e86\u4ee5\u4e0b\u4ee3\u7801\uff1a\n\n```\nm=input()\nn=input()\nm=int(m)\nn=int(n)\nn=n**(1/m)\nprint(int(n))\n```\n\u7ed3\u679c\u662f~~AC\u00f72~~,50\u5206\uff0c5\u4e2a\u70b9RE\u60f9...\n\n\u4e8e\u662f\u8d70\u6295\u65e0\u8def\u95f4\uff0c\u6211\u53bb\u770b\u4e86\u770b\u9898\u89e3\n\n### [\u770b\u4e86\u770b\u8fd9\u4f4d\u5de8\u4f6c\u6ef4\u9898\u89e3](https://www.luogu.com.cn/blog/wjy666/solution-p2293)\u540e\uff0c\u624d\u53d1\u73b0\u8981\u7528\u4e8c\u5206\u7b54\u6848\uff01\n\n$AC$ $Code:$\n\n```\nm=input() # \u8fd9\u4e2a\u90e8\u5206\u4e5f\u53ef\u4ee5\u5199\u6210\uff1a\nn=input() # m=int(input())\nm=int(m)  # n=int(input())\nn=int(n)  #\n\nl=0 #\u65e2\u7136\u7528\u4e8c\u5206\uff0c\u90a3\u5c31\u5fc5\u987b\u8981\u6709\u5de6\u53f3\u6307\u9488\u76841\u5566\nr=1 #\u6ce8\uff1aPython\u91cc\u5982\u679c\u4e00\u4e2a\u53d8\u91cf\u5df2\u8d4b\u503c\uff0c\u90a3\u4e48\u5c31\u4e0d\u9700\u5b9a\u4e49\uff08\u6709\u522b\u4e8eC++\uff09\n\nwhile(1):              #\u5728Python\u91cc\uff0c\n    if(r**m>n):break   #while\uff0cif else\u8bed\u53e5\u540e\u90fd\u7528\uff1a\u800c\u4e0d\u662f{}\uff0c\u4e14\u91cc\u9762\u7684\u8bed\u53e5\u90fd\u8981\u7f29\u8fdb\n    l=r;r*=2 #\u8fd9\u91cc\u662f\u7c7b\u4f3cC++\u7684\u7528\u6cd5 \nwhile(l+1<r): \n    mid=(l+r)//2\n    if (mid**m<=n):l=mid\n    else:r=mid\n\nif (l**m<=n):print(l)\nelse:print(r)\n```\n\n\u5982\u679c\u4f60\u5b66\u8fc7C++\uff0c\u4f60\u5c31\u53ef\u4ee5\u5c1d\u8bd5\u5b66\u5b66Python\uff0c\u5982\u679c\u4f60\u5b66\u8fc7Python\uff0c\u4f60\u4e5f\u540c\u6837\u53ef\u4ee5\u5c1d\u8bd5\u5b66\u5b66C++\n\nC++\u548cPython\u4e5f\u6709\u5f02\u66f2\u540c\u5de5\u4e4b\u5999.\n\n~~\u70b9\u4e2a\u8d5e\u518d\u8d70\uff1f~~\n\n",
        "postTime": 1580874320,
        "uid": 46857,
        "name": "hmy521",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P2293 \u3010[HNOI2004]\u9ad8\u7cbe\u5ea6\u5f00\u6839\u3011"
    },
    {
        "content": "\u601d\u8def\u5c31\u662f\u4e8c\u5206+\u5feb\u901f\u5e42\uff1b\n\n\u8fd9\u662f\u6211\u7684\u975e\u91cd\u8f7d\u8fd0\u7b97\u7b26\u7684\u9ad8\u7cbe\u6a21\u7248\n\nhttp://blog.csdn.net/largecub233/article/details/57410304\n\n\u5982\u679c\u5931\u6548\u4e86\u8bf4\u660e\u6211\u66f4\u65b0\u6a21\u7248\u4e86\uff0c\u53ef\u4ee5\u5230\u6211\u535a\u5ba2\u91cc\u627e\uff1b\n\n\u6211\u7684\u535a\u5ba2\uff1ahttp://blog.csdn.net/largecub233\n\n\u6ca1\u5199\u5168\uff0c\u6211\u4f1a\u5b8c\u5584\u7684\uff08\u6bd4\u5982\u8d1f\u6570\uff09\uff1b\n\n\u5982\u679c\u4e0a\u9762\u7684\u7a0b\u5e8f\u6709\u95ee\u9898\uff0c\u8bf7\u544a\u8bc9\u6211\uff1b\n\n\u76ee\u524dfop\\_zz\u5df2\u7ecf\u53d1\u73b0\u4e86\u6211\u9ad8\u7cbe\u6a21\u7248\u7684\u4e00\u4e2abug\u611f\u8c22\uff1b\n\n\u7136\u540e\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u6bd2\u7624\u9898\uff1b\n\n\u4e00\u5b9a\u8981\u9ad8\u7cbe\u538b\u4f4d\uff1b\n\n\u6211\u538b1e9\u7684\uff1b\u7528unsigned long long \u5b58\uff1b\n\n\u5927\u5bb6\u4e0d\u8981\u8fd9\u6837\u30021e8\u5c31\u597d\u4e86\uff1b\n\n\u4ec0\u4e48\u662f\u538b\u4f4d\uff1b\n\n\u6bd4\u5982\u4e00\u4e2a\u6570\uff1b\n\n123456789\n\n\u6211\u538b4\u4f4d\uff1b\u5c31\u662f\n\n6789\u3001\u3001\n\n2345\u3001\u3001\n\n1\u3001\u3001\n\n\u8fd9\u6837\u8fd0\u7b97\uff0c\u4f1a\u6bd4\u5341\u8fdb\u5236\u5feb\uff1b\n\n\u6bd4\u5982\n12000078\n\n\u538b\u597d\u5c31\u662f\n\n78\u3001\u3001\n\n1200\u3001\u3001\n\n\u6240\u4ee5\u6211\u4eec\u8f93\u51fa\u65f6\u8981\u641e\u597d\u524d\u5bfc0\uff1b\n\n\u8f93\u51fa\u524d\u5bfc0\u8fd8\u8981\u7279\u5224\u672c\u8eab\u5c31\u662f0\u7684\u60c5\u51b5\uff1b\n\n\u7136\u540e\uff0c\n\n\n```cpp\n#include<cstdio>\n#include<cstdlib>\n#include<iostream>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#define Ll unsigned long long\nusing namespace std;\nconst Ll NN=1e9;\nconst int N=9;\nstruct H{\n    Ll a[1500],len;\n    H(){memset(a,0,sizeof a);len=1;}\n};\nint n;\nH s;\nvoid init(H &a){//\u8bfb\u5165 \n    string s; cin>>s; \n    int l; \n    a.len=0;\n    for(int r=s.length()-1;r>=0;r-=N){\n        a.len++;                      \n        if(r>=N-1)l=r-N+1;else l=0;\n        for(int i=l;i<=r;i++)a.a[a.len]=a.a[a.len]*10+s[i]-48;\n    }\n}  \nvoid outit(H a){//\u8f93\u51fa \n    printf(\"%d\",a.a[a.len]);\n    for(int i=a.len-1;i;i--){\n        for(int k=NN/10;a.a[i]<k;k/=10)printf(\"0\");\n        if(a.a[i])printf(\"%d\",a.a[i]); \n    }printf(\"\\n\");    \n}\nvoid in(H &a,int x){//\u8d4b\u503c \n    if(!x)return;\n    a.len=0;\n    while(x){a.a[++a.len]=x%NN;x=x/NN;}\n}\nbool bigD(H a,H b){//\u6bd4\u8f83\u662f\u5426\u5927\u4e8e\u7b49\u4e8e \n    if(a.len>b.len)return 1;\n    if(a.len<b.len)return 0;\n    for(int i=a.len;i;i--)\n        if(a.a[i]!=b.a[i])\n            if(a.a[i]>b.a[i])return 1;else return 0;\n    return 1;\n}\nH jia(H a,H b){//\u52a0\u6cd5 \n    H c;\n    int l=max(a.len,b.len);\n    for(int i=1;i<=l;i++){\n        c.a[i]+=a.a[i]+b.a[i];\n        c.a[i+1]=c.a[i]/NN;\n        c.a[i]%=NN;\n    }\n    if(c.a[l+1])l++;\n    c.len=l;\n    return c;\n}\nH chu(H a){//\u9664\u6cd5 \n    H c;\n    if(a.len==1){c.a[1]=a.a[1]>>1;return c;}\n    for(int i=a.len;i;i--){\n        if(a.a[i]&1ll)a.a[i-1]+=NN;\n        c.a[i]=a.a[i]>>1;\n    }\n    if(c.a[a.len])c.len=a.len;else c.len=a.len-1;\n    return c;\n}\nH rrr(H a){//-1\u64cd\u4f5c \n    if(a.len==1){\n        a.a[1]--;return a;\n    }\n    H c=a;\n    c.a[1]--;\n    int l=1;\n    while(c.a[l]<0){\n        c.a[l]=NN-1;\n        c.a[++l]--;\n    }\n    if(!c.a[c.len])c.len--;\n    return c;\n}\nH chen(H a,H b){//\u4e58\u6cd5 \n    H z;\n    z.len=a.len+b.len+2;\n    for(int i=1;i<=a.len;i++)\n    for(int j=1;j<=b.len;j++)z.a[i+j-1]+=(a.a[i]*b.a[j]);\n    for(int i=1;i<=z.len;i++)z.a[i+1]+=z.a[i]/NN,z.a[i]%=NN; //\u53d6mo\u6162\uff0c\u653e\u5230\u5916\u9762\u53d6   \n    while(z.len>1&&!z.a[z.len])z.len--;\n    return z;\n}\nH ksm(H a,int n){//\u5feb\u901f\u5e42 \n    if(n==1)return a;\n    H c=ksm(a,n>>1);\n    c=chen(c,c);\n    if(n&1)c=chen(c,a);\n    return c;\n}\nbool Chu(H a){//\u672c\u6765\u8fd9\u4e2a\u51fd\u6570\u540d\u662f\u9a82\u51fa\u9898\u4eba\u7684\uff0c\u6015\u548c\u8c10\uff0c\u5c31\u6539\u4e86 \n    if(a.len*n-n+1>s.len)return 0;\n    if(bigD(s,ksm(a,n)))return 1;\n    return 0;\n}\nint main(){\n//    freopen(\"calc.in\",\"r\",stdin);\n//    freopen(\"calc.out\",\"w\",stdout);\n    scanf(\"%d\",&n);\n    init(s);\n    if(n==1){outit(s);return 0;}\n    H l,r,mid,ans;\n    in(l,1);\n    r=s;\n    while(bigD(r,l)){\n        mid=jia(l,r);\n        mid=chu(mid);\n        if(Chu(mid)){\n            if(bigD(mid,ans))ans=mid;\n            H c;\n            in(c,1);\n            l=jia(mid,c);\n        }else r=rrr(mid);         \n    }\n    outit(ans);\n}\n\n```",
        "postTime": 1488179061,
        "uid": 7442,
        "name": "\u5de8\u578b\u65b9\u5757",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2293 \u3010[HNOI2004]\u9ad8\u7cbe\u5ea6\u5f00\u6839\u3011"
    },
    {
        "content": "\u53d7\u4e0a\u9762dalao\u7684\u542f\u53d1\uff0c\u8fd9\u91cc\u7ed9\u51fa\u4e00\u4e2a\u590d\u6742\u5ea6\u4e3a$\\Theta(mn\\log mn)$\uff0c\u4f46\u662f\u7406\u8bba\u5e38\u6570\u5c0f\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d$n$\u662f\u8f93\u5165\u7684\u5927\u6574\u6570\u7684\u4f4d\u6570\u3002\n\n\u8fd9\u91cc\u9700\u8981\u4e00\u4e9b\u524d\u7f6e\u77e5\u8bc6\u3002\u57fa\u4e8e\u8457\u540d\u76842012\u5e74WC\u7684\u300a\u7406\u6027\u6109\u60a6\uff1a\u9ad8\u7cbe\u5ea6\u6570\u503c\u8ba1\u7b97\u300b\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5728\u6700\u5927\u4f4d\u6570\u4e3a$n$\u65f6\u57fa\u4e8e\u725b\u987f\u8fed\u4ee3\u6cd5\u7684$\\Theta(n\\log n)$\u7684\u9ad8\u7cbe\u5ea6\u4e58\u6cd5\u8fd0\u7b97\u3002\u524d\u9762\u7684EntropyIncreaser\u5927\u4f6c\u6839\u636e\u51fd\u6570$f(x)=x^m-A$\u5f97\u5230\u4e86\u8fed\u4ee3\u65b9\u7a0b\u89e3$x_{k+1}=\\left\\lfloor{\\dfrac{(m-1)x_k+\\lfloor{}n/x_k^{m-1}\\rfloor}{m}}\\right\\rfloor$\u3002\u7136\u800c\u8fd9\u4e2a\u5b9e\u73b0\u9700\u8981\u4f9d\u9760\u4e00\u4e2a\u6709\u8f85\u52a9\u51fd\u6570\u4e14\u5e38\u6570\u4e0d\u5c0f\u7684$\\Theta(n\\log n)$\u7684\u9ad8\u7cbe\u5ea6\u9664\u6cd5\u8fd0\u7b97\u3002\u5176\u5b9e\u8fd9\u4e2a\u5b9e\u73b0\u4e0d\u7b97\u96be\uff0c\u4f46\u662f\u5176\u4e2d\u53ef\u80fd\u4f1a\u5f15\u5165\u4e00\u4e9b\u7531\u9ad8\u7cbe\u5ea6\u9664\u6cd5\u6240\u5e26\u6765\u7684\u8bef\u5dee\uff0c\u5177\u4f53\u7684\u8bef\u5dee\u53ef\u80fd\u6709\u70b9\u96be\u5206\u6790\u3002\n\n\u53e6\u5916\u5c31\u662f\u7ecf\u8fc7\u8ba1\u7b97\uff0c\u5bb9\u6613\u77e5\u9053\u7ed3\u679c\u4e3a$n$\u7684\u9ad8\u7cbe\u5ea6\u5feb\u901f\u5e42\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u4e25\u683c\u7684$\\Theta(n\\log n)$\uff0c\u540c\u65f6\u8fd9\u4e5f\u662f\u672c\u9898\u7684\u7b97\u6cd5\u7406\u8bba\u4e0b\u9650\u3002\n\n\u5b58\u4e0d\u5b58\u5728\u4e0d\u9700\u8981\u501f\u52a9\u9ad8\u7cbe\u5ea6\u9664\u6cd5\u7684\u8ba1\u7b97\u65b9\u5f0f\u5462\uff1f\u5b58\u5728\u7684\u3002\u5728\u4e0a\u9762\u6587\u6863\u7684\u540e\u9762\u6709\u4e00\u4e2a\u4e0d\u9700\u8981\u501f\u52a9\u9ad8\u7cbe\u5ea6\u9664\u6cd5\u7684\u9ad8\u7cbe\u5ea6\u5f00\u5e73\u65b9\u7684\u5b9e\u73b0\u7b97\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\Theta(n\\log n)$\u3002\u57fa\u4e8e\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u53ef\u4ee5\u6765\u8003\u8651\u4e00\u4e0b\u5bf9\u5e94\u7684\u9ad8\u7cbe\u5ea6\u5f00$m$\u6b21\u65b9\u7684\u65b9\u6cd5\u3002\n\n\u5bf9\u4e8e\u7ed9\u5b9a\u7684$A$\uff0c\u6211\u4eec\u8003\u8651\u8fed\u4ee3\u8ba1\u7b97\n$$B=\\dfrac{p^{mk}}{A^{\\frac{m-1}{m}}}$$\n\u7684\u503c\uff0c\u8ba1\u7b97\u51fa\u6765\u540e\u5bf9$\\frac{AB}{p^{mk}}$\u505a\u4e2a\u5e38\u6570\u7ea7\u7684\u8c03\u6574\u5c31\u597d\u3002\u5728\u8fd9\u91cc\uff0c$p$\u8868\u793a\u9ad8\u7cbe\u5ea6\u7684\u8fdb\u5236\u6570\uff0c\u800c$A$\u7684\u4f4d\u6570\u9650\u5236\u5728$m(k-1)$\u548c$mk$\u4e4b\u95f4\uff0c\u4e5f\u5c31\u662f$k=\\left\\lceil\\frac{n}{m}\\right\\rceil,n=mk-\\alpha$\u3002\n\n\u4e3a\u5f97\u5230\u8fd9\u4e2a\uff0c\u8003\u8651\u51fd\u6570\n$$f(x)= \\frac{1}{x^m}- \\frac{A^{m-1}}{p^{m^2k}}$$\n\u5e76\u5bf9\u4e4b\u4f7f\u7528\u725b\u987f\u8fed\u4ee3\u6cd5\uff0c\u5f97\u5230\u8fed\u4ee3\u65b9\u7a0b\n$$B= \\frac{m+1}{m}B_0- \\frac{A^{m-1}B_0^{m+1}}{mp^{m^2k}}$$\n\u8fd9\u4e2a\u8fed\u4ee3\u65b9\u7a0b\u4e2d\u6240\u7528\u7684\u6240\u6709\u9664\u6cd5\uff0c\u9664\u4e86\u9664\u4ee5$m$\u7528$\\Theta(n)$\u7684\u9ad8\u7cbe\u5ea6\u9664\u5355\u7cbe\u5ea6\u9664\u6cd5\u4ee5\u5916\uff0c\u9664\u4ee5$p^{m^2k}$\u53ef\u4ee5\u76f4\u63a5\u7528\u79fb\u4f4d\u6765\u5b9e\u73b0\uff0c\u590d\u6742\u5ea6\u4e5f\u4e0d\u4f1a\u8d85\u8fc7$\\Theta(n)$\u3002\n\n\u600e\u6837\u8ba1\u7b97\u8fed\u4ee3\u51fa$B$\uff1f\u9664\u53bb\u66b4\u529b\u53cd\u590d\u8fed\u4ee3\u4ee5\u5916\u4e5f\u6709\u522b\u7684\u5b9e\u73b0\u65b9\u6cd5\uff0c\u5728\u8fd9\u91cc\u91c7\u7528\u540c\u6587\u6863\u4e0a\u4e00\u81f4\u7684\u65b9\u5f0f\u3002\u53d6$i<k, r=mi-\\alpha$\uff0c\u518d\u8bbe$A_i$\u4e3a$A$\u7684\u524d$r$\u4f4d\u3002\u5982\u679c\u6211\u4eec\u80fd\u591f\u5f97\u5230$A_i$\u5bf9\u5e94\u7684$B_i$\uff0c\u90a3\u4e48\u5bf9$B_i$\u505a\u51fa\u8c03\u6574\uff0c\u5c31\u80fd\u591f\u4f5c\u4e3a\u8fed\u4ee3\u51fa$A$\u5bf9\u5e94\u7684$B$\u7684\u521d\u59cb\u503c\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86$B_i$\u7684\u503c\uff0c\u7531\n$$\\boxed{B_i=\\frac{p^{mi}}{A^\\frac{m-1}{m}}=\\frac{p^{mk}}{(A_ip^{m(k-i)})^{\\frac{m-1}{m}}}\\frac{1}{p^{k-i}}\\approx\\frac{p^{mk}}{A^{\\frac{m-1}{m}}}\\frac{1}{p^{k-i}}=B}$$\n\u53ef\u4ee5\u77e5\u9053\u5728\u5f97\u5230$B_i$\u4ee5\u540e\u4f5c\u4e2a\u8865\u96f6/\u79fb\u4f4d\u5373\u53ef\u4ee5\u5f97\u5230\u8ba1\u7b97$B$\u7528\u7684\u8fd1\u4f3c\u521d\u59cb\u503c\n\n\u600e\u4e48\u53d6$i$\u503c\uff1f\u5bf9\u4e8e\u6bcf\u4e2a$k$\uff0c\u6211\u4eec\u53ef\u4ee5\u53d6$i=\\left\\lfloor\\frac{k+1}{2}\\right\\rfloor$\uff0c\u5e76\u4e14\u5728$k=2$\u7684\u65f6\u5019\u505a\u4e8c\u5206\u66b4\u529b\u4f30\u7b97$B=\\frac{p^{mk}}{A^{\\frac{m-1}{m}}}\\approx\\sqrt[m]{A}p^{mk}/A$\u3002\u6ce8\u610f\u4e3a\u4e86\u907f\u514d\u5927\u7684\u8bef\u5dee\uff0c\u6211\u4eec\u907f\u514d\u8fdb\u5165$k=1$\u7684\u60c5\u51b5\uff0c\u5e76\u4e14\u4e3a\u907f\u514d\u6b7b\u5faa\u73af\uff0c\u5728$k\\leq2$\u7684\u65f6\u5019\u76f4\u63a5\u66b4\u529b\u4e8c\u5206\u8ba1\u7b97$\\sqrt[m]{A}$\u3002\n\n\u4e0b\u9762\u8fdb\u884c\u8bef\u5dee\u5206\u6790\uff08\u4e5f\u662f\u6700\u96be\u6574\u7406\u7684\u90e8\u5206\uff09\u3002\u9996\u5148\u6211\u4eec\u5c06\u7528\u4e8e\u8fed\u4ee3\u7684\u51fd\u6570$f(x)= \\frac{1}{x^m}- \\frac{A^{m-1}}{p^{m^2k}}$\u8fdb\u884c\u5f52\u4e00\u5316\uff0c\u53ea\u7814\u7a76\u5b83\u7684\u76f8\u5bf9\u8bef\u5dee\u53d8\u5316\n$$f_0(x)=\\frac{1}{x^\\alpha}-1\\qquad (\\alpha>=1)$$\n\u5bf9\u8fd9\u4e2a\u51fd\u6570\u5728$x<1$\u7684\u65f6\u5019\u505a\u725b\u987f\u8fed\u4ee3\u6cd5\uff08$x>1$\u7684\u65f6\u5019\u505a\u725b\u987f\u8fed\u4ee3\u6cd5\u4f1a\u8ba9\u7b2c\u4e00\u6b21\u8fed\u4ee3\u7684\u8bef\u5dee\u53d8\u5927\uff09\n$$x=g(x_0)=x_0-\\frac{f_0(x_0)}{f_0'(x_0)}=\\frac{\\alpha+1}{\\alpha}x_0-\\frac{{x_0}^{\\alpha+1}}{\\alpha}$$\n\u8003\u8651\u8ba1\u7b97\u76f8\u5bf9\u8bef\u5dee\u51fd\u6570$1-x$\uff0c\u6211\u4eec\u6709\n$$\\lim\\limits_{x\\to1}\\frac{1-g(x)}{(1-x)^2}=\\lim\\limits_{x\\to1}\\frac{(\\alpha+1)x^{\\alpha-1}}{2}=\\frac{\\alpha+1}{2}<+\\infty$$\n\u8fd9\u4e2a\u8ba1\u7b97\u8fc7\u7a0b\u662f\u4e00\u4e9b\u4eba\u6700\u559c\u6b22\u7684\u6d1b\u5fc5\u8fbe\u6cd5\u5219\uff0c\u56e0\u800c\u7701\u7565\u4e0d\u8bb2\u3002\u4f46\u7531\u4e0a\u9762\u8fd9\u4e2a\u5f0f\u5b50\u53ef\u4ee5\u770b\u5230\uff0c\u7c7b\u4f3c\u4e8e$f(x)=\\frac{1}{x^\\alpha}-A$\u7684\u51fd\u6570\uff0c\u5176\u8fed\u4ee3\u662f\u4e8c\u9636\u6536\u655b\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u5982\u679c\u8d77\u59cb\u503c\u7684\u6709\u6548\u6570\u4f4d\u662f\u89e3\u7684\u6709\u6548\u6570\u4f4d\u7684\u4e00\u534a\u4ee5\u4e0a\uff0c\u90a3\u4e48\u7406\u8bba\u4e0a\u53ea\u9700\u8981\u4e00\u6b21\u8fed\u4ee3\u8bef\u5dee\u5c31\u4f1a\u5c0f\u4e8e1\uff0c\u4e5f\u5c31\u4e0d\u518d\u9700\u8981\u66f4\u591a\u7684\u8c03\u6574\u5c31\u80fd\u8fbe\u5230\u76ee\u6807\u6570\u3002\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u5f3a\u8c03\u8981\u4f7f\u7528$i>n/2$\uff0c\u56e0\u4e3a\u8fd9\u6837\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u53ef\u4ee5\u907f\u514d\u5d4c\u5957\u65f6\u7684\u8c03\u6574\u3002\n\n\u7136\u800c\uff0c\u8fd9\u91cc\u8fd8\u6709\u4e24\u4e2a\u8bef\u5dee\u3002\u7b2c\u4e00\u4e2a\u5bb9\u6613\u5904\u7406\u7684\u8bef\u5dee\u662f\u7531\u4e8e\u6574\u6570\u5b58\u50a8\u9020\u6210\u7684\u7701\u7565\u8bef\u5dee\u3002\u8fd9\u4e2a\u8bef\u5dee\u5904\u7406\u4e0d\u5904\u7406\u90fd\u6ca1\u6709\u592a\u5927\u5173\u7cfb\uff0c\u53ef\u4ee5\u770b\u4f5c\u7531\u8fed\u4ee3\u8ba1\u7b97\u4e2d\u81ea\u52a8\u7684\u6d88\u9664\u6389\u3002\u53e6\u5916\u4e00\u4e2a\u8bef\u5dee\u5176\u5b9e\u662f\u8fed\u4ee3\u524d\u786e\u5b9a\u521d\u59cb\u503c\u65f6\u7684\u8bef\u5dee\u3002\u8003\u8651\u4e0a\u9762\u90a3\u4e2a\u5e26\u6846\u7684\u8ba1\u7b97\u4e2d\u7684\n$$\\frac{p^{mk}}{(A_ip^{m(k-i)})^{\\frac{m-1}{m}}}\\frac{1}{p^{k-i}}\\approx\\frac{p^{mk}}{A^{\\frac{m-1}{m}}}\\frac{1}{p^{k-i}}$$\n\u8fd9\u91cc\u6709\u4e2a\u4e0d\u4e25\u8c28\u7684\u5730\u65b9\uff1a\u90a3\u4e2a\u7ea6\u7b49\u4e8e\u53f7\u5b9e\u9645\u4e0a\u662f\u5927\u4e8e\u53f7\u3002\u8fd9\u662f\u56e0\u4e3a\u8ba1\u7b97$B_i$\u662f\u76f8\u5f53\u4e8e\u628a\u5206\u6bcd\u4e2d\u7684$A$\u672b\u5c3e\u7684\u6570\u5b57\u5168\u90e8\u62b9\u4e3a0\uff0c\u5bfc\u81f4\u5206\u6bcd\u53d8\u5c0f\uff0c\u6574\u4f53\u5c06\u5927\u8fc7\u6839$B$\u3002\u4e3a\u907f\u514d\u8fd9\u4e00\u95ee\u9898\uff0c\u53ef\u4ee5\u8003\u8651\u5c06\u4ece\u4e0b\u5c42\u4f20\u9012\u56de\u6765\u7684$B_i$\u5411\u5c0f\u7684\u65b9\u5411\u8fdb\u884c\u8c03\u6574\uff0c\u4f7f\u8c03\u6574\u540e\u7684$B_i$\u6bd4\u6b63\u89e3\u5c0f\uff0c\u9002\u5408\u4f5c\u4e3a\u521d\u59cb\u503c\u8fdb\u884c\u8fed\u4ee3\u3002\n\n\u590d\u6742\u5ea6\u5206\u6790\uff1a\u8bbe\u4f4d\u6570\u4e3a$n$\uff0c\u5f00\u6839\u6570\u4e3a$m$\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$T(n,m)$\uff0c\u8003\u8651\u6bcf\u4e00\u5c42\u590d\u6742\u5ea6\u6700\u9ad8\u7684\u90e8\u5206\u662f\u8ba1\u7b97$A^{m-1}B_0^{m+1}$\uff0c\u8fd9\u4e2a\u90e8\u5206\u6700\u591a\u662f$\\Theta(nm)$\u4f4d\u7684\uff0c \u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u9012\u63a8\u516c\u5f0f\u4e3a\n$$T(n,m)=\\Theta(nm\\log nm)+T\\left(\\frac{n}{2},m\\right)$$\n\u53ef\u4ee5\u89e3\u5f97\n$$T(n,m)=\\Theta(nm\\log nm)$$\n\u6bd4\u8f83\u8981\u547d\u7684\u662f\u7a7a\u95f4\u590d\u6742\u5ea6$\\Theta(nm)$\uff0c\u4e00\u822c\u7684\u9898\u76ee\u6ca1\u4ec0\u4e48\uff0c\u7136\u800c\u8fd9\u4e2a\u9898\u76ee\u7684\u7a7a\u95f4\u9650\u5236\u662f${\\color{red}125kb}$\uff0c\u8fd9\u4e2a\u5176\u5b9e\u6709\u70b9\u8981\u547d\uff0c\u6bd4\u5982\u8bf4FFT\u91cc\u9762\u9884\u5904\u7406\u5355\u4f4d\u6839\u6216\u8005\u662f\u8ba1\u7b97\u4e34\u65f6\u53d8\u91cf$A^{m-1}B_0^{m+1}$\u4e4b\u7c7b\u7684\u90fd\u6709\u53ef\u80fd\u4f1a\u7206\u6389\u8fd9\u4e2a\u7a7a\u95f4\u9650\u5236\uff0c\u6240\u4ee5\u8fd9\u4e2a\u65b9\u6cd5\u9700\u8981\u591a\u538b\u4f4d\u3002\n\n\u9644\u4e0a~~\u5783\u573e~~\u81ea\u5199\u4ee3\u7801\n\n```cpp\n#ifndef TBBLINT_H\n#define TBBLINT_H\n#include <iostream>\t//LInt.h version:2.4.1\n//\u5934\u6587\u4ef6\u7701\u7565\ntypedef unsigned long long u64;\ntypedef long long i64;\ntypedef unsigned u32;\nnamespace tbb\t{\n\tconst double Pi= 3.14159265358979323846;\n\t//using std::cin...\n\tvoid Fast_out(u32 a)\t{\n\t\tif(a==0) {\n\t\t\tputchar('0');\n\t\t\treturn;\n\t\t}\n\t\tif(a>9) {\n\t\t\tFast_out(a/10);\n\t\t\tputchar('0'+a%10);\n\t\t} else\tputchar('0'+a);\n\t}\n\tinline void Fast_0_out(u32 a, int len= 4)\t{\n\t\tif(len>=2)\tif(a<10)\tputchar('0');\n\t\tif(len>=3)\tif(a<100)\tputchar('0');\n\t\tif(len>=4)\tif(a<1000)\tputchar('0');\n\t\tFast_out(a);\n\t}\n\tint Log_2(int base) {\n\t\tint i;\n\t\tfor(i=0; ((1<<i)<base) & (i<32) ;i++);\n\t\treturn i;\n\t}\n\t// template<typename T, size_T> FFT(const std::array<T, N> &X, bool flag) {\n\tstd::vector<std::complex<double> > FFT(const std::vector<std::complex<double> > &X, bool flag) {\n\t\t//flag -> inverse flag\n\t\tusing std::complex;\n\t\tusing std::vector;\n\t\ttypedef complex<double> cmxd;\n\t\tint L=X.size();\n\t\tif(L==1)\treturn X;\n\t\tstatic const int vol= 262144;\n    \tstatic bool pre_init= true;\n    \tstatic cmxd root[vol+1];\n\t\tif(pre_init)    {\n        \tfor(int i=0; i<=vol; i++) root[i]= exp(cmxd(0, 2*Pi/vol*i));\n        \tpre_init= false;\n    \t}\n\t\tint* rev;   rev= new int [L];\trev[0]= 0, rev[1]= L/2;\n    \t{for(int i=2; i<L; i++)  rev[i]=(rev[i&1])|(rev[i>>1]>>1);}\n\t\tvector< complex<double> > A(L);\n\t\tfor(int i=0; i<L; i++)\tA[i]= X[rev[i]];\n\t\tfor(int size=2; size<=L; size<<=1)\t{\n\t\t\tfor(int k=0; k<L; k+=size)\t{\n\t\t\t\tfor(int i=0; i<size/2; i++)\t{\n\t\t\t\t\tcmxd R= (!flag)? root[vol/size*i]: root[vol- vol/size*i];\n\t\t\t\t\tcmxd p= A[k+i], q= A[k+size/2+i]* R;\n\t\t\t\t\tA[k+i]= p+q;\tA[k+size/2+i]= p-q;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag)    for(int i=0; i<L; i++)  A[i]/=L;\n\t\tdelete rev;\n\t\treturn A;\n\t}\n\tinline int s2i(const char *begin, const char *end) {//converse string to int\n\t\tint tmp= 0, sig= 1;\n\t\tif(*begin=='+'||*begin=='-')\tsig= (*(begin++)=='+')?1:-1;\n\t\tfor(const char *t= end-1; t>= begin; t--)\ttmp= tmp*10+ (*t-'0');\n\t\treturn tmp*sig;\n    }\n\tstruct LInt\t{\n\t//elements\n\t\tshort sign;\n\t\tint d;\n\t\tu32 *num;\n\t//define function/initial\n\t\tLInt (void ):sign(0),d(0),num(0){}\n\t\tLInt (bool b, int code= 0):sign(0),d(0)\t{\n\t\t\tif(b)\t{num=new u32[0];}\n\t\t\telse\t{\n\t\t\t\tnum= 0;\n\t\t\t\tif(code== 1)\tsign= 2;\n\t\t\t\tif(code== -1)\tsign= -2;\n\t\t\t}\n\t\t}\n\t\t//\u672c\u9898\u4e2d\u7528\u4e0d\u5230\u7684\u8f6c\u6362\u51fd\u6570\n\t\tLInt (const char* inString)\t{\n\t\t\tint i, len;\n\t\t\tbool flag=true, minus=false;\n\t\t\tif(inString[0]=='-')\t{minus=true; inString++;}\n\t\t\telse\tif(inString[0]=='+')\t{minus=false;\tinString++;}\n\t\t\tlen=strlen(inString);\n\t\t\t//check string is +/- inf whether or not\n\t\t\tif(strcmp(inString, \"inf\")==0)\t{sign= minus? -2: 2;\td=0;\tnum=0;\treturn ;}\n\t\t\t//check string is full of numbers or not\n\t\t\tfor(i=0; i<len&&flag; i++)\tflag= flag&&('0'<=inString[i]&&inString[i]<='9');\n\t\t\tif(!flag||len== 0)\t{d=sign=0;\tnum=0; return ;}\n\t\t\t//ignore all 0 at the begin of string\n\t\t\tfor(; *inString=='0'; inString++, len--);\n\t\t\tif(*inString=='\\0')\t{d=sign=0;\tnum= new u32[0]; return ;}\n\t\t\t//string is a normal number\n\t\t\td= (len+3)/4;\tnum= new u32[d]();\n\t\t\tsign= minus? -1: 1;\n\t\t\tint j, temp;\n\t\t\tfor(temp=0, i=len, j=0; j<len; j++)\t{\n\t\t\t\ttemp= temp*10 + inString[j]-'0';\n\t\t\t\ti-=1;\n\t\t\t\tif(i%4==0)\tnum[i/4]= temp, temp= 0;\n\t\t\t}\n\t\t}\n\t\tLInt (const string &inString_):num(0)\t{\n\t\t\t*this= inString_.c_str();\n\t\t}\n\t\tLInt (const LInt &A):sign(A.sign), d(A.d)\t{\n\t\t\tnum= new u32[d];\n\t\t\tfor(int i=0; i<d; i++)\tnum[i]= A.num[i];\n\t\t}\n\t\tLInt (const u32 *inNum, int k):sign(1){\n\t\t\twhile(k>0 && inNum[k-1]==0)\tk--, inNum++;\n\t\t\td=k;\tnum= new u32[k];\n\t\t\tmemset(num,0,k*sizeof(u32));\n\t\t\tfor(int i=0; i<k; i++)\tnum[i]= inNum[i];\n\t\t\tthis->sho();\n\t\t}\n\t//undo function\n\t\tvirtual ~LInt() {if(num!=0)\tdelete[] num;}\n\t//assignment operator\n\t\tLInt & operator=(const LInt &B)\t{\n\t\t\tsign=B.sign;\td=B.d;\n\t\t\tif(num!=0)\tdelete[] num;\n\t\t\tif(B.isNaN())\tnum= 0;\n\t\t\telse\t{num= new u32[d];\tfor(int i=0; i<d; i++)\tnum[i]=B.num[i];}\n\t\t\treturn *this;\n\t\t}\n\t\tLInt & operator=(const char *inString) {\n\t\t\tLInt temp(inString);\n\t\t\td= temp.d; sign= temp.sign;\n\t\t\tif(num!=0)\tdelete[] num;\n\t\t\tnum= temp.num; temp.num=0;\n\t\t\treturn *this;\n\t\t}\n\t\tinline LInt & operator=(bool b)  {return *this=LInt(b);}\n        inline LInt & operator=(int i)  {return *this= LInt(i);}\n\t\tinline LInt & operator=(i64 i)\t{return *this= LInt(i);}\n\t\tinline LInt & operator=(u64 u)\t{return *this= LInt(u);}\n\t//compare operator\n\t\tbool operator<(const LInt &B) const\t{\n\n\t\t\tconst LInt &A= *this;\n\t\t\tif(A.isNaN()||B.isNaN())\treturn false;\n\t\t\tif(A.sign<B.sign)\treturn true;\n\t\t\tif(A.sign>B.sign)\treturn false;\n\t\t\tif(sign==2||sign==-2||sign==0)\treturn false;\n\t\t\tif(sign==-1)\t{\n\t\t\t\tif(A.d!=B.d)\treturn !(A.d<B.d);\n\t\t\t\tfor(int i=d-1; i>=0; i--)\tif(A.num[i]!=B.num[i])\treturn !(A.num[i]<B.num[i]);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif(sign==1)\t{\n\t\t\t\tif(A.d!=B.d)\treturn A.d<B.d;\n\t\t\t\tfor(int i=d-1; i>=0; i--)\tif(A.num[i]!=B.num[i])\treturn A.num[i]<B.num[i];\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\t\t//\u8fd9\u91cc\u662f\u5927\u5c0f\u6bd4\u8f83\u7684\u4ee3\u7801\uff0c\u7701\u7565\u4e86\n\t//functions\n\t\tLInt abs()\tconst {\n\t\t\tLInt ans(*this);\n\t\t\tif(ans.sign<0)\tans.sign=-ans.sign;\n\t\t\treturn ans;\n\t\t}\n\t\tinline LInt abs(const LInt &b) const\t{return b.abs();}\n\t\tvoid sho()\t{\n\t\t\tif(sign==2||sign==-2)\t{\n\t\t\t\td=0;\n\t\t\t\tif(num!=0)\t{delete[] num;\tnum=0;}\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tif(sign==0)\t{\n\t\t\t\td=0;\n\t\t\t\tif(num!=0)\t{delete[] num;\tnum= new u32[0];}\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tint i=this->d-1;\n\t\t\twhile(i>=0&&num[i]==0)\ti--;\n\t\t\tif(i<0)\t{\n\t\t\t\tif(num)\tdelete[] num;\n\t\t\t\tnum=new u32[0];\tsign=d=0;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis->d=i+1;\n\t\t\tu32 *pre=this->num;\n\t\t\tnum=new u32[this->d];\n\t\t\tfor(int j=0; j<this->d; j++)\tnum[j]=pre[j];\n\t\t\tdelete [] pre;\n\t\t\treturn;\n\t\t}\n\t\tvoid print() const\t{\n\t\t\tif(sign==2||sign==-2)\t{\n\t\t\t\tif(sign==-2)\tputchar('-');\n\t\t\t\tprintf(\"inf\");\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tif(sign==0)\t{\n\t\t\t\tif(num==0)\tprintf(\"NaN\");\n\t\t\t\telse\tputchar('0');\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif(sign==-1)\tputchar('-');\n\t\t\tFast_out(num[d-1]);\n\t\t\tfor(int i=d-2; i>=0; i--)\tFast_0_out(num[i]);\n\t\t}\n\t\tstring print_str()\tconst\t{\n\t\t\tif(sign==0)\treturn num==0?string(\"NaN\"):string(\"0\");\n\t\t\tif(sign==2||sign==-2)\treturn sign==-2?string(\"-inf\"):string(\"inf\");\n\t\t\tstring ans(0);\n\t\t\tif(sign==-1)\tans+='-';\n\t\t\tans+=num[d-1];\n\t\t\tfor(int i=d-2; i>=0; i--)\t{\n\t\t\t\tif(num[i]<10)\tans+='0';\n\t\t\t\tif(num[i]<100)\tans+='0';\n\t\t\t\tif(num[i]<1000)\tans+='0';\n\t\t\t\tans+=num[i];\n\t\t\t}\n\t\t\treturn ans;\n\t\t}\n\t\tinline bool isNaN()\tconst\t{return (num==0)&&(d==0)&&(sign==0);}\n\t\tinline bool positive()\tconst\t{return sign>0;}\n\t\tinline bool negative()\tconst\t{return sign<0;}\n\t\tinline bool isinf()\tconst\t{return sign==2||sign==-2;}\n\t\tinline bool zero()\tconst\t{return sign==0&&num!=0;}\n\t\tinline bool meanless()\tconst\t{return isNaN()||isinf();}\n\t\tinline bool abnormal()\tconst\t{return zero()||isinf()||isNaN();}\n\t\tfriend void swap(LInt &A, LInt &B)\t{\n\t\t\tint temp_d; short temp_sign;\tu32* temp_num;\n\t\t\ttemp_d= A.d;\tA.d= B.d;\tB.d= temp_d;\n\t\t\ttemp_sign= A.sign;\tA.sign= B.sign;\tB.sign= temp_sign;\n\t\t\ttemp_num= A.num;\tA.num= B.num;\tB.num= temp_num;\n\t\t}\n\tprivate://get 10000^2d/A while A >=0\n\t\t//\u8fd9\u91cc\u662f\u8f85\u52a9\u8ba1\u7b97\u9664\u6cd5\u7684\u4ee3\u7801\uff0c\u7701\u7565\u4e86\n\tpublic:\n\t\t//\u7279\u522b\u5730\uff0c\u5bf9\u96642\u8fdb\u884c\u4f18\u5316\uff0c\u7136\u800c\u672c\u9898\u7528\u4e0d\u4e0a\n\t//Operator Function\n\t\tconst LInt operator<<(int k) const {\n\t\t\tif(abnormal())\treturn *this;\n\t\t\tif(k<0)\treturn LInt(false);\n\t\t\tif(*this==0)\treturn LInt(0);\n\t\t\tLInt ans(false);\n\t\t\tu32 *_num = new u32[d+k]();\n\t\t\tfor(int i=0; i<d; i++)\t_num[i+k]=num[i];\n\t\t\tans.num=_num;\tans.d=d+k;\tans.sign=sign;\n\t\t\treturn ans;\n\t\t}\n\t\tconst LInt operator>>(int k) const {\n\t\t\tif(abnormal())\treturn *this;\n\t\t\tif(k<0)\treturn LInt(false);\n\t\t\tif(d<=k)\treturn LInt(0);\n\t\t\tLInt ans(false);\n\t\t\tu32 *_num = new u32[d-k];\n\t\t\tfor(int i=0; i<d-k; i++)\t_num[i]=num[i+k];\n\t\t\tans.num=_num;\tans.d=d-k;\tans.sign=sign;\n\t\t\treturn ans;\n\t\t}\n\t\t//\u8fd9\u91cc\u662f\u52a0\u51cf\u548c\u524d\u7f6e\u8d1f\u53f7\u7684\u5b9e\u73b0\u4ee3\u7801\uff0c\u7701\u7565\u4e86\n\t\tconst LInt operator*(const LInt &B) const {\n\t\t\tconst LInt &A= *this;\n\t\t\tif(A.isNaN()||B.isNaN())\treturn false;\n\t\t\tif((A.zero()&&B.isinf())||(A.isinf()&&B.zero()))\treturn false;\n\t\t\tif(A.isinf())\treturn (B.sign>0)?A:-A;\n\t\t\tif(B.isinf())\treturn (A.sign>0)?B:-B;\n\t\t\tif(A.zero()||B.zero())\treturn 0;\n\t\t\tusing std::complex;\n\t\t\tusing std::vector;\n\t\t\tLInt ans;\n\t\t\tint x,y;\n\t\t\tint N=1<<(Log_2(A.d+B.d-1));\n\t\t\tans.d=N+2;\tans.num= new u32[ans.d]();\n\t\t\tans.sign=A.sign*B.sign;\n\t\t\tvector< complex<double> > pA(N,0),aA(N,0);\n\t\t\tfor(x=0;x<A.d;x++)\tpA[x].real(A.num[x]);\n\t\t\tfor(y=0;y<B.d;y++)\tpA[y].imag(B.num[y]);\n\t\t\taA=FFT(pA,false);\n\t\t\tfor(int i=0; i<N; i++)\taA[i]*= aA[i];\n\t\t\tpA=FFT(aA,true);\n\t\t\tdouble carry=0.0;\n\t\t\tfor(int i=0; i<N; i++)\t{\n\t\t\t\tdouble temp=round(pA[i].imag()/2+carry);\n\t\t\t\tcarry=round(temp/10000);\n\t\t\t\tint base=(int)round(temp-carry*10000);\n\t\t\t\tif(base<0)\tbase+=10000,carry-=1.0;\n\t\t\t\tans.num[i]=base;\n\t\t\t}\n\t\t\tans.num[N]=unsigned(carry);\n\t\t\tans.sho();\n\t\t\treturn ans;\n\t\t}\n\t\tconst LInt operator/(int B) const\t{\n\t\t\tif(B==2)\treturn this->div2();\n\t\t\tconst LInt &A= *this;\n\t\t\tif(A.isNaN())\treturn false;\n\t\t\tif(A==0&&B==0)\treturn false;\n\t\t\tif(A==0)\treturn 0;\n\t\t\tif(B==0)\treturn A.positive()?\"inf\":\"-inf\";\n\t\t\tif(A.isinf())\treturn (B>=0)?A:-A;\n            \n\t\t\tLInt ans;\tans.d=d;\n\t\t\tans.sign= A.sign* (B>0?1:-1);\n\t\t\tans.num= new u32[d]();\n\t\t\tu32 abs_B=(B<0?-B:B);\tu64 temp=0;\n\t\t\tfor(int i=d-1; i>=0; i--)\t{\n\t\t\t\ttemp*= 10000;\n\t\t\t\ttemp+= num[i];\n\t\t\t\tans.num[i]= temp/abs_B;\n\t\t\t\ttemp%= abs_B;\n\t\t\t}\n\t\t\tans.sho();\n\t\t\treturn ans;\n\t\t}\n\t\t//\u8fd9\u91cc\u662f\u9664\u6cd5\u7684\u5b9e\u73b0\u4ee3\u7801\uff0c\u4f46\u6211\u7701\u7565\u4e86\n\t\t//\u8fd9\u91cc\u662f\u6c42\u4f59\u6570\u7684\u5b9e\u73b0\u4ee3\u7801\uff0c\u4f46\u6211\u7701\u7565\u4e86\n\t\t//\u8fd9\u91cc\u662f\u64cd\u4f5c\u540e\u8d4b\u503c\u4ee3\u7801\uff0c\u7701\u7565\u4e86\n\t\t//\u8fd9\u91cc\u662f\u81ea\u589e\u548c\u81ea\u51cf\u7684\u4ee3\u7801\uff0c\u7701\u7565\u4e86\n\t\tinline u32 & operator[](int k) const\t{\n\t\t\treturn num[k];\n\t\t}\n\t//Friend Function for Other Classical Class\n\t\tfriend LInt operator+(int A, const LInt &B)\t{\n\t\t\treturn B+LInt(A);\n\t\t}\n\t\tfriend LInt operator-(int A, const LInt &B)\t{\n\t\t\treturn -B+LInt(A);\n\t\t}\n\t\tfriend LInt operator*(int A, const LInt &B)\t{\n\t\t\t return B*A;\n\t\t}\n\t\tfriend std::ostream & operator<<(std::ostream &os, const LInt &A)\t{\n\t\t\tif(A.sign==0)\t{\n\t\t\t\tif(A.num==0)\tos.write(\"NaN\",3);\n\t\t\t\telse\tos.put('0');\n\t\t\t}\telse\t{\n\t\t\t\tif(A.sign<0)\tos.put('-');\n\t\t\t\tif(A.isinf())\tos.write(\"inf\",3);\n\t\t\t\telse\t{\n\t\t\t\t\tos<<A.num[A.d-1];\n\t\t\t\t\tfor(int i=A.d-2; i>=0; i--)\t{\n\t\t\t\t\t\tif(A.num[i]<10)\tos.put('0');\n\t\t\t\t\t\tif(A.num[i]<100)\tos.put('0');\n\t\t\t\t\t\tif(A.num[i]<1000)\tos.put('0');\n\t\t\t\t\t\tos<<A.num[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn os;\n\t\t}\n\t\tfriend std::istream & operator>>(std::istream &is, LInt &A)\t{\n\t\t\tusing std::isdigit;\n\t\t\tis>>std::ws;\n\t\t\t{\n\t\t\t\tif(is.peek()==-1)\t{is.setstate(std::ios_base::eofbit);\tA= 0;\treturn is;}\n\t\t\t\tif(!is)\t{is.setstate(std::ios_base::failbit);\tA= 0;\treturn is;}\n\t\t\t\tchar t= is.peek();\n\t\t\t\twhile(t!='-'&&!isdigit(t)&&t!=-1)\t{\n\t\t\t\t\tis.get();\tt= is.peek();\n\t\t\t\t}\n\t\t\t\tif(t==-1)\t{is.setstate(std::ios_base::failbit);\tA= 0;\treturn is;}\n\t\t\t}\n\t\t\tchar sign= is.peek();\n\t\t\tif(sign=='-'||sign=='+')\tis.get();\n\t\t\telse\tsign= '0';\n\t\t\t// NaN or inf?\t//No. Like the input of float, refuse NaN\n\t\t\t//just no any suitable input?\n\t\t\tif(!isdigit(is.peek()))\t{\n\t\t\t\tif(sign=='+'||sign=='-')\tis.unget();\n\t\t\t\tA= 0;\tis.setstate(std::ios_base::failbit);\n\t\t\t\treturn is;\n\t\t\t}\n\t\t\tstring in_s(1, sign);\n\t\t\twhile(isdigit(is.peek()))\tin_s+= is.get();\n\t\t\tA= in_s;\n\t\t\treturn is;\n\t\t}\n\t// converse to other classical type\n\t#if __cplusplus >= 201103L\n\t\texplicit operator bool() const\t{\n\t\t\treturn isinf()||isNaN();\n\t\t}\n\t\texplicit operator int()\tconst\t{\n\t\t\tint temp= 0;\n\t\t\tfor(int i=0; i<d ;i++)\ttemp= temp* 10000+ num[i];\n\t\t\tif(sign<0)\ttemp= -temp;\n\t\t\treturn temp;\n\t\t}\n\t#endif\n\t};\n\t//\u8fd9\u91cc\u662f\u4ee510\u4e3a\u5e95\u7684\u4e58\u6cd5\u4ee3\u7801\uff0c\u7701\u7565\u4e86\n}\n#endif\n// #define debug\n#ifdef debug\n#include \"LFloat.h\"\n#endif\n\n#ifndef TBBLMAT_H //LMath.h ver:3.1.1\n#define TBBLMAT_H\nnamespace tbb {\n    const LInt powrt(const LInt&, int);\n    LInt abs(const LInt &B)\t{\n\t\tLInt ans(B);\n\t\tif (B.sign<0) ans.sign=-B.sign;\n\t\treturn ans;\n\t};\n    //get 10000^2k/sqrt(A) when A has 2k or 2k-1 bits\n    //\u8fd9\u91cc\u662f\u8ba1\u7b97sqrt\u548c\u5bf9\u5e94\u7684\u8f85\u52a9\u51fd\u6570\u7684\u4ee3\u7801\uff0c\u7701\u7565\u4e86\n    const LInt pow(const LInt &A, int k)  {\n        if((A==0&&k==0)||A.isNaN())  return false;\n        if(A.isinf()&&k>=0)   {\n            if(k==0)    return false;\n            if(A.sign==2&&k>0)   return A;\n            return (k%2==0)?(-A):A;\n        }\n        if(k<0)    return 0;\n        if(k==0||A==1)    return LInt(1);\n        if(A.num[0]==0) {\n            int lnz=0;  //lnz=the lower bit where is not 0\n            for(lnz=0; lnz<A.d&&A.num[lnz]==0; lnz++);\n            return pow(A>>lnz,k)<<(lnz*k);\n        }\n        LInt S= 1, temp= A;\n        for(int i=1; i<=k; i<<=1)   {\n\t\t\ttemp= (i==1)?A: temp*temp;\n            if(i&k) S*= temp;\n        }\n        return S;\n    }\n\tint cmp(const LInt &lhs, int m)\t{\n\t\tif(lhs.d<=m)\treturn -1;\n\t\tif(lhs.d>m+1)\treturn 1;\n\t\tfor(int i=0; i<m; i++)\tif(lhs[i]>0)\treturn 1;\n\t\treturn (lhs==1)? 0: 1;\n\t}\n    inline const LInt recip_m(const LInt &A, int m)    {\n        if(A.abnormal())    return A;\n        int n= (A.d+m-1)/m;\n\t\tif(n<=2)  return (powrt(A, m)<<(n*m))/A;\n        int k= n/2+1;\n        LInt Ak(A.num+m*(n-k), A.d-m*(n-k));\n        LInt _Ak= recip_m(Ak, m)-1;\n\t\t_Ak-=_Ak>>(A.d-1);\t_Ak<<= n-k;\n        LInt _AN= pow(A, m-1);\n        LInt _A= (m+1)*_Ak/m- ((_AN* pow(_Ak, m+1)/ m)>>(n*m*m));\n        LInt delta= 1;\n        if(cmp(_AN* pow(_A, m), n*m*m)==-1)   for(;;delta*=2)    {\n            LInt _Ap= _A+ delta;\n            if(cmp(_AN* pow(_A, m), n*m*m)==1)  break;\n            swap(_A, _Ap);\n        }   else    for(;;delta*=2)    {\n            _A-= delta;\n            if(cmp(_AN* pow(_A, m), n*m*m)<=0)  break;\n        }\n        do {\n            delta/=2;\n            LInt _Ap= _A+ delta;\n            if(cmp(_AN* pow(_A, m), n*m*m)==1)  continue;\n            swap(_A, _Ap);\n        } while(delta>0);\n        return _A;\n    }\n    const LInt powrt(const LInt &A, int m)  {\n        if(A.isNaN()||m<=0)   return false;\n        if(A.zero())    return 0;\n        if(A.negative()&&m%2==0)  return false;\n        if(A.isinf()) return A;\n        if(A.negative()&&m%2==1)    return -powrt(-A, m);\n        if(A==1)    return 1;\n        if(A.d<=2*m)  {\n            int up= 100000000, down= 1, mid= (up+down)/2;\n            while(up-down>1) {\n                LInt a= pow(LInt(mid), m);\n                if(a==A)    return mid;\n                (a<A? down: up)= mid;\n                mid= (up+down)/2;\n            }\n            return down;\n        }\n        int n= (A.d+m-1)/m;\n        LInt ans= (A* recip_m(A, m))>>(n*m);\n        LInt delta= 1;\n        for(delta=1; ; delta*=2)  {\n            if(pow(ans+delta, m)>A) break;\n            ans+= delta;\n        }\n        for(;delta>0 ; delta/=2)   {\n            if(pow(ans+delta, m)>A) continue;\n            ans+= delta;\n        }\n        return ans;\n    }\n    //\u6700\u5927\u516c\u7ea6\u6570\u548c\u6700\u5c0f\u516c\u500d\u6570\u7684\u5b9e\u73b0\u4ee3\u7801\uff0c\u7701\u7565\u4e86\n    #ifdef TBBLFLT_H\n        const LFloat sqrt(const LFloat& A) {\n            if(A.negative()) return LFloat(LInt(false), 0);\n            if(A.abnormal()) return A;\n            const int n= tbb::_LFloat_prec;\n            LInt u= A.base; i64 t= A.pow;\n            t-=(2*n-u.d);   u<<=(2*n-u.d);\n            if(t%2!=0)  t++, u>>=1;\n            return LFloat(sqrt(u), t/2);\n        }\n    #endif\n}\n#endif\n#include <iostream>\t//version:2.3\n//\u5176\u5b83\u5934\u6587\u4ef6\u7701\u7565\n#define SHOW\tputchar('s')\n#define EL\tputchar('\\n')\nusing namespace tbb;\nusing namespace std;\nint main()\t{\n\tLInt A;\tint k;\n\tcin>>k>>A;\n\tcout<<powrt(A, k)<<endl;\n\treturn 0;\n}\n\n```\n",
        "postTime": 1567947634,
        "uid": 29077,
        "name": "TBB_Nozomi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2293 \u3010[HNOI2004]\u9ad8\u7cbe\u5ea6\u5f00\u6839\u3011"
    },
    {
        "content": "\u81ea\u4ece\u6709\u4e86python\n\n\u4efb\u4f55\u9ad8\u7cbe\u5ea6\u9898\u90fd\u4e0d\u6015\u4e86\n\n\u76f4\u63a5\u4e8c\u5206\u5c31\u597d\n\n```cpp\nm,n=int(raw_input()),int(raw_input())\nl,r=0,1\nwhile r**m<=n:\n    l=r;r=r*2\nwhile l+1<r:\n    mid=(l+r)//2\n    if mid**m<=n:\n        l=mid\n    else:\n        r=mid\nif r**m<=n:\n```\nprint r\nelse:\nprint l\n",
        "postTime": 1508160874,
        "uid": 36102,
        "name": "doge233",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P2293 \u3010[HNOI2004]\u9ad8\u7cbe\u5ea6\u5f00\u6839\u3011"
    },
    {
        "content": ">\u4f60\u5e94\u8be5\u5148\u5c06l\u8d4b\u4e3a1\uff0cr\u8d4b\u4e3a2\n>\u7136\u540e\u4e0d\u505cl=r\uff0cr\\*=2\uff0c\u770br^m\u662f\u5426>=n\n>\u627er\u4e0a\u9650\n>\u8fd9\u6837\u53ef\u4ee5\u907f\u514dRE\u4ee5\u53caTLE\n>\u5982\u679c\u4f60\u8fd9\u6837\u8fd8\u662fTLE\u4e86\n>\u591a\u534a\u6ca1\u6709\u538b\u4f4d\n>\u53e6\u5916\u8fd9\u9898\u53ef\u4ee5\u4e0d\u5199\u9664\u6cd5\n>\u76f4\u63a5\u5199\u4e2a\u6a21\u62df\u53f3\u79fb\u64cd\u4f5c\u8fd8\u5feb\u4e9b\n",
        "postTime": 1509150553,
        "uid": 29061,
        "name": "erge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2293 \u3010[HNOI2004]\u9ad8\u7cbe\u5ea6\u5f00\u6839\u3011"
    },
    {
        "content": "## \u4e8c\u5206\u7b54\u6848+\u9ad8\u7cbe\u5ea6+\u5361\u5e38\n\n\u4e00\u5f00\u59cb\u88f8\u7684\u9ad8\u7cbe\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(m\\log_{10}^2n\\log_2n)$\u53ea\u670940\u5206\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\n\nconst ll N=20010;\nll m;\nstruct bignum{\n\tll len,num[N];\n\tbignum(){len=0; memset(num,0,sizeof(num));}\n}n,one,zero,ans;\n\ninline bignum read(){\n\tbignum ans;\n\tstring s; cin>>s;\n\tfor(ll i=0; i<s.size(); i++) ans.num[s.size()-i]=s[i]-48;\n\tans.len=s.size();\n\treturn ans;\n}\n\ninline void write(bignum s){\n\tfor(ll i=s.len; i>=1; i--) putchar(s.num[i]+48);\n}\n\ninline void operator ==(bignum &a,ll b){\n\tfor(; b; b/=10) a.num[++a.len]=b%10;\n}\n\ninline bool operator <=(bignum a,bignum b){\n\tif(a.len>b.len) return 0;\n\tif(a.len<b.len) return 1;\n\tfor(ll i=a.len; i>=1; i--){\n\t\tif(a.num[i]>b.num[i]) return 0;\n\t\tif(a.num[i]<b.num[i]) return 1;\n\t}\n\treturn 1;\n}\n\ninline bool operator >(bignum a,bignum b){\n\tif(a.len>b.len) return 1;\n\tif(a.len<b.len) return 0;\n\tfor(ll i=a.len; i>=1; i--){\n\t\tif(a.num[i]>b.num[i]) return 1;\n\t\tif(a.num[i]<b.num[i]) return 0;\n\t}\n\treturn 0;\n}\n\ninline bignum operator +(bignum a,bignum b){\n\tbignum c;\n\tc.len=max(a.len,b.len);\n\tfor(ll i=1; i<=c.len; i++){\n\t\tc.num[i]+=a.num[i]+b.num[i];\n\t\tc.num[i+1]+=c.num[i]/10;\n\t\tc.num[i]%=10;\n\t}\n\tif(c.num[c.len+1]) c.len++;\n\treturn c;\n}\n\ninline bignum operator -(bignum a,bignum b){\n\tbignum c;\n\tc.len=a.len;\n\tfor(ll i=1; i<=c.len; i++){\n\t\tc.num[i]=a.num[i]-b.num[i];\n\t\tif(c.num[i]<0){\n\t\t\tc.num[i]+=10;\n\t\t\ta.num[i+1]--;\n\t\t}\n\t}\n\twhile(c.len>1&&c.num[c.len]==0) c.len--;\n\treturn c;\n}\n\ninline bignum operator *(bignum a,bignum b){\n\tbignum c;\n\tfor(ll i=1; i<=a.len; i++){\n\t\tfor(ll j=1; j<=b.len; j++){\n\t\t\tc.num[i+j-1]+=a.num[i]*b.num[j];\n\t\t\tc.num[i+j]+=c.num[i+j-1]/10;\n\t\t\tc.num[i+j-1]%=10;\n\t\t}\n\t}\n\tc.len=a.len+b.len;\n\twhile(c.len>1&&c.num[c.len]==0) c.len--;\n\treturn c;\n}\n\ninline bignum operator /(bignum a,ll b){\n\tll sum=0; bignum c;\n\tfor(ll i=a.len; i>=1; i--){\n\t\tsum=sum*10+a.num[i];\n\t\tc.num[i]=sum/b;\n\t\tsum%=b;\n\t}\n\tc.len=a.len;\n\twhile(c.len>1&&c.num[c.len]==0) c.len--;\n\treturn c;\n}\n\ninline bool check(bignum a,ll b){\n\tbignum ans=one;\n\tfor(ll i=1; i<=b; i++){\n\t\tans=ans*a;\n\t\tif(ans>n) return 0;\n\t}\n\treturn 1;\n}\n\nint main(){\n\tcin>>m; n=read();\n\tone==1; zero==0;\n\tbignum l=one,r=n;\n\twhile(l<=r){\n\t\tbignum mid=(l+r)/2;\n\t\tif(check(mid,m)){\n\t\t\tans=mid;\n\t\t\tl=mid+one;\n\t\t}\n\t\telse r=mid-one;\n\t}\n\twrite(ans);\n\treturn 0;\n}\n```\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u5927\u5934\u662f\u5728\u9ad8\u7cbe\u5ea6\u4e58\u6cd5\u4e0a\n\n\u6700\u5feb\u7684\u9ad8\u7cbe\u4e58\u6cd5\u662f\u4ec0\u4e48\uff1fFFT\uff01\n\n\u6211\u52a0\u4e86FFT\u4f18\u5316\u9ad8\u7cbe\u5ea6\u4e58\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u5316\u5230\u4e86$O(m\\log_{10}n \\log_2 n \\log_{2}\\log_{10}n)$\uff0c\u6ee1\u5fc3\u4ee5\u4e3a\u8fd9\u6b21\u80fd\u8fc7\uff0c\u7ed3\u679c\u3002\u3002\u3002\u8fd8\u662f\u53ea\u670940\u5206\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\n\nconst ll N=20010;\nconst double pi=acos(-1);\nll m;\nstruct bignum{\n\tll len,num[N];\n\tbignum(){len=0; memset(num,0,sizeof(num));}\n}n,one,zero,ans,c;\n\ninline void clear(bignum &a){\n\tmemset(a.num,0,sizeof(a.num));\n\ta.len=0;\n}\n\ninline bignum read(){\n\tbignum ans;\n\tstring s; cin>>s;\n\tfor(ll i=0; i<s.size(); i++) ans.num[s.size()-i]=s[i]-48;\n\tans.len=s.size();\n\treturn ans;\n}\n\ninline void write(bignum s){\n\tfor(ll i=s.len; i>=1; i--) cout<<s.num[i];\n}\n\ninline void operator ==(bignum &a,ll b){\n\tfor(; b; b/=10) a.num[++a.len]=b%10;\n}\n\ninline bool operator <=(bignum a,bignum b){\n\tif(a.len>b.len) return 0;\n\tif(a.len<b.len) return 1;\n\tfor(ll i=a.len; i>=1; i--){\n\t\tif(a.num[i]>b.num[i]) return 0;\n\t\tif(a.num[i]<b.num[i]) return 1;\n\t}\n\treturn 1;\n}\n\ninline bool operator >(bignum a,bignum b){\n\tif(a.len>b.len) return 1;\n\tif(a.len<b.len) return 0;\n\tfor(ll i=a.len; i>=1; i--){\n\t\tif(a.num[i]>b.num[i]) return 1;\n\t\tif(a.num[i]<b.num[i]) return 0;\n\t}\n\treturn 0;\n}\n\ninline bignum operator +(bignum a,bignum b){\n\tclear(c);\n\tc.len=max(a.len,b.len);\n\tfor(ll i=1; i<=c.len; i++){\n\t\tc.num[i]+=a.num[i]+b.num[i];\n\t\tc.num[i+1]+=c.num[i]/10;\n\t\tc.num[i]%=10;\n\t}\n\tif(c.num[c.len+1]) c.len++;\n\treturn c;\n}\n\ninline bignum operator -(bignum a,bignum b){\n\tclear(c);\n\tc.len=a.len;\n\tfor(ll i=1; i<=c.len; i++){\n\t\tc.num[i]=a.num[i]-b.num[i];\n\t\tif(c.num[i]<0){\n\t\t\tc.num[i]+=10;\n\t\t\ta.num[i+1]--;\n\t\t}\n\t}\n\twhile(c.len>1&&c.num[c.len]==0) c.len--;\n\treturn c;\n}\n\nvoid FFT(complex<double> *a,ll n,ll op){\n    if(!n) return;\n    complex<double> a0[n],a1[n];\n    for(ll i=0; i<n; i++){\n        a0[i]=a[i<<1];\n        a1[i]=a[i<<1|1];\n    }\n    FFT(a0,n>>1,op); FFT(a1,n>>1,op);\n    complex<double> W(cos(pi/n),sin(pi/n)*op),w(1,0);\n    for(ll i=0; i<n; i++,w*=W){\n        a[i]=a0[i]+w*a1[i];\n        a[i+n]=a0[i]-w*a1[i];\n    }\n}\n\ncomplex<double> x[N],y[N];\ninline bignum operator *(bignum a,bignum b){\n\tmemset(x,0,sizeof(x));\n\tmemset(y,0,sizeof(y));\n\tll n=a.len-1,m=b.len-1;\n\tfor(ll i=0; i<=n; i++) x[i]=a.num[i+1];\n\tfor(ll i=0; i<=m; i++) y[i]=b.num[i+1];\n\tfor(m+=n,n=1; n<=m; n<<=1);\n\tFFT(x,n>>1,1); FFT(y,n>>1,1);\n\tfor(ll i=0; i<n; i++) x[i]*=y[i];\n\tFFT(x,n>>1,-1);\n\tbignum c;\n\tfor(ll i=0; i<=m; i++) c.num[i+1]=(ll)(fabs(x[i].real()/n+0.5));\n\tc.len=m+1;\n\twhile(c.len>1&&c.num[c.len]==0) c.len--;\n\tfor(ll i=1; i<=c.len; i++){\n\t\tc.num[i+1]+=c.num[i]/10;\n\t\tc.num[i]%=10;\n\t}\n\twhile(c.num[c.len+1]){\n\t\tc.len++;\n\t\tc.num[c.len+1]+=c.num[c.len]/10;\n\t\tc.num[c.len]%=10;\n\t}\n\treturn c;\n}\n\ninline bignum operator /(bignum a,ll b){\n\tll sum=0; clear(c);\n\tfor(ll i=a.len; i>=1; i--){\n\t\tsum=sum*10+a.num[i];\n\t\tc.num[i]=sum/b;\n\t\tsum%=b;\n\t}\n\tc.len=a.len;\n\twhile(c.len>1&&c.num[c.len]==0) c.len--;\n\treturn c;\n}\n\ninline bool check(bignum a,ll b){\n\tbignum ans=one;\n\tfor(ll i=1; i<=b; i++){\n\t\tans=ans*a;\n\t\tif(ans>n) return 0;\n\t}\n\treturn 1;\n}\n\nint main(){\n\tcin>>m; n=read();\n\tone==1; zero==0;\n\tbignum l=one,r=n;\n\twhile(l<=r){\n\t\tbignum mid=(l+r)/2;\n\t\tif(check(mid,m)){\n\t\t\tans=mid;\n\t\t\tl=mid+one;\n\t\t}\n\t\telse r=mid-one;\n\t}\n\twrite(ans);\n\treturn 0;\n}\n```\n\n\u53bb\u770b\u4e86\u9898\u89e3\uff0c\u8bf4\u8981\u538b\u4f4d\uff0c\u6211\u5c31\u538b\u4e868\u4f4d\uff0c\u65f6\u95f4\u590d\u6742\u5ea6$O(\\frac{\\log_2{m}\\log_{10}^2n\\log_2n}{64})$\uff0c\u73b0\u5728\u670950\u5206\u4e86\n\n```cpp\n#pragma GCC optimize(2)\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\n\nconst ll N=20010,mod=100000000,length=log(mod)/log(10);\nll m;\nstruct bignum{\n\tll len,num[N];\n\tbignum(){len=0; memset(num,0,sizeof(num));}\n}n,one,zero,ans,QAQ;\n\ninline bignum read(){\n\tbignum ans;\n\tstring s; cin>>s;\n\tfor(ll r=s.size()-1; r>=0; r-=length){\n\t\tans.len++;\n\t\tll l;\n\t\tif(r>=length-1) l=r-length+1;\n\t\telse l=0;\n\t\tfor(ll i=l; i<=r; i++) ans.num[ans.len]=ans.num[ans.len]*10+s[i]-48;\n\t}\n\treturn ans;\n}\n\ninline void write(bignum s){\n\tprintf(\"%lld\",s.num[s.len]);\n\tfor(ll i=s.len-1; i>=1; i--){\n\t\tfor(ll j=mod/10; j>s.num[i]; j/=10) putchar('0');\n\t\tif(s.num[i]) printf(\"%lld\",s.num[i]);\n\t}\n}\n\ninline void operator ==(bignum &a,ll b){\n\tfor(; b; b/=mod) a.num[++a.len]=b%mod;\n}\n\ninline bool operator <=(bignum a,bignum b){\n\tif(a.len>b.len) return 0;\n\tif(a.len<b.len) return 1;\n\tfor(ll i=a.len; i>=1; i--){\n\t\tif(a.num[i]>b.num[i]) return 0;\n\t\tif(a.num[i]<b.num[i]) return 1;\n\t}\n\treturn 1;\n}\n\ninline bool operator >(bignum a,bignum b){\n\tif(a.len>b.len) return 1;\n\tif(a.len<b.len) return 0;\n\tfor(ll i=a.len; i>=1; i--){\n\t\tif(a.num[i]>b.num[i]) return 1;\n\t\tif(a.num[i]<b.num[i]) return 0;\n\t}\n\treturn 0;\n}\n\ninline bignum operator +(bignum a,bignum b){\n\tbignum c;\n\tc.len=max(a.len,b.len);\n\tfor(ll i=1; i<=c.len; i++){\n\t\tc.num[i]+=a.num[i]+b.num[i];\n\t\tc.num[i+1]+=c.num[i]/mod;\n\t\tc.num[i]%=mod;\n\t}\n\tif(c.num[c.len+1]) c.len++;\n\treturn c;\n}\n\ninline bignum operator -(bignum a,bignum b){\n\tbignum c;\n\tc.len=a.len;\n\tfor(ll i=1; i<=c.len; i++){\n\t\tc.num[i]=a.num[i]-b.num[i];\n\t\tif(c.num[i]<0){\n\t\t\tc.num[i]+=mod;\n\t\t\ta.num[i+1]--;\n\t\t}\n\t}\n\twhile(c.len>1&&c.num[c.len]==0) c.len--;\n\treturn c;\n}\n\ninline bignum operator *(bignum a,bignum b){\n\tbignum c;\n\tfor(ll i=1; i<=a.len; i++){\n\t\tfor(ll j=1; j<=b.len; j++){\n\t\t\tc.num[i+j-1]+=a.num[i]*b.num[j];\n\t\t\tc.num[i+j]+=c.num[i+j-1]/mod;\n\t\t\tc.num[i+j-1]%=mod;\n\t\t}\n\t}\n\tc.len=a.len+b.len;\n\twhile(c.len>1&&c.num[c.len]==0) c.len--;\n\treturn c;\n}\n\ninline bignum operator /(bignum a,ll b){\n\tll sum=0; bignum c;\n\tfor(ll i=a.len; i>=1; i--){\n\t\tsum=sum*mod+a.num[i];\n\t\tc.num[i]=sum/b;\n\t\tsum%=b;\n\t}\n\tc.len=a.len;\n\twhile(c.len>1&&c.num[c.len]==0) c.len--;\n\treturn c;\n}\n\ninline bignum pow(bignum x,ll y){\n\tif(y==0) return one;\n\tif(y==1) return x;\n\tbignum t=pow(x,y/2);\n\tt=t*t;\n\tif(y&1) t=t*x;\n\tif(t>n) return QAQ;\n\telse return t;\n}\n\nint main(){\n\tcin>>m; n=read();\n\tone==1; zero==0;\n\tQAQ=n+one;\n\tbignum l=one,r=n;\n\twhile(l<=r){\n\t\tbignum mid=(l+r)/2;\n\t\tif(pow(mid,m)<=n){\n\t\t\tans=mid;\n\t\t\tl=mid+one;\n\t\t}\n\t\telse r=mid-one;\n\t}\n\twrite(ans);\n\treturn 0;\n}\n```\n\n**\u5982\u679c$mid^m$\u6700\u5c0f\u957f\u5ea6\u5927\u4e8en\u7684\u957f\u5ea6\u5c31\u8df3\u51fa**\n\nAC\u4e0e50\u4e4b\u95f4\u5c31\u5dee\u8fd9\u4e00\u70b9\u3002\u3002\u3002\n\nAC\u4ee3\u7801\uff1a\n```cpp\n#pragma GCC optimize(2)\n#include<bits/stdc++.h>\n#include<iostream>\n#include<cstdio>\n#define ll long long\nusing namespace std;\n\nconst ll N=20010,mod=100000000,length=log(mod)/log(10);\nll m;\nstruct bignum{\n\tll len,num[N];\n\tbignum(){len=0; memset(num,0,sizeof(num));}\n}n,one,ans;\n\ninline bignum read(){\n\tbignum ans;\n\tstring s; cin>>s;\n\tfor(ll r=s.size()-1; r>=0; r-=length){\n\t\tans.len++;\n\t\tll l;\n\t\tif(r>=length-1) l=r-length+1;\n\t\telse l=0;\n\t\tfor(ll i=l; i<=r; i++) ans.num[ans.len]=ans.num[ans.len]*10+s[i]-48;\n\t}\n\treturn ans;\n}\n\ninline void write(bignum s){\n\tprintf(\"%lld\",s.num[s.len]);\n\tfor(ll i=s.len-1; i>=1; i--){\n\t\tfor(ll j=mod/10; j>s.num[i]; j/=10) putchar('0');\n\t\tif(s.num[i]) printf(\"%lld\",s.num[i]);\n\t}\n}\n\ninline void give(bignum &a,ll b){\n\tfor(; b; b/=mod) a.num[++a.len]=b%mod;\n}\n\ninline bool smallequal(bignum a,bignum b){\n\tif(a.len>b.len) return 0;\n\tif(a.len<b.len) return 1;\n\tfor(ll i=a.len; i>=1; i--){\n\t\tif(a.num[i]>b.num[i]) return 0;\n\t\tif(a.num[i]<b.num[i]) return 1;\n\t}\n\treturn 1;\n}\n\ninline bool big(bignum a,bignum b){\n\tif(a.len>b.len) return 1;\n\tif(a.len<b.len) return 0;\n\tfor(ll i=a.len; i>=1; i--){\n\t\tif(a.num[i]>b.num[i]) return 1;\n\t\tif(a.num[i]<b.num[i]) return 0;\n\t}\n\treturn 0;\n}\n\ninline bignum add(bignum a,bignum b){\n\tbignum c;\n\tc.len=max(a.len,b.len);\n\tfor(ll i=1; i<=c.len; i++){\n\t\tc.num[i]+=a.num[i]+b.num[i];\n\t\tc.num[i+1]+=c.num[i]/mod;\n\t\tc.num[i]%=mod;\n\t}\n\tif(c.num[c.len+1]) c.len++;\n\treturn c;\n}\n\ninline bignum dec(bignum a){\n    if(a.len==1){\n        a.num[1]--;\n\t\treturn a;\n    }\n    bignum c=a;\n    c.num[1]--;\n    for(ll i=1; c.num[i]<0;){\n        c.num[i]=mod-1;\n        i++;\n        c.num[i]--;\n    }\n    if(c.num[c.len]==0) c.len--;\n    return c;\n}\n\ninline bignum mul(bignum a,bignum b){\n\tbignum c;\n\tfor(ll i=1; i<=a.len; i++){\n\t\tfor(ll j=1; j<=b.len; j++) c.num[i+j-1]+=a.num[i]*b.num[j];\n\t}\n\tc.len=a.len+b.len;\n\tfor(ll i=1; i<=c.len; i++){\n\t\tc.num[i+1]+=c.num[i]/mod;\n\t\tc.num[i]%=mod;\n\t}\n\twhile(c.len>1&&c.num[c.len]==0) c.len--;\n\treturn c;\n}\n\ninline bignum div(bignum a){\n\tbignum c;\n\tfor(ll i=a.len; i>=1; i--){\n\t\tif(a.num[i]&1) a.num[i-1]+=mod;\n\t\tc.num[i]=a.num[i]>>1;\n\t}\n\tif(c.num[a.len]) c.len=a.len;\n\telse c.len=a.len-1;\n\treturn c;\n}\n\ninline bignum pow(bignum x,ll y){\n\tif(y==1) return x;\n\tbignum t=pow(x,y>>1);\n\tt=mul(t,t);\n\tif(y&1) t=mul(t,x);\n\treturn t;\n}\n\nint main(){\n\tcin>>m; n=read();\n\tgive(one,1);\n\tbignum l=one,r=n;\n\twhile(smallequal(l,r)){\n\t\tbignum mid=div(add(l,r));\n\t\tif(mid.len*m-m+1<=n.len&&smallequal(pow(mid,m),n)){\n\t\t\tans=mid;\n\t\t\tl=add(mid,one);\n\t\t}\n\t\telse r=dec(mid);\n\t}\n\twrite(ans);\n\treturn 0;\n}\n```",
        "postTime": 1571702885,
        "uid": 27924,
        "name": "xukuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2293 \u3010[HNOI2004]\u9ad8\u7cbe\u5ea6\u5f00\u6839\u3011"
    },
    {
        "content": "```\n\u6211\u4eec\u65e0\u8bba\u9047\u5230\u4ec0\u4e48\u9ad8\u7cbe\uff01\n\u4e5f\u4e0d\u8981\u6015\uff01\n\u5fae\u7b11\u7740\u9762\u5bf9\u5b83\uff01\n\u6d88\u9664\u9ad8\u7cbe\u7684\u6700\u597d\u65b9\u6cd5\u5c31\u662f\u7528python\uff01\n```\n\u5f00\u6839\uff0c\u9996\u9009pow\uff0c\u4f46\u662f\u65e0\u8bba\u662fc++\u8fd8\u662fpy\u7684pow\u90fd\u5f88\u6162\uff0c\u8fd8\u5bb9\u6613\u51fa\u9505\uff0c\u6240\u4ee5\u53e6\u5916\u8003\u8651\u65b9\u6cd5\u2014\u2014\u4e8c\u5206\n```python\nm = int(input())\nn = int(input())\nl = 0\n#\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u8fd9\u91cc\u5982\u679cl\u4e0d\u662f0\u7684\u8bdd\u7b2c\u4e8c\u4e2a\u70b9\u4f1aWA\u6389\n#\u6216\u8005\u52a0\u4e00\u4e2a\u7279\u5224\u4e5f\u53ef\u4ee5\nr = 1\nif m==0:\n    print(\"err, I can't solve it\")\nwhile r**m <= n:\n    l = r\n    r = r<<1\nwhile l+1 < r:        #\u5fc5\u987b\u662f<\n    mid = (l+r)>>1\n    if mid**m <= n:   #\u5fc5\u987b\u662f<=\n        l = mid\n    else:\n        r = mid\n\nif l**m <= n:\n    print(l)\nelse:\n    print(r)\n```",
        "postTime": 1592061819,
        "uid": 255095,
        "name": "PragmaGCC",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2293 \u3010[HNOI2004]\u9ad8\u7cbe\u5ea6\u5f00\u6839\u3011"
    },
    {
        "content": "\u7b97\u6cd5\u5927\u6982\u5c31\u662f\u5727\u4f4d\u9ad8\u7cbe+\u5feb\u901f\u5e42+\u4e8c\u5206\u3002\u4f46\u4e3b\u8981\u662f\u5199\u8d77\u6765\u6bd4\u8f83\u590d\u6742\n\n\u52a0\u4e0a\u6211\u662f\u4e00\u540d\u666e\u53ca\u7684\u849f\u84bb\uff0c\u9898\u89e3\u57fa\u672c\u90fd\u770b\u4e0d\u61c2\uff0c\u5c31\u81ea\u5df1\u6298\u817e\u4e86\u597d\u4e45\u624d\u5199\u51fa\u6765\n\n\u8fd9\u91cc\u653e\u4e00\u4e0b\u4ee3\u7801\uff0c\u81ea\u8ba4\u4e3a\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff0c\u4e0d\u8fc7\u6709\u4e9b\u592a\u957f\u4e86\n\nPS\uff1a2011\u5e74noip\u666e\u53ca\u521d\u8d5b\uff0c\u7a0b\u5e8f\u586b\u7a7a\u7b2c\u4e00\u9898\u57fa\u672c\u5c31\u662f\u8fd9\u4e2a\uff0c\u4e0d\u8fc7\u8fd9\u9898\u8981\u5727\u4f4d\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nstruct Int{\n    int arr[5005],len;//\u5012\u7740\u5b58,\u4e00\u683c\u56db\u4f4d,\u6570\u7ec4\u9632\u7206\u7a0d\u5fae\u5f00\u5927\u70b9\n};\nInt zero;\n\nvoid empty(){//\u91cd\u7f6ezero\n\tmemset(zero.arr,0,sizeof(zero.arr));\n\tzero.len = 0;\n}\n\nInt input(char str[10005]){//\u628a\u5b57\u7b26\u4e32\u53d8\u4e3aInt\u7c7b\u578b\u6570,\u5f88\u7384\u5b66\n\tchar revstr[10005];\n\tInt ans = zero;\n\tint len = strlen(str);\n\tfor(int i = 1;i <= len;i++){\n\t\trevstr[i] = str[len - i];//\u5148\u7ffb\u8f6c\n\t}\n\tint use = 0,start = 1;\n\tfor(int i = 1;i <= len;i+=4){//\u5b58\u5165\u6240\u6709\u5b8c\u6574\u7684\u4f4d\n\t\tif((i + 3) > len){\n\t\t\tbreak;\n\t\t}\n\t\tuse++;//arr\u7528\u7684\u4f4d\u6570+1\n        ans.arr[use] = revstr[i] - '0' + (revstr[i + 1] - '0') * 10 + (revstr[i + 2] - '0') * 100 + (revstr[i + 3] - '0') * 1000;//\u8fd9\u4e2a\u81ea\u5df1\u63a8\u7b97\u4e00\u4e0b\n        start += 4;//\u4e0d\u5b8c\u6574\u7b2c\u4e00\u4f4d+4\n\t}\n\tif(len % 4 == 1){//\u5b58\u5165\u4e0d\u5b8c\u6574\u4f4d\n        ans.arr[++use] = revstr[start] - '0';\n    }else if(len  % 4 == 2){\n\t\tans.arr[++use] = revstr[start] - '0' + (revstr[start + 1] - '0') * 10;\n\t}else if(len % 4 == 3){\n\t\tans.arr[++use] = revstr[start] - '0' + (revstr[start + 1] - '0') * 10 + (revstr[start + 2] - '0') * 100;\n\t}\n\tans.len = use;\n\treturn ans;\n}\n\nInt plus(Int a,Int b){//\u52a0\u6cd5\u8fd0\u7b97\n\tInt ans = zero;\n\tint len = max(a.len,b.len);\n    for(int i = 1;i <= len;i++){\n    \tans.arr[i] += a.arr[i] + b.arr[i];\n    \tans.len = i;\n    \tif(ans.arr[i] > 9999){//\u7528\u4e8e\u8fdb\u4f4d\n    \t\tans.arr[i + 1] += 1;\n    \t\tans.len = i + 1;\n    \t\tans.arr[i] -= 10000;\n    \t}\n    }\n    return ans;\n}\n\nInt reduce(Int a,Int b){//\u51cf\u6cd5\u8fd0\u7b97\n\tInt ans = zero;\n\tint len = max(a.len,b.len);\n\tfor(int i = 1;i <= len;i++){\n    \tans.arr[i] += (a.arr[i] - b.arr[i]);\n    \tif(ans.arr[i] >= 0){\n    \t\tans.len = i;\n    \t}\n    \tif(ans.arr[i] < 0){\n    \t\tans.arr[i + 1] -= 1;\n    \t\tans.arr[i] += 10000;\n    \t}\n    \t\n    }\n    for(int i = ans.len;i >= 1;i--){//\u672c\u6765\u4e0d\u9700\u8981\u8fd9\u4e2a\u5faa\u73af,\u4f46\u662f\u627e\u4e0d\u51fa\u9519\u5c31\u52a0\u4e86\u4e00\u4e2a\n        if(ans.arr[i] != 0){\n            ans.len = i;\n            break;\n        }\n    }\n    return ans;\n}\n\nInt mult(Int a,Int b){//\u4e58\u6cd5\u8fd0\u7b97\n\tInt ans = zero;\n\tfor(int i = 1;i <= a.len;i++){\n\t\tfor(int j = 1;j <= b.len;j++){\n\t\t\tans.arr[i + j - 1] += a.arr[i] * b.arr[j];\n\t\t}\n\t}\n\tfor(int i = 1;i <= a.len + b.len;i++){//\u8d85\u8fc79999\u7684\u90e8\u5206\u5411\u524d\u8fdb\u4f4d\n    \tif(ans.arr[i] > 9999){\n    \t\tans.arr[i + 1] += ans.arr[i] / 10000;\n    \t\tans.arr[i] = ans.arr[i] % 10000;\n    \t}\n    }\n    if(ans.arr[a.len + b.len] > 0){//\u591a\u4e00\u4f4d\u7279\u5224\n    \tans.len = a.len + b.len;\n    }else{\n    \tans.len = a.len + b.len - 1;\n    }\n    return ans;\n}\n\nInt division(Int a,long long b){//\u9664\u6cd5\u8fd0\u7b97,\u53ea\u9700\u8981\u9ad8\u7cbe\u9664\u4ee5int\u5c31\u884c\u4e86\n\tif(b == 1){//\u52a0\u901f\n\t\treturn a;\n\t}\n    Int ans = zero;\n\tlong long left = 0;\n    for(int i = a.len;i >= 1;i--){\n    \tif((left * 10000 + a.arr[i]) >= b){//\u5982\u679c\u5269\u4f59 + \u73b0\u5728\u591f\u9664\n            ans.arr[i] = (left * 10000 + a.arr[i]) / b;\n            left = (left * 10000 + a.arr[i]) % b;//\u7b97\u51fa\u65b0\u5269\u4f59\n            if(i > ans.len){\n            \tans.len = i;\n            }\n    \t}else{\n    \t\tleft = left * 10000 + a.arr[i];//\u5426\u5219\u76f4\u63a5\u66f4\u65b0\u5269\u4f59\n    \t}\n    }\n    return ans;\n}\n\nvoid print(Int num){//\u8f93\u51fa\u51fd\u6570,\u4e5f\u5f88\u7384\u5b66\n\tbool zero = false;//\u6709\u6ca1\u6709\u51fa\u73b0\u8fc7\u53ef\u4ee5\u8f93\u51fa\u7684\u6570\u5b57\n\tfor(int i = num.len;i >= 1;i--){\n\t\tif(i == num.len){//\u7b2c\u4e00\u4f4d\u4e0d\u7528\u88650\n\t\t\tif(num.arr[i] != 0){\n\t\t\t\tzero = true;\n\t\t\t}\n\t\t\tprintf(\"%d\",num.arr[i]);\n\t\t\tcontinue;\n\t\t}\n\t\tif(zero == false && num.arr[i] == 0){//\u524d\u5bfc0\u76f4\u63a5\u8df3\u8fc7\n\t\t\tcontinue;\n\t\t}\n\t\tif(num.arr[i] > 0){\n\t\t\tzero = true;\n\t\t}\n\t\tif(num.arr[i] < 1000){\n\t\t\tif(num.arr[i] >= 100){//>100\u8865\u4e00\u4e2a\n\t\t\t\tprintf(\"0\");\n\t\t\t}else if(num.arr[i] >= 10){//>10\u8865\u4e24\u4e2a\n\t\t\t\tprintf(\"00\");\n\t\t\t}else{\n                printf(\"000\");//\u5426\u5219\u88653\u4e2a\n\t\t\t}\n\t\t}\n\t\tprintf(\"%d\",num.arr[i]);//\u8f93\u51fa\u81ea\u8eab(\u5982\u679c\u662f0,\u521a\u597d\u88653\u4e2a + \u81ea\u5df11\u4e2a = 4\u4e2a0)\n\t}\n\tprintf(\"\\n\");\n}\n\nint cmp(Int a,Int b){//\u6bd4\u8f83\u51fd\u6570,a > b\u8fd4\u56de1,a < b\u8fd4\u56de-1,a = b\u8fd4\u56de0\n\tif(a.len > b.len){//\u4f4d\u6570\u4e0d\u540c\u76f4\u63a5\u8fd4\u56de\n\t\treturn 1;\n\t}else if(a.len < b.len){\n\t\treturn -1;\n\t}\n\tfor(int i = a.len;i >= 1;i--){//\u4e00\u4f4d\u4e00\u4f4d\u6bd4\u8f83\n\t\tif(a.arr[i] > b.arr[i]){\n\t\t\treturn 1;\n\t\t}else if(a.arr[i] < b.arr[i]){\n\t\t\treturn -1;\n\t\t}\n\t}\n\treturn 0;\n}\n\nInt put(int k){//\u5c06int\u8f6c\u6362\u4e3aInt\u7684\u5feb\u6377\u51fd\u6570\n\tInt ans = zero;\n\tans.arr[1] = k;//\u7b2c\u4e00\u4f4d\u76f4\u63a5\u52a0k\n\tans.len = 1;\n\tfor(int i = 2;ans.arr[i - 1] > 9999;i++){//\u4e00\u4f4d\u4e00\u4f4d\u5300\n\t\tans.arr[i] = ans.arr[i-1] / 10000;\n\t\tans.arr[i-1] = ans.arr[i-1] % 10000;\n\t\tans.len = i;\n\t}\n\treturn ans;\n}\n\nInt power(Int p,int k){//\u8ba1\u7b97p ^ k\u7684\u5feb\u901f\u65b9\u6cd5,\u53c2\u8003P1226\u5feb\u901f\u5e42\u7684\u9898\u89e3\n\tInt ans = put(1),x = p;\n\twhile(k != 1){\n\t\tif(k % 2 == 1){\n\t\t\tans = mult(ans,x);\n\t\t}\n\t\tx = mult(x,x);\n\t\tk = k / 2;\n\t}\n\treturn mult(ans,x);\n}\n\n\n\nint main(){//\u8d85\u7ea7\u7384\u5b66\u7684\u4e3b\u51fd\u6570\n\tempty();\n\tchar str1[10005];\n\tint m;\n\tscanf(\"%d %s\",&m,str1);\n\tInt k = input(str1);\n\tInt left,right,mid;\n\tmemset(left.arr,0,sizeof(left.arr));\n\tleft.len = 0;\n\tleft.arr[1] = 1;\n\tmemset(right.arr,0,sizeof(right.arr));\n    right.len = 1;\n\tright.arr[1] = 1;//\u6e05\u7406left\u548cright\n\twhile(cmp(power(right,m),k) == -1){//\u8fd9\u91cc\u53c2\u8003\u4e86erge\u5927\u4f6c\u7684\u8bf4\u6cd5,\u539f\u6587\u5982\u4e0b:\n\t\t//\u4f60\u5e94\u8be5\u5148\u5c06l\u8d4b\u4e3a1\uff0cr\u8d4b\u4e3a2 \u7136\u540e\u4e0d\u505cl=r\uff0cr*=2\uff0c\u770br^m\u662f\u5426>=n \u627er\u4e0a\u9650 \u8fd9\u6837\u53ef\u4ee5\u907f\u514dRE\u4ee5\u53caTLE \n\t\t//\u8fd8\u6709\u4e00\u6bb5\u65e0\u5173\u7684\u6ca1\u590d\u5236,\u8fd9\u662f\u4e2a\u7f29\u5c0fleft\u548cright\u7684\u8fd0\u7b97\u65b9\u6cd5\n\t\tleft = right;\n\t\tright = mult(right,put(2));\n\t}\n\tInt p = power(put(10),m);//\u6700\u4e3a\u7384\u5b66\u7684\u5730\u65b9\u6765\u4e86!!\n\tk = mult(k,p);//\u8fd9\u91cc\u4e3a\u4e86\u4fdd\u8bc1\u7cbe\u5ea6\u8981\u591a\u7b971\u4f4d,\u8fd9\u6837\u7684\u8bddleft\u548cright\u8981\u4e5810,k\u8981\u4e5810 ^ m,\u4e0b\u9762\u8bb2\u4e86\u4e3a\u4ec0\u4e48\n\tleft = mult(left,put(10));//\u5176\u4ed6\u5927\u4f6c\u8c8c\u4f3c\u90fd\u6ca1\u8fd9\u6837\u505a,\u53ef\u80fd\u8fd8\u662f\u56e0\u4e3a\u6211\u592a\u5f31\u4e86\n\tright = mult(right,put(10));\n\twhile(cmp(reduce(right,left),put(2)) != -1){//\u5224\u65adright-left\u7684\u5dee\u662f\u5426\u5c0f\u4e8e2,\u5982\u679c\u6539\u62101\u6709\u7684\u65f6\u5019\u4f1a\u6b7b\u5faa\u73af\uff0c\u4f46\u662f\u7531\u4e8e\u51992\u7cbe\u5ea6\u53ef\u80fd\u4e0d\u8db3,\u6211\u5c31\u52a0\u4e86\u7384\u5b66\u7684\u591a\u7b97\u4e00\u4f4d\u7684\u65b9\u6cd5\n        mid = division(plus(left,right),2);//\u8ba1\u7b97left\u548cright\u7684\u5e73\u5747\u6570\n        int cmp1 = cmp(power(mid,m),k);//\u5224\u65admid ^ m\u4e0ek\u7684\u5927\u5c0f\n        if(cmp1 == 1){//\u5982\u679ck > mid ^ m,right = mid\n        \tright = mid;\n        }else{//\u5982\u679cmid ^ m > k,left = mid\n            left = mid;\n        }\n\t}\n\tif(cmp(left,put(10)) == -1){//\u5982\u679c\u7b54\u6848 < 10(\u771f\u5b9e\u7b54\u6848 < 1),\u7a0b\u5e8f\u4f1a\u4e0d\u8f93\u51fa,\u6240\u4ee5\u8981\u7279\u5224\n\t\tprintf(\"0\\n\");\n\t}else{\n\t\tprint(division(left,10));//\u7b54\u6848\u8981\u9664\u4ee510\u8f93\u51fa\n\t}\n\treturn 0;//233\u884c\u7684\u795e\u5947\u4e1c\u897f\u7ed3\u675f\u4e86\n}\n```",
        "postTime": 1544183313,
        "uid": 49776,
        "name": "chenxinyang2006",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2293 \u3010[HNOI2004]\u9ad8\u7cbe\u5ea6\u5f00\u6839\u3011"
    },
    {
        "content": "\u4e3a\u9632\u6b62C++\u53d7\u5230python\u7b49~~\u5947\u8469~~\u8bed\u8a00~~\u6b67\u89c6~~\uff0c\u7279\u5730\u53d1\u4e00\u7bc7\n\n\u9898\u89e3\n\n\u601d\u8def\u548c\u697c\u4e0b\u7684\u697c\u4e0b\u7684\u697c\u4e0b\u7c7b\u4f3c\uff0c\u4f46\u6211\u7528\u4e86\"CLASS\"\n\n\u5176\u5b9e\u672c\u6765\u53ef\u4ee5\u66f4\u7b80\u5355\uff0c\u4f46\u4e3a\u4e86**~~\u7b80\u6d01\u6613\u61c2~~**\u4f7f\u7528\u4e86\u6a21\u5757\u5316\n\n\u4ee3\u7801\u5982\u4e0b\n```cpp\n#include<bits/stdc++.h>\n#define ll unsigned long long\nusing namespace std;\nclass _\n{\n\tfriend _ operator+ (const _ a,const _ b)//plus\n\t{\n\t\t_ ans;\n\t\tans.len=max(a.len,b.len)+1;\n\t\tfor(int i=0;i<1260;i++)ans.num[i]=0;\n\t\tfor(int i=0;i<ans.len-1;i++)\n\t\t{\n\t\t\tans.num[i]=a.num[i]+b.num[i];\n\t\t}\n\t\tfor(int i=0;i<ans.len;i++)\n\t\t{\n\t\t\tans.num[i+1]+=ans.num[i]/(ll)1e9;\n\t\t\tans.num[i]%=(ll)1e9;\n\t\t}\n\t\twhile(!ans.num[ans.len-1])ans.len--;\n\t\treturn ans;\n\t}\n\tfriend _ operator* (const _ a,const _ b)//times\n\t{\n\t\t_ ans;\n\t\tans.len=a.len+b.len;\n\t\tfor(int i=0;i<1260;i++)ans.num[i]=0;\n\t\tfor(int i=0;i<a.len;i++)\n\t\t{\n\t\t\tfor(int j=0;j<b.len;j++)\n\t\t\t{\n\t\t\t\tans.num[i+j]+=a.num[i]*b.num[j];\n\t\t\t}\n\t\t}\n\t\tfor(int i=0;i<ans.len;i++)\n\t\t{\n\t\t\tans.num[i+1]+=ans.num[i]/(ll)1e9;\n\t\t\tans.num[i]%=(ll)1e9;\n\t\t}\n\t\twhile(!ans.num[ans.len-1])ans.len--;\n\t\treturn ans;\n\t}\n\tfriend _ operator^ (const _ a,const int b)//power\n\t{\n\t\t_ ans=a,anst=a;\n\t\tfor(int i=1;i<b;i++){ans=anst*a;anst=ans;}\n\t\treturn ans;\n\t}\n\tfriend _ operator/ (const _ a,int)//half\n\t{\n\t\t_ ans=a;\n\t\tfor(int i=ans.len-1;i>0;i--)\n\t\t{\n\t\t\tans.num[i-1]+=(ans.num[i]%2)*1e9;\n\t\t\tans.num[i]/=2;\n\t\t}\n\t\tans.num[0]/=2;\n\t\twhile(!ans.num[ans.len-1])ans.len--;\n\t\treturn ans;\n\t}\n\tfriend _ operator% (const _ a,const _ b)//average\n\t{\n\t\treturn (a+b)/2;\n\t}\n\tfriend bool operator< (_ a,_ b)//b-a>1\n\t{\n\t\ta.num[0]+=1;\n\t\tfor(int i=0;i<a.len;i++)\n\t\t{\n\t\t\ta.num[i+1]+=a.num[i]/(ll)1e9;\n\t\t\ta.num[i]%=(ll)1e9;\n\t\t}\n\t\twhile(!a.num[a.len-1])a.len--;\n\t\tif(a.len<b.len)return 1;\n\t\tif(a.len>b.len)return 0;\n\t\tfor(int i=a.len-1;i>=0;i--)\n\t\t{\n\t\t\tif(a.num[i]<b.num[i])return 1;\n\t\t\tif(a.num[i]>b.num[i])return 0;\n\t\t}\n\t\treturn 0;\n\t}\n\tfriend bool operator> (_ a,_ b)//a<b\n\t{\n\t\t\n\t\tif(a.len<b.len)return 1;\n\t\tif(a.len>b.len)return 0;\n\t\tfor(int i=a.len-1;i>=0;i--)\n\t\t{\n\t\t\tif(a.num[i]<b.num[i])return 1;\n\t\t\tif(a.num[i]>b.num[i])return 0;\n\t\t}\n\t\treturn 0;\n\t}\n\tfriend bool operator== (_ a,_ b)//equal\n\t{\n\t\t\n\t\tif(a.len<b.len)return 0;\n\t\tif(a.len>b.len)return 0;\n\t\tfor(int i=a.len-1;i>=0;i--)\n\t\t{\n\t\t\tif(a.num[i]<b.num[i])return 0;\n\t\t\tif(a.num[i]>b.num[i])return 0;\n\t\t}\n\t\treturn 1;\n\t}\n\tfriend bool operator== (_ a,int)//equals to 0\n\t{\n\t\t\n\t\tif(a.num[0]==0&&a.len<=1)return 1;\n\t\telse return 0;\n\t}\n\tfriend _ operator& (_ a,int b)//sqrt\n\t{\n\t\t_ lb,rb,x2;\n\t\tlb.len=1;\n\t\tlb.num[0]=1;\n\t\trb.len=1;\n\t\trb.num[0]=2;\n\t\tx2.len=1;\n\t\tx2.num[0]=2;\n\t\tfor(int i=1;i<1260;i++)lb.num[i]=0;\n\t\tfor(int i=1;i<1260;i++)rb.num[i]=0;\n\t\tfor(int i=1;i<1260;i++)x2.num[i]=0;\n\t\twhile((rb^b)>a)(lb=rb),(rb=rb*x2);\n\t\twhile(lb<rb)\n\t\t{\n\t\t\t_ mid=(lb%rb);\n\t\t\tif((mid^b)>a)lb=mid;\n\t\t\telse if((mid^b)==a)lb=mid;\n\t\t\telse rb=mid;\n\t\t}\n\t\treturn lb;\n\t}\n\tfriend inline ostream &operator << (ostream&,_&d)//output\n\t{\n\t\tif(d.len<=0)cout<<0;\n\t\telse\n\t\t{\n\t\t\tcout<<d.num[d.len-1];\n\t\t\tfor(int i=d.len-2;i>=0;i--)printf(\"%09d\",d.num[i]);\n\t\t}\n\t} \n\tfriend inline istream &operator >> (istream&,_&d)//input\n\t{\n\t\tstring x;\n\t\tint i;\n\t\tcin>>x;\n\t\tstack <char> s;\n\t\tfor(i=0;i<x.length();i++)s.push(x[i]);\n\t\tfor(i=0;!s.empty();i++)\n\t\t{\n\t\t\tint datas[9]={0};\n\t\t\tfor(int j=0;j<9;j++)\n\t\t\t{\n\t\t\t\tif(!s.empty())datas[j]=s.top()-48,s.pop();\n\t\t\t\telse break;\n\t\t\t}\n\t\t\td.num[i]=datas[0]*1+datas[1]*10+datas[2]*100+datas[3]*1000+datas[4]*10000+datas[5]*100000+datas[6]*1000000+datas[7]*10000000+datas[8]*100000000;\n\t\t}\n\t\td.len=i;\n\t}\n\tprivate:\n\tint len;\n\tll num[1260];\n};\nint main()\n{\n\t_ a,b;\n\tint p;\n\tcin>>p>>a;\n\tif(a==0)\n\t{\n\t\tcout<<0;\n\t\treturn 0;\n\t}\n\tb=a&p;\n\tcout<<b;\n\treturn 0;\n}\n\n```\n\u4e00\u4e9b\u8fd0\u7b97\u7b26\u7684\u5b9a\u4e49\u6211\u6539\u4e86 \u6bd4\u5982%\u662f\u5e73\u5747\uff0c<\u662f\u5dee\u5927\u4e8e1\uff0c>\u662f\u5c0f\u4e8e,&~~\u5c45\u7136~~\u662f \u5f00\u65b9\n(~~\u8bdd\u8bf4\u81ea\u5df1\u590d\u5236\u81ea\u5df1\u9898\u89e3\u4e0d\u4f1a\u53d8\u68d5\u5427~~)",
        "postTime": 1533653110,
        "uid": 67982,
        "name": "\u7535\u8111\u7834\u574f\u4e13\u5bb6",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2293 \u3010[HNOI2004]\u9ad8\u7cbe\u5ea6\u5f00\u6839\u3011"
    }
]