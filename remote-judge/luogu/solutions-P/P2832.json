[
    {
        "content": "\u8c8c\u4f3c\u4e0b\u9762\u7684\u9898\u89e3\u5df2\u5168\u88abhack\n\n\u5206\u6790 ~~dalao\u5c31\u76f4\u63a5\u770b\u7a0b\u5e8f\u5427~~\n\n   1. \u91c7\u7528\u7684\u662f\u666e\u901a\u7684bfs\u5165\u961f\u5217\uff0c\u6b63\u786e\u6027\uff1f\u5148\u662f\u4e0d\u592a\u75b2\u52b3\u65f6\u4f1a\u76f4\u63a5\u5165\u961f\u5217\uff1b\u540e\u9762\u6765\u7684\u60c5\u51b5\u5fc5\u987b\u662f\u5f53\u524d\u8def\u5f84\u5c0f\u4e8e\u4e4b\u524d\u786e\u5b9a\u7684\u624d\u6709\u53ef\u80fd\u4e3a\u89e3\uff1a\u56e0\u4e3a\u5df2\u7ecf\u66f4\u75b2\u52b3\u4e86\uff0c\u8def\u5f84\u603b\u5f97\u5c0f\u70b9\u5427(\u5bf9\u540c\u4e00\u70b9\u5165\u961f\u5217\u5206\u6790)\n   1. \u8be5\u9898\u4e3b\u8981\u96be\u70b9\u5176\u5b9e\u5728\u4e8e\u5982\u4f55\u5b58\u5165\u8def\u5f84\uff0c\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\u4f1a\u968fbfs\u66f4\u65b0\u800c\u53d8\u5316\uff0c\u6240\u4ee5\u672c\u9898\u8fd9\u6837\u4f3c\u4e4e\u884c\u4e0d\u901a~~\u7559\u7ed9dalao\u4eec\u5c1d\u8bd5\u5427~~\uff0c\u4e00\u822cspfa_bfs\u90fd\u4e60\u60ef\u7528\u6807\u51c6queue\u5b58\u5165\u70b9\u3002\u8fd9\u91cc\u81ea\u5df1\u5b9a\u4e49\u961f\u5217\uff0c\u7528\u7ed3\u6784\u4f53\u53bb\u7ef4\u62a4\u503c\n   \nps\uff1a\u7531\u4e8e\u849f\u84bb\u80fd\u529b\u6709\u9650\uff0c\u5982\u6709hack\u6570\u636e\u5e0c\u671b\u79c1\u4fe1\n\n\n```cpp\n//n<=10000, m<=200000\n#include<cstdio>\n#include<cstring>\nusing namespace std;\nstruct node{\n    int to,next,d;\n}dis[200010];\nstruct code{\n    int u,d,dfn,pre;\n}que[100000010];\nint n,m,num,inf=0x3f3f3f3f,tail,hea; int last[10010],head[10010],lu[10010];\ninline void add(int u,int v,int d){\n    dis[++num].to=v; dis[num].d=d; dis[num].next=head[u]; head[u]=num;\n}\nvoid cout(int x){\n    if(!x)\n        return;\n    cout(que[x].pre);\n    printf(\"%d \",que[x].u);\n}\nvoid bfs(){\n    memset(lu,inf,sizeof(lu));\n    lu[1]=0;\n    que[++tail].u=1;\n    while(hea<=tail){\n        hea++;\n        int u=que[hea].u,dfn=que[hea].dfn,d=que[hea].d;\n        for(int i=head[u];i;i=dis[i].next){\n            int v=dis[i].to;\n            if(lu[v]>d+dfn+dis[i].d){\n                lu[v]=d+dfn+dis[i].d;\n                tail++;\n                que[tail]=(code){v,lu[v],dfn+1,hea};\n                last[v]=tail;\n            }\n        }\n    }\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;++i){\n        int u,v,d;\n        scanf(\"%d%d%d\",&u,&v,&d);\n        add(u,v,d);\n    }\n    bfs();\n    printf(\"%d\\n\",lu[n]);\n    cout(last[n]);\n    return 0;\n}\n```",
        "postTime": 1538527434,
        "uid": 88804,
        "name": "y2823774827y",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "# $P2832$ \u884c\u8def\u96be \u9898\u89e3\n\n\u73cd\u7231\u751f\u547d\uff0c\u8fdc\u79bb\u8d70\u8def\u54c7\u2026\u2026~~\u6ca1\u4e8b\u8dd1\u5230\u5927\u5c71\u91cc\u5e72\u5565\u5462~~\n\n\n\n\u53cd\u6b63\u8fd9\u5c31\u662f\u4e2a\u6bd2\u7624\u9898\u76ee\u3002\u56e0\u4e3a\u9898\u76ee\u6709\u4e24\u4e2a\u6761\u4ef6\uff0c\u5373\u8d70\u7684\u8def\u7a0b\u548c\u8d70\u8fc7\u7684\u901a\u9053\u6570\u91cf\uff0c\u800c\u901a\u9053\u6570\u91cf\u662f\u4f1a\u5f71\u54cd\u8d70\u8fc7\u7684\u8def\u7a0b\u7684\uff0c\u6240\u4ee5\u4e00\u822c\u7684\u6700\u77ed\u8def\u7b97\u6cd5\u90fd\u53ef\u4ee5\u88ab\u5361\u6389\u3002\n\n\u6bd4\u5982\u6211\u4eec\u6765\u770b\u4e0b\u9762\u8fd9\u4e2a\u6817\u5b50\uff1a\n\n![](https://i.loli.net/2019/09/19/xHhSBpIDOqumwRY.png)\n\n\u6211\u4eec\u53d1\u73b0 $1->n$ \u7684\u8def\u5f84\u6709\u4e24\u6761\uff0c\u5206\u522b\u662f\uff1a\n\n$\\color{red}1->4->5->6->7$ \u548c $\\color{green}1->2->3->4->5->6->7$\n\n\u5982\u679c\u4f60\u6253\u6b63\u5e38\u7684$dijkstra$\uff0c\u90a3\u4e48\u6839\u636e\u6700\u77ed\u8fb9\u539f\u5219\uff0c\u5b83\u4f1a\u9009\u62e9\u7b2c\u4e8c\u6761\u3002\u597d\u4e86\u4f60\u88ab\u5361\u4e86\u3002\u5982\u679c\u4f60\u6253 $SPFA$\uff0c\u90a3\u4e48\u6211\u4eec\u4e0d\u4ec5\u53ef\u4ee5\u5728\u6570\u636e\u4e0a\u5361\u4f60\uff0c\u4e5f\u53ef\u4ee5\u8ba9\u4f60 $T$ \u98de\u2026\u2026\n\n\u6240\u4ee5**\u5f88\u660e\u663e\u8fd9\u662f\u4e0d\u53ef\u4ee5**\u7684\u3002\u4f46\u662f\u6211\u53d1\u73b0\u7b2c$11,12$\u4e24\u7ec4\u6570\u636e\u6784\u9020\u7684\u56fe\u90fd\u7c7b\u4f3c\u4e8e\u4e0a\u9762\u8fd9\u79cd\u2026\u2026\u5373\u4ece$1$\u5f00\u59cb\uff08\u6216\u8005\u7ec8\u70b9\uff09\u53ea\u6709 $2$ \u79cd\u9009\u62e9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u9488\u5bf9\u6570\u636e**\u5f3a\u5236**\u9009\u4e00\u6761\u8fb9\u548c\u4e0d\u9009\u4e00\u6761\u8fb9\u3002\u4f46\u5bf9\u4e8e\u975e$Hack$\u6570\u636e\u4f60\u8fd9\u4e48\u505a\u5c31\u4e0d\u5bf9\u4e86\uff0c\u800c\u90a3\u4e24\u7ec4\u6570\u636e\u5e76\u6ca1\u6709\u4ec0\u4e48\u7279\u5f81\uff0c\u6240\u4ee5\u4f60\u53ef\u4ee5\u8dd1\u4e24\u904d $dijkstra$\uff0c\u4e00\u904d\u6b63\u5e38\uff0c\u4e00\u904d\u53ea\u6709\u4e00\u4e2a\u70b9\u6ca1\u8d70\u8fc7\u624d\u66f4\u65b0\uff0c\u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u901a\u8fc7\u5168\u90e8\u6570\u636e\uff0c\u4f46\u662f\u8fd9\u5e76\u4e0d\u662f\u6211\u4eec\u8981\u8bb2\u7684\u91cd\u70b9\u3002**\u56e0\u4e3a\u8fd9\u79cd\u5199\u6cd5\u53ef\u4ee5\u88ab\u8fd9\u6837\u7684\u56fe\u5361\u6389**\uff1a\n\n![](https://i.loli.net/2019/09/19/TJb9y8m4vIipXZf.png)\n\n\u4f60\u4e00\u5b9a\u53d1\u73b0\u4e86\uff0c\u8fd9\u5f20\u56fe $1$ \u4e0d\u6b62\u4e00\u4e2a\u51fa\u53e3\uff0c\u4f46\u662f\u4f60\u5b89\u7167\u4e0a\u9762\u7684\u5199\u6cd5\u662f\u5bf9\u7684\uff0c\u4e5f\u53ea\u662f\u5076\u7136\uff0c\u6211\u4eec\u7a0d\u5fae\u8fdb\u884c\u4fee\u6539\u4f60\u5c31\u88ab\u5361\u4e86\uff1a\n\n![](https://i.loli.net/2019/09/19/yeIGbBd54jxMJwu.png)\n\n```cpp\nINPUT:\n9 10\n1 2 1\n2 3 1\n3 4 0\n4 5 0\n1 5 97\n1 6 3\n6 5 5\n5 7 1\n7 8 1 \n8 9 1\n\nRIGHT OUTPUT\n21\n1 6 5 7 8 9\n\nWRONG OUTPUT\n26\n1 2 3 4 5 7 8 9\n```\n\u5f88\u660e\u663e\u6211\u4eec\u8fd9\u6837\u5f3a\u5236\u9009\u8fb9\u4e0d\u6b63\u786e\u4e86\u3002\u867d\u7136$1->6$\u6743\u503c\u4e3a$3$\u662f\u6bd4$1->2$\u6743\u503c\u4e3a$1$\u6765\u7684\u5927\u7684\uff0c\u4f46\u662f\u5176\u53cd\u800c\u80fd\u591f\u6210\u4e3a\u6700\u4f18\u89e3\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u5176\u5b9e\u5c31\u662f\u56e0\u4e3a\u9898\u76ee\u4e0d\u4ec5\u9650\u5236\u4e86\u8def\u5f84\u6700\u77ed\uff0c\u8fd8\u9650\u5236\u4e86\u4e00\u4e2a\u75b2\u52b3\u5ea6\u3002\u800c\u75b2\u52b3\u5ea6\u5f71\u54cd\u4e86\u9014\u5f84\uff0c\u6240\u4ee5\u8d70\u4e0b\u9762\u90a3\u6761\u8def\u53cd\u800c\u66f4\u75b2\u52b3\uff0c\u6700\u540e\u66f4\u6162\uff0c\u8fd9\u4e5f\u5c31\u662f\u4e00\u53e5\u8bdd\uff1a\n\n$$\\color{red}\\text{\u6b32\u901f\u5219\u4e0d\u8fbe}$$\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u5728\u8def\u5f84\u957f\u5ea6\u548c\u539f\u8def\u957f\u5ea6\u5f53\u4e2d\u8fdb\u884c\u4e00\u4e2a\u6298\u4e2d\uff0c\u53d6\u4e00\u4e2a\u6700\u4f18\u51b3\u7b56\u3002\n\n**\u90a3\u4e48\u6211\u4eec\u5148\u8003\u8651\u6700\u66b4\u529b\u7684\u7b97\u6cd5\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9\u6709\u591a\u6761\u51fa\u8fb9\uff0c\u7206\u641c\u5f3a\u5236\u9009\u62e9\u4e0e\u4e0d\u9009\u3002**\n\n\u5f88\u660e\u663e\u8fd9\u6837\u662f\u4f1a$T$\u7684\uff0c\u56e0\u4e3a\u6700\u574f\u7684\u590d\u6742\u5ea6\u662f$O(M^2+NM)$ \u7684\u3002\n\n\uff08\u4e5f\u8bb8\u590d\u6742\u5ea6\u662f\u4f1a\u5c0f\u4e8e\u8fd9\u4e2a\u7684\uff0c\u56e0\u4e3a\u6211\u542c\u8bf4\u4e5f\u53ef\u4ee5\u8fc7\u2026\u2026\uff09\n\n\u90a3\u4e48\u6211\u4eec\u4e0d\u7528\u8003\u8651\u4f18\u5316\u4e86\u2026\u2026\u56e0\u4e3a\u5df2\u7ecf\u6ca1\u6709\u53ef\u4ee5\u4f18\u5316\u7684\u7a7a\u95f4\u4e86\u3002\u6240\u4ee5\u6211\u4eec\u5fc5\u987b\u5c1d\u8bd5\u4e00\u4e0b\u522b\u7684\u601d\u8def\u3002\n\n\u5176\u5b9e\u4f60\u662f\u53ef\u4ee5\u7528 $A*$\u641c\u7d22 \u7684\uff08\u5982\u679c\u4f60\u4f30\u4ef7\u51fd\u6570\u5199\u7684\u597d\u7684\u8bdd\uff09\u3002\u4f46\u662f\u6211\u4e0d\u4f1a\u8fd9\u79cd\u795e\u5947\u7684\u7b97\u6cd5\uff0c\u7136\u540e\u6211\u7b2c\u4e8c\u53cd\u5e94\u5c31\u662f**\u6309\u5c42\u6b21\u6765\u627e\u8def\u5f84**\u3002\u4e5f\u5c31\u662f$BFS$\u3002\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u505a\u662f\u53ef\u884c\u7684\uff1f\n\n\u4e0b\u9762\u6765\u770b\u770b\u4e3a\u4ec0\u4e48\u5427\uff0c\u8fd8\u662f\u62ff\u4e0a\u9762\u90a3\u5e45\u56fe\u4e3e\u6817\u5b50\uff1a\n\n![](https://i.loli.net/2019/09/19/yeIGbBd54jxMJwu.png)\n\n\u9996\u5148\u6211\u4eec\u5148\u624b\u52a8\u5212\u5206\u4e00\u4e0b$Bfs$\u7684\u987a\u5e8f\uff0c\u4e5f\u5c31\u662f\u8282\u70b9\u5c42\u6b21\uff1a\n\n\u9996\u5148\u4ece$1$\u8bbf\u95ee\uff0c\u8282\u70b9$1$\u7684\u5c42\u6b21\u662f$deep[1]=1$\u3002\n\n\u5c42\u6b21\u4e3a$deep_i=2$\u7684\u6709\uff1a$2 ,6$\uff0c$deep_i=3$\u7684\u6709$3,5$\u3002\n\n\u5230\u8fd9\u91cc\u6211\u4e0d\u518d\u7ee7\u7eed\uff0c\u56e0\u4e3a\u4f60\u4f1a\u53d1\u73b0\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\uff1a\u8282\u70b9$5$\u5728\u62d3\u5c55\u7ed9$7$\u540e\u8fd8\u4f1a\u88ab$3->4->5$\u5728\u6807\u8bb0\u4e00\u4e2a\u5c42\u6b21\uff08\u5373\u66f4\u65b0\uff09\u3002\u6309\u7167\u4ee5\u5f80\u7684$Bfs$\u8fd9\u79cd\u60c5\u51b5\u662f\u4e0d\u4f1a\u51fa\u73b0\u7684\uff0c\u56e0\u4e3a\u6211\u4eec\u7528\u4e86\u4e00\u4e2a$vis_i=0/1$\u6570\u7ec4\u8868\u793a\u4e00\u4e2a\u672a\u8bbf\u95ee\u8fc7/\u8bbf\u95ee\u8fc7\u3002\u90a3\u8282\u70b9$4$\u5c31\u518d\u4e5f\u4e0d\u4f1a\u4f20\u9012\u7ed9$5$\u4fe1\u606f\u4e86\u3002\u4f46\u662f\u4e07\u4e00\u5c31\u8981$4$\u8d70\u5230$5$\u624d\u662f\u6700\u4f18\u7684\u5462\uff1f\u90a3\u4e48\u6211\u4eec\u5148\u8003\u8651\u5148\u66f4\u65b0$5->7$\u518d\u66f4\u65b0$4->5->7$\u4f1a\u4e0d\u4f1a\u9020\u6210\u5f71\u54cd\uff08\u56e0\u4e3a\u5728$4$\u6ca1\u8bbf\u95ee\u5230$5$\u4e4b\u524d$4$\u548c$7$\u662f\u540c\u4e2a\u5c42\u6b21\uff0c\u56e0\u6b64\u5148\u62d3\u5c55$5$\uff0c\u518d\u62d3\u5c55$4$\uff09\u3002\n\n\u5176\u5b9e\u4f60\u4f1a\u53d1\u73b0\u662f**\u4e0d\u4f1a\u5f71\u54cd**\u7684\u3002\u56e0\u4e3a\u6211\u4eec\u66f4\u65b0\u6709\u4e0b\u9762\u8fd9\u4e00\u4e2a\u6761\u4ef6\u9650\u5236\uff1a\n\n$$\\color{green}\\text{\u4e09\u89d2\u4e0d\u7b49\u5f0f\uff1a}dis[y]\u2264dis[x]+edge_{x,y}$$\n\n### $Done!$\n\n\u5176\u5b9e\u4f60\u5df2\u7ecf\u5b8c\u6210\u4e86\u3002**\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u6254\u6389$vis$\u6570\u7ec4\u4e86**\u3002\u771f\u6b63\u5c31\u662f\u53ea\u9700\u8981\u4e00\u4e2a$BFS$\u89e3\u51b3\u5373\u53ef\u3002\u56e0\u4e3a\u5982\u679c\u4e00\u5f00\u59cb$1->2$\u6bd4$1->6$\u66f4\u4f18\uff0c\u90a3\u4e48\u540e\u8005\u4e00\u5b9a\u4f1a\u8986\u76d6\u5230\u524d\u8005\uff0c\u56e0\u4e3a$4$\u8fd8\u4f1a\u518d\u66f4\u65b0\u5230$5$\u3002\u90a3\u4e48\u5982\u679c$1->2$\u6bd4$1->6$\u66f4\u4f18\u4f46\u662f\u5374\u662f$4$\u5148\u66f4\u65b0$5$\u7136\u540e$6$\u518d\u66f4\u65b0$5$\u5462?\n\n**\u90fd\u8bf4\u4e86\u8981\u6ee1\u8db3\u4e0a\u9762\u7684\u6761\u4ef6\u518d\u8f6c\u79fb\u4e86\u561b\uff01**\uff08\u5f53\u7136\u4f60\u9700\u8981\u4e00\u4e2a\u989d\u5916\u7684$dfn$\u9650\u5236\uff0c\u800c\u4e0a\u9762\u6ca1\u6253\u51fa\u6765\uff09\n\n\u56e0\u6b64\u5373\u4f7f$4$\u5148\u66f4\u65b0\u4e86$5$\u4e5f\u4e0d\u4f1a\u5bf9\u7b54\u6848\u9020\u6210\u5f71\u54cd\u3002\u4e0a\u8ff0\u7ed3\u8bba\u53ef\u4ee5\u63a8\u5e7f\u52301\u8282\u70b9\u66f4\u591a\u8fde\u8fb9\u7684\u60c5\u51b5\u3002\n\n\u4e0d\u4f1a\u9020\u6210\u5f71\u54cd\u7684\u60c5\u51b5\uff0c\u6bd4\u5982\uff1a\n\n![](https://i.loli.net/2019/09/19/epCSuRr2i4q38tY.png)\n\n~~\u5f88\u660e\u663e\u6ca1\u6709\u5f71\u54cd\u3002~~\n\n\u7136\u540e\u7531\u4e8e\u4e0a\u9762\u7684\u8fd9\u79cd\u60c5\u51b5\u4e5f\u662f\u4e2a\u7279\u4f8b\uff0c\u4e0a\u9762\u7684\u6784\u9020\u4e5f\u53ef\u80fd\u51fa\u73b0\u5728\u56fe\u7684\u4e2d\u90e8\u751a\u81f3\u51fa\u73b0\u591a\u4e2a\uff0c\u4f46\u6211\u4eec\u6309\u7167\u4e0a\u9762\u7684\u65b9\u5f0f\u8dd1\u4ecd\u7136\u4e0d\u4f1a\u51fa\u9519\uff0c\u56e0\u4e3a\u5047\u8bbe\u5bf9\u4e8e\u56fe\u4e2d\u95f4\u67d0\u4e2a\u90e8\u5206\u7b2c\u4e00\u6b21\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\uff0c\u90a3\u4e48\u4e4b\u524d\u7684\u60c5\u51b5\u90fd\u5f88\u6b63\u5e38\uff0c\u90a3\u4e48\u662f\u6ca1\u6709\u95ee\u9898\u7684\uff1b\u5982\u679c\u5728\u8fd9\u4e4b\u540e\u53c8\u51fa\u73b0\u4e86\u8fd9\u6837\u7684\u6784\u9020\uff0c\u90a3\u4e48\u7531\u4e8e\u6700\u4f18\u89e3\u91cd\u590d\u66f4\u65b0\u7684\u6027\u8d28\uff0c\u81ea\u7136\u4e5f\u53ef\u4ee5\u6c42\u51fa\u6700\u4f18\u89e3\u3002\n\n\u7136\u540e\u8fd9\u4e2a\u5e94\u8be5\u6ca1\u6709\u8d1f\u6743\u5427\uff1f\u5373\u4f7f\u51fa\u73b0\u4e86\u8d1f\u6743+\u73af\u4e5f\u4f1a\u6b63\u786e\uff0c\u56e0\u4e3a\u6bcf\u591a\u8d70\u4e00\u6761\u8fb9\u90fd\u4f1a\u79ef\u7d2f\u75b2\u52b3\u5ea6\uff0c\u6240\u4ee5\u6700\u7ec8\u4e5f\u4f1a\u5230\u8fbe$n$\u70b9\uff08\u56e0\u4e3a\u4f60\u4e0d\u53ef\u80fd\u771f\u7684\u8f93\u5165\u4e00\u4e2a\u8d1f\u65e0\u7a77\u5427\uff09\uff0c\u4e0d\u4f1a\u51fa\u73b0\u6211\u4eec\u6ca1\u6709$vis$\u6570\u7ec4\u6b7b\u5faa\u73af\u7684\u60c5\u51b5\uff01\n\n~~\u53cd\u6b63\u9898\u76ee\u6570\u636e\u5e94\u8be5\u4fdd\u8bc1\u8fb9\u6743\u6ca1\u6709\u8d1f\u7684\u5566\u2026\u2026\u96be\u4e0d\u6210\u53ef\u4ee5\u65f6\u5149\u5012\u6d41\uff1f~~\n\n\u7136\u540e\u6211\u4eec\u6765\u5206\u6790\u4e00\u4e0b\u590d\u6742\u5ea6\u5427\uff1a\n\n\u6211\u4eec\u6070\u597d\u4f1a\u904d\u5386\u6bcf\u4e00\u6761\u8fb9\u2026\u2026\u597d\u591a\u6b21\uff0c\u6240\u4ee5\u603b\u7684\u590d\u6742\u5ea6$O(\\sum_{2\u2264i\u2264n-1}^{i}in[i]*out[i]+out[1]+in[n])$\uff0c\u53cd\u6b63\u6bd4\u8f83\u7384\u5b66\u3002\n\n\u6240\u4ee5\u53ea\u5206\u6790\u6700\u574f\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u597d\u4e86\uff0c\u56e0\u4e3a$n_{max}=10000,m_{max}=200000$\uff0c\u6bcf\u4e2a\u8282\u70b9\u5927\u7ea6\u90fd\u6709$20$\u6761\u8fde\u8fb9\uff0c\u6240\u4ee5**\u6700\u574f\u7684\u590d\u6742\u5ea6\u5c31**\u662f$O(\\sum_{2\u2264i\u2264n-1}^{i}20*20+40)=O(400N)$\uff0c\u8fd8\u662f\u53ef\u4ee5\u901a\u8fc7\u7684\u3002\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u53d6\u5e73\u5747\u662f\u6700\u5927\u7684\uff0c\u6bd5\u7adf\u6309\u7167\u6570\u5b66\u77e5\u8bc6\uff0c\u4e24\u6570\u4e4b\u548c\u786e\u5b9a\uff0c\u90a3\u4e48\u4e24\u4e2a\u6570\u8d8a\u63a5\u8fd1\u4ed6\u4eec\u7684\u4e58\u79ef\u8d8a\u5927\u561b\u2026\u2026\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u6210\u529f\u89e3\u51b3\u4e86\u8fd9\u6837\u4e00\u4e2a~~\u795e\u5947\u7684~~$DL$\u7684\u9898\u76ee\u3002\n\n\u4e0b\u9762\u5148\u7ed9\u51fa\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u7684**\u6700\u77ed\u8def\u7b97\u6cd5**\u3002\n\n\u7531\u4e8e\u7ebf\u6bb5\u6811\u4f18\u5316$dijkstra$\u660e\u663e\u5feb\u4e8e\u5806\u4f18\u5316\uff0c\u6240\u4ee5\u4e0b\u9762\u6253\u7684$dijkstra$\u662f\u7ebf\u6bb5\u6811\u4f18\u5316\u7684\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 10010, M = 200010;\nint head[N], Next[M], edge[M], ver[M];\nvoid add(int x , int y, int val) {\n\tstatic int cnt = 0;\n\tver[++cnt] = y, edge[cnt] = val;\n\tNext[cnt] = head[x], head[x] = cnt;\n}\nnamespace SEG {\n#define Tree_SIZE 100010\n#define inf (1 << 30)\n\tstruct Edge {\n\t\tint l, r, val, id;\n\t}t[Tree_SIZE << 2];\n#define ls(x) (x << 1)\n#define rs(x) (x << 1 | 1)\n\tinline void update(int p) {\n\t\tif(t[ls(p)].val == inf && t[rs(p)].val == inf)\n\t\t\tt[p].val = inf, t[p].id = 0;\n\t\telse if(t[ls(p)].val < t[rs(p)].val)\n\t\t\tt[p].val = t[ls(p)].val, t[p].id = t[ls(p)].id;\n\t\telse \n\t\t\tt[p].val = t[rs(p)].val, t[p].id = t[rs(p)].id;\n\t}\n\t\n\tinline void build(int p, int l, int r) {\n\t\tt[p].l = l, t[p].r = r, t[p].val = inf;\n\t\tif(l == r) {\n\t\t\tt[p].id = l;\n\t\t\treturn;\n\t\t}\n\t\tint mid = (l + r) >> 1;\n\t\tbuild(ls(p), l, mid);\n\t\tbuild(rs(p), mid + 1, r);\n\t}\n\t\n\tinline void change(int p, int x, int val) {\n\t\tif(t[p].l == t[p].r) {\n\t\t\tt[p].val = val;\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tint mid = (t[p].l + t[p].r) >> 1;\n\t\tif(x <= mid) change(ls(p), x, val);\n\t\telse change(rs(p), x, val);\n\t\tupdate(p); \n\t}\n#undef Tree_SIZE\n#undef inf\n#undef ls\n#undef rs\n}\n\nbool v[N]; int d[N], pre[N], dfn[N];\ninline void dijkstra(int s, int n) {\n#define inf (1 << 30)\n    memset(d, 0x3f, sizeof(d));\n    memset(v, 0, sizeof(v));\n    SEG::build(1, 1, n);\n    d[s] = 0, SEG::change(1, s, 0); \n    dfn[s] = 0;\n    while(SEG::t[1].id) {\n    \tint x = SEG::t[1].id;\n    \tSEG::change(1, x, inf);\n    \tif(v[x]) continue;\n    \tv[x] = 1;\n    \tfor(int i = head[x]; i; i = Next[i]) {\n    \t\tint y = ver[i];\n    \t\tif((d[y] > d[x] + edge[i] + dfn[x]) && !dfn[y]) {\n    \t\t\td[y] = d[x] + edge[i] + dfn[x];\n    \t\t\tdfn[y] = dfn[x] + 1;\n    \t\t\tpre[y] = x;\n    \t\t\tSEG::change(1, y, d[y]);\n\t\t\t}\n\t\t}\n\t}\n#undef inf\n}\n\nint pre1[N], d1[N];\ninline void Dijkstra(int s, int n) {\n#define inf (1 << 30)\n\tmemset(d1, 0x3f, sizeof(d));\n\tmemset(dfn, 0 ,sizeof(dfn));\n\tmemset(v, 0, sizeof(v));\n\tSEG::build(1, 1, n);\n\td1[s] = 0, SEG::change(1, s, 0); \n    dfn[s] = 0;\n    while(SEG::t[1].id) {\n    \tint x = SEG::t[1].id;\n    \tSEG::change(1, x, inf);\n    \tif(v[x]) continue;\n    \tv[x] = 1;\n    \tfor(int i = head[x]; i; i = Next[i]) {\n    \t\tint y = ver[i];\n    \t\tif((d1[y] > d1[x] + edge[i] + dfn[x])) {\n    \t\t\td1[y] = d1[x] + edge[i] + dfn[x];\n    \t\t\tdfn[y] = dfn[x] + 1;\n    \t\t\tpre1[y] = x;\n    \t\t\tSEG::change(1, y, d1[y]);\n\t\t\t}\n\t\t}\n\t}\n#undef inf\n}\n\ninline void output(int x, int *pre) {\n\tif(pre[x]) output(pre[x], pre);\n\tprintf(\"%d \", x);\n}\n\nint main() {\n\tint n, m;\n    scanf(\"%d %d\", &n, &m);\n    for(int i = 1, x, y, v; i <= m; i++) {\n    \tscanf(\"%d %d %d\", &x, &y, &v);\n    \tadd(x, y, v);\n\t}\n\tdijkstra(1, n);\n\tDijkstra(1, n);\n\tprintf(\"%d\\n\", min(d[n], d1[n]));\n\tif(d1[n] < d[n]) output(n, pre1);\n\telse output(n, pre);\n    return 0;\n}\n```\n\u7136\u540e\u4f60\u77e5\u9053\u4e0a\u9762\u7684\u7b97\u6cd5**\u4ec5\u4ec5\u80fd\u591f\u901a\u8fc7\u672c\u9898\u53ca\u4e00\u4e9b\u7279\u6b8a\u6570\u636e**\u5c31\u597d\uff0c\u4ee5\u540e\u8fd8\u4f1a\u88ab\u5361\u7684\u3002\n\n\u6211\u4eec\u628a\u6ce8\u610f\u529b\u653e\u5728\u4e0b\u9762\u8fd9\u4e00\u4efd$BFS$\u7684\u4ee3\u7801\u5f53\u4e2d\u3002\n\n\u7136\u540e\u6709\u4e00\u4e2a\u5c0f\u7ec6\u8282\u5c31\u662f\uff0c\u56e0\u4e3a\u4f1a\u91cd\u590d\u8986\u76d6\uff0c\u6240\u4ee5\u5bfb\u627e\u524d\u9a71\u8282\u70b9\u6309\u7167\u961f\u5217\u7f16\u53f7\u627e\u5c31\u53ef\u4ee5\u4e86\uff0c\u6240\u4ee5\u6211\u4eec**\u624b\u52a8\u6a21\u62df\u4e00\u4e2a\u961f\u5217**\uff0c\u6570\u7ec4\u5927\u5c0f\u5c31\u5f00$400*N$\u5c31\u53ef\u4ee5\uff08\u56e0\u4e3a\u6700\u591a\u8bbf\u95ee$400*N$\u6761\u8fb9\uff08\u5176\u5b9e\u6bd4\u8fd9\u4e2a\u6570\u8fd8\u5c0f\u70b9\uff09\uff0c\u70b9\u6570\u591a\u4e00\u70b9\u70b9\uff09\u3002\u7136\u540e\u4ecd\u7136\u91c7\u7528\u9012\u5f52\u8f93\u51fa\u7b54\u6848\uff08\u4f60\u4eec\u5e94\u8be5\u90fd\u80fd\u60f3\u51fa\u6765\uff09\u3002\u8fd8\u6709\u4e00\u79cd\u6b63\u5e8f\u5faa\u73af\u8f93\u51fa\u7b54\u6848\u7684\u65b9\u5f0f\uff0c\u5c31\u662f\u4f60\u8dd1\u53cd\u56fe\uff0c\u90a3\u6837\u76f4\u63a5\u8f93\u51fa\u5c31\u662f\u6b63\u7684\u4e86$QAQ$\u3002\u8bb0\u5f97\u8bb0\u5f55\u4e0b\u6700\u540e\u66f4\u65b0$n$\u8282\u70b9\u7684\u961f\u5217\u4e2d\u5143\u7d20\u7f16\u53f7\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N = 10010, M = 200010;\nint head[N], Next[M], edge[M], ver[M];\nvoid add(int x , int y, int val) {\n\tstatic int cnt = 0;\n\tver[++cnt] = y, edge[cnt] = val;\n\tNext[cnt] = head[x], head[x] = cnt;\n}\n\nint d[N], pre[N];\nstruct rec {\n\tint x, dfn, dis, pre;\n\trec() { x = 0, dfn = 0, dis = 0, pre = 0;}\n}q[400 * N];\n\ninline void bfs() {\n\tmemset(d, 0x3f, sizeof d);\n\trec k;\n\tint l = 1, r = 0;\n\tq[++r].x = 1, q[r].dfn = 0, q[r].dis = 0, q[r].pre = 0;\n\twhile(l <= r) { \n\t\tint x = q[l].x, dis = q[l].dis, dfn = q[l++].dfn;\n\t\tfor(int i = head[x]; i; i = Next[i]) { \n\t\t\tint y = ver[i]; \n\t\t\tif(d[y] > dis + dfn + edge[i]) { \n\t\t\t\td[y] = dis + dfn + edge[i];\n\t\t\t\tk.x = y, k.dfn = dfn + 1, k.dis = d[y], k.pre = l - 1;\n\t\t\t\tq[++r] = k;\n                pre[y] = r;\n\t\t\t}\n\t\t}\n\t}\n}\n\ninline void output(int x) { \n\tif(q[x].pre) output(q[x].pre);\n\tprintf(\"%d \", q[x].x);\n}\n\nint main() {\n\tint n, m;\n    scanf(\"%d %d\", &n, &m);\n    for(int i = 1, x, y, v; i <= m; i++) {\n    \tscanf(\"%d %d %d\", &x, &y, &v);\n    \tadd(x, y, v);\n\t}\n\tbfs();\n\tprintf(\"%d\\n\", d[n]);\n\toutput(pre[n]);\n    return 0;\n}\n```\n\n\u7136\u540e\u6211\u60f3\u603b\u7ed3\u7684\u5c31\u662f\uff1a**\u770b\u5230\u8def\u5f84\u6700\u77ed\u4e0d\u4e00\u5b9a\u662f\u6700\u77ed\u8def\u7b97\u6cd5\u3002**\n\n\u8fd9\u91cc\u6709\u672c\u9898\u7684\u4e00\u4e9b\u4e0d\u4f18\u79c0\u7684$Hack$\u6570\u636e\uff1a[\u70b9\u6211$QAQ$](https://www.luogu.com.cn/discuss/show/68500)\n\n\u8fd9\u91cc\u662f\u6211\u7684\u8bc4\u6d4b\u8bb0\u5f55\uff1a\n\n\u6700\u77ed\u8def\u7b97\u6cd5\uff1a[\u70b9\u6211$QAQ$](https://www.luogu.com.cn/record/24105986)\n\n$BFS$\uff1a[\u70b9\u6211$QAQ$](https://www.luogu.com.cn/record/24121414)\n\n------------\n\n$2019.9.20 \\ Update:$\u4fee\u6b63\u4e86\u9898\u89e3\u4e2d\u4e00\u4e9b\u7ec6\u8282\u9519\u8bef\uff0c\u589e\u52a0\u4e86\u4e00\u4e9b\u63d0\u9192\u3002\n\n\n\n$End$\n------------\n\n\n### **\u90fd\u5199\u4e86\u8fd9\u4e48\u6e05\u695a\u4e86\uff0c\u4e0d\u70b9\u4e2a\u8d5e\uff1f**\n$PS:$\u5982\u679c\u8fd9\u6837\u7684$BFS$\u5199\u6cd5\u4e0d\u6b63\u786e\u88ab$hack$\u6389\u4e86\u8bf7\u5728\u8bc4\u8bba\u533a\u7559\u8a00\u3002",
        "postTime": 1568904719,
        "uid": 196649,
        "name": "xiejinhao",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "## \u9996\u5148\uff0c\u4e0d\u80fd\u7528dijkstra\n\u56e0\u4e3a\u5f53\u524d\u7684\u6700\u77ed\u4e0d\u4e00\u5b9a\u662f\u80fd\u591f\u5168\u5c40\u7684\u6700\u77ed\u8def\uff08\u7c7b\u4f3cdijkstra\u4e0d\u80fd\u591f\u8dd1\u8d1f\u6743\u8fb9\uff0c\u5982\u679c\u5f53\u524d\u6709\u4e00\u6761\u5f88\u957f\u4f46\u662f\u6b65\u6570\u5f88\u5c11\u7684\u8fb9\uff0c\u8fd8\u6709\u4e00\u7ec4\u5f88\u77ed\uff0c\u4f46\u662f\u6b65\u6570\u5f88\u591a\u7684\u8fb9\uff0c\u5f53\u524d\u7684\u6700\u77ed\u66f4\u65b0\u540e\u9762\u8282\u70b9\u4e0d\u4e00\u5b9a\u662f\u6700\u4f18\u7684\uff0c\u4f46\u662f\u6709\u4e9b\u9898\u89e3\u8fc7\u4e86\u8ba9\u6211\u5f88\u4e0d\u7406\u89e3\uff0c\u8bf7\u5c1d\u8bd5\u8fd9\u4e00\u4e9b\u6570\u636e[hack\u6570\u636e](https://www.luogu.org/discuss/show/68500)\uff09\n\n\u6240\u4ee5\u53ea\u80fd\u8dd1\u5feb\u8981\u53bb\u4e16\u7684spfa\uff0c\u800c\u4e14\u6ce8\u610f\uff0c\u5f53\u524d\u7684\u72b6\u6001\u5305\u62ec\u4e86\u6b65\u6570\uff0c\u6700\u77ed\u8def\u548c\u8282\u70b9\u7684\u7f16\u53f7\uff0c\u8fd9\u4e9b\u662f\u8981\u4f5c\u4e3a\u4e00\u4e2a\u72b6\u6001\u5b58\u5165\u961f\u5217\u4e2d\u7684\uff0c\u800c\u4e0d\u80fd\u5206\u5f00\u3002\u4e3e\u4e2a\u4f8b\u5b50\uff0c\u6709\u4e00\u4e2a\u8282\u70b9x\uff0c\u6b65\u6570\u4e3a2\uff0c\u6700\u77ed\u8def\u4e3a2\uff0c\u53e6\u4e00\u4e2a\u8282\u70b9x\uff0c\u6b65\u6570\u4e3a1\uff0c\u6700\u77ed\u8def\u4e3a2\uff0c\u8fd9\u4e24\u4e2a\u8282\u70b9\u5e76\u4e0d\u80fd\u7b97\u540c\u4e00\u4e2a\u8282\u70b9\u3002\u800c\u4e14\u8fd9\u9898\u8fd8\u4e0d\u597d\u6309\u7167\u666e\u901a\u7684spfa\u6765\u8bb0\u5f55\u5f53\u524d\u8282\u70b9\u6709\u6ca1\u6709\u5728\u961f\u5217\u4e2d\uff0c\u56e0\u4e3a\u4f1amle\uff08\u60f3\u4e00\u4e0b\u6570\u7ec4\u8981\u5f00\u591a\u5927\uff09\u3002\u6240\u4ee5\u6211\u6253\u4e86\u4e00\u4e2a\u6ca1\u6709\u8bb0\u5f55\u662f\u5426\u5728\u961f\u5217\u4e2d\u7684spfa\uff0c\u7136\u540e\u4e00\u76f4\u88ab\u6700\u540e\u4e24\u7ec4\u6570\u636e\u5361\u4e86\u3002\u6240\u4ee5\u8fd9\u9898\u8fd8\u6709\u4e00\u4e2a\u5173\u952e\u70b9\u3002\n\n## \u8dd1\u53cd\u56fe\n\u8fd9\u662f\u6211\u770b[\u8fd9\u4e2a\u5927\u4f6c\u7684\u9898\u89e3](https://jrzy.blog.luogu.org/solution-p2832)\u7136\u540e\u660e\u767d\u7684\u3002\u56e0\u4e3a\u8fd9\u9898\u8981\u8f93\u51fa\u8def\u5f84\uff0c\u800c\u4e14\u5f53\u524d\u7684\u6700\u77ed\u4e0d\u80fd\u4f5c\u4e3a\u5168\u5c40\u7684\u6700\u77ed\u8def\uff0c\u800c\u4e14\u5982\u679c\u53ea\u662f\u666e\u901a\u7684\u8bb0\u5f55\u7684pre\uff0c\u540e\u9762\u7684\u8f93\u51fa\u4f1a\u53d8\u5f97\u5f88\u5947\u602a\uff08\u81ea\u5df1\u770bhack\u6570\u636e\u7684\u7b2c\u4e00\u7ec4\uff09\u3002\n\n## \u4f46\u662f\u8dd1\u53cd\u56fe\u4e5f\u662f\u9519\u8bef\u7684\uff0c\u56e0\u4e3a\u4f1a\u88ab\u8986\u76d6\n\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u8fd9\u4e00\u7ec4\uff1a\n```cpp\n6 6\n1 2 2\n2 3 2\n3 4 5\n4 5 3\n5 6 2\n3 5 11\n```\n## \u6240\u4ee5\u8fd9\u9898\u53ea\u80fd\u7528\u6570\u7ec4\u6a21\u62df\u961f\u5217\uff0c\u56e0\u4e3a\u8fd9\u6837\u624d\u80fd\u5b58\u50a8\u4e00\u4e2a\u8282\u70b9\u7684\u524d\u4e00\u4e2a\u8282\u70b9\u662f\u4ec0\u4e48(\u8981\u4e0d\u7136\u4f1a\u88ab\u8986\u76d6)\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\nusing namespace std;\nconst int N=10010,M=400010;\nint n,m,head[M],ver[M],Next[M],tot,headd=1,end=0,key;\nlong long d[M],num[N],edge[M];\nstruct rec{\n\tint step,dis,num,tail;\n}q[M];\nvoid add(int x,int y,long long z)\n{\n\tver[++tot]=y,edge[tot]=z;\n\tNext[tot]=head[x],head[x]=tot;\n}\nvoid bfs()\n{\n\tmemset(d,0x3f,sizeof(d));\n\td[1]=0;\n\trec now;\n\tnow.num=1,now.step=0,now.dis=0,now.tail=-1;\n\tq[++end]=now;\n\twhile(headd<=end)\n\t{\n\t\tnow=q[headd];\n\t\tint x=now.num,st=headd;\n\t\theadd++;\t\t\n\t\tfor(int i=head[x];i;i=Next[i])\n\t\t{\n\t\t\tint y=ver[i],z=edge[i];\n\t\t\tif(d[y]>now.dis+z+now.step)\n\t\t\t{\n\t\t\t\td[y]=now.dis+z+now.step;\n\t\t\t\trec Nex;\n\t\t\t\tNex.num=y;\n\t\t\t\tNex.dis=d[y];\n\t\t\t\tNex.step=now.step+1;\n\t\t\t\tNex.tail=st;\n\t\t\t\tq[++end]=Nex;\n\t\t\t\tif(y==n)\n\t\t\t\t\tkey=end;\n\t\t\t}\n\t\t}\n\t}\n}\nvoid print(int x)\n{\n\tif(q[x].tail!=-1)\n\t\tprint(q[x].tail);\n\tcout<<q[x].num<<\" \";\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y;\n\t\tlong long z;\n\t\tcin>>x>>y>>z;\n\t\tadd(x,y,z);\n\t}\n\tbfs();\n\tcout<<d[n]<<endl;\n\tprint(key);\n\treturn 0;\n}\n```\n\n\n\u849f\u84bb\u75af\u72c2\u501f\u9274\u603b\u7ed3\uff0c\u5e94\u8be5\u662f\u6b63\u89e3\uff08\u5982\u679c\u662f\u7684\u8bdd\u5e0c\u671b\u80fd\u9876\u4e0a\u53bb\uff0c\u56e0\u4e3a\u9898\u89e3\u5f88\u591a\u90fd\u6709\u4e9b\u95ee\u9898\uff0c\u8c22\u8c22\u652f\u6301\uff09\u3002\n",
        "postTime": 1568862902,
        "uid": 67886,
        "name": "\u5730\u8868\u6700\u5f3a\u7537\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "## \u96be\u70b9\n\u8fd9\u9053\u9898\u5176\u5b9e\u5e76\u4e0d\u96be\uff0c\u5728\u6570\u636e\u66f4\u65b0\u4ee5\u540e\uff0c\u5c31\u53ea\u6709\u4e862\u4e2a\u96be\u70b9\uff1a\n\n1.\u8def\u5f84\u7684\u8f93\u51fa\u3002\n2.\u5fc5\u987b\u8981\u5b58\u53cd\u5411\u8fb9\uff0c\u5e76\u4e14\u8981\u4ecen\u54111\u8dd1\u3002\uff08\u8fd9\u4e2abug\u6211\u4e5f\u771f\u7684\u4e0d\u77e5\u9053\uff09\n\n## \u524d\u7f6e\u77e5\u8bc6\n\u60f3A\u8fd9\u9053\u9898\uff0c\u5c31\u5fc5\u987b\u6709\u4e00\u4e9b\u524d\u7f6e\u77e5\u8bc6\uff1adijkstra\u6216spfa\uff0c\u5e76\u4e14\u4f60\u8981\u5b66\u4f1a\u94fe\u5f0f\u524d\u5411\u661f\u3002\n\n## \u5b58\u56fe\u65b9\u6cd5\n\n### \u90bb\u63a5\u77e9\u9635\uff1a\n\n\u5176\u5b9e\u5c31\u50cf\u4ed6\u7684\u5b57\u9762\u4e49\u4e00\u6837\uff0c\u5c31\u662f\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u7684\u77e9\u9635\uff0c\u7528\u6765\u5b58\u50a8\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u6240\u5c5e\u5173\u7cfb\uff0c\u5982\u679c\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6709\u8054\u7cfb\uff0c\u90a3\u4e48\u4fbf\u5728\u5b83\u4eec\u7684\u4e8c\u7ef4\u77e9\u9635\u7684\u4ea4\u70b9\u5904\u9644\u4e0a1\u3002\u6240\u4ee5\u8bf4\u8fd8\u662f\u6bd4\u8f83\u597d\u7406\u89e3\u4e86\u7684\n\n\u4f46\u662f\u5462\uff0c\u5047\u5982\u6709\u4e94\u4e2a\u70b9\uff0c\u90a3\u4e48\u5c31\u5f00\u4e00\u4e2a5*5\u7684\u4e8c\u7ef4\u77e9\u9635\uff0c\u6d6a\u8d39\u7684\u7a7a\u95f4\u5f88\u591a\uff0c\u6240\u4ee5\u6211\u4eec\u53c8\u6709\u4e86\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff1a\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\u3002\n\n### \u94fe\u5f0f\u524d\u5411\u661f\uff1a\n\n\u82e5\u6709\u4e94\u4e2a\u70b9\uff0c\u5047\u8bbe\u628a\u4ed6\u4eec\u60f3\u505a\u662f\u4e00\u4e2a\u4e2a\u7684\u5c0f\u623f\u95f4\uff0c\u6bcf\u4e2a\u623f\u95f4\u4e2d\u85cf\u6709\u5176\u4ed6\u623f\u95f4\u7684\u94a5\u5319\uff0c\u6bcf\u4e2a\u623f\u95f4\u53ef\u4ee5\u901a\u5f80\u5176\u4ed6\u4eba\u7684\u623f\u95f4\u3002\u73b0\u5728\u6211\u6765\u8bb2\u4e00\u8bb2\u4ed6\u7684\u5177\u4f53\u6b65\u9aa4\u5427\uff1a\n\n\u6709\u4e00\u4e2a\u4e1c\u897f\u53eb\u505ast\u7684\u91cc\u9762\u5b58\u50a8\u7684\u662f\u7b2ci\u6761\u8def\u7684\u6700\u540e\u4e00\u6761\u8def\u7684\u7f16\u53f7\u3002\n\n\u6240\u4ee5\u5462\uff0c\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5177\u4f53\u4ee3\u7801\u5982\u4e0b\uff1a\n\n  ```cpp\n  struct Edge\n  {\n          int nxt,to,val;\n  }e[6001];//\u8fd9\u4e00\u6b65\u662f\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u3002\n  void add(int a,int b,int value)\n  {\n          e[++tot].to = b;//\u62d3\u5c55\u4e00\u4e2a\u65b0\u7684\u8fb9\n          e[tot].val = value;//\u8fd9\u662f\u8fd9\u6761\u8fb9\u7684\u6743\u503c\n          e[tot].last = st[a];\n          st[a] = tot;\n  }\n  //\u8fd9\u662f\u6bcf\u4e00\u6b65\u90fd\u8981\u505a\u7684\u4e8b\u54e6\uff01\n  ```\n\n  ```cpp\n\n  \u987a\u4fbf\u9644\u4e0a\u904d\u5386\u7684\u4ee3\u7801\uff1a\n  for(int st[i];i != -1;i = e[i].last)\n  {\n  }//\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u904d\u5386\u5168\u90e8\u7684\u70b9\u4e86\uff01\uff01\uff01\uff1a\uff09\n  ```\n\n\u63a5\u7740\uff0c\u6700\u77ed\u8def\u7684\u65b9\u6cd5\u5e94\u8be5\u4e0d\u7528\u6211\u4ecb\u7ecd\u4e86\u5427\uff08\u5927\u5bb6\u4f1a\u770b\u8fd9\u9898\uff0c\u5e94\u8be5\u5c31\u4f1a\u6700\u77ed\u8def\u4e86\uff09\n\n\n\n\n### \u8f93\u51fa\n\u5f53\u65f6\u6211\u662f\u6709\u70b9\u61f5\u7684\uff0c\u600e\u4e48\u8f93\u51fa\u8def\u5f84???\n\n\u60f3\u4e86\u5f88\u4e45\uff0c\u6211\u60f3\u51fa\u6765\u4e00\u4e2a\u529e\u6cd5\u2014\u2014\u2014\u2014\u9012\u5f52\u8f93\u51fa\n\n\u7528\u4e00\u4e2a$pre$\u6570\u7ec4\u6765\u50a8\u5b58\u8282\u70b9\u7684\u4e0a\u4e00\u4e2a\u8282\u70b9\u3002\u6709\u7ec8\u70b9\u5f00\u59cb\u67e5\u627e\u524d\u9a71\u5c31\u53ef\u4ee5\u4e86\uff0c\u6240\u4ee5\uff0c\u8fd9\u9053\u9898\uff0c\u6211\u4eec\u5e94\u8be5\u5c31\u53ef\u4ee5\u5f88\u7b80\u5355\u7684A\u6389\u4e86\u554a\n\n### \u4ee3\u7801\n\n\n    #include<cstdio>\n    #include<iostream>\n    #include<queue>\n    #include<cstring>\n    using namespace std;\n    const int inf=2147483647;\n    int tot,st[200000],n,m,s,t,dis[290000],vis[299909],pre[200000],num[200000];\n    struct Edge\n    {\n            int val,to,next;\n    }edge[200000];\n    void add(int a,int b,int c)\n    {\n        edge[++tot].to=b;\n        edge[tot].next=st[a];\n        edge[tot].val=c;\n        st[a]=tot;\n    }\n    void dg(int x)\n    {\n        while (x!=n)\n        {\n            printf(\"%d \",x);\n            x=pre[x];\n        }\n        printf(\"%d\",n);\n    }\n    void spfa(int s)\n    {\n        queue<int> q;\n        for (int i = 1; i <= n; ++i)\n        {\n            dis[i]=inf;\n            num[i]=inf;\n            vis[i]=0;\n        }\n        dis[s]=0;\n        num[s]=0;\n        vis[s]=1;\n        q.push(s);\n        while (!q.empty())\n        {\n            int u=q.front();\n            q.pop();vis[u]=0;\n            for (int i=st[u];i!=0;i=edge[i].next)\n            {\n                int v=edge[i].to;\n                if (dis[v]>=dis[u]+edge[i].val+num[u])\n                {\n                    if (dis[v]>dis[u]+edge[i].val+num[u])\n                    {\n                        dis[v]=dis[u]+edge[i].val+num[u];\n                        pre[v]=u;\n                        num[v]=num[u]+1;\n                        if (vis[v]==0)\n                        {\n                            vis[v]=1;\n                            q.push(v);\n                        }\n                    } \n                    if (dis[v]==dis[u]+edge[i].val+num[u])\n                    {\n                        if (num[v]>num[u])\n                        {\n                            num[v]=num[u]+1;\n                            pre[v]=u;\n                            if (vis[v]==0)\n                            {\n                                 vis[v]=1;\n                                q.push(v);\n                            }\n                        }  \n                    }\n\n                }\n            }\n        }\n    }\n    int main()\n    {\n        cin>>n>>m;\n        for (int i=1;i<=m;i++)\n        {\n            int a,b,c;\n            cin>>a>>b>>c;\n            add(b,a,c);\n        }\n        spfa(n);\n        cout<<dis[1]<<endl;\n        dg(1);\n        return 0;\n    }\n",
        "postTime": 1551936006,
        "uid": 41988,
        "name": "RNG_XDD\u5c0f\u53ee\u5f53",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "~~\u770b\u8d77\u6765\u5e76\u4e0d\u96be~~\n\n\u5728\u6c42\u6700\u77ed\u8def\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u5f53\u524d\u65f6\u95f4\uff0c\u5373\u4e0b\u4e00\u6761\u8def\u8981\u591a\u7684\u989d\u5916\u65f6\u95f4\u5c31\u53ef\u4ee5\u4e86\u3002\n\u8bbed[x]\u4e3a\u4ece\u8d77\u70b9\u5230x\u7684\u6700\u77ed\u8def\uff0c\u6bcf\u6b21\u66f4\u65b0\u7684\u65f6\u5019\u82e5d[y]>d[x]+\u8def\u7a0b+\u989d\u5916\u52a0\u7684\u65f6\u95f4\uff0c\u5c31\u66f4\u65b0d[y],\u5c06t[y]=t[x]+1;\n\n\u552f\u4e00\u8981\u60f3\u4e00\u4e0b\u7684\u5c31\u662f\u8981\u6b63\u53cd\u5efa\u56fe\u90fd\u8dd1\u4e00\u904d\u6c42\u6700\u5c0f\u503c\u3002\n\n\u8bb0\u5f55\u8def\u5f84\u7684\u65f6\u5019\u5c31\u8bb0\u5f55\u524d\u7f00\u5c31\u884c\uff0c\u5373\u4ece\u54ea\u4e2a\u70b9\u66f4\u65b0\u8fc7\u6765\uff0c\u6bcf\u6b21\u66f4\u65b0d[y]\u7684\u65f6\u5019\u8bb0\u5f55pre[y]=x;\n\n\u5982\u679c\u662f\u6b63\u56fe\u503c\u6bd4\u8f83\u5c0f\uff0c\u8bb0\u5f55\u8def\u5f84\u4ecen\u4e00\u8def\u627e\u52301\uff0c\u518d\u5012\u7740\u8f93\u51fa\u3002\n\u5982\u679c\u662f\u53cd\u56fe\u503c\u6bd4\u8f83\u5c0f\uff0c\u8bb0\u5f55\u8def\u5f84\u4ece1\u5230n\uff0c\u6b63\u7740\u8f93\u51fa\u3002\n\n\u8ba8\u8bba\u4e2d\u7684hack\u6570\u636e\u6ca1\u6709hack\u5230\u6211\u54ce\u3010\u6258\u816e\u3011\uff0c\u5982\u679c\u6709hack\u6570\u636e\u8bf7\u79c1\u4fe1\u8054\u7cfb\u6211~~\n\n\u6709\u4e0d\u660e\u767d\u7684\u5730\u65b9\u4e5f\u6b22\u8fce\u79c1\u4fe1~~~\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<string>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nint n,m,res;\nint d[10005],t[10005],pre[10005],ans[10005]; \nint cnt,to[200005],val[200005],nxt[200005],head[10005]; \nstruct edge{\n\tint u,v,w;\n}a[200005];\nvoid add(int u,int v,int w)\n{\n\tcnt++;\n\tto[cnt]=v;\n\tval[cnt]=w;\n\tnxt[cnt]=head[u];\n\thead[u]=cnt;\n} \nvoid dijkstra(int v0)\n{\n\tpriority_queue<pair<int,int> >q;\n\tmemset(d,0x3f,sizeof(d));\n\tmemset(t,0,sizeof(t));\n\td[v0]=0,t[v0]=0;\n\tq.push(make_pair(0,v0));\n\twhile(!q.empty())\n\t{\n\t\tint x=q.top().second;q.pop(); \n\t\tfor(int i=head[x];i;i=nxt[i])\n\t\t{\n\t\t\tint y=to[i],z=val[i],e=t[x];\n\t\t\tif(d[y]>d[x]+z+e)\n\t\t\t{\n\t\t\t\tpre[y]=x;\n\t\t\t\td[y]=d[x]+z+e;\n\t\t\t\tt[y]=e+1;\n\t\t\t\tq.push(make_pair(-d[y],y));\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v,w;\n\t\tcin>>u>>v>>w;\n\t\ta[i].u=u,a[i].v=v,a[i].w=w;\n\t\tadd(u,v,w);\n\t}\n\tdijkstra(1);\n\tres=d[n];\n\tint x=n,u=0;\n\twhile(x!=1)\n\t{\n\t\tans[++u]=x;\n\t\tx=pre[x];\n\t}\n\tans[++u]=1; \n\tcnt=0;\n\tmemset(to,0,sizeof(to));\n\tmemset(val,0,sizeof(val));\n\tmemset(nxt,0,sizeof(nxt));\n\tmemset(head,0,sizeof(head)); \n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tadd(a[i].v,a[i].u,a[i].w);\n\t}\n\tdijkstra(n);\n\tif(d[1]<res)\n\t{\n\t\tint x=1,u=0;\n\t\twhile(x!=n)\n\t\t{\n\t\t\tans[++u]=x;\n\t\t\tx=pre[x];\n\t\t}\n\t\tans[++u]=n;\n\t\tcout<<d[1]<<endl;\n\t\tfor(int i=1;i<=u;i++)cout<<ans[i]<<\" \";\n\t\treturn 0;\n\t}\n\tcout<<res<<endl;\n\tfor(int i=u;i>=1;i--)cout<<ans[i]<<\" \";\n\treturn 0;\n}\n```",
        "postTime": 1541402715,
        "uid": 27059,
        "name": "\u5317\u65b9\u6709\u5c0f\u4ed9\u513f",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "---\n\n\u9898\u5916\u8bdd\uff1a\n\u4eca\u5929\u65e9\u4e0a\u672c\u849f\u84bb\u521a\u5199\u4e86\u4e00\u7bc7\u7eff\u9898\u9898\u89e3\uff0c\u665a\u4e0a\u7684\u84dd\u9898\u9898\u89e3\u6c42\u8fc7QWQ\n\n---\n\n\u6b63\u6587\uff1a\n\n\u8fd9\u4e00\u9898\u867d\u7136\u6709\u4e86\u597d\u591a\u9898\u89e3\uff0c\u4f46\u662f\u65b0\u7684\u6570\u636e\u8c8c\u4f3c\u628a\u697c\u4e0b\u597d\u591a\u9898\u89e3\u90fdhack\u6389\u4e86\u3002\n\n\u8fd9\u4e00\u9898\u6211\u7684\u601d\u8def\u548c\u697c\u4e0b\u5dee\u4e0d\u591a\uff0c\u5c31\u662f\u52a0\u4e00\u4e2a$l$\u6570\u7ec4\u8868\u793a\u8d70\u5230\u7b2c$i$\u4e2a\u70b9\u7684\u75b2\u52b3\u503c\uff0c\u7136\u540e\u7b97\u6700\u77ed\u8def\u7684\u65f6\u5019\u52a0\u4e0a\u5c31\u53ef\u4ee5\u4e86\u3002\n\n# \u4f46\u662f\u8fd9\u91cc\u8981\u5b58\u53cd\u5411\u8fb9\uff01\u628a\u6b63\u7684\u8fb9\u53cd\u8fc7\u6765\u5b58\uff01\n\n\u53cd\u8fc7\u6765\u5b58\u5b8c\u539f\u6765\u7684\u5c31~~\u6254\u6389~~\u4e0d\u5b58\u4e86\uff0c\u8dd1spfa\u7684\u65f6\u5019\u4ecen\u8dd1\u52301\u3002\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8981\u5b58\u53cd\u5411\u8fb9\u5462\uff1f\u56e0\u4e3a\u8fd9\u4e00\u9898\u8981\u8f93\u51fa\u8def\u5f84\uff0c\u6211\u4eec\u7528$p$\u6570\u7ec4\u4ee3\u8868\u8d70\u5230\u70b9$i$\u7684\u65f6\u5019\u7684\u4e0a\u4e00\u4e2a\u70b9\u662f\u54ea\u4e2a\u3002\u4f46\u662f\u8fd9\u4e2a$p$\u6570\u7ec4\u4e0d\u80fd\u548c\u6c42\u6700\u77ed\u8def\u540c\u6b65\u66f4\u65b0\u3002\u56e0\u4e3a\u8fd9\u4e00\u9898\u52a0\u5165\u4e86\u75b2\u52b3\uff0c\u53ef\u80fd\u8d70\u5230$i$\u70b9\u65f6\u7684\u8def\u5f84\u662f\u6700\u77ed\u7684\uff0c\u4f46\u662f\u75b2\u52b3\u503c\u4e0d\u4e00\u5b9a\u662f\u6700\u5c11\u7684\u3002\u63a5\u7740\u8d70\u7684\u65f6\u5019\u75b2\u52b3\u503c\u4f1a\u53d8\u5f97\u66f4\u5927\uff0c\u6240\u4ee5\u540e\u9762\u7684\u70b9\u4e0d\u4e00\u5b9a\u662f\u6700\u77ed\u8def\u3002\u4f46\u662f$p$\u6570\u7ec4\u5df2\u7ecf\u66f4\u65b0\u8fc7\u4e86\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684$p$\u6570\u7ec4\u5b9e\u9645\u4e0a\u662f\u8868\u793a\u4ece1\u8d70\u5230$i$\u70b9\u7684\u6700\u77ed\u8def\u5f84\u7684\u4e0a\u4e00\u4e2a\u70b9\u662f\u4ece\u54ea\u91cc\u8d70\u8fc7\u6765\u7684\uff0c\u6240\u4ee5\u53ea\u6709\u6211\u4eec\u66f4\u65b0\u5230\u7ec8\u70b9\u65f6\uff0c\u624d\u628a$p$\u6570\u7ec4\u5b58\u50a8\u8d77\u6765\uff0c\u7528\u53e6\u5916\u4e00\u4e2a$px$ ~~\u5288\u53c9~~\u6570\u7ec4\u8868\u793a\u3002\u4f46\u662f\u6709\u65f6\u5019\u540c\u6b65\u7684\u66f4\u65b0\u662f\u5bf9\u7684\uff0c\u800c\u53c8\u8fd8\u6ca1\u8d70\u5230\u7ec8\u70b9\uff0c\u6240\u4ee5\u8fd9\u65f6\u5019$p$\u6570\u7ec4\u624d\u662f\u6b63\u786e\u7684\uff0c\u800c$px$\u6570\u7ec4\u53c8\u6ca1\u6709\u540c\u6b65\u66f4\u65b0\uff0c\u90a3\u8fd9\u65f6\u5019\u8981\u600e\u4e48\u529e\u5462\uff1f\n\n# \u5b58\u53cd\u5411\u8fb9\uff01\n\n\u8fd9\u65f6\u5019\u7684$p$\u8868\u793a\u7684\u5176\u5b9e\u662f\u4ece$n$\u53f7\u70b9\u8d70\u5230$i$\u53f7\u70b9\u7684\u6700\u77ed\u8def\u7684\u4e0a\u4e00\u4e2a\u70b9\u7684\u7f16\u53f7\u662f\u591a\u5c11\uff0c\u4e5f\u5c31\u662f\u4ece$i$\u53f7\u70b9\u8d70\u5230$n$\u53f7\u70b9\u7684\u6700\u77ed\u8def\u7684\u4e0b\u4e00\u4e2a\u70b9\u662f\u591a\u5c11\u3002\u90a3\u4e48\u8fd9\u65f6\u5019\u4ece$n$\u5f80\u56de\u8dd1\u5c31\u4e0d\u4f1a\u51fa\u73b0\u201c\u6700\u77ed\u8def\u662f\u5bf9\u7684\uff0c\u4f46$p$\u6570\u7ec4\u4e0d\u5bf9\u201d\u7684\u60c5\u51b5\u4e86\u3002\n\n\u8d34\u4e0a\u4ee3\u7801\uff1a\n\n---\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<queue>\nusing namespace std;\nconst int MAXN=100010;\nconst int MAXM=200010;\nconst int inf=999999999;\nint dis[MAXN],u[MAXM],v[MAXM],w[MAXM];\nint fst[MAXM],nxt[MAXM];\nint l[MAXN],p[MAXM];\nint px[MAXM];\nbool b[MAXN];\nint f[MAXN];//\u8dd1spfa\u8981\u7528\u7684\u4e00\u5806\u6570\u7ec4\nint n,m;\nvoid print(int x){//\u8f93\u51fa\u90e8\u5206\n\twhile(x!=-1){//\u56e0\u4e3a\u8fd9\u91cc\u7684px[x]\u8868\u793a\u7684\u662f\u6700\u77ed\u8def\u91cc\u7684x\u7684\u4e0b\u4e00\u4e2a\u70b9\uff0c\u6700\u540e\u4e00\u4e2a\u70b9\u7684\u4e0b\u4e00\u4e2a\u70b9\u6211\u4eec\u8bbe\u4e3a-1\uff0c\n    \t\t\t //\u6240\u4ee5\u5faa\u73af\u4e00\u904d\u5c31\u597d\u4e86\n\t\tprintf(\"%d \",x);\n\t\tx=px[x];\n\t}\n}\nvoid init(){//\u521d\u59cb\u5316\n    for(int i=1;i<=n;i++){\n    \tdis[i]=inf;\n\t}\n    dis[n]=0;//\u8bb0\u4f4f\u8981\u4ecen\u5f00\u59cb\u8dd1\n    for(int i=1;i<=m;i++){\n        fst[i]=-1;\n    }\n}\nvoid spfa(){\n    queue<int> q;\n    q.push(n);\n    l[n]=0;\n    for(int i=1;i<=n;i++)//\u6240\u6709\u90fd\u521d\u59cb\u5316\u4e3a-1\uff0c\u8868\u793a\u8fd8\u6ca1\u6709\u5f00\u59cb\u8dd1\n    \tp[i]=-1;\n    while(!q.empty()){\n        int x=q.front();\n        q.pop();\n        b[x]=0;\n        for(int k=fst[x];k!=-1;k=nxt[k]){\n\t\t\tif(dis[v[k]]>dis[x]+l[x]+w[k]){\n       \t        dis[v[k]]=dis[x]+l[x]+w[k];\n                l[v[k]]=l[x]+1;\n                p[v[k]]=x;\n                if(v[k]==1){//\u8fd9\u91cc\u53ea\u6709\u8dd1\u5230\u5934\u4e86\u624d\u66f4\u65b0px\u6570\u7ec4\n                \tfor(int i=1;i<=n;i++){\n                \t\tpx[i]=p[i];\n\t\t\t\t\t}\n\t\t\t\t}\n                if(b[v[k]]==0){\n                    b[v[k]]=1;\n                    q.push(v[k]);\n                }\n            }\n            else if(dis[v[k]]==dis[x]+w[k]){//\u8fd9\u91cc\u662f\u4e00\u4e2a\u4f18\u5316\uff0c\u5982\u679c\u8d70\u5230\u540c\u4e00\u4e2a\u70b9\uff0c\u8def\u7a0b\u76f8\u540c\u5e76\u4e14\u75b2\u52b3\u5ea6\u6bd4\u4e4b\u524d\u5c0f\u7684\u8bdd\n            \t\t\t\t\t\t\t\t//\u90a3\u4e4b\u540e\u8d70\u7684\u8def\u7a0b\u80af\u5b9a\u6bd4\u4e4b\u524d\u5c11\n                if(l[x]+1<l[v[k]]){//\u66f4\u65b0\u75b2\u52b3\u5ea6\n                \tl[v[k]]=l[x]+1;\n                \tp[v[k]]=x;//p\u6570\u7ec4\u4e5f\u8981\u66f4\u65b0\n\t\t\t\t}\n            }\n\t\t}\n    }\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    init();\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d%d\",&v[i],&u[i],&w[i]);//\u6ce8\u610f\u8fd9\u91cc\u662f\u5148\u8bfb\u5165v[i]\uff0c\u518d\u8bfb\u5165u[i]\uff0c\u4e4b\u524d\u6b63\u597d\u53cd\u8fc7\u6765\n        nxt[i]=fst[u[i]];\n        fst[u[i]]=i;\n    }\n    spfa();\n    printf(\"%d\\n\",dis[1]);//dis[1]\u5c31\u662f\u4ece\u7b2cn\u4e2a\u70b9\u8d70\u5230\u7b2c\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u8def\u5f84\uff0c\u53cd\u8fc7\u6765\u4e5f\u662f\u4e00\u6837\u7684\n    print(1);//\u8f93\u51fa\n    return 0; //\u7ed3\u675f\n}\n```\n\n---\n\n\u5ba3\u4f20\u4e00\u6ce2[blog](https://jiying.blog.luogu.org/)",
        "postTime": 1537787632,
        "uid": 56565,
        "name": "Stella_Yan",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "\u8fd9\u9898\u771f\u7684\u4e0d\u96be\u554a...\u4e5f\u5c31\u662f\u770b\u7740\u5413\u4eba\n\n\u7136\u800c\u6211\u7b2c\u4e00\u773c\u8fd8\u662f\u88ab\u5413\u4f4f\u4e86\uff08\u9003\n\n~~\u6211\u53ef\u80fd\u8fd8\u662f\u592a\u83dc\u4e86...~~\n\n\u54b3\u3002\n\u5176\u5b9e\u53ea\u8981\u8dd1SPFA\u65f6\u8bb0\u5f55\u5230\u73b0\u5728\u5df2\u7ecf\u8d70\u4e86\u591a\u5c11\u6b65\uff0c\n\n\u5728\u6a21\u677f\u7684\u57fa\u7840\u4e0a\u52a0\u4e00\u9879num[y]\u5373\u53ef\n\n\u6bcf\u6b21\u8d70\u4e00\u6b65\u7ef4\u62a4\u4e00\u4e0bnum\u6570\u7ec4\n\n\u8fd8\u4e0d\u662f\u4e2a\u6a21\u677f\u9898\u561b\u3002\n\n\u4e8e\u662f\u5f88\u5f00\u5fc3\u7684\u62ff\u6765\u6a21\u677f\u6539\u4e00\u6539\u5c31A\u5566\n\n\u5448\u4e0a\u81ea\u4ee5\u4e3a\u98ce\u683c\u5f88\u68d2\u7684\u4ee3\u7801\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#include<queue>\n#include<stack>\nusing namespace std;\n#define rg register\nlong long head[220000],n=1,m,k,inde,flag,Case,rs,root;\nlong long fl=0,fg,cnt,scnt,t,q,p,e,s,ans,f,r,cld;\nlong long dis[120000],num[120000],chu[120000],pre[120000];\nbool vis[120000];\nstruct Edge{\n    int next,to,w;\n}a[220000];\nvoid add(int x,int y,int w){\n    inde++;\n    a[inde].to=y;\n    a[inde].next=head[x];\n    a[inde].w=w;\n    head[x]=inde;\n}\nqueue<int> Q;\nvoid Spfa(){\n    Q.push(1);\n    dis[1]=0;\n    pre[1]=1;\n    while(!Q.empty()){\n        int x=Q.front();\n        Q.pop();\n        vis[x]=0;\n        for(int i=head[x];i;i=a[i].next){\n            int y=a[i].to;\n            if(dis[y]>dis[x]+a[i].w+num[x]){\n                dis[y]=dis[x]+a[i].w+num[x];\n                num[y]=num[x]+1;\n                pre[y]=x;\n                if(!vis[y])    Q.push(y);\n                vis[y]=1;\n            }\n        }\n    }\n}\nint main(){\n    cin>>n>>m;\n    for(int i=1;i<=m;i++){\n        cin>>q>>e>>r;\n        add(q,e,r);\n    }\n    memset(dis,0x3f,sizeof(dis));\n    Spfa();\n    cout<<dis[n];\n    int v=n;\n    do{\n        chu[++fl]=v;\n        v=pre[v];\n    }while(pre[v]!=v);\n    cout<<endl<<\"1\"<<\" \";\n    for(int i=fl;i>=1;i--){\n        cout<<chu[i]<<\" \";\n    }\n}\n\n```",
        "postTime": 1515856411,
        "uid": 49699,
        "name": "xfydemx",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "\u8fd9\u9898\u7684\u5176\u4ed6\u9898\u89e3\u600e\u4e48\u4e00\u76f4\u63d0 HACK \u554a\uff0c\u90a3\u6211\u63d0\u4f9b\u4e00\u79cd\u8f83\u4fdd\u9669\u7684\u65b9\u6cd5\u3002\n\n\n------------\n\n\u7531\u4e8e\u9664\u4e86\u5df2\u82b1\u8d39\u65f6\u95f4\u4e4b\u5916\uff0c\u8fd8\u8981\u8bb0\u5f55\u53e6\u4e00\u4e2a\u72b6\u6001\uff0c\u5c31\u662f\u5df2\u7ecf\u8fc7\u8def\u7684\u6761\u6570\uff0c\n\n\u4e0d\u59a8\u5728\u7528\u6700\u77ed\u8def\u65f6\u5c06\u8fd9\u4e24\u4e2a\u90fd\u66b4\u529b\u679a\u4e3e \u70b9\u6570\u4e3a $n^2$ \uff0c\n\n\u4f46\u80af\u5b9a\u4f1a\u8d85\u65f6\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n$$$$\n\n* \u9996\u5148\uff0c\u5f53\u4e00\u4e2a\u70b9\u4e4b\u524d\u7ecf\u8fc7\u65f6\u7684 $time$ \u548c $number$ \u90fd\u6bd4 \u73b0\u5728\u7684\u5c0f\uff0c\u90a3\u4e48\u8fd9\u6b21\u9009\u53d6\u5c31\u4e0d\u5fc5\u4e86\uff08\u88ab\u5355\u8c03\u4e86pwp\uff09\u3002\n\n\n* \u5176\u6b21\uff0c\u4e0a\u9762\u4f1a\u5bfc\u81f4\u8bb8\u591a\u72b6\u6001\u90fd\u7528\u4e0d\u4e0a\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528 $map$ \u4f18\u5316\u5185\u5b58\u907f\u514d MLE\u3002\n\n\n\u5bf9\u4e8e\u5355\u8c03\u4f18\u5316\u5f00 $map$ \u65f6\u8981\u6ce8\u610f\u4e0d\u80fd $map$ \u5957 $map$ \uff0c\u800c\u662f $map$ \u52a0\u6570\u7ec4\u3002\n\n\u6bd4\u5982\u539f\u5148\u8fd9\u6837\u5199 `map<int,map<int,int>>mp` \u4f1a T \u4e00\u4e2a\u70b9\uff0c ~~(\u60f3\u51fa\u6765\u8fd9\u6837\u5199\u7684\u6211\u597dsb)~~\n\n\u6539\u6210 `map<int,int>a[10010]` \u5c31\u8f7b\u677e\u8fc7\u4e86\uff0c\n\n\u5bf9\u4e8e\u6253\u5370\u8def\u5f84\uff0c\u8bb0\u5f55\u6bcf\u4e2a\u72b6\u6001\u7684\u4e0a\u4e00\u4e2a\u5c31\u884c\u4e86\uff08\u4e5f\u5c31\u662f\u5f00\u4e86\u4e24\u4e2a $map$ \uff09\u3002\n\n$code:$\n\n\n\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nmap<int,int>bs[10010];\nmap<int,int>as[10010];\nint pd[10010][2];\nstruct Node{\n\tint time,number,point;\n}node[10000000];\nint dtop=0;\nint n,m,a,b,c;\nint ans,now;\nint fir[10010],nxt[200010],to[200010],qp[200010],top=0;\nvoid ad(int x,int y,int z){//\u52a0\u8fb9 \n\ttop++;nxt[top]=fir[x];fir[x]=top;to[top]=y;qp[top]=z;\n}\nbool cmp(Node a,Node b){//\u5806\u6392\u5e8f \n\treturn (a.time^b.time)? a.time<b.time:a.number<b.number;\n}\nvoid add(int x,int y,int z,int fa){//\u624b\u6253\u5806\u52a0\u5165 \n\t\n\tif(bs[x][y]<=z&&bs[x][y])return ;//\u526a\u679d \n\tif(y>pd[x][0]&&z>pd[x][1]){return ;}  \n\tif(y<pd[x][0]){\n\t\tpd[x][0]=y,pd[x][1]=z;\n\t}\n\tbs[x][y]=z;\n\tdtop++;\n\tnode[dtop].time=z;\n\tnode[dtop].point=x;\n\tnode[dtop].number=y;\n\tas[x][y]=fa;\n\tint zz=dtop;\n\twhile(zz>1){\n\t\tif(cmp(node[zz],node[zz>>1])){\n\t\t\tswap(node[zz],node[zz>>1]);zz>>=1;\n\t\t}\n\t\telse return ;\n\t}\n}\nvoid push(int &x,int &y,int &z){//\u624b\u6253\u5806\u5f39\u51fa \n\tx=node[1].point;y=node[1].number;z=node[1].time;\n\tnode[1]=node[dtop];dtop--;\n\tint zz=1;\n\twhile((zz<<1)<=dtop){\n\t\tint zzz;\n\t\tif((zz<<1)<dtop&&cmp(node[zz<<1|1],node[zz<<1]))zzz=zz<<1|1;\n\t\telse zzz=zz<<1;\n\t\tif(cmp(node[zzz],node[zz]))swap(node[zz],node[zzz]),zz=zzz;\n\t\telse return ;\n\t}\n}\nvoid put(int &x,int &y,int &z){\n\twhile(1){\n\t\tif(!dtop)return ;\n\t\tpush(x,y,z);\n\t\tif((bs[x][y]>=z||!bs[x][y])&&(y<=pd[x][0]||z<=pd[x][1]))return ;\n\t}\n}\nvoid Dij(){//\u7eaf\u677f\u5b50 \n\tmemset(pd,0x7f,sizeof(pd));\n\tpd[1][0]=0;pd[1][1]=0;\n\tadd(1,0,0,0);\n\tans=0;\n\tint x,y,z;\n\twhile(dtop){\n\t\tput(x,y,z);//\u5f39\u51fa \n\t\tif(x==n)ans=z,now=y;\n\t\tif(ans)return ;\n\t\tfor(int i=fir[x];i;i=nxt[i]){\n\t\t\tadd(to[i],y+1,z+y+qp[i],x);//\u52a0\u5165 \n\t\t}\n\t}\n}\nvoid print(){\n\tint zan[10010],ttop=0;\n\tint zz=n;\n\twhile(zz>=1){\n\t\tzan[++ttop]=zz;\n\t\tzz=as[zz][now];//\u6bcf\u6b21\u627e\u4e0a\u4e00\u4e2a \n\t\tnow--;\n\t}\n\twhile(ttop){\n\t\tprintf(\"%d \",zan[ttop--]);\t\n\t}\n}\nint main(){\n\tcin>>n>>m;//\u70b9\u6570\uff0c\u8fb9\u6570 \n\tfor(int i=1;i<=m;i++){\n\t\tscanf(\"%d%d%d\",&a,&b,&c);//\u52a0\u8fb9 \n\t\tad(a,b,c);\n\t}\n\tDij();//\u88f8\u677f\u5b50 \n\tcout<<ans<<endl;//\u8f93\u51fa\u7b54\u6848 \n\tprint();//\u6253\u5370\u8def\u5f84 \n}\n```\n\n\n\n\n\n\n",
        "postTime": 1616979804,
        "uid": 499994,
        "name": "w20230071_QwQ",
        "ccfLevel": 0,
        "title": "P2832 \u884c\u8def\u96be \u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.org/problem/P2832)\n\n\u7ed9\u51fa\u4e00\u79cd\u4fdd\u8bc1\u6b63\u786e\u4f46\u590d\u6742\u5ea6\u7384\u5b66\u7684\u7b97\u6cd5\u3002\n\n\u4f7f\u7528dijkstra\uff0c\u5f00\u4e00\u4e2a$dis$\u6570\u7ec4\uff0c$dis_{i,j}$\u8868\u793a\u4ece1\u5230$i$\uff0c\u5171\u7ecf\u8fc7$j$\u6761\u8fb9\u7684\u6700\u5c0f\u8ddd\u79bb\uff0c\u4f46\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u5185\u5b58\u4f1a\u70b8\uff0c\u4e8e\u662f\u53ef\u4ee5\u8003\u8651\u7528map\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u6109\u5febdijkstra\u4e86\uff0c\u8dd1\u7684\u65f6\u5019\u987a\u4fbf\u8bb0\u5f55\u4e00\u4e0b\u524d\u9a71\u3002\n\n\u4f46\u662f\u8fd9\u6837\u53ea\u670952\u5206\uff0c\u8fd8\u5f97\u52a0\u4e00\u4e2a\u526a\u679d\uff0c\u8bb0\u5f55\u4e00\u4e0b\u4ece1\u5230$i$\u7684\u6700\u77ed\u8ddd\u79bb\u548c\u8fd9\u4e2a\u6700\u77ed\u8ddd\u79bb\u5171\u7ecf\u8fc7\u4e86\u51e0\u6761\u8fb9\uff0c\u5982\u679c\u5f53\u524d\u7684\u8ddd\u79bb\u5927\u4e8e\u8fd9\u4e2a\u6700\u77ed\u8ddd\u79bb\uff0c\u5f53\u524d\u7ecf\u8fc7\u7684\u8fb9\u6570\u4e5f\u5927\u4e8e\u8fd9\u4e2a\u8fb9\u6570\uff0c\u5f53\u524d\u72b6\u6001\u5c31\u4e00\u5b9a\u4e0d\u662f\u6700\u4f18\u7684\uff0c~~\u518d\u5361\u5361\u5e38\uff0c\u5f00\u5f00O2\uff0c\u5c31\u8fc7\u4e86~~\uff0c\u6700\u6162\u7684\u70b9\u8dd1\u4e86981ms\u3002\n\n\u4ee3\u7801\uff1a\n```\n#include <bits/stdc++.h>\nusing namespace std;\nnamespace io\n{\n#define SIZ (1 << 21 | 1)\n#define gc() (iS == iT ? (iT= (iS= ibuff) + fread(ibuff, 1, SIZ, stdin), (iS == iT ? EOF : *iS++)) : *iS++)\n#define out()                             \\\n\tfwrite(obuff, 1, oS - obuff, stdout); \\\n\toS= obuff;\n\tchar *iS, *iT, ibuff[SIZ], obuff[SIZ], *oS= obuff, *oT= oS + SIZ - 1, fu[110], c;\n\tint fr;\n\ttemplate <class Type>\n\tinline void read(Type &x)\n\t{\n\t\tx= 0;\n\t\tType y= 1;\n\t\tfor(c= gc(); (c > '9' || c < '0') && c != '-'; c= gc())\n\t\t\t;\n\t\tc == '-' ? y= -1 : x= (c & 15);\n\t\tfor(c= gc(); c >= '0' && c <= '9'; c= gc()) x= x * 10 + (c & 15);\n\t\tx*= y;\n\t}\n\ttemplate <class Type>\n\tinline void print(Type x, char text= '\\n')\n\t{\n\t\tif(x < 0) *oS++= '-', x*= -1;\n\t\tif(x == 0) *oS++= '0';\n\t\twhile(x) fu[++fr]= x % 10 + '0', x/= 10;\n\t\twhile(fr) *oS++= fu[fr--];\n\t\t*oS++= text;\n\t\tout();\n\t}\n}\nusing io::print;\nusing io::read;\n#define N 10001\n#define M 200001\nint n, m, head[N], cnt, ans= 2147483647, mi, stac[N], top, a1[N], a2[N];\nstruct sb//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n{\n\tint a, b, c;\n\tinline sb(int x= 0, int y= 0, int z= 0) { a= x, b= y, c= z; }\n} e[M];\ninline void add(int a, int b, int c)//\u5efa\u8fb9\n{\n\te[++cnt]= sb(head[a], b, c), head[a]= cnt;\n}\nstruct sb2//\u653e\u5230\u4f18\u5148\u961f\u5217\u91cc\u7684\u4e1c\u897f\n{\n\tint a, b, c;\n\tinline sb2(int x= 0, int y= 0, int z= 0) { a= x, b= y, c= z; }\n\tinline bool operator<(const sb2 &y) const { return b > y.b; }\n};\npriority_queue<sb2> q;\nstruct sb3//\u653e\u5230map\u91cc\u7684\u4e1c\u897f\n{\n\tint a, b;\n\tinline sb3(int x= 0, int y= 0) { a= x, b= y; }\n\tinline bool operator<(const sb3 &y) const { return a < y.a || (a == y.a && b < y.b); }\n};\nmap<sb3, int> dis, pre;//\u8ddd\u79bb\uff0c\u524d\u9a71\nmap<sb3, bool> vis;//dijkstra\u7684vis\u6570\u7ec4\nsigned main()\n{\n#ifndef ONLINE_JUDGE\n\tfreopen(\"testdata.in\", \"r\", stdin);\n\tfreopen(\"testdata.out\", \"w\", stdout);\n#endif\n\tread(n), read(m);\n\tfor(int i= 1, a, b, c; i <= m; i++) read(a), read(b), read(c), add(a, b, c);//\u5efa\u8fb9\n\tmemset(a1, 0x7f, sizeof(a1));//\u521d\u59cb\u5316\n\tq.push(sb2(1, 0, 0));\n\tdis[sb3(1, 0)]= 0;\n\twhile(!q.empty())//\u8dd1dijkstra\n\t{\n\t\tsb2 kkk= q.top();\n\t\tq.pop();\n\t\tif(vis[sb3(kkk.a, kkk.c)] || kkk.c == n) continue;//\u5982\u679c\u5df2\u7ecf\u8bbf\u95ee\u8fc7\u5c31continue\uff0c\u540c\u65f6\u5982\u679c\u5df2\u7ecf\u7ecf\u8fc7\u4e86n\u4e2a\u70b9\u63a5\u4e0b\u6765\u5c31\u4f1a\u91cd\u590d\u7ecf\u8fc7\u70b9\uff0c\u80af\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u4e5fcontinue\n\t\tif(kkk.b >= a1[kkk.a] && kkk.c > a2[kkk.a]) continue;//\u4e0a\u9762\u8bb2\u7684\u526a\u679d\n\t\tvis[sb3(kkk.a, kkk.c)]= 1;\n\t\tif(kkk.a == n)//\u8bb0\u5f55\u7b54\u6848\n\t\t{\n\t\t\tif(ans > kkk.b)\n\t\t\t{\n\t\t\t\tans= kkk.b, mi= kkk.c;\n\t\t\t}\n\t\t}\n\t\tfor(int i= head[kkk.a]; i; i= e[i].a)\n\t\t{\n\t\t\tint xxx= kkk.b + e[i].c + kkk.c;\n\t\t\tsb3 xx(e[i].b, kkk.c + 1);\n\t\t\tmap<sb3, int>::iterator it= dis.find(xx);\n\t\t\tif(it == dis.end() || (*it).second > xxx)//\u66f4\u65b0dis\n\t\t\t{\n\t\t\t\tdis[xx]= xxx;\n\t\t\t\tpre[xx]= kkk.a;\n\t\t\t\tif(xxx < a1[e[i].b])//\u66f4\u65b0\u4ece1\u5230i\u7684\u6700\u77ed\u8def\u5f84\n\t\t\t\t{\n\t\t\t\t\ta1[e[i].b]= xxx;\n\t\t\t\t\ta2[e[i].b]= kkk.c + 1;\n\t\t\t\t}\n\t\t\t\telse if(xxx == a1[e[i].b] && kkk.c + 1 < a2[e[i].b])\n\t\t\t\t\ta2[e[i].b]= kkk.c + 1;\n\t\t\t\tq.push(sb2(e[i].b, dis[xx], kkk.c + 1));\n\t\t\t}\n\t\t}\n\t}\n\tprint(ans);\n\tfor(sb3 i= sb3(n, mi); i.b >= 0; i= sb3(pre[i], i.b - 1)) stac[++top]= i.a;//\u8bb0\u5f55\u8def\u5f84\n\tfor(int i= top; i; i--) print(stac[i], ' ');\n}\n```\n![](https://www.luogu.org/images/congratulation.png)",
        "postTime": 1576473872,
        "uid": 60075,
        "name": "pzc2004",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "~~\u8fd9\u9898\u6211\u770b\u4e86\u4e0b\u8ba8\u8bba\u7248\u7684hack\u6570\u636e\uff0c\u4e0d\u7136\u8fd8\u771f\u4e0d\u77e5\u9053\u600e\u4e48\u8fc7\u3002~~\n\u6211\u5c31\u91cd\u70b9\u8bb2\u4e0b\u9898\u89e3\u4e3a\u4ec0\u4e48\u4f1a\u88abhack\u6389\uff0c\n\u4f8b\u5982\u8fd9\u7ec4\u6570\u636e\nINPUT:\n7 7\n1 2 1\n2 3 1\n3 4 1\n4 5 1\n5 6 1\n6 7 1\n1 5 14\nOUTPUT:\n19\n1 5 6 7\n\u8fd9\u662f\u6807\u51c6\u8f93\u5165\u8f93\u51fa\uff0c\u800c\u4ed6\u4eec\u7684\u8f93\u51fa\u662f\n19\n1 2 3 4 5 6 7\n\u51fa\u73b0\u8fd9\u79cd\u60c5\u51b5\u7684\u539f\u56e0\u662f\u56e0\u4e3a\u5171\u7528\u4e00\u4e2a\u75b2\u52b3\u548c\u8ddd\u79bb\uff0c\u56e0\u4e3a\u75b2\u52b3\u5ea6\u4f1a\u968f\u7740\u4f60\u8d70\u7684\u591a\u800c\u8d8a\u6765\u8d8a\u591a\uff0c\u5c31\u62ff\u8fd9\u4e2a\u6837\u4f8b\u6765\u8bf4\uff0c\u4f60\u8d701-2-3-4-5\u6700\u540e5\u7684\u8ddd\u79bb\u662f\n10\u6bd4\u76f4\u63a5\u8d701-5 14\u8981\u5c114\uff0c\u6240\u4ee5\u522b\u7684\u4ee3\u7801\u4f1a\u8bb0\u5f55\u7684\u662f\u8fd9\u4e2a\u70b9\u75b2\u52b3\u5ea6\u662f3\uff0c\u800c\u4e0d\u4f1a\u8bb0\u5f55\u75b2\u52b3\u5ea61\u8ddd\u79bb\u4e3a14\u7684\u8fd9\u79cd\u8d70\u6cd5\uff0c\u4e24\u79cd\u8d70\u6cd5\u867d\u7136\u90fd\u662f\u4e00\u6837\u7684\u603b\u82b1\u8d39\u65f6\u95f4\uff0c\u4f46\u662f1-2-3-4-5-6-7\u8fd9\u79cd\u8d70\u6cd5\u82b1\u8d39\u7684\u8981\u66f4\u52a0\u75b2\u52b3\uff0c\u6240\u4ee5\u6211\u4eec\u9009\u62e9\u7b2c\u4e8c\u79cd\u8d70\u6cd51-5-6-7\u3002\n\n~~\u5410\u69fd\u4e0b\uff0c\u660e\u660e\u7b2c\u4e8c\u79cd\u8d70\u7684\u8ddd\u79bb\u8981\u8fdc\uff0c\u5e94\u8be5\u7b2c\u4e8c\u79cd\u66f4\u52a0\u75b2\u52b3\u624d\u5bf9~~\n\n\u8fd9\u6837\u7684\u8bdd\u4f60\u5c31\u9700\u8981\u4ecen\u8dd1\u52301\u800c\u4e0d\u662f\u4ece1\u8dd1\u5230n\uff0c\u8fd9\u6837\u539f\u672c\u75b2\u52b3\u591a\u7684\u70b9\u4f1a\u53d8\u6210\u75b2\u52b3\u5c11\u7684\u70b9  ~~\u53ef\u80fd\u662f\u6570\u636e\u592a\u5c0f\uff0c\u770b\u4e0d\u51fa\u4ec0\u4e48\u4e1c\u897f\u6765\uff0c\u6570\u636e\u5927\u4e00\u70b9\u53ef\u80fd\u8fd8\u662f\u8fc7\u4e0d\u53bb~~\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,t,dis[500050];\nint head[500050],cnt,from[500050],times[500050];\nbool vis[500050];\nstruct f{\n\tint next,to,dis;\n}a[500050];\ninline void add(int u,int v,int d)\n{\n\tcnt++;\n\ta[cnt].dis=d;\n\ta[cnt].next=head[u];\n\ta[cnt].to=v;\n\thead[u]=cnt;\n}\nvoid spfa()\n{\n\tmemset(times,0,sizeof(times));\n\tmemset(from,0,sizeof(from));\n\tqueue<int >q;\n\tq.push(n);\n\tdis[n]=0;\n\tvis[n]=true;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tvis[u]=false;\n\t\tfor(int i=head[u];i;i=a[i].next)\n\t\t{\n\t\t\tint t=a[i].to;\n\t\t\tif(a[i].dis+dis[u]+times[u]<dis[t])\n\t\t\t{\n\t\t\t\tdis[t]=dis[u]+a[i].dis+times[u];\n\t\t\t\ttimes[t]=times[u]+1;\n\t\t\t\tfrom[t]=u;\n\t\t\t\tif(!vis[t])\n\t\t\t\t{\n\t\t\t\t\tq.push(t);\n\t\t\t\t\tvis[t]=true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\n\tdis[i]=0x7fffffff;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint u,v,d;\n\t\tscanf(\"%d%d%d\",&u,&v,&d);\n\t\tadd(v,u,d);\n\t}\n\tspfa();\n\tprintf(\"%d\\n\",dis[1]);\n\tint t=1;\n\twhile(t)\n\t{\n\t\tprintf(\"%d \",t);\n\t\tt=from[t];\n\t}\n\treturn 0;\n}\n```\n\u5982\u679c\u54ea\u91cc\u6709\u95ee\u9898\u5e0c\u671bORZ\u80fd\u6307\u6b63",
        "postTime": 1559564904,
        "uid": 155626,
        "name": "\u8001\u54b8\u9c7c\u4e86",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "\u8fd9\u662f\u4e00\u9053\u8f83\u6c34\u7684spfa\u9898\uff1b\n\n\u867d\u7136\u697c\u4e0b\u6709\u8ddf\u6211\u5dee\u4e0d\u591a\u7684\uff0c\u4f46\u5176\u662f\u7528vector\u6765\u5b58\u7684\u56fe\uff0c\u90a3\u6211\u8fd8\u662f\u539a\u7740\u8138\u76ae\u53d1\u4e00\u9053\u81ea\u5df1\u7684\u66f4\u5f31\u7684\u5427\uff1b\n\n\u8fd9\u9053\u9898\u7684\u6838\u5fc3\u662f\u6c42\u6700\u77ed\u8def\uff0c\u4f46\u5f15\u5165\u4e86\u75b2\u60eb\u503c\u8fd9\u4e00\u4e1c\u897f,\u4ed4\u7ec6\u60f3\u4e00\u4e0b\uff0c\u5176\u5b9e\u4e5f\u5c31\u53ea\u662f\u5728spfa\u4e0a\u505a\u4e86\u4e00\u4e2a\u5c0f\u5c0f\u7684\u6539\u52a8\uff1b\n\n\u5728\u961f\u5217\u4e2d\u6211\u4eec\u538b\u5165\u7684\u4e0d\u4ec5\u4ec5\u53ea\u662f\u70b9\u4e86\uff0c\u8fd8\u5e94\u8be5\u538b\u5165\u5230\u8fbe\u5f53\u524d\u8282\u70b9\u6240\u7ecf\u8fc7\u7684\u8def\u5f84\u6761\u6570\uff08\u5373\u8fd8\u9700\u82b1\u8d39\u7684\u4ee3\u4ef7\uff09\uff0c\u5230\u5f53\u524d\u8282\u70b9\u7684\u8ddd\u79bb\uff1b\n\n\u7136\u540e\u5728\u8dd1spfa\u5c31\u53ef\u4ee5\u4e86\uff1b\n\n\u5982\u8fd8\u662f\u4e0d\u61c2\uff0c\u53ef\u4ee5\u53c2\u89c1\u6211\u4ee3\u7801\uff0c\u8fdb\u884c\u7406\u89e3\uff1b\n\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int maxn=10000+10,maxm=200000+10;\nint n,m,dist[maxn],pre[maxn],Ans[maxn];\n//\u7528pre[]\u6765\u8bb0\u5f55\u8def\u5f84\uff0cAns[]\u6765\u8bb0\u5f55\u6240\u7ecf\u8fc7\u7684\u70b9\uff1b \nstruct node\n{\n    int next,to,w;\n}edge[maxm];\nint head[maxn],k;\nvoid adde(int u,int v,int w)\n{\n    edge[++k].to=v;\n    edge[k].w=w;\n    edge[k].next=head[u];\n    head[u]=k;\n}\nstruct ans\n{\n    int dis,node,time;\n};\nvoid spfa(int st)\n{\n    queue<ans> q;\n    memset(dist,0x7f,sizeof dist);\n    dist[st]=0;q.push(ans{0,st,0});\n    while(!q.empty())\n    {\n        ans tmp=q.front();q.pop();\n        for(int i=head[tmp.node];i;i=edge[i].next)\n        {\n            int to=edge[i].to;\n            if(dist[to]>tmp.dis+edge[i].w+tmp.time)//\u6ce8\u610f\u4e86\uff0c\u6838\u5fc3\u4ee3\u7801\uff08\u4e0e\u666e\u901aspfa\u4e0d\u540c\u7684\u5730\u65b9\uff09 \n            {\n                dist[to]=tmp.dis+edge[i].w+tmp.time;\n                pre[to]=tmp.node;\n                q.push(ans{dist[to],to,tmp.time+1});\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d %d\",&n,&m);\n    for(int u,v,z,i=1;i<=m;i++) scanf(\"%d %d %d\",&u,&v,&z),adde(u,v,z);\n    spfa(1);\n    //\u4ece\u8d77\u70b9\u5f00\u59cb\uff1b \n    printf(\"%d\\n\",dist[n]);\n    int tmp=n,jilu=0;\n    Ans[++jilu]=tmp;\n    while(pre[tmp])\n    {\n        Ans[++jilu]=pre[tmp];\n        tmp=pre[tmp];\n```\n}//\u5c06pre[]\u8bb0\u5f55\u7684\u8def\u5f84\u8f6c\u5230Ans\u4e2d\uff1b\n    for(int i=jilu;i>=1;i--) printf(\"%d \",Ans[i]);\n\n    //\u6ce8\u610f\u8981\u5012\u7740\u8f93\u51fa\uff1b \n\n}",
        "postTime": 1504596034,
        "uid": 25361,
        "name": "\u4e3f\u738b\u8005\u4e4b\u8def",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u9053\u9898\u5c31\u662f\u6c42\u6700\u77ed\u8def\uff0c\u53ea\u4e0d\u8fc7\u8def\u7684\u6743\u503c\u4f1a\u968f\u65f6\u95f4\u7684\u53d8\u5316\u800c\u53d8\u5316\uff0c\u65e2\u7136\u662f\u6700\u77ed\u8def\uff0c\u90a3\u4e48\u5f53\u7136\u53ef\u4ee5\u7528\u5230Dijkstra\u6765\u8dd1\u4e00\u904d\uff0c\u53ea\u4e0d\u8fc7\u9700\u8981\u5728\u8def\u4e0a\u5904\u7406\u4e00\u4e0b\u5173\u4e8e\u65f6\u95f4\u7684\u6539\u53d8\u800c\u6539\u53d8\u7684\u8fb9\u6743\uff0c\u5177\u4f53\u8be6\u60c5\u8bf7\u770b\u4ee3\u7801\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cmath>\n#include<cstring>\n#include<queue>\nusing namespace std;\ntypedef long long ll;\ntypedef pair<ll, pair<int,int> > PII;\npriority_queue<PII, vector<PII>, greater<PII>> q;\nint head[1000000];\nint ver[1000000];\nint nxt[1000000];\nint cnt;\nint link[1000000];\nint bef[1000000];\nvoid add(int x,int y,int z)\n{\n    nxt[++cnt] = head[x];\n    head[x] = cnt;\n    ver[cnt] = y;\n    link[cnt] = z;\n}\nint n, m;\nll dis[1000000];\nbool aim[1000000];\nvoid djslm(int sta)//\u6807\u51c6\u7684Dijkstra\n{\n    memset(dis, 0x7f, sizeof dis);\n    q.push({0, {0, sta}});\n    dis[sta] = 0;\n    while(!q.empty())\n    {\n        PII temp = q.top();\n        q.pop();\n        ll lea = temp.first;\n        int now = temp.second.first;//\u6b64\u5904\u4e0e\u5e38\u89c4\u4e0d\u540c\uff0c\u591a\u4e86\u4e00\u4e2anow\u8bb0\u5f55\u5f53\u524d\u7684\u65f6\u95f4\n        int point = temp.second.second;\n        if(aim[point])\n            continue;\n        aim[point] = 1;\n        for (int i = head[point]; i;i=nxt[i])\n        {\n            int v0 = ver[i];\n            if(dis[v0]>lea+link[i]+now)//\u5728\u6bd4\u8f83\u7684\u65f6\u5019\u4e5f\u8981+\u4e0a\u5f53\u524d\u65f6\u95f4\n            {\n                dis[v0] = lea + link[i] + now;\n                bef[v0] = point;//\u987a\u4fbf\u8bb0\u5f55\u8def\u4e0a\u7ecf\u8fc7\u7684\u70b9\n                q.push({dis[v0], {now + 1, v0}});\n            }\n        }\n    }\n}\nvoid out(int now)\n{\n    printf(\"%d \", now);\n    if(bef[now])\n        out(bef[now]);\n}\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= m;i++)\n    {\n        int a, b, c;\n        scanf(\"%d%d%d\", &a, &b, &c);\n        add(b, a, c);//\u6ce8\u610f\u8fd9\u91cc\u8981\u53cd\u5411\u5efa\u8fb9\u7136\u540e\u8dd1\u53cd\u5411\u56fe\uff0c\u5426\u5219\u4f1a\u9519\u4e24\u4e2a\u70b9\n    }\n    djslm(n);\n    printf(\"%lld\\n\",dis[1]);\n    out(1);//\u7531\u4e8e\u662f\u5012\u7740\u8dd1\u7684\uff0c\u5f80\u524d\u8f93\u51fa\u8def\u5f84\n    printf(\"\\n\");\n}\n```\n",
        "postTime": 1603152133,
        "uid": 278481,
        "name": "Link_Space",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "### \u6700\u77ed\u8def\u7684\u8def\u5f84\u8f93\u51fa\uff1a\n\n- \u6211\u4eec\u8981\u6709\u4e00\u4e2a\u6570\u7ec4$pre$\u6765\u4fdd\u5b58\u8282\u70b9\u7684\u524d\u8d8b\n\n- \u5224\u65ad$v$\u662f\u5426\u4e3a$u$\u7684\u524d\u8d8b\uff0c\u5219\u8981\u770b$u$\u7684\u6700\u77ed\u8def\u662f\u5426\u80fd\u66f4\u65b0$v$\u7684\u8def\u5f84\u3002\n\n- \u7531\u7ec8\u70b9\u5f00\u59cb\u67e5\u627e\u524d\u8d8b\uff0c\u9012\u5f52\u8c03\u7528\u5c31\u53ef\u4ee5\u8f93\u51fa\u4e86\uff1a\n\n---\n\n$Code:$\n\n    void print(int x) {\n        if(pre[x] != -1)//\u5f53x\u7684\u524d\u8d8b\u4e0d\u4e3a\u7a7a\u65f6\n            print(pre[x]);//\u67e5\u627e\u5b83\u7684\u524d\u8d8b\n        printf(\"%d \", x);//\u6700\u540e\u8f93\u51fax\n    }\n    \n### \u75b2\u52b3\u503c\u7684\u7d2f\u52a0\uff1a\n\n- \u7528\u5f53\u524d\u4e00\u5c42\u7684\u5f85\u6269\u6563\u8282\u70b9$u$\u53bb\u66f4\u65b0\u5176\u8fde\u63a5\u70b9$v$\u65f6\uff0c$v$\u5e94\u8be5\u7d2f\u52a0\u591a\u5c11\u75b2\u52b3\u503c\u3002\n\n- \u6211\u4eec\u9700\u8981\u67e5\u8be2\u4ece\u8d77\u70b9\u5230$u$\u7684\u8def\u5f84\u6570\u91cf\uff0c\u7528\u6570\u7ec4$k$\u4fdd\u5b58\u3002\n\n- $spfa$\u52bf\u5728\u5fc5\u884c\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\uff1a$k[v]=k[u]+1$\n\n### \u7b97\u6cd5\u5206\u6790\uff1a\n\n- \u4ece\u8d77\u70b9\u5230$u$\u7684\u6700\u77ed\u8def\u5df2\u7ecf\u6c42\u51fa\uff0c\u800c$u$\u53c8\u662f\u901a\u8fc7\u4e00\u6761\u8fde\u8fb9\u5230\u8fbe$v$\uff0c\u6545\uff1a\n$$dis[v]=\\min(dis[v],dis[u]+edge[i].w+k[u])$$\n\n- \u82e5$u$\u80fd\u66f4\u65b0$v$\u5230\u8d77\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u5219\u6211\u4eec\u79f0$u$\u4e3a$v$\u7684\u524d\u8d8b\u3002\n\n- \u5f53\u7136\uff0c\u82e5$v$\u7684\u672a\u88ab\u6807\u8bb0\uff0c\u6211\u4eec\u80fd\u5c06\u5176\u4f5c\u4e3a\u4e0b\u4e00\u5f85\u6269\u6563\u8282\u70b9\u5165\u961f\u3002\n\n- \u5c31\u8fd9\u6837\u7ed3\u675f\u4e86\u5417\uff1f\n\n- \u6211\u4eec\u4e5f\u8981\u60f3\u529e\u6cd5\u5c3d\u91cf\u51cf\u5c11\u5c0fX\u7684\u75b2\u52b3\u503c\uff0c\u5f53$u$\u901a\u8fc7\u8fde\u8fb9\u5230\u8fbe\u70b9$v$\u7684\u8ddd\u79bb\u4e0e\u5176\u672c\u8eab\u5230\u8d77\u70b9\u7684\u8ddd\u79bb\u76f8\u7b49\u65f6\uff0c\u6211\u4eec\u8981\u53d6\u6700\u5c0f\u7684\u75b2\u7d2f\u503c\u7d2f\u52a0\u3002\n\n- \u524d\u8d8b\u8bbe\u5b9a\u4e24\u4e2a\uff0c\u5230\u4e86\u7ec8\u70b9\u518d\u8d4b\u503c\u3002\n\n### \u6838\u5fc3\u4ee3\u7801\uff1a\n\n    void spfa(int start)\n    {\n        for(int i = 1; i <= n; i++)\n            dis[i] = inf;//\u521d\u59cb\u5316\u5230\u6b63\u65e0\u7a77 \n        queue<int> Q;//\u521b\u5efa\u961f\u5217\u4fdd\u5b58\u5f85\u6269\u6563\u8282\u70b9 \n        Q.push(start);//\u5c06\u8d77\u70b9\u5165\u961f\u3002 \n        dis[start] = 0;\n        vis[start] = 1;\n        while(!Q.empty())\n        {\n            int u = Q.front();//\u53d6\u51fa\u961f\u5934\u5143\u7d20 \n            Q.pop();\n            vis[u] = 0;\n            for(int i = head[u]; i; i = edge[i].next)\n            {\n                int v = edge[i].to;\n                if(dis[v] > dis[u] + k[u] + edge[i].w)\n                {\n                    p[v] = u;//\u4fdd\u5b58\u524d\u8d8b \n                    k[v] = k[u] + 1;//\u75b2\u52b3\u503c\u7d2f\u52a0 \n                    dis[v] = dis[u] + k[u] + edge[i].w;//\u66f4\u65b0\u8def\u5f84 \n                    if(v == 1)\n                        memcpy(pre, p, sizeof p);//\u5230\u4e86\u7ec8\u70b9\u786e\u5b9a\u524d\u8d8b \n                    if(!vis[v])//\u6ca1\u6709\u88ab\u6807\u8bb0\u5c31\u5165\u961f \n                    {\n                        vis[v] = 1;//\u6807\u8bb0 \n                        Q.push(v);//\u5165\u961f \n                    }\n                }\n                else if(dis[v] == dis[u] + edge[i].w) {\n                    if(k[u] + 1 < k[v]) {//\u66f4\u65b0\u66f4\u5c0f\u7684\u75b2\u52b3\u503c \n                        k[v] = k[u] + 1;\n                        p[v] = u;//\u524d\u8d8b\u91cd\u7f6e \n                    }\n                }\n            }\n        }\n    }",
        "postTime": 1548744741,
        "uid": 110593,
        "name": "Victorique_De_Blois",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2832\u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "\u5176\u5b9e\u8fd9\u4e2a\u9898\u8fd8\u662f\u6bd4\u8f83\u6c34\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u660e\u786e\u4e00\u70b9\uff0c\u5f53\u524d\u7684\u6700\u4f18\u89e3\u4e0d\u4e00\u5b9a\u662f\u5168\u5c40\u6700\u4f18\u89e3\n\n\u8fd9\u4e00\u70b9\u53ef\u4ee5\u5f88\u5bb9\u6613\u8bc1\u660e\uff0c\u5177\u4f53\u6570\u636e\u4e5f\u53ef\u4ee5\u53c2\u7167\u51fa\u9898\u4eba\u7684hack\u6570\u636e\n\n\u6837\u4f8b\u8f93\u5165\uff1a\n\n7 7\n\n1 2 2\n\n2 3 2\n\n3 4 2\n\n4 5 2\n\n5 6 2\n\n6 7 2\n\n1 4 10\n\n\u6837\u4f8b\u8f93\u51fa\uff1a\n\n22\n\n1 4 5 6 7\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u65e2\u7136\u5230\u8fbe\u5f53\u524d\u70b9\u7ecf\u8fc7\u7684\u4e0d\u540c\u7684\u8def\u5f84\u4f1a\u5bf9\u8ddd\u79bb\u6709\u6216\u591a\u6216\u5c11\u7684\u5f71\u54cd\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5c06\u8fd9\u4e2a\u7ecf\u8fc7\u7684\u70b9\u7684\u6570\u91cf\u5206\u79bb\u51fa\u6765\u5f62\u6210\u65b0\u7684\u4e00\u7ef4\uff0c\u539f\u6765\u7684\u6700\u77ed\u8def\u5c31\u53d8\u6210\u4e86\u4e24\u7ef4\uff0cdist[ i ][ j ]\u8868\u793a\u5230\u8fbei\u8fd9\u4e2a\u70b9\uff0c\u7ecf\u8fc7j\u6761\u8fb9\u7684\u6700\u77ed\u8def\u5f84\n\n```cpp\n//\u77e5\u9053\u4f60\u4eec\u559c\u6b22\u8fd9\u4e2a \n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nstruct node\n{\n\tint to,next,dist;\n};\nstruct point\n{\n\tint to,step;//\u7531\u4e8e\u6700\u77ed\u8def\u662f\u8bb0\u5f55\u7684\u4e24\u7ef4\uff0c\u6240\u4ee5spfa\u4e5f\u8981\u8bb0\u5f55\u4e24\u4e2a\u91cf \n};\nint head[10010];\nnode edge[200010];\nint n,m,k;\n//\u4eb2\u81ea\u6d4b\u8bd5\uff0c\u7ecf\u8fc7\u7684\u8fb9\u6570\u4e0d\u8d85\u8fc750 \nint dist[10010][60];\t//\u8ddd\u79bb \nbool vis[10010][60];\t//\u662f\u5426\u5728\u961f\u5217\u4e2d \nint pre[10010][60];\t\t//\u5f53\u524d\u70b9\u4ece\u54ea\u4e2a\u70b9\u8f6c\u79fb\u8fc7\u6765 \n\n//\u5efa\u8fb9\uff0c\u4e0d\u7528\u8bf4\u4e86 \ninline void add(int come,int to,int dist)\n{\n\tedge[++k]=(node){to,head[come],dist};\n\thead[come]=k;\n}\n\n//spfa\u4e0a\u7a0d\u52a0\u6539\u52a8 \nvoid spfa()\n{\n\tpoint x;\n\tmemset(dist,0x7f,sizeof(dist));\n\tqueue<point> q;\n\t\n\t//dist[\u54ea\u4e2a\u70b9][\u7ecf\u8fc7\u7684\u8fb9\u7684\u6570\u91cf] \n\tq.push((point){1,0});\n\tvis[1][0]=true;\n\tdist[1][0]=0;\n\t\n\twhile(!q.empty())\n\t{\n\t\tx=q.front();q.pop();\n\t\tif(x.step>=50) continue;\t//\u9632\u6b62\u6307\u9488\u8d8a\u754c \n\t\tvis[x.to][x.step]=false;\n\t\tfor(int i=head[x.to];i;i=edge[i].next)\n\t\t{\n\t\t\tint v=edge[i].to;\n\t\t\tif(dist[v][x.step+1]>dist[x.to][x.step]+edge[i].dist+x.step)\n\t\t\t{\n\t\t\t\tdist[v][x.step+1]=dist[x.to][x.step]+edge[i].dist+x.step;\t//\u6539\u53d8\u6700\u77ed\u8def\u5f84\u7684\u503c \n\t\t\t\tpre[v][x.step+1]=x.to;\t//\u6539\u53d8\u524d\u9a71 \n\t\t\t\tif(!vis[v][x.step+1])\t//\u961f\u5217\u4e2d\u6ca1\u6709\u7684\u8bdd\u5c31\u4e22\u8fdb\u53bb \n\t\t\t\t{\n\t\t\t\t\tvis[v][x.step+1]=true;\n\t\t\t\t\tq.push((point){v,x.step+1});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid print(int u,int step)\t//\u8f93\u51fa\u7b54\u6848 \n{\n\tif(!u) return ;\n\tprint(pre[u][step],step-1);\n\tprintf(\"%d \",u);\n}\n\nint main()\n{\n\tint u,v,w;\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d%d\",&u,&v,&w);\n\t\tadd(u,v,w);\n\t}\n\t\n\tspfa();\n\tint step,minn=0x7fffffff;\n\t\n\t//\u6700\u540e\u4e00\u5b9a\u8981\u518d\u626b\u4e00\u904d\uff0c\u56e0\u4e3a\u4e0d\u77e5\u9053\u7b54\u6848\u7684\u4f4d\u7f6e \n\tfor(int i=1;i<=50;i++)\n\t\tif(dist[n][i]<minn)\n\t\t\tminn=dist[n][i],step=i;\n\t\n\tprintf(\"%d\\n\",dist[n][step]);\n\tprint(n,step);\n\treturn 0;\n}\n```",
        "postTime": 1538701305,
        "uid": 61667,
        "name": "YitsuHolo",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u8fd8\u662f\u4e00\u9053\u6bd4\u8f83\u88f8\u7684\u6700\u77ed\u8def \u8fd9\u9053\u9898\u552f\u4e00\u7684\u96be\u70b9\u662f\u6743\u503c\u4f1a\u52a8\u6001\u7684\u53d8\u5316 \u6240\u4ee5\u6211\u4eec\u5728\u677e\u5f1b\u64cd\u4f5c\u4e2d\u6dfb\u52a0\u4e00\u4e2asum\u6570\u7ec4\n\nsum[i]\u8868\u793a\u5230i\u65f6\u5df2\u7ecf\u8d70\u4e86\u51e0\u6761\u8def \u90a3\u4e48\u677e\u5f1b\u64cd\u4f5c\u7a0d\u7a0d\u505a\u4e00\u70b9\u53d8\u52a8:\n\n```cpp\nif(dist[e[i].to]>dist[p]+e[i].w+du[p])\n            {\n               dist[e[i].to]=dist[p]+e[i].w+du[p];\n               du[e[i].to]=du[p]+1;\n               pre[e[i].to]=p;\n               if(!vis[e[i].to])\n               {\n                  vis[e[i].to]=true;\n                  que[++qtail]=e[i].to;\n               }    \n            }\n            else if(dist[e[i].to]==dist[p]+e[i].w&&du[e[i].to]>du[p]+1)//\u8fd9\u6837\u4f1a\u4f7f\u5f97\u540e\u9762\u7684\u66f4\u4f18\n            du[e[i].to]=du[p]+1,pre[e[i].to]=p;\n\u5269\u4e0b\u7684\u5c31\u662fspfa\u6846\u67b6\u5566!\n```",
        "postTime": 1478865704,
        "uid": 22060,
        "name": "Memorize",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    },
    {
        "content": "\u8fd9\u4e00\u9898\u8bf4\u662f\u8bdd\u6211AC\u7684\u65f6\u95f4\u8de8\u5ea6\u5f88\u5927\u3002\u4e00\u5f00\u59cb\u62ff\u4e8650\u5206\u7136\u540e\u653e\u5f03\u4e86\uff0c\u7136\u540e\u8fc7\u4e86\u4e00\u6bb5\u65f6\u95f4\u4e4b\u540e\u4e00\u6b21\u5c31AC\u4e86\u3002\n\n\u6211\u7684\u601d\u8def\u662fspfa\uff0c\u4f46\u5728\u666e\u901a\u7684spfa\u4e0a\u9700\u8981\u6539\u8fdb\uff0c\u56e0\u4e3a\u8fd9\u9053\u9898\u5f15\u5165\u4e86\u75b2\u52b3\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5728\u66f4\u65b0\u975e\u7ec8\u70b9\u7684\u70b9\u7684\u6700\u77ed\u7528\u65f6\u7684\u65f6\u5019\u8981\u5728\u539f\u6765\u7684\u57fa\u7840\u4e0a\u52a0\u4e0a\u75b2\u52b3\u5ea6\u3002\n\n\u5176\u4ed6\u6ca1\u548c\u5e73\u5e38\u7684\u6700\u77ed\u8def\u6ca1\u4ec0\u4e48\u4e24\u6837\u3002\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <vector>\n#include <queue>\n#include <algorithm>\n//luogu \u8c8c\u4f3c\u4f1a\u628a\u7a7a\u884c\u541e\u6389\nusing namespace std;\n#define pb push_back\n//\nconst int MAXN=10000+20,MAXM=200000+20,INF=1234567890;\n//\nstruct edge{int to,w;};\n//\nvector<edge>G[MAXN];\nint n,m,pre[MAXN],d[MAXN],power[MAXN],inq[MAXN];\nqueue<int>que;\nvector<int>ans;\n//\ninline void read(int &n){\n    n=0;\n    char ch=getchar();\n    while(ch<'0' || ch>'9') ch=getchar();\n    do{\n        n=n*10+ch-'0';\n        ch=getchar();\n    }while(ch>='0' && ch<='9');\n    return;\n}\ninline void add_edge(int u,int v,int w){\n    edge e;\n    e.to=v,e.w=w;\n    G[u].pb(e);\n    return;\n}\nvoid init(){\n    int u,v,w;\n    read(n);read(m);\n    for(int i=1;i<=m;i++){\n        read(u);read(v);read(w);\n        add_edge(u,v,w);\n    }\n    return;\n}\nvoid solve(){\n    memset(inq,0,sizeof(que));\n    memset(pre,-1,sizeof(pre));\n    memset(power,0,sizeof(power));\n    for(int i=1;i<=n;i++) d[i]=INF;\n    d[1]=0;inq[1]=1;que.push(1);\n    while(!que.empty()){\n        int u=que.front();\n        que.pop();inq[u]=0;\n        for(int i=0;i<G[u].size();i++){\n            int v=G[u][i].to;\n            int w=G[u][i].w;\n            if(v==n){\n                if(d[v]>(d[u]+w)){\n                    d[v]=d[u]+w;\n                    pre[v]=u;\n                    if(!inq[v]){\n                        inq[v]=1;\n                        que.push(v);\n                    }\n                }\n            }\n            else{\n                if(d[v]>(d[u]+power[u]+w+1)){\n                    d[v]=d[u]+power[u]+w+1;\n                    power[v]=power[u]+1;\n                    pre[v]=u;\n                    if(!inq[v]){\n                        inq[v]=1;\n                        que.push(v);\n                    }\n                }\n                else{\n                    if(d[v]==(d[u]+power[u]+w+1)){\n                        if(power[v]>(power[u]+1)){\n                            power[v]=power[u]+1;\n                            pre[v]=u;\n                            if(!inq[v]){\n                                inq[v]=1;\n                                que.push(v);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    printf(\"%d\\n\",d[n]);\n    int t=n;\n    while(1){\n        ans.pb(t);\n        t=pre[t];\n        if(t==-1) break;\n    }\n    for(int i=ans.size()-1;i>=0;i--){\n        printf(\"%d \",ans[i]);\n    }\n    return;\n}\nint main(){\n    init();\n    solve();\n    return 0;\n}\n```",
        "postTime": 1473050145,
        "uid": 8874,
        "name": "Kwork",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P2832 \u3010\u884c\u8def\u96be\u3011"
    }
]