[
    {
        "content": "# \u9898\u89e3 P6245 \u3010The Climbing Wall S\u3011\n\n## \u6838\u5fc3\u7b97\u6cd5\uff1a\u6700\u77ed\u8def\n\n### 1.\u5efa\u6a21\n\n\u6211\u5148\u6765\u628a\u95ee\u9898\u7b80\u8ff0\u4e00\u4e0b\uff1a\n\u5728\u4e00\u4e2a\u5e73\u9762\u5185\uff0c\u6bcf\u4e2a\u70b9\u90fd\u6709\u5176\u6a2a\u5750\u6807\u4e0e\u7eb5\u5750\u6807\u3002Bessie\u60f3\u8981\u4ece\u4e00\u4e2a\u7eb5\u5750\u6807\u4e0d\u8d85\u8fc71000\u7684\u70b9\uff0c\u722c\u5230\u4e00\u4e2a\u7eb5\u5750\u6807\u4e3a\u9898\u76ee\u7ed9\u5b9a\u7684H\u7684\u70b9\u4e0a\u3002\u5979\u6bcf\u4e00\u6b65\u53ef\u4ee5\u722c\u5230\u4e0e\u5f53\u524d\u70b9\u8ddd\u79bb\u4e0d\u8d85\u8fc71000\u7684\u70b9\u3002\u95ee\uff1a\u6700\u5c11\u722c\u591a\u5c11\u6b65\uff1f\n\n\u6211\u4eec\u628a\u9898\u76ee\u4e2d\u6bcf\u4e00\u4e2a\u843d\u811a\u70b9\u5c31\u770b\u4f5c\u56fe\u4e2d\u7684\u70b9\uff0c\u628a\u53ef\u4ee5\u76f4\u63a5\u5230\u8fbe\u7684\u4e24\u4e2a\u70b9\u95f4\u5efa\u4e00\u6761\u6743\u503c\u4e3a1\u7684\u8fb9\uff0c\u4ee3\u8868\u8d70\u4e86\u4e00\u6b65\u3002\n\n\u90a3\u4e48\u8dd1\u4e00\u904d\u6700\u77ed\u8def\uff0c\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\u5373\u4e3a\u9898\u76ee\u7684\u7b54\u6848\u3002\n\n### 2.\u7ec6\u8282\n\n#### \u2460\u5efa\u56fe\n\u53ef\u80fd\u6709\u4e9b\u670b\u53cb\u5df2\u7ecf\u6ce8\u610f\u5230\u4e86\uff0c\u9898\u76ee\u7684\u8d77\u70b9\u548c\u7ec8\u70b9\u4e0d\u552f\u4e00\u3002\n\n\u96be\u9053\u6211\u4eec\u8981\u8dd1\u591a\u6e90\u6700\u77ed\u8def\uff1f\u90a3\u9898\u76ee\u7684\u6570\u636e\u8303\u56f4\u663e\u7136\u662f\u4e0d\u5141\u8bb8\u7684\u3002\n\n**\u6211\u4eec\u5c31\u8981\u5f15\u5165\u4e00\u79cd\u601d\u60f3\u2014\u2014\u865a\u62df\u70b9\uff01**\n\n~~\u6211\u81ea\u5df1\u4e71\u8d77\u7684\u540d\u5b57~~\n\n\n>Bessie \u7684\u8d77\u70b9\u53ef\u4ee5\u5728\u4efb\u4e00\u9ad8\u5ea6\u4e0d\u8d85\u8fc7$1000$\u7684\u843d\u811a\u70b9\u4e0a\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6240\u6709\u7eb5\u5750\u6807\u5c0f\u4e8e\u7b49\u4e8e1000\u7684\u70b9\u90fd\u53ef\u4ee5\u4f5c\u4e3a\u8d77\u70b9\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5efa\u7acb\u4e00\u4e2a\u865a\u62df\u8d77\u70b9\uff0c\u5b83\u5230\u6240\u6709\u53ef\u4ee5\u4f5c\u4e3a\u8d77\u70b9\u7684\u70b9\u4e4b\u95f4\u90fd\u5efa\u7acb\u4e00\u6761\u8fb9\uff0c\u6743\u503c\u4e3a0\uff08\u4ee3\u8868\u4e0d\u589e\u52a0\u6b21\u6570\uff09\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4ee5\u8fd9\u4e2a\u865a\u62df\u7684\u8d77\u70b9\u4e3a\u603b\u8d77\u70b9\u8dd1\u5355\u6e90\u6700\u77ed\u8def\u5f84\u4e86\n\n**\u4f46\u8fd8\u6709\u4e2a\u95ee\u9898\uff0c\u600e\u4e48\u786e\u5b9a\u7ec8\u70b9\u5462\uff1f**\n\n>\u4e00\u65e6\u5979\u5230\u8fbe\u4e86\u4e00\u4e2a\u9ad8\u5ea6\u8ddd\u79bb $H$ \u4e0d\u5230 $1000$ \u7684\u843d\u811a\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u5230\u5899\u9876\u3002\n\n\u5f88\u5bb9\u6613\u7406\u89e3\uff0c\u5899\u9876\u5c31\u662f\u6211\u4eec\u7684\u7ec8\u70b9\uff0c\u4f46\u5e76\u4e0d\u662f\u4e00\u4e2a\u6a2a\u7eb5\u5750\u6807\u90fd\u786e\u5b9a\u7684\u70b9\u3002\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u81ea\u5df1\u628a\u5b83\u5efa\u7acb\u51fa\u6765\uff01\n\n\u6240\u6709\u7eb5\u5750\u6807\u8ddd\u79bb\u6700\u5927\u9ad8\u5ea6H\u4e0d\u52301000\u7684\u70b9\u6211\u4eec\u90fd\u8fde\u4e0a\u865a\u62df\u7ec8\u70b9\uff0c\u662f\u4e0d\u662f\u95ee\u9898\u5c31\u7b80\u5355\u4e86\uff1f\n\n#### \u2461\u8ddd\u79bb\u5904\u7406\n\n\u6211\u76f8\u4fe1\u8fd9\u4e2a\u5176\u5b9e\u4e0d\u7528\u8bf4\uff0c\u4f60\u4eec\u4e5f\u77e5\u9053\u3002\n\n\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u516c\u5f0f\uff1a\n\n$$ \\sqrt{(x_1-x_2)^2+(y_1-y_2)^2} $$\n\n#### \u2462\u6700\u77ed\u8def\n\n\u5269\u4e0b\u7684\u5c31\u662f\u6700\u77ed\u8def\u6a21\u677f\u4e86\u3002\n\n\u5173\u4e8e\u8dd1\u6700\u77ed\u8def\uff0c\u6211\u8fd8\u662f\u79c9\u6301\u6211\u4e00\u8d2f\u7684\u89c2\u70b9\uff1a\u53ea\u8981\u6ca1\u6709\u8d1f\u8fb9\u6743\uff0c\u5c31\u7528Dijkstra+\u5806\u4f18\u5316\u3002\n\n~~\u5173\u4e8eSPFA\uff0c\u5b83\u6b7b\u4e86~~\n\n### 3.\u4ee3\u7801\u5b9e\u73b0\n\n\u6211\u4eec\u524d\u9762\u4e00\u76f4\u53ea\u662f\u7eb8\u4e0a\u8c08\u5175\uff0c\u90a3\u5173\u952e\u7684\u64cd\u4f5c\u5982\u4f55\u5b9e\u73b0\u5462\uff1f\n\n\u5f88\u591a\u670b\u53cb\u6700\u77ed\u8def\u76f8\u5173\u95ee\u9898\uff0c\u70b9\u548c\u8fb9\u7684\u4e0b\u6807\u90fd\u662f\u4ece1\u5f00\u59cb\u7684\u3002\u90a3\u4e48\u6211\u4eec\u6b63\u597d\u53ef\u4ee5\u628a0\u4f5c\u4e3a\u865a\u62df\u8d77\u70b9\uff0c\u628a`f+1`\u4f5c\u4e3a\u865a\u62df\u7ec8\u70b9\u3002\u4e5f\u5f88\u597d\u7406\u89e3\u4e0d\u662f\u5417\uff1f\n\n\u5f53\u7136\u4e5f\u6709\u670b\u53cb\u4e0b\u6807\u4ece0\u5f00\u59cb\uff0c\u5176\u5b9e\u628a`f+1`\u4f5c\u4e3a\u865a\u62df\u8d77\u70b9\uff0c\u628a`f+2`\u4f5c\u4e3a\u865a\u62df\u7ec8\u70b9\uff0c\u4e5f\u5b8c\u5168OK\u3002\n\n\n\u5177\u4f53\u8bf7\u89c1\u4ee3\u7801\u6ce8\u91ca\u3002\n\n```cpp\n#include<cmath>\n#include<cstdio>\n#include<queue>\n#include<algorithm>\n#include<vector>\n#define pii pair<int,int>//\u5b8f\u5b9a\u4e49\uff0c\u4e2a\u4eba\u4e60\u60ef\nusing namespace std;\nstruct Node\n{\n    int head,dis;\n    double x,y;\n    //\u6a2a\u5750\u6807\u548c\u7eb5\u5750\u6807\n}node[10005];\nstruct Edge\n{\n    int next,to,len;\n}edge[99990005];\nint h,f;\n//\u4e0e\u9898\u76ee\u610f\u4e49\u76f8\u540c\nbool cmp(Node a,Node b)\n{\n    if(a.y==b.y)return a.x<b.x;\n    return a.y<b.y;\n}\n//\u6392\u5e8f\u51fd\u6570\uff0c\u65b9\u4fbf\u5bf9\u70b9\u8fdb\u884c\u5904\u7406\ndouble calc(double x_1,double y_1,double x_2,double y_2)\n{\n    return double(sqrt((x_1-x_2)*(x_1-x_2)+(y_1-y_2)*(y_1-y_2)));\n}\n//\u6c42\u8ddd\u79bb\nint cnt;\nvoid addEdge(int u,int v,int w)\n{\n    edge[++cnt].len=w;\n    edge[cnt].next=node[u].head;\n    edge[cnt].to=v;\n    node[u].head=cnt;\n}\n//\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u56fe\nvoid Dijkstra()\n{\n    for(int i=0;i<=f+1;i++) node[i].dis=0x3f3f3f3f;\n    //\u522b\u5fd8\u4e86\u521d\u59cb\u5316\n    priority_queue<pii,vector<pii>,greater<pii> >q;\n    //STL\u5c0f\u6839\u5806\n    node[0].dis=0;\n    q.push({0,0});\n    while(q.size())\n    {\n        pii tmp=q.top();\n        q.pop();\n        int d=tmp.first,u=tmp.second;\n        if(d!=node[u].dis)continue;\n        for(int e=node[u].head;e;e=edge[e].next)\n        {\n            int v=edge[e].to;\n            if(node[v].dis>d+edge[e].len)\n            {\n                node[v].dis=d+edge[e].len;\n                q.push({node[v].dis,v});\n            }\n        }\n    }\n}\n//\u6a21\u677f\nint main()\n{\n    scanf(\"%d%d\",&h,&f);\n    for(int i=1;i<=f;i++)\n    {\n        scanf(\"%lf%lf\",&node[i].x,&node[i].y);\n    }\n    sort(node+1,node+f+1,cmp);\n    //\u6392\u5e8f\n    for(int i=1;i<=f;i++)\n    {\n        for(int j=i+1;j<=f;j++)\n        {\n            double dist=calc(node[i].x,node[i].y,node[j].x,node[j].y);\n            //\u6c42\u5f97\u8ddd\u79bb\n            if(dist<=1000)\n            {\n                //\u5982\u679c\u4e24\u4e2a\u70b9\u95f4\u7684\u8ddd\u79bb\u4e0d\u8d85\u8fc71000,\n                //\u5c31\u53ef\u4ee5\u76f4\u63a5\u5230\u8fbe\n                //\u5efa\u7acb\u6743\u503c\u4e3a1\u7684\u8fb9\n                //\u8868\u793a\u722c\u4e00\u6b21\n                addEdge(i,j,1);\n                addEdge(j,i,1);\n            }\n        }\n        if(h-node[i].y<1000)\n        {\n            //\u4e0e\u6700\u5927\u8ddd\u79bbH\u4e0d\u52301000\u7684\u70b9\u53ef\u4ee5\u76f4\u63a5\u5230\u8fbe\u7ec8\u70b9\n            //\u90a3\u4e48\u5c31\u4e0e\u865a\u62df\u7ec8\u70b9\u8fde\u4e00\u6761\u8fb9\n            addEdge(i,f+1,1);\n            addEdge(f+1,i,1);\n            //\u865a\u62df\u7ec8\u70b9\u5c31\u662ff+1\n        }\n        if(node[i].y<=1000)\n        {\n            //\u4e0e\u5730\u9762\u8ddd\u79bb\u4e0d\u8d85\u8fc71000\u7684\u70b9\u53ef\u4ee5\u4f5c\u4e3a\u8d77\u70b9\n            //\u90a3\u4e48\u5c31\u4e0e\u865a\u62df\u8d77\u70b9\u8fde\u4e00\u6761\u8fb9\n            addEdge(0,i,0);\n            addEdge(i,0,0);\n            //\u865a\u62df\u8d77\u70b9\u5c31\u662f0\n        }\n    }\n    Dijkstra();\n    printf(\"%d\\n\",node[f+1].dis);\n    //\u8fd9\u91cc\u6ce8\u610f\u8f93\u51fa\u7684\u662f\u865a\u62df\u7ec8\u70b9\u7684\u8ddd\u79bb\n    return 0;\n}\n```\n\u90a3\u4e48\uff0c\u9898\u89e3\u5230\u8fd9\u91cc\u5c31\u7ed3\u675f\u4e86\uff01\n\n\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u5e0c\u671b\u5927\u5bb6\u591a\u591a\u652f\u6301\u3002\u5982\u679c\u8fd8\u6709\u4e0d\u61c2\u7684\u53ef\u4ee5at\u6211\u6216\u8005\u79c1\u4fe1\u6211\uff0c\u6211\u4f1a\u5c3d\u529b\u5e2e\u52a9\u7684\uff01\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
        "postTime": 1585632970,
        "uid": 203102,
        "name": "Diamiko",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P6245 \u3010[USACO06OPEN]The Climbing Wall S\u3011"
    },
    {
        "content": "### P6245 The Climbing Wall S \u9898\u89e3\n\n###### \u9898\u76ee\u65b9\u6cd5\n\n\u76f4\u63a5 BFS \u7206\u641c\u3002\n\n###### \u601d\u8def\n\n\u5148\u627e\u51fa $ y \\le 1000 $ \u7684\u843d\u811a\u70b9\uff0c\u5c06\u8fd9\u4e2a\u843d\u811a\u70b9\u7684\u4f4d\u7f6e\u5b58\u5165\u961f\u5217\u4e2d\uff0c\u63a5\u7740\u5957\u5165 BFS \u7684\u6a21\u677f\uff0c\u5224\u65ad\u5f53\u524d\u7684\u843d\u811a\u70b9\u662f\u5426\u53ef\u4ee5\u8d70\u5230\u7b2c $ i $ \u4e2a\u843d\u811a\u70b9\uff0c\u82e5\u53ef\u4ee5\u5219\u7ee7\u7eed\u5b58\u5165\u961f\u5217\u4e2d\uff08\u8be6\u89c1\u4ee3\u7801\u6ce8\u91ca\uff09\u3002\n\n###### \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<fstream>\n#include<algorithm>\n#include<queue>\n#include<cmath>\nusing namespace std;\nqueue<int>a,b,c;//a\u5b58x\u5750\u6807 b\u5b58y\u5750\u6807 c\u5b58\u6b65\u6570\nint ans,f,h;\nint x[10010],y[10010],d[10010];\nvoid bfs()\n{\n\tint wx,wy,wz;\n\twhile(!a.empty())\n\t{\n\t\twx=a.front();\n\t\ta.pop();\t\n\t\twy=b.front();\n\t\tb.pop();\t\n\t\twz=c.front();\n\t\tc.pop();\t//\u53d6\u51fax\u5750\u6807 y\u5750\u6807 \u6b65\u6570\n\t\tfor(int i=1;i<=f;i++)\n\t\t{\n\t\t\tif(d[i])\n\t\t\t\tcontinue;//\u5982\u679c\u5df2\u7ecf\u8d70\u8fc7\u5219\u4e0d\u518d\u8d70\n\t\t\tdouble dx=abs(wx-x[i]),dy=abs(wy-y[i]);\n\t\t\tdouble p=sqrt(dx*dx+dy*dy);//\u6c42\u51fa\u8ddd\u79bb\n\t\t\tif(p>1000)\n\t\t\t\tcontinue;//\u5982\u679c\u8ddd\u79bb\u5927\u4e8e1000\u5219\u4e0d\u80fd\u8d70\u8fd9\u4e2a\u843d\u811a\u70b9\n\t\t\tif(y[i]>=h-1000)\n\t\t\t{\n\t\t\t\tans=wz+1;\n\t\t\t\treturn ;\n\t\t\t}//\u5982\u679c\u80fd\u76f4\u63a5\u5230\u8fbe\u5899\u9876\u5219\u627e\u5230\u4e86\u7b54\u6848 \u9000\u51faBFS\n\t\t\td[i]=1;//\u6807\u8bb0\u8fd9\u4e2a\u843d\u811a\u70b9\u5df2\u7ecf\u8d70\u8fc7\n\t\t\ta.push(x[i]);\t\n\t\t\tb.push(y[i]);\n\t\t\tc.push(wz+1);//\u5b58\u5165\u65b0\u7684\u843d\u811a\u70b9\u7684x\u5750\u6807 y\u5750\u6807 \u6b65\u6570\n\t\t}\n\t}\n}\nint main()\n{\n     cin>>h>>f;\n\t for(int i=1;i<=f;i++)\n\t {\n\t\t cin>>x[i]>>y[i];\n\t\t if(y[i]<=1000)\n\t\t\t a.push(x[i]),b.push(y[i]),c.push(1);//\u5c06\u7b26\u5408\u9898\u610f\u7684\u843d\u811a\u70b9\u5b58\u5165\u961f\u5217\u4e2d\n\t }\n\t bfs();\n\t cout<<ans;\n    return 0;\n}\n```\n\n",
        "postTime": 1637999399,
        "uid": 347664,
        "name": "\u83f2\u65af\u65af\u592b\u65af\u57fa",
        "ccfLevel": 5,
        "title": "P6245 \u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6245)\n## \u9898\u76ee\u5206\u6790\n\n\u53ef\u4ee5\u5f88\u5bb9\u6613\u4ece\u9898\u76ee\u4e2d\u770b\u51fa\u6700\u77ed\u8def\u505a\u6cd5\u3002\u4f46\u662f\u95ee\u9898\u662f\uff0c\u4e0d\u4ec5\u8d77\u59cb\u70b9\u4e0d\u552f\u4e00\uff0c\u7ec8\u70b9\u4e5f\u4e0d\u552f\u4e00\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u795e\u5947\u7684\u4e1c\u897f\uff1a\u865a\u62df\u70b9\u3002\u5177\u4f53\u6765\u8bb2\u5c31\u662f\u628a\u6240\u6709\u53ef\u80fd\u7684\u8d77\u59cb\u70b9\u548c\u4e00\u4e2a\u53e6\u5916\u7684\u7279\u522b\u70b9\u8fde\u8d77\u6765\uff08\u5047\u8bbe\u90a3\u4e2a\u70b9\u5728 $(0,0)$\uff0c\u4e5f\u5c31\u662f Bessie \u7684\u6240\u5728\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u4ee4\u5176\u7f16\u53f7\u4e3a $n+1$\uff09\uff0c\u7136\u540e\u5c06\u6240\u6709\u53ef\u80fd\u7684\u7ec8\u70b9\u548c\u518d\u53e6\u5916\u7684\u4e00\u4e2a\u65b0\u70b9\u8fde\u8d77\u6765\uff08\u4ee4\u5176\u7f16\u53f7\u4e3a $n+2$\uff09\uff0c\u7136\u540e\u8dd1 Dijkstra \u6c42 $n+1$ \u53f7\u70b9\u5230 $n+2$ \u53f7\u70b9\u7684\u6700\u77ed\u8def\u5373\u53ef\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include<iostream>\n#include<cmath>\n#include<queue>\n//n+2:end\n//n+1:start\nusing namespace std;\ntypedef long long ll;\nstruct edge{\n\tll v,w;\n};\nvector<edge> g[200005];\nstruct node{\n\tll u,dis;\n\tbool operator <(const node &n) const{\n\t\treturn dis>n.dis;\n\t}\n};\nstruct stopover{\n\tll x,y;\n}p[200005];\nll n,h,dis[200005];\nbool vis[200005];\ninline void Dijkstra(ll s){\n\tpriority_queue<node> q;\n\tfor(ll i=1;i<=n+2;++i){\n\t\tvis[i]=false;\n\t\tdis[i]=0x3f3f3f3f;\n\t}\n\tdis[s]=0;\n\tq.push((node){s,dis[s]});\n\twhile(!q.empty()){\n\t\tnode no=q.top();\n\t\tq.pop();\n\t\tll u=no.u,d=no.dis;\n\t\tif(vis[u]) continue;\n\t\tvis[u]=true;\n\t\tfor(ll j=0;j<(ll)g[u].size();++j){\n\t\t\tll v=g[u][j].v;\n\t\t\tll w=g[u][j].w;\n\t\t\tif(dis[v]>dis[u]+w){\n\t\t\t\tdis[v]=dis[u]+w;\n\t\t\t\tq.push((node){v,dis[v]});\n\t\t\t}\n\t\t}\n\t}\n}\ninline double dist(const stopover &a,const stopover &b){\n\treturn sqrt((a.x-b.x)*(a.x-b.x)+(a.y-b.y)*(a.y-b.y));\n}\nint main(){\n\tcin>>h>>n;\n\tfor(int i=1;i<=n;++i) cin>>p[i].x>>p[i].y;\n\tfor(int i=1;i<=n;++i){\n\t\tfor(int j=i+1;j<=n;++j){\n\t\t\tdouble d=dist(p[i],p[j]);\n\t\t\tif(d<=1000){\n\t\t\t\tg[i].push_back((edge){j,1});\n\t\t\t\tg[j].push_back((edge){i,1});\n\t\t\t}\n\t\t}\n\t\tif(p[i].y<=1000){//\u548c\u865a\u62df\u8d77\u70b9\u8fde\u8fb9\n\t\t\tg[i].push_back((edge){n+1,0});\n\t\t\tg[n+1].push_back((edge){i,0});\n\t\t}\n\t\tif(h-p[i].y<1000){//\u548c\u865a\u62df\u7ec8\u70b9\u8fde\u8fb9\n\t\t\tg[i].push_back((edge){n+2,1});\n\t\t\tg[n+2].push_back((edge){i,1});\n\t\t}\n\t}\n\tDijkstra(n+1);\n\tcout<<dis[n+2]<<endl;\n\treturn 0;\n}\n```\n\n## \u5199\u5728\u6700\u540e\n\n\u5e0c\u671b\u5927\u5bb6\u9605\u8bfb\u5b8c\u8fd9\u7bc7\u9898\u89e3\u4e4b\u540e\u80fd\u6709\u6240\u6536\u83b7\uff0c\u540c\u65f6\u4e0d\u8981\u5fd8\u4e86\u8f7b\u8f7b\u5730\u70b9\u4e00\u4e2a\u8d5e\uff01",
        "postTime": 1657625588,
        "uid": 324350,
        "name": "xiaomuyun",
        "ccfLevel": 5,
        "title": "P6245 [USACO06OPEN]The Climbing Wall S \u9898\u89e3"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.com.cn/problem/P6245)\n\n[\u535a\u5ba2\u98df\u7528](https://blog.csdn.net/yhhy666/article/details/109267214)\n\n/*\u4e00\u65e6\u5979\u5230\u8fbe\u4e86\u4e00\u4e2a\u9ad8\u5ea6\u8ddd\u79bb H\u4e0d\u5230 1000\u7684\u843d\u811a\u70b9\uff0c\u53ef\u4ee5\u76f4\u63a5\u5230\u5899\u9876\u3002Bessie \u7684\u8d77\u70b9\u53ef\u4ee5\u5728\u4efb\u4e00\u9ad8\u5ea6\u4e0d\u8d85\u8fc7 1000 \u7684\u843d\u811a\u70b9\u4e0a\u3002\u95eeBessi\u722c\u5230\u9876\u7aef\u7684\u6700\u5c11\u6b21\u6570\u3002*/\n\n# \u601d\u8def\n\u9898\u76ee\u4e2d\u8bf4\u8981<=1000\u624d\u80fd\u767b\u9876\uff0c\u6216\u8005\u624d\u80fd\u5f00\u59cb\u4f5c\u4e3a\u8d77\u59cb\u5730\u70b9\u8fdb\u884c\u6500\u722c\uff0c\u56e0\u4e3a\u627e\u8d77\u59cb\u70b9\u548c\u767b\u4e0a\u7684\u7ec8\u70b9\u5f88\u96be\uff0c\u4e5f\u4e0d\u77e5\u9053\u600e\u4e48\u627e\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5**\u5efa\u7acb\u4e24\u4e2a\u865a\u62df\u70b9**\uff0c**\u4e00\u4e2a\u662f\u8d77\u59cb\u70b9**\uff0c**\u4e00\u4e2a\u662f\u7ec8\u70b9**\uff0c\u7136\u540e\u5f00\u59cb\u5efa\u7acb\u8fb9\u5206\u4e24\u79cd\u60c5\u51b5\n\n\n## \u70b9\u4e0e\u70b9\u4e4b\u95f4\u7684\u5efa\u8fb9\n1.\u6500\u5ca9\u70b9\u548c\u6500\u5ca9\u70b9\u4e4b\u95f4\u7684\u8fb9\uff0c\u5148\u7ed9\u4e24\u4e2a\u70b9\u8fdb\u884c\u6c42\u89e3\n\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\u7136\u540e\u5224\u65ad\u8ddd\u79bb\u662f\u4e0d\u662f<=1000,\u5982\u679c\u8ddd\u79bb\u6ee1\u8db3\uff0c\u90a3\u4e48\u53ef\u4ee5\u5728\u4e24\u4e2a\u4e4b\u95f4\u8fdb\u884c\u5efa\u8fb9\n\n\n## \u70b9\u4e0e\u7ec8\u70b9\u8d77\u70b9\u7684\u5efa\u8fb9\n2.\u8003\u8651\u7ec8\u70b9\u548c\u5f00\u59cb\u70b9\u7684\u5efa\u8fb9\uff0c\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u7eb5\u5750\u6807<=1000\u90a3\u4e48\u53ef\u4ee5\u548c\u8d77\u59cb\u70b9\u5efa\u8fb9\uff0c\u5982\u679c\u8fd9\u4e2a\u70b9\u8ddd\u79bb\u6700\u9ad8\u7684\u5730\u65b9\u7684\u5dee\u503c<=1000,\uff0c\u90a3\u4e48\u53ef\u4ee5\u548c\u7ec8\u70b9\u5efa\u8fb9\n\n## \u8ba1\u7b97\u7b54\u6848\n3.\u7136\u540e\u5c31\u53ef\u4ee5SPFA/\u8fea\u6770\u65af\u7279\u62c9\u4e86\n\n\n## \u8f93\u51fa\u7b54\u6848\n4.\u6700\u540e\u8f93\u51fadis[n]-1\u5c31\u597d\uff0c\u56e0\u4e3a\u6700\u540e\u4e00\u6b65\u4e0d\u9700\u8981\u6b65\u6570\n```cpp\nvoid Dijkstra()\n{\n   //\u8fea\u6770\u65af\u7279\u62c9\u5806\u4f18\u5316\u7684\u6a21\u677f\n    for(int i=0;i<=f+1;i++) node[i].dis=0x3f3f3f3f;\n    //\u522b\u5fd8\u4e86\u521d\u59cb\u5316\n    priority_queue<pii,vector<pii>,greater<pii> >q;\n    //STL\u5c0f\u6839\u5806\n    node[0].dis=0;\n    q.push({0,0});\n    while(q.size())\n    {\n        pii tmp=q.top();\n        q.pop();\n        int d=tmp.first,u=tmp.second;\n        if(d!=node[u].dis)continue;\n        for(int e=node[u].head;e;e=edge[e].next)\n        {\n            int v=edge[e].to;\n            if(node[v].dis>d+edge[e].len)\n            {\n                node[v].dis=d+edge[e].len;\n                q.push({node[v].dis,v});\n            }\n        }\n    }\n```\n\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 10010\nusing namespace std;\nint head[maxn*100],tot,vis[maxn];\nint n,m;\nstruct make\n{\n\tint to;\n\tint ne;\n}edge[maxn*100];\ninline void add(int x,int y)\n{\n\tedge[++tot].to=y;\n\tedge[tot].ne=head[x];\n\thead[x]=tot;\n}\ninline int read()//\u8bfb\u5165\u4f18\u5316\n{\n\tint res=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)){if(ch=='-')f=-f;ch=getchar();}\n\twhile(isdigit(ch)){res=(res<<1)+(res<<3)+(ch&15);ch=getchar();}\n    return res*f;\n}\nint ans[maxn];\nstruct node\n{\n\tdouble x;\n\tdouble y;\n}a[maxn];\ninline double getans(double x1,double y1,double x2,double y2)\n{\n\treturn sqrt(  (x1-x2)*(x1-x2)  +   (y1-y2)*(y1-y2));//\u8ba1\u7b97\u8ddd\u79bb\uff0c\u6ce8\u610f\u8981\u7528double\n}\nqueue<int>q;\ninline void spfa()//\u6807\u51c6spfa\u6a21\u677f\uff0c\u8dd1\u4e00\u904d\u6700\u77ed\u8def\n{\n\tfor(int i=1;i<=n;i++)ans[i]=0x7fffffff/3;\n\tans[1]=0;vis[1]=1;\n    q.push(1);\n    while(!q.empty())\n    {\n    \tint k=q.front();q.pop();\n    \tvis[k]=0;\n    \tfor(int i=head[k];i;i=edge[i].ne)\n    \t{\n    \t\tint t=edge[i].to;\n    \t\tif(ans[t]>ans[k]+1)\n    \t\t{\n    \t\t\tans[t]=ans[k]+1;\n    \t\t\tif(!vis[t])\n    \t\t\t{\n    \t\t\t\tvis[t]=1;\n    \t\t\t\tq.push(t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tm=read();n=read();\n\tfor(int i=1;i<=n;i++)cin>>a[i+1].x>>a[i+1].y;\n\tn++;\n\tfor(int i=2;i<=n;i++)//\u666e\u901a\u6500\u5ca9\u70b9\u7684\u5efa\u8fb9\n\t{\n\t   if(a[i].y<=1000)add(i,1),add(1,i);//\u8d77\u59cb\u70b9\n\t   if(a[i].y+1000>=m)add(i,n+1),add(n+1,i);//\u7ec8\u70b9\n\t   for(int j=2;j<=n;j++)\n\t   {\n\t   if(getans(a[i].x,a[i].y,a[j].x,a[j].y)<=1000)add(i,j);\t\n\t   }\t\n\t}\n    n++;\n    /*for(int i=1;i<=n;i++)\n    {\n       for(int j=head[i];j;j=edge[j].ne)\n       cout<<edge[j].to<<' ';\n       cout<<endl;\n\t}*/\n\tspfa();\n//\tfor(int i=1;i<=n;i++)cout<<ans[i]<<' ';\n\tcout<<ans[n]-1;\n\treturn 0;\n}\n\n\n```\n",
        "postTime": 1603687951,
        "uid": 42760,
        "name": "\u22b1\u22db\u8d6b\u5b87\u22da\u22b0",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P6245 \u3010[USACO06OPEN]The Climbing Wall S\u3011"
    },
    {
        "content": "\u88f8\u9898\uff0c\u76f4\u63a5\u4e00\u4e2a\u7206\u641c+ $ spfa $\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u6ca1\u6d4b\u8fc7\u4f46\u662f~~\u597d\u50cf$ bzoj $\u80fd\u8fc7~~\n\n~~\u6211\u662f\u4e0d\u4f1a\u544a\u8bc9\u4f60\u8fd9\u9898 $ luogu $\u53ea\u67091 $s $\u7684\u65f6\u9650\u7684~~\n\n\u9996\u5148\u5efa\u4e2a\u8fb9\uff1a\n\n```cpp\nvoid addedge(int u,int v.,int w)\n{\n  edge[++cnt].next=head[u];\n  edge[++cnt].to=v;\n  edge[++cnt].dis=w;\n  head[u]=cnt; \n}\n```\n\n\u7136\u540e\u8dd1\u4e2a\u88f8\u7684\u6700\u77ed\u8def\uff1a\n\n```cpp\n  queue<int> Q;\n\tint i, now;\n\tmemset(visit, false, sizeof(visit));\n\tfor (i = 1; i <= n; i++)\n\t\tdist[i] = INF;\n\tdist[start] = 0;\n\tQ.push(start);\n\tvisit[start]= true;\n\twhile (!Q.empty())\n\t{\n\t\tnow = Q.front();\n\t\tQ.pop();\n\t\tvisit[now] = false;\n\n\t\tfor (i = head[now]; i; i=edge[i].next)\n\t\t{\n\t\t\tif (dist[edge[i].to] > dist[now] + edge[i].dis)\n\t\t\t{\n\t\t\t\tdist[edge[i].to] = dist[now] + edge[i].dis;\n\t\t\t\tif (visit[edge[i].to] == 0)\n\t\t\t\t{\n\t\t\t\t\tQ.push(edge[i].to);\n\t                visit[edge[i].to] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n\n\n\u7136\u540e\u5efa\u4e2a\u865a\u62df\u6e90\u70b9\u5c31\u53ef\u4ee5\u8dd1\u8fc7\u4e86\u5427\uff08\n\n\u6ce8\u610f\u8fb9\u6743\u8981\u7528\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff08~~\u597d\u9ad8\u6df1\u7684\u6837\u5b50\u62d6\u51fa\u53bb\u6b27\u62c9\u4e00\u987f~~\uff09\n",
        "postTime": 1585325488,
        "uid": 320290,
        "name": "Instudy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6245 \u3010[USACO06OPEN]The Climbing Wall S\u3011"
    },
    {
        "content": "[\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.luogu.com.cn/blog/jasonying/p6245-the-climbing-wall-s) [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6245)\n\n---\n\n### \u9898\u76ee\u5206\u6790\n\n\u53ef\u4ee5\u770b\u4f5c\u4e00\u5f20 $01$ \u6743\u65e0\u5411\u56fe\uff0c\u7ed3\u70b9\u662f\u843d\u811a\u70b9\uff0c\u53ea\u8981\u4e24\u4e2a\u843d\u811a\u70b9\u7684\u8ddd\u79bb\u4e0d\u5927\u4e8e $1000$ \u5c31\u8fde\u4e00\u6761\u8fb9\u3002\n\n\u5bf9\u4e8e\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u5904\u7406\uff0c\u53ef\u4ee5\u4f7f\u7528 **\u865a\u62df\u7ed3\u70b9** \u8fdb\u884c\u5904\u7406\uff0c\u5373\u4eba\u4e3a\u751f\u6210\u4e00\u4e2a\u672c\u6765\u4e0d\u5b58\u5728\u7684\u7ed3\u70b9\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u7528 Dijkstra \u6c42\u5355\u6e90\u6700\u77ed\u8def\u4e86\u3002\n\n---\n\n\u63a5\u4e0b\u6765\u7ed3\u5408\u6837\u4f8b\u8fdb\u884c\u8be6\u7ec6\u5206\u6790\u3002\n\n```\n\u6837\u4f8b\u8f93\u5165\uff1a\n\n3000 5\n\n600 800\n\n1600 1800\n\n100 1300\n\n300 2100\n\n1600 2300\n\n\u6837\u4f8b\u8f93\u51fa\uff1a\n\n3\n\n```\n\n#### Step1. \u5efa\u56fe\n\n- \u5bf9\u4e8e\u8ddd\u79bb $\\le1000$ \u7684\u4e24\u4e2a\u70b9\uff0c\u8fde\u4e00\u6761\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u4ee3\u8868\u7ecf\u8fc7\u8fd9\u4e00\u6761\u8fb9\u6b21\u6570\u52a0\u4e00\u3002\n\n![](https://i.loli.net/2020/08/09/x84Ud2MGwq9zrsf.png)\n\n- \u5904\u7406\u8d77\u70b9\u3002\u751f\u6210\u7f16\u53f7\u4e3a $0$ \u7684\u865a\u62df\u7ed3\u70b9\uff0c\u8fde\u63a5\u6240\u6709 $y_i\\le1000$ \u7684\u7ed3\u70b9\uff0c\u5373 $1$ \u53f7\u7ed3\u70b9\u3002\u6ce8\u610f\u8fb9\u6743\u4e3a $0$ \uff0c\u4ee3\u8868\u4e0d\u9700\u8981\u8ba1\u7b97\u6b21\u6570\u3002\n\n![](https://i.loli.net/2020/08/09/SCKrUERIndYP28J.png)\n\n- \u5904\u7406\u7ec8\u70b9\u3002\u751f\u6210\u7f16\u53f7\u4e3a $f+1$ \u7684\u865a\u62df\u7ed3\u70b9\uff0c\u8fde\u63a5\u6240\u6709 $h-y_i\\le1000$ \u7684\u7ed3\u70b9\uff0c\u5373 $4$ \u53f7\u7ed3\u70b9\u548c $5$ \u53f7\u7ed3\u70b9\u3002\n\n![](https://i.loli.net/2020/08/09/FPAIcVGTMoRhzdn.png)\n\n\u6c42\u4ece $0$ \u53f7\u7ed3\u70b9\u5230 $f+1$ \u53f7\u7ed3\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\uff0c\u53ef\u5f97\u7b54\u6848 $3$\u3002\n\n#### Step2. \u6c42\u6700\u77ed\u8def\n\n\u4f7f\u7528\u6734\u7d20\u7248 Dijkstra \u7b97\u6cd5\uff0c\u51e0\u4e4e\u5c31\u662f\u6a21\u677f\u4ee3\u7801\u3002\n\n### \u4f18\u5316\n\n\u4e3a\u4e86\u7f29\u77ed\u4ee3\u7801\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u628a\u8fd9\u4e2a\u95ee\u9898\u7b80\u5316\u4e3a\u65e0\u6743\u65e0\u5411\u56fe\u3002\u56e0\u4e3a\u4e00\u5b9a\u8981\u4ece\u865a\u62df\u8d77\u70b9\u5f00\u59cb\uff0c\u53ef\u4ee5\u5c06\u865a\u62df\u8d77\u70b9\u4e3a\u7aef\u70b9\u7684\u8fb9\u6743\u8bbe\u4e3a $1$\uff0c\u8f93\u51fa\u7b54\u6848\u65f6 $-1$ \u5373\u53ef\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define N 100009\n#define INF 0x3f3f3f3f\nusing namespace std;\nvector<int> to[N];\nint h,f,d[N];\nstruct pnt{\n    double x,y;\n}p[N];//\u5b9a\u4e49\u7ed3\u6784\u4f53\uff0c\u4fdd\u5b58\u6bcf\u4e2a\u70b9\u7684x,y\u5750\u6807\ndouble dist(int a,int b){\n    return sqrt((p[a].x-p[b].x)*(p[a].x-p[b].x)+(p[a].y-p[b].y)*(p[a].y-p[b].y));\n}//\u6c42\u4e24\u70b9\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\nvoid add(int u,int v){\n    to[u].push_back(v);\n    to[v].push_back(u);\n}//\u5efa\u65e0\u5411\u65e0\u6743\u8fb9\nvoid build(){\n    for(int u=1;u<=f;u++){\n        for(int v=u+1;v<=f;v++){\n            if(dist(u,v)<=1000)add(u,v);//\u5982\u679c\u4e24\u70b9\u8ddd\u79bb\u4e0d\u5927\u4e8e1000\u5219\u5efa\u8fb9\n        }\n        if(h-p[u].y<1000)add(u,f+1);//\u865a\u62df\u7ec8\u70b9\u5efa\u8fb9\uff0c\u4ee3\u8868\u53ef\u4ee5\u4e00\u6b65\u8d70\u5230\u7ec8\u70b9\n        if(p[u].y<=1000)add(0,u);//\u865a\u62df\u8d77\u70b9\u5efa\u8fb9\uff0c\u4ee3\u8868\u8d77\u70b9\n    }\n}\nvoid Dijkstra(){\n    fill(d,d+f+9,INF);\n    queue<int> q;\n    d[0]=0;\n    q.push(0);\n    while(!q.empty()){\n        int u=q.front(); q.pop();\n        for(int i=0;i<to[u].size();i++){\n            int v=to[u][i];\n            if(d[v]>d[u]+1){\n                d[v]=d[u]+1;\n                q.push(v);\n            }\n        }\n    }\n}//\u6734\u7d20\u7248Dijkstra\u6a21\u677f\u4ee3\u7801\nint main(){\n    cin>>h>>f;\n    for(int i=1;i<=f;i++)cin>>p[i].x>>p[i].y;//\u4fdd\u5b58\u6bcf\u4e2a\u7ed3\u70b9\u7684\u5177\u4f53\u4fe1\u606f\n    build();//\u5efa\u56fe\n    Dijkstra();\n    cout<<d[f+1]-1<<endl;//\u8bb0\u5f97-1\n    return 0;\n}\n```\n\n### \u7ed3\u8bed\n\n\u4e3b\u8981\u8003\u5bdf\u201c\u865a\u62df\u7ed3\u70b9\u201d\u7684\u8fd0\u7528\uff0c\u505a\u5b8c\u6b64\u9898\u5efa\u8bae\u7ee7\u7eed\u5c1d\u8bd5\u5176\u4ed6\u56fe\u8bba\u9898\u76ee\u3002",
        "postTime": 1596942277,
        "uid": 290524,
        "name": "Jasonying",
        "ccfLevel": 5,
        "title": "P6245 [USACO06OPEN]The Climbing Wall S"
    }
]