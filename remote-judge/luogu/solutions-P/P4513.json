[
    {
        "content": "\u6211\u4eec\u77e5\u9053\uff0c\u6c42\u4e00\u6bb5\u5e8f\u5217\u7684\u6700\u5927\u5b50\u6bb5\u548c\u662fO\uff08n\uff09\u7684\uff0c\u4f46\u662f\u8fd9\u6837\u662f\u663e\u7136\u4f1a\u8d85\u65f6\u7684\u3002\n\n\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u6765\u652f\u6301\u4fee\u6539\u548c\u8ba1\u7b97\u7684\u64cd\u4f5c\uff0c\u5bf9\u4e8e\u8fd9\u79cd\u4fee\u6539\u4e00\u4e2a\u800c\u67e5\u8be2\u533a\u95f4\u7684\u95ee\u9898\uff0c\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u3002\n\n\u5728\u7ebf\u6bb5\u6811\u4e2d\uff0c\u9664\u4e86\u5de6\u7aef\u70b9\uff0c\u53f3\u7aef\u70b9\uff0c\u5de6\u513f\u5b50\u6307\u9488\uff0c\u53f3\u513f\u5b50\u6307\u9488\u4e4b\u5916\uff0c\u65b0\u5f004\u4e2a\u57df\u2014\u2014max\uff0cmaxl\uff0cmaxr\uff0csum\uff0c\u5176\u4e2dsum\u4e3a\u8be5\u533a\u95f4\u7684\u548c\uff0cmax\u4e3a\u8be5\u533a\u95f4\u4e0a\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff0cmaxl\u4e3a\u5fc5\u987b\u5305\u542b\u5de6\u7aef\u70b9\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff0cmaxr\u4e3a\u5fc5\u987b\u5305\u542b\u53f3\u7aef\u70b9\u7684\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\n \u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7edf\u8ba1\u4e86\u6ce8\u610f\u6c42\u5f97\u7684\u6700\u5927\u5b50\u6bb5\u548c\u4e2d\u81f3\u5c11\u5305\u542b1\u4e2a\u5143\u7d20\uff0c\u6240\u4ee5\u51fa\u73b0\u4e86\u6837\u4f8b\u90a3\u6837\u7684\u8f93\u51fa\u8d1f\u503c\u3002\n\n## \u4fee\u6539\u65f6\uff1a\n1\u3001\u82e5\u5de6\u513f\u5b50\u7684maxr\u548c\u53f3\u513f\u5b50\u7684maxl\u90fd\u4e3a\u8d1f\uff0c\u5c31\u4ece\u4e2d\u53d6\u8f83\u5927\u7684\u4e3a\u8be5\u8282\u70b9\u7684max\uff08\u9632\u6b62\u4e00\u4e2a\u90fd\u4e0d\u53d6\uff09\uff0c\u53cd\u4e4b\u53d6\u4e8c\u8005\u4e2d\u6b63\u7684\uff08\u90fd\u6b63\u5c31\u90fd\u53d6\uff09\u3002\n\n2\u3001\u5c06\u8be5\u8282\u70b9\u7684max\u7528\u5de6\u53f3\u513f\u5b50\u7684max\u66f4\u65b0\u3002\n\n3\u3001\u8be5\u8282\u70b9\u7684maxl\u4e3a\u5de6\u513f\u5b50\u7684maxl\u4e0e\u5de6\u513f\u5b50sum\u548c\u53f3\u513f\u5b50maxl\u548c\u7684\u6700\u5927\u503c\u3002\n\n4\u3001\u8be5\u8282\u70b9\u7684maxr\u4e3a\u53f3\u513f\u5b50\u7684maxr\u4e0e\u53f3\u513f\u5b50sum\u548c\u5de6\u513f\u5b50maxr\u548c\u7684\u6700\u5927\u503c\u3002\n\n5\u3001\u8be5\u8282\u70b9\u7684sum\u4e3a\u5de6\u53f3\u513f\u5b50\u7684sum\u548c\u3002\n## \u67e5\u8be2\u65f6\uff1a\n1\u3001\u5982\u679c\u67e5\u8be2\u533a\u95f4\u8986\u76d6\u8fd9\u4e00\u8282\u70b9\uff0c\u5c06\u8be5\u8282\u70b9\u4fe1\u606f\u8fd4\u56de\u3002\n\n2\u3001\u5982\u679c\u53ea\u4e0e\u4e00\u4e2a\u513f\u5b50\u6709\u4ea4\u96c6\uff0c\u5c31\u8fd4\u56de\u5728\u90a3\u4e2a\u513f\u5b50\u4e2d\u67e5\u627e\u5230\u7684\u4fe1\u606f\u3002\n\n3\u3001\u5982\u679c\u4e0e\u4e24\u4e2a\u513f\u5b50\u90fd\u6709\u4ea4\u96c6\uff0c\u5c31\u5148\u5206\u522b\u8ba1\u7b97\u51fa\u4e24\u4e2a\u513f\u5b50\u7684\u4fe1\u606f\uff0c\u7136\u540e\u6309\u4fee\u6539\u7684\u65b9\u5f0f\u5c06\u4e24\u4e2a\u4fe1\u606f\u5408\u5e76\uff0c\u7136\u540e\u8fd4\u56de\u3002\n\n4\u3001\u6700\u540e\u8fd4\u56de\u7684max\u503c\u5373\u4e3a\u7b54\u6848\u3002\n# \u4ee3\u7801\n```\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\n#define N 500001\nstruct Node{int maxv,maxl,maxr,sumv;}T[N<<2];\ninline void pushup(Node &rt,const Node &ls,const Node &rs)\n{\n\tif(ls.maxr<0 && rs.maxl<0)\n\t  rt.maxv=max(ls.maxr,rs.maxl);\n\telse\n\t  {\n\t  \trt.maxv=0;\n\t  \tif(ls.maxr>0)\n\t  \t  rt.maxv+=ls.maxr;\n\t  \tif(rs.maxl>0)\n\t  \t  rt.maxv+=rs.maxl;\n\t  }\n\trt.maxv=max(rt.maxv,ls.maxv);\n\trt.maxv=max(rt.maxv,rs.maxv);\n\trt.maxl=max(ls.maxl,ls.sumv+rs.maxl);\n\trt.maxr=max(rs.maxr,rs.sumv+ls.maxr);\n\trt.sumv=ls.sumv+rs.sumv;\n}\nvoid buildtree(int rt,int l,int r)\n{\n\tif(l==r)\n\t  {\n\t  \tscanf(\"%d\",&T[rt].maxv);\n\t  \tT[rt].sumv=T[rt].maxl=T[rt].maxr=T[rt].maxv;\n\t  \treturn;\n\t  }\n\tint m=(l+r>>1);\n\tbuildtree(rt<<1,l,m);\n\tbuildtree(rt<<1|1,m+1,r);\n\tpushup(T[rt],T[rt<<1],T[rt<<1|1]);\n}\nvoid update(int p,int v,int rt,int l,int r)\n{\n\tif(l==r)\n\t  {\n\t  \tT[rt].sumv=T[rt].maxl=T[rt].maxr=T[rt].maxv=v;\n\t  \treturn;\n\t  }\n\tint m=(l+r>>1);\n\tif(p<=m) update(p,v,rt<<1,l,m);\n\telse update(p,v,rt<<1|1,m+1,r);\n\tpushup(T[rt],T[rt<<1],T[rt<<1|1]);\n}\nNode query(int ql,int qr,int rt,int l,int r)\n{\n\tif(ql<=l&&r<=qr) return T[rt];\n\tint m=(l+r>>1);\n\tif(ql<=m && m<qr)\n\t  {\n\t  \tNode res;\n\t  \tpushup(res,query(ql,qr,rt<<1,l,m),query(ql,qr,rt<<1|1,m+1,r));\n\t  \treturn res;\n\t  }\n\telse if(ql<=m) return query(ql,qr,rt<<1,l,m);\n\telse return query(ql,qr,rt<<1|1,m+1,r);\n}\nint n,m;\nint main()\n{\n\tint op,x,y;\n\tscanf(\"%d%d\",&n,&m);\n\tbuildtree(1,1,n);\n\tfor(;m;--m)\n\t  {\n\t  \tscanf(\"%d%d%d\",&op,&x,&y);\n\t  \tif(op==1)\n\t\t  {\n\t\t  \tif(x>y)\n\t\t  \t  swap(x,y);\n\t\t  \tprintf(\"%d\\n\",query(x,y,1,1,n).maxv);\n\t\t  }\n\t  \telse update(x,y,1,1,n);\n\t  }\n\treturn 0;\n}\n```",
        "postTime": 1525515300,
        "uid": 75446,
        "name": "Unknown_Error\u00a0",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "# \u7ebf\u6bb5\u6811\u7ecf\u5178\u4f8b\u9898\n\u8fd9\u9053\u9898\u7684\u5927\u610f\uff1a\u7ed9\u51fa\u4e00\u4e2a\u52a8\u6001\u7684\u533a\u95f4\uff0c\u4ee5\u53ca$m$\u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa\u4e00\u6bb5\u533a\u95f4 $[l,r]$\uff0c\u8981\u6c42\u51fa\u8fd9\u6bb5\u533a\u95f4\u4e2d\n**\u548c\u6700\u5927\u7684\u8fde\u7eed\u5e8f\u5217**\u3002\n\n\u770b\u5230\u8fd9\u9053\u9898\u7684\u7b2c\u4e00\u53cd\u5e94\u5c31\u662f**\u7ebf\u6bb5\u6811**\n~~\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u7684\u8bf7\u51fa\u95e8\u5de6\u8f6c\u5148\u5b66\u4e00\u4e0b~~\n\n\u4f46\u662f\u6211\u4eec\u8981\u8003\u8651\u4e00\u4e0b\u600e\u4e48\u533a\u95f4\u5408\u5e76\uff1a\n\n1. **\u9996\u5148\u5728\u7ed3\u6784\u4f53\uff08or\u5168\u5c40\uff0c\u770b\u4e2a\u4eba\u559c\u597d\uff09\u5b9a\u4e49\u5fc5\u6709\u7684\u6bcf\u4e2a\u8282\u70b9\u7684\u533a\u95f4 $l[]$ \u548c $r[]$\u3002**\n\n1. **\u5176\u6b21\uff0c\u6211\u4eec\u9700\u8981\u4e3a\u6bcf\u4e2a\u8282\u70b9\u5b9a\u4e494\u4e2a\u6570\uff1a**\n\n $maxleft$\uff0c\u4ee5**\u5de6\u7aef\u70b9\u4e3a\u5934**\u7684 \u548c\u6700\u5927\u7684\u8fde\u7eed\u5e8f\u5217\u3002\n \n $maxright$\uff0c\u4ee5**\u53f3\u7aef\u70b9\u4e3a\u5c3e**\u7684 \u548c\u6700\u5927\u7684\u8fde\u7eed\u5e8f\u5217\u3002\n \n $sum$\uff0c\u8fd9\u6bb5\u5e8f\u5217\u7684\u603b\u548c\n \n $ans$\uff0c\u8fd9\u6bb5\u5e8f\u5217\u4e2d\u7684\u6700\u5927\u7684\u8fde\u7eed\u5e8f\u5217~~\uff08\u5c31\u662f\u7b54\u6848\uff09~~\n \n3. **\u5982\u4f55\u5408\u5e76\u533a\u95f4\u5462\uff1f\uff08\u9996\u5148\u6ce8\u610f\u4e00\u70b9\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 $k$\uff0c\u90a3\u4e48\u5b83\u5de6\u53f3\u513f\u5b50\u7684\u7f16\u53f7\u5206\u522b\u4e3a $k*2$\u3001$k*2+1$\uff09**\n\n - \u9996\u5148\uff0c\u5bf9\u4e8e $sum$ \u7684\u66f4\u65b0\uff0c\u5c31\u6bd4\u8f83\u7b80\u5355\u6613\u61c2\uff1a\n \n $$sum[k]=sum[k*2]+sum[k*2+1];$$\n - \u5176\u6b21\uff0c\u5bf9\u4e8e $maxleft$ \u548c $maxright$ \u4ee5\u53ca $ans$ \u7684\u66f4\u65b0\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u753b\u4e2a\u56fe\u6765\u611f\u53d7\u4e00\u4e0b\uff1a\n \n\t\u6837\u4f8b\uff1a\n   \n   ![](https://cdn.luogu.com.cn/upload/pic/43779.png)\n        \n   \u90a3\u4e48\u5c06\u5b83\u5efa\u6210\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u5176\u4e2d\uff0c\u6211\u4eec\u5047\u8bbe\u6839\u7684\u5de6\u513f\u5b50\u548c\u53f3\u513f\u5b50\u90fd\u5df2\u7ecf\u628a $maxleft$\u3001$maxright$\u3001$sum$\u3001$ans$ \u90fd\u5df2\u8ba1\u7b97\u597d\u4e86\uff0c\u73b0\u5728\u8981\u5e72\u7684\u4e8b\u60c5\u662f\u5408\u5e76\u533a\u95f4\uff1a\n   \n   ![](https://cdn.luogu.com.cn/upload/pic/43785.png)\n        \n   \u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u60f3\u8c61\u4e00\u4e0b\uff0c\u6839\u8282\u70b9\u7684$maxleft$\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a\n   \n   ![](https://cdn.luogu.com.cn/upload/pic/43791.png)\n        \n   \u540c\u7406\uff0c$maxright$\u5e94\u8be5\u662f\u8fd9\u6837\u66f4\u65b0\u7684\uff1a\n        \n   ![](https://cdn.luogu.com.cn/upload/pic/43792.png)\n       \n   \u90a3\u4e48 $ans$ \u7684\u66f4\u65b0\u4e5f\u6bd4\u8f83\u5bb9\u6613\u7406\u89e3\uff1a\n   $$tree[k].ans=max(max(tree[k*2].ans,tree[k*2+1].ans),tree[k*2].maxright+tree[k*2+1].maxleft);$$\n       \n   \u5bf9\u4e8e \u201c$maxright[lchild]+maxleft[rchild]$\u201d \u7684\u7406\u89e3\uff0c\u4e5f\u53ef\u4ee5\u770b\u56fe\u6765\u60f3\u8c61\uff1a\n       \n   ![](https://cdn.luogu.com.cn/upload/pic/43789.png)\n       \n   \u5176\u5b9e\u5c31\u662f\u5de6\u513f\u5b50\u7684 $maxright$ \u548c\u53f3\u513f\u5b50\u7684 $maxleft$ \u76f8\u52a0\uff0c\u4e5f\u5c31\u662f **\u548c\u6700\u5927\u7684\u8fde\u7eed\u5e8f\u5217** \u8d2f\u7a7f\u4e86\u5de6\u53f3\u513f\u5b50\u3002\n       \n   **\u90a3\u4e3a\u4ec0\u4e48\u4e0d\u628a\u66f4\u65b0\u540e\u7684 $maxright$ \u548c $maxleft$ \u52a0\u5165\u5230 $tree[k].ans$ \u7684\u66f4\u65b0\u91cc\u5462\uff1f**\n       \n   \u5176\u5b9e\u5df2\u7ecf\u66f4\u65b0\u4e86\uff0c\u56e0\u4e3a $ans[lchild]$ \u548c $ans[rchild]$ \u5176\u5b9e\u5c31\u5305\u542b\u4e86\u4e0a\u9762\u8bf4\u7684 $maxright$\u3001$maxleft$ \u66f4\u65b0\u7684\u7b2c\u4e00\u79cd\u60c5\u51b5\uff0c\u5373 $tree[k*2].maxleft$\u548c$tree[k*2+1].maxright$\u3002\n       \n   \u800c $maxright[lchild]+maxleft[rchild]$ \u5df2\u7ecf\u5305\u542b\u4e86\u4e0a\u9762\u8bf4\u7684 $maxright$\u3001$maxleft$ \u66f4\u65b0\u7684\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u5373 $tree[k*2].sum+tree[k*2+1].maxleft$ \u548c $tree[k*2].maxright+tree[k*2+1].sum$\u3002\n       \n    \u6240\u4ee5\uff0c$tree[k].ans$\u5df2\u7ecf\u66f4\u65b0\u4e86 $maxleft$ \u548c $maxright$ \u7684\u6700\u4f18\u7b54\u6848\u3002\n       \n       \n1. **\u5728\u8be2\u95ee\u7684\u65f6\u5019\uff0c\u4e5f\u8981\u505a\u4e00\u6b21\u7c7b\u4f3c\u4e8e\u5408\u5e76\u533a\u95f4\u7684\u4e00\u6b21\u5bfb\u627e\u6700\u4f18\u503c\uff0c\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56de $max(tree[k*2].ans,tree[k*2+1].ans)$\uff0c\u56e0\u4e3a\u53ef\u80fd\u8be2\u95ee\u7684\u533a\u95f4\u4e0d\u5b8c\u5168\u5305\u542b\u5de6\u513f\u5b50\u6216\u53f3\u513f\u5b50\u7684\u533a\u95f4\uff08\u82e5\u5b8c\u5168\u5305\u542b\uff0c\u5219\u4e0d\u7528\u5408\u5e76\uff09\u3002**\n\n\u5177\u4f53\u7684\u5408\u5e76\u533a\u95f4\u4ee3\u7801\u5c31\u662f\u8fd9\u6837\u4e86\uff1a\n\n```cpp\nvoid putin(int k)\n{\n    tree[k].sum=tree[k*2].sum+tree[k*2+1].sum;//\u66f4\u65b0sum\n    tree[k].maxleft=max(tree[k*2].maxleft,tree[k*2].sum+tree[k*2+1].maxleft);//\u66f4\u65b0maxleft\n    tree[k].maxright=max(tree[k*2+1].maxright,tree[k*2].maxright+tree[k*2+1].sum);//\u66f4\u65b0maxright\n    tree[k].ans=max(max(tree[k*2].ans,tree[k*2+1].ans),tree[k*2].maxright+tree[k*2+1].maxleft);//\u66f4\u65b0ans\n}\n```\n\n\u90a3\u4e48\u5168\u90e8\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<cstdio>\n#include<iostream>\n\n#define N 2000001\n\nusing namespace std;\n\nint n,m;\n\nstruct Tree//\u7528\u7ed3\u6784\u4f53\u6765\u5b58\u6811\n{\n    int l,r;\n    long long maxleft,maxright,sum,ans;\n}tree[N];\n\nvoid putin(int k)//\u5408\u5e76\u533a\u95f4\u51fd\u6570\n{\n    tree[k].sum=tree[k*2].sum+tree[k*2+1].sum;\n    tree[k].maxleft=max(tree[k*2].maxleft,tree[k*2].sum+tree[k*2+1].maxleft);\n    tree[k].maxright=max(tree[k*2+1].maxright,tree[k*2].maxright+tree[k*2+1].sum);\n    tree[k].ans=max(max(tree[k*2].ans,tree[k*2+1].ans),tree[k*2].maxright+tree[k*2+1].maxleft);\n}\n\nvoid build(int l,int r,int k)//\u5efa\u6811\n{\n    tree[k].l=l;tree[k].r=r;\n    if(l==r)\n    {\n        scanf(\"%lld\",&tree[k].sum);\n        tree[k].maxleft=tree[k].maxright=tree[k].ans=tree[k].sum;//\u521d\u59cb\u5316\u65f6\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8282\u70b9\u53ea\u6709\u4e00\u4e2a\u6570\uff0cmaxleft\u3001maxright\u3001sum\u548cans\u7684\u503c\u90fd\u4e00\u6837\u3002\n        return;//\u522b\u5fd8\u4e86return\n    }\n    int mid=(l+r)/2;\n    build(l,mid,k*2);//\u9012\u5f52\u5efa\u6811\n    build(mid+1,r,k*2+1);\n    putin(k);//\u5408\u5e76\u533a\u95f4\n}\n\nTree ask(int k,int x,int y)//\u8be2\u95ee\u51fd\u6570\uff0c\u56e0\u4e3a\u6bcf\u6b21\u8fd4\u56de\u7684maxleft\u7b49\u503c\u4e0d\u4e00\u5b9a\u662f\u5de6\u53f3\u513f\u5b50\u7684\u6570\u636e\uff0c\u6240\u4ee5\u8981\u8fd4\u56de\u4e00\u4e2a\u7ed3\u6784\u4f53\n{\n    if(x<=tree[k].l&&tree[k].r<=y)\n    {\n        return tree[k];\n    }\n    int mid=(tree[k].l+tree[k].r)/2;\n    if(y<=mid) return ask(k*2,x,y);//\u5982\u679c\u8bbf\u95ee\u7684\u533a\u95f4\u5168\u5728\u5de6\u513f\u5b50\u91cc\uff0c\u76f4\u63a5return\n    else\n    {\n        if(x>mid) return ask(k*2+1,x,y);//\u5982\u679c\u8bbf\u95ee\u7684\u533a\u95f4\u5168\u5728\u53f3\u513f\u5b50\u91cc\uff0c\u4e5f\u76f4\u63a5return\n        else\n        {//\u5426\u5219\u5c31\u5de6\u53f3\u513f\u5b50\u90fd\u8bbf\u95ee\uff0c\u7136\u540e\u5408\u5e76\u533a\u95f4\n            Tree t,a=ask(k*2,x,y),b=ask(k*2+1,x,y);\n            t.maxleft=max(a.maxleft,a.sum+b.maxleft);//\u505a\u7c7b\u4f3c\u7684\u5408\u5e76\u533a\u95f4\n            t.maxright=max(b.maxright,a.maxright+b.sum);\n            t.ans=max(max(a.ans,b.ans),a.maxright+b.maxleft);\n            return t;//\u8fd4\u56de\u5408\u5e76\u540e\u7684\u533a\u95f4\n        }\n    }\n}\n\nvoid change(int k,int x,int y)//\u5355\u70b9\u4fee\u6539\n{\n    if(tree[k].l==tree[k].r)\n    {\n        tree[k].maxleft=tree[k].maxright=tree[k].ans=tree[k].sum=y;\n        return;\n    }\n    int mid=(tree[k].l+tree[k].r)/2;\n    if(x<=mid)change(k*2,x,y);//\u5224\u65ad\u76ee\u6807\u4f4d\u7f6e\n    else change(k*2+1,x,y);\n    putin(k);//\u56e0\u4e3a\u503c\u5df2\u7ecf\u6539\u53d8\u4e86\uff0c\u6240\u4ee5\u8981\u5408\u5e76\u533a\u95f4\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    build(1,n,1);\n    while(m--)\n    {\n        int choose,x,y;\n        scanf(\"%d%d%d\",&choose,&x,&y);\n        if(choose==1)\n        {\n            if(x>y)swap(x,y);//\u8fd9\u662f\u4e2a\u5751\u70b9\uff0c\u56e0\u4e3a\u9898\u76ee\u6ca1\u6709\u6ce8\u660ex<=y\uff0c\u5c31\u662f\u56e0\u4e3a\u8fd9\u4e2a\u6211\u8c03\u4e86\u534a\u5929QAQ\uff0c\u6700\u540e\u8fd8\u662f\u770b\u8ba8\u8bba\u624d\u77e5\u9053\u7684\uff0c\u611f\u8c22\u8ba8\u8bba\u7684\u5de8\u4f6c\u4eec\n            printf(\"%lld\\n\",ask(1,x,y).ans);\n        }\n        else\n        {\n            change(1,x,y);\n        }\n    }\n    return 0;\n}\n```\n\n\u6ce8\uff1a\u611f\u8c22\u6211\u6821\u5de8\u4f6c@2016gdgzoi471 \u7684\u9898\u89e3\u63d0\u4f9b\u7684\u601d\u8def\uff01",
        "postTime": 1542414372,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "[P4513 \u5c0f\u767d\u901b\u516c\u56ed](https://www.luogu.org/problemnew/show/P4513)\n\n\u5355\u70b9\u4fee\u6539\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u5f88\u663e\u7136\u662f\u4f7f\u7528\u5f88\u4fbf\u4e8e\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\uff0c\u800c\u4e14\u5728 $O(logN)$ \u65f6\u95f4\u590d\u6742\u5ea6\u5185\u80fd\u591f\u5b8c\u6210\u5355\u70b9\u4fee\u6539\u7684\u7ebf\u6bb5\u6811\u3002\u5728\u6bcf\u4e2a\u7ef4\u62a4\u533a\u95f4 $[L,R]$ \u7684\u8282\u70b9\u5185\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4ee5\u4e0b\u4fe1\u606f\uff1a\n* $s(sum):$ $[L,R]$ \u7684\u548c\n* $lm(lmax):$ \u4ece\u5de6\u7aef\u70b9 $L$ \u5f00\u59cb\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff08\u7b80\u79f0\u5de6\u5b50\u6bb5\u548c\uff09\n* $rm(rmax):$ \u4ece\u53f3\u7aef\u70b9 $R$ \u5f00\u59cb\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff08\u7b80\u79f0\u53f3\u5b50\u6bb5\u548c\uff09\n* $m(max):$ $[L,R]$ \u5185\u7684\u6700\u5927\u5b50\u6bb5\u548c\n\n\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u7ef4\u62a4\u5462\uff1f\u56e0\u4e3a\u8fd9\u6837\u8bb0\u5f55\u53ef\u4ee5\u5b8c\u7f8e\u5730\u5411\u4e0a\u66f4\u65b0\uff1a\n```cpp\ninline void update(int p)\n{\n    s(p)=s(p<<1)+s(p<<1|1);//\u8be5\u533a\u95f4\u548c\u4e3a\u5de6\u533a\u95f4\u548c+\u53f3\u533a\u95f4\u548c\n    lm(p)=max(s(p<<1)+lm(p<<1|1),lm(p<<1));//\u5de6\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c \u6216 \u5de6\u533a\u95f4\u548c+\u53f3\u533a\u95f4\u5de6\u5b50\u6bb5\u548c\n    rm(p)=max(s(p<<1|1)+rm(p<<1),rm(p<<1|1));//\u53f3\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c \u6216 \u53f3\u533a\u95f4\u548c+\u5de6\u533a\u95f4\u53f3\u5b50\u6bb5\u548c\n    m(p)=max(max(m(p<<1),m(p<<1|1)),rm(p<<1)+lm(p<<1|1));//\u5de6\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c \u6216 \u53f3\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c \u6216 \u5de6\u533a\u95f4\u53f3\u5b50\u6bb5\u548c+\u53f3\u533a\u95f4\u5de6\u5b50\u6bb5\u548c\n}\n```\n\n\u5efa\u6811\u65f6\uff0c\u53f6\u5b50\u7ed3\u70b9\u6ee1\u8db3`s(p)=lm(p)=rm(p)=m(p)=a[ll];`\uff08\u81f3\u5c11\u9009\u4e00\u4e2a\u6570\u5b57\uff09\uff1a\n```cpp\nvoid build(int p,int ll,int rr)\n{\n    l(p)=ll,r(p)=rr;\n    if(ll==rr)\n    {\n        s(p)=lm(p)=rm(p)=m(p)=a[ll];\n        return ;\n    }\n    int mid=(l(p)+r(p))>>1;\n    build(p<<1,ll,mid);\n    build(p<<1|1,mid+1,rr);\n    update(p);\n}\n```\n\n\u5355\u70b9\u4fee\u6539\u65f6\uff0c\u9012\u5f52\u5230\u5e95\u518d\u56de\u6eaf\uff1a\n```cpp\nvoid change(int p,int des,int num)//\u5c06des\u4f4d\u7f6e\u7684\u503c\u6539\u4e3anum\n{\n    if(l(p)==r(p))//\u9012\u5f52\u5230\u5e95\n    {\n        s(p)=lm(p)=rm(p)=m(p)=num;\n        return ;\n    }\n    int mid=(l(p)+r(p))>>1;\n    if(mid>=des) change(p<<1,des,num);\n    else change(p<<1|1,des,num);\n    update(p);\n}\n```\n\n\u4e0b\u9762\u662f\u67e5\u8be2\u51fd\u6570\u3002\u67e5\u8be2\u65f6\u6211\u4eec\u4e5f\u8981\u8bb0\u5f55`sum,lmax,rmax,max`\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u67e5\u8be2\u65f6\u8fd4\u56de\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ed3\u6784\u4f53\uff0c\u8be5\u7ed3\u6784\u4f53\u8bb0\u5f55\u67e5\u8be2\u533a\u95f4\u7684\u4fe1\u606f\uff0c\u5177\u4f53\u8fd9\u6837\u64cd\u4f5c\uff1a\n```cpp\nSegmentTree ask(int p,int ll,int rr)\n{\n    if(ll<=l(p)&&r(p)<=rr) return tree[p];//\u533a\u95f4\u5b8c\u5168\u8986\u76d6\uff0c\u76f4\u63a5\u8fd4\u56de\u8be5\u8282\u70b9\n    int mid=(l(p)+r(p))>>1;\n    if(rr<=mid) return ask(p<<1,ll,rr);//\u53ea\u5728\u5de6\u533a\u95f4\uff0c\u76f4\u63a5\u67e5\u8be2\u5de6\u533a\u95f4\n    else if(ll>mid) return ask(p<<1|1,ll,rr);//\u53ea\u5728\u53f3\u533a\u95f4\uff0c\u76f4\u63a5\u67e5\u8be2\u53f3\u533a\u95f4\n    else//\u5de6\u53f3\u533a\u95f4\u90fd\u6709\uff0c\u8003\u8651\u5982\u4f55\u5408\u5e76\n    {\n        SegmentTree x=ask(p<<1,ll,rr),y=ask(p<<1|1,ll,rr),re;//x\u8bb0\u5f55\u5de6\u8986\u76d6\u533a\u95f4\uff0cy\u8bb0\u5f55\u53f3\u8986\u76d6\u533a\u95f4\uff0cx\u548cy\u5408\u5e76\u540e\u5f97\u5230re\n        //\u7528update()\u7684\u540c\u6837\u65b9\u5f0f\u66f4\u65b0re\uff1a\n        re.sum=x.sum+y.sum;\n        re.lmax=max(x.sum+y.lmax,x.lmax);\n        re.rmax=max(y.sum+x.rmax,y.rmax);\n        re.maxx=max(max(x.maxx,y.maxx),x.rmax+y.lmax);\n        return re;\n    }\n}\n```\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u9898\u76ee\u7684\u6240\u6709\u8981\u6c42\u3002\u603b\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=500005;\nint n,m,a[MAXN];\nstruct SegmentTree\n{\n    int l,r,sum,lmax,rmax,maxx;\n    #define l(a) tree[a].l\n    #define r(a) tree[a].r\n    #define s(a) tree[a].sum\n    #define lm(a) tree[a].lmax\n    #define rm(a) tree[a].rmax\n    #define m(a) tree[a].maxx\n}tree[MAXN<<2];\nint read()\n{\n    int f=1,re=0;\n    char ch=getchar();\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch)) re=(re<<3)+(re<<1)+ch-'0',ch=getchar();\n    return f*re;\n}\ninline void update(int p)\n{\n    s(p)=s(p<<1)+s(p<<1|1);\n    lm(p)=max(s(p<<1)+lm(p<<1|1),lm(p<<1));\n    rm(p)=max(s(p<<1|1)+rm(p<<1),rm(p<<1|1));\n    m(p)=max(max(m(p<<1),m(p<<1|1)),rm(p<<1)+lm(p<<1|1));\n}\nvoid build(int p,int ll,int rr)\n{\n    l(p)=ll,r(p)=rr;\n    if(ll==rr)\n    {\n        s(p)=lm(p)=rm(p)=m(p)=a[ll];\n        return ;\n    }\n    int mid=(l(p)+r(p))>>1;\n    build(p<<1,ll,mid);\n    build(p<<1|1,mid+1,rr);\n    update(p);\n}\nvoid change(int p,int des,int num)\n{\n    if(l(p)==r(p))\n    {\n        s(p)=lm(p)=rm(p)=m(p)=num;\n        return ;\n    }\n    int mid=(l(p)+r(p))>>1;\n    if(mid>=des) change(p<<1,des,num);\n    else change(p<<1|1,des,num);\n    update(p);\n}\nSegmentTree ask(int p,int ll,int rr)\n{\n    if(ll<=l(p)&&r(p)<=rr) return tree[p];\n    int mid=(l(p)+r(p))>>1;\n    if(rr<=mid) return ask(p<<1,ll,rr);\n    else if(ll>mid) return ask(p<<1|1,ll,rr);\n    else\n    {\n        SegmentTree x=ask(p<<1,ll,rr),y=ask(p<<1|1,ll,rr),re;\n        re.sum=x.sum+y.sum;\n        re.lmax=max(x.sum+y.lmax,x.lmax);\n        re.rmax=max(y.sum+x.rmax,y.rmax);\n        re.maxx=max(max(x.maxx,y.maxx),x.rmax+y.lmax);\n        return re;\n    }\n}\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=n;i++) a[i]=read();\n    build(1,1,n);\n    while(m--)\n    {\n        int opt=read();\n        if(opt==1)\n        {\n            int x=read(),y=read();\n            if(x>y) swap(x,y);\n            SegmentTree ans=ask(1,x,y);\n            printf(\"%d\\n\",ans.maxx);\n        }\n        else if(opt==2)\n        {\n            int x=read(),y=read();\n            change(1,x,y);\n        }\n    }\n    return 0;\n}\n```\n\n\u6210\u529fAC $qwq$ \u3002\n\n\u987a\u4fbf\u8bf4\u4e00\u4e0b\u4e00\u4e2a[julao](https://www.luogu.org/space/show?uid=60108)\u7684\u9519\u8bef\uff08\u4ed6\u8c03\u8bd5\u4e86\u5f88\u4e45\uff0c\u5e0c\u671b\u80fd\u5e2e\u5230\u5927\u5bb6 $qwq$ \uff09\n\n\u9996\u5148\u4ed6\u770b\u5230\u4e86[\u4e00\u7bc7\u8ba8\u8bba](https://www.luogu.org/discuss/show?postid=51328)\uff1a\n> \u4e3a\u5565\u6ca1\u58f0\u660ea\u53ef\u80fd>b\u554a\n\n\u7136\u540e\u4ed6\u5c31\u628a\n```cpp\nwhile(m--)\n{\n\tint opt=read(),x=read(),y=read();\n    if(opt==1)\n    {\n        SegmentTree ans=ask(1,x,y);\n        printf(\"%d\\n\",ans.maxx);\n    }\n    else if(opt==2)\n    {\n        change(1,x,y);\n    }\n}\n```\n\n\u6539\u6210\u4e86\n```cpp\nwhile(m--)\n{\n\tint opt=read(),x=read(),y=read();\n    if(x>y) swap(x,y);\n    if(opt==1)\n    {\n        SegmentTree ans=ask(1,x,y);\n        printf(\"%d\\n\",ans.maxx);\n    }\n    else if(opt==2)\n    {\n        change(1,x,y);\n    }\n}\n```\n\n\u7136\u540e\u5c31\u5199\u6302\u4e86 $qwq$",
        "postTime": 1536394699,
        "uid": 51983,
        "name": "Uranus",
        "ccfLevel": 4,
        "title": "P4513 \u5c0f\u767d\u901b\u516c\u56ed\uff08\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff09"
    },
    {
        "content": "\u8fd9\u9053\u9898\u96be\u70b9\u5728\u4e8e\u5982\u4f55\u5728logn\u7684\u8303\u56f4\u5185\u627e\u5230\u8be5\u533a\u95f4\u6700\u5927\u503c\uff0c\u6211\u4eec\u4e0d\u59a8\u5148\u5206\u6790\u6700\u5927\u503c\u6709\u54ea\u51e0\u79cd\u60c5\u51b5\u3002\n\u5982\u56fe\u6240\u793a\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/65448.png)\n\u53ef\u5206\u4e3a3\u79cd\u60c5\u51b5\n1.\u5168\u90e8\u5728\u4e2d\u7ebf\u5de6\u8fb9\u3002\n2.\u5168\u90e8\u5728\u4e2d\u7ebf\u53f3\u8fb9\u3002\n3.\u7ecf\u8fc7\u8de8\u8fc7\u4e2d\u7ebf\u3002\n\u5982\u679c\u5728\u4e8c\u53c9\u6811\u4e0a\u5206\u6790\uff0c\u5168\u90e8\u5728\u4e2d\u7ebf\u5de6\u8fb9\u5373\u4e3a\u5de6\u513f\u5b50\u7684\u6700\u5927\u503c\uff0c\u5168\u90e8\u5728\u4e2d\u7ebf\u53f3\u8fb9\u5373\u4e3a\u53f3\u513f\u5b50\u7684\u6700\u5927\u503c\uff0c\u8de8\u8fc7\u4e2d\u7ebf\u7684\u60c5\u51b5\u9700\u8981\u5206\u6790\u5de6\u513f\u5b50\u5305\u542b\u53f3\u7aef\u70b9\u7684\u6700\u5927\u503c\u548c\u53f3\u513f\u5b50\u5305\u542b\u5de6\u7aef\u70b9\u7684\u6700\u5927\u503c\u3002\n\n\u5982\u56fe\u6240\u793a\uff1a![](https://cdn.luogu.com.cn/upload/pic/65449.png)\n\u4ee3\u7801\u5b9e\u73b0\u5982\u4e0b\uff1a\n```cpp\nvoid update(int k)\n{\n\ttr[k].v=tr[k*2].v+tr[k*2+1].v;\n\ttr[k].lm=max(tr[k*2].lm,tr[k*2].v+tr[k*2+1].lm);\n\ttr[k].rm=max(tr[k*2+1].rm,tr[k*2+1].v+tr[k*2].rm);\n\ttr[k].mm=max(tr[k*2].mm,max(tr[k*2+1].mm,tr[2*k].rm+tr[k*2+1].lm)); \n}\n```\n\u6ce8\u610f\u7531\u4e8e\u641c\u7d22\u65f6\u53ef\u80fd\u4f1a\u9047\u5230\u8fc7\u4e2d\u7ebf\u7684\u60c5\u51b5\u6240\u4ee5\u9700\u8981\u8fdb\u884c\u548cupdate\u4e00\u6837\u7684\u64cd\u4f5c\uff0c\u6211\u4eec\u76f4\u63a5\u58f0\u660e\u4e00\u4e2a\u7ed3\u6784\u4f53\u51fd\u6570\uff1b\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\nnode sear(int l,int r,int k)//\u7531\u4e8e\u548cupdate\u6709\u4e00\u6837\u64cd\u4f5c\u76f4\u63a5\u627e\u7ed3\u6784\u4f53 \n{\n\tnode left1,right1;\n\tint f1=0,f2=0;\n\tif(tr[k].l>=l && tr[k].r<=r)\n\t\treturn tr[k];\n\tint mid=(tr[k].l+tr[k].r)/2;\n\tif(l<=mid)\n\t\tleft1=sear(l,r,k*2),f1=1;//\u5982\u679c\u533a\u95f4\u5305\u542b\u4e2d\u7ebf\u5de6\u8fb9 \u3002 \n\tif(r>mid)\n\t\tright1=sear(l,r,k*2+1),f2=1;//\u5982\u679c\u533a\u95f4\u5305\u542b\u4e2d\u7ebf\u53f3\u8fb9\u3002 \n\tif(f2&&f1)//\u5982\u679c\u533a\u95f4\u540c\u65f6\u5305\u542b\u4e2d\u7ebf\u5de6\u53f3\u8fb9\u5219\u9700\u8fdb\u884cupdate\u65f6\u4e00\u6837\u7684\u64cd\u4f5c\u3002 \n\t{\n\t\tnode m;\n\t\tm.l=left1.l,m.r=right1.r,m.v=left1.v+right1.v;\n\t\tm.lm=max(left1.lm,left1.v+right1.lm);\n\t\tm.rm=max(right1.rm,right1.v+left1.rm);\n\t\tm.mm=max(left1.mm,max(right1.mm,left1.rm+right1.lm)) ;\n\t\treturn m;\n\t}\n\tif(f1)//\u53ea\u5305\u542b\u5de6\u8fb9\uff1b \n\t\treturn left1;\n\tif(f2)//\u53ea\u5305\u542b\u53f3\u8fb9\uff1b \n\t\treturn right1;\n}\n```\n\n\u63a5\u7740\u4fbf\u662f\u7ebf\u6bb5\u6570\u7684\u5e38\u89c1\u64cd\u4f5c\uff1a\n\n\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n```cpp\n#include<cstdio>\n#include<iostream>\nusing namespace std;\nstruct node\n{\n\tint l,r,mm,lm,rm,v;\n}tr[2000010]; \nvoid update(int k)\n{\n\ttr[k].v=tr[k*2].v+tr[k*2+1].v;\n\ttr[k].lm=max(tr[k*2].lm,tr[k*2].v+tr[k*2+1].lm);\n\ttr[k].rm=max(tr[k*2+1].rm,tr[k*2+1].v+tr[k*2].rm);\n\ttr[k].mm=max(tr[k*2].mm,max(tr[k*2+1].mm,tr[2*k].rm+tr[k*2+1].lm)); \n}\nvoid build(int l,int r,int k)\n{\n\ttr[k].l=l;\n\ttr[k].r=r;\n\tif(l==r)\n\t{\n\t\tcin>>tr[k].v;\n\t\ttr[k].lm=tr[k].v;\n\t\ttr[k].rm=tr[k].v;\n\t\ttr[k].mm=tr[k].v;\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tbuild(l,mid,k*2);\n\tbuild(mid+1,r,k*2+1);\n\tupdate(k);//\u56de\u6eaf\u65f6\u6c42\u8be5\u533a\u95f4\u6700\u5927\u503c\u3002 \n}\nvoid change(int pos,int num,int k)\n{\n\tif(tr[k].l==pos && tr[k].r==pos)\n\t{\n\t\ttr[k].v=num;\n\t\ttr[k].lm=num,tr[k].rm=num,tr[k].mm=num;\n\t\treturn;\n\t}\n\tint mid=(tr[k].l+tr[k].r)>>1;\n\tif(pos<=mid)\n\t\tchange(pos,num,k*2);\n\telse\n\t\tchange(pos,num,k*2+1);//\u5411\u4e0b\u4e8c\u5206\u641c\u7d22 \uff1b \n\tupdate(k);//\u56de\u6eaf\u65f6\u6539\u53d8\u533a\u95f4\u6700\u5927\u503c\uff1b \n}  \nnode sear(int l,int r,int k)//\u7531\u4e8e\u548cupdate\u6709\u4e00\u6837\u64cd\u4f5c\u76f4\u63a5\u627e\u7ed3\u6784\u4f53 \n{\n\tnode left1,right1;\n\tint f1=0,f2=0;\n\tif(tr[k].l>=l && tr[k].r<=r)\n\t\treturn tr[k];\n\tint mid=(tr[k].l+tr[k].r)/2;\n\tif(l<=mid)\n\t\tleft1=sear(l,r,k*2),f1=1;//\u5982\u679c\u533a\u95f4\u5305\u542b\u4e2d\u7ebf\u5de6\u8fb9 \u3002 \n\tif(r>mid)\n\t\tright1=sear(l,r,k*2+1),f2=1;//\u5982\u679c\u533a\u95f4\u5305\u542b\u4e2d\u7ebf\u53f3\u8fb9\u3002 \n\tif(f2&&f1)//\u5982\u679c\u533a\u95f4\u540c\u65f6\u5305\u542b\u4e2d\u7ebf\u5de6\u53f3\u8fb9\u5219\u9700\u8fdb\u884cupdate\u65f6\u4e00\u6837\u7684\u64cd\u4f5c\u3002 \n\t{\n\t\tnode m;\n\t\tm.l=left1.l,m.r=right1.r,m.v=left1.v+right1.v;\n\t\tm.lm=max(left1.lm,left1.v+right1.lm);\n\t\tm.rm=max(right1.rm,right1.v+left1.rm);\n\t\tm.mm=max(left1.mm,max(right1.mm,left1.rm+right1.lm)) ;\n\t\treturn m;\n\t}\n\tif(f1)//\u53ea\u5305\u542b\u5de6\u8fb9\uff1b \n\t\treturn left1;\n\tif(f2)//\u53ea\u5305\u542b\u53f3\u8fb9\uff1b \n\t\treturn right1;\n}\n\n\nint main()\n{\n\tint n,m,type,le,ri;\n\tcin>>n>>m;\n\tbuild(1,n,1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tcin>>type>>le>>ri;\n\t\tif(type==1 && le>ri) \n\t\t\tswap(le,ri);\n\t\tif(type==1)\n\t\t{\n\t\t\tnode ans=sear(le,ri,1);\n\t\t\tcout<<ans.mm<<endl;\n\t\t}\n\t\telse\n\t\t\tchange(le,ri,1);\n\t} \n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1563934370,
        "uid": 169187,
        "name": "luminouris",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u8fd9\u662f\u6211\u7b2c\u4e00\u9053\u81ea\u5df1\u5207\u7684\u7ebf\u6bb5\u6811\uff08\u849f\u84bb\uff09\n\n\n------------\n\n~~\u505a\u8fc7\u7ebf\u6bb5\u6811\u9898\u7684\u90fd\u77e5\u9053\u8fd9\u9898\u4e0d\u96be~~\n\n\n\u7ef4\u62a4\u7684\u503c\u6709 \n\n_1._ sum_l\u4ece\u5de6\u8fb9\u5f00\u59cb\u7684\u6700\u5927\u5b57\u6bb5\u548c\uff08\u5305\u62ec\u5de6\u7aef\u70b9\uff09\n\n_2._ sum_r\u4ece\u53f3\u8fb9\u5f00\u59cb\u7684\u6700\u5927\u5b57\u6bb5\u548c\uff08\u5305\u62ec\u53f3\u7aef\u70b9\uff09\n\n_3._ sum\u533a\u95f4\u6700\u5927\u5b57\u6bb5\u548c\n\n_4._ tot\u533a\u95f4\u548c\n\n\u5e38\u89c4\u5408\u5e76\n```\nvoid update(int u, int x, int y) {\n\ttree[u].sum = max(max(tree[u << 1].sum, tree[u << 1 | 1].sum), tree[u << 1].sum_r + tree[u << 1 | 1].sum_l);\n\t//\u4ece\uff08\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u533a\u95f4\u6700\u5927\u5b57\u6bb5\u548c \u8fd8\u6709 \u5de6\u8fb9\u7684sum_r\u52a0\u53f3\u8fb9\u7684sum_l \uff09\u5f97\u5230 \n\ttree[u].tot = tree[u << 1].tot + tree[u << 1 | 1].tot;\n\ttree[u].sum_l = max(tree[u << 1].sum_l, tree[u << 1].tot + tree[u << 1 | 1].sum_l);\n\t//\u4ece\uff08\u5de6\u8fb9\u5ef6\u4f38\uff08tree[u << 1].tot + tree[u << 1 | 1]) \u6216 \u5de6\u8fb9\u7684sum_l\uff09\u5f97\u5230.....\u4e0b\u540c \n\ttree[u].sum_r = max(tree[u << 1 | 1].sum_r, tree[u << 1 | 1].tot + tree[u << 1].sum_r);\n}\n```\n\u63d0\u9192\uff1aupdate\u7684\u65f6\u5019\u4e0d\u8981\u548c \u539f\u6570 \u4e00\u8d77max\uff08\u53ea\u6709\u6211\u4f1a\uff09\uff01\u56e0\u4e3a\u53ef\u80fd\u4f1a\u6539\u5c0f\u3002\u3002\u3002\n\n\u5e9f\u8bdd\u4e0d\u591a\u8bf4\uff0c\u4e0a\u4ee3\u7801\n```\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\nconst int MAX = 500010;\n\nint n, m;\nint a[MAX];\nstruct node{\n\tint sum_l, sum_r, sum;\n\tint tot;\n}tree[MAX * 10];\n\ninline int read() {\n\tint s = 0, w = 1;\n\tchar ch = getchar();\n\twhile(ch < '0' || ch > '9') {\n\t\tif(ch == '-') w= -1;\n\t\tch = getchar();\n\t}\n\twhile(ch >= '0' && ch <= '9') {\n\t\ts = s * 10 + ch - '0';\n\t\tch = getchar();\n\t}\n\treturn s * w;\n}\nvoid update(int u, int x, int y) {\n\ttree[u].sum = max(max(tree[u << 1].sum, tree[u << 1 | 1].sum), tree[u << 1].sum_r + tree[u << 1 | 1].sum_l);\n\t//\u4ece\uff08\u5de6\u8fb9\u548c\u53f3\u8fb9\u7684\u533a\u95f4\u6700\u5927\u5b57\u6bb5\u548c \u8fd8\u6709 \u5de6\u8fb9\u7684sum_r\u52a0\u53f3\u8fb9\u7684sum_l \uff09\u5f97\u5230 \n\ttree[u].tot = tree[u << 1].tot + tree[u << 1 | 1].tot;\n\ttree[u].sum_l = max(tree[u << 1].sum_l, tree[u << 1].tot + tree[u << 1 | 1].sum_l);\n\t//\u4ece\uff08\u5de6\u8fb9\u5ef6\u4f38\uff08tree[u << 1].tot + tree[u << 1 | 1]) \u6216 \u5de6\u8fb9\u7684sum_l\uff09\u5f97\u5230.....\u4e0b\u540c \n\ttree[u].sum_r = max(tree[u << 1 | 1].sum_r, tree[u << 1 | 1].tot + tree[u << 1].sum_r);\n}\nvoid build(int u, int x, int y) {\n\tif(x == y) {\n\t\ttree[u].sum = tree[u].sum_l = tree[u].sum_r = tree[u].tot = a[x];\n\t\treturn ;\n\t}\n\tint mid = (x + y) >> 1;\n\tbuild(u << 1, x, mid);\n\tbuild(u << 1 | 1, mid + 1, y);\n\tupdate(u, x, y);\n}\nnode ask(int u, int x, int y, int a, int b) {//\u8be2\u95ee\u8981\u8fd4\u56denode \n\tif(a <= x && b >= y) return tree[u];\n\tint mid = (x + y) >> 1;\n\tif(a > mid) return ask(u << 1 | 1, mid + 1, y, a, b);\n\tif(b <= mid) return ask(u << 1, x, mid, a, b);\n\tnode son_l = ask(u << 1, x, mid, a, b), son_r = ask(u << 1 | 1, mid + 1, y, a, b);\n\tnode ans;\n\tans.tot = son_l.tot + son_r.tot;\n\tans.sum = max(max(son_l.sum, son_r.sum), son_l.sum_r + son_r.sum_l);\n\tans.sum_l = max(son_l.sum_l, son_l.tot + son_r.sum_l);\n\tans.sum_r = max(son_r.sum_r, son_r.tot + son_l.sum_r);\n\treturn ans;\n}\nvoid change(int u, int x, int y, int a, int k) {\n\tif(x == y && x == a) {\n\t\ttree[u].sum = tree[u].sum_l = tree[u].sum_r = tree[u].tot = k;\n\t\treturn ;\n\t}\n\tint mid = (x + y) >> 1;\n\tif(a <= mid) change(u << 1, x, mid, a, k);\n\tif(a > mid) change(u << 1 | 1, mid + 1, y, a, k);\n\tupdate(u, x, y);\n}\nint main()\n{\n\tn = read();\n\tm = read();\n\tfor(int i = 1; i <= n; i++) a[i] = read();\n\tbuild(1, 1, n);\n\twhile(m--) {\n\t\tint k = read();\n\t\tif(k == 1) {\n\t\t\tint x = read(), y = read();\n\t\t\tif(y < x) swap(x, y);\n\t\t\tprintf(\"%d\\n\", ask(1, 1, n, x, y).sum);\n\t\t}\n\t\tif(k == 2) {\n\t\t\tint x = read(), z = read();\n\t\t\tchange(1, 1, n, x, z);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n\n\n",
        "postTime": 1570281074,
        "uid": 54396,
        "name": "Lysus",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "#### \u5148\u5206\u6790\u4e00\u4e0b\u9898\u76ee\u5927\u6982\u610f\u601d\u3002\u610f\u601d\u5f88\u7b80\u5355\n\n#### \u4f60\u9700\u8981\u5b8c\u6210\u4e24\u79cd\u64cd\u4f5c\u3002\n\n#### 1.\u5c06X\u7684\u70b9\u8fdb\u884c\u66f4\u6539\n\n#### 2.\u6c42a\u5230b\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\n\n### \u770b\u5230\u8fd9\u91cc\uff0c\u8111\u888b\u91cc\u7b2c\u4e00\u773c\u6d6e\u73b0\u7684\u89e3\u9898\u65b9\u6cd5\u5c31\u662f\u7ebf\u6bb5\u6811\u3002\uff08\u4e0d\u4f1a\u7ebf\u6bb5\u6811\u5de6\u8f6c[\u7ebf\u6bb5\u6811](https://www.luogu.org/problem/P3372) \uff09\n\n### why\uff1f\uff1f\n\n### \u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u67e5\u8be2\uff0c\u7ebf\u6bb5\u6811\u4e0d\u5c31\u53ef\u4ee5\u5904\u7406\u5417\uff1f\n\n#### \u73b0\u5728\u95ee\u9898\u6765\u4e86\uff1a\u8be5\u600e\u4e48\u5904\u7406\u6700\u5927\u5b50\u6bb5\u548c\u5462\uff1f\n\n\u6211\u4eec\u4e0d\u96be\u60f3\u5230\uff0c\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\u6e90\u4e8e\u4e09\u4e2a\u5730\u65b9\uff1b\n\n### 1.\u5de6\u8fb9\u754c\u4ee5\u5de6\u7684\u6700\u5927\u5b50\u6bb5\u548c\u3002\n### 2.\u53f3\u8fb9\u754c\u4ee5\u53f3\u7684\u6700\u5927\u5b50\u6bb5\u548c\u3002\n### 3.\u4e2d\u95f4\u5411\u4e24\u8fb9\u62d3\u5c55\u7684\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\n### \u601d\u8def\u5df2\u7ecf\u6709\u4e86\u5177\u4f53\u770b\u4ee3\u7801\u3002\n\n```\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int maxn=(500000+10)*4;\n\nint num[maxn],addval[maxn];\nstruct node{\n\tint lx,sum,rx,ans,l,r;\n    \n    //lx:\u5de6\u8fb9\u754c\u4ee5\u5de6\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff1b\n    //rx\uff1a\u53f3\u8fb9\u754c\u4ee5\u53f3\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff1b\n    //ans\uff1a\u6700\u540e\u7684\u6700\u5927\u5b50\u6bb5\u548c\n    //sum\uff1a\u533a\u95f4\u603b\u548c\n    //l\uff1a\u5de6\u8fb9\u754c\uff0cr \u53f3\u8fb9\u754c\n}tree[maxn]; \n\nvoid build(int k,int left,int right){//\u5efa\u6811\n\ttree[k].l=left;\n\ttree[k].r=right;//\u5de6\u53f3\u8303\u56f4\n\tif(left==right){\n\t\ttree[k].sum=tree[k].lx=tree[k].rx=tree[k].ans=num[left];//\u521d\u59cb\u503c\n\t\treturn ; \n\t}\n\tint mid=(left+right)>>1;//\u4e8c\u5206\u62d3\u5c55\n\tbuild(k*2,left,mid);\n\tbuild(k*2+1,mid+1,right);\n\ttree[k].sum=tree[k*2].sum+tree[k*2+1].sum;//\u6c42\u533a\u95f4\u603b\u548c\n\ttree[k].lx=max(tree[k*2].lx,tree[k*2].sum+tree[k*2+1].lx);//\u5de6\u8fb9\u754c\u6700\u5927\u503c\u6709\u4e24\u79cd\u53ef\u80fd\uff1a1.\u5de6\u5b50\u6811\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff0c2.\u5de6\u5b50\u6811\u7684\u603b\u548c\uff0c\u52a0\u4e0a\u53f3\u5b50\u6811\u7684\u5de6\u8fb9\u754c\u8d77\u59cb\u7684\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\ttree[k].rx=max(tree[k*2+1].rx,tree[k*2+1].sum+tree[k*2].rx);//\u53f3\u5b50\u6811\u540c\u7406\uff0c\u53ef\u4ee5\u81ea\u5df1\u63a8\u4e00\u4e0b\n\ttree[k].ans=max(max(tree[k*2].ans,tree[k*2+1].ans),tree[k*2].rx+tree[k*2+1].lx);//\u6700\u7ec8\u503c\u6bd4\u8f83\n}\n\nnode query(int k,int lt,int rt){//\u67e5\u8be2\n\tif(lt<=tree[k].l&&rt>=tree[k].r)return tree[k];//\u533a\u95f4\u88ab\u5305\u542b\uff0c\u5168\u90e8\u8fd4\u56de\n\tnode a,b,ans;//\u53d6\u51fa\u5de6\u5b50\u6811\uff0c\u53f3\u5b50\u6811\n\ta.lx=a.rx=a.ans=a.ans=-2047483647;\n\tb.lx=b.rx=b.ans=b.ans=-2047483647;\n\ta.sum=b.sum=0;\n\tans.ans=-2047483647;\n\tans.sum=0;\n\tint mid=(tree[k].l+tree[k].r)>>1;\n\tif(lt<=mid){\n\t\ta=query(k*2,lt,rt);\n\t\tans.sum+=a.sum;\n\t}\n\tif(rt>=mid+1){\n\t\tb=query(k*2+1,lt,rt);\n\t\tans.sum+=b.sum;\n\t}\n\tans.ans=max(a.rx+b.lx,max(a.ans,b.ans));//\u548c\u5efa\u6811\u65f6\u7684\u60f3\u6cd5\u76f8\u540c\n\tans.lx=max(a.lx,a.sum+b.lx);\n\tans.rx=max(b.rx,b.sum+a.rx);\n\tif(lt>mid){\n\t\tans.lx=max(ans.lx,b.lx);\n\t}\n\tif(rt<mid){\n\t\tans.rx=max(ans.rx,a.rx);\n\t}\n\treturn ans;\n}\nvoid modify(int k,int lt,int rt,int qx,int val){//\u66f4\u6539\uff0c\u548c\u5efa\u6811\u60f3\u6cd5\u5dee\u4e0d\u591a\n    if(qx<lt||qx>rt)return ;\n    else if(lt==qx&&rt==qx){\n        tree[k].ans=tree[k].lx=tree[k].rx=tree[k].sum=val;\n        return ;\n    }\n    else {\n        int mid=lt+(rt-lt)/2;\n        modify(k*2,lt,mid,qx,val);\n        modify(k*2+1,mid+1,rt,qx,val);\n\t\ttree[k].sum=tree[k*2].sum+tree[k*2+1].sum;\n\t\ttree[k].lx=max(tree[k*2].lx,tree[k*2].sum+tree[k*2+1].lx);\n\t\ttree[k].rx=max(tree[k*2+1].rx,tree[k*2+1].sum+tree[k*2].rx);\n\t\ttree[k].ans=max(max(tree[k*2].ans,tree[k*2+1].ans),tree[k*2].rx+tree[k*2+1].lx);\n\t\treturn ;\n    }\n}\nsigned main(){//\u4e3b\u51fd\u6570\n\tint n,m;\n    cin>>n>>m;\n    for(int i=1;i<=n;i++)\n    scanf(\"%lld\",&num[i]);\n    build(1,1,n);\n    for(int i=1;i<=m;i++){\n        int pre,x,y,z;\n        scanf(\"%lld%lld%lld\",&pre,&x,&y);\n        if(pre==2){\n        modify(1,1,n,x,y);   \n        }\n        else {\n\t\tif(x>y)swap(x,y);\n        node a=query(1,x,y);\n        cout<<a.ans<<endl;\t\n        }\n        \n    }\n\t   \n\treturn 0;\n} \n/*\n5 3\n1 2 -3 4 5\n1 2 3\n2 2 -1\n1 3 2\n*/\n```\n\n### \u4ee3\u7801\u5c31\u662f\u8fd9\u6837\uff0c\u4e3b\u8981\u662f\u7801\u5b57\u8f83\u591a\u3002\n\n#### \u770b\u61c2\u4e4b\u540e\uff0c\u63a8\u8350\u4e24\u9053\u9898\n### 1.[\u597d\u4e00\u4e2a\u4e00\u4e2d\u8170\u9f13](https://www.luogu.org/problem/P2253)\n\n### 2.[\u4f60\u80fd\u56de\u7b54\u8fd9\u4e9b\u95ee\u9898\u5417\uff1f\uff08\u4e00\u6837\u7684\uff09](https://www.acwing.com/problem/content/description/246/)",
        "postTime": 1569912352,
        "uid": 41302,
        "name": "Obito",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u9898\u89e3\u91cc\u5e73\u8861\u6811\u4e0d\u591a\uff1f\u6765\u4e00\u4e2a$Splay$.\n\n\u5e73\u8861\u6811\u662f\u53ef\u4ee5\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u7684\uff0c\u6bcf\u6b21\u5728\u5e8f\u5217\u4e2d\u76f8\u5e94\u4f4d\u7f6e\u63d2\u5165$val$,\u540c\u65f6\u8fd8\u6709\u5b83\u7684\u8282\u70b9\u7f16\u53f7\u3002\u5f53\u8be2\u95ee\u533a\u95f4$[l,r]$\u65f6\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff0c\u5c06$l-1$\u548c$r+1$\u8f6c\u5230\u6839\uff0c\u90a3\u4e48\uff0c\u6839\u7684\u53f3\u5b50\u6811\u7684\u5de6\u5b50\u6811\u5c31\u4ee3\u8868\u533a\u95f4$[l,r]$\u7684\u4fe1\u606f\u3002\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5c06\u5de6\u53f3\u7aef\u70b9$+1$\uff0c\u5c31\u53d8\u6210\u4e86$[l,r+2]$\u3002\n\n\u8fd8\u6709\u4e00\u70b9\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728\u7ed9\u51fa\u533a\u95f4\u7f16\u53f7\u65f6\uff0c\u9700\u8981\u5728\u6811\u4e2d\u5bfb\u627e\u5de6\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\uff0c\u56e0\u4e3a\u5e8f\u5217\u7684\u67d0\u4e2a\u5143\u7d20\u5728\u6811\u4e0a\u7684\u4f4d\u7f6e\u662f\u4e0d\u786e\u5b9a\u7684\u3002\u4e86\u89e3\u57fa\u672c\u64cd\u4f5c\u540e\uff0c\u95ee\u9898\u5c31\u5728\u4e8e\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\u4e86\u3002\n\n\u5bf9\u4e8e\u5355\u70b9\u4fee\u6539\uff0c\u76f4\u63a5\u4fee\u6539\u5c31\u884c\u4e86\uff0c\u6ce8\u610f\u662f\u4fee\u6539\u6811\u4e0a\u7684\u4f4d\u7f6e\u3002\n\n\u5bf9\u4e8e\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u770b\u4ee3\u7801\u4e2d\u7684\u6ce8\u91ca\u5427\u3002\n\n$Code:$\n\n```cpp\n#include<cstdio>\n#include<iostream>\n#include<cstring>\nusing namespace std;\nconst int inf=2147483647;\nint tot,n,m,rt,opt,a,b;\nstruct node{\n\tint ch[2],fa,siz;\n\tint ls,rs,ms,val,sum;\n}tr[500001];\ninline void pushup(int x){\n\tint lc=tr[x].ch[0],rc=tr[x].ch[1];\n\ttr[x].siz=tr[tr[x].ch[0]].siz+tr[tr[x].ch[1]].siz+1;\n\ttr[x].sum=tr[lc].sum+tr[rc].sum+tr[x].val;\n\t//\u4ee5\u4e0a\u662f\u5e73\u8861\u6811\u7ef4\u62a4sum\u548csiz\u7684\u64cd\u4f5c \n\ttr[x].ls=max(tr[lc].ls,tr[rc].ls+tr[lc].sum+tr[x].val);\n\t//\u4e0e\u7ebf\u6bb5\u6811\u7c7b\u4f3c\uff0c\u5e73\u8861\u6811\u4e5f\u8981\u7ef4\u62a4\u4e09\u4e2a\u4fe1\u606f\uff0c\u5de6\u8fb9\u7684\u6700\u5927\u8fde\u7eed\u548c\uff0c\u53f3\u8fb9\u6700\u5927\u8fde\u7eed\u548c\u4ee5\u53ca\u5408\u5e76\u7684\u6700\u5927\u8fde\u7eed\u548c\n\t//\u5bf9\u4e8els\uff0c\u5b83\u7684\u4fe1\u606f\u7531\uff1a \u5de6\u5b50\u6811\u7684ls\uff0c\u4ee5\u53ca\u53f3\u5b50\u6811\u7684ls+\u672c\u8eab\u7684val+\u5de6\u5b69\u5b50\u7684sum\u53d6max\u8f6c\u79fb\u5f97\u5230 \n\ttr[x].rs=max(tr[rc].rs,tr[rc].sum+tr[lc].rs+tr[x].val);\n\t//\u5bf9\u4e8ers\uff0c\u4e0els\u7c7b\u4f3c\uff0c\u540c\u6837\u662f\u8fd9\u6837\u8f6c\u79fb \n\ttr[x].ms=max(tr[lc].ms,max(tr[rc].ms,tr[lc].rs+tr[x].val+tr[rc].ls));\n\t//\u5bf9\u4e8ems\uff0c\u5b83\u7684\u4fe1\u606f\u7531\uff1a\u5de6\u5b69\u5b50\u7684ms\uff0c\u53f3\u5b69\u5b50\u7684ms\uff0c\u5de6\u5b69\u5b50\u7684rs+\u672c\u8eab\u7684val+\u53f3\u5b69\u5b50\u7684ls\u53d6max\u5f97\u5230 \n}\ninline void rotate(int x){\n\tint y=tr[x].fa,z=tr[y].fa,k=tr[y].ch[1]==x;\n\ttr[z].ch[tr[z].ch[1]==y]=x;tr[x].fa=z;\n\ttr[y].ch[k]=tr[x].ch[k^1];tr[tr[x].ch[k^1]].fa=y;\n\ttr[x].ch[k^1]=y;tr[y].fa=x;pushup(y);pushup(x);\n}\ninline void splay(int x,int g){\n\twhile(tr[x].fa!=g){\n\t\tint y=tr[x].fa,z=tr[y].fa;\n\t\tif(z!=g)(tr[z].ch[0]==y)^(tr[y].ch[0]==x)?rotate(x):rotate(y);\n\t\trotate(x);\n\t}\n\tif(!g)rt=x;\n}\nint find(int x){\n\tint u=rt;\n\tif(tr[u].siz<x)return 0;\n\twhile(u){\n\t\tint y=tr[u].ch[0];\n\t\tif(tr[y].siz>=x)u=y;\n\t\telse{\n\t\t\tx-=tr[y].siz+1;\n\t\t\tif(!x)return u;\n\t\t\tu=tr[u].ch[1];\n\t\t}\n\t}\n}\ninline void Insert(int x,int val){\n\tint F=find(x);splay(F,0);\n\tint p=++tot;tr[p].fa=F;\n\ttr[p].val=val;tr[p].ms=val;tr[p].siz=1;\n\tif(val>=0)tr[p].ls=tr[p].rs=val;\n\tif(F){\n\t\ttr[p].ch[1]=tr[F].ch[1];\n\t\ttr[tr[F].ch[1]].fa=p;tr[F].ch[1]=p;\n\t\tpushup(p);pushup(F);\n\t}\n\tsplay(p,0);\n}\ninline void query(int l,int r){\n\tint L=find(l),R=find(r+2);\n\tsplay(L,0);splay(R,L);\n\tprintf(\"%d\\n\",tr[tr[R].ch[0]].ms);\n}\ninline void change(int pos,int v){\n\tint P=find(pos+1);\n\ttr[P].val=v;\n\tsplay(P,0);\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\ttr[0].ms=-inf;\n\tInsert(0,-inf);\n\tfor(int i=1,x;i<=n;++i){\n\t\tscanf(\"%d\",&x);\n\t\tInsert(i,x);\n\t}\n\tInsert(n+1,-inf);\n\tfor(int i=1;i<=m;++i){\n\t\tscanf(\"%d%d%d\",&opt,&a,&b);\n\t\tif(opt==1){\n\t\t\tif(a>b)swap(a,b);\n\t\t\tquery(a,b);\n\t\t}\n\t\telse change(a,b);\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1569848497,
        "uid": 128591,
        "name": "Refined_heart",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u7684\u5b9e\u8d28\u662f\u7ebf\u6bb5\u6811\u5355\u70b9\u4fee\u6539\u548c\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u8fde\u7eed\u5b57\u6bb5\u548c\u3002\n\n%%%tqc\n\ntqc\u5927\u4f6c\u7684\u601d\u8def\uff1a\n\n\u5728build\u7684\u65f6\u5019\u9884\u5904\u7406v(\u8282\u70b9\u5305\u542b\u7684\u533a\u95f4\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c),\n\nsum(\u8282\u70b9\u5305\u542b\u7684\u533a\u95f4\u6240\u6709\u70b9\u7684\u6743\u503c\u548c),\n\nmaxl(\u4ece\u8282\u70b9\u5305\u542b\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u51fa\u53d1\u7684\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c),\n\nmaxr(\u4ece\u8282\u70b9\u5305\u542b\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u51fa\u53d1\u7684\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c),\n\n\u5728\u6c42[a,b]\u533a\u95f4\u7684\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c\u7684\u65f6\u5019\u8c03\u7528\u3002\n\n\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\na\u53ef\u80fd\u5927\u4e8eb,\n\u8fd9\u70b9\u4e00\u5f00\u59cb\u6ca1\u6709\u6ce8\u610f\u5230\uff0c\n\u5bfc\u81f4\u4ea4\u4e86\u597d\u591a\u6b21\u90fd\u662f9\u5206(\u9664\u4e86\u7b2c1\u4e2a\u70b9\u90fd\u662fMLE),\n\u8bfb\u9898\u5343\u4e07\u8c28\u614e\u3002\n```\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<iomanip>\n#include<queue>\n#include<sstream>\n#include<map>\n#include<set>\n#define lson (o<<1)\n#define rson (o<<1|1)\n//\u5b9a\u4e49\u5de6\u53f3\u513f\u5b50(\u6d1b\u8c37\u7f51\u8bfe\u8bb2\u4e49\u7684\u5199\u6cd5)\nusing namespace std;\nint n,m,x,y,num,a[500010];\nstruct Segment_Tree{\n\tint v,sum,maxl,maxr;\n}st[2000010];\nvoid update(int o){\n\tst[o].sum=st[lson].sum+st[rson].sum;\n\tst[o].v=max(max(st[lson].v,st[lson].maxr+st[rson].maxl),st[rson].v);//o\u8282\u70b9\u5305\u542b\u7684\u533a\u95f4\u6c42\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c\uff0c\u53ef\u4ee5\u5168\u5728\u4e2d\u70b9\u7684\u5de6\u8fb9\uff0c\u4e5f\u53ef\u4ee5\u5168\u5728\u91cd\u70b9\u7684\u53f3\u8fb9\uff0c\u4e5f\u53ef\u4ee5\u8de8\u8d8a\u4e2d\u70b9\n\tst[o].maxl=max(st[lson].maxl,st[lson].sum+st[rson].maxl);//\u5168\u5728\u5de6\u8fb9\u6216\u8005\u5305\u542b\u5de6\u8fb9\u7684\u5168\u90e8\u548c\u53f3\u8fb9\u7684\u4e00\u90e8\u5206\n\tst[o].maxr=max(st[rson].maxr,st[rson].sum+st[lson].maxr);//\u5168\u5728\u53f3\u8fb9\u6216\u8005\u5305\u542b\u53f3\u8fb9\u7684\u5168\u90e8\u548c\u5de6\u8fb9\u7684\u4e00\u90e8\u5206\n}\nvoid build(int o,int l,int r){\n\tif(l==r){st[o].maxl=st[o].maxr=st[o].sum=st[o].v=a[l];return;}//\u5f53\u524d\u8282\u70b9\u53ea\u5305\u542b\u4e00\u4e2a\u70b9\uff0c\u56db\u4e2a\u503c\u90fd\u662f\u8fd9\u4e2a\u70b9\u7684\u6743\u503c\n\tint mid=(l+r)>>1;\n\tbuild(lson,l,mid);\n\tbuild(rson,mid+1,r);\n\tupdate(o);\n}\nvoid add(int o,int l,int r,int x,int y){\n\tif(l==r){st[o].maxl=st[o].maxr=st[o].sum=st[o].v=y;return;}\n\tint mid=(l+r)>>1;\n\tif(mid>=x)add(lson,l,mid,x,y);\n\telse add(rson,mid+1,r,x,y);\n\tupdate(o);\n    //\u867d\u7136\u51fd\u6570\u540d\u4e3aadd,\u4f46\u662f\u5176\u5b9e\u662f\u5355\u70b9\u4fee\u6539,\u548cbuild\u51fd\u6570\u76f8\u4f3c\n}\nSegment_Tree query(int o,int l,int r,int lh,int rh){\n\t//\u8fd4\u56de\u503c\u4e3a\u7ed3\u6784\u4f53\u7684\u51fd\u6570\n\tif(l>=lh&&r<=rh)return st[o];\n\tint mid=(l+r)>>1;\n\tif(rh<=mid)return query(lson,l,mid,lh,rh);\n\tif(lh>mid)return query(rson,mid+1,r,lh,rh);\n\tSegment_Tree ltr=query(lson,l,mid,lh,rh),rtr=query(rson,mid+1,r,lh,rh);\n\tSegment_Tree ans;\n\tans.sum=ltr.sum+rtr.sum;\n\tans.v=max(max(ltr.v,rtr.v),ltr.maxr+rtr.maxl);\n\tans.maxl=max(ltr.maxl,ltr.sum+rtr.maxl);\n\tans.maxr=max(rtr.maxr,rtr.sum+ltr.maxr);\n    //\u5bf9ans\u7684\u64cd\u4f5c\u548cupdate\u51fd\u6570\u76f8\u4f3c\n\treturn ans;\n}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    \tscanf(\"%d\",&a[i]);\n\tbuild(1,1,n);\n    for(int i=1;i<=m;i++){\n    \tscanf(\"%d%d%d\",&num,&x,&y);\n    \tif(num==1){if(x>y)swap(x,y);printf(\"%d\\n\",query(1,1,n,x,y).v);}\n\t\telse add(1,1,n,x,y);\n\t}\n    return 0;\n}\n```\n%%%tqc",
        "postTime": 1566267120,
        "uid": 160113,
        "name": "Oliver_Heldens",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "**\u9898\u76ee\u5927\u610f\uff1a**\n\n\u521d\u59cb\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a$n$\u7684\u5e8f\u5217$\\{a_n\\}$\uff0c\u6709$m$\u6b21\u64cd\u4f5c\uff1a\n\n\u64cd\u4f5c1\uff1a\u7ed9\u5b9a$L,R$\uff0c\u8be2\u95ee$a_{L \\cdots R}$\u7684\u6700\u5927\u5b50\u6bb5\u548c\n\n\u64cd\u4f5c2\uff1a\u7ed9\u5b9a$p,s$\uff0c\u8868\u660e\u5c06$a_p$\u7684\u503c\u6539\u4e3a$s$\n\n\u770b\u5230\u5927\u5bb6\u90fd\u662f\u7528\u7ebf\u6bb5\u6811\u76f4\u63a5\u7ef4\u62a4\u7684\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548cQwQ\n\n\u4e0d\u8fc7\u672c\u9898\u53ef\u4ee5\u7528\u52a8\u6001dp\u7684\u65b9\u6cd5\u6765\u505a\u2026\u2026\n\n\u9996\u5148\u8003\u8651\u5c06\u6700\u5927\u5b50\u6bb5\u548c\u7684\u666e\u901adp\u65b9\u7a0b\u5199\u51fa\u6765\uff1a\uff08\u8fd9\u91cc\u8bbe\u6570\u5217\u4e3a$\\{a_n\\}$\uff09\n\n$g[i]$\u8868\u793a\u7531$a_{1 \\cdots i}$\u7684\u5b50\u5e8f\u5217\u6240\u6784\u6210\u7684\u4e14\u9009\u5165\u6700\u5927\u5b50\u6bb5\u548c\u7684\u6700\u540e\u4e00\u4e2a\u6570\u4e3a$a[i]$\u7684\u6700\u5927\u5b50\u6bb5\u548c\n\n$f[i]$\u8868\u793a\u7531$a_{1 \\cdots i}$\u7684\u5b50\u5e8f\u5217\u6240\u6784\u6210\u7684\u6700\u5927\u5b50\u6bb5\u548c\n\n\u6545\u6709\uff1a\n\n$g[i] = max(g[i-1] + a[i], a[i])$\n\n$f[i] = max(f[i - 1], g[i])$\n\n\u6839\u636e\u52a8\u6001dp\u7684\u5957\u8def\uff0c\u5c06\u8fd9\u4e2a\u65b9\u7a0b\u5199\u6210\u77e9\u9635\u5f62\u5f0f\uff0c\u5e76\u66f4\u6539\u77e9\u9635\u4e58\u6cd5\u7684\u5b9a\u4e49\uff1a\n\n\u5c06\u539f\u6765\u7684\u5b9a\u4e49\uff08\u8fd9\u91cc\u8bbe\u77e9\u9635$A,B$\u76f8\u4e58\u5f97\u5230\u77e9\u9635$C$\uff0c\u5e76\u8981\u6c42$A$\u77e9\u9635\u7684\u5217\u6570\u7b49\u4e8e$B$\u77e9\u9635\u7684\u884c\u6570\uff09\uff1a\n\n$C_{ij} = \\sum A_{ik} \\times C_{kj}$\n\n\u53d8\u4e3a\uff1a\n\n$C_{ij} = max(A_{ik} + C_{kj})$\n\n~~\u4e0d\u96be\u53d1\u73b0max\u540c\u6837\u62e5\u6709\u7ed3\u5408\u5f8b\uff0c\u6545\u65b0\u5b9a\u4e49\u7684\u77e9\u9635\u4e58\u6cd5\u540c\u6837\u5177\u6709\u7ed3\u5408\u5f8b~~\n\n\u53d1\u73b0\u7531\u4e8e$f[i]$\u7684\u8f6c\u79fb\u9700\u4f9d\u9760$g[i]$\uff0c\u800c$g[i]$\u5728\u8f6c\u79fb\u65f6\u662f\u672a\u77e5\u7684\uff08\u5373\u6211\u4eec\u4e0d\u4fbf\u4e8e\u5c06$f[i - 1],g[i -1],g[i]$\u540c\u65f6\u5217\u5728\u4e00\u4e2a\u77e9\u9635\u4e2d\uff09\uff0c\u6545\u53ef\u5c06$g[i]$\u62c6\u4e3a$max(g[i-1] + a[i], a[i])$\u8fdb\u884c\u8f6c\u79fb\uff08\u5373$f[i] = max(f[i - 1],g[i - 1] + a[i], a[i])$\uff09\n\n\u8fd9\u6837\u518d\u5199\u6210\u77e9\u9635\u7684\u5f62\u5f0f\uff1a\n\n$$\\begin{bmatrix} a[i] & -\\infty & a[i] \\\\ a[i] & 0 & a[i] \\\\ -\\infty & -\\infty & 0 \\end{bmatrix} \\times \\begin{bmatrix}  g[i-1] \\\\ f[i-1] \\\\ 0 \\end{bmatrix} = \\begin{bmatrix} g[i] \\\\ f[i] \\\\ 0 \\end{bmatrix}$$\n\n\u68c0\u9a8c\u4e00\u4e0b\u6211\u4eec\u5199\u7684\u662f\u5426\u6b63\u786e\uff1a\n\n\u5c06\u77e9\u9635\u4e58\u5f00\u5f97\uff1a\n\n$g[i] = max(a[i] + g[i-1],-\\infty,a[i])$\n\n$f[i] = max(a[i] + g[i - 1], f[i - 1], a[i])$\n\n$0 = max(-\\infty, -\\infty, 0)$\n\n\u5bf9\u6bd4\u524d\u6587\u7684\u5f0f\u5b50\uff0c\u770b\u6765\u6211\u4eec\u5199\u7684\u662f\u6b63\u786e\u7684\u2026\u2026\n\n\u8fd9\u6837\u5bf9\u4e8e\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a\u5143\u7d20$a_i$\uff0c\u5747\u6709\u77e9\u9635\uff1a\n\n$$\\begin{bmatrix} a[i] & -\\infty & a[i] \\\\ a[i] & 0 & a[i] \\\\ -\\infty & -\\infty & 0 \\end{bmatrix}$$\n\n\u4e0d\u59a8\u8bbe$a_i$\u6240\u5bf9\u5e94\u7684\u77e9\u9635\u4e3a$A_i$\uff0c\u4e0d\u96be\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u8be2\u95ee$a_{L \\cdots R}$\u7684\u6700\u5927\u5b50\u6bb5\u548c\u65f6\uff0c\u53ea\u9700\u5c06$A_{L \\cdots R}$\u76f8\u4e58\u5373\u53ef\uff1b\n\n\u5bb9\u6613\u60f3\u5230\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u533a\u95f4\u5185\u77e9\u9635\u7684\u4e58\u79ef\uff0c\u5373\u5bf9\u4e8e\u77e9\u9635\u5e8f\u5217$\\{A_n\\}$\uff0c\u5efa\u4e00\u68f5\u652f\u6301\u5355\u70b9\u4fee\u6539\u533a\u95f4\u67e5\u8be2\u7684\u7ebf\u6bb5\u6811\u5373\u53ef\u3002\n\nCode\uff1a\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\ntemplate<typename T>\ninline bool chkmax(T &x, const T &y) {return x < y ? (x = y, true) : false;}\n\nconst int inf = 0x3f3f3f3f;\nconst int maxn = 500010;\nint n, m, score[maxn];\n\nstruct Matrix\n{\n    int v[3][3];//\u8fd9\u91cc\u77e9\u9635\u4e0b\u6807\u662f\u4ecev[0][0]\u5f00\u59cb\n    \n    Matrix operator * (const Matrix &rhs) const\n    {\n        Matrix res;\n        for (int i = 0; i < 3; ++i)\n        {\n            for (int j = 0; j < 3; ++j)\n            {\n                res.v[i][j] = -inf;\n            }\n        }\n        for (int i = 0; i < 3; ++i)\n        {\n            for (int k = 0; k < 3; ++k)//\u77e9\u9635\u4e58\u6cd5\u4f18\u5316\n            {\n                for (int j = 0; j < 3; ++j)\n                {\n                    chkmax(res.v[i][j], v[i][k] + rhs.v[k][j]);\n                }\n            }\n        }\n        return res;\n    }\n};\n\nclass Segtree\n{\n    #define lson root << 1\n    #define rson root << 1 | 1\n    private:\n        Matrix val[maxn << 2];\n        \n        inline void pushup(int root) {val[root] = val[lson] * val[rson];}\n    \n    public:\n        void build(int s, int e, int root)\n        {\n            if (s == e)\n            {\n                val[root].v[0][0] = val[root].v[1][0] =\n                val[root].v[0][2] = val[root].v[1][2] = score[s];\n                val[root].v[0][1] = val[root].v[2][0] =\n                val[root].v[2][1] = -inf;\n                val[root].v[1][1] = val[root].v[2][2] = 0;\n                //\u6309\u7167\u524d\u6587\u6240\u8ff0\u6784\u9020a[i]\u5bf9\u5e94\u7684A[i]\n                return;\n            }\n            int mid = (s + e) >> 1;\n            build(s, mid, lson);\n            build(mid + 1, e, rson);\n            pushup(root);\n        }\n        \n        void modify(int s, int e, int pos, int root, int k)\n        {\n            if (s == e)\n            {\n                val[root].v[0][0] = val[root].v[1][0] = \n                val[root].v[0][2] = val[root].v[1][2] = k;\n                return;\n            }\n            int mid = (s + e) >> 1;\n            if (pos <= mid) modify(s, mid, pos, lson, k);\n            else modify(mid + 1, e, pos, rson, k);\n            pushup(root);\n        }\n        \n        Matrix query(int s, int e, int ql, int qr, int root)\n        {\n            if (ql <= s && e <= qr) return val[root];\n            int mid = (s + e) >> 1;\n            if (ql <= mid && qr > mid)\n                return query(s, mid, ql, qr, lson) * \n                query(mid + 1, e, ql, qr, rson);\n            else if (ql <= mid) return query(s, mid, ql, qr, lson);\n            else return query(mid + 1, e, ql, qr, rson);\n        }\n    #undef lson\n    #undef rson\n}tree;\n\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; ++i) scanf(\"%d\", score + i);\n    tree.build(1, n, 1);\n    int opt, x, y;\n    Matrix res;\n    while (m--)\n    {\n        scanf(\"%d%d%d\", &opt, &x, &y);\n        if (opt == 1)\n        {\n            if (x > y) swap(x, y);//\u9898\u76ee\u4e2d\u4e0d\u4fdd\u8bc1x < y,\u5f53x > y\u65f6,\u9700\u4ea4\u6362\n            res = tree.query(1, n, x, y, 1);\n            printf(\"%d\\n\", max(res.v[1][0], res.v[1][2]));//\u6ce8\u610f\u9700\u9009f[i],g[i]\u4e2d\u6700\u4f18\u7684\n        }\n        else\n            tree.modify(1, n, x, 1, y);\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1562053675,
        "uid": 121638,
        "name": "Nickel_Angel",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "/*\u672c\u9898\u6c42\u7684\u662f\u6307\u5b9a\u533a\u95f4\u7684\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c\uff0c\u548c\u5355\u70b9\u4fee\u6539\uff08\u65b9\u6cd5\u7565\u590d\u6742\uff0c\u7ebf\u6bb5\u6811\u4e0e\u52a8\u89c4\u6742\u4ea4\uff0c\u4f46\u7a7a\u95f4\u8f83\u5c0f\uff09 \n\n\u6211\u4eec\u53ef\u4ee5\u7528\u7ed3\u6784\u4f53\u7ef4\u62a4\u6bcf\u4e2a\u4e8c\u5206\u533a\u95f4\u7684\u603b\u548c\uff08to\uff09,\u4ece\u5de6\u8fb9\u5f00\u59cb\u7684\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c\uff08le\uff09, \u4ece\u53f3\u8fb9\u5f00\u59cb\u7684\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c\uff08ri\uff09 \n\u53ca\u8be5\u533a\u95f4\u7684\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c\uff08v\uff09 \n\n\u518d\u7528\u5168\u5c40\u91cfmaxn\u5b58\u5f53\u524d\u7684\u6700\u5927\u548c(\u53ea\u5305\u542b\u6a2a\u8de8\u4e24\u4e2a\u6216\u4e24\u4e2a\u4ee5\u4e0a\u533a\u95f4\u7684\u60c5\u51b5)\uff0cmaxa\u5b58\u4ee5\u5f53\u524d\u533a\u95f4\u7ed3\u5c3e\u7684\u6700\u5927\u548c\uff0c\u8fd9\u4e2a\u4f9d\u636e\u662fcx\u51fd\u6570\u7684\u6df1\u641c\u987a\u5e8f\u662f\u4ece\u5de6\u5230\u53f3 \n\ncx\u51fd\u6570\u7684\u8fd4\u56de\u503c\u662f\u5404\u4e2a\u5b50\u533a\u95f4\u7684\u5404\u81ea\u7684\u6700\u5927\u548c\u4e2d\u7684\u6700\u5927\u503c\uff0c\u6700\u540e\u8f93\u51fa\u7684\u662f\u5b83\u4e0emaxn \u6bd4\u8f83\u7684\u7ed3\u679c \n*/\n\n\n//\u5751\u70b9\uff1a\uff1aa\u53ef\u80fd\u5927\u4e8eb \n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,maxa,maxn;\nstruct ee\n{\n\tint le,ri,v,to;\n}a[2000004];\n\nvoid init()\n{\n\tfreopen(\"1.txt\",\"r\",stdin);\n}\n\nvoid js(int l,int r,int z)//\u5efa\u6811 \n{\n\tif(l==r)\n\t{\n\t\tscanf(\"%d\",&a[z].v);\n\t\ta[z].le=a[z].v;\n\t\ta[z].ri=a[z].v;\n\t\ta[z].to=a[z].v;\n\t\treturn;                                            \n\t}\n\tint mid=(l+r)>>1;\n\tint zz=z<<1;\n\tint y=zz|1;\n\tjs(l,mid,zz);\n\tjs(mid+1,r,y);\n\ta[z].v=max(a[zz].v,max(a[zz].ri+a[y].le,a[y].v));\n\ta[z].le=max(a[zz].le,a[zz].to+a[y].le);\n\ta[z].ri=max(a[y].ri,a[y].to+a[zz].ri);\n\ta[z].to=a[zz].to+a[y].to;\n}\n\nint cx(int l,int r,int x,int y,int z)\n{\n\tif(x<=l&&y>=r) \n\t{\n\t\tif(x==l)\n\t\t{\n\t\t\t    maxa=a[z].ri;\n\t\t\t    maxn=maxa;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(y!=r)\n\t\t\t{\n\t\t\t    maxn=max(max(maxn,a[z].ri),max(maxa+a[z].to,maxa+a[z].le));\n\t\t\t    maxa=max(maxa+a[z].to,a[z].ri);//\u8fd9\u91cc\u662f\u4fdd\u8bc1\u4ee5\u5f53\u524d\u533a\u95f4\u7ed3\u5c3e\u7684\u5b50\u6bb5\u548c\u6700\u5927 \n\t\t    }\n\t\t    else\n\t\t    {\n\t\t\t    maxa=maxa+a[z].le;\n\t\t\t    if(maxa>maxn) maxn=maxa;\n\t\t    }//\u52a8\u89c4 \n\t\t}\n\t\treturn a[z].v;\n\t}\n\tint mid=(l+r)>>1;\n\tint zz=z<<1;\n\tint maxans=-1<<31;\n\tif(x<=mid) maxans=cx(l,mid,x,y,zz);\n\tif(y>mid) maxans=max(maxans,cx(mid+1,r,x,y,zz|1));\n\treturn maxans;\n}\n\nvoid xg(int l,int r,int x,int y,int z)//\u4fee\u6539\u65f6\u548c\u5efa\u6811\u5f88\u50cf \n{\n\tif(l==r)\n\t{\n\t\ta[z].v=y;\n\t\ta[z].le=a[z].v;\n\t\ta[z].ri=a[z].v;\n\t\ta[z].to=a[z].v;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tint zz=z<<1;\n\tint yy=zz|1;\n\tif(x<=mid) xg(l,mid,x,y,zz);\n\telse xg(mid+1,r,x,y,yy);\n\ta[z].v=max(a[zz].v,max(a[zz].ri+a[yy].le,a[yy].v));\n\ta[z].le=max(a[zz].le,a[zz].to+a[yy].le);\n\ta[z].ri=max(a[yy].ri,a[yy].to+a[zz].ri);\n\ta[z].to=a[zz].to+a[yy].to;//\u7ef4\u62a4\n}\n\nvoid readdata()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tjs(1,n,1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint k,a,b;\n\t\tscanf(\"%d%d%d\",&k,&a,&b);\n\t\tif(k==1) \n\t\t{\n\t\t\tint c;\n\t\t    if(a>b) c=cx(1,n,b,a,1);\n\t\t\telse c=cx(1,n,a,b,1);\n\t\t\tprintf(\"%d\\n\",max(c,maxn));\n\t\t}\n\t\telse xg(1,n,a,b,1);\n\t}\n}\n\nint main()\n{\n\t//init();\n\treaddata();\n\treturn 0;\n}\n```",
        "postTime": 1532661032,
        "uid": 38643,
        "name": "Mandy",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u63a8\u9500\u4e2a\u4eba\u535a\u5ba2 [$Blog$](https://trifoliate-orange.github.io/2019/08/07/%E3%80%90Luogu%20P4513%E3%80%91%E5%B0%8F%E7%99%BD%E9%80%9B%E5%85%AC%E5%9B%AD/)\n\n\u7ebf\u6bb5\u6811\u9898\uff0c\u7565\u5fae\u8fd8\u7528\u5230\u4e86\u4e00\u4e9b\u5206\u6cbb\u601d\u60f3\u6765\u6c42\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\n[\u539f\u9898](https://www.luogu.org/problem/P4513)\n\n**\u9898\u610f\u7b80\u8ff0**\uff1a\u7ef4\u62a4\u4e00\u4e2a\u6709$n$\u4e2a\u5143\u7d20\u7684\u5e8f\u5217\uff0c\u652f\u6301\u5355\u70b9\u4fee\u6539\u548c\u67e5\u8be2\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u3002\u5176\u4e2d$n<=500000$\uff0c\u64cd\u4f5c\u6570$m<=100000$\u3002\n\n**\u5206\u6790**\uff1a\u672c\u9898\u8981\u6c42\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u3002\u9759\u6001\u7684\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\u6709\u4e24\u79cd\u6c42\u6cd5\uff1a\u4e00\u662f\u52a8\u6001\u89c4\u5212\uff0c\u4e8c\u662f\u5206\u6cbb\u3002\n\n\u5982\u679c\u8981\u7528\u52a8\u6001\u89c4\u5212\u7684\u8bdd\uff0c\u663e\u7136\u6bcf\u4e00\u6b21\u4fee\u6539\u4e4b\u540e\u4f60\u90fd\u8981\u518d\u8dd1\u4e00\u904d\uff0c\u8fd9\u6837\u7684\u590d\u6742\u5ea6\u662f\u65e0\u6cd5\u63a5\u53d7\u7684\u3002\n\n\u8003\u8651\u5206\u6cbb\u3002\u8bbe\u533a\u95f4\u4e2d\u70b9\u4e3a$mid$\uff0c\u4e00\u4e2a\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\u65e0\u975e\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\n1. \u5c31\u662fmid\u5de6\u8fb9\u7684\u6700\u5927\u5b50\u6bb5\u548c\n2. \u5c31\u662fmid\u53f3\u8fb9\u7684\u6700\u5927\u5b50\u6bb5\u548c\n3. \u6a2a\u8de8mid\uff0c\u5de6\u8fb9\u6709\u4e00\u90e8\u5206\uff0c\u53f3\u8fb9\u6709\u4e00\u90e8\u5206\n\n\u4e00\u4e8c\u4e24\u79cd\u60c5\u51b5\u90fd\u5f88\u7b80\u5355\uff0c\u90a3\u4e48\u7b2c\u4e09\u79cd\u60c5\u51b5\u4e0b\uff0c\u5bb9\u6613\u60f3\u5230\u4ee5$mid$\u4e3a\u754c\u9650\uff0c\u5c06\u6574\u4e2a\u533a\u95f4\u5206\u6210\u4e24\u90e8\u5206\uff0c\u90a3\u4e48\u201c\u6a2a\u8de8$mid$\u7684\u6700\u5927\u5b50\u6bb5\u548c\u201d\u5373\u4e3a\u201c\u5de6\u533a\u95f4\u7684\u53f3\u7aef\u5411\u5de6\u5ef6\u4f38\u7684\u6700\u5927\u5b50\u6bb5\u548c\u201d\u52a0\u4e0a\u201c\u53f3\u533a\u95f4\u7684\u5de6\u7aef\u5411\u53f3\u5ef6\u4f38\u7684\u6700\u5927\u5b50\u6bb5\u548c\u201d\u3002\n\n![\u770b\u56fe\u8bf4\u8bdd](https://s2.ax1x.com/2019/08/07/eopTSJ.png)\n\n~~(\u5c0f\u5410\u69fd\uff1asm.ms\u600e\u4e48\u6302\u4e86\uff0c\u53ea\u80fd\u5148\u7528\u5176\u4ed6\u56fe\u5e8a\u4e86)~~\n\n\u975e\u5e38\u660e\u663e\u7684\u4e8c\u5206\uff0c\u7ebf\u6bb5\u6811\u4f7f\u7528\u53ef\u80fd\u3002\u5e76\u4e14\u8fd9\u6837\u7684\u8bdd\u7ebf\u6bb5\u6811\u5355\u4e2a\u8282\u70b9\u5b58\u50a8\u7684\u4fe1\u606f\u4e5f\u5c31\u5f97\u5230\u4e86\uff1a\n```\nstruct node\n{\n    int lv;//\u672c\u533a\u95f4\u4ece\u5de6\u7aef\u5411\u53f3\u5ef6\u4f38\u7684\u6700\u5927\u5b50\u6bb5\u548c\n    int rv;//\u672c\u533a\u95f4\u4ece\u53f3\u7aef\u5411\u5de6\u5ef6\u4f38\u7684\u6700\u5927\u5b50\u6bb5\u548c\n    int tot;//\u672c\u533a\u95f4\u4e4b\u548c\n    int l,r,ans;//\u5de6\u8fb9\u754c\uff0c\u53f3\u8fb9\u754c\uff0c\u4ee5\u53ca\u672c\u533a\u95f4\u7684\u3010\u771f.\u6700\u5927\u5b50\u6bb5\u548c\u3011\n};\n```\n\u975e\u5e38\u660e\u663e\uff0c\u5bf9\u4e8e\u53f6\u5b50\u7ed3\u70b9\uff0c\u6709`tree[p].lv=tree[p].rv=tree[p].tot=tree[p].ans`\u3002\n\n\u56e0\u4e3a\u53ea\u8981\u6c42\u5355\u70b9\u66f4\u65b0\uff0c\u6240\u4ee5\u8fd9\u91cc\u7684\u66f4\u65b0\u975e\u5e38\u597d\u529e\u3002\u53ea\u9700\u8981\u9012\u5f52\u5230\u53f6\u5b50\u7ed3\u70b9\uff0c\u7136\u540e\u4e00\u5c42\u4e00\u5c42\u5411\u4e0a\u4f20\u5c31\u53ef\u4ee5\u4e86\u3002\n\n**\u4ee3\u7801**\n```cpp\n//segtree by \u67b3\u691b\u660e\u9a7f\u5899\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=500001;\nstruct node\n{\n    int lv,rv,tot,l,r,ans;\n}tree[N*4];\n\nint n,m;\n\nvoid read(int &x)\n{\n    int res=0,f=1;char ch;\n    for(;!isdigit(ch);ch=getchar()) if (ch=='-') f=-1;\n    for(;isdigit(ch);ch=getchar()) res=res*10+(ch-'0');\n    x=res*f;\n}\nvoid pushup(int p)\n{\n    tree[p].lv=max(tree[p<<1].lv,tree[p<<1].tot+tree[(p<<1)+1].lv);\n    tree[p].rv=max(tree[(p<<1)+1].rv,tree[(p<<1)+1].tot+tree[p<<1].rv);\n    tree[p].tot=tree[p<<1].tot+tree[(p<<1)+1].tot;\n    tree[p].ans=max(tree[p<<1].ans,max(tree[(p<<1)+1].ans,tree[p<<1].rv+tree[(p<<1)+1].lv));\n}\nvoid build(int l,int r,int p)\n{\n    tree[p].l=l;tree[p].r=r;\n    if (l==r)\n    {\n    \tint x;read(x);\n        tree[p].rv=tree[p].lv=tree[p].tot=tree[p].ans=x;\n        return;\n    }\n    int mid=(l+r)>>1;\n    build(l,mid,p<<1);build(mid+1,r,(p<<1)+1);\n    pushup(p);\n}\nvoid updata(int x,int y,int p)\n{\n    if (tree[p].l==tree[p].r)\n    {\n        tree[p].rv=tree[p].lv=tree[p].tot=tree[p].ans=y;\n        return;\n    }\n    int mid=(tree[p].l+tree[p].r)>>1;\n    if (x<=mid) updata(x,y,p<<1);\n    else updata(x,y,(p<<1)+1);\n    pushup(p);\n}\nnode query(int x,int y,int p)\n{\n    if (x<=tree[p].l&&tree[p].r<=y) return tree[p];\n    int mid=(tree[p].l+tree[p].r)>>1;\n    if (y<=mid) return query(x,y,p<<1);\n    else if (x>mid) return query(x,y,(p<<1)+1);\n    else\n    {\n        node t,t1=query(x,mid,(p<<1)),t2=query(mid+1,y,(p<<1)+1);\n        t.lv=max(t1.lv,t1.tot+t2.lv);\n        t.rv=max(t1.rv+t2.tot,t2.rv);\n        t.tot=t1.tot+t2.tot;\n        t.ans=max(max(t1.ans,t2.ans),t1.rv+t2.lv);\n        return t;\n    }\n}\n\nint main()\n{\n    read(n);read(m);\n    build(1,n,1);\n    for(int i=1;i<=m;i++)\n    {\n        int k,x,y;\n        read(k);read(x);read(y);\n        if (k==1)\n        {\n            if (x>y) swap(x,y);\n            printf(\"%d\\n\",query(x,y,1).ans);\n        }\n        if (k==2)\n        {\n            updata(x,y,1);\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1565186789,
        "uid": 97926,
        "name": "\u67b3\u691b\u660e\u9a7f\u5899",
        "ccfLevel": 0,
        "title": "P4513 \u5c0f\u767d\u901b\u516c\u56ed"
    },
    {
        "content": "**\u6765\u535a\u5ba2\u98df\u7528\u4f53\u9a8c\u66f4\u4f73\u54e6\uff1a<https://yjzoier.gitee.io/hexo/p/21a9.html>**\n\n~~\u6211\u624d\u4e0d\u4f1a\u544a\u8bc9\u4f60\u4eec\u589e\u52a0\u535a\u5ba2\u7684\u8bbf\u95ee\u91cf\u662f\u6211\u5199\u9898\u89e3\u7684\u52a8\u529b\u5462~~\n\n## \u9898\u76ee\u5927\u610f\n\n`\uff08\u52a8\u6001\u6700\u5927\u5b50\u6bb5\u548c\u95ee\u9898\uff09`\u7ed9\u51fa\u4e00\u4e2a $n$ \u4e2a\u6570\u7684\u6570\u5217 $a_i$\uff0c\u9700\u8981\u652f\u6301 $2$ \u4e2a\u64cd\u4f5c\uff1a\n\n1. \u67e5\u8be2\u533a\u95f4 $[a,b]$ \u4e0a\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u5373 $[a,b]$ \u4e0a**\u8fde\u7eed**\u7684\u548c\u6700\u5927\u7684\u4e00\u6bb5\uff08$\\max \\{\\sum_{i=l}^r a_i \\ | \\ l, r \\in [a, b] \\}$\uff09\n2. \u4fee\u6539\u7b2c $s$ \u4e2a\u6570\u4e3a $p$\uff0c\u5373\u4fee\u6539\u540e $a_s = p$\n\n## \u9898\u89e3\n\n\u8fd9\u662f\u7ebf\u6bb5\u6811\u7684\u7ecf\u5178\u9898\u76ee\u4e4b\u4e00\uff0c\u9996\u5148\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u7ef4\u62a4**\u5355\u70b9\u4fee\u6539**\u548c**\u533a\u95f4\u67e5\u8be2**\uff0c\u6240\u4ee5\u6211\u4eec\u4f1a\u60f3\u5230\u7ebf\u6bb5\u6811\uff1b\u56e0\u4e3a\u662f\u5355\u70b9\u4fee\u6539\u6240\u4ee5\u4e0d\u9700\u8981\u6807\u8bb0\u3002\n\n\u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u4fe1\u606f\u9700\u8981\u6ee1\u8db3**\u533a\u95f4\u52a0\u6cd5**\u7684\u6027\u8d28\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u8003\u8651\u5982\u4f55\u4ece\u4e24\u4e2a\u5b50\u533a\u95f4\u5408\u5e76\u3002\u4f46\u662f\uff0c\u5982\u679c\u5355\u5355\u8bb0\u5f55\u5b50\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u662f\u4e0d\u8db3\u4ee5\u5f97\u5230\u6574\u4e2a\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u8de8\u8d8a\u4e24\u4e2a\u533a\u95f4\u7684\u60c5\u51b5\uff0c\u5c31\u50cf\u8fd9\u6837\uff1a\n\n![20190201-01.png](https://i.loli.net/2019/02/01/5c5408bdd0c58.png)\n\n\u90a3\u4e48\u5982\u4f55\u7ef4\u62a4\u5b50\u533a\u95f4\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u624d\u80fd\u5f97\u5230\u8fd9\u79cd\u8de8\u533a\u95f4\u7684\u6700\u5927\u503c\u5462\uff1f\u6211\u4eec\u5206\u6790\u4e00\u4e0b\u8de8\u533a\u95f4\u6709\u4ec0\u4e48\u7279\u70b9\uff0c\u53d1\u73b0\u5b83\u5176\u5b9e\u662f\u7531\u5de6\u53f3\u4e24\u533a\u95f4\u62fc\u5408\u800c\u6210\u7684\uff0c\u800c\u8fd9\u4e24\u4e2a\u533a\u95f4\u4e00\u4e2a\u662f **$[l, mid]$ \u4e0a\u4ee5\u53f3\u7aef\u70b9\u4e3a\u4e00\u7aef\u7684\u533a\u95f4**\uff0c\u53e6\u4e00\u4e2a\u662f**$[mid + 1, r]$ \u4e0a\u4ee5\u5de6\u7aef\u70b9\u4e3a\u4e00\u7aef\u7684\u533a\u95f4**\u3002\u8fdb\u4e00\u6b65\uff0c\u5176\u5b9e\u8fd9\u4e24\u4e2a\u533a\u95f4\u90fd\u662f\u7b26\u5408\u4e0a\u8ff0\u6761\u4ef6\u533a\u95f4\u4e2d\u7684\u6700\u5927\u503c\u3002\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u989d\u5916\u7ef4\u62a4\u6bcf\u4e2a\u533a\u95f4\u4e2d\u4ee5\u67d0\u4e00\u7aef\u4e3a\u7aef\u70b9\u7684\u6700\u5927\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\n\n### \u5b9e\u73b0\n\n*\u4e0a\u9762\u7684\u5185\u5bb9\u53ef\u80fd\u4f60\u6ca1\u6709\uff0c\u4f46\u662f\u4e0d\u91cd\u8981\uff0c\u4f60\u53ea\u8981\u770b\u61c2\u8fd9\u4e00\u6bb5\u5c31\u53ef\u4ee5\u4e86\u3002*\n\n\u7efc\u4e0a\uff0c\u6211\u4eec\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u7684\u6bcf\u4e2a\u533a\u95f4 $[l, r]$\uff0c\u9700\u8981\u7ef4\u62a4\u7684\u4fe1\u606f\u6709\uff1a\n\n1. \u533a\u95f4 $[l, r]$ \u4e0a\u7684\u6700\u5927\u5b50\u6bb5\u548c\n2. \u533a\u95f4 $[l, r]$ \u4e0a\u4ee5 $l$ \u4e3a\u5de6\u7aef\u70b9\u7684\u6700\u5927\u5b50\u6bb5\u548c\n3. \u533a\u95f4 $[l, r]$ \u4e0a\u4ee5 $r$ \u4e3a\u53f3\u7aef\u70b9\u7684\u6700\u5927\u5b50\u6bb5\u548c\n4. \u533a\u95f4 $[l,r]$ \u4e0a\u6240\u6709\u5143\u7d20\u7684\u548c\uff0c\u5373 $\\sum_{i=l}^r a_i$\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ed3\u6784\u4f53\u6765\u8bb0\u5f55\u8fd9\u4e9b\u4fe1\u606f\uff0c\u6211\u4eec\u53ef\u4ee5\u628a `+` \u8fd0\u7b97\u7b26\u91cd\u8f7d\u6765\u7ef4\u62a4**\u5408\u5e76**\u64cd\u4f5c\uff1a\n\n```c++\nstruct res {\n    int all, left, right, sum;\n    res operator+(const res &b){\n        return (res){\n            max(all, b.all, right + b.left),\n            max(left, b.left + sum),\n            max(b.right, right + b.sum),\n            sum + b.sum\n        };\n    }\n} val[N << 2];\n```\n\n\n\n## \u4ee3\u7801\n\n```c++\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\nusing namespace std;\n\nconst int N = 500007;\n\nint n, m, a[N];\n\nint max(int a, int b, int c) {\n    return max(a, max(b, c));\n}\n\nstruct res {\n    int all, left, right, sum;\n    res operator+(const res &b){\n        return (res){\n            max(all, b.all, right + b.left),\n            max(left, b.left + sum),\n            max(b.right, right + b.sum),\n            sum + b.sum\n        };\n    }\n} val[N << 2];\n\nvoid build(int rt, int l, int r){\n    if (l == r) {\n        val[rt] = (res){a[l], a[l], a[l], a[l]};\n        return;\n    }\n    int m = (l + r) >> 1;\n    build(rt << 1, l, m);\n    build(rt << 1 | 1, m+1, r);\n    val[rt] = val[rt << 1] + val[rt << 1 | 1];\n}\n\nres query(int rt, int l, int r, int p, int q){\n    if (p <= l && r <= q) return val[rt];\n    int m = (l + r) >> 1;\n    if (q <= m) return query(rt << 1, l, m, p, q);\n    else if (p > m) return query(rt << 1 | 1, m+1, r, p, q);\n    else return query(rt << 1, l, m, p, m) + query(rt << 1 | 1, m+1, r, m+1, q);\n}\n\nvoid change(int rt, int l, int r, int p, int q){\n    if (l == r) {\n        val[rt] = (res){q, q, q, q};\n        return;\n    }\n    int m = (l + r) >> 1;\n    if (p <= m) change(rt << 1, l, m, p, q);\n    else change(rt << 1 | 1, m+1, r, p, q);\n    val[rt] = val[rt << 1] + val[rt << 1 | 1];\n}\n\nint main(){\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 1; i <= n; ++i)\n        scanf(\"%d\", &a[i]);\n    build(1, 1, n);\n    for (int i = 1; i <= m; ++i){\n        int k, x, y; \n        scanf(\"%d%d%d\", &k, &x, &y);\n        if (k == 1) {\n            if (x > y) swap(x, y);\n            printf(\"%d\\n\", query(1, 1, n, x, y).all);\n        } else {\n            change(1, 1, n, x, y);\n        }\n    }\n    return 0;\n}\n```\n\n",
        "postTime": 1549011787,
        "uid": 31635,
        "name": "yingjz",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u9898\u610f \u7ed9\u5b9an\u4e2a\u6570 \u5e76\u4e14\u4e0d\u505c\u5730\u5355\u70b9\u4fee\u6539 \u8be2\u95ee[l,r]\u533a\u95f4\u91cc\u7684\u8fde\u7eed\u5b50\u6bb5\u7684\u6700\u5927\u503c\n\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811 \u5e76\u4e14\u8fd0\u7528\u4e00\u70b9dp\u77e5\u8bc6\n\u4f46\u662f\u5982\u4f55\u7ef4\u62a4\uff1f\u60f3\u5230\u4e86P2253\u90a3\u9053\u7ebf\u6bb5\u6811XOR\u6a21\u677f \u5bf9\u4e8e\u4e00\u4e2a\u8282\u70b9 \u6211\u4eec\u8003\u8651\u7ef4\u62a4\u5b83\u7684\u533a\u95f4\u4ece\u5de6\u5230\u53f3\u5305\u542b\u6700\u5de6\u7aef\u70b9\u7684\u6700\u5927\u503c \u4ee5\u53ca\u4ece\u53f3\u5230\u5de6\u7684\u6700\u5927\u503c \u4ee5\u53ca\u6574\u4f53\u7684\u6700\u5927\u503c \u4ee5\u53ca\u5f53\u524d\u533a\u95f4\u7684\u6743\u503c\u548c\u3002\n\n\u90a3\u8f6c\u79fb\u65b9\u7a0b\u5c31\u51fa\u6765\u4e86\ntree[now].lmax=max(tree[lson].lmax,tree[lson].v+tree[rson].lmax);\n\ttree[now].rmax=max(tree[rson].rmax,tree[rson].v+tree[lson].rmax);\n\ttree[now].allmax=max(max(tree[lson].allmax,tree[rson].allmax),(tree[rson].lmax+tree[lson].rmax));\n\ttree[now].v=tree[lson].v+tree[rson].v;\n\nquery\u9700\u8981\u5206\u60c5\u51b5\u8ba8\u8bba \u5177\u4f53\u770b\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define N 500005\n#define lson 2*now\n#define rson 2*now+1\nusing namespace std;\nint n,m,val[N];\nstruct node\n{\n\tint l,r,lmax,rmax,allmax,v;\n}tree[4*N];\ninline void build(int l,int r,int now)\n{\n\ttree[now].l=l,tree[now].r=r;\n\tif(l==r)\n\t{\n\t\ttree[now].lmax=tree[now].rmax=tree[now].allmax=tree[now].v=val[l];\n\t\treturn;\n\t}\n\tint m=(l+r)>>1;\n\tbuild(l,m,lson);\n\tbuild(m+1,r,rson);\n\ttree[now].lmax=max(tree[lson].lmax,tree[lson].v+tree[rson].lmax);\n\ttree[now].rmax=max(tree[rson].rmax,tree[rson].v+tree[lson].rmax);\n\ttree[now].allmax=max(max(tree[lson].allmax,tree[rson].allmax),(tree[rson].lmax+tree[lson].rmax));\n\ttree[now].v=tree[lson].v+tree[rson].v;\n}\nint ans=INT_MIN;\ninline node query(int l,int r,int now)\n{\n\tif(l<=tree[now].l&&tree[now].r<=r)\n\t{\n\t\treturn tree[now];\n\t}\t\n\tint m=(tree[now].l+tree[now].r)>>1;\n\tif(r<=m)\treturn query(l,r,lson);\n\telse if(m<l)\treturn query(l,r,rson);\n\telse\n\t{\n\t\tnode t,t1,t2;\n\t\tt1=query(l,r,lson);\n\t\tt2=query(l,r,rson);\n\t\tt.lmax=max(t1.lmax,t1.v+t2.lmax);\n\t\tt.rmax=max(t2.rmax,t2.v+t1.rmax);\n\t\tt.allmax=max(max(t1.allmax,t2.allmax),(t2.lmax+t1.rmax));\n\t\treturn t;\n\t}\n}\ninline void update(int num,int k,int now)\n{\n\tif(tree[now].l==tree[now].r)\n\t{\n\t\ttree[now].lmax=tree[now].rmax=tree[now].allmax=tree[now].v=k;\n\t\treturn;\n\t}\n\tint m=(tree[now].l+tree[now].r)>>1;\n\tif(num<=m)\tupdate(num,k,lson);\n\telse update(num,k,rson);\n\t\n\ttree[now].lmax=max(tree[lson].lmax,tree[lson].v+tree[rson].lmax);\n\ttree[now].rmax=max(tree[rson].rmax,tree[rson].v+tree[lson].rmax);\n\ttree[now].allmax=max(max(tree[lson].allmax,tree[rson].allmax),(tree[rson].lmax+tree[lson].rmax));\n\ttree[now].v=tree[lson].v+tree[rson].v;\n}\nint main()\n{\n\tios::sync_with_stdio(false);\n\tcin.tie(NULL),cout.tie(NULL); \n\t\n\tcin>>n>>m;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcin>>val[i];\n\t}\n\tbuild(1,n,1);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint opt,l,r;\n\t\tcin>>opt;\n\t\tif(opt==1)\n\t\t{\n\t\t\tcin>>l>>r;\n\t\t\tif(l>r)\tswap(l,r);\n\t\t\tcout<<query(l,r,1).allmax<<endl;\n\t\t}\n\t\tif(opt==2)\n\t\t{\n\t\t\tcin>>l>>r;\n\t\t\tupdate(l,r,1);\n\t\t}\n\t}\n\treturn 0;\n} \n```",
        "postTime": 1531801379,
        "uid": 60299,
        "name": "Patrickpwq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u5e26\u5355\u70b9\u4fee\u6539\u6700\u5927\u5b50\u6bb5\u548c\n\n\u5047\u5982\u6211\u4eec\u8981\u6c421\u5230n\u4e2d\uff0c\u9759\u6001\u533a\u95f4\u5b50\u6bb5\u548c\u600e\u4e48\u641e\uff1f\n\n\u5c31\u50cf\u8fd9\u6837\uff1a\n\n```\nf[i]=max(a[i],f[i-1]+a[i]);//f[j]\u8868\u793a\u4ee5j\u7ed3\u5c3e\u7684\u6700\u5927\u5b50\u6bb5\u548c\n```\n\n\u663e\u7136\u4e0e\u524d\u9762\u7684\u8fde\u4e0a\u6216\u8005\u518d\u53e6\u8d77\u4e00\u4e2a\u4e24\u79cd\u60c5\u51b5\u3002\u82e5\u53e6\u8d77\u4e00\u4e2a\u5219f[j-1]<0\uff0c\u6b64\u65f6\u4e5f\u4e0d\u4f1a\u51fa\u73b0\u201c\u540e\u6765\u9009\u4e86\u5b83\u800c\u503c\u66f4\u5927\u201d\u7684\u60c5\u51b5\uff0c\u663e\u7136\u51cf\u53bb\u4e00\u4e2a\u8d1f\u6570\u503c\u662f\u4f1a\u53d8\u5f97\u66f4\u5927\u7684\n\n------------\n\n\u56de\u5230\u8fd9\u9053\u9898\u3002\u770b\u5230\u5355\u70b9\u4fee\u6539\uff0c\u53c8\u8981\u7ef4\u62a4\u533a\u95f4\u7684\u4fe1\u606f\uff0c\u60f3\u5230\u7ebf\u6bb5\u6811\u3002\u4f46\u7ebf\u6bb5\u6811\u6240\u7ef4\u62a4\u7684\u5185\u5bb9\u5fc5\u987b\u5177\u6709\u533a\u95f4\u53ef\u5408\u5e76\u6027\u3002\u82e5\u6211\u4eec\u76f4\u63a5\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u663e\u7136\u65e0\u6cd5\u5408\u5e76\u3002\n\n\u770b\u4e0a\u6587\u4e2d\uff0c\u6211\u4eec\u4e3a\u4f55\u53ef\u4ee5\u8fdb\u884c\u9012\u63a8\uff1f**\u56e0\u4e3a\u6211\u4eec\u786e\u5b9a\u4e86\u4e00\u4e2a\u70b9\uff0c\u5373\u4ee5i\u7ed3\u5c3e**\n\n\u6240\u4ee5\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e2d\u7ef4\u62a4\u4ee5\u5176\u7ef4\u62a4\u533a\u95f4\u5de6\u7aef\u70b9\u5f00\u59cb\u3001\u53f3\u7aef\u70b9\u5f00\u59cb\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u53ca\u6574\u4e2a\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\n```\nstruct p{\n\tint fl/*\u5de6\u8fb9\u5f00\u59cb*/,fr/*\u53f3\u8fb9\u5f00\u59cb*/,mx/*\u6574\u6bb5\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c*/;\n}tree[maxn<<2];\n```\n\ntree[k].mx\u8981\u4e48\u5c31\u662f\u5de6\u513f\u5b50\u6216\u53f3\u513f\u5b50\u7684mx\uff0c\u6216\u8005\u8de8\u8d8a\u4e86\u5de6\u53f3\u513f\u5b50\u5206\u522b\u7ef4\u62a4\u7684\u533a\u95f4\uff0c\u5373tree[k<<1].fr+tree[k<<1|1].fl\n\nmx\u80fd\u591f\u7ef4\u62a4\u4e86\uff0cfl\u548cfr\u53c8\u600e\u4e48\u66f4\u65b0\u5462\uff1f\n\n\u5bf9\u4e8efl\uff0c\u8981\u4e48\u5176\u5305\u542b\u7684\u533a\u95f4\u5c31\u53ea\u5728\u5de6\u513f\u5b50\u91cc\uff0c\u8981\u4e48\u8de8\u8d8a\u4e86\u5de6\u533a\u95f4\uff0c\u5230\u8fbe\u4e86\u53f3\u533a\u95f4\uff0c\u4e5f\u5c31\u662f\u8bf4\u5305\u542b\u4e86\u5b8c\u6574\u7684\u5de6\u533a\u95f4+\u53f3\u533a\u95f4\u90e8\u5206\n\n\u6240\u4ee5\u6211\u4eec\u8fd8\u5f97\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u548c\n\n\u5199\u51fa\u6765\u957f\u8fd9\u6837\uff1a\n\n```\ntree[k].fl=max(tree[k<<1].fl,tree[k<<1].w/*w\u7ef4\u62a4\u533a\u95f4\u548c*/+tree[k<<1|1].fl);\n```\n\u53f3\u513f\u5b50\u540c\u7406\n\n### \u4f60\u4ee5\u4e3a\u8fd9\u5c31\u5b8c\u4e86\uff1f\n \n~~\u771f\u5b8c\u4e86~~ \u8fd8\u6709\u4e00\u4e2a\u91cd\u8981\u7684\u73a9\u610f\u513f\uff0c\u53eb\u505a\u67e5\u8be2\u5462\n\n## \u5173\u4e8e\u67e5\u8be2\n\n\u4e2a\u4eba\u89c9\u5f97\u8fd9\u662f\u6211\u5728\u8fd9\u9898\u4e0a\u4e00\u4e2a\u6bd4\u8f83\u5927\u7684\u6536\u83b7\n\n\u4ee5\u524d\u505a\u7684\u9898\u5927\u591a\u90fd\u662f\u7ef4\u62a4\u533a\u95f4\u548c\uff0c\u6240\u4ee5\u6211\u7684\u67e5\u8be2\u4ee3\u7801\u90fd\u957f\u8fd9\u6837\uff1a\n\n```\nvoid query(int k,int kl,int kr,int x,int y){\n\tif(kl>=x&&kr<=y){\n\t\tsumans+=tree[k].w;\n\t\treturn ;\n\t}\n\tint mid=(kl+kr)>>1;\n\tif(mid>=x) query(k<<1,kl,mid,x,y);\n\tif(mid<y) query(k<<1|1,mid+1,kr,x,y);\n}\n```\n\u8fd9\u4e00\u6b21\u7406\u6240\u5f53\u7136\u5730\u5199\u6210\u4e86\u8fd9\u6837\uff1a\n```\nvoid query(int k,int kl,int kr,int x,int y){\n\tif(kl>=x&&kr<=y){\n\t\tans=max(ans,tree[k].mx);\n\t\treturn ;\n\t}\n\tint mid=(kl+kr)>>1;\n\tif(mid>=x) query(k<<1,kl,mid,x,y);\n\tif(mid<y) query(k<<1|1,mid+1,kr,x,y);\n}\n```\n\u542c\u53d6WA\u58f0\u4e00\u7247...\u5982\u679c\u6700\u5927\u5b50\u6bb5\u548c\u8de8\u8d8a\u7684\u6211\u7ef4\u62a4\u7684\u4e24\u4e2a\u533a\u95f4\u5c31\u6302\u4e86...\n\n\u4e3a\u5565\u4e4b\u524d\u53ef\u4ee5\uff0c\u73b0\u5728\u4e0d\u884c\u561e\uff1f\n\n**\u56e0\u4e3a\u539f\u6765\u82e5\u67e5\u8be2\u4e24\u4e2a\u533a\u95f4\uff0c\u5408\u5e76\u8d77\u6765\u5c31\u662f\u76f4\u63a5\u8ba9sumans\u52a0\u4e0atree[k].w\uff0c\u800c\u73b0\u5728\u7684\u5408\u5e76\u5f62\u5f0f\u5374\u9700\u8981\u4e0e\u5408\u5e76\u5de6\u53f3\u513f\u5b50\u7684push_up\u64cd\u4f5c\u7c7b\u4f3c**\n\n\u6240\u4ee5\u67e5\u8be2\u51fd\u6570\u5982\u679c\u5199\u6210void\u7c7b\u578b\uff0c\u6839\u672c\u5c31\u6ca1\u529e\u6cd5\u505a\u4e86\u3002\u6240\u4ee5\u6211\u4eec**\u5b9a\u4e49\u6210\u7ed3\u6784\u4f53\u7c7b\u578b**\n\n```\np query(int k,int kl,int kr,int x,int y){\n\tbool f1=0,f2=0;//f1\u8868\u793a\u662f\u5426\u5728\u5de6\u533a\u95f4\u4e2d\uff0cf2\u8868\u793a\u662f\u5426\u5728\u53f3\u533a\u95f4\u4e2d\n\tp a,b;//\u5206\u522b\u8bb0\u5f55\u5de6\u8fb9\u90e8\u5206\u3001\u53f3\u8fb9\u90e8\u5206\u7684\u8fd4\u56de\u503c\n\tif(kl>=x&&kr<=y) return tree[k];//\u5982\u679c\u5f53\u524d\u8282\u70b9\u7ef4\u62a4\u533a\u95f4\u88ab\u8bbf\u95ee\u533a\u95f4\u5b8c\u5168\u5305\u542b\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u8fd4\u56de\n\tint mid=(kl+kr)>>1;\n\tif(mid>=x) f1=1,a=query(k<<1,kl,mid,x,y);//\u8be2\u95ee\u5de6\u513f\u5b50\n\tif(mid<y) f2=1,b=query(k<<1|1,mid+1,kr,x,y);//\u53f3\u513f\u5b50\n\tif(f1&f2){//\u5982\u679c\u8de8\u8d8a\u4e86\u4e24\u4e2a\u533a\u95f4\n\t\tp x;\n\t\tx.w=a.w+b.w;\n\t\tx.fl=max(a.fl,a.w+b.fl);\n\t\tx.fr=max(b.fr,b.w+a.fr);\n\t\tx.mx=max(max(x.fl,x.fr),a.fr+b.fl);\n\t\tx.mx=max(x.mx,max(a.mx,b.mx));//\u4e0epush_up\u7c7b\u4f3c\u3002\u5b9e\u9645\u4e0a\u5c31\u662f\u4e3a\u4e86push_up\u624d\u9700\u8981\u4f20\u7ed3\u6784\u4f53\n\t\treturn x;//\u5f80\u4e0a\u4f20\n\t}//\u53e6\u5916\u53ef\u80fd\u4f1a\u6709\u4eba\u62c5\u5fc3\u4f60\u5982\u679c\u6254\u6389\u4e86\u5de6\u8fb9\uff0c\u5b83\u53ef\u4e0d\u53ef\u80fd\u5728\u4e4b\u540e\u52a0\u5165\u6700\u5927\u5b50\u6bb5\u548c\uff08\u5c31\u662f\u672c\u4eba\u5566\n    //\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u95ee\u9898\u548c\u9759\u6001\u7684\u89e3\u91ca\u662f\u4e00\u6837\u7684\uff0c\u53ef\u4ee5\u56de\u53bb\u518d\u770b\u770b\n\tif(f1) return a;\n\tif(f2) return b;//\u8be2\u95ee\u4e86\u5de6\u513f\u5b50\u5c31\u8fd4\u56de\u5de6\u513f\u5b50\uff0c\u8be2\u95ee\u53f3\u513f\u5b50\u8fd4\u56de\u53f3\u513f\u5b50\n}\n```\n\n**\u5b9e\u9645\u4e0a\u5f88\u91cd\u8981\u7684\u4e00\u70b9\u5c31\u662f\uff0c\u975evoid\u578b\u7684\u67e5\u8be2\u51fd\u6570\u66f4\u52a0\u7075\u6d3b\uff0c\u80fd\u591f\u5e94\u5bf9\u5177\u6709\u66f4\u52a0\u795e\u5947\u7684\u5408\u5e76\u7684\u67e5\u8be2\u64cd\u4f5c**\n\n### \u5b8c\u6574\u4ee3\u7801\n```\n#include<bits/stdc++.h>\n#define maxn 500001\n#define INF 0x3f3f3f3f\nusing namespace std;\nstruct p{\n\tint fl,fr,mx,w;\n}tree[maxn<<2];\nint ans;\ninline int read(){\n\tint s=0,f=1;\n\tchar c;\n\tc=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)){s=(s<<3)+(s<<1)+c-48;c=getchar();}\n\treturn s*f;\n}\ninline int max(int x,int y){return x>y?x:y;}\ninline void pushup(int k){\n\ttree[k].w=tree[k<<1].w+tree[k<<1|1].w;\n\ttree[k].fl=max(tree[k<<1].fl,tree[k<<1].w+tree[k<<1|1].fl);\n\ttree[k].fr=max(tree[k<<1|1].fr,tree[k<<1|1].w+tree[k<<1].fr);\n\ttree[k].mx=max(max(tree[k].fl,tree[k].fr),tree[k<<1].fr+tree[k<<1|1].fl);\n\ttree[k].mx=max(max(tree[k].mx,tree[k<<1].mx),tree[k<<1|1].mx);\n\treturn ;\n}\nvoid build(int k,int l,int r){\n\tif(l==r){\n\t\ttree[k].w=read(),tree[k].fl=tree[k].fr=tree[k].mx=tree[k].w;\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(k<<1,l,mid);\n\tbuild(k<<1|1,mid+1,r);\n\tpushup(k);\n}\np query(int k,int kl,int kr,int x,int y){\n\tbool f1=0,f2=0;\n\tp a,b;\n\tif(kl>=x&&kr<=y) return tree[k];\n\tint mid=(kl+kr)>>1;\n\tif(mid>=x) f1=1,a=query(k<<1,kl,mid,x,y);\n\tif(mid<y) f2=1,b=query(k<<1|1,mid+1,kr,x,y);\n\tif(f1&f2){\n\t\tp x;\n\t\tx.w=a.w+b.w;\n\t\tx.fl=max(a.fl,a.w+b.fl);\n\t\tx.fr=max(b.fr,b.w+a.fr);\n\t\tx.mx=max(max(x.fl,x.fr),a.fr+b.fl);\n\t\tx.mx=max(x.mx,max(a.mx,b.mx));\n\t\treturn x;\n\t}\n\tif(f1) return a;\n\tif(f2) return b;\n}\nvoid add(int k,int kl,int kr,int node,int w){\n\tif(kl==kr&&kl==node){\n\t\ttree[k].fl=tree[k].fr=tree[k].mx=tree[k].w=w;\n\t\treturn ;\n\t}\n\tint mid=(kl+kr)>>1;\n\tif(mid>=node) add(k<<1,kl,mid,node,w);\n\telse add(k<<1|1,mid+1,kr,node,w);\n\tpushup(k);\n}\nint main(){\n\tint n,m;\n\tn=read(),m=read();\n\tbuild(1,1,n);\n\tfor(int i=1;i<=m;i++){\n\t\tint opt,x,y;\n\t\topt=read(),x=read(),y=read();\n\t\tif(opt==1){\n\t\t\tif(x>y) swap(x,y);\n\t\t\tprintf(\"%d\\n\",query(1,1,n,x,y).mx);\n\t\t}\n\t\tif(opt==2)\n\t\t\tadd(1,1,n,x,y);\n\t}\n\treturn 0;\n}\n```\n\n\u5b8c\u7ed3\u6492\u82b1~~~",
        "postTime": 1569596992,
        "uid": 153307,
        "name": "\u849f\u84bb365",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u7ecf\u5178\u9898\u3002\n\n\u8003\u8651\u7531\u5de6\u53f3\u4e24\u4e2a\u533a\u95f4\u5b50\u533a\u95f4$tl,tr$\u5f97\u5230\u5f53\u524d\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c$ans$\uff0c\u5219\u6709\n$$ans=max\\{\\text{tl\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff0ctr\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u8de8\u8d8a\u533a\u95f4\u4e2d\u70b9\u7684\u6700\u5927\u5b50\u6bb5\u548c}\\}$$\n \ntl\u7684\u6700\u5927\u5b50\u6bb5\u548c&tr\u7684\u6700\u5927\u5b50\u6bb5\u548c\u9012\u5f52\u6c42\u5373\u53ef\u3002  \n\u8de8\u8d8a\u4e2d\u70b9\u7684\u7684\u6700\u5927\u5b50\u6bb5\u548c=tl\u53f3\u7aef\u70b9\u8d77\u7684\u5411\u5de6\u7684\u6700\u5927\u5b50\u6bb5\u548c+tr\u5de6\u7aef\u70b9\u8d77\u7684\u5411\u53f3\u7684\u6700\u5927\u5b50\u6bb5\u548c\n\n\u6240\u4ee5\u7ebf\u6bb5\u6811\u4e0a\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u56db\u4e2a\u4fe1\u606f\uff1a\n1.  ml:\u5de6\u7aef\u70b9\u8d77\u7684\u5411\u53f3\u7684\u6700\u5927\u5b50\u6bb5\u548c  \n2.  mr:\u53f3\u7aef\u70b9\u8d77\u7684\u5411\u5de6\u7684\u6700\u5927\u5b50\u6bb5\u548c  \n3.  mx\u6574\u4e2a\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c  \n4.  sum:\u533a\u95f4\u548c\n\n\u7136\u540epushup\u65f6\u8fd9\u56db\u4e2a\u4fe1\u606f\u90fd\u66f4\u65b0\u4e00\u4e0b\n\n\u53e6\u5916\uff0c\u7531\u4e8e\u5f53\u65f6\u6211\u4e0d\u7406\u89e3\u5982\u4f55\u67e5\u8be2\uff0c\u6240\u4ee5\u518d\u89e3\u91ca\u4e00\u4e0b\uff1a  \n- \u5982\u679c\u5f53\u524d\u533a\u95f4\u88ab\u8981\u67e5\u8be2\u533a\u95f4\u5b8c\u5168\u5305\u542b\uff0c\u8fd4\u56de\u5f53\u524d\u533a\u95f4\u7684\u4fe1\u606f\n- \u5982\u679c\u8981\u67e5\u8be2\u7684\u533a\u95f4\u53ea\u5728\u5f53\u524d\u533a\u95f4\u7684\u5de6\u533a\u95f4\uff0c\u5411\u5de6\u533a\u95f4\u67e5\u8be2\n- \u5982\u679c\u8981\u67e5\u8be2\u7684\u533a\u95f4\u53ea\u5728\u5f53\u524d\u533a\u95f4\u7684\u53f3\u533a\u95f4\uff0c\u5411\u53f3\u533a\u95f4\u67e5\u8be2\n- \u5176\u4ed6\u60c5\u51b5\uff0c\u50cfpushup\u90a3\u6837\u5408\u5e76\u5de6\u53f3\u533a\u95f4\u7684\u67e5\u8be2\u7ed3\u679c\uff0c\u5e76\u8fd4\u56de\n\n```cpp\n//Wan Hong 2.2\n//home\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<cstring>\ntypedef long long ll;\ntypedef unsigned un;\ntypedef std::string str;\n#define INF (1ll<<58)\nll read()\n{\n\tchar c;\n\tll f=1,x=0;\n\tdo\n\t{\n\t\tc=getchar();\n\t\tif(c=='-')f=-1;\n\t}while(c<'0'||c>'9');\n\tdo\n\t{\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}while(c>='0'&&c<='9');\n\treturn f*x;\n}\nll max(ll a,ll b)\n{\n\treturn a>b?a:b;\n}\nll min(ll a,ll b)\n{\n    return a<b?a:b;\n}\n\n/**********/\n#define MAXN 500011\nll n,m;\nstruct Segment_Tree\n{\n\t#define rt t[num]\n\t#define tl t[num<<1]\n\t#define tr t[num<<1|1]\n\tstruct node\n\t{\n\t\tll ml,mr,mx,sum;\n\t\tnode()\n\t\t{\n\t\t\tml=mr=mx=sum=0;\n\t\t}\n\t}t[MAXN<<2|1];\n\tvoid pushup(un num)\n\t{\n\t\trt.ml=max(tl.ml,tl.sum+tr.ml);\n\t\trt.mr=max(tr.mr,tr.sum+tl.mr);\n\t\trt.mx=max(tl.mr+tr.ml,max(tl.mx,tr.mx));\n\t\trt.sum=tl.sum+tr.sum;\n\t}\n\tvoid build(un l=1,un r=n,un num=1)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\trt.ml=rt.mr=rt.mx=rt.sum=read();\n\t\t\treturn;\n\t\t}\n\t\tun mid=(l+r)>>1;\n\t\tbuild(l,mid,num<<1);build(mid+1,r,num<<1|1);\n\t\tpushup(num);\n\t}\n\tvoid modify(un p,ll x,un l=1,un r=n,un num=1)\n\t{\n\t\tif(l==r)\n\t\t{\n\t\t\tif(l==p)rt.ml=rt.mr=rt.mx=rt.sum=x;\n\t\t\treturn;\n\t\t}\n\t\tun mid=(l+r)>>1;\n\t\tif(p<=mid)modify(p,x,l,mid,num<<1);\n\t\telse modify(p,x,mid+1,r,num<<1|1);\n\t\tpushup(num);\n\t}\n\tnode query(un ql,un qr,un l=1,un r=n,un num=1)\n\t{\n\t\tif(ql<=l&&r<=qr)return rt;\n\t\tun mid=(l+r)>>1;\n\t\tif(qr<=mid)return query(ql,qr,l,mid,num<<1);\n\t\tif(ql>mid)return query(ql,qr,mid+1,r,num<<1|1);\n\t\tnode fl=query(ql,qr,l,mid,num<<1),fr=query(ql,qr,mid+1,r,num<<1|1),now;\n\t\tnow.ml=max(fl.ml,fl.sum+fr.ml);\n\t\tnow.mr=max(fr.mr,fr.sum+fl.mr);\n\t\tnow.mx=max(fl.mr+fr.ml,max(fl.mx,fr.mx));\n\t\treturn now;\n\t}\n}sgt;\n\nint main()\n{\n\tn=read(),m=read();\n\tsgt.build();\n\tfor(ll i=1;i<=m;++i)\n\t{\n\t\tll op=read();\n\t\tif(op==1)\n\t\t{\n\t\t\tll l=read(),r=read();\n\t\t\tif(l>r)std::swap(l,r);\n\t\t\tprintf(\"%lld\\n\",sgt.query(l,r).mx);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tll p=read(),x=read();\n\t\t\tsgt.modify(p,x);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1563882621,
        "uid": 73142,
        "name": "\u4e07\u5f18",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "\n\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u4e00\u4e2a\u8282\u70b9\u7ef4\u62a4$4$\u4e2a\u4e1c\u897f\uff0c\u6700\u5927\u524d\u7f00\u548c\uff0c\u6700\u5927\u540e\u7f00\u548c\uff0c\u6700\u5927\u8fde\u7eed\u548c\uff0c\u603b\u7684\u6743\u503c\u548c\uff0c\u5148\u8bf4\u6700\u5927\u524d\u7f00\u548c\u600e\u4e48\u8fdb\u884c\u7ef4\u62a4\uff0c\u6211\u4eec\u53ea\u9700\u770b\u4e00\u770b\u5de6\u513f\u5b50\u7684\u6700\u5927\u524d\u7f00\u548c\uff0c\u4f46\u662f\u6709\u53ef\u80fd\u7ec8\u70b9\u4e0d\u6b62\u5305\u542b\u5de6\u8282\u70b9\u7684\u6240\u6709\uff0c\u8fd8\u6709\u53ef\u80fd\u6709\u53f3\u8282\u70b9\u7684\u6700\u957f\u524d\u7f00\u548c\uff0c\u6240\u4ee5\u5c31\u5c06\u5de6\u513f\u5b50\u7684\u6240\u6709\u6743\u503c\u52a0\u4e0a\u53f3\u513f\u5b50\u7684\u6700\u957f\u524d\u7f00\u548c\uff0c\u7136\u540e\u5176\u4ed6\u90fd\u662f\u8fd9\u6837\u5904\u7406\u3002\u5728\u67e5\u8be2\u4e2d\u6709\u53ef\u80fd\u53f3\u7aef\u70b9\u5728$mid$\u7684\u53f3\u9762\uff0c\u6240\u4ee5\u9700\u8981\u7279\u5224\u53d6\u6700\u4f18\u89e3\n\n```\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\ninline int read()\n{\n    int f=1,ans=0;char c;\n    while(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n    while(c>='0'&&c<='9'){ans=ans*10+c-'0';c=getchar();}\n    return f*ans;\n}\nstruct node{\n    int ans,ls,rs,sum;\n}xx[2000001];\nint n,m,val[2000001];\nvoid pushdown(int x){\n    xx[x].sum=xx[x<<1].sum+xx[x<<1|1].sum;\n    xx[x].ls=max(xx[x<<1].ls,xx[x<<1].sum+xx[x<<1|1].ls);\n    xx[x].rs=max(xx[x<<1|1].rs,xx[x<<1|1].sum+xx[x<<1].rs);\n    xx[x].ans=max(xx[x<<1].ans,max(xx[x<<1|1].ans,xx[x<<1].rs+xx[x<<1|1].ls));\n    return;\n}\nvoid build(int k,int l,int r){\n    if(l==r){\n        xx[k].ls=xx[k].rs=xx[k].ans=xx[k].sum=val[l];\n        return;\n    }\n    int mid=l+r>>1;\n    build(k<<1,l,mid),build(k<<1|1,mid+1,r);\n    pushdown(k);\n    return;\n}\nvoid change(int k,int l,int r,int x,int y,int w){\n    if(x<=l&&r<=y){\n        xx[k].ls=xx[k].rs=xx[k].ans=xx[k].sum=w;\n        return;\n    }\n    int mid=l+r>>1;\n    if(x<=mid) change(k<<1,l,mid,x,y,w);\n    if(mid<y) change(k<<1|1,mid+1,r,x,y,w);\n    pushdown(k);\n    return;\n}\nnode query(int k,int l,int r,int x,int y){\n    if(x<=l&&r<=y) {\n        return xx[k];\n    }\n    int mid=l+r>>1;\n    if(x<=mid&&!(mid<y)) return query(k<<1,l,mid,x,y);\n    else if(!(x<=mid)&&mid<y) return query(k<<1|1,mid+1,r,x,y);\n    else{\n        \n        node st,t1=query(k<<1,l,mid,x,y),t2=query(k<<1|1,mid+1,r,x,y);\n        st.sum=t1.sum+t2.sum;\n        st.ls=max(t1.ls,t1.sum+t2.ls);\n         st.rs=max(t2.rs,t2.sum+t1.rs);\n        st.ans=max(t1.ans,max(t2.ans,t1.rs+t2.ls));\n        return st;\n    }\n}\nint main()\n{\n    n=read(),m=read();\n    for(int i=1;i<=n;i++) val[i]=read();\n    build(1,1,n);\n    while(m--){\n        int pd=read();\n        if(pd==2){\n            int x=read(),w=read();\n            change(1,1,n,x,x,w);\n        }\n        else if(pd==1){\n            int l=read(),r=read();\n            if(l>r) swap(l,r);\n            printf(\"%d\\n\",query(1,1,n,l,r).ans);\n        }\n    }\n}\n```",
        "postTime": 1546009106,
        "uid": 87382,
        "name": "_sry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "![](http://cc.amazingcounters.com/counter.php?i=3224480&c=9673753[/img])\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://vijos.org/p/1083)\n\n\u8fd9\u9053\u9898\u662f\u4e00\u9053\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u6c42\u4e00\u4e2a\u8fde\u7eed\u6700\u5927\u5b57\u6bb5\u548c\u662f\u4e00\u4e2a\u533a\u95f4\u7ebf\u6bb5\u6811\u4e00\u4e2a\u5f88\u5999\u5999\u7684\u64cd\u4f5c\uff0c\u8fd9\u91cc\u540e\u9762\u6211\u4eec\u540e\u9762\u5c31\u4f1a\u63d0\u5230\uff0c\u56e0\u4e3a\u4eca\u5929\u535a\u4e3b\u6ca1\u6709\u65f6\u95f4\u4e86\u6240\u4ee5\u5148\u7c98\u4e00\u7bc7\u4ee3\u7801\u4f9b\u5927\u5bb6\u53c2\u8003\uff0c\u5176\u5b9e\u4ee3\u7801\u7406\u89e3\u8fd8\u662f\u975e\u5e38\u7684\u7b80\u5355\u7684\u3002\n\n\u4eca\u5929\u7a81\u7136\u53d1\u73b0\u8fd9\u7bc7\u9898\u89e3\u5199\u7684\u975e\u5e38\u7684\u6c34\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u518d\u6765\u8865\u5145\u4e00\u4e0b\uff0c\u5176\u5b9e\u91cd\u70b9\u4e3b\u8981\u5c31\u5728update\u51fd\u6570\u4e2d\uff0c\u56e0\u4e3a\u6ca1\u6709\u533a\u95f4\u4fee\u6539\uff0c\u6240\u4ee5\u8bf4\u6ca1\u6709pushdown\u8fd9\u4e2a\u73a9\u610f\u513f\uff0c\u6240\u4ee5\u8bf4\u672c\u9898\u7684\u5173\u952e\u5176\u5b9e\u5c31\u5728\u4e8e\u5bf9\u4e8eupdate\u7684\u628a\u63e1\uff0cupdate\u4e3b\u8981\u7528\u4e8e\u5c31\u662f\u5f53\u6211\u4eec\u5728\u5efa\u6811\uff08Build_tree\uff09\u548c\u4fee\u6539(modify)\u7684\u65f6\u5019\u6211\u4eec\u7528\u6765\u5728\u9012\u5f52\u56de\u6765\u7684\u65f6\u5019\u987a\u4fbf\u4fee\u6539\u4e00\u4e0b\uff0c\u4e00\u822c\u6211\u4eec\u7684\u7ebf\u6bb5\u6811\u53ea\u9700\u8981update\u4e00\u4e0b\u4e0b\u9762\u4e24\u4e2a\u5b50\u6811\u7684\u5927\u5c0f\uff0c\u5c31\u53ef\u4ee5\u4e86\u3002\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u5b9e\u73b0\u4e00\u4e9b\u6bd4\u8f83\u57fa\u7840\u7684\u64cd\u4f5c\uff0c\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u8fd9\u9053\u9898\u7684\u64cd\u4f5c\u975e\u5e38\u7684\u9ad8\u7ea7\u554a\uff0c\u4ed6\u8981\u8ba9\u6211\u4eec\u6c42\u8fde\u7eed\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u6240\u4ee5\u8bf4\u7ecf\u8fc7\u6211\u4eec\u7684\u4e00\u756a\u8111\u8865\uff0c\u6211\u4eec\u53ef\u4ee5\u975e\u5e38\u5bb9\u6613\u7684\u77e5\u9053\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u6211\u4eec\u5e94\u8be5\u4ece\u5c0f\u7684\u5730\u65b9\u5f00\u59cb\uff0c\u7136\u540e\u9010\u6e10\u79ef\u5c11\u6210\u591a\uff0c\u6700\u540e\u5f97\u5230\u7b54\u6848\uff0c\u90a3\u4e48\u80fd\u5b9e\u73b0\u8fd9\u4e2a\u64cd\u4f5c\u7684\u53ea\u6709update\uff0c\u6240\u4ee5\u8bf4\u6211\u4eec\u53ea\u9700\u8981\u5728update\u4e0a\u4e0b\u4e00\u4e9b\u529f\u592b\uff0c\u90a3\u4e48\u8fd9\u9053\u9898\u6211\u4eec\u5c31\u53ef\u4ee5\u89e3\u51b3\u4e86\u3002\u4ee3\u7801\u6211\u4e0d\u662f\u975e\u5e38\u60f3\u8bb2\uff0c\u56e0\u4e3a\u5199\u7684\u8fd8\u662f\u975e\u5e38\u7684\u76f4\u63a5\u7684\uff0c\u6211\u8fd9\u91cc\u5c31\u63d0\u9192\u5927\u5bb6\u4e00\u4e0b\u6211\u7533\u660e\u7684\u53d8\u91cf\u5e94\u8be5\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```\nrmax\u662f\u4ece\u53f3\u5f00\u59cb\u7684\u6700\u5927\u8fde\u7eed\u5b57\u6bb5\u548c\n\u540c\u7406 lmax\nl\u662f\u5de6\u533a\u95f4\u4f4d\u7f6e\uff0cr\u662f\u53f3\u533a\u95f4\u4f4d\u7f6e\u3002\nson\u5b58\u513f\u5b50\nmaxtot\u5b58\u5f53\u524d\u533a\u95f4\u7684\u6700\u5927\u8fde\u7eed\u5b50\u6bb5\u548c\n```\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n```\n#include<bits/stdc++.h>\nusing namespace std;\nstruct data{\n\tint rmax,lmax,maxtot,sum;\n\tint l,r,son[2];\n}node[1010000];\nint ini[501000];\nint n,k;\nint cnt=0;\nvoid update(int k)\n{\n\tnode[k].sum=node[node[k].son[0]].sum+node[node[k].son[1]].sum;\n\tnode[k].lmax=max(node[node[k].son[0]].lmax,node[node[k].son[0]].sum+node[node[k].son[1]].lmax);\n\tnode[k].rmax=max(node[node[k].son[1]].rmax,node[node[k].son[1]].sum+node[node[k].son[0]].rmax);\n\tnode[k].maxtot=max(node[node[k].son[0]].maxtot,node[node[k].son[1]].maxtot);\n\tnode[k].maxtot=max(node[k].maxtot,node[node[k].son[0]].rmax+node[node[k].son[1]].lmax);\n}\nvoid Build_tree(int &k,int l,int r)\n{\n\tcnt++;\n\tk=cnt;\n\tnode[k].l=l;node[k].r=r;\n\tif(l==r)\n\t{\n\t\tnode[k].sum=ini[l];node[k].lmax=ini[l];node[k].rmax=ini[l];node[k].maxtot=ini[l];return;\n\t}\n\tint mid=(l+r)/2;\n\tBuild_tree(node[k].son[0],l,mid);\n\tBuild_tree(node[k].son[1],mid+1,r);\n\tupdate(k);\n}\nvoid modify(int k,int goal,int val)\n{\n\tif(node[k].l==node[k].r&&node[k].l==goal)\n\t{\n\t\tnode[k].sum=val;node[k].lmax=val;node[k].rmax=val;node[k].maxtot=val;\n\t}\n\telse\n\t{\n\t\tint mid=(node[k].l+node[k].r)/2;\n\t\tif(mid>=goal)\n\t\tmodify(node[k].son[0],goal,val);\n\t\telse\n\t\t{\n\t\t\tmodify(node[k].son[1],goal,val);\n\t\t}\n\t\tupdate(k);\n\t}\n}\ndata query(int k,int l,int r)\n{\n\tif(node[k].l==l&&node[k].r==r)\n\t{\n\t\treturn (data){node[k].rmax,node[k].lmax,node[k].maxtot,node[k].sum,0,0,0,0};\n\t}\n\telse\n\t{\n\t\tint mid=(node[k].l+node[k].r)/2;\n\t\tif(r<=mid) return query(node[k].son[0],l,r);\n\t\tif(l>mid)  return query(node[k].son[1],l,r);\n\t\telse\n\t\t{\n\t\t\tdata d1=query(node[k].son[0],l,mid);\n\t\t\tdata d2=query(node[k].son[1],mid+1,r);\n\t\t\tdata ret;\n\t\t\tret.sum=d1.sum+d2.sum;\n\t\t\tret.lmax=max(d1.lmax,d1.sum+d2.lmax);\n\t\t\tret.rmax=max(d2.rmax,d1.rmax+d2.sum);\n\t\t\tret.maxtot=max(d1.maxtot,d2.maxtot);\n\t\t\tret.maxtot=max(ret.maxtot,d1.rmax+d2.lmax);\n\t\t\treturn ret;\n\t\t}\n\t}\n}\nint main()\n{\n\t\n\tscanf(\"%d%d\",&n,&k);\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tscanf(\"%d\",&ini[i]);\n\t}\n\tint root=0;\n\tBuild_tree(root,1,n);\n\tint a,b,c;\n\tfor(int i=1;i<=k;++i)\n\t{\n\t\tscanf(\"%d%d%d\",&a,&b,&c);\n\t\tif(a==2)\n\t\t{\n\t\t\tmodify(1,b,c);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif(b>c)\n\t\t\t{int a;a=b;b=c;c=a;}\n\t\t\tcout<<query(1,b,c).maxtot<<endl;\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1524300543,
        "uid": 57884,
        "name": "Mudrob\u00f8t",
        "ccfLevel": 0,
        "title": "\u3010\u89e3\u9898\u62a5\u544a\u3011vijos \u5c0f\u767d\u901b\u516c\u56ed\uff08\u7ebf\u6bb5\u6811\uff09"
    },
    {
        "content": "[P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011](https://www.luogu.org/problem/P4513)\n\n[\u535a\u5ba2\u5e7f\u544a](https://www.ofnona.me/)\n\n\u6ce8\u610f\u4e0d\u80fd\u4e0d\u9009\uff0c\u81f3\u5c11\u8981\u9009\u4e00\u4e2a\u6570\u3002\n\n\u672c\u9898\u5e94\u8be5\u662f\u7ebf\u6bb5\u6811\u9898\uff0c\u4f46\u662f\u505a\u8fc7[P2042](https://www.luogu.org/problem/P2042)\u6216\u8005[P2710](https://www.luogu.org/problem/P2710)\u7684\u4eba\u4f1a\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9\u9053\u9898\u7684\u52a8\u6001\u6c42\u6700\u5927\u5b50\u6bb5\u548c\u53ea\u662f\u90a3\u9053\u9898\u7684\u4e00\u90e8\u5206\uff0c\u5e76\u4e14\u533a\u95f4\u662f\u9759\u6001\u7684\uff0c\u53ea\u6d89\u53ca\u5355\u70b9\u4fee\u6539\uff0c\u4e0d\u7528\u7ef4\u62a4\u61d2\u6807\u8bb0\uff0c\u76f8\u5f53\u8f7b\u677e\u3002\u6240\u4ee5\u6211\u9009\u62e9`FHQ Treap`\u3002\n\n\u7ef4\u62a4\u6bcf\u4e00\u4e2a\u70b9\u7684\u533a\u95f4\u548c\uff0c\u6700\u5927\u524d\u7f00\u548c\uff0c\u6700\u5927\u540e\u7f00\u548c\uff0c\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\n- \u4fee\u6539\u6743\u503c\uff1a \u5c06\u8fd9\u4e2a\u70b9\u5206\u79bb\u51fa\u6765\uff0c\u5c06\u5b83\u7684\u503c\uff0c\u533a\u95f4\u548c\uff0c\u5b50\u6bb5\u548c\u90fd\u8d4b\u503c\u4e3ac\uff0c\u5c06\u6700\u5927\u524d\u7f00\u548c\uff0c\u6700\u5927\u540e\u7f00\u548c\u8d4b\u503c\u4e3a`max(0, c)`.\n\n- pushup\u51fd\u6570\uff1a`size`\uff0c`summ`\u7684\u66f4\u65b0\u81ea\u4e0d\u5fc5\u63d0\u3002\u6700\u5927\u524d\u7f00\u548c\u663e\u7136\u5c31\u662f\u201c\u5de6\u4e00\u534a\u7684\u524d\u7f00\u548c\u201d\u6216\u201c\u5de6\u8fb9\u603b\u548c\u52a0\u4e0a\u53f3\u4e00\u534a\u524d\u7f00\u548c\u201d\uff0c\u6700\u5927\u540e\u7f00\u548c\u540c\u7406\uff0c\u800c\u6700\u5927\u5b50\u6bb5\u548c\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\u201c\u5de6\u6bb5\u7684\u540e\u7f00+\u53f3\u6bb5\u7684\u524d\u7f00\u201d\u6216\u8005\u201c\u5de6\u6bb5\u7684\u6700\u5927\u5b50\u6bb5\u548c\u201d\u201c\u53f3\u6bb5\u7684\u6700\u5927\u5b50\u6bb5\u548c\u201d\n\n\u56e0\u4e3a\u81f3\u5c11\u8981\u9009\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u6700\u5927\u5b50\u6bb5\u548c\u5fc5\u987b\u8d4b\u4e3a\u81ea\u8eab\u3002\u4f7f\u7528\u513f\u5b50\u7684\u524d\u7f00\u540e\u7f00\u66f4\u65b0\u81ea\u5df1\u7684\u5b50\u6bb5\u548c\u65f6\uff0c\u663e\u7136\u81ea\u5df1\u65f6\u5fc5\u987b\u9009\u7684\uff0c\u6240\u4ee5\u524d\u7f00\u540e\u7f00\u662f\u53ef\u4ee5\u4e0d\u9009\u7684\uff08\u5373\u8d4b\u503c\u4e3a`max(0, c)`\uff09\u3002\n\n```cpp\n#define MAX (500000 + 7)\n#include <bits/stdc++.h>\n#define i0 a[i].L\n#define i1 a[i].R\nusing namespace std;\n\nint N, M, nc, root, A, B, C, pt[MAX];\n\nstruct Node {\n\tint L, R, seed, c, max0, max1, max, summ, size;\n}a[MAX];\n\nint newp(int c)\n{\n\ta[++nc] = (Node){0, 0, rand(), c, max(c, 0), max(c, 0), c, c, 1};\n\treturn nc;\n}\n\nvoid pushup(int i)\n{\n\ta[i].size = a[i0].size + a[i1].size + 1;\n\ta[i].summ = a[i0].summ + a[i1].summ + a[i].c;\n\ta[i].max0 = max(max(a[i0].max0, a[i0].summ + a[i].c + a[i1].max0), 0);\n\ta[i].max1 = max(max(a[i1].max1, a[i1].summ + a[i].c + a[i0].max1), 0);\n\ta[i].max = max(a[i0].max1 + a[i1].max0, 0) + a[i].c;\n\tif (i0) a[i].max = max(a[i].max, a[i0].max);\n\tif (i1) a[i].max = max(a[i].max, a[i1].max);\n}\n\nvoid split(int i, int &x, int &y, int k)\n{\n\tif (!i)\n\t{\n\t\tx = y = 0;\n\t\treturn;\n\t}\n\tif (a[i0].size < k)\n\t\tx = i, split(i1, i1, y, k - a[i0].size - 1);\n\telse\n\t\ty = i, split(i0, x, i0, k);\n\tpushup(i);\n}\n\nint merge(int x, int y)\n{\n\tif (!x || !y) return x + y;\n\tif (a[x].seed < a[y].seed)\n\t{\n\t\ta[x].R = merge(a[x].R, y);\n\t\tpushup(x); return x;\n\t}\n\ta[y].L = merge(x, a[y].L);\n\tpushup(y); return y;\n}\n\nint add(int l, int r)\n{\n\tif (l != r) {\n\t\tint mid = l + r >> 1;\n\t\treturn merge(add(l, mid), add(mid+1, r));\n\t} else return newp(pt[l]);\n}\n\nint main()\n{\n\tsrand(time(0));\n\t\n\tscanf(\"%d%d\", &N, &M);\n\tfor (int i = 1; i <= N; i++)\n\t\tscanf(\"%d\", &pt[i]);\n\troot = add(1, N);\n\t\n\twhile (M--)\n\t{\n\t\tint op, x, y;\n\t\tscanf(\"%d%d%d\", &op, &x, &y);\n\t\tif (op == 1){\n\t\t\tif (x > y) swap(x, y);\n\t\t\tsplit(root, A, B, x-1), split(B, B, C, y-x+1);\n\t\t\tprintf(\"%d\\n\", a[B].max);\n\t\t\troot = merge(merge(A, B), C);\n\t\t}\n\t\telse {\n\t\t\tsplit(root, A, B, x-1), split(B, B, C, 1);\n\t\t\ta[B].max0 = a[B].max1 = max(0, y);\n\t\t\ta[B].max = a[B].c = a[B].summ = y;\n\t\t\troot = merge(merge(A, B), C);\n\t\t}\n\t}\n}\n```",
        "postTime": 1573547260,
        "uid": 73489,
        "name": "NyaRu_Official",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "# P4513 \u9898\u89e3\n~~\u8fd9\u8fd8\u662f\u6211\u7b2c\u4e00\u6b21\u7ed9\u7d2b\u9898\u5199\u9898\u89e3\u3002\u3002\u3002~~\n\n---\n\n## \u9898\u76ee\u5927\u610f\uff1a\n\u7ed9\u5b9a$n$\u4e2a\u516c\u56ed\u7684\u7f8e\u89c2\u503c\uff08\u53ef\u80fd\u6709\u8d1f\u6570\uff09\uff0c\u6c42\u51fa\u7f8e\u89c2\u503c\u548c\u6700\u5927\u7684\u8fde\u7eed\u82b1\u56ed\u533a\u95f4 $[l,r]$ \n\n\u5b9e\u9645\u4e0a\u5c31\u662f\u6c42**\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c**\u3002\u3002\u3002\n\n---\n\n## \u601d\u8def\uff1a\n\u8fd9\u662f\u4e00\u9053\u5178\u578b\u7684\u533a\u95f4\u7edf\u8ba1\u95ee\u9898\uff0c\u5bf9\u4e8e\u533a\u95f4\u7edf\u8ba1\u95ee\u9898\uff0c\u6211\u4eec\u4e00\u822c\u4f7f\u7528**\u7ebf\u6bb5\u6811**\u89e3\u51b3\n\n[\u7ebf\u6bb5\u6811\u6559\u7a0b](https://listening-post-1379.blog.luogu.org/post-shuo-ju-jie-gou-xian-duan-shu)\n\n\u4e3a\u4e86\u6c42\u51fa\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4x\uff0c\u6211\u4eec\u9700\u8981\u8ba1\u7b97\u4ee5\u4e0b\u56db\u4e2a\u503c\uff1a\n```\nsum[x] : x\u6240\u4ee3\u8868\u533a\u95f4\u7684\u533a\u95f4\u548c\nldat[x] : \u7d27\u9760\u533a\u95f4\u5de6\u7aef\u7684\u6700\u5927\u5b50\u6bb5\u548c\nrdat[x] : \u7d27\u9760\u533a\u95f4\u53f3\u7aef\u7684\u6700\u5927\u5b50\u6bb5\u548c\ndat[x] : \u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\n\n```\n\n\u8fd9\u4e9b\u503c\u5982\u4f55\u6c42\u51fa\u5462\uff1f\n\n\u9996\u5148\uff0c\u6211\u4eec\u8003\u8651$dat$:\n\n![\u65e0\u6807\u98982.png](https://i.loli.net/2019/09/05/JeHP9qKl45cXrj8.png)\n\n\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u7684$dat$\uff0c\u5b83\u53ea\u80fd\u7531\u4e09\u4e2a\u9014\u5f84\u5f97\u6765:\n1. \u5b8c\u5168\u5728\u5de6\u5b50\u533a\u95f4\uff0c\u5373\u5de6\u5b50\u533a\u95f4\u7684$dat$(\u7eff\u8272\u90e8\u5206)\n2. \u5b8c\u5168\u5728\u53f3\u5b50\u533a\u95f4\uff0c\u5373\u53f3\u5b50\u533a\u95f4\u7684$dat$(\u7ea2\u8272\u90e8\u5206)\n3. \u8de8\u8d8a\u4e2d\u70b9\uff0c\u5373\u5de6\u5b50\u533a\u95f4\u7684$rsum$\u52a0\u4e0a\u53f3\u5b50\u533a\u95f4\u7684$lsum$(\u9ec4\u8272\u90e8\u5206)\n\n\u90a3\u4e48\uff0c\u5982\u4f55\u6c42\u51fa$ldat$\u548c$rdat$\u5462\uff1f\n\n\u7531\u4e8e$ldat$\u548c$rdat$\u7684\u6c42\u6cd5\u76f8\u4f3c\uff0c\u53ea\u662f\u65b9\u5411\u4e0d\u540c\uff0c\u8fd9\u91cc\u53ea\u8003\u8651$ldat$\u7684\u6c42\u6cd5 $\\dots$\n\n![\u65e0\u6807\u98983.png](https://i.loli.net/2019/09/05/fNOaXwJ75pejxMZ.png)\n\n$ldat$\u66f4\u52a0\u7b80\u5355\uff0c\u53ea\u6709\u4e24\u79cd\u60c5\u51b5\uff1a\n1. \u5b8c\u5168\u5728\u5de6\u5b50\u533a\u95f4\uff0c\u5373\u5de6\u5b50\u533a\u95f4\u7684$ldat$(\u7eff\u8272\u90e8\u5206)\n2. \u8de8\u8d8a\u4e2d\u70b9\uff0c\u5373\u5de6\u5b50\u533a\u95f4\u7684$sum +$ \u53f3\u5b50\u533a\u95f4\u7684 $ldat$(\u7ea2\u8272\u90e8\u5206)\n\n\u770b\u5230\u8fd9\u91cc\uff0c\u76f8\u4fe1\u5927\u5bb6\u90fd\u5df2\u7ecf\u77e5\u9053$rdat$\u600e\u4e48\u6c42\u4e86\uff0c\u8fd9\u91cc\u5c31\u4e0d\u5728\u8d58\u8ff0\u3002\u3002\u3002\n\n\u81f3\u6b64\uff0c\u95ee\u9898\u5f97\u5230\u5b8c\u7f8e\u89e3\u51b3 $\\dots$\n\n~~\u600e\u4e48\u53ef\u80fd~~\n\n---\n\n## Tips\uff1a\n1. \u6d4b\u8bd5\u6570\u636e\u53ef\u80fd\u4f1a\u51fa\u73b0$a>b$\u7684\u60c5\u51b5\uff0c\u9700\u8981\u8fdb\u884c\u4ea4\u6362...(\u8840\u7684\u6559\u8bad)\n2. \u67e5\u8be2\u65f6\u8981\u540c\u65f6\u8fd4\u56de4\u4e2a\u6570\u636e\u5e76\u6309\u8981\u6c42\u5f52\u5e76...\n\n---\n\n## \u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int maxn=500001;\nint n,m;\nstruct segment_tree{\n  int l,r;\n  int sum,lsum,rsum,dat;\n};\nsegment_tree tree[maxn*4];\n//\u5b8f\u5b9a\u4e49\n#define l(x) tree[x].l\n#define r(x) tree[x].r\n#define sum(x) tree[x].sum\n#define lsum(x) tree[x].lsum\n#define rsum(x) tree[x].rsum\n#define dat(x) tree[x].dat\nint read()//\u5feb\u8bfb\n{\n  int s=0,w=1;\n  char c=getchar();\n  while(c<'0' || c>'9')\n  {\n    if(c=='-') w=-1;\n    c=getchar();\n  }\n  while(c>='0' && c<='9')\n  {\n    s=(s<<3)+(s<<1)+(c^48);\n    c=getchar();\n  }\n  return s*w;\n}\nvoid update(int p)//\u5f52\u5e76\u4fe1\u606f\n{\n  sum(p)=sum(p<<1)+sum(p<<1|1); //\u533a\u95f4\u548c\n  lsum(p)=max(lsum(p<<1),sum(p<<1)+lsum(p<<1|1)); //\u7d27\u9760\u533a\u95f4\u5de6\u7aef\u7684\u6700\u5927\u5b50\u6bb5\u548c\n  rsum(p)=max(rsum(p<<1|1),sum(p<<1|1)+rsum(p<<1));//\u7d27\u9760\u533a\u95f4\u53f3\u7aef\u7684\u6700\u5927\u5b50\u6bb5\u548c\n  dat(p)=max({dat(p<<1),dat(p<<1|1),rsum(p<<1)+lsum(p<<1|1)}); //\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\n}\nvoid build(int p,int l,int r) //\u5efa\u6811\n{\n  l(p)=l,r(p)=r;\n  if(l(p)==r(p)){ //\u5982\u679c\u662f\u53f6\u5b50\u7ed3\u70b9\n    sum(p)=lsum(p)=rsum(p)=dat(p)=read(); //\u521d\u59cb\u5316\u7684\u540c\u65f6\u8bfb\u5165\uff0c\u9ad8\u6548\u5efa\u6811\n    return;\n  }\n  int mid=(l+r)>>1;\n  build(p<<1,l,mid);\n  build(p<<1|1,mid+1,r);\n  update(p);\n}\nvoid change(int p,int addr,int c) //\u5355\u70b9\u4fee\u6539\n{\n  if(l(p)==r(p))\n  {\n    sum(p)=lsum(p)=rsum(p)=dat(p)=c;\n    return;\n  }\n  int mid=(l(p)+r(p))>>1;\n  if(addr<=mid) change(p<<1,addr,c);\n  else if(addr>mid) change(p<<1|1,addr,c);\n  update(p);\n}\nsegment_tree ask(int p,int l,int r) //\u533a\u95f4\u67e5\u8be2\uff08\u8981\u540c\u65f6\u8fd4\u56de4\u4e2a\u6570\u636e\uff09\n{\n  if(l<=l(p) && r>=r(p)) return tree[p];\n  int ans=0xc0c0c0c0;\n  int mid=(l(p)+r(p))>>1;\n  if(r<=mid) return ask(p<<1,l,r);\n  if(l>mid) return ask(p<<1|1,l,r);\n  else{\n    segment_tree x,y,ans;\n    x=ask(p<<1,l,r),y=ask(p<<1|1,l,r);\n    ans.sum=x.sum+y.sum;\n    ans.lsum=max(x.lsum,x.sum+y.lsum);\n    ans.rsum=max(y.rsum,y.sum+x.rsum);\n    ans.dat=max({x.dat,y.dat,x.rsum+y.lsum});\n    return ans;\n  }\n//  return ans;\n}\nint k,a,b;\nint main()\n{\n  n=read(),m=read();\n  build(1,1,n);\n  for(int i=1;i<=m;i++)\n  {\n    k=read();\n    if(k==1)\n    {\n      a=read(),b=read();\n      if(a>b) swap(a,b);\n      printf(\"%d\\n\",ask(1,a,b).dat);\n    }\n    else if(k==2)\n    {\n      a=read(),b=read();\n      change(1,a,b);\n    }\n  }\n  return 0;\n}\n\n\n```\n\n",
        "postTime": 1567693998,
        "uid": 155907,
        "name": "1379\u53f7\u76d1\u542c\u5458",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    },
    {
        "content": "[$\\Large\\color{red}{Bl}\\color{blue}{og}$](http://geiz-revive.github.io/)\n\n~~\u9893\u5b8c\u6587\u5316\u8bfe\u56de\u6765\u505a\u6c34\u9898\u80fd\u6109\u60a6\u8eab\u5fc3~~\n\n\u9898\u610f\u5c31\u662f\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u786c\u4e0a\u7ebf\u6bb5\u6811\u5373\u53ef\uff0c\u7ef4\u62a4\u662f\u7ecf\u5178\u65b9\u6cd5\uff0c\u5982\u679c\u6362\u6210\u533a\u95f4\u4fee\u6539\u4e5f\u662f\u53ef\u4ee5\u505a\u7684\u3002\u6709\u5174\u8da3\u53ef\u4ee5\u53bb\u505a\u4e00\u505a$GSS$\u7cfb\u5217\u7684\u9898\uff0c\u6700\u5927\u5b50\u6bb5\u548c\u662f\u4e2a\u7ecf\u5178\u6a21\u578b\uff0c\u5c3d\u91cf\u8981\u638c\u63e1\u3002\n\n```cpp\nnode operator +(const node &a, const node &b) {\n\tnode c;\n\tc.tot = a.tot + b.tot;\n\tc.lsum = max(a.lsum, b.lsum + a.tot);\n\tc.rsum = max(b.rsum, a.rsum + b.tot);\n\tc.sum = max({ a.sum,b.sum,a.rsum + b.lsum });\n\treturn c;\n}\n```\n\n\n\n\u5176\u4e2d$tot$\u4ee3\u8868\u539f\u6570\u5217\u4e2d\u7684\u503c\u7684\u548c\uff0c$sum$\u662f\u6700\u5927\u5b50\u6bb5\u548c\uff0c$lsum$\u662f\u6700\u5927\u524d\u7f00\u548c\uff0c$rsum$\u662f\u6700\u5927\u540e\u7f00\u548c\uff0c\u7ef4\u62a4\u60f3\u4e00\u60f3\u5e94\u8be5\u5c31\u5f88\u663e\u7136\u4e86\u3002\n\n$\\large Code:$\n\n```cpp\n#pragma region revive\n#include <set>\n#include <map>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <cstdio>\n#include <vector>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <algorithm>\n#include <unordered_map>\n#define inl inline\n#define re register int\n#define fa(x) t[x].fa\n#define son(x,y) t[x].child[y]\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\n#define ll long long\nconst int inf = 0x3f3f3f3f;\n#define lowbit(x) ((x) & (-x))\nusing namespace std;\n#ifndef _DEBUG\n#define getchar() (*(IOB.in.p++))\n#define putchar(c) (*(IOB.out.p++)=(c))\n#define io_eof() (IOB.in.p>=IOB.in.pend)\nstruct IOBUF { struct { char buff[1 << 26], *p, *pend; }in; struct { char buff[1 << 26], *p; }out; IOBUF() { in.p = in.buff; out.p = out.buff; in.pend = in.buff + fread(in.buff, 1, 1 << 26, stdin); }~IOBUF() { fwrite(out.buff, 1, out.p - out.buff, stdout); } }IOB;\n#endif\ntemplate<typename IO>\ninl void write(IO x) {\n\tif (x == 0) return (void)putchar('0');\n\tif (x < 0)putchar('-'), x = -x;\n\tstatic char buf[30];\n\tchar* p = buf;\n\twhile (x) {\n\t\t*(p++) = x % 10 + '0';\n\t\tx /= 10;\n\t}\n\twhile (p > buf)putchar(*(--p));\n}\ninl void writestr(const char *s) { while (*s != 0)putchar(*(s++)); }\ntemplate<typename IO>inl void writeln(IO x) { write(x), putchar('\\n'); }\ntemplate<typename IO>inl void writesp(IO x) { write(x), putchar(' '); }\ninl int readstr(char *s) {\n\tchar *begin = s, c = getchar();\n\twhile (c < 33 || c>127) {\n\t\tc = getchar();\n\t}\n\twhile (c >= 33 && c <= 127) {\n\t\t*(s++) = c;\n\t\tc = getchar();\n\t}\n\t*s = 0;\n\treturn s - begin;\n}\ntemplate<typename IO>\ninl IO read() {\n\tIO x = 0;\n\tregister bool w = 0;\n\tregister char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') w = 1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn w ? -x : x;\n}\n#pragma endregion\n#undef ls\n#undef rs\n#define ls(x) ((x)<<1)\n#define rs(x) (ls(x)|1)\nstruct node {\n\tint lsum, rsum, sum, tot;\n}t[10000001];\nnode operator +(const node &a, const node &b) {\n\tnode c;\n\tc.tot = a.tot + b.tot;\n\tc.lsum = max(a.lsum, b.lsum + a.tot);\n\tc.rsum = max(b.rsum, a.rsum + b.tot);\n\tc.sum = max({ a.sum,b.sum,a.rsum + b.lsum });\n\treturn c;\n}\nint a[1000001];\ninl void maintain(int x) {\n\tt[x] = t[ls(x)] + t[rs(x)];\n}\ninl void change(int k, int l, int r, int p, int w) {\n\tif (l == r) return (void)(t[k].tot = t[k].sum = t[k].lsum = t[k].rsum = w);\n\tre mid = l + r >> 1;\n\tif (p <= mid)change(ls(k), l, mid, p, w);\n\telse change(rs(k), mid + 1, r, p, w);\n\tmaintain(k);\n}\ninl void build(int k, int l, int r) {\n\tif (l == r) return (void)(t[k].tot = t[k].sum = t[k].lsum = t[k].rsum = a[l]);\n\tre mid = l + r >> 1;\n\tbuild(ls(k), l, mid), build(rs(k), mid + 1, r);\n\tmaintain(k);\n}\ninl node query(int k, int l, int r, int x, int y) {\n\tif (l >= x && r <= y)return t[k];\n\tre mid = l + r >> 1;\n\tnode ans = { 0,0,0,0 };\n\tif (x <= mid) {\n\t\tans = query(ls(k), l, mid, x, y);\n\t\tif (y > mid)ans = ans + query(rs(k), mid + 1, r, x, y);\n\t}\n\telse if (y > mid)ans = query(rs(k), mid + 1, r, x, y);\n\treturn ans;\n}\nsigned main() {\n\tre n = read<int>(), m = read<int>(), op, x, y;\n\tfor (re i = 1; i <= n; i++)a[i] = read<int>();\n\tbuild(1, 1, n);\n\twhile (m--) {\n\t\top = read<int>(), x = read<int>(), y = read<int>();\n\t\tif (op == 1) { if (x > y)swap(x, y); writeln(query(1, 1, n, x, y).sum); }\n\t\telse change(1, 1, n, x, y);\n\t}\n}\n```\n\n",
        "postTime": 1560936331,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P4513 \u5c0f\u767d\u901b\u516c\u56ed"
    },
    {
        "content": "## \u7ebf\u6bb5\u6811\u597d\u9898\n\n\u6307\u9488\u515a\u6709\u798f\u5229\u5566\n\n\u4f17\u6240\u5468\u77e5\uff0c\u5355\u70b9\u4fee\u6539\u533a\u95f4\u8be2\u95ee\u7684\u95ee\u9898\u7528\u7ebf\u6bb5\u6811\u6765\u505a\u5fc5\u987b\u8981\u6c42\u4e00\u4e2a\u8282\u70b9\u7684\u4fe1\u606f\u80fd\u88ab\u4e24\u4e2a\u5b50\u8282\u70b9\u5408\u5e76\u51fa\u6765\u3002\n\n\u5148\u8003\u8651\u4e00\u4e2a\u533a\u95f4\uff0c\u77e5\u9053\u4e86\u5de6\u5b50\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\u548c\u53f3\u5b50\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\uff0c\u5982\u4f55$\\Theta(1)$\u6c42\u51fa\u8fd9\u4e2a\u533a\u95f4\u7684\u6700\u5927\u5b50\u6bb5\u548c\u3002\n\n\u5982\u679c\u8fd9\u4e2a\u5b50\u6bb5\u843d\u5728\u5de6\u533a\u95f4\u6216\u53f3\u533a\u95f4\u5185,\u76f4\u63a5\u53d6$max$.\n\n\u5982\u679c\u843d\u5728\u4e2d\u95f4\uff0c\u5c31\u8003\u8651\u5bf9\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a\u5de6\u7aef\u70b9\u4e3a$l$\u7684\u6700\u5927\u5b57\u6bb5\u548c$ml$\u4ee5\u53ca\u53f3\u7aef\u70b9\u4e3a$r$\u7684\u6700\u5927\u5b50\u6bb5\u548c$mr$\uff0c\u5c31\u6709\uff1a\n\n$$ans_i=max(ans_{l_i},ans_{r_i},mr_{l_i}+ml_{r_i})$$\n\n\u4fee\u6539\u64cd\u4f5c\u5c31\u662f\u5355\u70b9\u4fee\u6539\u5e38\u89c4\u64cd\u4f5c\u4e86\u3002\n\n\u67e5\u8be2\u64cd\u4f5c\u76f4\u63a5\u8fd4\u56de\u7b54\u6848\u5f88\u9ebb\u70e6\uff0c\u8003\u8651\u76f4\u63a5\u628a\u8be2\u95ee\u533a\u95f4\u6240\u5305\u542b\u7684\u533a\u95f4\u53d6\u51fa\u6765\uff0c\u91cd\u65b0\u5efa\u6811\u3002\u5982\u679c\u7528\u6307\u9488\u5b9e\u73b0\uff0c\u56e0\u4e3a\u53ea\u9700\u8981\u6839\u8282\u70b9\uff0c\u6240\u4ee5\u8981\u4e00\u8fb9\u5efa\u6811\u4e00\u8fb9\u91ca\u653e\u5185\u5b58\uff0c\u4e0d\u7136\u4f1a$MLE$.\n\n\u4ee3\u7801\uff1a\n\n```\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, m, a[500001], o, l, r, k;\n\ninline int read() {\n\tregister int s = 0, f = 1;\n\tregister char ch = getchar();\n\twhile (!isdigit(ch)) {if (ch == '-') f = -1; ch = getchar();}\n\twhile (isdigit(ch)) s = (s << 1) + (s << 3) + (ch ^ 48), ch = getchar();\n\treturn s * f;\n}\n\ninline int max_(int a, int b) {\n\treturn a > b ? a : b;\n}\n\nstruct node {\n\tint l, r, ml, mr, mx, sum;\n\tnode *left = NULL;\n\tnode *right = NULL;\n\t\n\tinline void update() {\n\t\tif (this -> l >= this -> r) return ;\n\t\tthis -> sum = this -> left -> sum + this -> right -> sum;\n\t\tthis -> ml = max_(this -> left -> ml, this -> left -> sum + this -> right -> ml);\n\t\tthis -> mr = max_(this -> right -> mr, this -> right -> sum + this -> left -> mr);\n\t\tthis -> mx = max_(max_(this -> left -> mx, this -> right -> mx), this -> left -> mr + this -> right -> ml);\n\t}\n\t\n\tvoid build(int l, int r) {\n\t\tthis -> l = l; this -> r = r;\n\t\tif (l >= r) {\n\t\t\tthis -> sum = this -> ml = this -> mr = this -> mx = a[l];\n\t\t\treturn ;\n\t\t}\n\t\tthis -> left = new node; this -> left -> build(l, l + r >> 1);\n\t\tthis -> right = new node; this -> right -> build((l + r >> 1) + 1, r);\n\t\tthis -> update();\n\t}\n\t\n\tvoid modify(int p, int s) {\n\t\tif (this -> l == this -> r) this -> sum = this -> ml = this -> mr = this -> mx = s;\n\t\telse { \n\t\t\tif (p <= this -> left -> r) this -> left -> modify(p, s);\n\t\t\telse this -> right -> modify(p, s);\n\t\t\tthis -> update();\n\t\t} \n\t}\n\t\n\tnode* query(int l, int r) {\n\t\tnode *rt = new node; rt -> l = this -> l; rt -> r = this -> r; rt -> mx = this -> mx;\n\t\trt -> sum = this -> sum; rt -> ml = this -> ml; rt -> mr = this -> mr;\n\t\tif (this -> l >= l && this -> r <= r) return rt;\n\t\tif (r <= this -> left -> r) return this -> left -> query(l, r);\n\t\tif (l > this -> left -> r) return this -> right -> query(l, r);\n\t\trt -> left = this -> left -> query(l, r); rt -> right = this -> right -> query(l, r);\n\t\trt -> update(); delete rt -> left; delete rt -> right; return rt;\n\t}\n};\n\nint main() {\n\tnode *root = new node;\n\tn = read(); m = read();\n\tfor (register int i = 1; i <= n; ++i) a[i] = read();\n\troot -> build(1, n);\n\twhile (m--) {\n\t\to = read(); l = read(); r = read();\n\t\tif (o == 1) {\n\t\t\tif (l > r) swap(l, r);\n\t\t\tnode *cur = root -> query(l, r);\n\t\t\tprintf(\"%d\\n\", cur -> mx); delete cur;\n\t\t} else root -> modify(l, r);\n\t}\n\tdelete root;\n\treturn 0;\n}\n```\n",
        "postTime": 1563940138,
        "uid": 98096,
        "name": "Smallbasic",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4513 \u3010\u5c0f\u767d\u901b\u516c\u56ed\u3011"
    }
]