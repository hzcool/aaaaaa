[
    {
        "content": "## \u5199\u5728\u524d\u9762\n\n\u6700\u8fd1\u5728\u5b66\u500d\u589e\uff0c\u88ab\u7d2b\u9898\u8650\u54ed\u540e\u53c8\u6765\u5c1d\u8bd5\u8fd9\u4e2a\u84dd\u9898\uff0c\u6ca1\u60f3\u5230\u5b9e\u73b0\u8d77\u6765\u4e5f\u6709\u4e00\u5b9a\u7684\u96be\u5ea6\u3002\n\u770b\u4e0d\u61c2\u5927\u4f6c\u4eec\u7684\u9898\u89e3\u548c\u4ee3\u7801\uff0c\u6240\u4ee5\u6253\u7b97\u5199\u4e00\u4e2a\u6bd4\u8f83\u6613\u61c2\u7684\u9898\u89e3\u3002   \n\n\u5176\u5b9e\u601d\u8def\u4e0e\u7b2c\u4e00\u7bc7\u9898\u89e3\u7c7b\u4f3c\uff0c\u4f46\u662f\u5b83\u8bb2\u7684\u592a\u7b3c\u7edf\u4e86\u3002\u5c31\u50cf \"\u7ecf\" \u9700\u8981 \"\u4f20\" \u6765\u89e3\u91ca\u4e00\u6837\uff0c\u6240\u4ee5\u6211\u6253\u7b97\u5c06\u8fd9\u79cd\u601d\u8def\u5199\u7684\u66f4\u8be6\u7ec6\u4e00\u4e9b\uff0c\u8ba9\u6709\u4e00\u5b9a\u500d\u589e\u57fa\u7840\u7684\u540c\u5fd7\u4eec\u53ef\u4ee5\u770b\u61c2\u3002\n\n#### \u524d\u7f6e\u77e5\u8bc6 \n- \u7ebf\u6bb5\u6811\n- \u5355\u8c03\u961f\u5217\n- \u500d\u589e\n\n#### \u9898\u76ee\u5927\u610f\uff08\u6233\u8fd9\u91cc[\u67e5\u770b\u539f\u9898](https://www.luogu.com.cn/problem/P8163)\uff09\n- \u7ed9\u5b9a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8def\u7ebf\u3002\n- \u7ed9\u5b9a\u4e00\u4e2a\u6574\u6570 $K$\uff0c\u8868\u793a\u4e58\u8f66\u70b9\u79bb**\u59cb\u53d1\u70b9**\u7684**\u6700\u8fdc\u8ddd\u79bb**\u3002\n- \u5bf9\u4e8e\u6bcf\u6761\u8def\u7ebf\uff0c\u7ed9\u5b9a $\\langle A_{i},B_{i} \\rangle$ \u8868\u793a**\u8def\u7ebf\u7684**\u8d77\u70b9\u548c\u7ec8\u70b9\u3002  \n**\u6ce8\u610f\uff1a** $A_{i}$\uff0c$B_{i}$ \u76f8\u5bf9\u5927\u5c0f\u5173\u7cfb**\u4e0d\u786e\u5b9a**\uff0c\u53ef\u5206\u522b\u8868\u793a**\u6b63\u5411**\u548c**\u53cd\u5411**\u3002\n- \u63a5\u4e0b\u6765\u6709 $Q$ \u6b21\u8be2\u95ee\u3002\n- \u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\uff0c\u7ed9\u5b9a $\\langle S_{i},T_{i} \\rangle$ \u8868\u793a**\u8be2\u95ee\u7684**\u8d77\u70b9\u548c\u7ec8\u70b9\u3002\u6c42\u662f\u5426\u80fd\u591f\u901a\u8fc7\u6362\u4e58\u4ece $S_{i}$ \u5230\u8fbe $T_{i}$\uff0c\u5982\u679c\u53ef\u4ee5\u8f93\u51fa\u6700\u5c11\u6362\u4e58\u6b21\u6570\u3002\n- \u65e0\u89e3\u8f93\u51fa $-1$\u3002\n\n\n## \u6b63\u6587\n\n\u5c31\u6211\u76ee\u524d\u7684\u7ecf\u9a8c\u6765\u770b\uff0c\u51e1\u662f\u9700\u8981\u591a\u6b21\u65e0\u5e8f\u8be2\u95ee\u6216\u8005\u91cd\u590d\u591a\u6b21\u5904\u7406\u4e00\u5f20\u56fe\u65f6\uff0c\u5927\u6982\u7387\u662f\u9700\u8981\u7528\u5230\u500d\u589e\u7684\u3002   \n\n\u7b80\u5355\u8bf4\u4e00\u4e0b**\u539f\u56e0**\uff1a\u5f53\u6211\u4eec\u8981\u591a\u6b21\u5904\u7406\uff08\u6216\u8be2\u95ee\uff09\u4e00\u5f20\u56fe\u65f6\uff08\u5047\u8bbe $n$ \u4e2a\u70b9\uff09\uff0c\u90a3\u4e48\u5982\u679c\u4e00\u6b21\u6b21\u904d\u5386\uff0c\u590d\u6742\u5ea6\u5f88\u53ef\u80fd\u662f $O(n^2)$ \u6216\u66f4\u9ad8\uff0c\u5728\u52a8\u4e0d\u52a8\u5c31  $n >10^5$  \u7684\u6570\u636e\u4e0b\u80af\u5b9a\u662f\u4e0d\u884c\u7684\uff0c\u800c\u500d\u589e\u53ef\u4ee5\u5c06\u6bcf\u6b21\u904d\u5386\u964d\u5230 $\\log{n}$ \u7ea7\u522b\uff0c\u663e\u7136\u662f\u4e00\u79cd\u5f88\u6709\u6548\u7684\u4f18\u5316\u65b9\u6cd5\u3002\n\n\u7136\u540e\u6211\u4eec\u4ee5\u500d\u589e\u4f5c\u4e3a\u601d\u8003\u5207\u5165\u70b9\uff0c\u518d\u56de\u5230\u8fd9\u9898\u3002\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u6570\u636e(\u6837\u4f8b 3)~~\u624b~~\u51fa\u6765\u89c2\u5bdf\u4e00\u4e0b\uff1a\n![Sample #3](https://cdn.luogu.com.cn/upload/image_hosting/e5vopmt4.png)\n\n\u4ee5 $\\text{start}=2$\uff0c$\\text{end}=6$ \u4e3a\u4f8b\uff0c \u6211\u4eec\u8981\u4ece $2$ \u53f7\u70b9\u8d70\u5230 $6$ \u53f7\u70b9\uff0c\u5219\u9700\u8981\u5728 $2$ \u53f7\u70b9\u5750\u4e8c\u53f7\u7ebf\u4e8e $4$ \u53f7\u70b9\u4e0b\u8f66\uff0c\u518d\u4ece $4$ \u53f7\u70b9\u5750\u56db\u53f7\u7ebf\u4e8e $6$ \u53f7\u70b9\u4e0b\u8f66\u3002\u9700\u8981\u5750 $2$ \u6761\u7ebf\u8def\u3002\n\n\u4e00\u770b\u5c31\u975e\u5e38\u60f3\u4e0a\u500d\u589e\u3002\u6ee1\u8db3\u591a\u6b21\u65e0\u5e8f\u8be2\u95ee\uff0c\u800c\u4e14\u8fd9\u4e2a\u56fe\u5f88\u5927\uff0c\u4f46\u662f\u611f\u89c9\u53c8\u4e0d\u8001\u597d\u5b9e\u73b0\u7684\uff0c\u6211\u4eec\u7ee7\u7eed\u601d\u8003\u3002\n\n\u63a5\u4e0b\u6765\u4ece\u500d\u589e\u4e24\u4e2a\u57fa\u672c\u6b65\u9aa4\u5165\u624b\uff1a**\u9884\u5904\u7406\u3001\u8be2\u95ee**\u3002\n\n#### \u9884\u5904\u7406\n\n\u8003\u8651**\u500d\u589e**\u3002\u7ec8\u70b9\u53ef\u4ee5\u5728\u8d77\u70b9\u7684\u5de6\u8fb9\uff0c\u4e5f\u53ef\u4ee5\u5728\u8d77\u70b9\u7684\u53f3\u8fb9\u3002\u6240\u4ee5\u5de6\u53f3\u90fd\u8981\u8003\u8651\u5230\u3002\u6211\u4eec\u7528 $le(i,k)$\u3001$ri(i,k)$ \u5206\u522b\u4ee3\u8868\u4ee5\u7b2c $i$ \u4e2a\u70b9\u4e3a\u8d77\u70b9\uff0c\u4e58\u5750 $2^k$ \u6761\u8def\u7ebf\u6240\u80fd\u5230\u8fbe\u7684\u6700\u8fdc\u5de6\u7aef\u70b9\u3001\u53f3\u7aef\u70b9\u3002 \n\n\u53ef\u4ee5\u8bc1\u660e\uff1a\u6b64\u65f6\u7b2c $i$ \u70b9\u4e58\u5750 $2^k$ \u6761\u8def\u7ebf\u80fd\u5230\u8fbe\u7684\u6240\u6709\u70b9\u5747\u5c5e\u4e8e\u533a\u95f4 $[le_{i,k} , ri_{i,k}]$\uff0c\u4e14\u8be5\u533a\u95f4\u5185\u6ca1\u6709\u70b9\u4e0d\u80fd\u88ab $i$ \u5230\u8fbe\u3002\uff08\u53ef\u4ee5\u8fd9\u4e48\u60f3\uff1a\u65e2\u7136\u80fd\u5230\u8fbe\u6700\u8fdc\uff0c\u5219\u4e00\u5b9a\u6709\u4e00\u6761\u8def\u7ebf\u8fde\u63a5\u8d77\u70b9\u548c\u6700\u8fdc\u70b9\uff0c\u90a3\u4e48\u4e2d\u95f4\u7684\u8fd9\u4e9b\u70b9\u53ea\u8981\u63d0\u524d\u4e0b\u8f66\u5c31\u884c\u4e86\u3002\u4e0a\u8f66\u6709\u9650\u5236\uff0c\u4f46\u662f\u4e0b\u8f66\u6ca1\u6709\uff09\u3002\n\n\u63a5\u4e0b\u6765\u60f3\u4e00\u4e0b\u5982\u4f55\u9012\u63a8\u500d\u589e\u5f0f\u3002\u5bf9\u4e8e $2^k$ \u6b21\u6362\u4e58\uff0c\u4e00\u5b9a\u4fdd\u8bc1 $le(i,k-1) \u2265 le(i,k)$ \u4e14 $ri(i,k-1) \u2264 ri(i,k)$ \u624d\u6709\u610f\u4e49\u3002\u901a\u8fc7\u6211\u4eec\u521a\u624d\u7684\u63a8\u8bba\uff0c\u5728 $[le_{i,k-1} , ri_{i,k-1}]$ \u4e2d\u7684\u6240\u6709\u70b9\u90fd\u53ef\u4ee5\u88ab  $i$ \u70b9\u5230\u8fbe\uff0c\u5219\u6211\u4eec\u53ef\u4ee5\u5728 $i$ \u4e58\u5750\u4e00\u6761\u8def\u7ebf\u65f6\u9009\u62e9\u5230\u8fbe\u5176\u4e2d\u7684\u4e00\u70b9 $j$\uff0c\u901a\u8fc7 $j$ \u7684 $le(j,k-1)$ \u548c $ri(j,k-1)$ \u6765\u6269\u5c55\u70b9 $i$ \u7684\u60c5\u51b5\u3002\u5f0f\u5b50\u5c31\u5f88\u5bb9\u6613\u5f97\u51fa\u4e86\uff1a\n\n$le(i,k) = \\min(le(i,k),le(j,k-1))$\uff1b\n\n$ri(i,k) = \\max(ri(i,k),ri(j,k-1))$\uff1b\n\n\u5176\u4e2d $j \\in [ le_{i,k-1} , ri_{i,k-1} ]$\u3002\n\n\u8003\u8651\u4e00\u822c\u60c5\u51b5: \u663e\u7136\u9012\u63a8\u8981\u4f7f\u7528\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u6700\u503c\uff0c\u8fd9\u5c31\u6210\u4e3a\u4e86\u4e00\u4e2a RMQ \u95ee\u9898\uff0c\u90a3\u4e48\u4e00\u4e2a\u4e2a\u679a\u4e3e\u663e\u7136\u662f\u5f88\u8017\u65f6\u7684\u3002 \u6211\u4eec\u53ef\u4ee5\u7528**\u7ebf\u6bb5\u6811**\u6765\u4f18\u5316\u8fd9\u4e2a\u8fc7\u7a0b\u3002  \uff08\u4e4b\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u60f3\u662f\u7528\u4e00\u9897\u7ebf\u6bb5\u6811\u6eda\u52a8\uff0c\u8fd8\u662f\u8981\u5efa\u5f88\u591a\u9897\u7ebf\u6bb5\u6811 ? \uff09\n\n\n------------\n\n\n\u73b0\u5728\u8fd8\u6709\u4e00\u4e2a\u5f88~~\u68d8\u624b~~\u7684\u95ee\u9898\uff0c\u5c31\u662f\u521d\u59cb\u7684 $le(i,0)$\uff0c$ri(i,0)$ \u5982\u4f55\u5f97\u51fa\uff1f \u6211\u662f\u6ca1\u60f3\u51fa\u5982\u4f55\u7528\u7ebf\u6bb5\u6811\uff0c \u4f46\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u4e2a\u7a0d\u52a0\u4fee\u6539\u7684**\u5355\u8c03\u961f\u5217**\u6c42\u51fa\u3002\uff08\u6b63\u662f\u522b\u7684\u9898\u89e3\u5bf9\u8fd9\u5757\u4e00\u7b14\u5e26\u8fc7\u624d\u8ba9\u6211\u4e0b\u51b3\u5fc3\u5199\u8fd9\u7bc7\u9898\u89e3\uff09\n\n\u73b0\u5728\u8003\u8651**\u5355\u8c03\u961f\u5217**\uff0c\u9996\u5148\uff0c\u961f\u5217\u8981\u88c5**\u8def\u7ebf**\uff08\u8fd9\u6837\u5904\u7406\u51fa\u7ec8\u70b9\u6700\u8fdc\u7684\u8def\u7ebf\uff0c\u8ba1\u7b97\u7b54\u6848\u65f6\u627e\u5230\u8fd9\u4e2a\u7ec8\u70b9\u5373\u53ef\uff09\uff0c\u6240\u4ee5\u5927\u5c0f\u5e94\u8be5\u662f $m$ \u4e2a\u3002\u5176\u6b21\uff0c\u9700\u8981\u6539\u52a8\u7684\u5730\u65b9\u5c31\u662f\u6211\u4eec\u8981\u5728\u679a\u4e3e\u8def\u7ebf\u7684\u540c\u65f6\u66f4\u65b0\u6211\u4eec\u7684\u70b9\u3002 \u8fd9\u4e2a\u60f3\u60f3\u5e94\u8be5\u4e5f\u80fd\u660e\u767d\uff0c\u6211\u4eec\u679a\u4e3e\u6bcf\u4e2a\u70b9\uff0c\u540c\u65f6\u4ee5\u8fd9\u4e2a\u70b9\u4e3a\u53c2\u7167\u9010\u6e10\u679a\u4e3e\u8def\u7ebf\u3002\n\n\u4ee5\u6c42 $ri(i,0)$ \u4e3a\u4f8b\uff0c\u5373\u5728\u961f\u5217\u91cc\u7684\u8def\u7ebf\u6ee1\u8db3\u8d77\u70b9\u5728\u8be5\u70b9\u524d\uff0c\u7ec8\u70b9\u5728\u8be5\u70b9\u540e\uff0c\u961f\u5217\u4e2d\u8def\u7ebf\u7684\u7ec8\u70b9\u8981\u6700\u53f3\uff0c\u6240\u4ee5\u8fd9\u4e9b\u8def\u7ebf\u6309\u7167\u5176\u7ec8\u70b9\u7684\u5927\u5c0f\u5728\u961f\u5217\u4e2d\u6ee1\u8db3\u5355\u8c03\u9012\u51cf\u3002 \n\n**\u6ce8\u610f**\uff1a\u6211\u4eec\u5982\u679c\u8981\u679a\u4e3e\u5230\u6ee1\u8db3\u8fd9\u4e2a\u70b9\u6761\u4ef6\u7684\u6240\u6709\u8def\u7ebf\uff0c\u663e\u7136\u8981\u5c06\u8fd9\u4e9b\u8def\u7ebf**\u6309\u8d77\u70b9\u6392\u5e8f**\u3002  \n\n\n------------\n\n\n\u8fd8\u6709\u4e24\u4e2a**\u5c0f\u7ec6\u8282**\uff1a\n\n1. $ri(i,k)$ \u662f\u5411\u53f3\u6700\u8fdc\u7684\u70b9\uff0c\u6240\u4ee5\u53ea\u6709\u6b63\u5411\u8def\u7ebf\u53ef\u80fd\u6709\u5f71\u54cd\uff1b\u53cd\u4e4b $le(i,k)$ \u5219\u53ea\u53d7\u9006\u5411\u8def\u7ebf\u5f71\u54cd\u3002\u8981**\u5206\u5f00\u679a\u4e3e**\u3002  \n\n2. \u5355\u8c03\u961f\u5217\u4e2d\uff0c\u5982\u4f55\u5224\u65ad\u4e00\u6761\u8def\u7ebf\u662f\u5426**\u5408\u6cd5**\uff1f\u4ee5\u6c42 $ri(i,0)$ \u4e3a\u4f8b\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8def\u7ebf\u7684\u8d77\u70b9 $S$\uff0c\u5408\u6cd5\u6ee1\u8db3 $i\u2264S+K-1$\uff0c \u6574\u7406\u5f97 $S\u2265i-K+1$\uff0c\u5219\u5bf9\u4e8e\u4efb\u610f $S\u2264i-K$ \u7684\u8def\u7ebf\u90fd\u4e0d\u80fd\u6ee1\u8db3 $i$ \u662f\u8d77\u70b9\uff0c\u662f**\u4e0d\u5408\u6cd5**\u7684\uff0c\u5e94\u8be5**\u5220\u53bb**\u3002\n\n\n------------\n\n\n\u5219\u9884\u5904\u7406\u7684\u603b\u590d\u6742\u5ea6 $O(n\\log^2{n}+m)$\u3002\n\n\u5206\u522b\u662f\u4e00\u822c\u60c5\u51b5\u7684**\u7ebf\u6bb5\u6811$+$\u500d\u589e**\u548c\u8d77\u59cb\u7684**\u5355\u8c03\u961f\u5217**\u3002\n\n\n------------\n\n\n\n#### \u8be2\u95ee\n\n\u7136\u540e\u8fd9\u9898\u7684\u96be\u70b9\u5c31\u57fa\u672c\u89e3\u51b3\u4e86\u3002\u6211\u4eec\u518d\u6765\u8003\u8651\u4e00\u4e0b\u8be2\u95ee\u5982\u4f55\u5904\u7406\u3002\n\n\u5bf9\u4e8e\u4e00\u5bf9\u8be2\u95ee  $\\langle S_{i} , E_{i}\\rangle$\uff0c\u6211\u4eec\u5c1d\u8bd5\u4ece $S_{i}$ \u4e0d\u65ad\u5411\u5de6\u53f3\u6269\u5c55\uff0c\u76f4\u5230\u80fd\u5230\u8fbe\u7684\u533a\u95f4\u8986\u76d6\u4f4f\u4e86 $E_{i}$\u3002 \n\n\u540c\u65f6\u6ce8\u610f\u4e00\u4e0b\u5982\u4f55\u4fdd\u8bc1**\u6b63\u786e\u6027**\uff1a \n\n\u53ef\u4ee5\u8054\u60f3\u4e00\u4e0b\u500d\u589e\u6c42 LCA\u3002\u9996\u5148\u6211\u4eec\u8981\u5012\u5e8f\u679a\u4e3e $k$ \u4fdd\u8bc1\u5927\u7684\u5148\u5904\u7406\u3002 \u540c\u65f6\uff0cLCA \u5728\u5904\u7406\u7684\u65f6\u5019\u4e0d\u4f1a\u8ba9\u4e24\u4e2a\u70b9\u8df3\u5230\u4e00\u8d77\uff0c\u53ea\u4f1a\u8df3\u5230\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u5b50\u8282\u70b9\uff0c\u4ece\u800c\u4fdd\u8bc1\u4e0d\u4f1a\u51fa\u73b0\u8df3\u5230 LCA \u4e0a\u9762\u5bfc\u81f4\u7956\u5148\u91cd\u5408\u7684\u60c5\u51b5\u3002 \u7c7b\u6bd4\u8fd9\u4e2a\u65b9\u6cd5\uff0c \u6211\u4eec\u4e5f\u53ef\u4ee5\u4f7f\u6700\u540e\u7684\u533a\u95f4 **\u5c06\u8981\u4f46\u4e0d\u5305\u62ec $E_{i}$**\uff0c\u4ece\u800c\u907f\u514d\u4e58\u5750\u4e86\u8fc7\u591a\u7684\u7ebf\u8def\u3002\n\n\u6700\u540e\u6211\u4eec\u518d\u6765\u8003\u8651\u4e00\u4e0b**\u6700\u7ec8\u7684\u7b54\u6848\uff1a**\n\n\u5bf9\u4e8e\u4e00\u6b21\u8be2\u95ee\uff0c\u6211\u4eec\u4e3a\u4e86\u4fdd\u8bc1\u6b63\u786e\u6027\uff0c\u786e\u4fdd\u6bcf\u6b21\u66f4\u65b0\u6362\u4e58\u70b9\u90fd\u6ee1\u8db3**\u4e0d\u8fbe\u5230\uff0c\u4f46\u5c3d\u53ef\u80fd\u5c06\u8981\u5230\u8fbe**\u7ec8\u70b9\u3002\u90a3\u4e48\u5f53\u6211\u4eec\u5b8c\u6210\u4e00\u6b21\u5b8c\u6574\u7684\u5faa\u73af\u5904\u7406\uff08\u5373\u4ece\u6362\u4e58 $2^k$ \u6b21\u4e00\u76f4\u5230\u6362\u4e58 $2^0$ \u6b21\u540e\u5230\u8fbe\u7684\u70b9\uff09\uff0c\u8fd9\u65f6\u8bb0\u5f55\u7684\u7b54\u6848\u4e00\u5b9a**\u4e0d\u80fd\u591f**\u4f7f\u6211\u4eec\u5230\u8fbe\u7ec8\u70b9\u3002\u53ef\u4ee5\u8bc1\u660e\uff0c\u5982\u679c\u8fd9\u4e2a\u8be2\u95ee**\u6709\u89e3**\uff0c**\u5f53\u4e14\u4ec5\u5f53\u7ec8\u70b9 $E_{i}$ \u4f4d\u4e8e\u6700\u540e\u4e00\u6b21\u5230\u8fbe\u7684\u6362\u4e58\u70b9 $j$ \u6362\u4e58\u4e00\u6b21\u53ef\u5230\u8fbe\u7684\u70b9\u7684\u8303\u56f4\u5185\uff08$E_{i}\\in [le_{j,0},ri_{j,0}]$\uff09**\u3002\u82e5\u4e0d\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u5219**\u65e0\u89e3**\uff0c\u8f93\u51fa $-1$\u3002\n\n\u5982\u679c\u8bfb\u8005\u4e0d\u660e\u767d\u4e3a\u4ec0\u4e48\u662f\u8fd9\u4e2a\u6761\u4ef6\uff0c\u6211\u4eec\u4ecd\u7136\u53ef\u4ee5\u8054\u60f3\u500d\u589e\u6c42 LCA\u3002\u8fd9\u91cc\u6211\u901a\u8fc7**\u53cd\u8bc1\u6cd5**\u7ed9\u51fa\u4e00\u4e2a**\u4e0d\u4e25\u8c28**\u7684\u7b80\u5355\u8bc1\u660e\uff1a\n\n\u5047\u5982\u6700\u540e\u7684\u7ec8\u70b9 $E_{i}$ \u4e0d\u6ee1\u8db3\u4e0a\u9762\u7684\u6761\u4ef6\u4e14\u4fdd\u8bc1\u6709\u89e3\uff0c\u5219\u4e00\u5b9a\u6ee1\u8db3 $E_{i}\\in [le_{j,k},ri_{j,k}]$\uff0c\u5176\u4e2d $k \\in [1,\\lfloor\\log{n}\\rfloor]$\u3002\u7136\u800c\uff0c\u6211\u4eec\u5728\u5904\u7406\u8be2\u95ee\u7684\u5faa\u73af\u4e2d\u662f\u4ece\u5927\u5230\u5c0f\u679a\u4e3e $k$\uff0c\u5219\u4e00\u5b9a\u53ef\u4ee5\u627e\u5230\u4e00\u4e2a\u679a\u4e3e\u7684 $k$\uff0c\u5c06\u6700\u540e\u7684\u6362\u4e58\u70b9 $j$ \u66f4\u65b0\uff0c\u4e14\u6ee1\u8db3**\u4e0d\u8fbe\u5230\uff0c\u4f46\u5c06\u8981\u5230\u8fbe**\u7ec8\u70b9\u8fd9\u4e2a\u6761\u4ef6\u3002\u524d\u540e**\u77db\u76fe**\u3002\n\n------------\n\n\n**\u6ce8\u610f\uff1a** \u6309\u7167\u8fd9\u79cd\u65b9\u6cd5\u6269\u5c55\u4e5f**\u4e0d\u80fd\u53ea\u8003\u8651\u8d77\u70b9**\uff0c\u800c\u662f\u8981\u8003\u8651\u6bcf\u6b21\u6362\u4e58\u8d77\u70b9\u6240\u80fd\u5230\u8fbe\u7684\u6240\u6709\u70b9\uff0c\u53d6\u6700\u4f18\u3002\u7136\u540e\u53c8\u56de\u5230\u4e86\u4ee4\u4eba~~\u6b23\u559c~~\u7684 RMQ \u73af\u8282\u3002\u6211\u4eec\u76f4\u63a5\u679a\u4e3e\u500d\u589e\u7684\u6570\u7ec4\u663e\u7136\u4e5f\u4e0d\u662f\u6700\u4f18\u7684\uff0c\u8fd9\u5c31\u7a81\u663e\u51fa\u6211\u4eec\u7ebf\u6bb5\u6811\u7684\u597d\u5904\u4e86\uff0c\u81ea\u7136\u6211\u4eec\u53ef\u4ee5\u7528\u5904\u7406\u500d\u589e\u7684\u7ebf\u6bb5\u6811\u6765\u5728 $\\log{n}$ \u4e0b\u5f97\u51fa\u5f53\u524d\u7684\u6700\u4f18\u3002\u4e5f\u5c31\u56de\u7b54\u4e86\u4e0a\u9762\u7684\u601d\u8003\uff0c\u6211\u4eec\u8981\u5efa $\\lfloor\\log{n}\\rfloor+1$ \u9897\u7ebf\u6bb5\u6811\uff0c\u4e0d\u7528\u6eda\u52a8\u4f18\u5316\u3002\n\n\n------------\n\n\n\u8be2\u95ee\u7684\u590d\u6742\u5ea6 $O(q\\log^2{n})$\u3002\n\n\n------------\n\n\u6700\u540e\u7684**\u603b\u590d\u6742\u5ea6** $O((n+q)\\log^2{n}+m)$\u3002\n\n## \u4ee3\u7801\n\n##### \u5bf9\u4e00\u4e9b\u53d8\u91cf\u540d\u7684\u89e3\u91ca\uff08~~\u6211\u89c9\u5f97\u662f\u6bd4\u8f83\u6b63\u5e38\u7684~~\uff09\n\n- $le(i,k)$ \u8868\u793a\u5411\u5de6\u6700\u8fdc\u5230\u8fbe\u70b9\u7684\u500d\u589e\u6570\u7ec4\n\n- $ri(i,k)$ \u8868\u793a\u5411\u53f3\u6700\u8fdc\u5230\u8fbe\u70b9\u7684\u500d\u589e\u6570\u7ec4\n\n- $up(i)$\uff0c$cnt\\_up$ \u7528\u4e8e\u8bb0\u5f55\u6b63\u5411\u8def\u5f84\uff08\u53d6 $\\text{up}$ \u4e0a\u884c\u610f\uff09\n\n- $down(i)$\uff0c$cnt\\_down$ \u7528\u4e8e\u8bb0\u5f55\u9006\u5411\u8def\u5f84\uff08\u53d6 $\\text{down}$ \u4e0b\u884c\u610f\uff09 \n\n\u56e0\u4e3a\u8981\u5efa**\u591a\u9897**\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u7528\u7ed3\u6784\u4f53\u5c01\u88c5\uff0c\u5f00 $\\text{root}=17$ \u4e2a\u7ebf\u6bb5\u6811\u3002\n\n------------\n\n```cpp\n/* code by jjsnam 2022.4.29 */\n/* Using Segment Tree */\n#include <iostream>\n#include <algorithm>\n#include <cstring>\n\n#define ls (id<<1)\n#define rs (id<<1|1)\n#define mid ((l+r)>>1)\n#define u first\n#define v second\n\nusing namespace std;\ntypedef pair<int,int> pii;\nconst int maxn=1e5+5;\nconst int maxm=2e5+5;\n\nint le[maxn][17],ri[maxn][17];\npii up[maxm],down[maxm];\nint cnt_up,cnt_down;\nint n,m,K,Q;\nstruct Segment_Tree{\n    struct Node{\n        int left,right;\n    }tr[maxn<<2];\n    \n    void pushup(int id){\n        tr[id].left=min(tr[ls].left,tr[rs].left);\n        tr[id].right=max(tr[ls].right,tr[rs].right);\n    }\n\n    void build(int id,int l,int r,int k){\n        if (l==r){\n            tr[id].left=le[l][k];\n            tr[id].right=ri[r][k];\n            return;\n        }\n        build(ls,l,mid,k);\n        build(rs,mid+1,r,k);\n        pushup(id);\n    }\n\n    int query_left(int id,int l,int r,int a,int b){\n        if (a<=l&&r<=b){\n            return tr[id].left;\n        }\n        int res=1e9;\n        if (a<=mid) res=min(res,query_left(ls,l,mid,a,b));\n        if (b>mid) res=min(res,query_left(rs,mid+1,r,a,b));\n        return res;\n    }\n\n    int query_right(int id,int l,int r,int a,int b){\n        if (a<=l&&r<=b){\n            return tr[id].right;\n        }\n        int res=-1e9;\n        if (a<=mid) res=max(res,query_right(ls,l,mid,a,b));\n        if (b>mid) res=max(res,query_right(rs,mid+1,r,a,b));\n        return res;\n    }\n}root[17];\n\nvoid Get_start(){\n    for (int i=1;i<=n;i++) le[i][0]=ri[i][0]=i;\n    sort(up+1,up+cnt_up+1);\n    sort(down+1,down+cnt_down+1,greater<pii>());\n    /* \u5355\u8c03\u961f\u5217 O(m) */\n    int q[maxm],hh=1,tt=0;\n\n    /* \u5904\u7406\u53f3 */\n    for (int i=1,j=1;i<=n;i++){\n        while (j<=cnt_up&&up[j].u<=i){\n            int r=up[j].v;\n            while (hh<=tt&&up[q[tt]].v<=r) tt--;\n            q[++tt]=j;\n            j++;\n        }\n        while (hh<=tt&&up[q[hh]].u<=i-K) hh++;\n        if (hh<=tt) ri[i][0]=max(ri[i][0],up[q[hh]].v);\n    }\n\n    /* init */\n    hh=1,tt=0;\n\n    /* \u5904\u7406\u5de6 */\n    for (int i=n,j=1;i>0;i--){\n        while (j<=cnt_down&&down[j].u>=i){\n            int l=down[j].v;\n            while (hh<=tt&&down[q[tt]].v>=l) tt--;\n            q[++tt]=j;\n            j++;\n        }\n        while (hh<=tt&&down[q[hh]].u>=i+K) hh++;\n        if (hh<=tt) le[i][0]=min(le[i][0],down[q[hh]].v);\n    }\n}\n\nvoid init(){\n    Get_start();\n    root[0].build(1,1,n,0);\n    for (int k=1;k<=16;k++){\n        for (int i=1;i<=n;i++){\n            le[i][k]=root[k-1].query_left(1,1,n,le[i][k-1],ri[i][k-1]);\n            ri[i][k]=root[k-1].query_right(1,1,n,le[i][k-1],ri[i][k-1]);\n        }\n        root[k].build(1,1,n,k);\n    }\n}\n\nint query(int S,int E){\n    int res=0;\n    int l=S,r=S;\n    for (int k=16;k>=0;k--){\n        int L=root[k].query_left(1,1,n,l,r);\n        int R=root[k].query_right(1,1,n,l,r);\n        if (L<=E&&E<=R) continue;\n        l=L,r=R;\n        res+=(1<<k);\n    }\n    int L=root[0].query_left(1,1,n,l,r);\n    int R=root[0].query_right(1,1,n,l,r);\n    if (L<=E&&E<=R) return res+1;\n    else return -1;\n}\n\nint main(){\n    ios::sync_with_stdio(false);\n    cin.tie(0),cout.tie(0);\n\n    cin >> n >> K >> m;\n    for (int i=1,a,b;i<=m;i++){\n        cin >> a >> b;\n        if (a<b) up[++cnt_up]=make_pair(a,b);\n        else down[++cnt_down]=make_pair(a,b);\n    }\n    init();\n    cin >> Q;\n    int s,e;\n    while (Q--){\n        cin >> s >> e;\n        cout << query(s,e) << endl;\n    }\n    return 0;\n}\n```\n\n\n------------\n\n\n## \u603b\u7ed3\n\u6b64\u9898\u7684\u8fd9\u79cd\u505a\u6cd5\u5176\u5b9e\u662f **RMQ** \u95ee\u9898\u4e0e**\u500d\u589e**\u7684\u7ed3\u5408\u3002\n\n\u5b83\u4e0e\u5176\u4ed6\u500d\u589e\u9898\u505a\u6cd5\u6709\u4e00\u4e9b**\u4e0d\u540c\u4e4b\u5904**\uff1a\n\n- \u6700\u540e\u8be2\u95ee\u4e0d\u662f\u76f4\u63a5\u4f7f\u7528\u500d\u589e\u6570\u7ec4\uff0c\u800c\u662f\u7528\u66f4\u65b0\u500d\u589e\u6570\u7ec4\u7684\u7ebf\u6bb5\u6811\u66f4\u65b0\u7b54\u6848\u3002           \n\u53ef\u4ee5\u8fd9\u4e48\u7406\u89e3\uff1a\u6bcf\u4e00\u5c42\u500d\u589e\u7531**\u4e0a\u4e00\u5c42**\u7684\u7ebf\u6bb5\u6811\u533a\u95f4\u6700\u503c\u6c42\u5f97\uff0c\u800c**\u8fd9\u4e00\u5c42**\u7684\u7ebf\u6bb5\u6811\u521d\u59cb\u503c\u5219\u662f**\u66f4\u65b0\u540e**\u7684\u500d\u589e\u6570\u7ec4\u3002\u6240\u4ee5\u5e7f\u4e49\u4e0a\u8bf4\uff0c\u6211\u4eec\u5b58\u7684**\u7ebf\u6bb5\u6811\u4e5f\u7b97\u4e00\u4e2a\u500d\u589e**\u3002\n\n- \u672c\u9898\u66f4\u65b0\u500d\u589e\u6570\u7ec4\u7684\u65b9\u6cd5\u4e5f\u4e0d\u662f\u5355\u4e00\u7684\u9012\u63a8\uff0c\u800c\u662f\u901a\u8fc7\u7ebf\u6bb5\u6811\u4f18\u5316\u540e\u7684\u533a\u95f4\u6700\u503c\u9012\u63a8\u3002\n\n\n------------\n\n\u7136\u540e\u8fd9\u9053\u9898\u5c31\u7ed3\u675f\u4e86\uff01\u597d\u8036\uff08\n\n\u5e94\u8be5\u8fd8\u662f\u6709\u66f4\u4f18\u7684 RMQ \u505a\u6cd5\u7684\uff0c\u4f46\u662f\u6211\u592a\u5f31\u4e86\u60f3\u4e0d\u51fa\u6765\uff08\n\n\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u53ef\u80fd\u6211\u7684\u8868\u8ff0\u4e5f\u6bd4\u8f83\u83dc\uff0c\u5982\u679c\u6709\u95ee\u9898\u6b22\u8fce\u6307\u51fa\uff01",
        "postTime": 1650551067,
        "uid": 528114,
        "name": "jjsnam",
        "ccfLevel": 6,
        "title": "P8163\u9898\u89e3"
    },
    {
        "content": "## \u4e00\u4e2a\u590d\u6742\u5ea6\u8f83\u5c0f\u7684\u505a\u6cd5\n\n\n\u6821\u6a21\u62df\u8d5b\u770b\u5230\u8fd9\u9898\u5df2\u7ecf\u662f\u6700\u540e $20$min \u4e86 QwQ \uff0c\u6240\u4ee5\u662f\u8d5b\u540e\u8865\u9898\u3002\n\n\u9996\u5148\u770b\u5230\u8fd9\u79cd\u8df3\u6765\u8df3\u53bb\u7684\u9898\uff0c\u8bd5\u7740\u8003\u8651\u500d\u589e\uff0c\u53d1\u73b0\u53ef\u884c\u3002\n\n#### \u601d\u8003\u5b9e\u73b0\uff1a\n\n\t\n\u9996\u5148\u53d1\u73b0\uff0c\u80fd\u8df3\u5230\u7684\u5730\u65b9\u4e00\u5b9a\u662f\u4e00\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u9884\u5904\u7406\u4e00\u6b65\u8df3\u5230\u6700\u8fdc\u7684\u70b9\u662f\u54ea\u91cc\uff0c\u8bb0\u6570\u7ec4\u4e3a $left_{i},right_{i}$\u3002\n\n\u4e8e\u662f\u53d1\u73b0\u4e00\u79cd\u53ef\u80fd\uff1a\u5c31\u662f\u5b58\u5728\u4e00\u4e2a\u70b9\u5728\u6240\u80fd\u8df3\u5230\u6700\u8fdc\u8303\u56f4\u5185\uff0c\u4f46\u8df3\u6b64\u70b9\u518d\u8fdb\u884c\u8df3\u8dc3\u66f4\u4f18\u3002\u90a3\u4e48\u5c31\u8981\u5206\u7c7b\u8ba8\u8bba\uff0c\u6240\u4ee5\u9884\u5904\u7406\u50a8\u5b58\u8df3\u4e24\u6b65\u6240\u6269\u5c55\u6700\u5927\u8303\u56f4\u7684\u6570\u7ec4\u3002\n\n\u4e00\u5171\u56db\u79cd\u60c5\u51b5\u5206\u522b\u4e3a\uff1a\u5148\u5de6\u518d\u5de6\uff0c\u5148\u5de6\u518d\u53f3\uff0c\u5148\u53f3\u518d\u5de6\uff0c\u5148\u53f3\u518d\u53f3\u3002\u53ef\u4ee5\u53d1\u73b0\u6240\u6709\u60c5\u51b5\u90fd\u53ef\u8f6c\u79fb\u5f97\u5230\u3002\n\n\u73b0\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u5c31\u6bd4\u4e00\u4e9b\u7ebf\u6bb5\u6811\u505a\u6cd5\u5c11\u4e86\u4e00\u53ea $\\log$\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\nconst int N=1e5+5;\nint n,k,m,q,lim;\nint stl[N][25],str[N][25],fl[N][25],fr[N][25],lf[N],rt[N];\nint lmn[N],lmx[N],rmn[N],rmx[N];\nint Min(int a,int b){return lf[a]<lf[b]?a:b;}\nint Max(int a,int b){return rt[a]>rt[b]?a:b;}\nint queryl(int l,int r){\n\tint lg=std::__lg(r-l+1);\n\treturn min(stl[l][lg],stl[r-(1<<lg)+1][lg]);\n}\nint queryr(int l,int r){\n\tint lg=std::__lg(r-l+1);\n\treturn max(str[l][lg],str[r-(1<<lg)+1][lg]);\n}\nint queryL(int l,int r){\n\tint lg=std::__lg(r-l+1);\n\treturn Min(stl[l][lg],stl[r-(1<<lg)+1][lg]);\n}\nint queryR(int l,int r){\n\tint lg=std::__lg(r-l+1);\n\treturn Max(str[l][lg],str[r-(1<<lg)+1][lg]);\n}\nvoid query(int s,int t){\n\tint l=s,r=s,res=1;\n\tif(lf[s]>t||rt[s]<t){\n\t\tfor(int j=lim;j>=0;j--){\n\t\t\tint L=Min(Min(fl[lmn[l]][j],fl[rmn[r]][j]),Min(fl[lmx[l]][j],fl[rmx[r]][j]));\n\t\t\tint R=Max(Max(fr[lmn[l]][j],fr[rmn[r]][j]),Max(fr[lmx[l]][j],fr[rmx[r]][j]));\n\t\t\tif(lf[L]>t||rt[R]<t) l=L,r=R,res+=(1<<j);\n\t\t}\n\t\tres++;\n\t}\n\tcout<<(res>n?-1:res)<<\"\\n\";\n}\nsigned main(){\n\tstd::ios::sync_with_stdio(0);\n\tcin.tie(0);cout.tie(0);\n\tcin>>n>>k>>m;\n\tmemset(stl,0x3f,sizeof(stl));\n\tfor(int i=1,a,b;i<=m;i++){\n\t\tcin>>a>>b;\n\t\tif(a>b) stl[a][0]=min(stl[a][0],b);\n\t\telse str[a][0]=max(str[a][0],b);\n\t}\n\tfor(int j=1;(1<<j)<=n;j++)\n\tfor(int i=1;i+(1<<j)-1<=n;i++){\n\t\tstl[i][j]=min(stl[i][j-1],stl[i+(1<<(j-1))][j-1]);\n\t\tstr[i][j]=max(str[i][j-1],str[i+(1<<(j-1))][j-1]);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tlf[i]=min(i,queryl(i,min(i+k-1,n)));\n\t\trt[i]=max(i,queryr(max(i-k+1,1),i));\n\t\tstl[i][0]=str[i][0]=i;\n\t}\n\tfor(int j=1;(1<<j)<=n;j++)\n\tfor(int i=1;i+(1<<j)-1<=n;i++){\n\t\tstl[i][j]=Min(stl[i][j-1],stl[i+(1<<(j-1))][j-1]);\n\t\tstr[i][j]=Max(str[i][j-1],str[i+(1<<(j-1))][j-1]);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tfl[i][0]=fr[i][0]=i;\n\t\tlmn[i]=queryL(lf[i],i);\n\t\tlmx[i]=queryR(lf[i],i);\n\t\trmn[i]=queryL(i,rt[i]);\n\t\trmx[i]=queryR(i,rt[i]);\n\t}\n\tfor(int j=1;(1<<j)<=n;j++,lim++){\n\t\tfor(int i=1;i<=n;i++){\n\t\t\tint l=fl[i][j-1],r=fr[i][j-1];\n\t\t\tfl[i][j]=Min(Min(fl[lmn[l]][j-1],fl[rmn[r]][j-1]),Min(fl[lmx[l]][j-1],fl[rmx[r]][j-1]));\n\t\t\tfr[i][j]=Max(Max(fr[lmn[l]][j-1],fr[rmn[r]][j-1]),Max(fr[lmx[l]][j-1],fr[rmx[r]][j-1]));\n\t\t\t// cout<<fl[i][j]<<\" \"<<fr[i][j]<<\"\\n\";\n\t\t}\n\t}\n\tcin>>q;\n\tfor(int i=1,s,t;i<=q;i++){\n\t\tcin>>s>>t;\n\t\tquery(s,t);\n\t}\n\treturn 0;\n}\n//ggghurjv\n```\n",
        "postTime": 1663045964,
        "uid": 467562,
        "name": "Awlgot",
        "ccfLevel": 0,
        "title": "P8163 [JOI 2022 Final] \u94c1\u8def\u65c5\u884c 2 (Railway Trip 2) \u9898\u89e3"
    },
    {
        "content": "### \u5199\u5728\u524d\u9762\uff1a\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a[ST \u8868](https://oi-wiki.org/ds/sparse-table/)\u3002\n\n\u8fd9\u9898\u7684\u5f31\u5316\u7248\uff1a[Minimal Segment Cover](https://www.luogu.com.cn/problem/CF1175E) ~~\u8fd9\u9898\u662f\u84dd\u9898\uff0c\u4f46\u5f31\u5316\u7248\u7adf\u7136\u662f\u4e2a\u7d2b\u9898~~\u3002\n\n### \u66b4\u529b\n\n\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684 $l_i$ \u548c $r_i$\uff0c\u8be2\u95ee\u65f6\u66b4\u529b\u5730\u6269\u5c55\u533a\u95f4\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O(n \\times (m+q))$\u3002\n\n### \u5206\u6790\n\n\u8fd9\u9898\u65f6\u95f4\u7684\u74f6\u9888\u4e3b\u8981\u5728\u4e8e\u4e00\u6b65\u4e00\u6b65\u5730\u6269\u5c55\u533a\u95f4\u592a\u6162\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u500d\u589e\u8fdb\u884c\u4f18\u5316\u3002\n\n$l_{j,i}$ \u8868\u793a $j$ \u8fd9\u4e2a\u70b9\u8df3 $2^i$ \u6b65\u80fd\u5230\u8fbe\u7684\u6700\u5de6\u7aef\u3002\n\n$r_{j,i}$ \u8868\u793a $j$ \u8fd9\u4e2a\u70b9\u8df3 $2^i$ \u6b65\u80fd\u5230\u8fbe\u7684\u6700\u53f3\u7aef\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u9898\u7684\u5de6\u53f3\u7aef\u662f\u53ef\u4ee5\u91cd\u590d\u8d21\u732e\u7684\uff0c\u7a7a\u95f4\u4e5f\u591f\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u91c7\u7528 $\\log{n}$ \u4e2a ST \u8868\u8fdb\u884c\u7ef4\u62a4\u5de6\u53f3\u65ad\u70b9\u8df3 $2^i$ \u6b65\u7684\u6700\u5de6\u7aef\u548c\u6700\u53f3\u7aef\u3002\n\n```cpp\nstruct node\n{\n\tint mx[N][20],mn[N][20];\n\tinline void update(int x)\n\t{\n\t\tF(i,1,n) mx[i][0] = r[i][x],mn[i][0] = l[i][x];\n\t\tF(i,1,w)\n\t\t\tF(j,1,n-(1<<i)+1)\n\t\t\t\tmx[j][i] = max(mx[j][i-1],mx[j+(1<<i-1)][i-1]),mn[j][i] = min(mn[j][i-1],mn[j+(1<<i-1)][i-1]);\n\t}\n\tinline int query(int x,int y,bool o)// 1 \u6700\u5927\u503c 0 \u6700\u5c0f\u503c \n\t{\n\t\tint t = (int)log2(y-x+1);\n\t\tif(o) return max(mx[x][t],mx[y-(1<<t)+1][t]);\n\t\telse return min(mn[x][t],mn[y-(1<<t)+1][t]);\t\t\n\t} \n}st[20];\n```\n\u5bf9\u4e8e\u9884\u5904\u7406\u90e8\u5206\uff0c\u4e5f\u8981\u60f3\u51fa\u4e00\u4e2a\u66f4\u9ad8\u6548\u7684\u65b9\u6cd5\u3002\n\n\u6211\u4eec\u5229\u7528\u4e00\u4e2a\u7c7b\u4f3c\u4e8e\u5dee\u5206\u7684\u601d\u60f3\uff0c\u82e5\u5bf9\u4e8e\u533a\u95f4 $[x,y]$ \u7684\u7aef\u70b9\u4e3a $z$\uff0c\u53ef\u4ee5\u8fdb\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\uff1a\n\n```cpp\ninline void update(int l,int r,int x)\n{\n\tu[l].push_back(x);\n\td[r+1].push_back(x);\t\n}\n```\n\n\u7edf\u8ba1\u7684\u65f6\u5019\u4ece\u5de6\u5230\u53f3\u679a\u4e3e\uff0c\u901a\u8fc7 multiset \u8bb0\u5f55\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u3002\n\n```cpp\nF(i,1,n)\n{\n\tfor(auto j:u[i]) p.insert(j);\t\n\tfor(auto j:d[i])\n\t{\n\t\tit = p.lower_bound(j); \n\t\tp.erase(it);\t\n\t\t//\u6ce8\u610f\u5982\u679c\u76f4\u63a5\u5199 p.erase(j) \u4f1a\u628a\u6240\u6709\u7684 j \u7684\u5220\u6389 \n\t}\n\tl[i][0] = r[i][0] = i;\n\tif(!p.size()) continue;\n\tit = p.begin();\n\tl[i][0] = min(l[i][0],*it);\n\tit = p.end();\n\t--it;\n\tr[i][0] = max(r[i][0],*it);\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a$O((n+q)\\times \\log_{}^2{n})$\u3002\n\n### \u4e24\u70b9\u6ce8\u610f\n\n-  **\u5e94\u5f53\u7279\u5224\u8d77\u70b9\u548c\u7ec8\u70b9\u76f8\u540c\u7684\u60c5\u51b5**\u3002\n\n```cpp\nif(x == y)\n{\n\tputchar('0');\n\tputchar('\\n');\n\tcontinue;\n}\n ```\n- \u5728\u8fdb\u884c erase \u64cd\u4f5c\u65f6\uff0c\u53ea\u5e94\u5f53 erase \u5176\u4e2d\u4e00\u4e2a\n\n```cpp\nfor(auto j:d[i])\n{\n\tit = p.lower_bound(j); \n\tp.erase(it);\t\n\t//\u6ce8\u610f\u5982\u679c\u76f4\u63a5\u5199 p.erase(j) \u4f1a\u628a\u6240\u6709\u7684 j \u7684\u5220\u6389 \n}\n```\n### \u5b8c\u6574\u7248\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate<typename T>inline void read(register T &x)\n{\n\tregister T p = 1,num = 0;\n\tchar c = getchar();\n\twhile(c < '0'||c > '9')\n\t{\n\t\tif(c == '-') p = -p;\n\t\tc = getchar();\n\t}\n\twhile('0' <= c&&c <= '9')\n\t{\n\t\tnum = (num<<3)+(num<<1)+(c^48);\n\t\tc = getchar();\n\t}\n\tx = p * num;\n}\ntemplate<typename T>inline void write(register T x)\n{\n\tif(x < 0) putchar('-'),x = -x;\n\tif(x > 9) write(x/10);\n\tputchar(x%10^48);\n}\n#define D(i,a,b) for(register int i=a;i>=b;--i)\n#define F(i,a,b) for(register int i=a;i<=b;++i)\n#define ll long long\n#define N 100010\nint l[N][20],r[N][20],n,m,k,w,q; \nvector<int> u[N],d[N];\ninline void update(int l,int r,int x)\n{\n\tu[l].push_back(x);\n\td[r+1].push_back(x);\t\n}\nmultiset<int> p;\nmultiset<int>::iterator it;\nstruct node\n{\n\tint mx[N][20],mn[N][20];\n\tinline void update(int x)\n\t{\n\t\tF(i,1,n) mx[i][0] = r[i][x],mn[i][0] = l[i][x];\n\t\tF(i,1,w)\n\t\t\tF(j,1,n-(1<<i)+1)\n\t\t\t\tmx[j][i] = max(mx[j][i-1],mx[j+(1<<i-1)][i-1]),mn[j][i] = min(mn[j][i-1],mn[j+(1<<i-1)][i-1]);\n\t}\n\tinline int query(int x,int y,bool o)// 1 \u6700\u5927\u503c 0 \u6700\u5c0f\u503c \n\t{\n\t\tint t = (int)log2(y-x+1);\n\t\tif(o) return max(mx[x][t],mx[y-(1<<t)+1][t]);\n\t\telse return min(mn[x][t],mn[y-(1<<t)+1][t]);\t\t\n\t} \n}st[20];\nint main()\n{\n//\tfreopen(\"tour.in\",\"r\",stdin);\n//\tfreopen(\"tour.out\",\"w\",stdout);\n\tread(n),read(k),read(m);\n\tw = (int)log2(n) + 1;\n\twhile(m--)\n\t{\n\t\tint x,y;\n\t\tread(x),read(y);\n\t\tif(x < y) update(x,min(y,x+k-1),y);\n\t\telse update(max(y,x-k+1),x,y);\n\t}\n\tF(i,1,n)\n\t{\n\t\tfor(auto j:u[i]) p.insert(j);\t\n\t\tfor(auto j:d[i])\n\t\t{\n\t\t\tit = p.lower_bound(j); \n\t\t\tp.erase(it);\t\n\t\t\t//\u6ce8\u610f\u5982\u679c\u76f4\u63a5\u5199 p.erase(j) \u4f1a\u628a\u6240\u6709\u7684 j \u7684\u5220\u6389 \n\t\t}\n\t\tl[i][0] = r[i][0] = i;\n\t\tif(!p.size()) continue;\n\t\tit = p.begin();\n\t\tl[i][0] = min(l[i][0],*it);\n\t\tit = p.end();\n\t\t--it;\n\t\tr[i][0] = max(r[i][0],*it);\n\t}\n\tst[0].update(0); \n\tF(i,1,w)\n\t{\n\t\tF(j,1,n) \n\t\t{\n\t\t\tl[j][i] = st[i-1].query(l[j][i-1],r[j][i-1],0);\n\t\t\tr[j][i] = st[i-1].query(l[j][i-1],r[j][i-1],1);\n\t\t}\n\t\tst[i].update(i);\n\t}\n\tread(q);\n\twhile(q--)\n\t{\n\t\tint x,y;\n\t\tread(x),read(y);\n\t\tif(x == y)\n\t\t{\n\t\t\tputchar('0');\n\t\t\tputchar('\\n');\n\t\t\tcontinue;\n\t\t}//\u5fc5\u987b\u7279\u5224 \n\t\tint nl = x,nr = x,ans = 0;\n\t\tD(i,w,0)\n\t\t{\n\t\t\tint tl = st[i].query(nl,nr,0),tr = st[i].query(nl,nr,1);\n\t\t\tif(tl > y||tr < y) \n\t\t\t{\n\t\t\t\tans += 1<<i;\n\t\t\t\tnl = tl;\n\t\t\t\tnr = tr;\t\n\t\t\t}\n\t\t}\n\t\tint tl = st[0].query(nl,nr,0),tr = st[0].query(nl,nr,1);\n\t\tif(tl > y||tr < y) write(-1);\n\t\telse write(ans+1);\n\t\tputchar('\\n');  \n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1668345286,
        "uid": 197648,
        "name": "Wangxun",
        "ccfLevel": 5,
        "title": "P8163 \u9898\u89e3"
    },
    {
        "content": "\u5bf9\u4e8e $1\\le N,M,Q\\le 2000$ \u7684\u90e8\u5206\u5206\u53ef\u4ee5\u8003\u8651\u7ef4\u62a4\u51fa\u4ece\u7ad9\u70b9 $i$ \u901a\u8fc7 $\\le j$ \u6761\u8def\u7ebf\u53ef\u4ee5\u5230\u8fbe\u7684\u7ad9\u70b9\u96c6\u5408\uff0c\u53ef\u4ee5\u4f7f\u7528\u5f52\u7eb3\u6cd5\u8bc1\u660e\u80fd\u591f\u5230\u8fbe\u7684\u7ad9\u70b9\u96c6\u5408\u4e00\u5b9a\u662f\u4e00\u6bb5\u533a\u95f4 $[l,r]$ \u6ee1\u8db3 $l\\le i\\le r$\u3002\n\n\u800c\u5bf9\u4e8e $K=N-1$ \u4e0e $A_j<B_j,S_k<T_k$ \u7684\u90e8\u5206\u5206\u53ef\u4ee5\u4f7f\u7528\u500d\u589e\u4f18\u5316\u3002\n\n\u56e0\u6b64\u8003\u8651\u4f7f\u7528\u500d\u589e\u4f18\u5316 $1\\le N,M,Q\\le 2000$ \u7684\u90e8\u5206\u5206\u505a\u6cd5\uff0c\u4ee4 $[left[i][j],right[i][j]]$ \u8868\u793a\u4ece\u70b9 $j$ \u901a\u8fc7 $\\le 2^i$ \u6761\u94c1\u8def\u53ef\u4ee5\u5230\u8fbe\u7684\u7ad9\u70b9\u96c6\u5408\u3002\n\n\u6709\u8f6c\u79fb\u65b9\u7a0b\uff1a\n\n$$\nleft[i][j]=\\min_{k\\in [left[i-1][j],right[i-1][j]]}(left[i-1][k])\n$$\n\n$$\nright[i][j]=\\max_{k\\in [left[i-1][j],right[i-1][j]]}(right[i-1][k])\n$$\n\n\u4f7f\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\uff0c\u9884\u5904\u7406\u7684\u590d\u6742\u5ea6\u4e3a $O(N\\log ^2 N+M)$ \u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u8be2\u95ee\u500d\u589e\u67e5\u8be2\u5373\u53ef\uff0c\u590d\u6742\u5ea6 $O(Q\\log^2 N)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\n#define rep(i,l,r) for (int i = l; i <= r; i++)\n#define per(i,r,l) for (int i = r; i >= l; i--)\n#define fi first\n#define se second\n#define prt std::cout\n#define gin std::cin\n#define edl std::endl\n\nnamespace wxy{\n\nconst int N = 1e5 + 50;\n\nint left[20][N],right[20][N];\n\nint n,k,m,q;\n\nstruct SegTree {\n    struct node {\n        int l,r,left,right;\n    } t[N<<2];\n    void pushup(int u) {\n        t[u].left = std::min(t[u<<1].left,t[u<<1|1].left);\n        t[u].right = std::max(t[u<<1].right,t[u<<1|1].right);\n    }\n    void build(int u,int l,int r) {\n        t[u].l =  l; t[u].r = r;\n        if (l == r) return;\n        int mid = (l + r) >> 1;\n        build(u<<1,l,mid); build(u<<1|1,mid+1,r);\n    }\n    void modify(int u,int x,int left,int right) {\n        if (t[u].l == t[u].r) {\n            t[u].left = left,t[u].right = right;\n            return;\n        }\n        int mid = (t[u].l + t[u].r) >> 1;\n        if (x <= mid) modify(u<<1,x,left,right);\n        else modify(u<<1|1,x,left,right);\n        pushup(u);\n    }\n    int queryLeft(int u,int l,int r) {\n        if (l <= t[u].l && t[u].r <= r) return t[u].left;\n        int mid = (t[u].l + t[u].r) >> 1,res = 500000;\n        if (l <= mid) res = queryLeft(u<<1,l,r);\n        if (r > mid) res = std::min(res,queryLeft(u<<1|1,l,r));\n        return res;\n    }\n    int queryRight(int u,int l,int r) {\n        if (l <= t[u].l && t[u].r <= r) return t[u].right;\n        int mid = (t[u].l + t[u].r) >> 1,res = 0;\n        if (l <= mid) res = queryRight(u<<1,l,r);\n        if (r > mid) res = std::max(res,queryRight(u<<1|1,l,r));\n        return res;\n    } \n} seg[20];\n\nstd::vector<std::pair<int,int>> segs[2];\n\nint ask(int begin,int end) {\n    int l = begin,r = begin,res = 0;\n    per(i,19,0) {\n        int L = seg[i].queryLeft(1,l,r),R = seg[i].queryRight(1,l,r);\n        if (L <= end && end <= R) continue;\n        l = L,r = R,res += (1 << i);\n    } \n    int L = seg[0].queryLeft(1,l,r),R = seg[0].queryRight(1,l,r);\n    if (L <= end && end <= R) return res + 1;\n    else return -1;\n    \n}\n\nvoid init(){\n    seg[0].build(1,1,n);\n    std::deque<int> q;\n    std::sort(segs[0].begin(),segs[0].end());\n    rep(i,1,n) left[0][i] = right[0][i] = i;\n    for (int i = 1,j = -1; i <= n; i++) {\n        while (j + 1 < segs[0].size() && segs[0][j+1].fi <= i) {\n           ++ j; int r = segs[0][j].se;\n           while (q.size() && segs[0][q.back()].se <= r) q.pop_back();\n           q.push_back(j);\n        }\n        while (q.size() && segs[0][q.front()].fi <= i - k) q.pop_front();\n        if (q.size()) right[0][i] = std::max(right[0][i],segs[0][q.front()].se);\n    } q.clear();\n    std::sort(segs[1].begin(),segs[1].end()); std::reverse(segs[1].begin(),segs[1].end());\n    for (auto &Seg : segs[1]) std::swap(Seg.fi,Seg.se);\n   \n    for (int i = n,j = -1; i >= 1; i--) {\n        while (j + 1 < segs[1].size() && segs[1][j+1].se >= i) {\n            ++ j; int l = segs[1][j].fi;\n            while (q.size() && segs[1][q.back()].fi >= l) q.pop_back();\n            q.push_back(j);\n        }\n        while (q.size() && segs[1][q.front()].se >= i + k) q.pop_front();\n        if (q.size()) left[0][i] = std::min(left[0][i],segs[1][q.front()].fi);\n    }\n    rep(i,1,n) seg[0].modify(1,i,left[0][i],right[0][i]);\n    rep(i,1,19) {\n        rep(j,1,n) {\n            left[i][j] = std::min(j,seg[i-1].queryLeft(1,left[i-1][j],right[i-1][j]));\n            right[i][j] = std::max(j,seg[i-1].queryRight(1,left[i-1][j],right[i-1][j]));\n        }\n        seg[i].build(1,1,n);\n        rep(j,1,n) seg[i].modify(1,j,left[i][j],right[i][j]);\n    }\n}\n\ninline void main(){\n    gin >> n >> k >> m; \n    rep(i,1,m) {\n        int l,r; gin >> l >> r;\n        if (l < r) segs[0].push_back({l,r});\n        else segs[1].push_back({l,r});\n    } init(); \n    gin >> q; \n    while (q--) {\n        int s,t; gin >> s >> t;\n        prt << ask(s,t) << edl;\n    }\n}\n\n}signed main(){wxy::main(); return 0;}\n```\n\n",
        "postTime": 1644940666,
        "uid": 317459,
        "name": "RyexAwl",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011P8163 [JOI 2022 Final] \u94c1\u8def\u65c5\u884c 2"
    }
]