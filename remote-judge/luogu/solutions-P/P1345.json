[
    {
        "content": "\n#\u6700\u5c0f\u306e\u5272\u70b9 \u6a21\u677f\u9898\n\n\u4f17\u6240\u5468\u77e5\uff0c \"\u6700\u5c0f\u306e\u5272\u8fb9\"\uff08\u4e5f\u5c31\u662f\u6700\u5c0f\u5272\uff09\u662f\u8981\u6c42\n\n`\u4e3a\u4e86\u4f7f\u539f\u70b9\uff08\u8bb0\u4e3aS\uff09\u548c\u6c47\u70b9\uff08\u8bb0\u4e3aT\uff09\u4e0d\u8fde\u901a\uff0c\u6700\u5c11\u8981\u5272\u51e0\u6761\u8fb9`\n\n\u90a3\u4e48\u6700\u5c0f\u306e\u5272\u70b9\u8981\u600e\u4e48\u6c42\uff1f\n\n###\u8f6c\u5316\uff01\u628a\u6700\u5c0f\u306e\u5272\u70b9\u8f6c\u4e3a\u6700\u5c0f\u306e\u5272\u8fb9\uff01\n\n\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u8f6c\u5316\uff0c\u628a\u6700\u5c0f\u306e\u5272\u70b9\u8f6c\u4e3a\u6700\u5c0f\u306e\u5272\u8fb9\u3002\u5047\u8bbe\u539f\u6765\u7684\u70b9\u7f16\u53f7\u4e3ai\uff0c\u603b\u5171\u6709n\u4e2a\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628a\u6bcf\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u7f16\u53f7\u5206\u522b\u4e3ai\u548ci+n\u3002\u5176\u4e2d\u70b9i\u8d1f\u8d23\u8fde\u63a5\u539f\u56fe\u4e2d\u8fde\u5165\u8fd9\u4e2a\u70b9\u7684\u8fb9\uff0c\u70b9i+n\u8d1f\u8d23\u8fde\u539f\u56fe\u4e2d\u8fde\u51fa\u8fd9\u4e2a\u70b9\u7684\u8fb9\u3002\u5c31\u50cf\u4e0b\u8fb9\u8fd9\u6837\uff1a\n\n ![](https://cdn.luogu.com.cn/upload/pic/11779.png) \n\n\u901a\u8fc7\u8fd9\u79cd\u5947\u602a\u7684\u624b\u2642\u6bb5\uff0c\u6211\u4eec\u5c31\u534e\u4e3d\u4e3d\u7684\u628a \u6700\u5c0f\u306e\u5272\u70b9 \u8f6c\u4e3a \u6700\u5c0f\u306e\u5272\u8fb9\n\n###\u8fb9\u6743\uff1f\n\n\u7531\u4e8e\u4e00\u4e2a\u70b9\u53ea\u80fd\u88ab\u5220\u4e00\u6b21~~\uff08\u5e9f\u8bdd\uff09~~\uff0c\u6545\u70b9i\u548c\u70b9i+n\u4e4b\u95f4\u6709\u4e00\u6761\u8fb9\u6743\u4e3a1\u7684**\u6709\u5411\u8fb9**\uff0c\u800c\u539f\u56fe\u4e2d\u7684\u8fb9\u7684\u8fb9\u6743\u5219\u4e3aINF\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n ![](https://cdn.luogu.com.cn/upload/pic/12142.png) \n\n\uff08\u9ed1\u8fb9\u7684\u8fb9\u6743\u4e3aINF\uff0c\u9ec4\u8fb9\u7684\u8fb9\u6743\u4e3a1\uff09\n\n###\u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u505a\uff1f\n\n\u5982\u679c\u4e00\u6761\u9ec4\u8272\u7684\u8fb9\uff08\u5c31\u662f\u70b9i\u548c\u70b9i+n\u4e4b\u95f4\u7684\u8fb9\uff09\u88ab\u5220\u4e86\uff0c\u90a3\u4e48\u6240\u6709\u8fdb\u5165\u8fd9\u4e2a\u70b9\u7684\u8fb9\u5c31\u4e0d\u80fd\u548c\u4ece\u8fd9\u4e2a\u70b9\u51fa\u53bb\u7684\u8fb9\u76f8\u8fde\uff0c\u5c31\u7b49\u4ef7\u4e8e\u8fd9\u4e2a\u70b9\u4e0d\u5b58\u5728\u3002\n\n###\u5b8c\u6574\u306e\u4ee3\u7801\n\n    \n    \n    \n    \n    \n    \n    \n    \n\n```cpp\n    #include <bits/stdc++.h>\n    #define vc vector\n    #define INF ((int)(1e9))\n    #define LINF ((ll)(1e18))\n    #define pb push_back\n    #define mp make_pair\n    #define ll long long\n    #define _tp template\n    #define _tyn typename\n    #define sint short int\n    #define ull unsigned ll\n    #define pii pair<int,int>\n    #define uint unsigned int\n    #define ms(_data) memset(_data,0,sizeof(_data))\n    #define fin(_filename) freopen(_filename,\"r\",stdin)\n    #define fout(_filename) freopen(_filename,\"w\",stdout)\n    #define msn(_data,_num) memset(_data,_num,sizeof(_data))\n    using namespace std;\n    _tp<_tyn T>void mymax( T &_a , T _b ){ if( _a < _b ) _a = _b; }\n    _tp<_tyn T>void mymin( T &_a , T _b ){ if( _a > _b ) _a = _b; }\n    void print(int _x){printf(\"%d\\n\",_x);}\n    void print(ll _x){printf(\"%I64d \",_x);}\n    #define il inline\n    il int in(){\n        char c = getchar();\n        int ret = 0;\n        while( c < '0'  ||  c > '9' ) c = getchar();\n        while( c >= '0'  &&  c <= '9' ){\n            ret *= 10;\n            ret += c-'0';\n            c = getchar();\n        }\n        return ret;\n    }\n    il void read( int &x ){\n        x = in();\n    }\n    il void read( int &x, int &y ){\n        x = in(); y = in();\n    }\n    il void read( int &x1 , int &x2 , int &x3 ){\n        x1 = in(); x2 = in(); x3 = in();\n    }\n    il void read( int &x1 , int &x2 , int &x3 , int &x4 ){\n        x1 = in(); x2 = in(); x3 = in(); x4 = in();\n    }\n    /////////////////////////////////////////////////////////////////////\n    /////////////////////////////////////////////////////////////////////\n    #define MAXN 110\n    struct Edge{\n        int to,cap,rev;\n        Edge(){}\n        Edge( int tt , int cc , int rr ){\n            to = tt;\n            cap = cc;\n            rev = rr;\n        }\n    };\n    int n,m,s,t;\n    vc<Edge> e[MAXN<<1];\n    vc<Edge> inp[MAXN<<1];\n    il void addedge( int f , int t , int c ){\n        inp[f].pb( Edge(t,c,inp[t].size()) );\n        inp[t].pb( Edge(f,0,inp[f].size()-1) );\n        e[f].pb(Edge());\n        e[t].pb(Edge());\n    }\n    il void f5(){\n        for( int i = 1 ; i <= n+n+1 ; i++ )\n            for( uint j = 0 ; j < inp[i].size() ; j++ )\n                e[i][j] = inp[i][j];\n    }\n    int lev[MAXN<<1];    //Level\n    il void bfs( int st ){\n        ms(lev);\n        queue<int> q;\n        q.push(st);\n        lev[st] = 1;\n        while( !q.empty() ){\n            int now = q.front();\n            q.pop();\n            for( uint i = 0 ; i < e[now].size() ; i++ ){\n                if( e[now][i].cap <= 0 ) continue;\n                int v = e[now][i].to;\n                if( !lev[v] ){\n                    lev[v] = lev[now]+1;\n                    q.push(v);\n                }\n            }\n        }\n    }\n    bool vis[MAXN<<1];\n    il int dfs( int pos , int flow ){\n        if( pos == t ) return flow;\n        for( uint i = 0 ; i < e[pos].size() ; i++ ){\n            Edge x = e[pos][i];\n            int u = x.to;\n            if( vis[u] ) continue;\n            if( x.cap <= 0 ) continue;\n            if( lev[u] != lev[pos]+1 ) continue;\n            vis[u] = 1;\n            int tans = dfs( u , min(flow,x.cap) );\n            vis[u] = 0;\n            if( tans > 0 ){\n                e[pos][i].cap -= tans;\n                e[u][x.rev].cap += tans;\n                return tans;\n            }\n        }\n        return 0;\n    }\n    int ans = 0;\n    int main(){\n        read(n,m,s,t);\n        for( int i = 1 ; i <= n ; i++ ){\n            addedge(i,n+i,1);\n        }\n        for( int i = 1 ; i <= m ; i++ ){\n            int a,b;\n            read(a,b);\n            addedge(a+n,b,INF);\n            addedge(b+n,a,INF);\n        }\n        f5();\n        while(1){\n            bfs(s+n);\n            if( !lev[t] ) break;\n            ms(vis);\n            int tans;\n            while( ( tans = dfs(s+n,INF) ) > 0 ){\n                ans += tans;\n                ms(vis);\n            }\n            //cout << \"[Tans] \" << tans << endl;\n        }\n        printf(\"%d\\n\",ans);\n        return 0;\n    }\n###\u5982\u679c\u5bf9\u9898\u89e3\u6709\u4e0d\u660e\u767d\u7684\u5730\u65b9\u6216\u8005\u611f\u89c9\u9898\u89e3\u4e0d\u5bf9\uff0c\u4e00\u5b9a\u8981\u5728\u201c\u8bc4\u8bba\u533a\u201d\u63d0\u51fa\u3002\n```",
        "postTime": 1512898070,
        "uid": 25630,
        "name": "interestingLSY",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1345"
    },
    {
        "content": "\u849f\u84bb\u535a\u5ba2\uff1a[QAQ](https://www.cnblogs.com/GoldenPotato/p/9131025.html)\n\n\n\n------------\n\n### Solution\n\n\u8fd9\u9053\u9898,\u9700\u8981\u4e00\u4e2a\u5c0f\u6280\u5de7\u6765\u89e3\u51b3\u95ee\u9898\u3002\n\n \n\n\u6211\u76f8\u4fe1\u5f88\u591a\u50cf\u6211\u8fd9\u6837\u63a5\u849f\u84bb\uff0c\u770b\u5230\u8fd9\u9053\u9898\uff0c\u4e0d\u7981\u5174\u594b\u8d77\u6765\uff1a\u201c\u8fd9\u9053\u9898\u662f\u88f8\u7684\u5272\u8fb9\uff0c\u6211\u4f1a\u505a\uff01\uff01\uff01\u201d\n\n\u7136\u540e\u5174\u51b2\u51b2\u7684\u6253\u4e86\u4e2aDINIC\uff0c\u4ea4\u4e00\u53d1\uff0c80\u5206\u3002\n\n\u6240\u4ee5\u8bf4\u6211\u4eec\u6709\u65f6\u5019\u8fd8\u662f\u592anaive\u3002\n\n.\n\n.\n\n\n\u91cd\u65b0\u8bfb\u9898\uff0c\u4f1a\u53d1\u73b0\u8fd9\u9898**\u5272\u7684\u4e0d\u662f\u8fb9\uff0c\u662f\u70b9**\u3002~~\u8fd9\u6837\u8fd8\u670980\u5206\uff0c\u6570\u636e\u771f\u6c34~~\n\n \n\n\u6240\u4ee5\u8bf4\uff0c\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u5272\u8fb9\u8f6c\u5272\u70b9\u7684\u5c0f\u6280\u5de7\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651**\u201c\u62c6\u70b9\u201d**\uff0c\u5373\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u4e2d\u95f4\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a1\u7684\u8fb9\u3002\n\n**\n\u524d\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u201c\u5165\u70b9\u201d\uff0c\u522b\u7684\u70b9\u8fde\u8fb9\u8fde\u5165\u8fd9\u91cc\u3002**\n\n**\u540e\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u201c\u51fa\u70b9\u201d\uff0c\u51fa\u53bb\u7684\u8fb9\u4ece\u8fd9\u91cc\u51fa\u53bb\u3002**\n\n\u8fd9\u6837\uff0c\u53ea\u8981\u6211\u4eec**\u5207\u65ad\u4e2d\u95f4\u90a3\u6761\u8fb9\uff0c\u5c31\u53ef\u4ee5\u7b49\u6548\u4e8e\u9664\u53bb\u8fd9\u4e2a\u70b9**\n\n\u5982\u56fe\n![QAQ](https://cdn.luogu.com.cn/upload/pic/20620.png)\n\n\u7ea2\u8272\u7684\u8fb9\u8fb9\u6743\u4e3a1\uff0c\u9ed1\u8272\u7684\u8fb9\u8fb9\u6743\u4e3ainf\u3002\n\n\u539f\u70b9\u548c\u6c47\u70b9\u7684\u5185\u90e8\u8fb9\u6743\u4e3ainf\uff0c\u56e0\u4e3a\u663e\u7136\u8fd9\u4e24\u4e2a\u70b9\u4e0d\u80fd\u5220\u9664\u3002\n\n\u9898\u9762\u7ed9\u7684\u8fb9\u5220\u9664\u6ca1\u610f\u4e49\uff08\u56e0\u4e3a\u6211\u4eec\u8981\u5220\u70b9\uff09\uff0c\u6240\u4ee5\u4e5f\u8bbe\u4e3ainf(\u4e8b\u5b9e\u4e0a\u8bbe\u4e3a1\u4e5f\u6ca1\u95ee\u9898\uff0c\u56e0\u4e3a\u5220\u9664\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u53ef\u4ee5\u7406\u89e3\u4e3a\u5220\u9664\u4e86\u4e00\u4e2a\u70b9)\n\n \n .\n \n .\n \n .\n \n\n\u81f3\u4e8e\u600e\u4e48\u7b97\u5272\u8fb9\uff0c**\u53ef\u4ee5\u8bc1\u660e\u5272\u8fb9\u5728\u6570\u503c\u4e0a\u7b49\u4e8e\u6700\u5927\u6d41**\uff08\u672c\u849f\u84bb\u4e0d\u4f1a\u8bc1\uff09\n\n\u81f3\u4e8e\u600e\u4e48\u6c42\u6700\u5927\u6d41........\u53ef\u4ee5\u53c2\u8003\u8fd9\u4e2a\u535a\u5ba2\uff1a[\u501f\u7528SYCdalao\u7684\u535a\u5ba2](http://www.cnblogs.com/SYCstudio/p/7260613.html)\n\n \n\n\u6700\u540e\u8bb0\u5f97**\u53cc\u500d\u7a7a\u95f4**\n\n\u7136\u540e\u5c31OjbK\u4e86\n\n\n\n------------\n### Code\n```cpp\n//Luogu P1345 [USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\n//June,3rd,2018\n//\u5272\u8fb9\u8f6c\u5272\u70b9\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\nusing namespace std;\nlong long read()\n{\n    long long x=0,f=1; char c=getchar();\n    while(!isdigit(c)){if(c=='-') f=-1; c=getchar();}\n    while(isdigit(c)){x=x*10+c-'0';c=getchar();}\n    return x*f;\n}\nconst int N=200+10;\nconst int inf=0x3f3f3f3f;\nstruct road\n{\n    int to,w,rev;\n    road (int A,int B,int C)\n    {\n        to=A,w=B,rev=C;\n    }\n};\nvector <road> e[N];\nint n,m,c1,c2,depth[N];\nqueue <int> dl;\nbool bfs()\n{\n    memset(depth,0,sizeof depth);\n    depth[c1]=1;\n    dl.push(c1);\n    while(dl.empty()==false)\n    {\n        int now=dl.front();\n        dl.pop();\n        for(int i=0;i<int(e[now].size());i++)\n            if(e[now][i].w>0 and depth[e[now][i].to]==0)\n            {\n                depth[e[now][i].to]=depth[now]+1;\n                dl.push(e[now][i].to);\n            }\n    }\n    if(depth[c2]==0) return false;\n    return true;\n}\nint dfs(int now,int f)\n{\n    if(now==c2) return f;\n    int ans=0;\n    for(int i=0;i<int(e[now].size());i++)\n        if(e[now][i].w>0 and depth[e[now][i].to]==depth[now]+1)\n        {\n            int temp=dfs(e[now][i].to,min(f,e[now][i].w));\n            e[now][i].w-=temp;\n            e[e[now][i].to][e[now][i].rev].w+=temp;\n            f-=temp,ans+=temp;\n            if(f==0) break;\n        }\n    return ans;\n}\nint Dinic()\n{\n    int ans=0;\n    while(bfs()==true)\n        ans+=dfs(c1,inf);\n    return ans;\n}\ninline void AddLine(int s,int t,int w)\n{\n    e[s].push_back(road(t,w,e[t].size()));\n    e[t].push_back(road(s,0,e[s].size()-1));\n}\nint main()\n{\n    n=read(),m=read(),c1=read(),c2=read();\n    for(int i=1;i<=n;i++) e[i].reserve(8);\n    for(int i=1;i<=n;i++)\n        if(i==c1 or i==c2)\n            AddLine(i,i+n,inf);\n        else\n            AddLine(i,i+n,1);\n    for(int i=1;i<=m;i++)\n    {\n        int s=read(),t=read();\n        AddLine(s+n,t,inf);\n        AddLine(t+n,s,inf);\n    }\n    \n    printf(\"%d\",Dinic());\n    return 0;\n}\n\n```\n\n",
        "postTime": 1528036813,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "\u8fd9\u9898\u96be\u5728\u5efa\u6a21\u554a\n\n\uff5e\uff5e\u4e0d\u77e5\u9053\u5149\u8bf4\u600e\u4e48\u8fde\u8fb9\u4e0d\u8bf4\u539f\u56e0\u7684\u7f51\u7edc\u6d41\u9898\u89e3\u6709\u4ec0\u4e48\u610f\u4e49\uff5e\uff5e\n\n\u4e0d\u96be\u770b\u51fa\uff0c\u8fd9\u9053\u9898\u662f\u6c42\u6700\u5c0f\u5272\u70b9\u96c6\u7684\u5927\u5c0f\u3002\n\n\u663e\u7136\u7684\u662f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u5b83\u53ea\u80fd\u88ab\u5220\u4e00\u6b21\u3002\uff5e\uff5e\u5e9f\u8bdd\uff5e\uff5e\n\n\u90a3\u4e48\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9i\uff0c\u6211\u4eec\u90fd\u8981\u590d\u5236\u5b83\uff08\u8bbe\u4e3ai+n\uff09\uff0c\u5e76\u4e14\u4ecei\u5230i+n\u8fde1\u7684\u8fb9\uff08\u56e0\u4e3a\u53ea\u80fd\u5220\u4e00\u6b21\uff09\u3002\uff08\u53cd\u5411\u8fde0\u4e0d\u8981\u5fd8\u8bb0\uff09\n\n```cpp\nadd ( i, i+n, 1 ) ; add ( i+n, i, 0 ) ;\n```\n\u7136\u540e\u600e\u4e48\u770b\u5f85\u539f\u56fe\u4e2d\u672c\u6765\u5c31\u5b58\u5728\u7684\u8fb9\u5462\uff1f\u5b83\u4eec\u53ea\u662f\u6709\u4e00\u4e2a\u8054\u901a\u7684\u4f5c\u7528\uff0c\u5bf9\u4e8e\u6d41\u91cf\u5e76\u6ca1\u6709\u9650\u5236\uff0c\u6240\u4ee5\u660e\u786e\u4e00\u70b9\uff1a\u8fd9\u4e9b\u8fb9\u52a0\u5165\u7f51\u7edc\u4e2d\u9650\u5236\u5e94\u8be5\u4e3a\u65e0\u9650\u5927\u3002\n\n\u5047\u8bbe\u73b0\u5728\u8981\u4ece\u539f\u56fe\u4e2d\u6dfb\u52a0\u4e00\u6761\u4ecex\u5230y\u7684\u6709\u5411\u8fb9\uff08\u8fd9\u9053\u9898\u662f\u65e0\u5411\u8fb9\uff0c\u518d\u4f9d\u4e0b\u9762\u7684\u65b9\u6cd5\u6dfb\u52a0\u4e00\u4e2ay\u5230x\u7684\u5c31\u884c\u4e86\uff09\u5230\u7f51\u7edc\u4e2d\u53bb\uff0c\u5bf9\u4e8e\u70b9y\u6765\u8bf4\uff0c\u8fd9\u6761\u8fb9\u7684\u52a0\u5165\u4e0d\u5e94\u8be5\u5f71\u54cd\u901a\u8fc7\u5b83\u7684\u6d41\u91cf\u9650\u5236\uff08\u5c31\u662f\u524d\u9762\u8fde\u7684\u90a3\u4e2a1\uff09\u53d1\u751f\u53d8\u5316\uff0c\u6240\u4ee5\u524d\u9762\u90a3\u6761y\u5230y+n\u7684\u8fb9\u5e94\u8be5\u63a5\u5728\u8fd9\u6761\u8fb9\u7684\u540e\u9762\uff0c\u6240\u4ee5\u8fd9\u6761\u8fb9\u7684\u7ec8\u70b9\u8fde\u5411\u7f51\u7edc\u4e2d\u7684y\uff0c\u76f8\u53cd\u7684\uff0c\u8fd9\u6761\u8fb9\u5e94\u8be5\u53d7\u5230x\u7684\uff08\u524d\u9762\u8fde\u76841\uff09\u9650\u5236\u3002\u56e0\u4e3a\uff0c\u5047\u8bbex\u5df2\u7ecf\u88ab\u5220\uff08x\u5230x+n\u6ee1\u6d41\uff09\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u518d\u52a0\u4e0d\u52a0\u90fd\u662f\u6ca1\u6709\u53d8\u5316\u7684\u3002\u6240\u4ee5\uff0c\u8fd9\u6761\u8fb9\u5728\u7f51\u7edc\u4e2d\u7684\u8d77\u70b9\u5e94\u8be5\u662fx+n\uff0c\u8fd9\u6837\u624d\u4fdd\u8bc1\u53d7\u5230\u9650\u5236\u3002\n\n```cpp\nadd ( y+n, x, \u65e0\u9650\u5927 ) ;\nadd ( x, y+n, 0 ) ;\nadd ( x+n, y, \u65e0\u9650\u5927 ) ;\nadd ( y, x+n, 0 ) ;\n```\n\u4e0d\u8981\u5fd8\u8bb0\u53cd\u5411\u7684\u3002\n\n\u6700\u540e\u8d34\u4e00\u4e2a\u5b8c\u6574\u7684\u4ee3\u7801\u5427\n\ndinic\u5199\u7684\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std ;\nbool Read ( int &x, char c = getchar(), bool fg = 0 ) {\n    for ( x = 0 ; !isdigit(c) ; c = getchar() ) if ( c == EOF ) return false ; else if ( c == '-' ) fg = 1 ;\n    for ( ; isdigit(c) ; c = getchar() ) x = 10*x + c - '0' ;\n    if (fg) x = -x ; return true ; //\u624b\u5199\u4e2a\u8bfb\u5165\u4e0d\u8981\u5acc\u5f03\n}\nconst int maxn = 210, maxm = 3510, zhf = 1<<29 ;\nint n, m, be[maxn], to[maxm], nxt[maxm], w[maxm], e = 1, dis[maxn], s, t ;\n\nvoid add ( int x, int y, int z ) {\n    to[++e] = y ;\n    nxt[e] = be[x] ;\n    be[x] = e ;\n    w[e] = z ;\n}\n\nqueue <int> Q ;\nbool bfs() {\n    memset ( dis, -1, sizeof(dis) ) ;\n    int i, u, x ;\n    while ( !Q.empty() ) Q.pop() ;\n    Q.push(s) ;\n    dis[s] = 0 ;\n    while ( !Q.empty() ) {\n        x = Q.front() ;\n        Q.pop() ;\n        if ( x == t ) return true ;\n        for ( i = be[x] ; i ; i = nxt[i] ) {\n            u = to[i] ;\n            if ( dis[u] == -1 && w[i]>0 ) {\n                dis[u] = dis[x]+1 ;\n                if ( u == t ) return true ;\n                Q.push(u) ;\n            }\n        }\n    }\n    return false ;    \n}\n\nint dfs ( int x, int val ) {\n    int i, u, rec ;\n    if ( x == t ) return val ;\n    for ( i = be[x] ; i ; i = nxt[i] ) {\n        u = to[i] ;\n        if ( dis[u]==dis[x]+1 && w[i]>0 && (rec = dfs(u,min(val,w[i]))) ) {\n            w[i] -= rec ;\n            w[i^1] += rec ;\n            return rec ;\n        }\n    }\n}\n\nint max_flow() {\n    int rec = 0, u ;\n    while ( bfs() ) { \n/*        for ( int i = 1 ; i <= 2*n ; i ++ )\n            printf ( \"dis[%d] = %d\\n\", i, dis[i] ) ;*/\n        while (u = dfs(s,zhf))\n            rec += u ;\n    }\n    return rec ;\n}\n\nint main() {\n#ifndef ONLINE_JUDGE\n    freopen ( \"P1345.in\", \"r\", stdin ) ;\n    freopen ( \"P1345.out\", \"w\", stdout ) ;\n#endif\n    int i, j, k, x, y, z ;\n    Read(n) ; Read(m) ;\n    Read(s) ; Read(t) ;\n    s += n ;\n    for ( i = 1 ; i <= n ; i ++ ) {\n        add ( i, i+n, 1 ) ;\n        add ( i+n, i, 0 ) ;\n    }\n    \n    for ( i = 1 ; i <= m ; i ++ ) {\n        Read(x) ; Read(y) ;\n        add ( y+n, x, zhf ) ;\n        add ( x, y+n, 0 ) ;\n        add ( x+n, y, zhf ) ;\n        add ( y, x+n, 0 ) ;\n    }\n    \n    printf ( \"%d\\n\", max_flow() ) ;\n    return 0 ;\n}\n```",
        "postTime": 1492075196,
        "uid": 39497,
        "name": "GoAway",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "[$$\\Large\\texttt{My Blog}$$](https://hydingsy.github.io/)\n\n---\n\n> \u9898\u76ee\u94fe\u63a5\uff1a[Luogu 1345](https://www.luogu.org/problemnew/show/P1345)\n\n\u519c\u592b\u7ea6\u7ff0\u7684\u5976\u725b\u4eec\u559c\u6b22\u901a\u8fc7\u7535\u90ae\u4fdd\u6301\u8054\u7cfb\uff0c\u4e8e\u662f\u4ed6\u4eec\u5efa\u7acb\u4e86\u4e00\u4e2a\u5976\u725b\u7535\u8111\u7f51\u7edc\uff0c\u4ee5\u4fbf\u4e92\u76f8\u4ea4\u6d41\u3002\u8fd9\u4e2a\u7f51\u7edc\u5305\u62ec $n$ \u53f0\u7535\u8111\u548c $m$ \u4e2a\u7535\u8111\u4e4b\u95f4\u7684\u8fde\u63a5\u3002\u8fd9\u4e9b\u7535\u8111\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u53d1\u9001\u7535\u90ae\uff1a\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u7531 $c$ \u53f0\u7535\u8111\u7ec4\u6210\u7684\u5e8f\u5217 $a_1,a_2,\\dots,a_c$\uff0c\u4e14 $a_1$ \u4e0e $a_2$ \u76f8\u8fde\uff0c$a_2$ \u4e0e $a_3$ \u76f8\u8fde\u2026\u2026\u90a3\u4e48\u7535\u8111 $a_1$ \u548c $a_c$ \u5c31\u53ef\u4ee5\u4e92\u53d1\u7535\u90ae\u3002\n\n\u5f88\u4e0d\u5e78\uff0c\u6709\u65f6\u5019\u67d0\u4e9b\u5012\u9709\u7684\u7535\u8111\u4f1a\u574f\u6389\u3002\u8bf4\u8fd9\u610f\u5473\u7740\u8fd9\u53f0\u7535\u8111\u4e0d\u80fd\u518d\u53d1\u9001\u7535\u90ae\u4e86\uff0c\u4e8e\u662f\u4e0e\u8fd9\u53f0\u7535\u8111\u76f8\u5173\u7684\u8fde\u63a5\u4e5f\u5c31\u4e0d\u53ef\u7528\u4e86\u3002\n\n\u6709\u4e24\u5934\u5976\u725b\u5c31\u60f3\uff1a\u5982\u679c\u6211\u4eec\u4e24\u4e2a\u4e0d\u80fd\u4e92\u53d1\u7535\u90ae\uff0c\u81f3\u5c11\u9700\u8981\u574f\u6389\u591a\u5c11\u53f0\u7535\u8111\u5462\uff1f\u4f60\u9700\u8981\u8ba1\u7b97\u51fa\u8fd9\u4e2a\u6700\u5c0f\u503c\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1\\le n\\le 100$\uff0c$1\\le m\\le 600$\n\n------\n\n## Solution\n\n\u8fd9\u9053\u9898\u548c[\u300cBalticOI 2008\u300dMafia](https://hydingsy.github.io/articles/problem-BalticOI-2008-Mafia/) \u7684\u672c\u8d28\u662f\u4e00\u6837\u7684\uff0c\u90fd\u662f\u5272\u6389\u4e00\u90e8\u5206\u70b9\uff0c\u4f7f\u5f97\u6e90\u70b9\u548c\u6c47\u70b9\u4e0d\u8fde\u901a\uff0c\u53ea\u662f\u6e90\u70b9\u548c\u6c47\u70b9\u662f\u4e0d\u80fd\u5272\u6389\u7684\u3002\u4e8e\u662f\u6839\u636e [Mafia](https://hydingsy.github.io/articles/problem-BalticOI-2008-Mafia) \u7684\u601d\u8def\uff0c\u6211\u4eec\u6709\u4e00\u4e2a\u5c0f\u53d8\u5316\uff1a\u6e90\u70b9\u4e3a $s_2$\uff0c\u6c47\u70b9\u4e3a $t_1$\u3002\u4e4b\u540e\u76f4\u63a5\u8dd1\u6700\u5c0f\u5272\u5c31\u884c\u4e86\u3002\n\n**\u65f6\u95f4\u590d\u6742\u5ea6**\uff1a$O(n^2m)$\n\n------\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <queue>\n\nconst int N=205,M=5e3+5;\nint n,m,tot=1,lnk[N],ter[M],nxt[M],val[M],dep[N],cnr[N];\n\nint id(int x,int y) {\n    return (x-1)*m+y;\n}\nvoid add(int u,int v,int w) {\n    ter[++tot]=v,nxt[tot]=lnk[u],lnk[u]=tot,val[tot]=w;\n}\nvoid addedge(int u,int v,int w) {\n    add(u,v,w),add(v,u,0);\n}\nint bfs(int s,int t) {\n    memset(dep,0,sizeof(dep));\n    memcpy(cnr,lnk,sizeof(lnk));\n    std::queue<int> q;\n    q.push(s),dep[s]=1;\n    while(!q.empty()) {\n        int u=q.front(); q.pop();\n        for(int i=lnk[u];i;i=nxt[i]) {\n            int v=ter[i];\n            if(val[i]&&!dep[v]) q.push(v),dep[v]=dep[u]+1;\n        }\n    }\n    return dep[t];\n}\nint dfs(int u,int t,int flow) {\n    if(u==t) return flow;\n    int ans=0;\n    for(int i=cnr[u];i&&ans<flow;i=nxt[i]) {\n        cnr[u]=i;\n        int v=ter[i];\n        if(val[i]&&dep[v]==dep[u]+1) {\n            int x=dfs(v,t,std::min(val[i],flow-ans));\n            if(x) val[i]-=x,val[i^1]+=x,ans+=x;\n        }\n    }\n    if(ans<flow) dep[u]=-1;\n    return ans;\n}\nint dinic(int s,int t) {\n    int ans=0;\n    while(bfs(s,t)) {\n        int x;\n        while((x=dfs(s,t,1<<30))) ans+=x;\n    }\n    return ans;\n}\nint main() {\n    int s,t;\n    scanf(\"%d%d%d%d\",&n,&m,&s,&t);\n    for(int i=1;i<=n;++i) addedge(i,i+n,1);\n    while(m--) {\n        int u,v;\n        scanf(\"%d%d\",&u,&v);\n        addedge(u+n,v,1<<30);\n        addedge(v+n,u,1<<30);\n    }\n    printf(\"%d\\n\",dinic(s+n,t));\n    return 0;\n}\n```\n\n",
        "postTime": 1545045181,
        "uid": 49725,
        "name": "Siyuan",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "## P1345 [USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\n\n\u9898\u76ee\u63cf\u8ff0\n\n\u519c\u592b\u7ea6\u7ff0\u7684\u5976\u725b\u4eec\u559c\u6b22\u901a\u8fc7\u7535\u90ae\u4fdd\u6301\u8054\u7cfb\uff0c\u4e8e\u662f\u5979\u4eec\u5efa\u7acb\u4e86\u4e00\u4e2a\u5976\u725b\u7535\u8111\u7f51\u7edc\uff0c\u4ee5\u4fbf\u4e92\u76f8\u4ea4\u6d41\u3002\u8fd9\u4e9b\u673a\u5668\u7528\u5982\u4e0b\u7684\u65b9\u5f0f\u53d1\u9001\u7535\u90ae\uff1a\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u7531c\u53f0\u7535\u8111\u7ec4\u6210\u7684\u5e8f\u5217a1,a2,...,a(c)\uff0c\u4e14a1\u4e0ea2\u76f8\u8fde\uff0ca2\u4e0ea3\u76f8\u8fde\uff0c\u7b49\u7b49\uff0c\u90a3\u4e48\u7535\u8111a1\u548ca(c)\u5c31\u53ef\u4ee5\u4e92\u53d1\u7535\u90ae\u3002\n\n\u5f88\u4e0d\u5e78\uff0c\u6709\u65f6\u5019\u5976\u725b\u4f1a\u4e0d\u5c0f\u5fc3\u8e29\u5230\u7535\u8111\u4e0a\uff0c\u519c\u592b\u7ea6\u7ff0\u7684\u8f66\u4e5f\u53ef\u80fd\u78be\u8fc7\u7535\u8111\uff0c\u8fd9\u53f0\u5012\u9709\u7684\u7535\u8111\u5c31\u4f1a\u574f\u6389\u3002\u8fd9\u610f\u5473\u7740\u8fd9\u53f0\u7535\u8111\u4e0d\u80fd\u518d\u53d1\u9001\u7535\u90ae\u4e86\uff0c\u4e8e\u662f\u4e0e\u8fd9\u53f0\u7535\u8111\u76f8\u5173\u7684\u8fde\u63a5\u4e5f\u5c31\u4e0d\u53ef\u7528\u4e86\u3002\n\n\u6709\u4e24\u5934\u5976\u725b\u5c31\u60f3\uff1a\u5982\u679c\u6211\u4eec\u4e24\u4e2a\u4e0d\u80fd\u4e92\u53d1\u7535\u90ae\uff0c\u81f3\u5c11\u9700\u8981\u574f\u6389\u591a\u5c11\u53f0\u7535\u8111\u5462\uff1f\u8bf7\u7f16\u5199\u4e00\u4e2a\u7a0b\u5e8f\u4e3a\u5979\u4eec\u8ba1\u7b97\u8fd9\u4e2a\u6700\u5c0f\u503c\u3002\n\n\u4ee5\u5982\u4e0b\u7f51\u7edc\u4e3a\u4f8b\uff1a\n\n1* / 3 - 2*\n\n\u8fd9\u5f20\u56fe\u753b\u7684\u662f\u67092\u6761\u8fde\u63a5\u76843\u53f0\u7535\u8111\u3002\u6211\u4eec\u60f3\u8981\u5728\u7535\u81111\u548c2\u4e4b\u95f4\u4f20\u9001\u4fe1\u606f\u3002\u7535\u81111\u4e0e3\u30012\u4e0e3\u76f4\u63a5\u8fde\u901a\u3002\u5982\u679c\u7535\u81113\u574f\u4e86\uff0c\u7535\u81111\u4e0e2\u4fbf\u4e0d\u80fd\u4e92\u53d1\u4fe1\u606f\u4e86\u3002\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\u7b2c\u4e00\u884c \u56db\u4e2a\u7531\u7a7a\u683c\u5206\u9694\u7684\u6574\u6570\uff1aN,M,c1,c2.N\u662f\u7535\u8111\u603b\u6570(1<=N<=100)\uff0c\u7535\u8111\u75311\u5230N\u7f16\u53f7\u3002M\u662f\u7535\u8111\u4e4b\u95f4\u8fde\u63a5\u7684\u603b\u6570(1<=M<=600)\u3002\u6700\u540e\u7684\u4e24\u4e2a\u6574\u6570c1\u548cc2\u662f\u4e0a\u8ff0\u4e24\u5934\u5976\u725b\u4f7f\u7528\u7684\u7535\u8111\u7f16\u53f7\u3002\u8fde\u63a5\u6ca1\u6709\u91cd\u590d\u4e14\u5747\u4e3a\u53cc\u5411\u7684(\u5373\u5982\u679cc1\u4e0ec2\u76f8\u8fde\uff0c\u90a3\u4e48c2\u4e0ec1\u4e5f\u76f8\u8fde)\u3002\u4e24\u53f0\u7535\u8111\u4e4b\u95f4\u81f3\u591a\u6709\u4e00\u6761\u8fde\u63a5\u3002\u7535\u8111c1\u548cc2\u4e0d\u4f1a\u76f4\u63a5\u76f8\u8fde\u3002\n\n\u7b2c2\u5230M+1\u884c \u63a5\u4e0b\u6765\u7684M\u884c\u4e2d\uff0c\u6bcf\u884c\u5305\u542b\u4e24\u53f0\u76f4\u63a5\u76f8\u8fde\u7684\u7535\u8111\u7684\u7f16\u53f7\u3002\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\u4e00\u4e2a\u6574\u6570\u8868\u793a\u4f7f\u7535\u8111c1\u548cc2\u4e0d\u80fd\u4e92\u76f8\u901a\u4fe1\u9700\u8981\u574f\u6389\u7684\u7535\u8111\u6570\u76ee\u7684\u6700\u5c0f\u503c\u3002\n\n---\n\n# \u5206\u6790\n\n\u9996\u5148\u4ecb\u7ecd\u4e00\u4e0b\u6700\u5c0f\u5272\uff1a\n\n\u7ed9\u5b9a\u4e00\u4e2a\u7f51\u7edc\uff0c\u82e5\u628a\u4e00\u4e2a\u8fb9\u96c6\u5220\u53bb\u4e4b\u540e\uff0c\u6e90\u70b9$S$\u4e0e\u6c47\u70b9$T$\u4e0d\u518d\u8054\u901a\uff0c\u90a3\u4e48\u6211\u4eec\u79f0\u8fd9\u4e2a\u8fb9\u96c6\u4e3a\u6b64\u7f51\u7edc\u7684**\u5272**\u3002\u8fb9\u5bb9\u91cf\u4e4b\u548c\u7684\u6700\u5c0f\u7684\u5272\u6210\u4e3a\u6b64\u7f51\u7edc\u7684\u6700\u5c0f\u5272\n\n\u7136\u540e\u6709\u5b9a\u7406\uff1a\u6700\u5927\u6d41 = \u6700\u5c0f\u5272 ~~\uff08\u849f\u84bb\u4e0d\u4f1a\u8bc1\u660e\uff09~~\n\n\u5206\u6790\u9898\u610f\u53ef\u5f97\uff1a\u8fd9\u9898\u6c42\u7684\u5c31\u662f\u628a\u7ed9\u5b9a\u4e24\u70b9\u4f5c\u4e3a\u6e90\u70b9\u548c\u6c47\u70b9\u7684\u7f51\u7edc\u7684\u6700\u5c0f\u5272\n\n\u53ef\u662f\u8fd9\u9898\u662f\u70b9\u88ab\u5272\u6389\u800c\u4e0d\u662f\u8fb9\uff0c\u600e\u4e48\u529e\u5462\uff1f\u6211\u4eec\u5c31\u8981\u7528\u5230\u8fb9\u6362\u70b9\u7684\u77e5\u8bc6\u4e86\n\n# \u70b9\u8fb9\u8f6c\u6362\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u62c6\u6210 **\u70b9--\u8fb9--\u70b9** \u7684\u5f62\u5f0f\uff0c\n\n\u7406\u89e3\uff1a\u6211\u4eec\u628a\u6bcf\u4e2a\u70b9\u6bd4\u4f5c\u57ce\u5e02\uff0c\u8fb9\u6bd4\u4f5c\u57ce\u5e02\u95f4\u9053\u8def\uff0c\u90a3\u4e48\u70b9\u6743\u5c31\u662f\u4f60\u8fdb\u5165\u57ce\u5e02\u8981\u6536\u94b1\uff0c\u8fb9\u6743\u5c31\u662f\u4f60\u8fdb\u8fc7\u8def\u8981\u4ea4\u8fc7\u8def\u8d39\uff0c\u90a3\u4e48\u70b9--\u300b\u8fb9\u4e0d\u5c31\u662f\u5728\u5165\u57ce\u53e3\u548c\u51fa\u57ce\u53e3\u4e4b\u95f4\u8bbe\u4e00\u6761\u8def\uff0c\u8def\u8d39\u4e3a\u8fdb\u5165\u57ce\u5e02\u6536\u7684\u94b1\u4e86\u5417\uff1f\n\n\u800c\u5728\u6700\u5927\u6d41\u7c7b\u9898\u76ee\u4e2d\uff0c**\u6d41\u91cf\uff08\u4e5f\u5c31\u662f\u8fb9\u6743\uff09\u662f\u906d\u5230\u9650\u5236\u7684**\uff0c\u6240\u4ee5\u6709\u4e9b\u5730\u65b9\u4f1a\u4e0e\u8def\u8d39\u8fd9\u4e2a\u6bd4\u55bb\u7565\u6709\u4e0d\u540c\uff0c\u5177\u4f53\u5b9e\u73b0\u5982\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/17306.png)\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a\u8fd9\u9898\u4e2d\u7f51\u7ebf\u4e3a\u65e0\u5411\u8fb9\uff0c\u6240\u4ee5\u8fde\u8fb9\u7684\u65f6\u5019\u8981\u7ec3\u53cd\u5411\u8fb9\uff0c\u5177\u4f53\u53c2\u89c1\u4ee3\u7801\n\n\u61c2\u5f97\u4e86\u70b9\u8fb9\u8f6c\u6362\u548c\u6700\u5c0f\u5272\u5efa\u6a21\uff0c\u8fd9\u9898\u5c31\u8fce\u5203\u800c\u89e3\u4e86\n\n# AC\u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<algorithm>\n#define ll long long\nusing namespace std;\nint RD(){\n    int out = 0,flag = 1;char c = getchar();\n    while(c < '0' || c >'9'){if(c == '-')flag = -1;c = getchar();}\n    while(c >= '0' && c <= '9'){out = out * 10 + c - '0';c = getchar();}\n    return flag * out;\n    }\nconst int maxn = 10019,INF = 1e9;\nint num,nr,nume = 1,s,t;\nint maxflow;\nint head[maxn];\nstruct Node{int v,dis,nxt;}E[maxn << 2];\nvoid add(int u,int v,int dis){\n    E[++nume].nxt = head[u];\n    E[nume].v = v;\n    E[nume].dis = dis;\n    head[u] = nume;\n    }\nint lev[maxn];\nbool bfs(){\n    queue<int>Q;\n    while(!Q.empty())Q.pop();\n    memset(lev,0,sizeof(lev));\n    lev[s] = 1;\n    Q.push(s);\n    while(!Q.empty()){\n        int u = Q.front();\n        Q.pop();\n        for(int i = head[u];i;i = E[i].nxt){\n            int v = E[i].v;\n            if(E[i].dis && !lev[v]){\n                lev[v] = lev[u] + 1;\n                if(v == t)return 1;\n                Q.push(v);\n                }\n            }\n        }\n    return 0;\n    }\nint Dinic(int u,int flow){//\u6700\u5927\u6d41\u677f\u5b50\n    if(u == t)return flow;\n    int rest = flow,k;\n    for(int i = head[u];i;i = E[i].nxt){\n        int v = E[i].v;\n        if(lev[v] == lev[u] + 1 && E[i].dis){\n            k = Dinic(v,min(rest,E[i].dis));\n            if(!k)lev[v] = 0;\n            rest -= k;\n            E[i].dis -= k;\n            E[i ^ 1].dis += k;\n            }\n        }\n    return flow - rest;\n    }\nint main(){\n    num = RD();nr = RD();s = RD();t = RD();\n    for(int i = 1;i <= num;i++){\n        add(i,i + num,1);\n        add(i + num,i,0);//\u70b9\u5206\u88c2\uff0c\u62c6\u4e3a\u8fb9\n        }\n    int u,v;\n    for(int i = 1;i <= nr;i++){\n        u = RD();v = RD();\n        add(u + num,v,INF);\n        add(v,u + num,0);\n        add(v + num,u,INF);//\u6ce8\u610f\u8fde\u53cd\u5411\u8fb9\n        add(u,v + num,0);\n        }\n    s += num;\n    int flow = 0;\n    while(bfs()){\n        while(flow = Dinic(s,INF))maxflow += flow;//\u8dd1\u6700\u5927\u6d41\u6c42\u6700\u5c0f\u5272\n        }\n    printf(\"%d\\n\",maxflow);\n    return 0;\n    }\n```",
        "postTime": 1523534120,
        "uid": 56230,
        "name": "\u5929\u4e0a\u4e00\u9897\u86cb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "\u9898\u76ee\u5927\u610f$:$\n\n\u7ed9\u5b9a\u4e00\u5f20\u56fe,\u7ed9\u51fa\u6e90\u70b9\u548c\u6c47\u70b9,\u6700\u5c11\u5220\u53bb\u591a\u5c11\u4e2a\u70b9\u4f7f\u4e24\u70b9\u4e0d\u8fde\u901a.\n\n\u8fd9\u4e2a\u9898\u5b9a\u4e49\u4e0a\u6709\u70b9\u50cf\u7f51\u7edc\u6d41\u4e2d\u7684\u6700\u5c0f\u5272,\u4e0d\u8fc7\u8fd9\u4e2a\u9898\u4e2d\u662f\u70b9,\u6700\u5c0f\u5272\u662f\u8fb9,\u53ea\u8981\u60f3\u529e\u6cd5\u8f6c\u5316\u4e00\u4e0b,\u8003\u8651\u5982\u4f55\u5c06\u70b9\u53d8\u4e3a\u8fb9.\n\n\u8fd9\u4e2a\u65f6\u5019\u5c31\u8981\u7528\u5230\u7f51\u7edc\u6d41\u4e2d\u7684\u4e00\u4e2a\u5e38\u7528\u7684\u6280\u5de7$:$\u62c6\u70b9\u6cd5.\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u6bcf\u4e00\u4e2a\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9,\u5c06\u4e00\u4e2a\u70b9\u5220\u9664,\u7b49\u4ef7\u4e8e\u5c06\u8be5\u5e97\u5165\u70b9\u548c\u51fa\u70b9\u4e4b\u95f4\u7684\u8fb9\u5220\u9664.\n\n\u5982\u56fe$:$\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/3hh0cxvq.png)\n\n\u800c\u6211\u4eec\u53ea\u8981\u5c06\u6bcf\u4e2a\u70b9\u5165\u70b9\u548c\u51fa\u70b9\u4e4b\u95f4\u7684\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a1,\u5176\u4ed6\u8fb9\u7684\u5bb9\u91cf\u8bbe\u4e3a$INF$,\u518d\u8dd1\u4e00\u8fb9\u6700\u5927\u6d41\u5373\u53ef,\u56e0\u4e3a\u5176\u4ed6\u8fb9\u5bb9\u91cf\u5747\u4e3a$inf$,\u6240\u4ee5\u53ef\u4ee5\u4fdd\u8bc1\u4f18\u5148\u9009\u51fa\u70b9\u548c\u5165\u70b9\u4e4b\u95f4\u7684\u8fb9,\u800c\u4e0d\u4f1a\u5220\u53bb\u672c\u6765\u7684\u8fb9.\n\n\u4ee3\u7801\u5982\u4e0b$:$\n\n``` cpp\n\n#include<queue>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#define mian main\n#define inf 0x3f3f3f3f\nusing namespace std;\nconst int N=201,M=20000;\n\nqueue<int>Q;\n\nint n,m,s,t,depth[N],max_flow;\n\nint tt,to[M],nex[M],w[M],head[N];\n\ninline void add(int x,int y,int W){\n\tw[tt]=W;\n\tto[tt]=y;\n\tnex[tt]=head[x];\n\thead[x]=tt++;\n\treturn ;\n}\n\ninline bool bfs(){//\u7f51\u7edc\u6d41\u6a21\u677f;\n\tmemset(depth,0,sizeof depth);\n\tQ=queue<int>();\n\tQ.push(s);\n\tdepth[s]=1;\n\twhile(Q.size()){\n\t\tint q=Q.front();\n\t\tQ.pop();\n\t\tfor(int i=head[q],u;~i;i=nex[i])\n\t\t\tif(w[i]){\n\t\t\t\tu=to[i];\n\t\t\t\tif(!depth[u]){\n\t\t\t\t\tdepth[u]=depth[q]+1;\n\t\t\t\t\tif(u==t)\n\t\t\t\t\t\treturn true;\n\t\t\t\t\tQ.push(u);\n\t\t\t\t}\n\t\t\t}\n\t}\n\treturn false;\n}\n\nint dfs(int g,int flow){\n\tif(g==t)\n\t\treturn flow;\n\tint now_flow,rest=flow;\n\t\n\tfor(int i=head[g],u;~i&&rest;i=nex[i]){\n\t\tu=to[i];\n\t\tif(w[i]&&depth[u]==depth[g]+1){\n\t\t\tnow_flow=dfs(u,min(rest,w[i]));\n\t\t\tif(!now_flow)\n\t\t\t\tdepth[u]=0;\n\t\t\tw[i]-=now_flow;\n\t\t\tw[i^1]+=now_flow;\n\t\t\trest-=now_flow;\n\t\t}\n\t}\n\t\n\treturn flow-rest;\n}\n\ninline void dinic(){\n\tint now_flow;\n\t\n\twhile(bfs())\n\t\twhile(now_flow=dfs(s,inf))\n\t\t\tmax_flow+=now_flow;\n\t\n\treturn ;\n}\n\nint mian(){\n\tmemset(head,-1,sizeof head);\n\t\n\tcin>>n>>m>>s>>t;\n\t\n\ts+=n;//\u4ee5\u6e90\u70b9\u7684\u51fa\u70b9\u4e3a\u771f\u5b9e\u6e90\u70b9,\u6c47\u70b9\u5165\u70b9\u4e3a\u771f\u5b9e\u5165\u70b9,\n    \t //\u9632\u6b62\u5220\u5230\u6e90\u70b9\u548c\u6c47\u70b9\u7684\u51fa\u70b9\u548c\u5165\u70b9\u4e4b\u95f4\u7684\u8fb9;\n\t\n\tfor(int i=1;i<=n;++i)\n\t\tadd(i,i+n,1),\n\t\tadd(i+n,i,0);\n\t\n\tint x,y;\n\t\n\tfor(int i=1;i<=m;++i)\n\t\tcin>>x>>y,\n\t\tadd(x+n,y,inf),\n\t\tadd(y,x+n,0),\n\t\tadd(y+n,x,inf),\n\t\tadd(x,y+n,0);\n\t\n\tdinic();\n\t\n\tcout<<max_flow<<endl;\n\t\n\treturn 0;\n}\n\n\n```",
        "postTime": 1568809085,
        "uid": 124890,
        "name": "bugaile",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "\u9898\u9762\u8bb2\u4e86\u4e00\u5806\u4e1c\u897f\u8ba9\u6211\u4eec\u6765\u7406\u89e3\u6700\u5c0f\u5272\u3002\n\n\u9996\u5148 **\u6700\u5927\u6d41 $=$ \u6700\u5c0f\u5272** \u6ca1\u9519\u5427\u3002\n\n\u7136\u540e\u53d1\u73b0\u8fd9\u91cc\u662f\u5272\u70b9\u800c\u4e0d\u662f\u5272\u8fb9\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9,\u7136\u540e\u628a\u8fb9\u6743\u5957\u8fdb\u53bb\u3002\u8fd9\u9898\u8ddf [\u6559\u8f85\u7684\u7ec4\u6210](https://www.luogu.org/problemnew/show/P1231) \u5f88\u50cf,\u5927\u5bb6\u53ef\u4ee5\u53bb\u770b\u6211\u7684 [$Blog$](https://www.luogu.org/blog/acking/solution-p1231)\u3002\n\n\u8dd1\u7684 $ISAP$,\u7adf\u7136\u88ab\u5361\u5230\u4e86 $20ms$ (\u603b\u5171)\n\n```pascal\n// luogu-judger-enable-o2\nUses math;\n\nvar\n    value,reach,next:array[-1..3100] of longint;\n    gap,dis,cnt:array[-1..1400] of longint;\n    n,m,z,l,r,k,i,j,sum,tot,sink,source,number,maxflow:longint;\n\nprocedure add(l,r,sum:longint);\nbegin\n    inc(tot); reach[tot]:=r; value[tot]:=sum; next[tot]:=cnt[l]; cnt[l]:=tot;\nend;\n\nfunction Dfs(now,flow:longint):longint;\nvar i,k,mindis,ret:longint;\nbegin\n    mindis:=n-1; ret:=flow;\n    if now=sink then exit(flow);\n    i:=cnt[now];\n    while i<>-1 do\n    begin\n        if value[i]>0 then\n        begin\n            if dis[now]=dis[reach[i]]+1 then\n            begin\n                k:=Dfs(reach[i],min(ret,value[i]));\n                dec(value[i],k);inc(value[i xor 1],k);\n                dec(ret,k);\n                if dis[source]>=n then exit(flow-ret);\n                if ret=0 then break;\n            end;\n             mindis:=min(mindis,dis[reach[i]]);\n        end;\n        i:=next[i];\n    end;\n    if ret=flow then\n    begin\n        dec(gap[dis[now]]);\n        if gap[dis[now]]=0 then dis[source]:=n;\n        dis[now]:=mindis+1;\n        inc(gap[dis[now]]);\n    end;\n    exit(flow-ret);\nend;\n\nbegin\n    filldword(cnt,sizeof(cnt) div 4,maxlongint*2+1); tot:=1;\n    read(n,m,source,sink);\n    for i:=1 to n do begin add(i,i+n,1); add(i+n,i,0); end;\n    for i:=1 to m do\n    begin\n        read(l,r);\n        add(l+n,r,maxlongint div 843); add(r,l+n,0);\n        add(r+n,l,maxlongint div 843); add(l,r+n,0);\n    end;\n    inc(source,n); n:=n*2+2; gap[source]:=n;\n    while dis[source]<n do inc(maxflow,Dfs(source,maxlongint)); \n    writeln(maxflow); \nend.\n```",
        "postTime": 1540977660,
        "uid": 77760,
        "name": "arfa",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "\u5148\u628a\u6bcf\u4e2a\u70b9i\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u7f16\u53f7\u5206\u522b\u4e3ai\u548ci+n\uff0c\u628ai\u5230i+n\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u7136\u540e\u82e5i\u5230j\u6709\u4e00\u6761\u8fb9\uff0c\u5219\u8fde\u63a5i+n->j,i->j+n\uff0c\u8fb9\u6743\u4e3a\u65e0\u7a77\u5927\uff0c\u7136\u540e\u6c42s+n\u5230t\u7684\u6700\u5927\u6d41\u5373\u662f\u7b54\u6848\n",
        "postTime": 1377769211,
        "uid": 400,
        "name": "hncsyjc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "# \u601d\u8def\n\u56e0\u4e3a\u8fd9\u9898\u5e76\u4e0d\u662f\u7b80\u5355\u7684\u6700\u5c0f\u5272\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u62c6\u70b9\u3002\n\n\u5982\u679c\u6211\u4eec\u628a $a_i$ \u4e0e $a_{i+n}$ \u4e4b\u95f4\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u5165\u8fb9\u8fde\u5411 $a_i$\uff0c\u51fa\u8fb9\u7531 $a_{i+n}$ \u8fde\u51fa\u4f1a\u53d1\u751f\u4ec0\u4e48\u5462\uff1f\u8fd9\u6837\u5982\u679c\u6211\u4eec\u5272\u6389 $a_i$ \u4e0e $a_{i+n}$ \u4e4b\u95f4\u7684\u8fb9\uff0c\u5c31\u8d77\u5230\u4e86\u5272\u70b9\u7684\u6548\u679c\u3002\n\n\u8fd9\u6837\u6211\u4eec\u6839\u636e\u6700\u5c0f\u5272 $=$ \u6700\u5927\u6d41\u5b9a\u7406\u4e0d\u5c31\u53ef\u4ee5\u8f7b\u677e\u52a0\u6109\u5feb\u7684\u5207\u6389\u8fd9\u4e00\u9898\u4e86\u5417\u3002\n# code\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define N 1000005\n#define INF 0x7f7f7f7f7f7f7f7f\nusing namespace std;\nint cnt=1,head[N],to[N],w[N],next[N],deep[N];\nint maxflow,used,gap[N];\nint n,m,s,t;\nqueue<int>q;\nvoid add(int u,int v,int c){\n\tcnt++;\n\tto[cnt]=v;\n\tw[cnt]=c;\n\tnext[cnt]=head[u];\n\thead[u]=cnt;\n}\nvoid bfs(){\n\tmemset(gap,0,sizeof(gap));\n\tmemset(deep,-1,sizeof(deep));\n\tq.push(t);\n\tdeep[t]=0;\n\tgap[0]=1;\n\twhile(!q.empty()){\n\t\tint u=q.front();\n\t\tq.pop();\n\t\tfor(int i=head[u];i;i=next[i]){\n\t\t\tint v=to[i];\n\t\t\tif(deep[v]==-1){\n\t\t\t\tdeep[v]=deep[u]+1;\n\t\t\t\tgap[deep[v]]++;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn;\n}\nint dfs(int u,int flow){\n\tif(u==t){\n\t\tmaxflow+=flow;\n\t\treturn flow;\n\t}\n\tint used=0;\n\tfor(int i=head[u];i;i=next[i]){\n\t\tint v=to[i];\n\t\tif(w[i]&&deep[v]+1==deep[u]){\n\t\t\tint quan=dfs(v,min(w[i],flow-used));\n\t\t\tif(quan){\n\t\t\t\tw[i]-=quan;\n\t\t\t\tw[i^1]+=quan;\n\t\t\t\tused+=quan;\n\t\t\t}\n\t\t\tif(flow==used) return used;\n\t\t}\n\t}\n\t--gap[deep[u]];\n\tif(gap[deep[u]]==0){\n\t\tdeep[s]=n*2+1;\n\t}\n\tdeep[u]++;\n\tgap[deep[u]]++;\n\treturn used;\n}\nint ISAP(){\n\tmaxflow=0;\n\tbfs();\n\twhile(deep[s]<n*2){\n\t\tdfs(s+n,INF);\n\t}\n\treturn maxflow;\n}\nsigned main(){\n\tcin>>n>>m>>s>>t;\n\tfor(int i=1;i<=n;i++){\n\t\tadd(i,i+n,1);\n\t\tadd(i+n,i,0);\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v;\n\t\tcin>>u>>v;\n\t\tadd(v+n,u,INF);\n\t\tadd(u,v+n,0);\n\t\tadd(u+n,v,INF);\n\t\tadd(v,u+n,0);\n\t}\n\tcout<<ISAP();\n\treturn 0;\n}\n```\n",
        "postTime": 1605922223,
        "uid": 244165,
        "name": "_121017_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "\u9996\u5148\uff0c\u8fd9\u9053\u9898\u770b\u7740\u50cf\u7f51\u7edc\u6d41\uff0c\u8bfb\u7740\u50cf\u7f51\u7edc\u6d41\uff0c\u6253\u7740\u50cf\u7f51\u7edc\u6d41\n\n\u90a3\u4e48\u5b83\u5c31\u662f\u7f51\u7edc\u6d41\n\n\u4e8e\u662f\u4e4b\u95f4\u5efa\u8fb9\u8dd1\uff0c\u7136\u540e\u5c45\u7136\u670970\uff0c\u4ed4\u7ec6\u4e00\u770b\uff0c\u53d1\u73b0\u662f\u5272\u70b9\u800c\u4e0d\u662f\u5272\u8fb9\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8981\u8f6c\u6362\u4e00\u4e0b\uff1a\n\n\u6211\u4eec\u7528i->i+n\u8fd9\u4e24\u8fb9\u4e00\u70b9\u6765\u4ee3\u66ff\u4e00\u4e2a\u70b9\uff0c\u4fdd\u8bc1\u4ecei\u8fdb\u4ecei+n\u51fa\u3002**\u7136\u540e\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\uff0c\u53ea\u8981\u8fdb\u51fa\u7684\u6743\u503c>=1\u90a3\u4e48\u6700\u5c0f\u5272\u4e00\u5b9a\u5c31\u5728i->i+n\u4e0a\u4e3a1\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u6210\u529f\u7684\u628a\u5272\u70b9\u53d8\u6210\u4e86\u5272\u8fb9**\n\n\u7136\u540e\u6211\u4eec\u53ea\u8981\u6309\u7167\u4e0a\u8ff0\u539f\u5219\u5c06\u56fe\u8fde\u8d77\u6765\u5373\u53ef\uff1a\n\n1.i\u8fdb\uff0ci+n\u51fa\n\n2.\u5176\u4ed6\u5bb9\u91cf>=1\n\n\n\n------------\n\u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define il inline\nusing namespace std;\nint n,m;\nstruct edge\n{\n\tint next,to,w;\n}p[6666];\nint head[555],num;\nil void ad(int x,int y,int z){p[++num]=edge{head[x],y,z};head[x]=num;}\nil void add(int x,int y,int z){ad(x,y,z);ad(y,x,0);}\nil int qfj(int x){return ((x-1)^1)+1;}\nint dep[555];\nbool bfs(int s,int t)\n{\n\tqueue<int> q;\n\tq.push(s);\n\tmemset(dep,-1,sizeof(dep));\n\tdep[s]=0;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=head[u];i;i=p[i].next)\n\t\t{\n\t\t\tint v=p[i].to;\n\t\t\tif(dep[v]==-1&&p[i].w)\n\t\t\t{\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dep[t]!=-1;\n}\nint dfs(int u,int t,int limit)\n{\n\tif(u==t||!limit) return limit;\n\tint w,flow=0;\n\tfor(int i=head[u];i;i=p[i].next)\n\t{\n\t\tint v=p[i].to;\n\t\tif(dep[v]==dep[u]+1&&(w=dfs(v,t,min(limit,p[i].w))))\n\t\t{\n\t\t\tflow+=w;\n\t\t\tp[i].w-=w;\n\t\t\tp[qfj(i)].w+=w;\n\t\t\tlimit-=w;\n\t\t\tif(!limit) break;\n\t\t}\n\t}\n\treturn flow;\n}\nint dinic(int s,int t)\n{\n\tint mxfl=0;\n\twhile(bfs(s,t)) mxfl+=dfs(s,t,1e9);\n\treturn mxfl;\n}\nint ans,s,t;\nint main()\n{\n\tcin>>n>>m>>s>>t;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint x,y,a,b;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\ta=x;b=y;\n\t\tif(x!=s&&x!=t) a+=n;\n\t\tif(y!=s&&y!=t) b+=n;\n\t\tadd(a,y,1);add(b,x,1);//i\u8fdb,i+n\u51fa\n\t\t\t  //\u5176\u5b9e\u8fd9\u91cc\u53ea\u8981\u662f\u4e2a>=1\u7684\u5bb9\u91cf\u90fd\u53ef\u4ee5 \n\t//\tif(x!=s&&x!=t) add(x+n,y,1),add(y+n,x,1);\n\t//\telse add(x,y,1),add(y,x,1);\n\t}\n\tfor(int i=1;i<=n;i++) if(i!=s&&i!=t) add(i,i+n,1); //\u8f6c\u70b9\u4e3a\u8fb9 \n\tans=dinic(s,t);\n\tcout<<ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1591704165,
        "uid": 11392,
        "name": "shenbear",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "\uff08\u63d0\u793a\uff1a\u5728\u6240\u6709\u5173\u4e8e\u8fde\u8fb9\u7684\u56fe\u4e2d\uff0c\u53cd\u5411\u8fb9\u90fd\u88ab\u4f5c\u8005\u7701\u7565\u4e86\uff09\n\n\u9996\u5148\u770b\u9898\uff0c\u5f88\u660e\u663e\u7684\u4e00\u9053\u6700\u5c0f\u5272\u3002\n\n\u7136\u800c\u6c42\u7684\u662f\u5272\u70b9\uff0c\u8be5\u600e\u4e48\u529e\u5462\uff1f\n\n\u5bf9\u4e8e\u8fd9\u79cd\u9898\u76ee\uff0c\u6211\u4eec\u4e00\u822c\u53ef\u4ee5\u60f3\u5230**\u62c6\u70b9**\u3002\n\n\u5373\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff08\u5982\u4e0b\u56fe\uff09\uff1a\n\n![tijie1.PNG](https://i.loli.net/2019/08/18/Tpw3OKsGvI5nBDd.png)\n\n\u6211\u4eec\u5c06\u5b83\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u5206\u522b\u4e3a\u5165\u70b9\u548c\u51fa\u70b9\uff08\u5982\u4e0b\u56fe\uff09\uff0c\u518d\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a1\u7684\u8fb9\uff1a\n\n![tijie2.PNG](https://i.loli.net/2019/08/18/2ERha8AotjKLBMP.png)\n\n\u628a\u6240\u6709\u70b9\u90fd\u62c6\u6210\u4e24\u4e2a\u70b9\u540e\uff0c\u5bf9\u4e8e\u4e24\u4e24\u53f0\u7535\u8111\u4e4b\u95f4\u6709\u8fde\u63a5\u7684\u90e8\u5206\uff0c\u5728\u5b83\u4eec\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a$INF$\u7684\u8fb9\uff0c\u7136\u540e\u6c42\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n\u7136\u800c\uff0c\u5728\u4e24\u4e2a\u5df2\u7ecf\u88ab\u62c6\u8fc7\u7684\u70b9\u4e4b\u95f4\u8fde\u53cc\u5411\u8fb9\u6709\u5751\u2026\u2026\n\n\u5982\u679c\u6211\u4eec\u76f4\u63a5\u8fde\u8fb9\u7684\u8bdd\uff0c\u6548\u679c\u5982\u4e0b\u56fe\uff1a\n\n![tijie3.PNG](https://i.loli.net/2019/08/18/32lXIUrus5cpGQk.png)\n\n\u800c\u8fd9\u5f88\u660e\u663e\u662f\u9519\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5e94\u8be5\u8fd9\u6837\u8fde\u8fb9\uff08\u5982\u4e0b\u56fe\uff09\uff1a\n\n![tijie4.PNG](https://i.loli.net/2019/08/18/qJCmUjxPipAZOKw.png)\n\n\u7ec6\u8282\u90fd\u8bb2\u5b8c\u4e86\uff0c\u9644\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<queue>\n#define INF 0x3f3f3f3f\n#define min(a,b) ((a)<(b)?(a):(b))\nusing namespace std;\nint n,m,k,s,t,fir[200010],next[800010],to[800010],cost[800010],tot=1,dep[200010];\nbool inq[200010];\nvoid add(int u,int v,int w){\n\tto[++tot]=v;\n\tnext[tot]=fir[u];\n\tfir[u]=tot;\n\tcost[tot]=w;\n}\nbool bfs(){\n\tmemset(dep,0x3f,sizeof(dep));\n\tmemset(inq,0,sizeof(inq));\n\tdep[s]=0;\n\tqueue<int>q;\n\tq.push(s);\n\twhile(!q.empty()){\n\t\tint x=q.front();\n\t\tq.pop();\n\t\tinq[x]=0;\n\t\tfor(int i=fir[x];i;i=next[i]){\n\t\t\tint v=to[i];\n\t\t\tif(dep[v]>dep[x]+1&&cost[i]){\n\t\t\t\tdep[v]=dep[x]+1;\n\t\t\t\tif(!inq[v]){\n\t\t\t\t\tq.push(v);\n\t\t\t\t\tinq[v]=1;\n\t\t\t\t\tif(v==t)return 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(dep[t]!=0x3f3f3f3f)return 1;\n\treturn 0;\n}\nint dfs(int x,int low){\n\tint rlow=low;\n\tif(x==t)\n\t\treturn low;\n\tfor(int i=fir[x];i;i=next[i]){\n\t\tif(rlow<=0)break;\n\t\tint v=to[i];\n\t\tif(cost[i]&&dep[v]==dep[x]+1){\n\t\t\tint flow=dfs(v,min(rlow,cost[i]));\n\t\t\tif(!flow)continue;\n\t\t\trlow-=flow;\n\t\t\tcost[i]-=flow;\n\t\t\tcost[i^1]+=flow;\n\t\t}\n\t}\n\tif(low-rlow==0)dep[x]=0x3f3f3f3f;\n\treturn low-rlow;\n}\nint Dinic(){\n\tint maxflow=0,lowflow;\n\twhile(bfs()){\n\t\twhile(lowflow=dfs(s,INF)){\n\t\t\tmaxflow+=lowflow;\n\t\t}\n\t}\n\treturn maxflow;\n}\nint main(){\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\tt+=n;\n\tfor(int i=1;i<=n;i++){\n\t\tif(i!=s&&i!=t-n){\n\t\t\tadd(i,i+n,1);\n\t\t\tadd(i+n,i,0);\n\t\t}\n\t\telse{\n\t\t\tadd(i,i+n,INF);\n\t\t\tadd(i+n,i,0);\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\tadd(u+n,v,INF);\n\t\tadd(v,u+n,0);\n\t\tadd(v+n,u,INF);\n\t\tadd(u,v+n,0);\n\t}\n\tprintf(\"%d\",Dinic());\n\treturn 0;\n}\n```",
        "postTime": 1566129442,
        "uid": 122641,
        "name": "GIFBMP",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "[\u8fd9\u91cc\u662f\u6211\u7684\u535a\u5ba2$OwO$](https://www.cnblogs.com/lizbaka/p/10521737.html)\n\n# Solution\n\n\u9898\u76ee\u8981\u6c42\u627e\u5230\u6700\u5c0f\u6570\u91cf\u7684\u82e5\u5e72\u4e2a\u70b9\uff0c\u4f7f\u5f97\u8fd9\u4e9b\u70b9\u88ab\u53bb\u6389\u4e4b\u540e\uff0c\u70b9$c_1$\u548c$c_2$\u4e0d\u8fde\u901a\u3002\n\n\u4e0e\u6700\u5c0f\u5272\u6a21\u578b\u5341\u5206\u7c7b\u4f3c\uff0c\u8003\u8651\u8f6c\u5316\n\n---\n\n\u7ea6\u5b9a$(u,v,f)$\u8868\u793a$u$\u5411$v$\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a$f$\u3002  \n$S$\u4e3a\u6e90\uff0c$T$\u4e3a\u6c47\n\n\u5148\u8bf4\u6a21\u578b\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9$u$\uff0c\u5c06\u5176\u62c6\u6210$u\\times2,u\\times2+1$\u4e24\u4e2a\u70b9\uff0c\u5efa\u8fb9$(u\\times2,u\\times2+1,1)$\n\n\u5bf9\u4e8e\u539f\u56fe\u4e0a\u7684\u6bcf\u6761\u8fb9$(u,v)$\uff0c\u5efa\u8fb9$(u\\times2+1,v\\times2,inf)$\n\n\u6700\u540e\u4ee4$S=c_1\\times2+1,T=c_2\\times2$\uff0c\u6c42\u51fa\u6700\u5c0f\u5272\u5373\u53ef\n\n---\n\n\u4e3a\u4ec0\u4e48\u8fd9\u6837\u5efa\u6a21\uff1f\n\n\u9996\u5148\u6211\u4eec\u5272\u7684\u662f**\u70b9**\u800c\u4e0d\u662f**\u8fb9**\uff0c\u6211\u4eec\u9700\u8981\u5728\u6a21\u578b\u4e2d\u5c06\u8fd9\u4e2a\u51b3\u7b56\u4f53\u73b0\u51fa\u6765\uff0c\u56e0\u6b64\u9700\u8981\u5c06\u70b9\u62c6\u6210\u4e00\u4e2a\u201c\u5165\u70b9\u201d\u548c\u4e00\u4e2a\u201c\u51fa\u70b9\u201d\u3002  \n\u53bb\u6389\u6bcf\u4e2a\u70b9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a$1$\uff0c\u6240\u4ee5\u5165\u70b9\u548c\u51fa\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a$1$\u7684\u8fb9\u3002\u5272\u6389\u8fd9\u6761\u8fb9\u7684\u610f\u4e49\u5373\u4e3a\u53bb\u6389\u4e86\u8fd9\u4e2a\u70b9\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u539f\u56fe\u4e0a\u7684\u65e0\u5411\u8fb9\uff0c\u53ef\u4ee5\u89c6\u4f5c\u4e24\u6761\u65b9\u5411\u76f8\u53cd\u7684\u6709\u5411\u8fb9  \n\u5bf9\u4e8e\u6bcf\u6761\u6709\u5411\u8fb9$(u,v)$\uff0c\u76f8\u5f53\u4e8e\u662f\u4ece$u$\u201c\u51fa\u6765\u201d\uff0c\u201c\u8fdb\u5165\u201d\u4e86$v$\uff0c\u6240\u4ee5\u4ece$u$\u5bf9\u5e94\u7684\u51fa\u70b9\u5411$v$\u5bf9\u5e94\u7684\u5165\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a\u6b63\u65e0\u7a77\n\n\u7531\u4e8e\u6211\u4eec\u662f\u4ece$c_1$\u51fa\u53d1\u5230\u8fbe$c_2$\uff0c\u6240\u4ee5\u6e90\u662f$c_1$\u5bf9\u5e94\u7684\u51fa\u70b9\uff0c\u6c47\u662f$c_2$\u5bf9\u5e94\u7684\u5165\u70b9\n\n\u663e\u7136\u6700\u5c0f\u5272\u4e00\u5b9a\u53ea\u5305\u62ec\u6d41\u91cf\u4e3a$1$\u7684\u8fb9\n\n# Code\n```\n#include <cstdio>\n#include <iostream>\n#include <cstdlib>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#include <queue>\n#define i(u) ((u)<<1)//\u5165\n#define o(u) (((u)<<1)|1)//\u51fa\nusing namespace std;\ntypedef long long ll;\n\ntemplate <typename T> void read(T &t)\n{\n\tt=0;int f=0;char c=getchar();\n\twhile(!isdigit(c)){f|=c=='-';c=getchar();}\n\twhile(isdigit(c)){t=t*10+c-'0';c=getchar();}\n\tif(f)t=-t;\n}\n\nconst int inf=0x3f3f3f3f;\nconst int maxn=1005,maxm=6005;\nint n,m;\nint S,T,c1,c2;\nint ans;\n \nstruct edge\n{\n\tint u,v,f,nxt;\n}g[maxm*2];\n\nint head[maxn],ecnt=1;\nvoid eADD(int u,int v,int f)\n{\tg[++ecnt].u=u;g[ecnt].v=v;g[ecnt].f=f;g[ecnt].nxt=head[u];head[u]=ecnt;\n\tg[++ecnt].u=v;g[ecnt].v=u;g[ecnt].f=0;g[ecnt].nxt=head[v];head[v]=ecnt;\n}\n\nint dep[maxn];\nbool BFS()\n{\n\tqueue<int> q;\n\tmemset(dep,0,sizeof(dep));\n\tdep[S]=1;\n\tq.push(S);\n\twhile(!q.empty())\n\t{\n\t\tint u=q.front();\n\t\tq.pop();\t\n\t\tfor(register int i=head[u];i;i=g[i].nxt)\n\t\t{\n\t\t\tint v=g[i].v;\n\t\t\tif(!dep[v] && g[i].f)\n\t\t\t{\n\t\t\t\tdep[v]=dep[u]+1;\n\t\t\t\tif(v==T)return true;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\n\nint dfs(int u,int infl)\n{\n\tif(u==T)return infl;\n\tint rest=infl;\n\tfor(register int i=head[u];i && rest;i=g[i].nxt)\n\t{\n\t\tint v=g[i].v;\n\t\tif(dep[v]==dep[u]+1 && g[i].f)\n\t\t{\n\t\t\tint flow=dfs(v,min(g[i].f,rest));\n\t\t\trest-=flow;\n\t\t\tg[i].f-=flow;\n\t\t\tg[i^1].f+=flow;\n\t\t}\n\t}\n\treturn infl-rest;\n}\n\nint main()\n{\n\tread(n),read(m),read(c1),read(c2);\n\tfor(register int i=1;i<=n;++i)\n\t\teADD(i(i),o(i),1);\n\tfor(register int i=1;i<=m;++i)\n\t{\n\t\tint u,v;\n\t\tread(u),read(v);\n\t\teADD(o(u),i(v),inf);\n\t\teADD(o(v),i(u),inf);\n\t}\n\tS=o(c1),T=i(c2);\n\twhile(BFS())\n\t\tans+=dfs(S,inf);\n\tprintf(\"%d\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1552446741,
        "uid": 60418,
        "name": "lizbaka",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "\u8bfb\u9898\uff0c\u53d1\u73b0\u8981\u6c42\u7684\u662f\u5220\u53bb\u591a\u5c11\u70b9\u540e\u56fe\u4e0d\u8fde\u901a\uff0c\u90a3\u4e48\u5f88\u5bb9\u6613\u60f3\u5230\u7684\u5c31\u662f\u6c42\u6700\u5c0f\u5272\n\n\u4f46\u662f\u6700\u5c0f\u5272\u6c42\u51fa\u7684\u662f\u5272\u53bb\u7684**\u8fb9\u6570**\uff0c\u800c\u8fd9\u9898\u95ee\u7684\u662f\u5272\u53bb\u591a\u5c11\u4e2a\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u9700\u8981\u628a\u70b9\u8f6c\u6362\u4e3a\u8fb9\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u7528\u7f51\u7edc\u6d41\u4e2d\u5e38\u7528\u7684\u624b\u6cd5\u2014\u2014\u62c6\u70b9\u4e86\n\n\u6211\u4eec\u5c06\u4e00\u4e2a\u70b9$x$\u62c6\u6210$x$\u548c$x+n$\u4e24\u4e2a\u70b9\uff0c\u5728\u8fde\u8fb9\u65f6\u5c06$x$\u548c$y+n$\uff0c$x+n$\u548c$y$\u5206\u522b\u8fde\u8d77\u6765\uff0c\u518d\u5c06$x$\u548c$x+n$\u8fde\u8d77\u6765\uff0c\u6c42\u4e00\u904d\u6700\u5c0f\u5272\u5373\u53ef\n\n\u89c1\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define inf 2147400000\nusing namespace std;\nqueue <int> q;\nint cnt=1,fst[505],nxt[5005],to[5005],w[5005],cur[505];\nint n,m,S,T,dep[505];\nvoid AddEdge(int u,int v,int c)\n{\n    to[++cnt]=v;\n    nxt[cnt]=fst[u];\n    fst[u]=cnt;\n    w[cnt]=c;\n}\nbool Bfs()\n{\n    memset(dep,0,sizeof(dep));\n    q.push(S);\n    dep[S]=1;\n    while(!q.empty())\n    {\n        int u=q.front();\n        q.pop();\n        for(int i=fst[u];i;i=nxt[i])\n        {\n            int v=to[i];\n            if(!dep[v] && w[i])\n            {\n                dep[v]=dep[u]+1;\n                q.push(v);\n            }\n        }\n    }\n    return dep[T];\n}\nint Dfs(int u,int flow)\n{\n    if(u==T || !flow) return flow;\n    int used=0;\n    for(int i=cur[u];i;i=nxt[i])\n    {\n        cur[u]=i;\n        int v=to[i];\n        if(dep[v]==dep[u]+1 && w[i])\n        {\n            int fl=Dfs(v,min(flow,w[i]));\n            if(fl)\n            {\n                used+=fl;\n                flow-=fl;\n                w[i]-=fl;\n                w[i^1]+=fl;\n                if(!flow) break;\n            }\n        }\n    }\n    return used;\n}\nint Dinic()//\u5f27\u4f18\u5316Dinic\uff0c\u4e0d\u8c08\n{\n    int sum=0;\n    while(Bfs())\n    {\n        memcpy(cur,fst,sizeof(fst));\n        sum+=Dfs(S,inf);\n    }\n    return sum;\n}\nint main()\n{\n    scanf(\"%d %d %d %d\",&n,&m,&S,&T);\n    S+=n;\n    for(int i=1;i<=m;i++)\n    {\n        int x,y;\n        scanf(\"%d %d\",&x,&y);\n        AddEdge(y+n,x,inf);\n        AddEdge(x,y+n,0);\n        AddEdge(x+n,y,inf);\n        AddEdge(y,x+n,0);//\u62c6\u70b9\u540e\u8fde\u8fb9\n    }\n    for(int i=1;i<=n;i++)\n    {\n        AddEdge(i,i+n,1);//\u5c06\u62c6\u51fa\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u8fb9\n        AddEdge(i+n,i,0);\n    }\n    int ans=Dinic();//\u6c42\u89e3\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1542760781,
        "uid": 23243,
        "name": "VenusM1nT",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "\u4e2a\u4ebablog\uff1ahttp://blog.csdn.net/A_Comme_Amour/article/details/79543249\n\n\u9898\u76ee\n-\n[\u4f20\u9001\u95e8](https://www.luogu.org/problemnew/show/P1345)\n\u6700\u5c0f\u5272\u7684\u70b9\u7684\u6570\u91cf\n\u9898\u89e3\n-\n\u4e00\u822c\u7684\u6700\u5c0f\u8fb9\u6c42\u7684\u662f\u8fb9\u7684\u6743\u503c\u548c\uff0c\u8fd9\u91cc\u8981\u6c42\u5272\u6389\u7684\u6700\u5c11\u7684\u70b9\u7684\u6570\u91cf\u3002\n\u539f\u672c\u4ee5\u4e3a\u5272\u6389\u7684\u6700\u5c11\u7684\u8fb9\u7684\u6570\u91cf\u5c31\u662f\u5272\u6389\u7684\u6700\u5c11\u7684\u70b9\u7684\u6570\u91cf\u3002\u4e8e\u662f\u5199\u4e86\u4e2a\u6700\u5c0f\u5272\u8dd1\uff0c\u5931\u8d25\u4e86\u3002\n\u540e\u6765\u770b\u5230\u6ca1\u6709\u5efa\u53cc\u5411\u8fb9\uff0c\u4e8e\u662f\u5efa\u4e86\u4f46\u8fd8\u662fGG\uff1b\n\u9519\u8bef\u4e4b\u5904\u5728\u4e8e\u8fd9\u5f20\u56fe\n![](http://img-blog.csdn.net/20180314094933254?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L0FfQ29tbWVfQW1vdXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\u5982\u679c\u5272\u70b9\u7684\u8bdd\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5272\u6389\u7ea2\u8272\u7684\u70b9\uff1b\u5982\u679c\u5272\u8fb9\u7684\u8bdd\u9700\u8981\u5272\u6389\u4e24\u6761\u8fb9\uff0c\u8fd9\u5c31\u662f\u95ee\u9898\u6240\u5728\u3002\u90a3\u4e48\u5982\u4f55\u5904\u7406\u5462\uff1f\n#####\u6211\u4eec\u91c7\u7528\u62c6\u70b9\u7684\u601d\u60f3\uff1b\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\u90fd\u590d\u5236\u3002\u6bd4\u5982\u8981\u4ecex\u5411y\u8fde\u8fb9\uff0c\u5148\u4ecex\u5411x+n\u8fde\u4e00\u6761\u8fb9\uff0c\u957f\u5ea6\u4e3a1\uff08\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u53ea\u80fd\u88ab\u5272\u6389\u4e00\u6b21\uff09\uff1b\u518d\u4ecex+n\u5411y\u8fde\u4e00\u6761\u8fb9\uff0c\u957f\u5ea6\u4e3ainf\u3002\u7136\u540e\u4eceS+n\u5230T\u8dd1\u6700\u5927\u6d41\uff08\u6700\u5c0f\u5272\uff09\u5373\u53ef\uff1b\n\u5bf9\u4e8e\u4e3a\u4ec0\u4e48\u8fd9\u6837\u8fdb\u884c\u5efa\u8fb9\uff0c\u5728\u8fdb\u884c\u4e00\u4e9b\u89e3\u91ca\uff1a\u56e0\u4e3a\u4e00\u4e2a\u70b9\u53ef\u4ee5\u8fde\u8bb8\u591a\u6761\u8fb9\uff0c\u4e24\u70b9\u4e4b\u95f4\u53ea\u80fd\u8fde\u4e00\u6761\u8fb9\uff08\u610f\u4f1a\u4e00\u4e0b\uff1f\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u628a\u5272\u70b9\u8f6c\u5316\u6210\u4e86\u5272\u8fb9\u3002\n\u5982\u4e0b\u56fe\n![](http://img-blog.csdn.net/20180314095254577?watermark/2/text/Ly9ibG9nLmNzZG4ubmV0L0FfQ29tbWVfQW1vdXI=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)\n\u4ee3\u7801\n-\n\n```\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<queue>\n#include<algorithm>\nusing namespace std;\nconst int maxn=10001;\nconst int inf=1e9;\n\nqueue <int> q;\nint n,m,s,t,deep[maxn],maxflow;\nstruct Edge{\n\tint next,to,dis;\n}edge[maxn<<1];\nint num_edge=-1,head[maxn],cur[maxn];\n\nvoid add_edge(int from,int to,int dis)\n{\n\tedge[++num_edge].next=head[from];\n\tedge[num_edge].to=to;\n\tedge[num_edge].dis=dis;\n\thead[from]=num_edge;\n}\n\nbool bfs(int s,int t)\n{\n\tmemset(deep,0x7f,sizeof(deep));\n\tfor (int i=0; i<=n; i++) cur[i]=head[i];\n\twhile (!q.empty()) q.pop();\n\tdeep[s]=0; q.push(s);\n\t\n\twhile (!q.empty())\n\t{\n\t\tint now=q.front(); q.pop();\n\t\tfor (int i=head[now]; i!=-1; i=edge[i].next)\n\t\t{\n\t\t\tint to=edge[i].to;\n\t\t\tif (deep[to]>inf && edge[i].dis)\n\t\t\t{\n\t\t\t\tdeep[to]=deep[now]+1;\n\t\t\t\tq.push(to);\n\t\t\t\tif (to==t) return true;\n\t\t\t}\n\t\t}\n\t}\n\treturn deep[t]<inf;\n}\n\nint dfs(int now,int t,int limit)\n{\n\tif (now==t || !limit) return limit;\n\tint flow=0,f;\n\tfor (int i=cur[now]; i!=-1; i=edge[i].next)\n\t{\n\t\tcur[now]=i; int to=edge[i].to;\n\t\tif (deep[to]==deep[now]+1 && (f=dfs(to,t,min(edge[i].dis,limit))))\n\t\t{\n\t\t\tflow+=f;\n\t\t\tlimit-=f;\n\t\t\tedge[i].dis-=f;\n\t\t\tedge[i^1].dis+=f;\n\t\t\tif (!limit) break;\n\t\t}\n\t}\n\treturn flow;\n}\n\nvoid Dinic(int s,int t)\n{\n\twhile (bfs(s,t))\n\t\tmaxflow+=dfs(s,t,inf);\n}\n\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\tfor (int i=1; i<=n; i++) {add_edge(i,i+n,1); add_edge(i+n,i,0);}//\u590d\u5236\u8282\u70b9 \n\tfor (int i=1; i<=m; i++)\n\t{\n\t\tint x,y;\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd_edge(x+n,y,inf); add_edge(y,x+n,0); \n\t\tadd_edge(y+n,x,inf); add_edge(x,y+n,0);\n\t}\n//\tfor (int i=0; i<=num_edge; i++) printf(\"%d %d %d\\n\",edge[i^1].to,edge[i].to,edge[i].dis);\n\ts+=n; n*=2;\n\tDinic(s,t);\n\tprintf(\"%d\\n\",maxflow);\n\treturn 0;\n}\n```\n\n\u603b\u7ed3\n-\n\u8003\u8651\u4e00\u4e0b\u8fd9\u79cd\u201c\u62c6\u70b9\u201d\u201c\u628a\u70b9\u8f6c\u5316\u6210\u8fb9\u201d\u7684\u601d\u60f3\uff0c\u8fd8\u662f\u633a\u5e38\u7528\u7684\n\u8be5\u5efa\u53cc\u5411\u8fb9\u7684\u65f6\u5019\u5efa\u53cc\u5411\u8fb9\n\u5199\u5b8c\u9898\u76ee\u53ca\u65f6\u603b\u7ed3",
        "postTime": 1521003259,
        "uid": 48036,
        "name": "\u79cb\u65e5\u79c1\u8bed",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "##\u6765\u4e00\u53d1EK\u505a\u6cd5\uff0c\u53ea\u9700\u4e00\u4e2adfs()\u5373\u53ef\n\n\u57fa\u672c\u601d\u8def\u8fd8\u662f\u540c\u5148\u5148\u5148\u5148\u8f88\uff0c\u5176\u5b9e\u53d1\u73b0\u540c\u65f6\u521b\u7acbi\u548ci+n\u4e24\u4e2a\u70b9\u6709\u8fd9\u6837\u7684\u5947\u5999\u4e4b\u5904\uff1a\n\n1\u3001\u628ai~i+n \u7684\u8fb9\u6743\u5b58\u6210\u6700\u5c0f\u76841\uff0c\u5c31\u4fdd\u8bc1\u4e86\u5220\u8fb9\u65f6\u53ea\u4f1a\u5220\u9664i~i+n\u8fd9\u6837\u7684\u8fb9\n\n2\u3001\u518d\u4ed4\u7ec6\u60f3\u60f3\uff0c\u82e5\u662f\u5220\u9664\u4e86i~i+n \u8fd9\u6837\u7684\u8fb9\uff0c\u5c31\u4ee3\u8868\u5df2\u7ecf\u5220\u9664\u4e86i\u8fd9\u4e2a\u70b9\uff0c\u800c\u53c8\u56e0\u4e3a\u8fb9\u6743\u662f1\uff0c\u56e0\u6b64\u8bf4\u660e\u82b1\u8d39\u662f\u4e00\u4e2a\u70b9\u3002\n\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n\n\n\n\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\nconst int maxn=300;\nconst int inf=1e9;\nstruct point\n{\n    int to;\n    int nxt;\n    int c;\n}edge[(maxn<<4)+100];\nint n,m,tot=0,ans=0,pf,s,t;\nint vis[maxn<<1],head[maxn<<1];\nvoid add(int u,int v,int ww)\n{\n    edge[tot].to=v;\n    edge[tot].nxt=head[u];\n    edge[tot].c=ww;\n    head[u]=tot++;\n}\nbool dfs(int x,int f)\n{\n    if(x==t)\n    {\n        ans+=f;\n        pf=f;\n        return 1;\n    }\n    vis[x]=1;\n    for(int i=head[x];~i;i=edge[i].nxt)\n    {\n        int v=edge[i].to;\n        if(!vis[v] && edge[i].c>0)\n        {\n            if(dfs(v,min(f,edge[i].c)))\n            {\n                edge[i].c-=pf;\n                edge[i^1].c+=pf;\n                return 1;\n            }\n        }\n    }\n    return 0;\n}\nint main()\n{\n    memset(head,-1,sizeof(head));\n    cin>>n>>m>>s>>t;\n    for(int i=1;i<=m;i++)\n    {\n        int a,b;\n        cin>>a>>b;\n        add(a+n,b,inf); add(b,a+n,0);\n        add(b+n,a,inf); add(a,b+n,0);\n    }\n    for(int i=1;i<=n;i++) \n        add(i,i+n,1),add(i+n,i,0);\n    while(dfs(s+n,inf))\n    {\n        pf=0;\n        memset(vis,0,sizeof(vis));\n    }\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1501861494,
        "uid": 36294,
        "name": "feng_chengjie",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "\u7528\u7684\u697c\u4e0b\u7684\u601d\u60f3\u3010\u5176\u5b9e\u5c31\u662f\u6700\u5c0f\u70b9\u5272\u3002\n\n\u5f15\u7528\u697c\u4e0b\u201d\u5148\u628a\u6bcf\u4e2a\u70b9i\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u7f16\u53f7\u5206\u522b\u4e3ai\u548ci+n\uff0c\u628ai\u5230i+n\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\uff0c\u7136\u540e\u82e5i\u5230j\u6709\u4e00\u6761\u8fb9\uff0c\u5219\u8fde\u63a5i+n->j,i->j+n\uff0c\u8fb9\u6743\u4e3a\u65e0\u7a77\u5927\uff0c\u7136\u540e\u6c42s+n\u5230t\u7684\u6700\u5927\u6d41\u5373\u662f\u7b54\u6848\u201c\n\n\u5177\u4f53\u5b9e\u73b0\u7528\u7684dinic\u6c42\u6700\u5927\u6d41\n\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <iostream>\n#define MAXN 1000000\n#define INF 100000000\nusing namespace std;\nint n,m,s,t;\nint tot=2,g[MAXN],num[MAXN],nnext[MAXN],flow[MAXN];\nint team[MAXN],head,tail,d[MAXN];\nvoid Add(int x,int y,int z){nnext[tot]=g[x];g[x]=tot;num[tot]=y;flow[tot]=z;tot++;}\nbool bfs()\n{\n    head=tail=0;memset(d,0,sizeof(d));\n    d[s]=1;team[++tail]=s;\n    while(head<tail)\n    {\n        int x=team[++head];\n        for(int i=g[x];i;i=nnext[i])\n            if(d[num[i]]==0&&flow[i]!=0)\n                d[num[i]]=d[x]+1,team[++tail]=num[i];\n    }\n    if(d[t]==0) return false;\n    return true;\n}\nint dfs(int x,int mmin)\n{\n    if(x==t) return mmin;\n    int tmp,f=0;\n    for(int i=g[x];i;i=nnext[i])\n        if(d[num[i]]==d[x]+1&&flow[i]&&(tmp=dfs(num[i],min(mmin,flow[i]))))\n        {\n            flow[i]-=tmp,flow[i^1]+=tmp;\n            f+=tmp,mmin-=tmp;\n            if(mmin==0) return f;\n        }\n    return f;\n}\nint main()\n{\n    scanf(\"%d %d %d %d\",&n,&m,&s,&t);\n    for(int x,y,i=1;i<=m;i++)\n    {\n        scanf(\"%d %d\",&x,&y);\n        Add(x+n,y,INF),Add(y,x+n,0);\n        Add(y+n,x,INF),Add(x,y+n,0);\n    }\n    for(int i=1;i<=n;i++) Add(i,i+n,1),Add(i+n,i,0);\n    int ans=0;while(bfs()) ans+=dfs(s+n,INF);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1473422942,
        "uid": 17689,
        "name": "\u8fdc\u822a\u4e4b\u66f2",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "# \u672c\u9898\u91cd\u70b9\u5728\u4e8e\u62c6\u70b9\n\n\u849f\u84bb\u4e00\u5f00\u59cb\u4e00\u773c\u5207\u6700\u5c0f\u5272\uff0c\u7136\u540e\u653e\u4e2a\u4e86\u6700\u5927\u6d41\u6a21\u677f\u4e0a\u53bb\n\n\u5c45\u7136\u6709$80pts$......\u4f60\u5495\u7684\u6570\u636e\u4e0d\u662f\u5439\u7684\n\n\u540e\u6765\u53d1\u73b0\u662f\u5220\u70b9\n\n\u5177\u4f53\u65b9\u6cd5\uff1a\u5c06\u4e00\u4e2a\u70b9\u62c6\u6210\u5165\u5ea6$(i)$\u548c\u51fa\u5ea6$(i+n)$\u4e24\u4e2a\u70b9\uff08\u5165\u70b9\u548c\u51fa\u70b9\uff09\uff0c\u5165\u5ea6\u548c\u51fa\u5ea6\u95f4\u518d\u8fde\u4e00\u6761\u6743\u503c\u4e3a1\u7684\u8fb9\uff08\u70b9\u53ea\u80fd\u5220\u4e00\u6b21\uff09\uff0c\u7136\u540e\u5c31\u8f6c\u5316\u4e3a\u6c42\u6700\u5c0f\u5272\u4e86\n\n\u4e00\u4e9b\u7406\u89e3\uff1a\u9996\u5148\u9898\u76ee\u7ed9\u7684\u8fb9\u8981\u8fde\u6743\u503c$INF$\u7684\uff0c\u56e0\u4e3a\u8fb9\u53ea\u8868\u793a\u8054\u901a\uff0c\u5e76\u6ca1\u6709\u9650\u5b9a\u5bb9\u91cf\u3002\u6240\u4ee5\u6c42\u6700\u5c0f\u5272\u65f6\u5272\u8fb9\u53ea\u6709\u53ef\u80fd\u662f\u51fa\u70b9\u548c\u5165\u70b9\u4e4b\u95f4\u7684\u8fb9\u3002\n\n\u7136\u540e\u6700\u5927\u6d41\u6700\u5c0f\u5272\u5b9a\u7406\u6709\u6700\u5927\u6d41\u7b49\u4e8e\u6700\u5c0f\u5272\uff0c\u5957\u6700\u5927\u6d41\u6a21\u677f\u5c31\u884c\u4e86\uff08\u8bdd\u8bf4\u6700\u5927\u6d41\u7b97\u6cd5\u5b9e\u9645\u662f\u6c42\u6700\u5c0f\u5272\u7684\uff09\n\n\u6a21\u677f\u6253\u7684\u662f$dinic$(\u7801\u98ce\u7565\u4e11)\n\n\u4e0a\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int INF=0x3f3f3f;\nconst int N=2*1e5+10; \nstruct edges\n{\n\tint u,v,w;\n}p[N];\nint head[N],nxt[N],cnt=-1,cur[N];\ninline void add(int x,int y,int z)\n{\n\tp[++cnt].u=x;\n\tp[cnt].v=y;\n\tp[cnt].w=z;\n\tnxt[cnt]=head[x];\n\thead[x]=cnt;\n}\nint h[N],n,m,s,t;\nbool in[N];\ninline bool bfs()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tcur[i]=head[i];//\u5f53\u524d\u5f27\u4f18\u5316\n\t\th[i]=INF;\n\t\tin[i]=0;\n\t}\n\tqueue<int> q;\n\th[s]=0;\n\tq.push(s);\n\tint k;\n\twhile(!q.empty())\n\t{\n\t\tk=q.front();q.pop();in[k]=0;\n\t\tfor(int i=head[k];i!=-1;i=nxt[i])\n\t\t{\n\t\t\tint dd=p[i].v;\n\t\t\tif(h[dd]>h[k]+1&&p[i].w)\n\t\t\t{\n\t\t\t\th[dd]=h[k]+1;\n\t\t\t\tif(!in[dd])\n\t\t\t\t{\n\t\t\t\t\tq.push(dd);\n\t\t\t\t\tin[dd]=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif(h[t]!=INF)\n\t\treturn true;\n\telse\n\t\treturn false;\n}\ninline int dfs(int flow,int x)\n{\n\tint rflow=0,used=0;\n\tif(!flow)\n\t\treturn 0;\n\tif(x==t)\n\t\treturn flow;\n\tfor(int i=cur[x];i!=-1;i=nxt[i])\n\t{\n\t\tcur[x]=i;\n\t\tint dd=p[i].v;\n\t\tif(h[dd]==h[x]+1)\n\t\t{\n\t\t\tint temp=min(p[i].w,flow-used);\n\t\t\tif((rflow=(dfs(temp,dd))))\n\t\t\t{\n\t\t\t\tp[i].w-=rflow;\n\t\t\t\tp[i^1].w+=rflow;\n\t\t\t\tused+=rflow;\n\t\t\t}\n\t\t}\n\t\tif(used==flow)\n\t\t\tbreak;\n\t}\n\treturn used;\n}\ninline int dinic()\n{\n\tint maxflow=0;\n\twhile(bfs())\n\t\tmaxflow+=dfs(INF,s);\n\treturn maxflow;\n}\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tmemset(nxt,-1,sizeof(nxt));\n\tint t1,t2;\n\tscanf(\"%d%d%d%d\",&n,&m,&s,&t);\n\ts+=n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tadd(i,i+n,1);//\u62c6\u51fa\u70b9\u548c\u5165\u70b9\n\t\tadd(i+n,i,0);//\u53cd\u5411\u8fb9\n\t}\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tscanf(\"%d%d\",&t1,&t2);\n\t\tadd(t1+n,t2,INF);\n\t\tadd(t2,t1+n,0);//\u53cd\u5411\u8fb9\n\t\tadd(t2+n,t1,INF);\n\t\tadd(t2+n,t1,0);\n\t}\n\tn+=n;\n\tprintf(\"%d\",dinic());\n\treturn 0;\n}\n\n```\n",
        "postTime": 1570352119,
        "uid": 145026,
        "name": "noiplao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    },
    {
        "content": "# \u6700\u5c0f\u5272\u95ee\u9898\n## \u6c42\u6700\u5927\u6d41\n\u8981\u6ce8\u610f\u5bf9\u6bcf\u4e2a\u70b9\u90fd\u8981\u62c6\u6210\u4e24\u4e2a\u70b9 \u4e2d\u95f4\u901a\u4e00\u6761\u5bb9\u91cf\u4e3a1\u7684\u8fb9\n\n\u6bd4\u5982a\u70b9 \u5c31\u8981\u62c6\u6210 S[a]--->E[a] \u5f53\u7136 a\u7684\u7ec8\u70b9\u53f7\u5c31\u662f a+n\n\na\u5982\u679c\u901a\u5411b\u70b9\n\n\u5219\u8981\u628a E[a]-->S[b] E[b]-->S[a] \u8fd9\u6837\u5c31\u80fd\u6ee1\u8db3\u9898\u76ee\u4e2d\u6709\u5173\u53cc\u5411\u8054\u901a\u7684\u8981\u6c42\n\n\u7531\u4e8e\u8d77\u59cb\u70b9st\u4e0e\u7ec8\u70b9ed\u4e0d\u80fd\u5220\n\n\n\u5219\u672c\u95ee\u9898\u53d8\u6210\u4e86\u6c42E[st] \u5230 S[ed] \u7684\u6700\u5c0f\u5272\u95ee\u9898 \u5c31\u662f\u6c42\u6700\u5927\u6d41\n\n\u4ee3\u7801\u5982\u4e0b\uff1a```cpp\n#include<cstdio>\n    #include<iostream>\n    #include<algorithm>\n    #include<vector>\n    #include<queue>\n    #include<cstring>\n    using namespace std;\n    #define maxn 40000\n    #define inf 0x7fffffff\n    struct edg{\n        int t,cap,flow,rev;\n    };\n    vector<edg> M[maxn];\n    int cur[maxn],d[maxn],st,ed,n,m;\n    void addedge(int a,int b,int cp){\n        M[a].push_back((edg){b,cp,0,M[b].size()});\n        M[b].push_back((edg){a,0,0,M[a].size()-1});\n    }\n    bool bfs(int s,int t){\n        memset(d,0,sizeof(d));\n        queue<int> Q;\n        d[s]=1;\n        Q.push(s);\n        while(!Q.empty()){\n            int hd=Q.front();\n            if(hd==t) return 1;\n            Q.pop();\n            for(int i=0;i<M[hd].size();i++){\n                edg t=M[hd][i];\n                if(t.cap>t.flow && d[t.t]==0){\n                    Q.push(t.t);\n                    d[t.t]=d[hd]+1;\n                }\n            }\n        } \n        return 0;\n    }\n    int dfs(int s,int t,int fl){\n        if(s==t){\n            return fl;\n        }\n        for(int &i=cur[s];i<M[s].size();i++){\n            edg &e=M[s][i];\n            if(d[e.t]==d[s]+1 && e.cap>e.flow){\n                int di=dfs(e.t,t,min(fl,e.cap-e.flow));\n                if(di>0){\n                    e.flow+=di;\n                    M[e.t][e.rev].flow-=di;\n                    return di;\n                }\n            }\n        }\n        return 0;\n    }\n    int Dinic(int st,int ed)\n    {\n        int Ans=0;\n        while (bfs(st,ed))\n        {\n            memset(cur,0,sizeof(cur));\n            while (int dlta=dfs(st,ed,inf))\n                        Ans+=dlta;\n            //cout<<Ans<<endl;\n        }\n        return Ans;\n    }\n    int main(){\n        cin>>n>>m>>st>>ed;\n        for(int i=1,a,b;i<=m;i++){\n            cin>>a>>b;\n            addedge(a+n,b,inf);\n            addedge(b+n,a,inf);\n        }\n        for(int i=1;i<=n;i++){\n            addedge(i,i+n,1);\n        }\n        int mxf=Dinic(st+n,ed);\n        cout<<mxf;\n}\n```\n###### ---\u5206\u5272\u7ebf-----\n\u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u5927\u4f6c\u52ff\u55b7",
        "postTime": 1563334124,
        "uid": 172726,
        "name": "f337889",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1345 \u3010[USACO5.4]\u5976\u725b\u7684\u7535\u4fe1Telecowmunication\u3011"
    }
]