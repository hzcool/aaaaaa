[
    {
        "content": "\u200b\t\u5982\u679c\u5bf9\u6574\u4e2a\u5e8f\u5217\u8be2\u95ee\u4e00\u6b21\uff0c\u6709\u4e00\u79cd\u5e38\u89c1\u7684\u5206\u6cbb\u65b9\u6cd5\uff1a\u5bf9\u4e8e\u533a\u95f4 $[l,r]$\uff0c\u7b54\u6848\u4e3a $[l,mid]$ \u5185\u7684\u7b54\u6848+ $[mid,r]$ \u5185\u7684\u7b54\u6848+\u8de8\u8fc7\u533a\u95f4\u7ec8\u70b9\u7684\u7b54\u6848\u3002\u6211\u4eec\u53ef\u4ee5\u5bf9 $[l,mid]$ \u6c42\u540e\u7f00gcd\u8bb0\u4e3aa\uff0c\u5bf9 $[mid,r]$ \u6c42\u524d\u7f00gcd\u8bb0\u4e3ab\uff0c\u8de8\u8fc7\u7ec8\u70b9\u7684\u7b54\u6848\u5373\u6ee1\u8db3 $\\gcd (a_i,b_j) > 1$ \u7684i\u548cj\u7684\u5bf9\u6570\uff0c\u7531\u4e8ea\u548cb\u6570\u7ec4\u90fd\u6709\u5355\u8c03\u6027\uff0c\u53ef\u4ee5\u4f7f\u7528\u53cc\u6307\u9488\u626b\u63cf\u6c42\u51fa\u7b54\u6848\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\u5982\u679c\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u4e2a\u5206\u6cbb\uff0c\u53ef\u4ee5\u652f\u6301\u4fee\u6539\u64cd\u4f5c\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e\u6bcf\u6b21\u5408\u5e76\u4fe1\u606f\u662f $O(n)$ \u7684\u3002\u6ce8\u610f\u5230gcd\u6709\u4e00\u4e2a\u6027\u8d28\uff1a\u6bcf\u6b21\u52a0\u5165\u4e00\u4e2a\u6570\uff0cgcd\u8981\u4e48\u4e0d\u53d8\uff0c\u8981\u4e48\u81f3\u591a\u53d8\u4e3a\u539f\u6765\u76841/2\uff0c\u6240\u4ee5\u628agcd\u76f8\u540c\u7684\u6bb5\u7f29\u5728\u4e00\u8d77\uff0c\u6700\u591a\u6709log\u6bb5\uff0c\u8fd9\u6837\u7ebf\u6bb5\u6811\u6bcf\u4e2a\u8282\u70b9\u53ef\u4ee5\u8bb0\u5f55\u524d\u7f00\u3001\u540e\u7f00gcd\u7f29\u5b8c\u4e4b\u540e\u7684\u6570\u7ec4\uff0c\u5408\u5e76\u6807\u8bb0\u65f6\u66b4\u529b\u626b\u63cf\u5408\u5e76\uff0c\u7edf\u8ba1\u7b54\u6848\u4ecd\u7136\u7528\u4e4b\u524d\u7684\u65b9\u6cd5\uff0c\u5e76\u4e14\u628a\u76f8\u540c\u6bb5\u518d\u6b21\u7f29\u8d77\u6765\u5373\u53ef\uff0c\u5408\u5e76\u590d\u6742\u5ea6 $O(\\log a_i)$\uff0c\u8be2\u95ee\u65f6\u5c06\u76f8\u90bb\u533a\u95f4\u6309\u7167\u7ebf\u6bb5\u6811\u4e0a\u4e00\u6837\u5408\u5e76\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n\\log a_i)$\u3002\n\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cstdlib>\n#include <cmath>\n#include <algorithm>\n#include <vector>\nusing namespace std;\n\n#define Rep(i,l,r) for (int i = (l); i <= (r); ++ i)\n#define RepD(i,r,l) for (int i = (r); i >= (l); -- i)\n#define RepG(i,x) for (int i = hd[x]; i; i = e[i].nxt)\n#define mkp make_pair\n#define uu first\n#define vv second\n#define ls (o<<1)\n#define rs (o<<1|1)\n\ntypedef long long ll;\ntypedef pair <int, int> pii;\n\nconst int N = 2e5+5;\n\nint n, q, a[N];\nstruct node {\n    vector <pii> pr, su; ll s;\n    node () {pr.clear(), su.clear(), s = 0;}\n} tr[N<<2];\n\nint gcd (int x, int y) {return y? gcd (y, x%y): x;}\n\ninline vector <pii> hb (vector <pii> x, vector <pii> y, int ty) {\n    if (x.empty()) return y; if (y.empty()) return x;\n    if (ty) reverse (x.begin(), x.end()), reverse (y.begin(), y.end());\n    vector <pii> res; res.clear(); int szx = x.size()-1, szy = y.size()-1; pii t;\n    Rep(i,0,szx) t = x[i], res.push_back(t);\n    Rep(i,0,szy) {\n        int gc = gcd (x[szx].uu, y[i].uu);\n        if (gc==t.uu) t.vv = y[i].vv, res[res.size()-1].vv = t.vv+x[szx].vv;\n        else t.uu = gc, t.vv = y[i].vv, res.push_back(mkp(t.uu,t.vv+x[szx].vv));\n    }\n    if (ty) reverse (res.begin(), res.end());\n    return res;\n}\n\ninline node mg (node x, node y) {\n    node res; res.s = x.s+y.s;\n    res.pr = hb (x.pr, y.pr, 0), res.su = hb (y.su, x.su, 1);\n    int szx = x.su.size()-1, szy = y.pr.size()-1;\n    if (szx<0 || szy<0) return res;\n    int j = 0;\n    Rep(i,0,szx) {\n        while (j<=szy && gcd (x.su[i].uu, y.pr[j].uu)>1) ++ j;\n        ll t = x.su[i].vv; if (i<szx) t -= x.su[i+1].vv;\n        if (j) res.s += t*y.pr[j-1].vv;\n    }\n    return res;\n}\n\ninline void fz (node &x, int v) {\n    x.pr.clear (), x.su.clear ();\n    x.pr.push_back(mkp(v,1)), x.su.push_back(mkp(v,1));\n    x.s = (v>1);\n}\n\ninline void pushup (int o) {tr[o] = mg (tr[ls], tr[rs]);}\n\nvoid build (int o, int l, int r) {\n    if (l==r) {fz (tr[o], a[l]); return;}\n    int mid = (l+r)>>1;\n    build (ls, l, mid), build (rs, mid+1, r);\n    pushup (o);\n}\n\nvoid modi (int o, int l, int r, int q, int v) {\n    if (l==r) {fz (tr[o], v); return;}\n    int mid = (l+r)>>1;\n    if (q<=mid) modi (ls, l, mid, q, v);\n    else modi (rs, mid+1, r, q, v);\n    pushup (o);\n}\n\nnode qans (int o, int l, int r, int ql, int qr) {\n    if (ql<=l && qr>=r) return tr[o];\n    int mid = (l+r)>>1; node res;\n    if (ql<=mid && qr>mid) {\n        res = mg (qans (ls, l, mid, ql, qr), qans (rs, mid+1, r, ql, qr));\n        return res;\n    }\n    else if (ql<=mid) res = qans (ls, l, mid, ql, qr);\n    else if (qr>mid) res = qans (rs, mid+1, r, ql, qr);\n    return res;\n}\n\ninline int read () {\n    int z = 0, f = 1; char c = getchar ();\n    while (c<'0' || c>'9') {if (c=='-') f = -1; c = getchar ();}\n    while (c>='0' && c<='9') z = z*10+c-'0', c = getchar ();\n    return z*f;\n}\n\nint main () {\n    int ty, l, r, x, v;\n    n = read (), q = read ();\n    Rep(i,1,n) a[i] = read ();\n    build (1, 1, n);\n    while (q --) {\n        ty = read ();\n        if (ty==1) x = read (), v = read (), modi (1, 1, n, x, v);\n        else l = read (), r = read (), printf (\"%lld\\n\", qans (1, 1, n, l, r).s);\n    }\n    return 0;\n}\n```",
        "postTime": 1527071803,
        "uid": 18479,
        "name": "yhgalaxy",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4435 \u3010[COCI2017-2018#2] \u200b\u200bGara\u017ea\u3011"
    },
    {
        "content": "\u5148\u5206\u6790\u4e0b\u6b64\u9898\u9898\u610f\uff1a\n\n>\u9700\u8981\u6211\u4eec\u5b9e\u73b0\u7684\u64cd\u4f5c\uff1a\n\n>\u5355\u70b9\u4fee\u6539\u5e8f\u5217\u5143\u7d20\n\n>\u67e5\u8be2\u67d0\u4e2a\u533a\u95f4\u5185gcd\u975e1\u7684\u5b50\u4e32\u6570\u76ee\n\n\u6211\u4eec\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u5185\u7b54\u6848\u4e2a\u6570\u3002\n\n\u90a3\u4e48\u4e00\u4e2a\u533a\u95f4\u7684\u6240\u6c42\u6570\u76ee\u5373\u7531$\\sf\\large\\text{\u4e09\u90e8\u5206}$\u7ec4\u6210\uff1a\n\n* \u5de6\u533a\u95f4\u5185\u7684\u6570\u76ee\n\n* \u53f3\u533a\u95f4\u5185\u7684\u6570\u76ee\n\n* \u8de8\u533a\u95f4\u7684\u6570\u76ee\n\n\u90a3\u4e48\u53ea\u8981\u77e5\u9053\u600e\u4e48\u6c42`\u8de8\u533a\u95f4`\u7684\u5c31\u7b80\u5355\u4e86\u3002\n\n\u9996\u5148\u8de8\u533a\u95f4\u7684\u5b50\u4e32\u4e0d\u662f\u4e2a\u4e2a\u90fd\u6709\u7528\uff0c\u53ea\u6709`gcd\u975e1`\u7684\u624d\u6709\u8d21\u732e\n\n\u8003\u8651\u600e\u4e48\u8bb0\u5f55\u8de8\u533a\u95f4\u7684\u3001gcd\u975e1\u7684\u5b50\u4e32\u6570\u76ee\uff1a\n$\\sf\\color{red}\\large\\text{\u7ef4\u62a4\u524d\u7f00gcd\u3001\u540e\u7f00gcd\u3002}$\n\n\u53ef\u4ee5\u7528\u6570\u7ec4\u6216pair\u8bb0\u5f55gcd\u7684\u503c\u548c\u6570\u91cf\uff0c\u4e3a\u4e86\u8282\u7ea6\u7a7a\u95f4\uff0c\u6b64\u5904\u7528`vector\u5957pair`\u8bb0\u5f55\u3002\n\n $\\begin{cases}\\small\\sf\\text{\u6574\u533a\u95f4\u5185\u524d\u7f00gcd\u957f\u5ea6\u4e0d\u8d85\u8fc7\u5de6\u533a\u95f4\u7684\u90e8\u5206\u76f4\u63a5\u5f15\u7528}\\\\\\small\\sf\\text{\u8d85\u8fc7\u5de6\u533a\u95f4\u957f\u7684\u90e8\u5206\u5c31\u662fL\u6574\u6bb5\u7684gcd\u548c\u53f3\u533a\u95f4\u524d\u7f00\u7684gcd}\\end{cases}$ \n\n\u53e6\u5efa\u4e00\u4e2apair\u7528\u4e8e\u5b58\u50a8r\u533a\u95f4\u524d\u7f00\u7684gcd\u6570\u5373\u53ef\u3002\n\n\u540e\u7f00\u540c\u7406\u3002\n\n```\n\u600e\u4e48\u7528\u4e0a\u8ff0\u4fe1\u606f\u6c42\u8de8\u533a\u6570\u91cf\uff1f\n\n\u679a\u4e3e\u5de6\u533a\u95f4\u540e\u7f00\u4ee5\u53ca\u53f3\u533a\u95f4\u524d\u7f00\n\n\u679a\u4e3e\u8fc7\u7a0b\u4e2d\u53f3\u79fb\u5de6\u533a\u95f4\u540e\u7f00\u65f6\u53f3\u533a\u95f4\u4e5f\u4f1a\u53f3\u79fb\u6216\u4e0d\u53d8\uff08\u5355\u8c03\u53f3\u79fb\uff09\u3002\n\n\u63a5\u4e0b\u6765\u53cc\u6307\u9488\u5b8c\u6210\u5373\u53ef\u3002\n```\n\n\u672c\u9898\u552f\u4e00\u7684\u96be\u70b9\u5c31\u662f\u5411\u4e0a\u66f4\u65b0\u7684\u64cd\u4f5c\uff0c\u5176\u4f59\u7684\u66f4\u6539\u3001\u67e5\u8be2\u64cd\u4f5c\u90fd\u5341\u5206\u5e38\u89c4\uff0c\u53e6\u5916\u5982\u679c\u770bfirst\u6216second\u4e0d\u723d\u53ef\u4ee5\u7528\u4e24\u4e2a\u6570\u7ec4\u4ee3\u66ffpair\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ri unsigned register ll\n#define ll long long\n#define ls(x) (x<<1)\n#define rs(x) (x<<1|1)\n#define leaf (l==r)\nusing namespace std;\nconst ll maxn=1e6+7;\n\nll read()\n{\n\tll x=0;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn x;\n}\n\nll a[maxn];\n\nstruct segment_tree\n{\n\tll l;\n\tll r;\n\tll val;\n\tvector<pair<int,int> > pre;//\u524d\u7f00\n\tvector<pair<int,int> > sub;//\u540e\u7f00\n} seg[maxn];\n\nsegment_tree pushup(segment_tree l,segment_tree r)//\u5411\u4e0a\u66f4\u65b0\n{\n\tsegment_tree nd;\n\tnd.l=l.l;\n\tnd.r=nd.r;\n\tnd.pre.clear();\n\tnd.sub.clear();\n\tfor(ri i=0; i<l.pre.size(); i++)\n\t{\n\t\tnd.pre.push_back(l.pre[i]);\n\t}\n\tfor(ri i=l.pre.size(); i<l.pre.size()+r.pre.size(); i++)\n\t{\n\t\tll res=__gcd(l.pre[l.pre.size()-1].first,r.pre[i-l.pre.size()].first);\n\t\tif(nd.pre[nd.pre.size()-1].first==res)\n\t\t{\n\t\t\tnd.pre[nd.pre.size()-1].second+=r.pre[i-l.pre.size()].second;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnd.pre.push_back(make_pair(res,r.pre[i-l.pre.size()].second));\n\t\t}\n\t}\n\tfor(ri i=0; i<r.sub.size(); i++)\n\t{\n\t\tnd.sub.push_back(r.sub[i]);\n\t}\n\tfor(ri i=r.sub.size(); i<l.sub.size()+r.sub.size(); i++)\n\t{\n\t\tll res=__gcd(r.sub[r.sub.size()-1].first,l.sub[i-r.sub.size()].first);\n\t\tif(nd.sub[nd.sub.size()-1].first==res)\n\t\t{\n\t\t\tnd.sub[nd.sub.size()-1].second+=l.sub[i-r.sub.size()].second;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tnd.sub.push_back(make_pair(res,l.sub[i-r.sub.size()].second));\n\t\t}\n\t}\n\tnd.val=l.val+r.val;\n\tll cur1=l.sub.size()-1;\n\tll cur2=0;//\u53cc\u6307\u9488\n\tll len=l.sub[0].second;\n\tll lw=0;\n\tbool flg=0;\n\twhile(1)\n\t{\n\t\tint gcd=flg?cur2-1:cur2;\n\t\twhile(cur1>=0&&__gcd(l.sub[cur1].first,r.pre[gcd].first)==1)\n\t\t{\n\t\t\tcur1--;\n\t\t\tflg=0;\n\t\t}\n\t\tif(cur1<0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tif(flg)\n\t\t{\n\t\t\tcur1--;\n\t\t}\n\t\tlen=l.sub[cur1].second;\n\t\twhile((unsigned)cur2+1<=r.pre.size()&&__gcd(r.pre[cur2].first,l.sub[cur1].first)!=1)\n\t\t{\n\t\t\tlw+=r.pre[cur2].second;\n\t\t\tcur2++;\n\t\t}\n\t\tif(__gcd(l.sub[cur1].first,r.pre[cur2-1].first)!=1)\n\t\t{\n\t\t\tnd.val+=len*lw;\n\t\t}\n\t\tif(cur1<=0)\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\tflg=1;\n\t}\n\treturn nd;\n}//two pointer\u5b8c\u6210\nvoid build(ll nd,ll l,ll r)//\u5efa\u6811\n{\n\tif(leaf)\n\t{\n\t\tseg[nd].pre.push_back(make_pair(a[l],1));\n\t\tseg[nd].sub.push_back(make_pair(a[l],1));\n\t\tseg[nd].val=a[l]==1?0:1;\n\t\tseg[nd].l=seg[nd].r=l;\n\t\treturn;\n\t}\n\tll mid=(l+r)>>1;\n\tbuild(ls(nd),l,mid);\n\tbuild(rs(nd),mid+1,r);\n\tseg[nd]=pushup(seg[ls(nd)],seg[rs(nd)]);\n}\nvoid modify(ll nd,ll l,ll r,ll pos,ll val)//\u5355\u70b9\u4fee\u6539\n{\n\tif(leaf)\n\t{\n\t\tseg[nd].pre.clear();\n\t\tseg[nd].sub.clear();\n\t\tseg[nd].pre.push_back(make_pair(val,1));\n\t\tseg[nd].sub.push_back(make_pair(val,1));\n\t\tseg[nd].val=val==1?0:1;\n\t\treturn;\n\t}\n\tll mid=(l+r)>>1;\n\tif(pos<=mid)\n\t{\n\tmodify(ls(nd),l,mid,pos,val);\n\t}\n\telse\n\t{\n\t\tmodify(rs(nd),mid+1,r,pos,val);\n\t}\n\tseg[nd]=pushup(seg[ls(nd)],seg[rs(nd)]);\n}\nsegment_tree query(ll nd,ll l,ll r,ll L,ll R)//\u533a\u95f4\u7edf\u8ba1\uff0c\u5927\u5199\u4e3a\u6240\u95ee\u533a\u95f4\uff0c\u5c0f\u5199\u4e3a\u5f53\u524d\u533a\u95f4\n{\n\tif(L<=l&&R>=r)\n\t{\n\t\treturn seg[nd];\n\t}\n\tll mid=(l+r)>>1;\n\tsegment_tree a,b;\n\tbool flgl=0;\n\tbool flgr=0;\n\tif(L<=mid)\n\t{\n\t\ta=query(ls(nd),l,mid,L,R);\n\t\tflgl=1;\n\t}\n\tif(R>mid)\n\t{\n\t\tb=query(rs(nd),mid+1,r,L,R);\n\t\tflgr=1;\n\t}\n\tif(flgl&&flgr)\n\t{\n\t\treturn pushup(a,b);\n\t}\n\treturn flgl?a:b;\n}\n\nunsigned ll n,m;\n//\u4ee3\u7801\u4e2d\u7684\u8fd9\u4e9b\u6709\u5173unsigned\u7684\u58f0\u660e\u662f\u56e0\u4e3a\u6d88\u9664warning\uff0c\u53ef\u4ee5\u5ffd\u7565\u3002\n\nint main()\n{\n\tn=read();\n\tm=read();\n\tfor(ri i=1; i<=n; i++)\n\t{\n\t\ta[i]=read();\n\t}\n\tbuild(1,1,n);\n\tfor(ri i=1; i<=m; i++)\n\t{\n\t\tll opt=read();\n\t\tll l=read();\n\t\tll r=read();\n\t\tif(opt==1)\n\t\t{\n\t\t\tmodify(1,1,n,l,r);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tprintf(\"%lld\\n\",query(1,1,n,l,r).val);\n\t\t}\n\t}\n}\n```\n\n\u8c03\u8bd5\u8c03\u4e86\u5f88\u4e45\uff0c\u53ef\u80fd\u662f\u7531\u4e8e\u9012\u5f52\u8c03\u7528\u9891\u7e41\uff0c\u5e76\u4e0d\u80fd\u9632\u6b62\u90e8\u5206TLE\uff0c\u4f46\u662f\u7ecf\u8fc7\u5438\u6c27\u8fd8\u662f\u53ef\u4ee5\u8fc7\u7684\u3002\n\n\u731c\u6d4b\u4e00\u4e0b\uff1a\u5982\u679c\u624b\u5199vector\u5e76\u4f7f\u7528\u6570\u7ec4\u4ee3\u66ffpair\uff0cgcd\u51fd\u6570\u4e5f\u81ea\u5df1\u5199\u7684\u8bdd\uff0c\u5e94\u5f53\u80fd\u7701\u4e0b\u5f88\u591a\u7684\u8c03\u7528\u65f6\u95f4\u3002$\\sf\\Huge OwO$",
        "postTime": 1558164894,
        "uid": 126484,
        "name": "first_fan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4435 \u3010[COCI2017-2018#2] \u200b\u200bGara\u017ea\u3011"
    },
    {
        "content": "### [[COCI2017-2018#2] Gara\u017ea](https://www.luogu.com.cn/problem/P4435)\n\n\u5c0f\u6280\u5de7\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217\u7684\u524d\u7f00 $\\text{gcd}$ \u4ed6\u7684\u4e0d\u76f8\u540c\u6bb5\u6570\u4e0d\u4f1a\u8d85\u8fc7 $\\log n$\u3002\n\n\u8bc1\u660e\uff1a\u5bf9\u4e8e\u5f53\u524d\u7684\u524d\u7f00 $\\text{gcd} :g$\uff0c\u6211\u4eec\u6dfb\u52a0\u4e00\u4e2a\u6570 $x$\uff0c\u60c5\u51b5\u6709\u4e24\u79cd\uff1a\n\n1. $g$ \u56e0\u4e3a $x$ \u7684\u51fa\u73b0\u800c\u6539\u53d8\uff0c\u90a3\u4e48\u8bf4\u660e $g$ \u4e2d\u81f3\u5c11\u6709\u4e00\u4e2a\u56e0\u5b50\u4e0d\u5b58\u5728\u4e0e $x$\uff0c\u90a3\u4e48\u6211\u4eec\u628a\u56e0\u5b50\u79fb\u9664\uff0c\u56e0\u4e3a\u56e0\u5b50\u6700\u5c0f\u4e3a $2$ \u6240\u4ee5 $g$ \u81f3\u5c11\u51cf\u5c11\u4e00\u534a\u3002\n\n1. $g$ \u4e0d\u53d8\u3002\n\n\u8bc1\u6bd5\uff0c\u53ef\u4ee5\u770b\u51fa $g$ \u8981\u4e48\u4e0d\u53d8\u8981\u4e48\u51cf\u5c11\u81f3\u5c11\u4e00\u534a\uff0c\u6240\u4ee5\u6700\u591a $\\log$ \u6bb5\u3002\n\n\u8003\u8651\u666e\u901a\u7684\u4e0d\u5e26\u4fee\u6539\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u666e\u901a\u7684\u5206\u6cbb\u6765\u505a\uff1a\n\n\u5047\u5982\u5f53\u524d\u5728 $l\\sim mid\\sim r$ \u6211\u4eec\u5148\u7b97\u51fa $l\\sim mid$ \u7684\u540e\u7f00 $\\gcd$ \u548c $mid+1\\sim r$ \u7684\u524d\u7f00 $\\gcd$\u3002\n\n\u90a3\u4e48\u5de6\u53f3\u7aef\u70b9\u6a2a\u8de8 $mid$ \u4e14\u5408\u6cd5\u7684\u533a\u95f4 $x,y$ \u6ee1\u8db3 $x\\sim mid$ \u7684\u540e\u7f00 $\\gcd$ \u548c $mid+1\\sim r$ \u7684\u524d\u7f00 $\\gcd$ \u62fc\u63a5\u8d77\u6765\u4e0d\u662f $1$\u3002\n\n\u7531\u4e8e $x,y$ \u5177\u6709\u5355\u8c03\u6027\uff08\u5bf9\u4e8e\u6240\u6709\u7684 $x$\uff0c\u8bbe\u6700\u8fdc\u7684\u4e14\u5408\u6cd5\u7684 $y$ \u90a3\u4e48 $x$ \u5411\u53f3\u79fb\u52a8\u7684\u65f6\u5019 $y$ \u4e00\u5b9a\u4f1a\u4e0d\u53d8\u6216\u8005\u5411\u53f3\u4fa7\u79fb\u52a8\uff09\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u53cc\u6307\u9488\uff0c\u5de6\u7aef\u70b9\u5728 $l$\uff0c\u53f3\u7aef\u70b9\u5728 $r$\u3002\n\n\u4f46\u662f\u73b0\u5728\u6211\u4eec\u5e26\u4fee\u6539\u4e86\uff0c\u8003\u8651\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u8fd9\u4e2a\u5206\u6cbb\uff0c\u90a3\u4e48\u6211\u4eec\u5355\u6b21\u4fee\u6539\u7684\u590d\u6742\u5ea6\u662f $\\log n$ \u7684\uff0c\u4f46\u662f\u6211\u4eec\u5408\u5e76\u9700\u8981\u679a\u4e3e\u5de6\u53f3\u4ee5\u53ca\u6c42 $\\gcd$ \u6240\u4ee5\u590d\u6742\u5ea6\u662f $n\\log n$ \u7684\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u4e00\u5f00\u59cb\u8bf4\u7684\u6027\u8d28\uff0c\u8fde\u7eed\u7684\u4e0d\u540c $\\gcd$ \u6bb5\u6570\u6700\u591a\u4e3a $\\log a$ \u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u7684\u5408\u5e76\u590d\u6742\u5ea6\u5c31\u53ef\u4ee5\u53d8\u4e3a $\\log n\\times \\log a$\u3002\n\n\u5177\u4f53\u5982\u4f55\u5408\u5e76\uff1a\n\n\u6211\u4eec\u5728\u7ebf\u6bb5\u6811\u4e0a\u7ef4\u62a4\u4e24\u4e2a `vector`\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\uff0c\u6211\u4eec\u770b\u4ed6\u7684\u5de6\u5b69\u5b50\u7684\u672b\u5c3e\u524d\u7f00 $\\gcd$ \u548c\u53f3\u5b69\u5b50\u7684\u7b2c\u4e00\u4e2a\u524d\u7f00 $\\gcd$ \u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u76f8\u540c\uff0c\u6211\u4eec\u5c31\u628a\u4e24\u8005\u5408\u5e76\uff0c\u7136\u540e\u90fd\u585e\u5165\u5f53\u524d\u70b9\u7684\u524d\u7f00 `vector`\uff0c\u6bcf\u4e2a `vector` \u7684\u5143\u7d20\u6211\u4eec\u9700\u8981\u8bb0\u5f55\u5f53\u524d\u6bb5\u7684\u5de6\u53f3\u7aef\u70b9\u4ee5\u53ca\u4ed6\u7684 $\\gcd$ \u503c\u3002\u540e\u7f00\u540c\u7406\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define N 1000005\n#define ls (now<<1)\n#define rs (now<<1|1)\n#define gcd(x,y) __gcd(x,y)\n#define int long long\nusing namespace std;\nint read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nint n,q,a[N];\nstruct node\n{\n\tint l,r,w;\n};\nnode make(int l,int r,int w)\n{\n\tnode a;\n\ta.l=l;a.r=r;a.w=w;\n\treturn a;\n}\nstruct tree\n{\n\tint ans;\n\tvector<node> f,t;\n}tr[N];\nvoid add(node &x,node y)\n{\n\tx.l=min(x.l,y.l);\n\tx.r=max(x.r,y.r);\n}\nvector<node> merge(vector<node> x,vector<node> y)\n{\n\tvector<node> ans;\n\tint lenx=x.size()-1,leny=y.size()-1;\n\tfor(int i=0;i<=lenx;i++)ans.push_back(x[i]);\n\tfor(int i=0,p,val;i<=leny;i++)\n\t{\n\t\tp=ans.size()-1;val=gcd(x[lenx].w,y[i].w);\n\t\tif(val==ans[p].w)add(ans[p],y[i]);\n\t\telse ans.push_back(make(y[i].l,y[i].r,val));\n\t}\n\treturn ans;\n}\nint ln(node a){return a.r-a.l+1;}\ntree hb(tree x,tree y)\n{\n\ttree ans;ans.ans=0;\n\tans.f=merge(x.f,y.f);\n\tans.t=merge(y.t,x.t);\n\tint len=x.t.size()-1,lim=y.f.size()-1;\n\tfor(int l=len,r=0;l>=0;l--)\n\t{\n\t\twhile(r<=lim&&gcd(y.f[r].w,x.t[l].w)!=1)r++;r--;\n\t\tif(r>=0)ans.ans+=ln(x.t[l])*(y.f[r].r-y.f[0].l+1);\n\t\telse r++;\n\t}\n\tans.ans+=x.ans+y.ans;\n\treturn ans;\n}\nvoid build(int now,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\ttr[now].f.push_back(make(l,r,a[l]));\n\t\ttr[now].t.push_back(make(l,r,a[l]));\n\t\tif(a[l]!=1)tr[now].ans=1;\n\t\telse tr[now].ans=0;\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(ls,l,mid);\n\tbuild(rs,mid+1,r);\n\ttr[now]=hb(tr[ls],tr[rs]);\n}\nvoid midy(int now,int l,int r,int x,int val)\n{\n\tif(l==r)\n\t{\n\t\tvector<node> v;v.push_back(make(l,r,val));\n\t\ttr[now].f=v;tr[now].t=v;\n\t\tif(val!=1)tr[now].ans=1;\n\t\telse tr[now].ans=0;\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(mid>=x)midy(ls,l,mid,x,val);\n\telse midy(rs,mid+1,r,x,val);\n\ttr[now]=hb(tr[ls],tr[rs]);\n}\ntree que(int now,int l,int r,int ql,int qr)\n{\n\tif(l>=ql&&r<=qr)return tr[now];\n\tint mid=(l+r)>>1;\n\tif(mid>=ql&&mid<qr)return hb(que(ls,l,mid,ql,qr),que(rs,mid+1,r,ql,qr));\n\tif(mid>=ql)return que(ls,l,mid,ql,qr);\n\tif(mid<qr)return que(rs,mid+1,r,ql,qr);\n}\nsigned main()\n{\n\tn=read();q=read();\n\tfor(int i=1;i<=n;i++)a[i]=read();\n\tbuild(1,1,n);\n\tint op,x,y;\n\twhile(q--)\n\t{\n\t\top=read();x=read();y=read();\n\t\tif(op==1)midy(1,1,n,x,y);\n\t\telse cout<<que(1,1,n,x,y).ans<<\"\\n\";\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1677824140,
        "uid": 331947,
        "name": "hegm",
        "ccfLevel": 0,
        "title": "P4435 [COCI2017-2018#2] \u200b\u200bGara\u017ea \u9898\u89e3"
    }
]