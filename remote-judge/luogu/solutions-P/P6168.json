[
    {
        "content": "\u56fe\u8bba\u597d\u9898\u3002\n\n\u9996\u5148\u7b80\u5316\u4e00\u4e0b\u9898\u610f\uff1a\u6709 $n$ \u4e2a\u8f66\u7ad9\uff0c\u8fdb\u5165\u8f66\u7ad9\u7684\u901f\u5ea6**\u4e0d\u80fd\u9ad8\u4e8e $s_i$**\uff0c\u51fa\u7ad9\u540e\u901f\u5ea6\u56fa\u5b9a $t_i$\uff0c\u53ef\u4ee5\u7528 $x$ \u7684\u4ee3\u4ef7\u4f7f\u8f66\u901f\u964d\u4f4e $x$\uff0c\u6392\u5217\u8f66\u7ad9\u4f7f\u5f97\u4ee3\u4ef7\u6700\u5c0f\u3002\n\n\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u901f\u5ea6\u5efa\u4e00\u4e2a\u70b9\uff0c\u8f66\u7ad9\u2026\u2026\u597d\u50cf\u8981\u8fde\u5f88\u591a\u8fb9\uff0c\u5fc5\u7136\u70b8\u7a7a\u95f4\uff0c\u4e0d\u80fd\u8fd9\u4e48\u641e\u3002\n\n\u6211\u4eec\u7565\u5fae\u8f6c\u5316\u4e00\u4e0b\u9898\u610f\uff1a\u6709 $n$ \u4e2a\u8f66\u7ad9\uff0c\u8fdb\u5165\u8f66\u7ad9\u7684\u901f\u5ea6**\u5fc5\u987b\u6070\u597d\u4e3a $s_i$**\uff0c\u51fa\u7ad9\u540e\u901f\u5ea6\u56fa\u5b9a $t_i$\uff0c\u53ef\u4ee5\u7528 $x$ \u7684\u4ee3\u4ef7\u4f7f\u8f66\u901f\u964d\u4f4e $x$\uff0c**\u63d0\u901f\u6ca1\u6709\u4efb\u4f55\u4ee3\u4ef7**\uff0c\u6392\u5217\u8f66\u7ad9\u4f7f\u5f97\u4ee3\u4ef7\u6700\u5c0f\u3002\n\n\u8fd9\u6837\u6709\u4e86\u4e00\u4e2a\u663e\u7136\u7684\u6a21\u578b\uff1a\u5148\u79bb\u6563\u5316\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u901f\u5ea6\u5efa\u4e00\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u8f66\u7ad9\u4ece $s_i$ \u5230 $t_i$ \u8fde\u8fb9\uff0c\u63a5\u4e0b\u6765\u5efa\u4e00\u4e2a\u865a\u70b9 $inf$\uff0c$inf$ \u5230 $1$ \u8fde\u8fb9\uff0c$inf-1$\uff08\u4e5f\u5c31\u662f\u79bb\u6563\u5316\u4e4b\u540e\u7684\u6700\u5927\u503c\uff09\u5230 $inf$ \u8fde\u8fb9\uff0c\u7136\u540e\u76f8\u90bb\u4e24\u70b9\u8fde\u53cc\u5411\u8fb9\uff0c\u6b63\u5411\u7684\u8d39\u7528\u4e3a 0\uff0c\u53cd\u5411\u7684\u8d39\u7528\u4e3a\u4e24\u70b9\u7684\u901f\u5ea6\u5dee\u503c\u3002\u7136\u540e\u5728\u8fd9\u4e2a\u56fe\u4e0a\u8dd1\u6700\u5c0f\u54c8\u5bc6\u5c14\u987f\u56de\u8def\u3002\n\n~~\u7136\u540e\u6211\u4eec\u6109\u5feb\u7684\u83b7\u5f97\u4e86\u4e00\u4e2a NPC \u95ee\u9898\uff0c\u5c31\u72d7\u5e26\u4e86\u3002~~\n\n\u6309\u7167\u5957\u8def\uff0c\u6211\u4eec\u8003\u8651\u628a\u54c8\u5bc6\u5c14\u987f\u56de\u8def\u95ee\u9898\u8f6c\u5316\u6210\u6b27\u62c9\u56de\u8def\u95ee\u9898\u3002\n\n\u60f3\u5230\u53ef\u4ee5\u5148\u4e0d\u8fde\u76f8\u90bb\u4e24\u70b9\u4e4b\u95f4\u7684\u8fb9\uff0c\u7136\u540e\u5199\u4e00\u4e2a\u7b97\u6cd5\u5b9e\u73b0**\u53ea\u6dfb\u52a0\u5fc5\u987b\u8981\u53d8\u901f\u7684\u8fb9**\uff0c\u8fd9\u6837\u6bcf\u4e2a\u8fb9\u90fd\u4f1a\u8d70\u5230\uff0c\u4e8e\u662f\u53d8\u6210\u4e86\u4e00\u4e2a\u56fe\u4e0a\u6dfb\u52a0\u6743\u503c\u548c\u5c3d\u53ef\u80fd\u5c0f\u7684\u8fb9\u4f7f\u8fd9\u4e2a\u56fe\u53d8\u6210\u6b27\u62c9\u56de\u8def\u7684\u95ee\u9898\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u6211\u4eec\u8981\u6dfb\u52a0\u76f8\u90bb\u4e24\u70b9\u7684\u8fb9\u5f53\u4e14\u4ec5\u5f53**\u8986\u76d6\u4e86\u8fd9\u6761\u8fb9\u7684\u5411\u5de6\u7684\u8fb9\u548c\u5411\u53f3\u7684\u8fb9\u6570\u91cf\u4e0d\u4e00\u81f4**\u3002\u800c\u8fd9\u4e2a\u4e1c\u897f\u5bb9\u6613\u5dee\u5206\u5f97\u5230\u3002\u5982\u679c\u5411\u5de6\u7684\u8fb9\u591a\uff0c\u90a3\u4e48\u6211\u4eec\u6dfb\u52a0\u7684\u662f\u82e5\u5e72\u6761\u8d39\u7528\u4e3a 0 \u7684\u52a0\u901f\u8fb9\uff0c\u6ca1\u6709\u8d21\u732e\uff1b\u5982\u679c\u5411\u53f3\u7684\u8fb9\u591a\uff0c\u6211\u4eec\u6dfb\u52a0\u82e5\u5e72\u6761\u8d39\u7528\u4e3a\u4e24\u70b9\u901f\u5ea6\u5dee\u7684\u8fb9\uff0c\u8fd9\u65f6\u8ba1\u7b97\u8d21\u732e\u3002\n\n\u505a\u5b8c\u8fd9\u4e2a\u64cd\u4f5c\u4e4b\u540e\u6211\u4eec\u4f1a\u5f97\u5230\u82e5\u5e72\u4e2a\u5b58\u5728\u6b27\u62c9\u56de\u8def\u7684\u8054\u901a\u5757\uff0c\u8fd9\u65f6\u539f\u56fe\u8fd8\u6ca1\u6709\u6b27\u62c9\u56de\u8def\u3002\u6211\u4eec\u8fd8\u9700\u8981\u628a\u8054\u901a\u5757\u8fde\u8d77\u6765\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u6bcf\u6b21\u8981\u8fde\u4e00\u6761\u52a0\u901f\u8fb9\u4e00\u6761\u51cf\u901f\u8fb9\uff0c\u56e0\u6b64\u6bcf\u8fde\u4e00\u6b21\u4ee3\u4ef7\u662f\u4e24\u70b9\u95f4\u901f\u5ea6\u5dee\u3002\n\n\u663e\u7136\u6211\u4eec\u53ea\u4f1a\u5728\u76f8\u90bb\u7684\u8054\u901a\u5757\u4e4b\u95f4\u8fde\u8fb9\uff0c\u5426\u5219\u4e00\u5b9a\u4e0d\u4f18\uff0c\u626b\u4e00\u904d\u52a0\u8fb9\uff0c\u7136\u540e\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u5373\u53ef\u3002\n\n\u6700\u540e\u8fd8\u6709\u4e00\u4e2a\u5751\u662f\u56fe\u4e2d\u7684\u5355\u4e2a\u70b9\u6211\u4eec\u4e0d\u9700\u8981\u8fde\u8d77\u6765\uff0c\u4f46\u53ef\u80fd\u5b58\u5728\u5355\u4e2a\u70b9\u6709\u81ea\u73af\uff0c\u8fd9\u65f6\u9700\u8981\u7279\u5224\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\nusing namespace std;\n#define int long long\nstruct edge\n{\n    int x,y,w;\n    edge(int x_,int y_,int w_):\n        x(x_),y(y_),w(w_){}\n    bool operator <(const edge &other) const\n    {\n        return w<other.w;\n    }\n};\nvector<edge> v;\nint n,m,bin[100001<<2],s[100001<<2],t[100001<<2],sum[100001<<2],node[100001<<2],cnt,ans;\nbool vis[100001<<2];\ninline int read()\n{\n    int x=0;\n    char c=getchar();\n    while(c<'0'||c>'9')\n        c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=(x<<1)+(x<<3)+(c^48);\n        c=getchar();\n    }\n    return x;\n}\nint anc(int k)\n{\n    if(!bin[k])\n        return k;\n    return bin[k]=anc(bin[k]);\n}\ninline void link(int x,int y)\n{\n    x=anc(x);\n    y=anc(y);\n    if(x^y)\n        bin[y]=x;\n}\nsigned main()\n{\n    n=read(),m=read();\n    for(register int i=1;i<=n;++i)\n    {\n        s[i]=read(),t[i]=read();\n        node[++cnt]=s[i];\n        node[++cnt]=t[i];\n    }\n    node[++cnt]=1e9+7;\n    sort(node+1,node+cnt+1);\n    cnt=unique(node+1,node+cnt+1)-node-1;\n    s[++n]=1e9+7;\n    t[n]=node[1];\n    s[++n]=node[cnt-1];\n    t[n]=1e9+7;\n    for(register int i=1;i<=n;++i)\n    {\n        s[i]=lower_bound(node+1,node+cnt+1,s[i])-node;\n        t[i]=lower_bound(node+1,node+cnt+1,t[i])-node;\n        ++sum[s[i]];\n        --sum[t[i]];\n        vis[anc(s[i])]=1;\n        if(s[i]^t[i])\n            link(s[i],t[i]);\n    }\n    for(register int i=1;i<cnt;++i)\n    {\n        sum[i]+=sum[i-1];\n        if(sum[i]>0)\n            ans+=sum[i]*(node[i+1]-node[i]);\n        if(sum[i])\n        {\n            link(i,i+1);\n            vis[anc(i)]=1;\n        }\n    }\n    for(register int i=1,j=1;i<=cnt;i=j)\n    {\n        j=i+1;\n        while(j<=cnt&&!vis[anc(j)])\n            ++j;\n        if(j>cnt)\n            break;\n        if(anc(i)^anc(j))\n            v.push_back(edge(anc(i),anc(j),node[j]-node[i]));\n    }\n    sort(v.begin(),v.end());\n    for(register int i=0;i<(int)v.size();++i)\n        if(anc(v[i].x)^anc(v[i].y))\n        {\n            ans+=v[i].w;\n            link(v[i].x,v[i].y);\n        }\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1625119371,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P6168\u3010[IOI2016]railroad\u3011"
    }
]