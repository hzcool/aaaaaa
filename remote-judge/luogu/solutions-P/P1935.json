[
    {
        "content": "\u597d\u50cf\u4e0b\u9762\u7684\u9898\u89e3\u90fd\u662f\u53cc\u5411\u8fb9   \n\u6211\u662f\u865a\u62df\u70b9\u505a\u7684,\u8fd9\u6837\u611f\u89c9\u4e5f\u633a\u597d\u7406\u89e3\u7684    \n\u601d\u8def\u5176\u5b9e\u90fd\u5dee\u4e0d\u591a,\u5b9e\u73b0\u4e0a\u7565\u5fae\u6709\u70b9\u5dee\u522b  \n\u9996\u5148\u6211\u4eec\u5148\u770b[P1361 \u5c0fM\u7684\u4f5c\u7269](https://www.luogu.org/problem/P1361)  \n\u53c2\u8003\u90a3\u9053\u9898\u7684\u9898\u89e3,\u53ef\u4ee5\u62bd\u8c61\u51fa\u8fd9\u4e48\u4e00\u4e2a\u6a21\u578b\n![](https://s2.ax1x.com/2019/11/11/MQxSTU.jpg)   \n\u5177\u4f53\u7684\u89e3\u91ca\u53ef\u4ee5\u53c2\u8003\u90a3\u9053\u9898\u9898\u89e3   \n\u7136\u540e\u6211\u4eec\u56de\u5230\u8fd9\u9053\u9898,\u8fd9\u9053\u9898\u548c\u90a3\u9053\u9898\u7684\u4e0d\u540c\u4e4b\u5904\u5c31\u5728\u4e8e\u90a3\u9053\u9898\u4e24\u4e2a\u5143\u7d20\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u5c31\u4f1a\u6709\u9644\u52a0\u6743\u503c,\u800c\u8fd9\u9053\u9898\u662f\u4e24\u4e2a\u5143\u7d20\u4e0d\u5728\u540c\u4e00\u4e2a\u96c6\u5408\u624d\u4f1a\u6709\u8d1f\u4ef7\u6743\u503c,\u73b0\u5728\u5c31\u770b\u5982\u4f55\u8f6c\u6362        \n\u6211\u7528\u4e86\u4e00\u79cd\u5341\u5206\u50bb\u74dc\u7684\u65b9\u5f0f   \n\u9996\u5148\u6211\u4eec\u8003\u8651\u9ed1\u767d\u67d3\u8272    \n![](http://img3.redocn.com/20120627/Redocn_2012062709270931.jpg.thumb.jpg)   \n\u6211\u4eec\u53d1\u73b0\u767d\u8272\u4f4d\u7f6e\u7684\u9644\u52a0\u6743\u503c\u53d6\u51b3\u4e8e\u56db\u4e2a\u76f8\u90bb\u9ed1\u8272\u4f4d\u7f6e\u7684\u9009\u62e9,\u9ed1\u8272\u4ea6\u7136   \n\u8fd9\u91cc\u4e0d\u7528\u53bb\u4ea4\u6362\u6e90\u6c47\u70b9\n\u76f4\u63a5\u628a\u5176\u4e2d\u4e00\u79cd\u989c\u8272\u7684A\u548cB\u6743\u503c\u4ea4\u6362\u5c31\u884c\u4e86   \n\u8fd9\u6837\u4e24\u4e2a\u4f4d\u7f6e\u672c\u6765\u8981\u9009\u62e9\u4e0d\u4e00\u6837\u624d\u4f1a\u6709\u9644\u52a0\u6743\u503c     \n\u73b0\u5728\u53d8\u6210\u4e86\u4e24\u4e2a\u4f4d\u7f6e\u96c6\u5408\u76f8\u540c\u624d\u4f1a\u6709\u9644\u52a0\u6743\u503c   \n\u4e8e\u662f\u8fd9\u9053\u9898\u88ab\u5b8c\u7f8e\u7684\u8f6c\u5316\u6210\u4e86P1361    \n\u548c\u90a3\u9053\u9898\u505a\u6cd5\u4e00\u6a21\u4e00\u6837   \n\u5efa\u865a\u62df\u70b9,\u8dd1dinic,\u5f97\u7b54\u6848    \n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<queue>\n#define INF 252645135\n#define MAXN 1001\nusing namespace std;\nstruct side{int from,to,next,w;}edge[MAXN*MAXN];\nint cur[MAXN*MAXN],head[MAXN*MAXN],depth[MAXN*MAXN],N,M,n,s,t,len=-1;\nint A[MAXN][MAXN],B[MAXN][MAXN],C[MAXN][MAXN];\nint dx[]={0,0,1,-1},dy[]={1,-1,0,0},sum;\nvoid __add_edge(int x,int y,int d){edge[++len]=(side){x,y,head[x],d};head[x]=len;}\nvoid add_edge(int x,int y,int d)\n{\n\t__add_edge(x,y,d);\n\t__add_edge(y,x,0);\n}\nint bfs()\n{\n\tqueue<int>q;\n\tfor(int i=0;i<=n;i++)depth[i]=0,cur[i]=head[i];\n\tq.push(s);depth[s]=1;\n\twhile(q.size())\n\t{\n\t\tint now=q.front();q.pop();\n\t\tfor(int k=head[now];k!=-1;k=edge[k].next)\n\t\t\tif(edge[k].w>0&&depth[edge[k].to]==0)\n\t\t\t\tdepth[edge[k].to]=depth[now]+1,\n\t\t\t\tq.push(edge[k].to);\n\t} \n\treturn depth[t]!=0;\n}\nint dfs(int now,int flow)\n{\n\tif(now==t)return flow;\n\tfor(int&k=cur[now];k!=-1;k=edge[k].next)\n\t\tif(edge[k].w>0&&depth[edge[k].to]==depth[now]+1)\n\t\t{\n\t\t\tint minflow=dfs(edge[k].to,min(flow,edge[k].w));\n\t\t\tif(minflow>0)\n\t\t\t{\n\t\t\t\tedge[k].w-=minflow;\n\t\t\t\tedge[k^1].w+=minflow;\n\t\t\t\treturn minflow;\n\t\t\t}\n\n\t\t}\n\treturn 0;\n}\nint dinic(int ans=0)\n{\n\twhile(bfs())\n\t\twhile(int flow=dfs(s,INF))ans+=flow;\n\treturn ans;\n}\nint point(int x,int y)\n{\n\treturn (x-1)*M+y;\n}\nint main()\n{\n\tmemset(head,-1,sizeof(head));\n\tcin>>N>>M;\n\tn=N*M;\n\ts=++n;\n\tt=++n;\n\tfor(int i=1;i<=N;i++)\n\t\tfor(int j=1;j<=M;j++)\n\t\t\tcin>>A[i][j],sum+=A[i][j];\n\tfor(int i=1;i<=N;i++)\n\t\tfor(int j=1;j<=M;j++)\n\t\t\tcin>>B[i][j],sum+=B[i][j];\n\tfor(int i=1;i<=N;i++)\n\t\tfor(int j=1;j<=M;j++)\n\t\t\tcin>>C[i][j];\n\tfor(int i=1;i<=N;i++)\n\t\tfor(int j=1;j<=M;j++)\n\t\t\tif((i+j)%2==1)swap(A[i][j],B[i][j]); //\u7ffb\u8f6c \n\tfor(int i=1;i<=N;i++)\n\t\tfor(int j=1;j<=M;j++)\n\t\t{\n\t\t\tadd_edge(s,point(i,j),A[i][j]);\n\t\t\tadd_edge(point(i,j),t,B[i][j]);\n\t\t}\n\tfor(int i=1;i<=N;i++)\n\t\tfor(int j=1;j<=M;j++)\n\t\t{\n\t\t\tfor(int k=0;k<4;k++)\n\t\t\t{\n\t\t\t\tint nx=i+dx[k],ny=j+dy[k];\n\t\t\t\tif(0<nx&&nx<=N&&0<ny&&ny<=M)\n\t\t\t\t{\n\t\t\t\t\tint x=++n;\n\t\t\t\t\tint y=++n;\n\t\t\t\t\tsum+=2*C[i][j];\n\t\t\t\t\tadd_edge(s,x,C[i][j]);\n\t\t\t\t\tadd_edge(x,point(i,j),INF);\n\t\t\t\t\tadd_edge(x,point(nx,ny),INF);\n\t\t\t\t\tadd_edge(y,t,C[i][j]);\n\t\t\t\t\tadd_edge(point(i,j),y,INF);\n\t\t\t\t\tadd_edge(point(nx,ny),y,INF);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\tcout<<sum-dinic();\n}\n```\n\n\u5e0c\u671b\u5927\u5bb6\u6709\u6240\u6536\u83b7",
        "postTime": 1573475283,
        "uid": 229609,
        "name": "NewSjf",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 P1935 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u4e00\u4e2a\u5f88\u660e\u663e\u7684\u6700\u5c0f\u5272\u5efa\u56fe\uff0c\u540c\u6837\u9ed1\u767d\u67d3\u8272\u7684\u601d\u8def\u4e5f\u5f88\u6e05\u6670\u3002\u4f46\u662f\u770b\u4e86\u9898\u89e3\u4ee5\u540e\uff0c\u53d1\u73b0\u90fd\u6709\u5f88\u91cd\u8981\u7684\u4e00\u70b9\u6ca1\u6709\u8bf4\u6e05\u695a\uff1a**\u4e3a\u4ec0\u4e48\u5efa\u56fe\u65f6\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u57df\u4e0d\u9700\u8981\u62c6\u70b9**\u3002\n\n\u56e0\u6b64\u5728\u8fd9\u7bc7\u9898\u89e3\u91cc\uff0c\u6211\u60f3\u4ecb\u7ecd\uff1a\n\n1. \u4e3a\u4ec0\u4e48\u8fd9\u9898\u4e0d\u7528\u62c6\u70b9\u662f\u5bf9\u7684\u3002\n2. \u5982\u679c\u4e00\u5b9a\u8981\u62c6\u70b9\u7684\u8bdd\uff0c\u5e94\u5f53\u5982\u4f55\u5efa\u56fe\u3002\n\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e0d\u62c6\u70b9\u4f1a\u4f7f\u5f97\u6784\u9020\u7684\u8fd9\u5f20\u56fe\u5b58\u5728\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\uff0c\u5c31\u662f\u70b9\u4e4b\u95f4\u5173\u7cfb\u7684\u4f20\u9012\u6027\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5c31\u662f\u5982\u679c\u5728\u8fd9\u5f20\u56fe\u4e0a\u5b58\u5728\u4e00\u6761 $A \\to B$ \u7684\u8def\u5f84\u548c\u4e00\u6761 $B \\to C$ \u7684\u8def\u5f84\uff0c\u90a3\u4e48\u5c31\u5b58\u5728\u4e00\u6761 $A \\to C$ \u7684\u8def\u5f84\u3002\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u5982\u679c\u4f60\u60f3\u8981\u627e\u51fa\u4e00\u79cd\u5272\u4f7f\u5f97 $A, C$ \u4e24\u70b9\u4e0d\u8fde\u901a\uff0c\u90a3\u4e48\u4e00\u5b9a\u8981\u4f7f\u5f97 $A, B$ \u4e0d\u8fde\u901a\u6216 $B, C$ \u4e0d\u8054\u901a\u3002\n\n\u5728\u8bb8\u591a\u9898\u4e0a\uff0c\u7531\u4e8e\u62c6\u70b9\u4f1a\u5bf9\u8fde\u901a\u6027\u4ea7\u751f\u8fd9\u79cd\u5f71\u54cd\uff0c\u56e0\u6b64\u4e0d\u62c6\u70b9\u4f1a\u5bfc\u81f4\u7b54\u6848\u9519\u8bef\u3002\u8fd9\u662f\u4e00\u4e2a\u4f8b\u5b50\uff1a[\u300c\u725b\u5ba2\u7ec3\u4e60\u8d5b 43 E\u300dTachibana Kanade And Dream City](https://ac.nowcoder.com/acm/contest/548/E)\u3002\n\n\u7136\u800c\u5728\u8fd9\u9053\u9898\u4e0a\uff0c\u6211\u4eec\u4e0d\u62c6\u70b9\uff0c\u5229\u7528\u7684\u6070\u597d\u662f\u8fd9\u6837\u7684\u4e00\u4e2a\u4f20\u9012\u6027\u3002\n\n\u5982\u679c\u5ffd\u7565\u8fd9\u6837\u7684\u4f20\u9012\u6027\u4f1a\u6709\u4ec0\u4e48\u540e\u679c\u5462\uff1f\u4f60\u4f1a\u5f97\u5230 55 \u5206\u7684\u597d\u6210\u7ee9\u3002\u4e3a\u4ec0\u4e48\u5462\uff1f\u8fd9\u91cc\u6709\u4e00\u7ec4\u7b80\u5355\u7684\u5c0f\u6570\u636e\u3002\n\n**Input**\n\n```plain\n1 3\n1000 1 1\n1 1 1000\n1000 1 1000\n```\n\n**Answer**\n\n```plain\n3004\n```\n\n**Output**\n\n```plain\n4002\n```\n\n\u4e3a\u4ec0\u4e48\u4f1a\u6709\u8fd9\u6837\u7684\u8f93\u51fa\u5462\uff1f\u539f\u56e0\u662f\u6211\u4eec\u5ffd\u7565\u4e86\u672c\u9898\u9690\u542b\u7684\u4e00\u4e9b\u6027\u8d28\u2014\u2014\u5982\u679c $A$ \u6709\u4e00\u6761\u8fb9\u8fde\u5411 $B$\uff0c$B$ \u6709\u4e00\u6761\u8fb9\u8fde\u5411 $C$\uff0c\u90a3\u4e48 $A$ \u548c $C$ \u7684\u9009\u62e9\u5e94\u8be5\u662f\u76f8\u540c\u7684\u3002\u800c\u5728\u4e0d\u8003\u8651\u8fde\u901a\u6027\u7684\u5efa\u56fe\u4e2d\uff0c\u6700\u4f18\u7684\u65b9\u6848\u4f1a\u5c06 $S \\to B_{in}$\uff0c$B_{out} \\to T$ \u8fd9\u4e24\u6761\u5168\u90e8\u5272\u6389\uff0c\u5177\u4f53\u6765\u8bf4\u5c31\u662f $B$ \u53f7\u533a\u57df\u65e2\u4e0d\u9009\u5546\u4e1a\u533a\u4e5f\u4e0d\u9009\u5de5\u4e1a\u533a\uff0c\u800c\u8fd9\u662f\u4e0d\u5408\u9898\u610f\u7684\u3002\n\n\u8fd9\u79cd\u95ee\u9898\u6070\u6070\u53ef\u4ee5\u7528\u62c6\u70b9\u6240\u5e26\u6765\u7684\u4f20\u9012\u6027\u89e3\u51b3\uff0c\u6240\u4ee5\u4e0d\u62c6\u70b9\u662f\u5bf9\u7684\u3002\n\n---\n\n\u90a3\u5982\u679c\u4e00\u5b9a\u8981\u62c6\u70b9\u8be5\u600e\u4e48\u505a\u5462\uff1f\n\n\u6211\u4eec\u6ce8\u610f\u5230\u8fd9\u6837\u5efa\u56fe\u552f\u4e00\u7684\u95ee\u9898\u5c31\u662f\u6211\u4eec\u6709\u53ef\u80fd\u4f1a\u51fa\u73b0\u90fd\u4e0d\u9009\u7684\u4e0d\u5408\u9898\u610f\u7684\u60c5\u51b5\u3002\n\n\u90a3\u6211\u4eec\u5c31\u5efa\u4e00\u5f20\u56fe\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u5730\u533a\u90fd\u88ab\u5f3a\u5236\u9009\u3002\n\n\u5efa\u56fe\u7684\u65b9\u6cd5\u5f88\u7b80\u5355\u3002\u53c2\u8003[\u300c\u96c5\u793c\u96c6\u8bad 2017 Day8\u300d\u4ef7](https://loj.ac/problem/6045) \u7684\u601d\u8def\uff0c\u6211\u4eec\u7ed9 $S$ \u5230\u6bcf\u4e2a\u70b9\u5165\u70b9\u7684\u8fb9\u52a0\u4e0a\u4e00\u4e2a\u5927\u6570\uff0c\u540c\u6837\u4ece\u6bcf\u4e2a\u70b9\u7684\u51fa\u70b9\u5411 $T$ \u7684\u8fb9\u4e5f\u52a0\u4e0a\u4e00\u4e2a\u76f8\u540c\u7684\u5927\u6570\uff0c\u5728\u6bcf\u4e2a\u70b9\u7684\u5165\u70b9\u5230\u51fa\u70b9\u8fde $+ \\infty$ \u7684\u8fb9\u3002\u90a3\u4e48\uff0c\u6700\u7ec8\u7684\u5408\u6cd5\u65b9\u6848\u4e00\u5b9a\u4f1a\u5272\u6389\u6070\u597d $n$ \u6761\u8fd9\u6837\u7684\u8fb9\uff0c\u5c06\u6700\u5c0f\u5272\u8dd1\u51fa\u7684\u503c\u51cf\u53bb $n \\times$ \u8fd9\u4e2a\u5927\u6570\u5c31\u662f\u9700\u8981\u7684\u7b54\u6848\u4e86\u3002\n\n\u8fd9\u6837\u5efa\u51fa\u6765\u7684\u56fe\u662f\u5206\u5c42\u56fe\uff0cDinic \u7684\u6548\u7387\u5e94\u8be5\u4f1a\u975e\u5e38\u9ad8\uff0c\u7406\u8bba\u590d\u6742\u5ea6\u5927\u7ea6\u662f $\\mathcal{O}(n^2m^2)$\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u4ecd\u80fd\u901a\u8fc7\u672c\u9898\u3002\u800c\u6ca1\u6709\u62c6\u70b9\u7684\u56fe\u4e0d\u662f\u5206\u5c42\u56fe\uff0c\u7406\u8bba\u590d\u6742\u5ea6\u5c31\u53d8\u6210\u4e86 $\\mathcal{O}(n^3m^3)$\uff0c\u6548\u7387\u53ef\u80fd\u8f83\u4e3a\u4f4e\u4e0b\u2014\u2014\u8fd9\u5f88\u5927\u4e00\u90e8\u5206\u662f\u56e0\u4e3a\uff0c\u6ca1\u6709\u62c6\u70b9\u7684\u56fe\u4fdd\u7559\u4e86\u70b9\u4e4b\u95f4\u4fe1\u606f\u7684\u4f20\u9012\u6027\uff0c\u76f8\u5f53\u4e8e\u5728\u62c6\u70b9\u7684\u56fe\u4e2d\u5728\u5165\u70b9\u548c\u51fa\u70b9\u95f4\u4e24\u4e24\u8fde\u63a5\u4e86\u4e00\u6761\u8fb9\uff0c\u4e5f\u5c31\u662f\u6709 $n^2m^2$ \u6761\u8fb9\u3002\u4ece\u8fd9\u91cc\u770b\u6765\uff0c\u4e0d\u62c6\u70b9\u7684\u5efa\u56fe\u65b9\u6cd5\u5b9e\u8d28\u662f\u4e00\u79cd\u5f88\u66b4\u529b\u7684\u5efa\u56fe\u65b9\u6cd5\u3002\u4f46\u7531\u4e8e\u5b9e\u9645\u8fd0\u884c\u65f6 Dinic \u7684\u590d\u6742\u5ea6\u5f88\u96be\u8fbe\u5230\u4e0a\u754c\uff0c\u56e0\u6b64\u4e0d\u62c6\u70b9\u662f\u53ef\u4ee5\u8fc7\u7684\uff08\u4f46\u6211\u603b\u611f\u89c9\u4e0d\u62c6\u70b9\u7684\u65b9\u6cd5\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u6570\u636e\u7684\u6784\u9020\u8ba9\u5b83 T \u6389\uff09\u3002\n\n\u62c6\u70b9\u5efa\u56fe\u7684\u4ee3\u7801\uff1a\n\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n\nconst int MaxN = 100 + 5, MaxM = 100 + 5;\nconst int MaxV = 20000 + 5, MaxE = 500000 + 5;\nconst int INF = 0x7F7F7F7F;\nconst int dx[4] = {0, 0, 1, -1}, dy[4] = {1, -1, 0, 0};\n\nstruct Graph {\n  int cnte;\n  int Head[MaxV], Next[MaxE], To[MaxE], Cap[MaxE];\n\n  Graph() {\n    cnte = 1;\n  }\n\n  inline void addEdge(int from, int to, int cap) {\n    cnte++; To[cnte] = to; Cap[cnte] = cap;\n    Next[cnte] = Head[from]; Head[from] = cnte;\n  }\n\n  inline void add_edge(int from, int to, int cap) {\n    addEdge(from, to, cap);\n    addEdge(to, from, 0);\n  }\n} G;\n\nint N, M, V;\nint A[MaxN][MaxM], B[MaxN][MaxM], C[MaxN][MaxM];\n\nnamespace Dinic {\n  int level[MaxV], iter[MaxV];\n  int que[MaxV], head, tail;\n\n  void bfs(int s) {\n    memset(level, -1, sizeof level);\n    head = 1, tail = 0;\n    level[s] = 0;\n    que[++tail] = s;\n    while (head <= tail) {\n      int u = que[head++];\n      for (int i = G.Head[u]; i; i = G.Next[i]) {\n        int v = G.To[i];\n        if (G.Cap[i] > 0 && level[v] < 0) {\n          level[v] = level[u] + 1;\n          que[++tail] = v;\n        }\n      }\n    }\n  }\n\n  int dfs(int u, int t, int f) {\n    if (u == t) return f;\n    for (int &i = iter[u]; i; i = G.Next[i]) {\n      int v = G.To[i];\n      if (G.Cap[i] > 0 && level[v] > level[u]) {\n        int d = dfs(v, t, std::min(f, G.Cap[i]));\n        if (d > 0) {\n          G.Cap[i] -= d;\n          G.Cap[i ^ 1] += d;\n          return d;\n        }\n      }\n    }\n    return 0;\n  }\n\n  int max_flow(int s, int t) {\n    int flow = 0;\n    for (;;) {\n      bfs(s);\n      if (level[t] < 0) return flow;\n      for (int i = s; i <= t; ++i) iter[i] = G.Head[i];\n      for (;;) {\n        int f = dfs(s, t, INF);\n        if (f == 0) break;\n        flow += f;\n      }\n    }\n  }\n}\n\nvoid init() {\n  scanf(\"%d %d\", &N, &M); V = N * M;\n  for (int i = 1; i <= N; ++i) for (int j = 1; j <= M; ++j)\n    scanf(\"%d\", &A[i][j]);\n  for (int i = 1; i <= N; ++i) for (int j = 1; j <= M; ++j)\n    scanf(\"%d\", &B[i][j]);\n  for (int i = 1; i <= N; ++i) for (int j = 1; j <= M; ++j)\n    scanf(\"%d\", &C[i][j]);\n}\n\ninline int getid(int x, int y) {\n  return (x - 1) * M + y;\n}\n\nvoid solve() {\n  int S = 0, T = V * 2 + 1;\n  int ans = 0;\n  for (int i = 1; i <= N; ++i) for (int j = 1; j <= M; ++j) {\n    ans += A[i][j] + B[i][j] + 10000;\n    if ((i + j) % 2 != 0) {\n      G.add_edge(S, getid(i, j), A[i][j] + 10000);\n      G.add_edge(getid(i, j) + V, T, B[i][j] + 10000);\n      G.add_edge(getid(i, j), getid(i, j) + V, INF);\n\n      for (int d = 0; d < 4; ++d) {\n        int x = i + dx[d], y = j + dy[d];\n        if (x < 1 || x > N || y < 1 || y > M) continue;\n        ans += C[i][j];\n        G.add_edge(getid(i, j), getid(x, y), C[i][j] + C[x][y]);\n      }\n    } else {\n      G.add_edge(S, getid(i, j) + V, B[i][j] + 10000);\n      G.add_edge(getid(i, j), T, A[i][j] + 10000);\n      G.add_edge(getid(i, j) + V, getid(i, j), INF);\n\n      for (int d = 0; d < 4; ++d) {\n        int x = i + dx[d], y = j + dy[d];\n        if (x < 1 || x > N || y < 1 || y > M) continue;\n        ans += C[i][j];\n        G.add_edge(getid(i, j) + V, getid(x, y) + V, C[i][j] + C[x][y]);\n      }\n    }\n  }\n  printf(\"%d\\n\", ans - Dinic::max_flow(S, T));\n}\n\nint main() {\n  init();\n  solve();\n  return 0;\n}\n```",
        "postTime": 1556765398,
        "uid": 48843,
        "name": "Tweetuzki",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1935 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212\u3011"
    },
    {
        "content": "\u4e3a\u4e86\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c, \u4f60\u53ef\u4ee5\u524d\u5f80\u6211\u7684Blog\u67e5\u770b\u8fd9\u7bc7\u9898\u89e3:\n[https://www.cnblogs.com/zhylj/p/10352599.html](https://www.cnblogs.com/zhylj/p/10352599.html)\n\n### \u9898\u76ee\n\n\u6700\u8fd1\u623f\u5730\u4ea7\u5546 GDOI (Group of Dumbbells Or Idiots) \u4ece NOI (Nuts Old Idiots) \u624b\u4e2d\u5f97\u5230\u4e86\u4e00\u5757\u5f00\u53d1\u571f\u5730\u3002\n\n\u636e\u4e86\u89e3,\u8fd9\u5757\u571f\u5730\u662f\u4e00\u5757\u77e9\u5f62\u7684\u533a\u57df,\u53ef\u4ee5\u7eb5\u6a2a\u5212\u5206\u4e3a $N\\times M$ \u5757\u5c0f\u533a\u57df\u3002GDOI \u8981\u6c42\u5c06\u8fd9\u4e9b\u533a\u57df\u5206\u4e3a\u5546\u4e1a\u533a\u548c\u5de5\u4e1a\u533a\u6765\u5f00\u53d1\u3002\n\n\u6839\u636e\u4e0d\u540c\u7684\u5730\u5f62\u73af\u5883,\u6bcf\u5757\u5c0f\u533a\u57df\u5efa\u9020\u5546\u4e1a\u533a\u548c\u5de5\u4e1a\u533a\u80fd\u53d6\u5f97\u4e0d\u540c\u7684\u7ecf\u6d4e\u4ef7\u503c\u3002\u66f4\u5177\u4f53\u70b9,\u5bf9\u4e8e\u7b2c $i$ \u884c\u7b2c $j$ \u5217\u7684\u533a\u57df,\u5efa\u9020\u5546\u4e1a\u533a\u5c06\u5f97\u5230 $A_{ij}$ \u6536\u76ca,\u5efa\u9020\u5de5\u4e1a\u533a\u5c06\u5f97\u5230 $B_{ij}$ \u6536\u76ca\u3002\n\n\u53e6\u5916\uff0c\u4e0d\u540c\u7684\u533a\u57df\u8fde\u5728\u4e00\u8d77\u53ef\u4ee5\u5f97\u5230\u989d\u5916\u7684\u6536\u76ca,\u5373\u5982\u679c\u533a\u57df$(I,j)$\u76f8\u90bb(\u76f8\u90bb\u662f\u6307\u4e24\u4e2a\u683c\u5b50\u6709\u516c\u5171\u8fb9)\u6709 $K$ \u5757(\u663e\u7136 $K$ \u4e0d\u8d85\u8fc7 $4$)\u7c7b\u578b\u4e0d\u540c\u4e8e$(I,j)$\u7684\u533a\u57df,\u5219\u8fd9\u5757\u533a\u57df\u80fd\u589e\u52a0 $k\\times C_{ij}$ \u6536\u76ca\u3002\n\n\u7ecf\u8fc7 Tiger.S \u6559\u6388\u7684\u52d8\u5bdf,\u6536\u76ca\u77e9\u9635 $A,B,C$ \u90fd\u5df2\u7ecf\u77e5\u9053\u4e86\u3002\u4f60\u80fd\u5e2e GDOI \u6c42\u51fa\u4e00\u4e2a\u6536\u76ca\u6700\u5927\u7684\u65b9\u6848\u4e48?\n\n### \u5206\u6790\n\n\u7f51\u7edc\u6d41\u662f\u4e0d\u53ef\u80fd\u7f51\u7edc\u6d41\u7684, \u8fd9\u8f88\u5b50\u90fd\u4e0d\u53ef\u80fd\u7f51\u7edc\u6d41\u7684.\n\n\u6211\u53d1\u73b0\u6709 $2^{nm}$ \u79cd\u89e3, \u7136\u800c\u7b54\u6848\u8303\u56f4\u53ea\u6709 $1000nm$, \u8bf4\u660e\u6709\u5927\u91cf\u7684\u91cd\u590d\u89e3, \u90a3\u8fd8\u5199\u6b63\u89e3?\n\n\u8fd9\u9053\u9898\u6211\u7528\u6a21\u62df\u9000\u706b, \u968f\u673a\u7684\u662f\u4e00\u4e2a\u77e9\u9635\u4ee3\u8868\u6bcf\u4e2a\u5730\u65b9\u662f\u4ec0\u4e48\u533a\u57df.\n\n\u6bcf\u6b21\u968f\u673a\u4e00\u4e2a\u70b9\u505a\u4e00\u4e9b\u5fae\u5c0f\u7684\u53d8\u5316\u5c31\u53ef\u4ee5\u4e86.\n\n(\u5982\u679c\u8c03\u53c2\u8c03\u4e0d\u4e0b\u53bb\u53ef\u4ee5\u8bd5\u8bd5\u591a\u9000\u706b\u51e0\u6b21, \u8df3\u51fa\u5c40\u90e8\u6700\u4f18)\n\n\u6bd4\u5982\u6211\u662f\u8fd9\u6837\u5199\u7684:\n\n```c++\nint ans = 0;\nfor(int i = 0; i < 42; i++)\n    ans = std::max(SA(), ans);\nprintf(\"%d\", ans);\n```\n\n### \u4ee3\u7801\n\n(\u4e0d\u4fdd\u8bc1\u6bcf\u65f6\u6bcf\u523b\u4f60\u63d0\u4ea4\u8fd9\u4efd\u90fd\u80fd AC)\n\n```c++\n#include <bits/stdc++.h>\n\nconst int kMaxSize = 105, mod = 1e9 + 7;\nconst double delta = 0.994, sup = 1e17, eps = 1e-17;\n\nbool plan[kMaxSize][kMaxSize];\nint n, m, a[kMaxSize][kMaxSize], b[kMaxSize][kMaxSize], c[kMaxSize][kMaxSize];\n\nunsigned sed = time(NULL);\ninline unsigned Rand() {\n    sed = ((sed * 0x3abcd1ac + 0xabc12ab2) ^ (sed + 0x1230bace)) % mod;\n    return sed;\n}\n\nint GetIncome() {\n    int ans = 0;\n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++) {\n            if(plan[i][j]) ans += a[i][j];\n            else ans += b[i][j];\n            if(i - 1 >= 0 && plan[i - 1][j] != plan[i][j]) ans += c[i][j];\n            if(j - 1 >= 0 && plan[i][j - 1] != plan[i][j]) ans += c[i][j];\n            if(i + 1 < n && plan[i + 1][j] != plan[i][j]) ans += c[i][j];\n            if(j + 1 < m && plan[i][j + 1] != plan[i][j]) ans += c[i][j];\n        }\n    return ans;\n}\n\ninline int change(int ans, int x, int y) {\n    plan[x][y] ^= 1;\n    ans += plan[x][y] ? a[x][y] - b[x][y] : b[x][y] - a[x][y];\n    if(x - 1 >= 0) {\n        ans += plan[x - 1][y] != plan[x][y] ?\n            c[x][y] + c[x - 1][y] : -(c[x][y] + c[x - 1][y]);\n    }\n    if(y - 1 >= 0) {\n        ans += plan[x][y - 1] != plan[x][y] ?\n            c[x][y] + c[x][y - 1] : -(c[x][y] + c[x][y - 1]);\n    }\n    if(x + 1 < n) {\n        ans += plan[x + 1][y] != plan[x][y] ?\n            c[x][y] + c[x + 1][y] : -(c[x][y] + c[x + 1][y]);\n    }\n    if(y + 1 < m) {\n        ans += plan[x][y + 1] != plan[x][y] ?\n            c[x][y] + c[x][y + 1] : -(c[x][y] + c[x][y + 1]);\n    }\n    return ans;\n}\n\nint SA() {\n    register int ans, old_ans, new_ans, cnt = 0;\n    ans = old_ans = GetIncome();\n    for(register double T = sup; T > eps; T *= delta) {\n        int x = Rand() % n, y = Rand() % m;\n        new_ans = change(old_ans, x, y);\n        ans = new_ans > ans ? new_ans : ans;\n        if(new_ans > old_ans ||\n            Rand() <= exp((new_ans - old_ans) * 1.0 / T) * mod)\n            old_ans = new_ans;\n        else plan[x][y] ^= 1;\n        cnt++;\n    }\n    return ans;\n}\n\nint main() {\n    srand(time(NULL));\n    scanf(\"%d%d\", &n, &m);\n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            scanf(\"%d\", &a[i][j]);\n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            scanf(\"%d\", &b[i][j]);\n    for(int i = 0; i < n; i++)\n        for(int j = 0; j < m; j++)\n            scanf(\"%d\", &c[i][j]);\n    for(int i = 0; i < n; i++)\n    \tfor(int j = 0; j < m; j++)\n    \t\tplan[i][j] = a[i][j] > b[i][j];\n    int ans = 0;\n    for(int i = 0; i < 42; i++)\n    \tans = std::max(SA(), ans);\n    printf(\"%d\", ans);\n    return 0;\n}\n```\n\n### \u7ed3\u8bed\n\n\u4e0d\u8fc7, Luogu\u7684\u6570\u636e\u8c8c\u4f3c\u6709\u70b9\u6c34, \u8fd9\u4e2a\u4ee3\u7801\u5728\u4e00\u4e9b\u5730\u65b9\u8c8c\u4f3c\u8fc7\u4e0d\u4e86?",
        "postTime": 1549337829,
        "uid": 34238,
        "name": "zhylj",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1935 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212\u3011"
    },
    {
        "content": "\u5148\u8003\u8651\u8fd1\u4f3c\u95ee\u9898\uff0c\u5047\u8bbe\u662f\u76f8\u540c\u4f1a\u5f97\u5230\u989d\u5916\u5956\u52b1\u5462\uff1f\n\n\n\u8fd9\u5c31\u662f\u4e2a\u7b80\u5355\u7684\u6700\u5c0f\u5272\u95ee\u9898\u4e86\uff0c\u53ef\u4ee5\u5148\u53bb\u770b\u770bP1646\u3002\n\n\n\u73b0\u5728\u7684\u95ee\u9898\u662f\u4e0d\u540c\u5f97\u5230\u5956\u52b1\uff0c\u60f3\u60f3\u529e\u6cd5\u8f6c\u5316\u6210\u76f8\u540c\u7684\u5c31\u597d\u4e86\u3002\n\n\n\u6ce8\u610f\u5230\u56db\u8054\u901a\uff0c\u90a3\u4e48\u9ed1\u767d\u70b9\u67d3\u8272\uff0c\u4ea4\u6362\u6389\u4e00\u79cd\u70b9\u7684A\u3001B\uff0c\u6b64\u65f6\u4e0d\u540c\u5c31\u53d8\u6210\u76f8\u540c\u4e86\uff0c\u95ee\u9898\u5c31\u4e0eP1646\u76f8\u4f3c\u4e86\uff08\u8f6c\u6362\u540e\u672c\u9898\u66f4\u52a0\u7b80\u5355\uff09\n\n\n\u4ee3\u7801\n\n\n\n```cpp\n#define inf (1<<30)\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#define M 100010\n#define N 10010\n#include<queue>\nusing namespace std;\nint head[N],to[M],Next[M],cup[M],e=1;\nvoid buid(int u,int v,int c)\n{\n    Next[++e]=head[u];head[u]=e;to[e]=v;cup[e]=c;\n    Next[++e]=head[v];head[v]=e;to[e]=u;cup[e]=0;\n}\nint s,t,n,m,ans;\nint id(int x,int y)\n{\n    return x*m-m+y;\n}\nint use[N],itc[N];\nint dx[4]={-1,0,1,0};\nint dy[4]={0,1,0,-1};\nint c[105][105];\nqueue<int> q;\n\nbool bfs()\n{\n    memset(itc,0,sizeof(itc));\n    itc[s]=1;q.push(s);\n    while(!q.empty())\n    {\n        int now=q.front();q.pop();\n        for(int i=head[now];i;i=Next[i])\n        {\n            if(!cup[i]) continue;\n            int j=to[i];\n            if(!itc[j]) itc[j]=itc[now]+1,q.push(j);\n        }\n    }\n    return itc[t];\n}\nint doit(int now,int want)\n{\n    if(now==t||!want) return want;\n    int get=0;\n    for(int i=use[now];i;i=Next[i],use[now]=i)\n    {\n        int j=to[i];\n        if(itc[j]!=itc[now]+1) continue;\n        int f=doit(j,min(want,cup[i]));\n        cup[i]-=f;cup[i^1]+=f;\n        get+=f;want-=f;\n        if(!want) return get;\n    }\n    return get;\n}\nvoid max_flow()\n{\n    while(bfs())\n    {\n        for(int i=s;i<=t;++i) use[i]=head[i];\n        ans-=doit(s,inf);\n    }\n    printf(\"%d\\n\",ans);\n}\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    t=id(n,m)+1;\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=m;++j)\n    {\n        int it;scanf(\"%d\",&it);ans+=it;\n        if((i+j)&1) buid(id(i,j),t,it);\n        else buid(s,id(i,j),it);\n    }\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=m;++j)\n    {\n        int it;scanf(\"%d\",&it);ans+=it;\n        if((i+j)&1) buid(s,id(i,j),it);\n        else buid(id(i,j),t,it);\n    }\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=m;++j) scanf(\"%d\",&c[i][j]);\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=m;++j)\n    {\n        if((i+j)&1) continue;\n        for(int k=0;k<4;++k)\n        {\n            int x=i+dx[k];\n            int y=j+dy[k];\n            if(x<1||x>n||y<1||y>m) continue;\n            \n            buid(id(i,j),id(x,y),c[i][j]+c[x][y]);\n            buid(id(x,y),id(i,j),c[i][j]+c[x][y]);\n            ans+=c[i][j]+c[x][y];\n        }\n    }\n    max_flow();\n    return 0;\n}\n```",
        "postTime": 1517231116,
        "uid": 35718,
        "name": "MloVtry",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1935 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212\u3011"
    },
    {
        "content": "UPD\uff1a\u628a\u6807\u9898\u884c\u5220\u4e86\uff0c\u671b\u7ba1\u7406\u5458\u91cd\u65b0\u5ba1\u6838\u3002\n\n\u8fd9\u7bc7\u9898\u89e3\u4e3b\u8981\u662f\u5bf9\u5efa\u6a21\u7684\u8be6\u7ec6\u8bf4\u660e\uff08\uff1f\n\n\u4f17\u6240\u5468\u77e5\uff0c\u6700\u5c0f\u5272\u6c42\u7684\u662f\u6700\u5c0f\u503c\uff0c\u6240\u4ee5\u6211\u4eec\u80af\u5b9a\u8981\u8f6c\u5316\u4e3a\u7406\u8bba\u6700\u5927\u503c-\u5b9e\u9645\u6700\u5c0f\u503c\uff0c\u5148\u8003\u8651\u4e00\u4e2a naive \u7684\u6a21\u578b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lessm4jp.png)\n\n\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u7406\u60f3\u72b6\u6001\u4e0b $(i,j)$ \u7684\u8d21\u732e\u5e94\u8be5\u662f $a_{i,j}+b_{i,j}$\uff0c\u5f88\u4e0d\u5e78\uff0c$(i,j)$ \u53ea\u80fd\u53d6\u4e00\u79cd\u72b6\u6001\uff0c\u4e5f\u5c31\u662f\u5b9e\u9645\u4e0a\u5b83\u7684\u8d21\u732e\u662f $a_{i,j}+b_{i,j}-\\min(a_{i,j},b_{i,j})$\u3002\n\n\u8fd9\u4e2a\u65f6\u5019\u660e\u773c\u4eba\u5df2\u7ecf\u80fd\u770b\u51fa\u6700\u5c0f\u5272\u4e86\uff0c\u56de\u60f3\u4e00\u4e0b\u6700\u5c0f\u5272\u89e3\u51b3\u4ec0\u4e48\u95ee\u9898\uff1f\u96c6\u5408\u5212\u5206\u7684\u95ee\u9898\uff0c\u5efa\u4e00\u4e2a\u6d41\u7f51\u7edc\uff0c$s$ \u4e3a\u6e90\u70b9\uff0c$t$ \u4e3a\u6c47\u70b9\uff0c\u6bcf\u4e2a\u8282\u70b9 $(i,j)$ \u8fde\u5411 $s$\uff0c$t$\uff0c\u5bb9\u91cf\u5206\u522b\u4e3a $a_{i,j},b_{i,j}$ \uff0c\u4e00\u4e2a $s-t$ \u5272\u7684\u5b9e\u9645\u610f\u4e49\u5c31\u662f\u4e0e $s$ \u5728\u540c\u4e00\u5b50\u96c6\u7684\u8282\u70b9 $(i,j)$ \u53d6 $a_{i,j}$\uff0c\u4e0e $t$ \u5728\u540c\u4e00\u5b50\u96c6\u7684\u8282\u70b9 $(i,j)$ \u53d6 $b_{i,j}$\u3002\u6700\u5c0f\u5272\u5272\u6389\u7684\u8fb9\uff0c\u5b9e\u9645\u4e0a\u5c31\u662f\u6bcf\u4e2a\u8282\u70b9\u820d\u5f03\u7684\u72b6\u6001\uff08\u820d\u5f03\u6700\u5c0f\uff0c\u7b54\u6848\u5c31\u6700\u5927\uff09\u3002\n\n\u56de\u5230\u8fd9\u4e2a\u95ee\u9898\uff0c\u770b\u5230\u7f51\u683c\u56fe\u8003\u8651\u9ed1\u767d\u67d3\u8272\uff0c\u5bf9\u4e8e\u9ed1\u70b9\u5c31\u6309\u4e0a\u8ff0\u65b9\u5f0f\u5efa\u6a21\uff0c\u5bf9\u4e8e\u767d\u70b9\u5c31\u7ffb\u8f6c\u4e00\u4e0b\u6e90\u70b9\u548c\u6c47\u70b9\u5c31\u597d\u3002\n\n\u4f46\u662f\uff0c\u73b0\u5728\u6211\u4eec\u8fd8\u662f\u4ec0\u4e48\u90fd\u6ca1\u505a\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6a21\u578b P \u7528\u6ca1\u6709\u3002\u771f\u6b63\u8ba9\u8fd9\u4e2a\u6a21\u578b\u6709\u7528\u7684\u5c31\u662f $c_{i,j}$ \u7684\u9650\u5236\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9ed1\u70b9\uff0c\u7531\u4e8e\u6211\u4eec\u7684\u67d3\u8272\u89c4\u5219\uff0c\u5fc5\u7136\u5b83\u56db\u4e2a\u76f8\u90bb\u7684\u70b9\u662f\u767d\u70b9\uff0c\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u9ed1\u70b9\u8ba1\u7b97\u8d21\u732e\uff0c\u663e\u7136\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u62c6\u5f00\u8ba1\u7b97\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/fgkd1f23.png)\n\n\u56fe\u5f88\u4e11\uff0c\u89c1\u8c05\u3002\n\n\u4e8e\u662f\u4e4e\uff0c\u4e00\u4e2a\u9ed1\u70b9\u548c\u56db\u4e2a\u767d\u70b9\u7406\u8bba\u6700\u5927\u8d21\u732e\u5c31\u662f\uff1a\n\n$\\sum c_{i,j}+c_{i+dx,i+dy}(dx\\in[-1,1],dy\\in[-1,1] )$\n\n\u663e\u7136\u7406\u8bba\u4e0a\u9650\u663e\u7136\u8fbe\u4e0d\u5230\uff0c\u4e8e\u662f\u6211\u4eec\u628a\u521a\u521a\u7684\u6a21\u578b\u4ece\u5783\u573e\u6876\u6361\u56de\u6765\uff08\u6ce8\u610f\uff0c\u8fd9\u91cc\u662f\u53ea\u6709\u4e24\u4e2a\u70b9\u7684\u7b80\u5355\u60c5\u51b5\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jronrdg1.png)\n\n\u6ce8\u610f\u770b\u4e2d\u95f4\u662f\u53cc\u5411\u8fb9\u3002\n\n\u95ee\u9898\u89e3\u51b3\u4e86\uff01\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u6839\u636e\u9898\u76ee\u5b9a\u4e49\u53ea\u6709\u5f53\u4e24\u4e2a\u76f8\u90bb\u7684\u70b9\u6240\u53d6\u72b6\u6001\u4e0d\u540c\u624d\u4f1a\u4ea7\u751f $c$ \u7684\u8d21\u732e\uff0c\u6b64\u65f6\u4e5f\u5c31\u662f\u8fd9\u4e24\u4e2a\u70b9\u5f52\u5c5e\u4e8e\u540c\u4e00\u96c6\u5408\uff08\u56e0\u4e3a\u4e0d\u540c\u989c\u8272\u7684\u6c47\u70b9\u6e90\u70b9\u6b63\u597d\u76f8\u53cd\uff09\uff0c\u4e0d\u7528\u5220\u53bb $c_{i1,j1}+c_{i2,j2}$ \u8fd9\u6761\u8fb9\uff0c\u800c\u5982\u679c\u4e24\u4e2a\u70b9\u72b6\u6001\u76f8\u540c\uff0c\u5b83\u4eec\u4f1a\u5f52\u5c5e\u4e8e\u4e0d\u540c\u96c6\u5408\uff0c\u8fd9\u6837\u7684\u60c5\u51b5\u4e0b\u7531\u4e8e\u4e24\u8005\u8054\u901a\uff0c$s,t$ \u5fc5\u7136\u8054\u901a\uff0c\u4e0d\u7b26\u5408\u6d41\u7f51\u7edc\u4e2d\u5272\u7684\u5b9a\u4e49\uff0c\u5c31\u4e00\u5b9a\u4f1a\u5220\u9664 $c_{i1,j1}+c_{i2,j2}$ \u8fd9\u6761\u8fb9\uff0c\u4e5f\u7b26\u5408\u9898\u610f\uff0c\u6240\u4ee5\u8dd1\u4e2a\u6700\u5927\u6d41\u6c42\u6700\u5c0f\u5272\u5c31\u597d\u4e86\u3002",
        "postTime": 1627007503,
        "uid": 282751,
        "name": "cryozwq",
        "ccfLevel": 7,
        "title": "[\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212"
    },
    {
        "content": "\u8fd9\u9053\u9898\u8bf4\u96be\u4e5f\u4e0d\u96be\u5427\u3002    \n\n\u8bb2\u4e2a\u7b11\u8bdd\uff0c\u521a\u5f00\u59cb\u5efa\u56fe\u7684\u65f6\u5019\u601d\u8def\u662f\u5bf9\u7684\uff0c\u7ed3\u679c\u56fe\u753b\u9519\u4e86\u53c8\u53bb\u63a8\u4e86\u4e00\u4e9b\u5176\u4ed6\u7684\u56fe\u6d6a\u8d39\u4e86\u4e00\u4e2a\u5c0f\u65f6\u2026\u2026     \n\n\u9996\u5148\u5bf9\u4e8e\u8fd9\u79cd\u77e9\u9635\u91cc\u9762\u6709\u5173\u7cfb\u7ed1\u5b9a\u5e76\u4e14\u662f\u6c42\u6700\u5927/\u6700\u5c0f\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u7f51\u7edc\u6d41\u4e2d\u7684\u6700\u5c0f\u5272\u3002     \n\n\u800c\u6211\u4eec\u4ed4\u7ec6\u89c2\u5bdf\u53c8\u53d1\u73b0\uff0c\u8fd9\u4e2a\u56fe\u7684\u5173\u7cfb\u7ed1\u5b9a\u5f62\u5f0f\u4e5f\u5f88\u7279\u6b8a\uff0c\u5373\u4e00\u4e2a\u683c\u5b50\u53ea\u4e0e\u4e0a\u4e0b\u5de6\u53f3\u683c\u5b50\u6709\u5173\u3002    \n\n\u5bf9\u4e8e\u8fd9\u79cd\u56fe\u7684\u5206\u6cd5\u6709\u4e2a\u7ed3\u8bba\uff1a\u6a2a\u7eb5\u5750\u6807\u4e4b\u548c\u4e3a\u5947\u6570\u7684\u70b9\u7ad9\u6210\u4e00\u7c7b\uff0c\u5076\u6570\u7684\u70b9\u7ad9\u6210\u53e6\u4e00\u7c7b\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\u7ad9\u6210\u4e00\u7c7b\u7684\u70b9\u90fd\u4e0d\u662f\u4e92\u76f8\u7684\u4e0a\u4e0b\u5de6\u53f3\u683c\u5b50\uff0c\u6240\u6709\u4e92\u76f8\u4e4b\u95f4\u6ca1\u6709\u5173\u7cfb\uff0c\u8fd9\u6837\u5904\u7406\u540e\u505a\u8d77\u6765\u5c31\u65b9\u4fbf\u591a\u4e86\u3002     \n\n\u5148\u7b80\u5316\u6761\u4ef6\uff0c\u53ea\u60f3\u7b2c\u4e00\u4e2a\u6761\u4ef6\u3002\u8003\u8651\u73b0\u5728\u53ea\u80fd\u9009\u62e9 $A$ \u533a\u548c $B$ \u533a\u4e2d\u7684\u4e00\u4e2a\uff0c\u90a3\u4e48$S$ \u5411\u6bcf\u4e2a\u7b2c\u4e00\u7c7b\u70b9\u8fde $A$ \u533a\u7684\u6536\u5165\uff0c\u6bcf\u4e2a\u7b2c\u4e00\u7c7b\u70b9\u5411 $T$ \u8fde $B$ \u533a\u7684\u6536\u5165\uff0c\u7b2c\u4e8c\u7c7b\u70b9\u53cd\u7740\u64cd\u4f5c\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u5272\u5176\u4e2d\u4e00\u6761\u8fb9\u5c31\u53ef\u4ee5\u51b3\u5b9a\u5b83\u662f $A$ \u533a\u8fd8\u662f $B$ \u533a\u3002    \n\n\u63a5\u7740\u6211\u4eec\u8981\u52a0\u6761\u4ef6\uff0c\u4e5f\u5c31\u662f $C$ \u8be5\u600e\u4e48\u529e\uff0c\u90a3\u4e48\u6211\u4eec\u60f3\uff0c\u5982\u679c\u6b64\u65f6\u6b64\u523b\u540c\u65f6\u5728\u4e00\u4e2a\u533a\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u820d\u6389\u6211\u4eec\u4e2d\u95f4\u7684 $C$ \u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u76f4\u63a5\u5728\u4e24\u4e2a\u76f8\u90bb\u7684\u683c\u5b50\u4e2d\u95f4\u8fde $C$ \u8fb9\u5373\u53ef\u3002\u56e0\u4e3a\u6b64\u65f6\u4f60\u9009\u5728\u4e00\u4e2a\u533a\uff0c\u90a3\u4e48\u5b83\u4eec\u80af\u5b9a\u662f\u8d70\u5230\u4e0d\u540c\u7684\u70b9\u96c6\u53bb\uff0c\u6240\u4ee5\u5c31\u9700\u8981\u628a\u4e2d\u95f4\u7684\u8fb9\u6254\u6389\u624d\u884c\u3002\u5176\u5b9e\u5c31\u662f\u628a\u6211\u4eec\u7684\u903b\u8f91\u8f6c\u5316\u6210\u4e86\u56fe\u3002     \n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\n#include<queue>\nusing namespace std;\nconst int Len = 100 * 100 * 5 + 10,Inf = 1e9;\nint n,m,dep[Len],S,T,cur[Len],a[105][105],head[Len],cnt = 1,ans,sum;\nstruct node\n{\n\tint next,to,w;\n}edge[Len << 1];\nvoid add(int from,int to,int w)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].w = w;\n\tedge[cnt].next = head[from];\n\thead[from] = cnt;\n}\nint BFS()\n{\n\tqueue<int> q;\n\tmemset(dep , 0 , sizeof dep);\n\tq.push(S);dep[S] = 1;cur[S] = head[S];\n\twhile(!q.empty())\n\t{\n\t\tint p = q.front() ; q.pop();\n\t\tfor(int e = head[p] ; e ; e = edge[e].next)\n\t\t{\n\t\t\tint to = edge[e].to;\n\t\t\tif(!dep[to] && edge[e].w)\n\t\t\t{\n\t\t\t\tdep[to] = dep[p] + 1;\n\t\t\t\tcur[to] = head[to];\n\t\t\t\tif(to == T) return dep[T];\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\nint dfs(int u,int In)\n{\n\tif(u == T) return In;\n\tint Out = 0;\n\tfor(int e = cur[u] ; e && In > 0 ; e = edge[e].next)\n\t{\n\t\tcur[u] = e;\n\t\tint to = edge[e].to;\n\t\tif(edge[e].w && dep[to] == dep[u] + 1)\n\t\t{\n\t\t\tint res = dfs(to , min(In , edge[e].w));\n\t\t\tIn -= res;\n\t\t\tOut += res;\n\t\t\tedge[e].w -= res;\n\t\t\tedge[e ^ 1].w += res;\n\t\t}\n\t}\n\treturn (!Out) ? dep[u] = 0 : Out;\n}\nint Clone(int x,int y){return (x - 1) * m + y;}\nint dx[8] = {0 , -1 , 0 , 0 , 1};\nint dy[8] = {0 , 0 , -1 , 1 , 0};\nbool judge(int x,int y){if(x < 1 || x > n || y < 1 || y > m) return false;return true;}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tS = 0 , T = n * m + 1;\n\tfor(int i = 1 ; i <= n ; i ++)\n\t\tfor(int j = 1 ; j <= m ; j ++) scanf(\"%d\",&a[i][j]);\n\tfor(int i = 1 ; i <= n ; i ++)\n\t\tfor(int j = 1 ; j <= m ; j ++)\n\t\t{\n\t\t\tif(a[i][j] == 1) add(S , Clone(i , j) , Inf) , add(Clone(i , j) , S , 0);\n\t\t\telse if(a[i][j] == 2) add(Clone(i , j) , T , Inf) , add(T , Clone(i , j) , 0);\n\t\t\tfor(int k = 1 ; k <= 4 ; k ++)\n\t\t\t{\n\t\t\t\tint tx = i + dx[k] , ty = j + dy[k];\n\t\t\t\tif(!judge(tx , ty)) continue;\n\t\t\t\tadd(Clone(i , j) , Clone(tx , ty) , 1) , add(Clone(tx ,  ty) , Clone(i , j) , 1);\n\t\t\t}\n\t\t}\n\twhile(BFS()) ans += dfs(S , Inf);\n\tprintf(\"%d\\n\",ans / 2);\n\treturn 0;\n}\n```",
        "postTime": 1609168689,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1935 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212\u3011"
    },
    {
        "content": "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**\u5206\u6790\u4e0e\u8bb2\u89e3\uff1a**\u5bf9\u4e8e\u6574\u4e2a\u56fe\u6211\u4eec\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff0c\u5bf9\u4e8e\u9ed1\u8272\u7684\u70b9\uff0c\u6211\u4eec\u628a\u5176\u548c$S$\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u70b9\u5f00\u53d1\u6210\u4e3a\u5546\u4e1a\u533a\u7684\u6536\u76ca\uff0c\u548c$T$\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u70b9\u5f00\u53d1\u6210\u4e3a\u5de5\u4e1a\u533a\u7684\u6536\u76ca\uff0c\u53cd\u4e4b\u6211\u4eec\u548c$S$\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u70b9\u5f00\u53d1\u6210\u4e3a\u5de5\u4e1a\u533a\u7684\u6536\u76ca\uff0c\u548c$T$\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u70b9\u5f00\u53d1\u6210\u4e3a\u5546\u4e1a\u533a\u7684\u6536\u76ca\u3002\u56e0\u4e3a\u6211\u4eec\u5c06\u5176\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\u4e4b\u540e\u7ffb\u8f6c\u6e90\u6c47\uff0c\u6240\u4ee5\u4e24\u4e2a\u76f8\u90bb\u7684\u571f\u5730\u82e5\u5f00\u53d1\u6210\u4e3a\u4e0d\u540c\u7684\u7c7b\u578b\u4f1a\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5728\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fdb\u884c\u8fde\u7ebf\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u70b9\u5982\u679c\u4e0d\u540c\u4f1a\u5206\u522b\u8d21\u732e\u4e24\u4e2a\u503c\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9\u4e3a\u53cc\u5411\u8fb9\uff0c\u8fb9\u6743\u4e3a\u8fd9\u4e24\u4e2a\u503c\u76f8\u52a0\u3002\n\n```c++\n// luogu-judger-enable-o2\n#include <queue>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n#define N 200\n#define inf 1000000000\nint n,m,k,s,t,dis[N*N<<1],ans,c[N][N];\nint cur[N*N<<1],head[N*N<<1],to[N*N<<5],nxt[N*N<<5],val[N*N<<5],idx=1;\nvoid add(int a,int b,int c)\n    {nxt[++idx]=head[a],to[idx]=b,val[idx]=c,head[a]=idx;}\nbool bfs()\n{\n    memset(dis,-1,sizeof dis);\n    queue <int> q;q.push(s),dis[s]=0;\n    while(!q.empty())\n    {\n        int p=q.front();q.pop();\n        if(p==t) return true;\n        for(int i=head[p];i;i=nxt[i])\n            if(val[i]>0&&dis[to[i]]==-1)\n                dis[to[i]]=dis[p]+1,q.push(to[i]);\n    } return false;\n}\nint dfs(int p,int flow)\n{\n    int now,temp=flow;\n    if(p==t) return flow;\n    for(int i=cur[p];i;i=nxt[i])\n        if(val[i]>0&&dis[to[i]]==dis[p]+1)\n        {\n            now=dfs(to[i],min(val[i],temp));\n            if(!now) dis[to[i]]=-1;\n            temp-=now,val[i]-=now,val[i^1]+=now;\n            if(val[i]) cur[p]=i;\n            if(!temp) break;\n        } return flow-temp;\n}\nvoid dinic() {while(bfs()) memcpy(cur,head,sizeof head),ans-=dfs(s,inf);}\nint pla(int i,int j) {return (i-1)*m+j;}\nint main()\n{\n    scanf(\"%d%d\",&n,&m),s=n*m+1,t=n*m+2;\n    for(int i=1;i<=n;i++) for(int j=1,a;j<=m;j++)\n    {\n        scanf(\"%d\",&a),ans+=a;\n        if((i+j)%2) add(s,pla(i,j),a),add(pla(i,j),s,0);\n        else add(pla(i,j),t,a),add(t,pla(i,j),0);\n    }\n    for(int i=1;i<=n;i++) for(int j=1,a;j<=m;j++)\n    {\n        scanf(\"%d\",&a),ans+=a;\n        if((i+j)%2) add(pla(i,j),t,a),add(t,pla(i,j),0);\n        else add(s,pla(i,j),a),add(pla(i,j),s,0);\n    }\n    for(int i=1;i<=n;i++) for(int j=1;j<=m;j++) scanf(\"%d\",&c[i][j]);\n    for(int i=1;i<=n;i++) for(int j=1;j<m;j++) ans+=c[i][j]+c[i][j+1],\n        add(pla(i,j),pla(i,j+1),c[i][j]+c[i][j+1]),\n        add(pla(i,j+1),pla(i,j),c[i][j]+c[i][j+1]);\n    for(int i=1;i<n;i++) for(int j=1;j<=m;j++) ans+=c[i][j]+c[i+1][j],\n        add(pla(i,j),pla(i+1,j),c[i][j]+c[i+1][j]),\n        add(pla(i+1,j),pla(i,j),c[i][j]+c[i+1][j]);\n    dinic(),printf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1545619535,
        "uid": 52851,
        "name": "ysy20021208",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1935 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212\u3011"
    },
    {
        "content": "\u5148\u8003\u8651\u5bf9\u56fe\u9ed1\u767d\u67d3\u8272\uff0c\u5e76\u4e14\u8bbe $S$ \u548c $T$ \u5206\u522b\u4e3a\u6e90\u70b9\u548c\u6c47\u70b9\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u56db\u8054\u901a\u7684\u4e24\u4e2a\u70b9\uff0c\u80af\u5b9a\u662f\u4e00\u4e2a\u9ed1\u4e00\u4e2a\u767d\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6240\u6709\u9ed1\u70b9 $(i,j)$\uff0c\u6211\u4eec\u4ee4 $u=(i-1) \\times m + j$\uff0c\u4ece $S$ \u5230 $u$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $a_{i,j}$ \u7684\u8fb9\uff0c\u4ece $u$ \u5230 $T$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $b_{i,j}$ \u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u767d\u70b9\uff0c\u6211\u4eec\u4ece $S$ \u5230 $u$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $b_{i,j}$ \u7684\u8fb9\uff0c\u4ece $u$ \u5230 $T$ \u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $a_{i,j}$ \u7684\u8fb9\u3002\n\n\u8fd9\u6837\uff0c\u5728\u6700\u5c0f\u5272\u4e2d\uff0c\u5272\u53bb\u4e00\u6761\u8fb9\uff0c\u76f8\u5f53\u4e8e\u9009\u62e9\u4e86 $u$ \u7684\u7c7b\u578b\u3002\n\n\u63a5\u7740\u8003\u8651\u5982\u4f55\u5904\u7406\u56db\u8054\u901a\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u70b9 $u,v$\uff0c\u5176\u4e2d $u,v$ \u56db\u8054\u901a\uff0c\u4e0d\u59a8\u5047\u8bbe $u$ \u662f\u9ed1\u70b9\uff0c\u5982\u679c $u$ \u9009\u4e86\u5546\u4e1a\u533a\uff0c\u90a3\u4e48\u76f8\u5f53\u4e8e\u9009\u4e86 $S \\rightarrow u$ \u7684\u8fb9\uff0c\u5982\u679c $v$ \u4e5f\u662f\u5546\u4e1a\u533a\uff0c\u90a3\u4e48\u5c31\u662f $u \\rightarrow T$ \u7684\u8fb9\uff0c\u6211\u4eec\u52a0\u4e00\u6761 $u \\rightarrow v$ \u7684\u8fb9\uff0c\u6743\u503c\u4e3a $c_u + c_v$\uff0c\u90a3\u4e48\u5982\u679c $u$ \u548c $v$ \u7c7b\u578b\u76f8\u540c\uff0c\u8fd9\u6761\u8fb9\u5c31\u8981\u5272\u6389\uff0c\u53cd\u4e4b\uff0c\u4e0d\u540c\uff0c\u8fd9\u6761\u8fb9\u5c31\u53ef\u4ee5\u4fdd\u7559\u3002\n\n\u63a5\u7740\u6c42\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <algorithm>\n#include <cmath>\n#include <cstring>\n#include <string>\n#include <queue>\n#include <climits>\nusing namespace std;\n\n#define int long long\n\nconst int N = 2e6 + 5, M = 105;\n\nint e[N], h[N], ne[N], c[N], idx;\nint n, m, a[M][M], b[M][M], C[M][M];\n\n#define get(i, j) (((i) - 1) * m + (j))\nint S, T;\n\nvoid add(int u, int v, int w)\n{\n\te[idx] = v, ne[idx] = h[u], c[idx] = w, h[u] = idx++;\n}\n\nvoid add_flow(int u, int v, int w)\n{\n\tadd(u, v, w);\n\tadd(v, u, 0LL);\n}\n\nint dx[] = { 0, 0, -1, 1 };\nint dy[] = { -1, 1, 0, 0 };\n\nint d[N], cur[N];\n\nbool bfs()\n{\n\tqueue<int> q;\n\tfor (int i = 0; i <= T; i++) d[i] = -1;\n\tq.push(S);\n\td[S] = 0;\n\tcur[S] = h[S];\n\twhile (q.size())\n\t{\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tfor (int i = h[u]; ~i; i = ne[i])\n\t\t{\n\t\t\tint j = e[i];\n\t\t\tif (c[i] > 0 && d[j] == -1)\n\t\t\t{\n\t\t\t\td[j] = d[u] + 1;\n\t\t\t\tcur[j] = h[j];\n\t\t\t\tif (j == T) return 1;\n\t\t\t\tq.push(j);\n\t\t\t}\n\t\t}\n\t}\n\treturn 0;\n}\n\nint dfs(int u, int lim)\n{\n\tif (u == T) return lim;\n\tint sum = 0LL;\n\tfor (int i = cur[u]; ~i && sum < lim; i = ne[i])\n\t{\n\t\tcur[u] = i;\n\t\tint j = e[i];\n\t\tif (d[j] == d[u] + 1 && c[i] > 0)\n\t\t{\n\t\t\tint k = dfs(j, min(c[i], lim - sum));\n\t\t\tif (k == 0LL) d[j] = -1;\n\t\t\telse\n\t\t\t{\n\t\t\t\tsum += k;\n\t\t\t\tc[i] -= k;\n\t\t\t\tc[i ^ 1LL] += k;\n\t\t\t}\n\t\t}\n\t}\n\treturn sum;\n}\n\nint dinic()\n{\n\tint ans = 0;\n\twhile (bfs())\n\t{\n\t\tint k;\n\t\twhile (k = dfs(S, INT_MAX)) ans += k;\n\t}\n\treturn ans;\n}\n\nsigned main()\n{\n\tlong long ans = 0LL;\n\tmemset(h, -1, sizeof h);\n\tscanf(\"%lld%lld\", &n, &m);\n\tS = 0LL, T = n * m + 1LL;\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tfor (int j = 1; j <= m; j++)\n\t\t{\n\t\t\tscanf(\"%lld\", &a[i][j]);\n\t\t\tans += a[i][j];\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tfor (int j = 1; j <= m; j++)\n\t\t{\n\t\t\tscanf(\"%lld\", &b[i][j]);\n\t\t\tans += b[i][j];\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tfor (int j = 1; j <= m; j++)\n\t\t{\n\t\t\tscanf(\"%lld\", &C[i][j]);\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tfor (int j = 1; j <= m; j++)\n\t\t{\n\t\t\tint p = get(i, j);\n\t\t\tif ((i + j) & 1LL)\n\t\t\t{\n\t\t\t\tadd_flow(S, p, a[i][j]);\n\t\t\t\tadd_flow(p, T, b[i][j]);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tadd_flow(S, p, b[i][j]);\n\t\t\t\tadd_flow(p, T, a[i][j]);\n\t\t\t}\n\t\t}\n\t}\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tfor (int j = 1; j <= m; j++)\n\t\t{\n\t\t\tint u = get(i, j);\n\t\t\tfor (int k = 0; k < 4; k++)\n\t\t\t{\n\t\t\t\tint nx = i + dx[k], ny = j + dy[k];\n\t\t\t\tif (nx >= 1 && nx <= n && ny >= 1 && ny <= m)\n\t\t\t\t{\n\t\t\t\t\tans += C[i][j];\n\t\t\t\t\tint v = get(nx, ny);\n\t\t\t\t\tadd_flow(u, v, C[i][j] + C[nx][ny]);\n\t\t\t\t\t//add_flow(v, u, C[i][j] + C[nx][ny]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprintf(\"%lld\\n\", ans - dinic());\n\treturn 0;\n}\n```\n",
        "postTime": 1681990680,
        "uid": 332914,
        "name": "happybob",
        "ccfLevel": 6,
        "title": "P1935 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212"
    },
    {
        "content": "\u8fd8\u662f\u90a3\u4e2a\u7ecf\u5178trick\uff1a\u6700\u5927\u4ef7\u503c=\u603b\u4ef7\u503c-\u6700\u5c0f\u82b1\u8d39\n\n\u6bcf\u4e2a\u4f4d\u7f6e\u90fd\u662f\u4e8c\u9009\u4e00\uff0c\u8003\u8651\u4e00\u4e2a\u9c7c\u523a\u578b\u5efa\u56fe\u3002\n\n\u7136\u540e\u5c31\u662f\u9700\u8981\u63cf\u8ff0\u4e00\u4e2a\uff0c\u5982\u679c $x$ \u9009\u4e86\u7b2c $p$ \u79cd\u65b9\u6848\uff0c\u90a3\u4e48\u5982\u679c\u5b83\u7684\u90bb\u70b9\u4e5f\u9009\u4e86\u7b2c $p$ \u79cd\u65b9\u6848\uff0c\u5c31\u6709 $-C$ \u7684\u4ee3\u4ef7\uff0c\u4e5f\u5c31\u662f\u6709\u4e00\u6761 $-C$ \u6d41\u91cf\u7684\u8fb9\u9700\u8981\u5272\u6389\u3002\n\n\u4f46\u662f\u5982\u679c\u76f4\u63a5 $S$ \u8fde\u5411\u6bcf\u4e2a\u683c\u5b50\u7684\u8fb9\u6d41\u91cf\u4e3a $A$\uff0c\u6bcf\u4e2a\u683c\u5b50\u6d41\u5411 $T$ \u7684\u683c\u5b50\u6d41\u91cf\u4e3a $B$\uff0c\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u9650\u5236\u63cf\u8ff0\u4e0d\u4e86\u3002\n\n\u6ce8\u610f\u5230\u7f51\u683c\u56fe\u56db\u8054\u901a\u5b9e\u9645\u4e0a\u662f\u4e2a\u4e8c\u5206\u56fe\uff0c\u6309\u7167\u683c\u5b50\u7684\u6a2a\u7eb5\u5750\u6807\u548c\u7684\u5947\u5076\u6027\u5206\u7c7b\u5c31\u662f\u4e2a\u4e8c\u5206\u56fe\u3002\n\n\u90a3\u4e48\u5c06\u6a2a\u7eb5\u5750\u6807\u548c\u4e3a\u5076\u6570\u7684\u683c\u5b50\uff0c\u8fde\u8fb9\u53d8\u6210 $(S,x,B),(x,T,A)$\uff0c\u7136\u540e\u9650\u5236\u7684\u8bdd\u76f4\u63a5\u5728\u90bb\u70b9\u4e4b\u95f4\u8fde $(x,y,C_x+C_y),(y,x,C_x+C_y)$ \u6d41\u91cf\u7684\u8fb9\uff0c\u8fd9\u6837\u5982\u679c $x$ \u548c\u5176\u90bb\u70b9 $y$ \u5982\u679c\u9009\u62e9\u4e86\u540c\u6837\u7684\u4e00\u79cd\u65b9\u6848\uff0c\u90a3\u4e48\u5c31\u9700\u8981\u4ed8\u51fa $C_x+C_y$ \u7684\u4ee3\u4ef7\u3002\n\n\u8fd9\u6837\u7528\u603b\u4ef7\u503c\u51cf\u53bb\u6700\u5c0f\u5272\u5c31\u53ef\u4ee5\u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#define pb emplace_back\n#define mp std::make_pair\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\ntypedef std::pair<int, int> pii;\ntypedef std::vector<int> vi;\nconst ll mod = 998244353;\nll Add(ll x, ll y) { return (x+y>=mod) ? (x+y-mod) : (x+y); }\nll Mul(ll x, ll y) { return x * y % mod; }\nll Mod(ll x) { return x < 0 ? (x + mod) : (x >= mod ? (x-mod) : x); }\nll cadd(ll &x, ll y) { return x = (x+y>=mod) ? (x+y-mod) : (x+y); }\nll cmul(ll &x, ll y) { return x = x * y % mod; }\ntemplate <typename T> T Max(T x, T y) { return x > y ? x : y; }\ntemplate<typename T, typename... T2> T Max(T x, T2 ...y) { return Max(x, y...); }\ntemplate <typename T> T Min(T x, T y) { return x < y ? x : y; }\ntemplate<typename T, typename... T2> T Min(T x, T2 ...y) { return Min(x, y...); }\ntemplate <typename T> T cmax(T &x, T y) { return x = x > y ? x : y; }\ntemplate <typename T> T cmin(T &x, T y) { return x = x < y ? x : y; }\ntemplate <typename T>\nT &read(T &r) {\n\tr = 0; bool w = 0; char ch = getchar();\n\twhile(ch < '0' || ch > '9') w = ch == '-' ? 1 : 0, ch = getchar();\n\twhile(ch >= '0' && ch <= '9') r = r * 10 + (ch ^ 48), ch = getchar();\n\treturn r = w ? -r : r;\n}\ntemplate<typename T1, typename... T2>\nvoid read(T1 &x, T2& ...y) { read(x); read(y...); }\nconst int N = 5010;\nconst int M = 10010;\nconst ll INF = 0x7fffffffffffffff;\nint n, m, A[110][110], B[110][110], C[110][110], p[110][110];\nint tot, S, T, ent = 1, head[N], cur[N], dis[N];\nstruct Edge {\n\tint to, nxt;\n\tll fl;\n}e[M << 1];\ninline void add(int x, int y, int z) {\n\te[++ent].to = y; e[ent].fl = z; e[ent].nxt = head[x]; head[x] = ent;\n\te[++ent].to = x; e[ent].fl = 0; e[ent].nxt = head[y]; head[y] = ent;\n}\nbool bfs() {\n\tfor(int i = 1; i <= tot; ++i) dis[i] = -1, cur[i] = head[i];\n\tstd::queue<int>q;\n\tq.push(S); dis[S] = 0;\n\twhile(!q.empty()) {\n\t\tint x = q.front(); q.pop();\n\t\tfor(int i = head[x]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif(dis[v] == -1 && e[i].fl) {\n\t\t\t\tdis[v] = dis[x] + 1;\n\t\t\t\tq.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T] != -1;\n}\nll dfs(int x, ll lim) {\n\tif(x == T) return lim;\n\tll flow = 0;\n\tfor(int i = cur[x]; i && flow < lim; i = e[i].nxt) {\n\t\tint v = e[i].to; cur[x] = i;\n\t\tif(dis[v] == dis[x] + 1 && e[i].fl) {\n\t\t\tll f = dfs(v, Min(e[i].fl, lim - flow));\n\t\t\tflow += f; e[i].fl -= f; e[i^1].fl += f;\n\t\t}\n\t}\n\treturn flow;\n}\nll dinic() {\n\tll mxfl = 0;\n\twhile(bfs())\n\t\tmxfl += dfs(S, INF);\n\treturn mxfl;\n}\nsigned main() {\n\tread(n, m); S = ++tot; T = ++tot;\n\tfor(int i = 1; i <= n; ++i)\n\t\tfor(int j = 1; j <= m; ++j)\n\t\t\tp[i][j] = ++tot;\n\tfor(int i = 1; i <= n; ++i)\n\t\tfor(int j = 1; j <= m; ++j)\n\t\t\tread(A[i][j]);\n\tfor(int i = 1; i <= n; ++i)\n\t\tfor(int j = 1; j <= m; ++j)\n\t\t\tread(B[i][j]);\n\tfor(int i = 1; i <= n; ++i)\n\t\tfor(int j = 1; j <= m; ++j)\n\t\t\tread(C[i][j]);\n\tll sum = 0;\n\tfor(int i = 1; i <= n; ++i)\n\t\tfor(int j = 1; j <= m; ++j) {\n\t\t\tif((i + j) & 1) {\n\t\t\t\tadd(S, p[i][j], A[i][j]);\n\t\t\t\tadd(p[i][j], T, B[i][j]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tadd(S, p[i][j], B[i][j]);\n\t\t\t\tadd(p[i][j], T, A[i][j]);\n\t\t\t}\n\t\t\tsum += A[i][j] + B[i][j];\n\t\t\tif(p[i-1][j]) {\n\t\t\t\tadd(p[i-1][j], p[i][j], C[i][j] + C[i-1][j]);\n\t\t\t\tsum += C[i][j]; \n\t\t\t}\n\t\t\tif(p[i+1][j]) {\n\t\t\t\tadd(p[i+1][j], p[i][j], C[i][j] + C[i+1][j]);\n\t\t\t\tsum += C[i][j];\n\t\t\t}\n\t\t\tif(p[i][j-1]) {\n\t\t\t\tadd(p[i][j-1], p[i][j], C[i][j] + C[i][j-1]);\n\t\t\t\tsum += C[i][j]; \n\t\t\t}\n\t\t\tif(p[i][j+1]) {\n\t\t\t\tadd(p[i][j+1], p[i][j], C[i][j] + C[i][j+1]);\n\t\t\t\tsum += C[i][j]; \n\t\t\t}\n\t\t}\n\tprintf(\"%lld\\n\", sum - dinic());\n\treturn 0;\n}\n```",
        "postTime": 1642428922,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u300c\u9898\u89e3\u300d\u6d1b\u8c37 P1935 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212"
    },
    {
        "content": "## P1935 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212\n\n[My blog](https://www.cnblogs.com/linghuabaobao/p/15733494.html)\n\n### \u9898\u76ee\u63cf\u8ff0\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P1935)\n\n\u6700\u8fd1\u623f\u5730\u4ea7\u5546 GDOI(Group of Dumbbells Or Idiots) \u4ece NOI(Nuts Old Idiots) \u624b\u4e2d\u5f97\u5230\u4e86\u4e00\u5757\u5f00\u53d1\u571f\u5730\u3002\u636e\u4e86\u89e3\uff0c\u8fd9\u5757\u571f\u5730\u662f\u4e00\u5757\u77e9\u5f62\u7684\u533a\u57df\uff0c\u53ef\u4ee5\u7eb5\u6a2a\u5212\u5206\u4e3a $N\\times M$ \u5757\u5c0f\u533a\u57df\u3002GDOI \u8981\u6c42\u5c06\u8fd9\u4e9b\u533a\u57df\u5206\u4e3a\u5546\u4e1a\u533a\u548c\u5de5\u4e1a\u533a\u6765\u5f00\u53d1\u3002\u6839\u636e\u4e0d\u540c\u7684\u5730\u5f62\u73af\u5883\uff0c\u6bcf\u5757\u5c0f\u533a\u57df\u5efa\u9020\u5546\u4e1a\u533a\u548c\u5de5\u4e1a\u533a\u80fd\u53d6\u5f97\u4e0d\u540c\u7684\u7ecf\u6d4e\u4ef7\u503c\u3002\u66f4\u5177\u4f53\u70b9\uff0c\u5bf9\u4e8e\u7b2c $i$ \u884c\u7b2c $j$ \u5217\u7684\u533a\u57df\uff0c\u5efa\u9020\u5546\u4e1a\u533a\u5c06\u5f97\u5230 $A_{i,j}$ \u6536\u76ca\uff0c\u5efa\u9020\u5de5\u4e1a\u533a\u5c06\u5f97\u5230 $B_{i,j}$ \u6536\u76ca\u3002\u53e6\u5916\u4e0d\u540c\u7684\u533a\u57df\u8fde\u5728\u4e00\u8d77\u53ef\u4ee5\u5f97\u5230\u989d\u5916\u7684\u6536\u76ca\uff0c\u5373\u5982\u679c\u533a\u57df $(i,j)$ \u76f8\u90bb\uff08\u76f8\u90bb\u662f\u6307\u4e24\u4e2a\u683c\u5b50\u6709\u516c\u5171\u8fb9\uff09\u6709 $k$ \u5757\uff08\u663e\u7136 $k$ \u4e0d\u8d85\u8fc7 $4$\uff09\u7c7b\u578b\u4e0d\u540c\u4e8e $(i,j)$ \u7684\u533a\u57df\uff0c\u5219\u8fd9\u5757\u533a\u57df\u80fd\u589e\u52a0 $k\\times C_{i,j}$ \u6536\u76ca\u3002\u7ecf\u8fc7 Tiger.S \u6559\u6388\u7684\u52d8\u5bdf\uff0c\u6536\u76ca\u77e9\u9635 $A,B,C$ \u90fd\u5df2\u7ecf\u77e5\u9053\u4e86\u3002\u4f60\u80fd\u5e2e GDOI \u6c42\u51fa\u4e00\u4e2a\u6536\u76ca\u6700\u5927\u7684\u65b9\u6848\u4e48\uff1f\n\n\u6570\u636e\u8303\u56f4\uff1a$N,M \\le 100$\u3002\n\n### \u89e3\u6cd5\uff1a\n\n\u8fd9\u662f\u4e00\u9053\u975e\u5e38\u7ecf\u5178\u7684\u6700\u5c0f\u5272\u7684\u9898\u76ee\uff0c\u975e\u5e38\u7c7b\u4f3c\u4e8e [luoguP1361 \u5c0fM\u7684\u4f5c\u7269](https://www.luogu.com.cn/problem/P1361) \u8fd9\u9053\u9898\u3002\n\n\u9996\u5148\u8fd9\u4e2a\u9898\u76ee\u7684\u6536\u76ca\u5206\u6210\u4e24\u90e8\u5206\uff0c\u4e00\u90e8\u5206\u662f\u5efa\u9020\u7684\u6536\u76ca\uff0c\u4e00\u90e8\u5206\u662f\u76f8\u90bb\u533a\u57df\u7684\u6536\u76ca\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u90e8\u5206\u7684\u6536\u76ca\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u533a\u57df\u5f53\u6210\u4e00\u4e2a\u8282\u70b9\uff0c\u6e90\u70b9\u8fde\u5411\u8fd9\u4e2a\u70b9\u7684\u8fb9\u7684\u5bb9\u91cf\u5c31\u662f\u9020\u5546\u4e1a\u533a\u7684\u6536\u76ca\uff0c\u8fd9\u4e2a\u70b9\u7684\u5bb9\u91cf\u8fde\u5411\u6c47\u70b9\u7684\u8fb9\u7684\u5bb9\u91cf\u5c31\u662f\u9020\u5de5\u4e1a\u533a\u7684\u6536\u76ca\uff08\u6216\u8005\u53cd\u8fc7\u6765\u4e5f\u884c\uff09\u3002\u5728\u6700\u5c0f\u5272\u4e2d\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u8981\u5bf9\u8fd9\u4e2a\u70b9\u5411\u6e90\u70b9\u548c\u6c47\u70b9\u8fde\u7684\u4e24\u6761\u8fb9\u8981\u5272\u6389\u4e00\u6761\uff0c\u5272\u6389\u7684\u90a3\u6761\u5c31\u662f\u4e0d\u9009\u7684\uff0c\u7559\u4e0b\u7684\u5c31\u662f\u8981\u9009\u62e9\u7684\u533a\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u90e8\u5206\u7684\u6536\u76ca\uff0c\u6211\u4eec\u53d1\u73b0\u5728\u5c0fM\u7684\u4f5c\u7269\u90a3\u9053\u9898\u4e2d\uff0c\u6211\u4eec\u77e5\u9053\u5982\u4f55\u6c42\u51e0\u4e2a\u7ed3\u70b9\u5982\u679c\u88ab\u540c\u65f6\u5206\u5230\u6e90\u70b9\u6216\u8005\u6c47\u70b9\u4f1a\u6709\u989d\u5916\u6536\u76ca\uff0c\u4f46\u662f\u8fd9\u9053\u9898\u662f\u8981\u6c42\u4e2a\u8282\u70b9\u88ab\u5206\u5230\u4e0d\u540c\u7684\u7c7b\u522b\u4f1a\u6709\u7279\u6b8a\u6536\u76ca\u3002\u5bf9\u4e8e\u8fd9\u79cd\u95ee\u9898\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u7684\u624b\u6bb5\uff0c\u5c06\u5206\u5230\u4e0d\u540c\u7684\u7c7b\u522b\u8f6c\u6362\u6210\u5206\u5230\u76f8\u540c\u7684\u7c7b\u522b\uff0c\u8fd9\u79cd\u624b\u6bb5\u5c31\u662f\u9ed1\u767d\u67d3\u8272\u3002\n\n\u9ed1\u767d\u67d3\u8272\uff0c\u5c31\u662f\u6307\u5c06\u4efb\u610f\u4e24\u4e2a\u76f8\u90bb\u7684\u533a\u95f4\u67d3\u6210\u4e0d\u540c\u7684\u989c\u8272\uff0c\u7136\u540e\u5bf9\u6240\u6709\u76f8\u540c\u7684\u989c\u8272\u662f\u540c\u4e00\u79cd\u5904\u7406\u65b9\u5f0f\u3002\n\n\u7528\u5230\u6b64\u9898\u4e0a\u5c31\u662f\u6bcf\u4e2a\u533a\u57df\u548c\u5468\u56f4\u56db\u4e2a\u533a\u57df\u662f\u5f02\u8272\uff0c\u7136\u540e\u5c06\u6240\u6709\u9ed1\u8272\u7684\u533a\u57df\u6240\u8fde\u7684\u6c47\u70b9\u548c\u6e90\u70b9\u7684\u8fb9\u7684\u5bb9\u91cf\u53cd\u8fc7\u6765\uff0c\u767d\u8272\u4fdd\u6301\u4e0d\u52a8\u3002\u8fd9\u6837\uff0c\u5982\u679c\u8bf4\u8981\u4f7f\u67d0\u4e24\u4e2a\u76f8\u90bb\u7684\u533a\u57df\u662f\u9009\u62e9\u4e0d\u540c\u7684\u7c7b\u522b\uff0c\u90a3\u4e48\u4ed6\u4eec\u53ea\u8981\u540c\u65f6\u9009\u6c47\u70b9\u6216\u540c\u65f6\u9009\u6e90\u70b9\u5c31\u884c\u4e86\u3002\u800c\u4e14\u8fd9\u79cd\u65b9\u6cd5\u5e76\u4e0d\u4f1a\u5bf9\u7b2c\u4e00\u7c7b\u7684\u6536\u76ca\u4ea7\u751f\u5f71\u54cd\uff0c\u56e0\u4e3a\u7b2c\u4e00\u7c7b\u7684\u6536\u76ca\u4efb\u610f\u4e24\u4e2a\u533a\u57df\u4e4b\u95f4\u76f8\u4e92\u72ec\u7acb\u3002\n\n\u6700\u540e\u8dd1\u6700\u5c0f\u5272\u5c31\u884c\u4e86\u3002\n\n### Code\uff1a\n\n```cpp\n#include <iostream>\n#include <cstring>\n#include <queue>\nusing namespace std ;\n\n#define int long long\nconst int N = 200005 , INF = 0x3f3f3f3f3f3f3f3f ;\nconst int dx[] = { 0 , 1 , 0 , -1 } , dy[] = { 1 , 0 , -1 , 0 } ;\nint n , m , s , t , ans , dis[N] , wv[105][105] ;\n\nstruct Edge\n{\n\tint nxt , to , len ;\n} edge[N*20] ;\n\nint cnt = 1 , head[N] ;\nvoid insert ( int u , int v , int w )\n{\n\tedge [ ++ cnt ] .nxt = head [ u ] ;\n\tedge [ cnt ] .to = v ;\n\tedge [ cnt ] .len = w ;\n\thead [ u ] = cnt ;\n\tans += w ;\n}\n\nqueue < int > q ;\nbool bfs ( )\n{\n\tmemset ( dis , 0 , sizeof ( dis ) ) ;\n\tdis [ s ] = 1 ;\n\tq .push ( s ) ;\n\twhile ( ! q .empty ( ) )\n\t{\n\t\tint x = q .front ( ) ; q .pop ( ) ;\n\t\tfor ( int i = head [ x ] ; i ; i = edge [ i ] .nxt )\n\t\t{\n\t\t\tint y = edge [ i ] .to ;\n\t\t\tif ( dis [ y ] || ! edge [ i ] .len )\n\t\t\t\tcontinue ;\n\t\t\tdis [ y ] = dis [ x ] + 1 ;\n\t\t\tq .push ( y ) ;\n\t\t}\n\t}\n\treturn dis [ t ] ;\n}\n\nint dfs ( int x , int now )\n{\n\tif ( x == t )\n\t\treturn now ;\n\tint res = now ;\n\tfor ( int i = head [ x ] ; i && res ; i = edge [ i ] .nxt )\n\t{\n\t\tint y = edge [ i ] .to ;\n\t\tif ( dis [ y ] != dis [ x ] + 1 || ! edge [ i ] .len )\n\t\t\tcontinue ;\n\t\tint w = dfs ( y , min ( res , edge [ i ] .len ) ) ;\n\t\tif ( ! w ) dis [ y ] = -1 ;\n\t\tedge [ i ] .len -= w ;\n\t\tedge [ i ^ 1 ] .len += w ;\n\t\tres -= w ;\n\t}\n\treturn now - res ;\n}\n\nint id ( int x , int y )\n{\n\treturn ( x - 1 ) * m + y ;\n}\n\nsigned main ( )\n{\n\tcin >> n >> m ;\n\ts = n * m + 1 ;\n\tt = s + 1 ;\n\tfor ( int i = 1 ; i <= n ; ++ i )\n\t\tfor ( int j = 1 ; j <= m ; ++ j )\n\t\t{\n\t\t\tint x ;\n\t\t\tcin >> x ;\n\t\t\tif ( ( i + j ) & 1 )\n\t\t\t\tinsert ( s , id ( i , j ) , x ) ,\n\t\t\t\tinsert ( id ( i , j ) , s , 0 ) ;\n\t\t\telse\n\t\t\t\tinsert ( id ( i , j ) , t , x ) ,\n\t\t\t\tinsert ( t , id ( i , j ) , 0 ) ;\n\t\t}\n\tfor ( int i = 1 ; i <= n ; ++ i )\n\t\tfor ( int j = 1 ; j <= m ; ++ j )\n\t\t{\n\t\t\tint x ;\n\t\t\tcin >> x ;\n\t\t\tif ( ( i + j ) & 1 )\n\t\t\t\tinsert ( id ( i , j ) , t , x ) ,\n\t\t\t\tinsert ( t , id ( i , j ) , 0 ) ;\n\t\t\telse\n\t\t\t\tinsert ( s , id ( i , j ) , x ) ,\n\t\t\t\tinsert ( id ( i , j ) , s , 0 ) ;\n\t\t}\n\tfor ( int i = 1 ; i <= n ; ++ i )\n\t\tfor ( int j = 1 ; j <= m ; ++ j )\n\t\t\tcin >> wv [ i ] [ j ] ;\n\tfor ( int i = 1 ; i <= n ; ++ i )\n\t\tfor ( int j = 1 ; j <= m ; ++ j )\n\t\t\tfor ( int c = 0 ; c < 2 ; ++ c )\n\t\t\t{\n\t\t\t\tint ii = i + dx [ c ] , jj = j + dy [ c ] ;\n\t\t\t\tif ( ii < 1 || jj < 1 || ii > n || jj > m )\n\t\t\t\t\tcontinue ;\n\t\t\t\tinsert ( id ( i , j ) , id ( ii , jj ) , wv [ i ] [ j ] + wv [ ii ] [ jj ] ) ;\n\t\t\t\tinsert ( id ( ii , jj ) , id ( i , j ) , wv [ i ] [ j ] + wv [ ii ] [ jj ] ) ;\n\t\t\t\tans -= wv [ i ] [ j ] + wv [ ii ] [ jj ] ;\n\t\t\t}\n\tint tmp = 0 ;\n\twhile ( bfs ( ) )\n\t\twhile ( tmp = dfs ( s , INF ) )\n\t\t\tans -= tmp ;\n\tcout << ans << '\\n' ;\n\treturn 0 ;\n}\n```\n\n",
        "postTime": 1640662797,
        "uid": 68882,
        "name": "\u7075\u534e",
        "ccfLevel": 6,
        "title": "P1935 \u5708\u5730\u8ba1\u5212"
    },
    {
        "content": "\u4e00\u79cd\u62c6\u70b9\u505a\u6cd5\u3002\n\n\u5982\u679c\u6211\u4eec\u6309\u7167\u6b63\u5e38\u62c6\u70b9+\u6700\u5c0f\u5272\u7684\u505a\u6cd5\u6765\u5efa\u56fe\uff0c$S$ \u5411\u6bcf\u4e2a\u70b9\u8fde\u8fb9\uff0c\u6bcf\u4e2a\u70b9\u5411 $T$ \u8fde\u8fb9\uff0c\u76f8\u90bb\u7684\u70b9\u76f4\u63a5\u8fde\u8fb9\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\u5982\u679c\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u989c\u8272\u4e0d\u540c\u624d\u4f1a\u5272\u8fb9\u3002\n\n\u6211\u4eec\u53d1\u73b0\u95ee\u9898\u7684\u672c\u8d28\u662f\u989c\u8272\u4e0d\u540c\u4f1a\u8fde\u5411\u4e0d\u540c\u7684\u70b9\uff08\u6e90\u70b9/\u6c47\u70b9\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u9ed1\u767d\u67d3\u8272\uff0c\u5bf9\u4e8e\u9ed1\u8272\u7684\u70b9\u4ece $S$ \u5411\u5b83\u8fde\u8fb9\u6743\u4e3a $a[i][j]$ \u7684\u8fb9\uff0c\u5b83\u5411 $T$ \u8fde \u8fb9\u6743\u4e3a $b[i][j]$ \u7684\u8fb9\uff0c\u800c\u767d\u8272\u7684\u70b9\u4ece $S$ \u5411\u5b83\u8fde\u8fb9\u6743\u4e3a $b[i][j]$ \u7684\u8fb9\uff0c\u5b83\u5411 $T$ \u8fde \u8fb9\u6743\u4e3a $a[i][j]$ \u7684\u8fb9\uff0c\u4e5f\u5c31\u662f\u4e0b\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/15liyeak.png)\n\n\u8fd9\u662f\u6211\u4eec\u53d1\u73b0\u76f8\u90bb\u7684\u70b9\u989c\u8272\u4e0d\u540c\u4f1a\u8fde\u5411\u540c\u4e00\u4e2a\u70b9\u4e86\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5728\u4ee3\u8868 $a[i][j]$ \u7684\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff0c\u4ee3\u8868 $b[i][j]$ \u7684\u70b9\u4e4b\u95f4\u8fde\u8fb9\uff0c\u8fd9\u6837\u5982\u679c\u5b83\u4eec\u989c\u8272\u76f8\u540c\u8fd9\u6761\u8fb9\u5c31\u4f1a\u88ab\u5272\u6389\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/gntiwx2e.png)\n\n(\u4e00\u4e2a\u70b9\u8981\u548c\u6240\u6709\u76f8\u90bb\u7684\u70b9\u8fde\u8fd9\u6837\u7684\u8fb9\uff0c\u4e0a\u56fe\u53ea\u662f\u5176\u4e2d\u4e00\u5bf9\u7684\u8bf4\u660e\uff09\n\n\u8fd8\u6709\u4e00\u4e9b\u7ec6\u8282\u9700\u8981\u5904\u7406\uff0c\u56e0\u4e3a\u6211\u4eec\u4e0d\u80fd\u540c\u65f6\u628a\u4ee3\u8868 $a,b$ \u7684\u8fb9\u90fd\u5272\u6389\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u7ed9\u5b83\u4eec\u52a0\u4e0a\u4e00\u4e2a\u504f\u79fb\u91cf\uff08\u6bd4 $inf$ \u5c0f\u5f88\u591a\uff09\u3002\n\ncode:\n\n```cpp\n#include <bits/stdc++.h>\n#define inf 100000000000000000ll\n#define sinf 200000000ll\n#define N 1000000\n#define int long long\nusing namespace std;\nint s, t, n, m, cnt = 1, ans;\nint head[N], nxt[N], to[N], len[N];\nvoid add(int a, int b, int l, bool _rev = false) {\n  ans += l;\n  nxt[++cnt] = head[a];\n  to[cnt] = b;\n  len[cnt] = l;\n  head[a] = cnt;\n  if (!_rev) add(b, a, 0, true);\n}\nint a[101][101], b[101][101], c[101][101];\n#define id(x, y, z) ((x - 1) * m + y + z * n * m)\nint cur[N], dep[N];\nbool bfs() {\n  for (int i = 0; i < N; i++) cur[i] = head[i], dep[i] = inf;\n  dep[s] = 0;\n  queue<int> q;\n  q.push(s);\n  bool flag = 0;\n  while (!q.empty()) {\n    int now = q.front();\n    flag |= (now == t);\n    q.pop();\n    for (int i = head[now]; i; i = nxt[i]) {\n      if (len[i] && dep[to[i]] == inf) {\n        dep[to[i]] = dep[now] + 1;\n        q.push(to[i]);\n      }\n    }\n  }\n  return flag;\n}\nint dfs(int now, int flow) {\n  if (now == t) return flow;\n  int use = 0;\n  for (int i = cur[now]; i && flow; i = nxt[i]) {\n    cur[now] = i;\n    if (len[i] && dep[to[i]] == dep[now] + 1) {\n      int v = dfs(to[i], min(flow, len[i]));\n      if (!v) dep[to[i]] = inf;\n      len[i] -= v;\n      len[i ^ 1] += v;\n      flow -= v;\n      use += v;\n    }\n  }\n  return use;\n}\nint dinic() {\n  int flow = 0;\n  while (bfs()) flow += dfs(s, inf);\n  return flow;\n}\nsigned main() {\n  cin >> n >> m;\n  s = 0;\n  t = n * m * 2 + 1;\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++) {\n      add(id(i, j, 0), id(i, j, 1), inf);\n      cin >> a[i][j];\n      if ((i + j) % 2) {\n        add(s, id(i, j, 0), a[i][j] + sinf);\n      } else {\n        add(id(i, j, 1), t, a[i][j] + sinf);\n      }\n    }\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++) {\n      cin >> b[i][j];\n      if ((i + j) % 2) {\n        add(id(i, j, 1), t, b[i][j] + sinf);\n      } else {\n        add(s, id(i, j, 0), b[i][j] + sinf);\n      }\n    }\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++) {\n      cin >> c[i][j];\n    }\n  int pre = ans;\n  for (int i = 1; i <= n; i++)\n    for (int j = 1; j <= m; j++) {\n      if (i != 1) {\n        add(id(i, j, 0), id(i - 1, j, 1), c[i][j] + c[i - 1][j]);\n      }\n      if (i != n) {\n        add(id(i, j, 0), id(i + 1, j, 1), c[i][j] + c[i + 1][j]);\n      }\n      if (j != 1) {\n        add(id(i, j, 0), id(i, j - 1, 1), c[i][j] + c[i][j - 1]);\n      }\n      if (j != m) {\n        add(id(i, j, 0), id(i, j + 1, 1), c[i][j] + c[i][j + 1]);\n      }\n    }\n  ans -= (ans - pre) / 2;\n  int val = dinic();\n  cout << ans - val - (sinf + inf) * n * m << endl;\n  return 0;\n}\n```",
        "postTime": 1614158206,
        "uid": 350415,
        "name": "swiftqwq",
        "ccfLevel": 0,
        "title": "[\u9898\u89e3]\u5708\u5730\u8ba1\u5212"
    },
    {
        "content": "\u548c[\\[\u56fd\u5bb6\u96c6\u8bad\u961f]happiness](https://www.luogu.com.cn/problemnew/show/P1646)\u6709\u70b9\u50cf\n\n\u800c\u4e14\u5efa\u56fe\u66f4\u52a0\u7b80\u5316\u4e86\n\n\u7b54\u6848\u4e3a\u603b\u548c\u51cf\u53bb\u6700\u5c0f\u5272\n\n$(i+j)\\&1,(i',j')$\u4e0e$(i,j)$\u76f8\u90bb\uff0c\u9ed1\u767d\u67d3\u8272\u5efa\u56fe\n\n$st\\xrightarrow{A} (i,j)\\xrightarrow{B}ed$\n\n$st\\xrightarrow{B} (i',j')\\xrightarrow{A}ed$\n\n$(i,j) \\xleftrightarrow{c_{i,j}+c_{i',j'}} (i',j')$\n\n\u56fe\u7247\u8bf7\u5230[\u6211\u7684\u9898\u89e3](https://zt.zcmimi.top/LG%201935%20[%E5%9B%BD%E5%AE%B6%E9%9B%86%E8%AE%AD%E9%98%9F]%E5%9C%88%E5%9C%B0%E8%AE%A1%E5%88%92/index.html)\u67e5\u770b\n\n\u5047\u8bbe$(i,j)$\u9009\u62e9$A$,\u90a3\u4e48\u8981\u65ad\u5f00$(i,j)\\rightarrow t,(i,j)\\rightarrow (i',j')$\n\n\u8fd9\u4e9b\u8fb9\u4e0a\u7684\u6743\u503c\u4f1a\u4ece\u7b54\u6848\u4e2d\u51cf\u53bb\n\n\u6700\u5c0f\u5272\u53ef\u4ee5\u6700\u5c0f\u5316\u8981\u51cf\u53bb\u7684\u6743\u503c\uff0c\u6240\u4ee5\u7b54\u6848\u6700\u5927\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=100011,M=1000011;\nint n,m,cnt=1,head[N],st,ed,d[N],q[N],c[101][101];\nstruct edge{\n    int to,nxt,w;\n}e[M];\n#define fl(i,x) for(int i=head[x],to;to=e[i].to,i;i=e[i].nxt)\nvoid add(int x,int y,int w){\n    e[++cnt].to=y;e[cnt].nxt=head[x];head[x]=cnt;e[cnt].w=w;\n    e[++cnt].to=x;e[cnt].nxt=head[y];head[y]=cnt;e[cnt].w=0;\n}\nbool bfs(){\n    int h=0,t=1,x;\n    memset(d,0,sizeof d);\n    q[0]=st;d[st]=1;\n    while(h<t){\n        x=q[h++];if(x==ed)return 1;\n        fl(i,x)if(e[i].w&&!d[to])\n            d[to]=d[x]+1,q[t++]=to;\n    }\n    return 0;\n}\nint dfs(int x,int mf){\n    if(x==ed)return mf;\n    int us=0,w;\n    fl(i,x)if(e[i].w&&d[to]==d[x]+1){\n        w=dfs(to,min(mf-us,e[i].w));\n        e[i].w-=w;\n        us+=w;\n        e[i^1].w+=w;\n        if(us==mf)return mf;\n    }\n    if(!us)d[x]=-1;\n    return us;\n}\nint id(int x,int y){return (x-1)*m+y;}\nint main(){\n    scanf(\"%d%d\",&n,&m);\n    st=N-1,ed=N-2;\n    int ans=0,w,tt=n*m,dx[4]={0,1,0,-1},dy[4]={1,0,-1,0},x,y;\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=m;++j){\n        scanf(\"%d\",&w),ans+=w;\n        if((i+j)&1)add(st,id(i,j),w);\n        else add(id(i,j),ed,w);\n    }\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=m;++j){\n        scanf(\"%d\",&w),ans+=w;\n        if((i+j)&1)add(id(i,j),ed,w);\n        else add(st,id(i,j),w);\n    }\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=m;++j)\n        scanf(\"%d\",&c[i][j]);\n    for(int i=1;i<=n;++i)\n    for(int j=1;j<=m;++j)\n    if(!((i+j)&1))\n    for(int t=0;t<=3;++t){\n        x=i+dx[t],y=j+dy[t];\n        if(x<1||x>n||y<1||y>m)continue;\n        ans+=(w=c[i][j]+c[x][y]);\n        add(id(i,j),id(x,y),w);\n        add(id(x,y),id(i,j),w);\n    }\n    while(bfs())ans-=dfs(st,1<<30);\n    printf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1579352938,
        "uid": 36532,
        "name": "localhost",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1935 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212\u3011"
    },
    {
        "content": "p1935\u50cf\u9ed1\u767d\u68cb\u76d8\u4e00\u6837\uff0c\u4e8e\u6574\u4e2a\u56fe\u6211\u4eec\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff0c\u5bf9\u4e8e\u9ed1\u8272\u7684\u70b9\uff0c\u6211\u4eec\u628a\u5176\u548cSS\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u70b9\u5f00\u53d1\u6210\u4e3a\u5546\u4e1a\u533a\u7684\u6536\u76ca\uff0c\u548cTT\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u70b9\u5f00\u53d1\u6210\u4e3a\u5de5\u4e1a\u533a\u7684\u6536\u76ca\uff0c\u53cd\u4e4b\u6211\u4eec\u548cSS\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u70b9\u5f00\u53d1\u6210\u4e3a\u5de5\u4e1a\u533a\u7684\u6536\u76ca\uff0c\u548cTT\u76f8\u8fde\uff0c\u8fb9\u6743\u4e3a\u5f53\u524d\u70b9\u5f00\u53d1\u6210\u4e3a\u5546\u4e1a\u533a\u7684\u6536\u76ca\u3002\u56e0\u4e3a\u6211\u4eec\u5c06\u5176\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\u4e4b\u540e\u7ffb\u8f6c\u6e90\u6c47\uff0c\u6240\u4ee5\u4e24\u4e2a\u76f8\u90bb\u7684\u571f\u5730\u82e5\u5f00\u53d1\u6210\u4e3a\u4e0d\u540c\u7684\u7c7b\u578b\u4f1a\u5728\u540c\u4e00\u4e2a\u96c6\u5408\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u80fd\u5728\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fdb\u884c\u8fde\u7ebf\uff0c\u56e0\u4e3a\u8fd9\u4e24\u4e2a\u70b9\u5982\u679c\u4e0d\u540c\u4f1a\u5206\u522b\u8d21\u732e\u4e24\u4e2a\u503c\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u8fb9\u4e3a\u53cc\u5411\u8fb9\uff0c\u8fb9\u6743\u4e3a\u8fd9\u4e24\u4e2a\u503c\u76f8\u52a0\u3002\n\n```\n#include <bits/stdc++.h>\n#define id(x,y) (x-1)*m+y\nusing namespace std;\n \nconst int maxn = 51000;\nconst int maxm = 310000;\nconst int INF = 0x3f3f3f3f;\nint n, m, a[105][105];\n \nstruct Edge{\n    int to,next,cap,flow;\n}edge[maxm];\nint tol,head[maxm];\n \nvoid init()\n{\n    tol=2;\n    memset(head,-1,sizeof(head));\n}\n \nvoid addedge(int u,int v,int w,int rw=0)\n{\n    edge[tol].to=v;edge[tol].cap=w;edge[tol].flow=0;\n    edge[tol].next=head[u];head[u]=tol++;\n    edge[tol].to=u;edge[tol].cap=rw;edge[tol].flow=0;\n    edge[tol].next=head[v];head[v]=tol++;\n}\n \nint Q[maxn];\nint dep[maxn],cur[maxn],sta[maxn];\n \nbool bfs(int s,int t,int n)\n{\n    int front=0,tail=0;\n    memset(dep,-1,sizeof(dep[0])*(n+1));\n    dep[s]=0;\n    Q[tail++]=s;\n    while(front<tail){\n        int u=Q[front++];\n        for(int i=head[u];i!=-1;i=edge[i].next){\n            int v=edge[i].to;\n            if(edge[i].cap>edge[i].flow&&dep[v]==-1){\n                dep[v]=dep[u]+1;\n                if(v==t){\n                    return true;\n                }\n                Q[tail++]=v;\n            }\n        }\n    }\n    return false;\n}\n \nint dinic(int s,int t,int n)\n{\n    int maxflow=0;\n    while(bfs(s,t,n)){\n        for(int i=0;i<n;i++){\n            cur[i]=head[i];\n        }\n        int u=s,tail=0;\n        while(cur[s]!=-1){\n            if(u==t){\n                int tp=INF;\n                for(int i=tail-1;i>=0;i--){\n                    tp=min(tp,edge[sta[i]].cap-edge[sta[i]].flow);\n                }\n                maxflow+=tp;\n                for(int i=tail-1;i>=0;i--){\n                    edge[sta[i]].flow+=tp;\n                    edge[sta[i]^1].flow-=tp;\n                    if(edge[sta[i]].cap-edge[sta[i]].flow==0){\n                        tail=i;\n                    }\n                }\n                u=edge[sta[tail]^1].to;\n            }else if(cur[u]!=-1&&edge[cur[u]].cap>edge[cur[u]].flow&&dep[u]+1==dep[edge[cur[u]].to]){\n                sta[tail++]=cur[u];\n                u=edge[cur[u]].to;\n            }else{\n                while(u!=s&&cur[u]==-1){\n                    u=edge[sta[--tail]^1].to;\n                }\n                cur[u]=edge[cur[u]].next;\n            }\n        }\n    }\n    return maxflow;\n}\n \nint main()\n{\n    cin >> n >> m;\n    int v;\n    int ans = 0;\n    init();\n    int s = n*m+1, t = s+1;\n    for(int i = 1; i <= n; i++)\n    {\n        for(int j = 1; j <= m; j++)\n        {\n            scanf(\"%d\", &v);\n            ans +=v;\n            if((i+j)&1)\n            {\n                addedge(s, id(i, j), v);\n            }\n            else\n                addedge(id(i,j), t, v);\n        }\n    }\n    for(int i = 1; i <= n; i++)\n    {\n        for(int j = 1; j <= m; j++)\n        {\n            scanf(\"%d\", &v);\n            ans += v;\n            if(!((i+j)&1))\n            {\n                addedge(s, id(i, j), v);\n            }\n            else\n                addedge(id(i,j), t, v);\n        }\n    }\n    for(int i = 1; i <= n; i++)\n        for(int j = 1; j <= m; j++)\n            scanf(\"%d\", &a[i][j]);\n    for(int i = 1; i <= n; i++)\n    {\n        for(int j = 1; j <= m-1; j++)\n        {\n            int tmp = a[i][j]+a[i][j+1];\n            ans += tmp;\n            addedge(id(i,j), id(i, j+1), tmp, tmp);\n        }\n    }\n    for(int i = 1; i <= n-1; i++)\n    {\n        for(int j = 1; j <= m; j++)\n        {\n            int tmp = a[i+1][j]+a[i][j];\n            ans += tmp;\n            addedge(id(i,j), id(i+1, j), tmp, tmp);\n        }\n    }\n    ans -= dinic(s, t, t);\n    cout << ans;\n    return 0;\n}\n```\n",
        "postTime": 1561624894,
        "uid": 205840,
        "name": "Mark_4396",
        "ccfLevel": 0,
        "title": "P1935&&BZOJ2132"
    },
    {
        "content": "# \u5514\u59c6\n\u6b63\u5982\u5404\u4f4d\u5927\u4f6c\u6240\u8bf4\uff0c\u8fd9\u9898\u548c[P1646](https://www.luogu.org/problemnew/show/P1646)\u5f88\u50cf\uff0c\u4f46\u6211\u89c9\u5f97\u771f\u6b63\u60f3\u901a\u4e86\uff0c\u8fd9\u9898\u6bd4P1646\u5bb9\u6613\u9e2d\n(~~\u6211\u751a\u81f3\u6709\u4e86\u6284\u6211\u4ee5\u524d\u5199\u7684P1646\u9898\u89e3\u7684\u60f3\u6cd5\u4e86~~\n\n------------\n- \u9996\u5148\uff0c\u548cP1646\u4e00\u6837\uff0c\u6211\u4eec\u628a\u6bcf\u4e2a\u70b9\u4ece\u6e90\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u5546\u4e1a\u533a\u7684\u6536\u76ca\u7684\u8fb9\uff0c\u5411\u6c47\u70b9\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a\u5de5\u4e1a\u533a\u7684\u8fb9\u3002\n- \u63a5\u7740\uff0c\u6211\u4eec\u5728\u628a\u76f8\u90bb\u7684\u70b9\u8fde\u8d77\u6765\u65f6\uff0c\u6211\u4eec\u53d1\u73b0\uff0c\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u7684\u662f\u4e0d\u76f8\u540c\u624d\u4f1a\u6709\u989d\u5916\u6536\u76ca\uff0c\u800c\u76f4\u63a5\u8fde\u8fb9\u5c31\u4e0d\u5408\u7406\u4e86\n- \u7136\u540e\u5462\uff0c\u6211\u4eec\u53c8\u53d1\u73b0\uff0c\u6240\u8c13\u76f8\u90bb\u7684\u5c31\u662f\u4e0a\u4e0b\u5de6\u53f3\u56db\u4e2a\u70b9\uff0c\u6240\u4ee5\u53ef\u4ee5\u50cf\u68cb\u76d8\u90a3\u6837\u4ee5\u884c\u5217\u5947\u5076\u6027\u67d3\u4e2a\u8272\uff0c\u628a\u4e00\u79cd\u989c\u8272\u7ed9\u5012\u8fc7\u6765\uff0c\u4e5f\u5c31\u662f\u4e4b\u524d\u8fde\u6c47\uff0c\u73b0\u5728\u5c31\u8fde\u6e90\uff0c\u4e4b\u524d\u8fde\u6e90\uff0c\u73b0\u5728\u5c31\u8fde\u6c47\n- \u8bb0\u5f97\u662f\u53cc\u5411\u8fb9\u54e6\uff08\u867d\u7136\u6211\u5c31\u76f4\u63a5link\u4e24\u6b21\uff09\n- \u6700\u540e\u76f4\u63a5\u628a\u603b\u6536\u76ca-\u6700\u5c0f\u5272\u5c31OK\u4e86\n\n\uff08~~\u4e00\u70b9\u90fd\u6ca1P1646\u6109\u2642\u60a6~~\uff09\n```cpp\n// luogu-judger-enable-o2\n#include<cstdio>\n#include<iostream>\n#include<cstring>\n#include<queue>\n#define MAXN 100050\n#define MAXM 150005\nusing namespace std;\nint head[MAXN],next[MAXM*2],to[MAXM*2],w[MAXM*2];\nint n,m,S,T;\nint cnt=-1;\nint deep[MAXN];\nvoid link(int a,int b,int c){\n     cnt++;\n     w[cnt]=c;\n     next[cnt]=head[a];\n     to[cnt]=b;\n     head[a]=cnt;\n     cnt++;\n     w[cnt]=0;\n     next[cnt]=head[b];\n     to[cnt]=a;\n     head[b]=cnt;\n}\nbool bfs(){\n     memset(deep,0,sizeof(deep));\n     queue<int> q;\n     while(!q.empty())q.pop();\n     q.push(S);\n     deep[S]=1;\n     while(!q.empty()){\n                       int now=q.front();\n                       q.pop();\n                       for(int i=head[now];i!=-1;i=next[i]){\n                               if (w[i]&&!deep[to[i]]){\n                                                       deep[to[i]]=deep[now]+1;\n                                                       q.push(to[i]);\n                               }\n                       }\n     }\n     if (deep[T])return 1;else return 0;\n}\nint dinic(int now,int last){\n    if (now==T||!last)return last;\n    int ret=0;\n    for(int i=head[now];i!=-1;i=next[i]){\n            if(deep[to[i]]-1==deep[now]&&w[i]){\n                                               int zgl=dinic(to[i],min(w[i],last-ret));\n                                               if (zgl){\n                                                        w[i]-=zgl;\n                                                        w[i^1]+=zgl;     \n                                                        ret+=zgl;\n                                               }\n            }\n    }\n    if (!ret)deep[now]=-1;\n    return ret;\n}\nint num(int a,int b){\n    return m*(a-1)+b;\n}\nint c[200][200];\nint main(){\n    cin>>n>>m;\n    S=0;T=MAXN-1;\n    int a;\n    memset(head,-1,sizeof(head));\n    long long sum=0;\n    for(int i=1;i<=n;i++){\n            for(int j=1;j<=m;j++){\n                    scanf(\"%d\",&a);\n                    if ((i+j)&1)link(S,num(i,j),a);\n                    else link(num(i,j),T,a);\n                    sum+=a;\n            }\n    }\n    for(int i=1;i<=n;i++){\n            for(int j=1;j<=m;j++){\n                    scanf(\"%d\",&a);\n                    if ((i+j)&1)link(num(i,j),T,a);\n                    else link(S,num(i,j),a);\n                    sum+=a;\n            }\n    }\n    for(int i=1;i<=n;i++)\n            for(int j=1;j<=m;j++)\n                    scanf(\"%d\",&c[i][j]);\n    int tx[]={0,-1,0,1},ty[]={1,0,-1,0};\n    for(int i=1;i<=n;i++){\n            for(int j=1;j<=m;j++){\n                    for(int k=0;k<4;k++){\n                            int xx=i+tx[k],yy=j+ty[k];\n                            if (xx<=0||xx>n)continue;\n                            if (yy<=0||yy>m)continue;\n                            link(num(i,j),num(xx,yy),c[i][j]+c[xx][yy]);\n                            sum+=c[i][j];\n                    }\n            }\n    }\n    long long ans=0;\n    while(bfs())\n                 ans+=dinic(S,9999999);\n    cout<<sum-ans;\n    return 0;\n}\n\n```\n",
        "postTime": 1552221212,
        "uid": 118273,
        "name": "\u543e\u738b\u7f8e\u5982\u753b",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P1935 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212\u3011"
    },
    {
        "content": "### \u5728hzwer\u5b66\u957f\u535a\u5ba2\u91cc\u770b\u5230\u4e86\u8fd9\u9053\u9898\uff0c\u7136\u540e\u5c31\u505a\u4e86\u4e00\u4e0b\uff0c\u7136\u540e\u4e00\u5f00\u59cb\u60f3\u4e86\u4e2a\u795e\u4ed9\u5efa\u56fe\u65b9\u5f0f\uff0c\u6f0f\u6d1e\u767e\u51fa\uff08\u8fd9\u5e76\u4e0d\u91cd\u8981\n### \u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u524d\u7f6e\u6280\u80fd\u70b9P1646\uff0c\u4e24\u9053\u9898\u6700\u5927\u7684\u533a\u522b\u53ef\u80fd\u5c31\u662fhappiness\u662f\u8981\u548c\u5468\u56f4\u4e00\u6837\uff0c\u800c\u8fd9\u4e2a\u9898\u662f\u8981\u4e0d\u4e00\u6837\uff0c\u90a3\u65e2\u7136\u5982\u6b64\uff0c\u53ef\u4ee5\u5148\u9ed1\u767d\u67d3\u8272\uff0c\u7136\u540e\u5c06\u4e00\u534a\u7684\u53cd\u5411\u5efa\u56fe\uff0c\u8fd9\u6837\u628a\u4e00\u90e8\u5206\u70b9\u5012\u8fc7\u6765\u4e4b\u540e\uff0c\u53c8\u53d8\u6210\u4e86\u548c\u5468\u56f4\u4e00\u6837\u5373\u53ef\uff0c\u7136\u540e\u624b\u63a8\u4e00\u4e2a\u6d45\u663e\u7684\u7ed3\u8bba\uff0c\u4e24\u4e2a\u70b9\u90fd\u9009\u62e9\u7684\u8bdd\u6536\u76ca\u662fc[x1][y1]+c[x2][y2]\uff0c\u5176\u4ed6\u5c31\u90fd\u662f\u5e38\u89c4\u64cd\u4f5c\u4e86\n```cpp\n#include<bits/stdc++.h>\n#include<queue>\nusing namespace std;\n#define INF 0x3f3f3f3f\ninline int read(){\n    int w=0,f=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9'){\n        w=(w<<3)+(w<<1)+ch-48;\n        ch=getchar();\n    }\n    return w*f;\n}\nint n,m,cnt=-1,head[100010],cur[100010],depth[100010],f[100010],ans1,ans,len,S,T,a[110][110],b[110][110],c[110][110],tot;\nint dx[5]={0,0,1,0,-1};\nint dy[5]={0,1,0,-1,0};\nstruct Edge{\n    int from,to,next,flow;\n}edge[1000010];\ninline void addedge(int u,int v,int w){\n    cnt++;\n    edge[cnt].from=u;\n    edge[cnt].to=v;\n    edge[cnt].flow=w;\n    edge[cnt].next=head[u];\n    head[u]=cnt;\n}\ninline void ins(int u,int v,int w){\n    addedge(u,v,w);addedge(v,u,0);\n}\nqueue<int> q;\ninline bool bfs(int st,int ed){\n    memset(depth,0,sizeof(depth));\n    int u,v,i,j,k;q.push(st);depth[st]=1;\n    while(!q.empty()){\n        u=q.front();q.pop();\n        for(i=head[u];i!=-1;i=edge[i].next){\n            v=edge[i].to;\n            if(!depth[v]&&edge[i].flow){\n                depth[v]=depth[u]+1;q.push(v);\n            }\n        }\n    }\n    return depth[ed];\n}\ninline int dfs(int u,int ed,int limit){\n    if(!limit||u==ed) return limit;\n    int v,i,j,k;int flow=0,f;\n    for(i=head[u];i!=-1;i=edge[i].next){\n        v=edge[i].to;\n        if(depth[v]==depth[u]+1&&(f=dfs(v,ed,min(limit,edge[i].flow)))){\n            limit-=f;flow+=f;\n            edge[i].flow-=f;edge[i^1].flow+=f;\n            if(!limit) break;\n        }\n    }\n    return flow;\n}\ninline void Dinic(){\n    while(bfs(S,T)){\n        ans+=dfs(S,T,INF);\n    }\n}\ninline int id(int x,int y){\n    return (x-1)*m+y;\n}\nint main(){\n    n=read();m=read();int i,j,k;\n    memset(head,-1,sizeof(head));S=0;T=99999;\n    for(i=1;i<=n;i++){\n        for(j=1;j<=m;j++){\n            int x=read();tot+=x;\n            if((i+j)&1) ins(S,id(i,j),x);\n            else ins(id(i,j),T,x);\n        }\n    }\n    for(i=1;i<=n;i++){\n        for(j=1;j<=m;j++){\n            int x=read();tot+=x;\n            if((i+j)&1) ins(id(i,j),T,x);\n            else ins(S,id(i,j),x);\n        }\n    }\n    for(i=1;i<=n;i++){\n        for(j=1;j<=m;j++){\n            c[i][j]=read();\n        }\n    }\n    for(i=1;i<=n;i++){\n        for(j=1;j<=m;j++){\n            if((i+j)&1) continue;\n            for(k=1;k<=4;k++){\n                int fx=i+dx[k];int fy=j+dy[k];\n                if(fx>=1 and fy>=1 and fx<=n and fy<=m){\n                    ins(id(i,j),id(fx,fy),c[i][j]+c[fx][fy]);\n                    ins(id(fx,fy),id(i,j),c[i][j]+c[fx][fy]);\n                    tot+=c[i][j]+c[fx][fy];\n                }\n            }\n        }\n    }\n    Dinic();\n    cout<<tot-ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1544583778,
        "uid": 106035,
        "name": "\u6e29\u8bcd",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1935 \u3010[\u56fd\u5bb6\u96c6\u8bad\u961f]\u5708\u5730\u8ba1\u5212\u3011"
    }
]