[
    {
        "content": "\n\u505a\u5b8c\u53d1\u73b0\u5c45\u7136\u6ca1\u6709\u5927\u795e\u53d1\u9898\u89e3\uff0c\u90a3\u4e48\u672c\u5927(ju)\u795e(ruo\uff09\u5927\u80c6\u6765\u53d1\u5e03\u4e00\u7bc7\u3002\n\n# \n\u8fd9\u9053\u9898\u7684\u601d\u60f3\u662f\u9996\u5148\u6211\u4eec\u627e\u5230\u6240\u6709\u7684\u6805\u680f\u56f4\u6210\u7684\u7a7a\u95f4\uff0c\u7136\u540e\u6c42\u6bcf\u4e00\u53ea\u5976\u725b\u5728\u54ea\u51e0\u4e2a\u6805\u680f\u7a7a\u95f4\u4e4b\u4e2d\uff0c\u6700\u540e\u6bd4\u8f83\u4ed6\u4eec\u5728\u7684\u6240\u6709\u6805\u680f\u7a7a\u95f4-----\u5982\u679c\u5976\u725ba\u548cb\u540c\u65f6\u5728\u7a7a\u95f4c\uff0cd\u548ce\u5185\uff0c\u90a3\u4e48\u4ed6\u4eec\u4e00\u5b9a\u5728\u540c\u4e00\u7fa4\u4e2d\u3002\n# \n\u6d4b\u8bd5\u56f4\u680f\u7684\u65b9\u6cd5\uff1a\u5bf9\u4e8e\u6bcf\u4e2a\u6805\u680f\uff0c\u5982\u679c\u6ca1\u6709\u88ab\u67e5\u8fc7\uff0c\u5c31\u5c06\u5176\u653e\u5165\u961f\u5217\u3002\u7136\u540e\u6839\u636e\u8fd9\u4e2a\u6570\u628a\u6240\u6709\u6709\u76f8\u540c\u70b9\u7684\u6805\u680f\u653e\u5165\u961f\u5217\u5e76\u5c06visited\u8bbe\u6210true\u3002\n# \n\u6d4b\u8bd5\u6bcf\u4e00\u53ea\u725b\u6240\u5728\u7684\u7a7a\u95f4\u7684\u65b9\u6cd5\uff1a\u5bf9\u4e8e\u725bB\u548c\u6805\u680f\u7ec4C\uff0c\u5982\u679c\u4eceB\u5f80\u4e0b\u8d70\u78b0\u5230\u4e86\u5947\u6570\u6b21\u6805\u680f\uff0c\u90a3\u4e48B\u4e00\u5b9a\u5728\u6805\u680fC\u7684\u7a7a\u95f4\u5185\u3002\uff08\u7b2c\u4e00\u6b21\u53d1\u9898\u89e3\u5b9e\u5728\u4e0d\u77e5\u9053\u600e\u4e48\u53d1\u56fe\u8bf7\u89c1\u8c05\uff09\n# \n\u6d4b\u8bd5\u725b\u662f\u5426\u78b0\u5230\u6805\u680f\u7ec4\u4e2d\u67d0\u4e00\u6805\u680f\u7684\u65b9\u6cd5\uff1a\u5bf9\u4e8e\u725bB\u548c\u6805\u680f\u7ec4C\u4e2d\u7684\u6805\u680fD\uff0c\u5982\u679c\u725bB\u7684x\u5750\u6807\u5728\u6805\u680fD\u7684\u5750\u6807\u4e4b\u95f4\uff0c\u4e14\u725bB\u7684Y\u503c\u5927\u4e8e\u6805\u680fD\u5728\u725bB\u7684x\u5750\u6807\u8fd9\u4e2a\u70b9\u4e0a\u7684\u65f6\u5019\u7684Y\u503c\uff0c\u90a3\u4e48\u725bB\u4e00\u5b9a\u5728\u6805\u680fD\u4e4b\u4e0a\n# \n\u6d4b\u8bd5\u6805\u680fD\u5728\u725bB\u7684x\u5750\u6807\u7684Y\u503c\uff1a\u5bf9\u4e8e\u6805\u680fD\uff0c\u659c\u7387\u7b49\u4e8e(y2-y1)/(x2-x1)\uff0c\u5728x\u65f6\u7684\u5750\u6807\u4e3a \u3010\u659c\u7387*\uff08\u725bB\u7684x\u503c-\u6805\u680fD\u7684\u7b2c\u4e00\u4e2a\u70b9\u7684x\u503c\uff09+\u6805\u680fD\u7684\u7b2c\u4e00\u4e2a\u70b9\u7684y\u503c\u3011\uff0c\u4e5f\u5c31\u662f\u8bf4\uff1a cowy>=slope*(cowx-x1)+y1\n# \n\u6c42\u4e24\u5934\u725b\u662f\u5426\u5728\u540c\u4e00\u65cf\u7fa4\uff1a\u73b0\u5728\u6211\u4eec\u6709\u4e86\u6bcf\u4e00\u5934\u725b\u6240\u5728\u7684\u65cf\u7fa4\uff08\u6211\u5c06\u5b83\u653e\u5728vec\u91cc\u9762\uff09\u3002\u6c42\u4e24\u5934\u725b\u662f\u5426\u5728\u540c\u4e00\u65cf\u7fa4\u7684\u65b9\u6cd5\u662f\u5982\u679c\u4e24\u5934\u725b\u6240\u5728\u7684\u65cf\u7fa4\u7684\u6570\u91cf\u548c\u7f16\u53f7\u90fd\u76f8\u540c\uff0c\u90a3\u4e48\u8fd9\u4e24\u5934\u725b\u5728\u540c\u4e00\u65cf\u7fa4\u5185\n#\n\u4e0a\u4ee3\u7801\n#\n*****\u6ce8\uff1a\u672c\u849f\u84bb\u975e\u5e38\u53cd\u611f\u6284\u88ad\u3002\u56e0\u4e3a\u8fd9\u4e9b\u6284\u88ad\u8005\u662f\u5b8c\u5168\u4e00\u5b57\u4e0d\u6539\u7684\u6284\u4e0b\u6765\uff0c\u8fd9\u4e2a\u662f\u5728\u6211\u770b\u6765\u4e0d\u53ef\u884c\u7684\u3002\u6240\u4ee5\u6211\u7279\u5730\u5728\u4e2d\u95f4\u62bd\u6389\u4e86\u4e00\u884c\uff08\u975e\u5e38\u7b80\u5355\u7684\u4e00\u884c\uff09\u3002\u6211\u76f8\u4fe1\u60f3\u505a\u8fd9\u9898\u7684\u4eba\u5bf9\u4e8e\u8865\u5168\u8fd9\u884c\u4e0d\u4f1a\u6709\u95ee\u9898\u3002\u5bf9\u4e8e\u9020\u6210\u7684\u4e0d\u4fbf\uff0c\u656c\u8bf7\u8c05\u89e3\n#\n```cpp\n\n#include <iostream>\n#include <algorithm>\n#include <vector>\n#include <queue>\n#include <math.h>\nusing namespace std;\nbool visited[1001];\nbool vis[1001];\npair< pair<int,int>, pair<int,int> > pos[1001]; //\u6240\u6709fence\u7684\u8d77\u59cb\u70b9\u548c\u7ed3\u675f\u70b9\npair<int,int> cows[1001];//\u5976\u725b\u7684\u5730\u70b9\nbool check(pair< pair<int,int>, pair<int,int> > fir, pair< pair<int,int>, pair<int,int> > sec){\n  return ((fir.first.first == sec.first.first && fir.first.second == sec.first.second) ||\n          (fir.second.first == sec.first.first && fir.second.second == sec.first.second)||\n          (fir.first.first == sec.second.first && fir.first.second == sec.second.second) ||\n          (fir.second.first == sec.second.first && fir.second.second == sec.second.second));\n}//\u6d4b\u8bd5\u4e24\u4e2afence\u6709\u6ca1\u6709\u5171\u540c\u70b9\nint main(){\n  vector<pair< pair<int,int>, pair<int,int> > > vec[1000];//\u8bb0\u5f55\u6709\u51e0\u4e2a\u7fa4\n  int a,b; cin >> a >> b;\n  for (int i=0;i<a;i++) cin >> pos[i].first.first >> pos[i].first.second >> pos[i].second.first >> pos[i].second.second;\n  for (int i=0;i<b;i++)cin >> cows[i].first >> cows[i].second;\n  int zz = 0;\n  queue<int> q;\n  //visited\u627e\u6ca1\u6709\u7ecf\u8fc7\u7684\u5730\u70b9\u653e\u8fdb\u961f\u5217\n  //\u5982\u679c\u9047\u5230\u6ca1\u6709\u7ecf\u8fc7\u5e76\u4e14\u6709\u76f8\u540c\u70b9\u7684\u5730\u65b9\u5c31\u653e\u5165\u961f\u5217\uff0c\u5e76\u5c06visited\u6539\u6210true\n  for (int i=0;i<a;i++){//\u6d4b\u8bd5\u6bcf\u4e2a\u70b9\n    if (!visited[i]){\n      visited[i] = true;\n      vec[zz].push_back(pos[i]);\n      q.push(i);\n      while(!q.empty()){//\u5f53\u961f\u5217\u4e2d\u6709\u4e1c\u897f\n        pair< pair<int,int>, pair<int,int> > temp1 = pos[q.front()];\n        for (int j=0;j<a;j++){\n          pair< pair<int,int>, pair<int,int> > temp2 = pos[j];\n          if (!visited[j]){\n            if (check(temp1,temp2)){//\u6d4b\u8bd5\u662f\u5426\u6709\u5171\u540c\u70b9\n                  q.push(j);\n                  visited[j] = true;\n                  vec[zz].push_back(pos[j]);\n                }\n            }\n          }\n          //\u8fd9\u91cc\u6211\u62ff\u6389\u4e86\u4e00\u884c\u7a0b\u5e8f\uff08\u53cd\u6284\u88ad\u8bf7\u8c05\u89e3\uff09\n          //\u5982\u679c\u60f3\u586b\u8bf7\u8ba4\u771f\u770bwhile\u91cc\u9762\u7f3a\u4ec0\u4e48\u3002\u6211\u76f8\u4fe1\u4f1a\u505a\u8fd9\u9898\u7684\u4eba\u90fd\u53ef\u4ee5\u5199\u7684\u51fa\u6765\u8fd9\u884c\n      }\n      zz++;//\u7fa4\u6570+1\n    }\n  }\n  vector<int> myvec[1001];\n  for (int i=0;i<b;i++){\n    for (int j=0;j<zz;j++){\n      int edge = 0; //\u8bbe\u7f6e\u78b0\u5230\u7684\u8fb9\u7f18\u7684\u6570\u91cf\u4e3a0\n      for (int k=0;k<vec[j].size();k++){\n        double x1 = vec[j][k].first.first;\n        double y1 = vec[j][k].first.second;\n        double x2 = vec[j][k].second.first;\n        double y2 = vec[j][k].second.second;\n        //\u8fd9\u56db\u884c\u662f\u4e3a\u4e86\u627e\u6805\u680f\u7684\u8d77\u59cb\u70b9\u548c\u7ec8\u70b9\n        double cowx = cows[i].first;\n        double cowy = cows[i].second;\n        //\u5976\u725b\u7684\u4f4d\u7f6e\n        double slope = (y2-y1) / (x2-x1);//\u659c\u7387\n        bool cond1 = x1<=cowx && cowx<x2;\n        bool cond2 = x2<=cowx && cowx<x1;\n        //\u6d4b\u8bd5\u5976\u725b\u4f4d\u7f6e\u662f\u5426\u5728\u4e24\u4e2a\u6805\u680f\u7684\u4e2d\u95f4\n        bool above1 = (cowy >= slope * (cowx-x1) + y1); //\u6d4b\u8bd5\u5976\u725b\u662f\u5426\u5728\u6805\u680f\u4e4b\u4e0a\n        if ((cond1^cond2) && above1) edge++;//\u5982\u679c\u5976\u725b\u4f4d\u7f6e\u5728\u4e24\u6805\u680f\u4e4b\u95f4\uff0c\u5e76\u4e14\u5728\u6805\u680f\u4e4b\u4e0a\uff0c\u8bc1\u660e\u5976\u725b\u4f1a\u78b0\u5230\u8fd9\u4e2a\u6805\u680f\n      }\n      if (edge % 2 !=0){\n        myvec[i].push_back(j);//\u5982\u679c\u662f\u5947\u6570\uff0c\u8bf4\u660e\u5976\u725b\u5728\u8fd9\u4e2a\u6805\u680f\u5185\n      }\n    }\n  }\n  int ans = 1;//\u6700\u5c0f\u53ef\u80fd\u6bcf\u53ea\u725b\u90fd\u662f\u72ec\u7acb\u7684\n  for (int i=0;i<b;i++){//\u6bcf\u53ea\u725b\u6d4b\u8bd5\n    int num = 1;\n    if (vis[i]) continue;\n    vis[i] = true;\n    for (int j=i;j<b;j++){\n      if (myvec[i].size() == myvec[j].size() && i!=j &&!vis[j]){\n        bool n = true;\n        for (int k=0;k<myvec[i].size();k++) if (myvec[i][k]!=myvec[j][k]) n = false;\n        if (n){\n          num++;//\u5982\u679c\u4e24\u4e2a\u5976\u725b\u5728\u7684\u65cf\u7fa4\u6570\u91cf\u76f8\u540c\uff0c\u90a3\u4e48\u4ed6\u4eec\u5728\u540c\u4e00\u65cf\u7fa4\u5185\n          vis[j]=true;\n        }\n      }\n    }\n    ans = max(ans,num);//\u6700\u5927\u5976\u725b\u6570\n  }\n  cout << ans;\n}\n\n\n",
        "postTime": 1569721860,
        "uid": 219099,
        "name": "pocafup",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3061 \u3010[USACO12DEC]\u75af\u72c2\u7684\u6805\u680fCrazy Fences\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u5b9a\u5e73\u2faf\u4e2d\u591a\u4e2a\u4e0d\u76f8\u4ea4\u7684\u7b80\u5355\u591a\u8fb9\u5f62\u548c\u2f00\u4e9b\u70b9\uff0c\u6c42\u5206\u5272\u51fa\u7684\u533a\u57df\u4e2d\u5305\u542b\u7684\u6700\u591a\u70b9\u6570\u3002\n\n## \u601d\u8def\n\n\u7531\u4e8e\u7ed9\u51fa\u7684\u662f\u2f00\u4e9b\u2f46\u5e8f\u7ebf\u6bb5\uff0c\u6240\u4ee5\u8981\u5148\u627e\u5230\u591a\u8fb9\u5f62\u3002\u8003\u8651\u5230\u7ebf\u6bb5\u6570\u91cf\u5f88\u5c11\uff0c\u6240\u4ee5\u53ef\u4ee5\u6bcf\u6b21\u4ece\u2f00\u4e2a\u6ca1\u6709\u8bbf\u95ee\u8fc7\u7684\u7ebf\u6bb5\u5f00\u59cb\uff0c\u4e0d\u65ad\u679a\u4e3e\u627e\u76f8\u90bb\u7684\u7ebf\u6bb5\uff0c\u76f4\u5230\u5f97\u5230\u5b8c\u6574\u7684\u591a\u8fb9\u5f62\u3002\u8fd9\u6837\u5c31\u80fd\u627e\u5230\u6240\u6709\u7684\u591a\u8fb9\u5f62\u3002\n\n\u7136\u540e\u9700\u8981\u77e5\u9053\u591a\u8fb9\u5f62\u4e2d\u5305\u542b\u4e86\u54ea\u4e9b\u70b9\uff0c\u53ef\u4ee5\u4f7f\u2f64\u5c04\u7ebf\u6cd5\uff0c\u8ba9\u70b9\u53d1\u51fa\u7684\u5c04\u7ebf\u548c\u591a\u8fb9\u5f62\u7684\u6bcf\u4e2a\u7ebf\u6bb5\u6c42\u4ea4\uff0c\u6839\u636e\u4ea4\u70b9\u7684\u5947\u5076\u6027\u5c31\u80fd\u5224\u65ad\u662f\u5426\u5728\u591a\u8fb9\u5f62\u4e2d\u3002\n\n\u4f46\u662f\u6211\u4eec\u4e0d\u80fd\u77e5\u9053\u627e\u5230\u5305\u542b\u70b9\u6570\u6700\u591a\u7684\u591a\u8fb9\u5f62\uff0c\u56e0\u4e3a\u591a\u8fb9\u5f62\u4e2d\u8fd8\u6709\u53ef\u80fd\u5305\u542b\u591a\u8fb9\u5f62\uff0c\u5bfc\u81f4\u533a\u57df\u88ab\u8fdb\u2f00\u6b65\u5212\u5206\u3002\u5bf9\u4e8e\u4e24\u4e2a\u70b9\uff0c\u53ea\u6709\u5305\u542b\u8fd9\u4e24\u4e2a\u70b9\u7684\u591a\u8fb9\u5f62\u96c6\u5408\u5b8c\u5168\u76f8\u540c\uff0c\u624d\u80fd\u786e\u4fdd\u4e24\u4e2a\u70b9\u5728\u2f00\u4e2a\u533a\u57df\u4e2d\u3002\n\n\u4e3a\u6b64\uff0c\u53ef\u4ee5\u5c06\u70b9\u6309\u7167\u5305\u542b\u70b9\u7684\u96c6\u5408\u6392\u5e8f\uff0c\u518d\u8fdb\u2f8f\u6821\u9a8c\u5373\u53ef\u3002\n\n## \u590d\u6742\u5ea6\n\n### \u65f6\u95f4\n\n\u5bfb\u627e\u591a\u8fb9\u5f62\uff0c\u8fb9\u6570 $O(N)$\uff0c\u5bfb\u627e\u90bb\u8fb9 $O(N)$\uff0c\u603b\u5171 $O(N^2)$\u3002\n\u5224\u65ad\u70b9\u548c\u591a\u8fb9\u5f62\u7ebf\u6bb5\u4ea4 $O(NC)$\u3002\n\u70b9\u2f50\u8f83 $O(N)$\uff0c\u6392\u5e8f $O(NC\\ \\log\\ C)$\u3002\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(N^2+NC\\ \\log\\ C)$\u3002\n\n### \u7a7a\u95f4\n\n\u8bb0\u5f55\u70b9\u7ebf\u6bb5\u4ea4\u7684\u60c5\u51b5 $O(NC)$\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <algorithm>\n#include <array>\n#include <fstream>\n\nusing namespace std;\nusing Pii = pair<int, int>;\n\nconst int kMaxN = 1001;\nconst Pii kP = {1, 1e6 + 1};\n\nifstream fin(\"crazy.in\");\nofstream fout(\"crazy.out\");\n\nPii operator-(const Pii &x, const Pii &y) { return {x.first - y.first, x.second - y.second}; }  // \u5411\u91cf\u51cf\u6cd5\n\nint operator*(const Pii &x, const Pii &y) {                           // \u5411\u91cf\u4e58\u6cd5\n  long long v = 1LL * x.first * y.second - 1LL * x.second * y.first;  // \u5411\u91cf\u53c9\u4e58\u53d6\u6b63\u8d1f\n  return v < 0 ? -1 : v > 0;\n}\n\nstruct E {     // \u7ebf\u6bb5\n  bool b;      // \u5904\u7406\u6807\u8bb0\n  Pii p0, p1;  // \u7aef\u70b9\n} e[kMaxN];\n\nstruct C {                                                // \u70b9\n  Pii p;                                                  // \u5750\u6807\n  array<bool, kMaxN> b;                                   // \u88ab\u591a\u8fb9\u5f62\u5305\u542b\u7684\u6807\u8bb0\n  bool operator<(const C &_c) const { return b < _c.b; }  // \u6309\u7167\u5305\u542b\u6807\u8bb0\u6392\u5e8f\n} c[kMaxN];\n\nint n, m, ans;\n\nbool C(Pii x, Pii y, Pii p, Pii q) {  // \u5224\u65adxy\u548cpq\u662f\u5426\u6709\u4ea4\n  return ((y - x) * (p - x)) * ((y - x) * (q - x)) < 0 && ((q - p) * (x - p)) * ((q - p) * (y - p)) < 0;\n}\n\nint F(int x) {  // \u5bfb\u627ex\u63a5\u7740\u7684\u7ebf\u6bb5\n  for (int i = 1; i <= n; i++) {\n    if (i != x) {                // \u4e0d\u80fd\u63a5\u81ea\u5df1\n      if (e[x].p1 == e[i].p1) {  // \u4ea4\u70b9\u5728p1\n        swap(e[i].p0, e[i].p1);  // \u4ea4\u6362\u5230p0\n      }\n      if (e[x].p1 == e[i].p0) {  // \u6709\u4ea4\u70b9\n        return i;                // \u8fd4\u56de\n      }\n    }\n  }\n  return 0;\n}\n\nvoid W(int s) {                                      // \u5904\u7406s\u5f00\u59cb\u7684\u591a\u8fb9\u5f62\n  for (int i = s; !e[i].b; i = F(i)) {               // \u904d\u5386\u6bcf\u6761\u8fb9\n    e[i].b = 1;                                      // \u6807\u8bb0\u7ebf\u6bb5\u5df2\u5904\u7406\n    for (int j = 1; j <= m; j++) {                   // \u8ba1\u7b97\u7ebf\u6bb5\u4e0e\u6240\u6709\u70b9\u7684\u4ea4\n      c[j].b[s] ^= C(c[j].p, kP, e[i].p0, e[i].p1);  // \u6709\u4ea4\u70b9\u5219\u5207\u6362\u5947\u5076\u6027\n    }\n  }\n}\n\nint main() {\n  fin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    fin >> e[i].p0.first >> e[i].p0.second >> e[i].p1.first >> e[i].p1.second;\n  }\n  for (int i = 1; i <= m; i++) {\n    fin >> c[i].p.first >> c[i].p.second;\n  }\n  for (int i = 1; i <= n; i++) {  // \u5bfb\u627e\u591a\u8fb9\u5f62\n    if (!e[i].b) {                // \u65b0\u7684\u591a\u8fb9\u5f62\n      W(i);\n    }\n  }\n  sort(c + 1, c + 1 + m);\n  for (int i = 2, s = 1; i <= m; i++) {    // \u904d\u5386\u6240\u6709\u70b9\n    s = c[i].b == c[i - 1].b ? s + 1 : 1;  // \u5305\u542b\u6807\u8bb0\u76f8\u540c\u5219\u5728\u540c\u4e00\u4e2a\u591a\u8fb9\u5f62\u4e2d\n    ans = max(ans, s);\n  }\n  fout << ans;\n  return 0;\n}\n```",
        "postTime": 1661437040,
        "uid": 612663,
        "name": "Pretharp",
        "ccfLevel": 5,
        "title": "P3061 \u9898\u89e3"
    }
]