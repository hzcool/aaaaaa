[
    {
        "content": "\u6bd2\u7624\u5206\u5757\u3002\u3002\u3002~~\u867d\u7136\u4f5c\u4e3a\u9ed1\u9898\u8fd8\u662f\u633a\u6c34~~\n\n\u5199\u4ee3\u7801\u5012\u6ca1\u4ec0\u4e48\uff0c\u67e5bug\u548c\u5361\u5e38\u5012\u5f04\u4e86\u5f88\u4e45\u3002\n\n\u867d\u7136\u95ee\u6811\uff0c\u4f46\u6ce8\u610f\u5230\u8fd9\u9898\u662f\u5b50\u6811\u52a0\u51cf\u548c\u8be2\u95ee\u3002\u6811\u7684dfs\u5e8f\u6709\u4e00\u6761\u6027\u8d28\u662f\u4e00\u4e2a\u70b9\u5b50\u6811\u5185\u7684dfs\u5e8f\u4e00\u5b9a\u8fde\u7eed\uff08\u7ed3\u5408dfs\u5e8f\u7684\u5b9a\u4e49\u5c31\u5f88\u597d\u7406\u89e3\uff09\uff0c\u4e8e\u662f\u6211\u4eec\u5148dfs\u4e00\u904d\u8dd1\u51fadfs\u5e8f\uff08\u8bb0\u4e3a$dfn[i]$\uff09\uff0c\u7136\u540e\u8bb0\u5f55\u4e0b\u6bcf\u4e2a\u70b9\u7ba1\u8f96\u7684\u5b50\u6811\u5185\u6700\u5927\u7684dfs\u5e8f(\u8bb0\u4e3a$rr[i]$)\uff0c\u6211\u4eec\u5c31\u628a\u5bf9$i$\u7684\u5b50\u6811\u7684\u64cd\u4f5c\u8f6c\u5316\u6210\u4e86\u5bf9\u533a\u95f4$[dfn[i],rr[i]]$\u7684\u64cd\u4f5c\u3002\u6ce8\u610f\u76f4\u63a5dfs\u4f1a\u7206\u6808\uff0c\u9700\u8981\u7528\u975e\u9012\u5f52\u7684\u65b9\u5f0f\u6a21\u62df\u3002\n\n\u518d\u770b\u9898\uff0c\u533a\u95f4\u52a0\u533a\u95f4k\u5927\uff0c\u8fd9\u4e0d\u5c31\u662f\u7531\u4e43\u6253\u6251\u514b\u539f\u9898\u5417\uff01\u4e8e\u662f\u5f00\u5f00\u5fc3\u5fc3\u5199\u4e86$\\Theta(n\\sqrt{n}\\log n\\log A)$(A\u662f\u503c\u57df)\u7684\u5199\u6cd5\u4ea4\u4e0a\u53bbTLE\u5b8c\u3002\n\n\u5148\u8bf4\u6700\u66b4\u529b\u7684\u5206\u5757\uff0c\u6bcf\u6b21\u8be2\u95ee\u4e8c\u5206\u7b54\u6848$ans$\uff0ccheck\u662f\u5426\u6709\u5927\u4e8e\u7b49\u4e8e$k$\u4e2a\u6570\u5c11\u4e8e\u5b83\u3002\u800c\u8fd9\u4e2a\u5c31\u662f\u6559\u4e3b\u7684\u9b54\u6cd5\u4e86\u3002\u5728\u6bcf\u4e2a\u5757\u5185\u6392\u5e8f\uff0c\u4e8c\u5206\u4e00\u4e0b\u7b2c\u4e00\u4e2a\u5927\u4e8e$ans$\u7684\u6570\u7684\u4f4d\u7f6e\uff0c\u5b83\u524d\u9762\u7684\u6570\u90fd\u5c0f\u4e8e$ans$\uff0c\u5bf9\u4e8e\u4e24\u8fb9\u7684\u5757\u5c31\u66b4\u529b\u7edf\u8ba1\u3002\u800c\u533a\u95f4\u52a0\u76f4\u63a5\u6253\u61d2\u6807\u8bb0\uff0c\u96f6\u6563\u5757\u66b4\u529b\u91cd\u5efa\u5c31\u597d\u4e86\u3002\n\n\u8003\u8651\u5982\u4f55\u4f18\u5316\u3002\n\n\u5982\u679c\u7528\u672a\u6765\u65e5\u8bb0\u90a3\u9898\u5206\u5757\u5957\u6743\u503c\u5757\u72b6\u6570\u7ec4\u7684\u65b9\u6cd5\uff0c\u4fee\u6539\u64cd\u4f5c\u5c31\u5f88\u96be\u529e\u3002\u65e2\u7136\u4e0d\u80fd\u7528\u90a3\u4e2a\u65b9\u6cd5\u4f18\u5316\u6389\u4e8c\u5206\u7b54\u6848\u7684$\\log$\uff0c\u800c\u4e0a\u9762\u90a3\u4e2a\u66b4\u529b\u74f6\u9888\u5c31\u5728\u4e8e\u533a\u95f4\u5185\u4e8c\u5206\u7edf\u8ba1\u7684\u590d\u6742\u5ea6\u3002\n\n\u89c2\u5bdf\u5230\u9898\u76ee\u4e2d\u8bf4\uff1a\u539f\u6811\u8fb9\u6743\u548c\u589e\u52a0\u7684\u8fb9\u6743\u5c0f\u4e8e\u7b49\u4e8e\u4e00\u4e2a\u6570$len$\uff0c\u800c$len$\u53c8\u975e\u5e38\u5c0f\uff0c\u4e0d\u59a8\u4ece\u8fd9\u91cc\u5165\u624b\u3002\u6211\u4eec\u5927\u80c6\u7684\u731c\u6d4b\u521d\u59cb\u6bcf\u4e2a\u5757\u5185\u6700\u5927\u503c\u4e0e\u5757\u5185\u6700\u5c0f\u503c\u4e4b\u5dee\u4e0d\u4f1a\u8d85\u8fc7\u4e00\u4e2a\u6570$w$\uff01\n\n\u90a3\u4e48\u6211\u4eec\u8bbe\u6570\u7ec4$sum[x][y]$\u8868\u793a\u5757$x$\u5185\u4e0e\u5757\u5185\u6700\u5c0f\u503c\u5dee\u503c\u4e3a$y$\u7684\u6570\u7684\u4e2a\u6570\uff0c\u5bf9\u5b83\u6c42\u4e00\u904d\u524d\u7f00\u548c\u3002\u8fd9\u6837\u6211\u4eec\u53d1\u73b0\u5c31\u80fd$\\Theta(1)$\u7edf\u8ba1\u591a\u5c11\u6bd4\u5b83\u5c0f\u7684\u6570\uff01\n\n$sum$\u6570\u7ec4\u4e5f\u5f88\u597d\u7ef4\u62a4\u3002\u533a\u95f4\u540c\u65f6\u52a0\u7684\u8bdd\u5dee\u503c\u4e0d\u53d8\u4e0d\u7528\u7ba1\u6253\u6807\u8bb0\u5c31\u597d\u3002\u96f6\u6563\u7684\u5757\u76f4\u63a5\u66b4\u529b\u52a0\u66b4\u529b\u91cd\u6784\u5c31\u597d\u3002\u8fd9\u6837\u4e5f\u514d\u53bb\u4e86\u5757\u5185\u6392\u5e8f\uff0c\u590d\u6742\u5ea6\u4f18\u5316\u5230\u4e86$\\Theta(n\\sqrt{n}\\log n)$\u3002\n\n\u4f46\u8fd9\u6837\u5c31\u5b8c\u4e86\u5417\uff1f\n\n\u5982\u679c\u6bcf\u6b21\u4fee\u6539\u64cd\u4f5c\u5728\u96f6\u6563\u5757\u91cc\u90fd\u52a0\u5230\u6700\u5927\u503c\u800c\u975e\u6700\u5c0f\u503c\uff0c\u7ef4\u62a4$sum$\u6570\u7ec4\u9700\u8981\u7684\u7a7a\u95f4\u5c31\u4f1a\u6781\u5927\uff01\u6b64\u65f6\u6211\u4eec\u7528\u975e\u5e38\u66b4\u529b\u7684\u65b9\u6cd5\u3002\u82e5\u5f53\u524d\u4fee\u6539\u64cd\u4f5c\u6b21\u6570\u8fbe\u5230\u4e8e\u4e00\u4e2a\u503c\uff0c\u5c31\u66b4\u529b\u91cd\u6784\u6574\u4e2a\u5e8f\u5217\u3002\u91cd\u6784\u7684\u65b9\u5f0f\u8fd8\u662f\u5206\u5757\uff0c\u4fdd\u8bc1\u6bcf\u4e2a\u5757\u7684\u957f\u5ea6\u4e0d\u5927\u4e8e\u8bbe\u7f6e\u7684\u6700\u5927\u5757\u957f\u4e14\u5757\u5185\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u4e0d\u80fd\u8d85\u8fc7$w$\n\n\u5269\u4e0b\u7684\u5c31\u662f\u7384\u5b66\u8c03\u53c2\u548c\u7e41\u7410\u7684\u7ec6\u8282\u4e86\u3002\u4ee3\u7801\u6539\u7684\u4e00\u584c\u7cca\u6d82\uff0c\u5c06\u5c31\u770b\u597d\u4e86\u3002\n\n~~\u6284\u9898\u89e3\u7684\u80fd\u4e0d\u80fd\u8fc7\u5c31\u8981\u770b\u4eba\u54c1\u4e86\uff0c\u4e00\u4f1a\u513fT\u4e00\u4f1a\u513fA\u7684~~\n\n163\u884c\u5e94\u8be5\u4e0d\u7b97\u592a\u957f\n\nCode\uff1a\n\n```cpp\n#pragma GCC optimize(2)\n#pragma GCC optimize(\"Ofast\") \n#include <bits/stdc++.h>\n\nusing namespace std;\n\nint n, m, pos[100005], beg[100005], endd[100005], lazy[100005], a[100005], opt, l, r, k, block = 355, len, gqyak = 0;\nint xcyak[100005];\nint sum[1005][30015], mn[100005], mx[100005], bl = 0;\nconst int eps = 4000;\n\nint min_(int a, int b) {\n\treturn a < b ? a : b;\n}\n\nint max_(int a, int b) {\n\treturn a > b ? a : b;\n}\n\nint read() {\n\tint s = 0, f = 1;\n\tchar ch = getchar();\n\twhile (!isdigit(ch)) f = (ch == '-' ? -1 : f), ch = getchar();\n\twhile (isdigit(ch)) s = (s << 1) + (s << 3) + (ch & 15), ch = getchar();\n\treturn s * f;\n}\nint tyz = 0;\nint check(int l, int r, int x) {\n//\tcerr << \"pre \" << x << enddl;\n\t int ret = 0;\n\tif (pos[l] == pos[r]) {\n\t\tfor (int i = l; i <= r; ++i)\n\t\t\tif (a[i] + lazy[pos[l]] <= x) ++ret;\n\t\t//\tcerr << \"endd in check\" << enddl;\n\t\treturn ret;\n\t}\n\tfor (int i = l; i <= endd[pos[l]]; ++i)\n\t\tif (a[i] + lazy[pos[l]] <= x) ++ret;\n\tfor (int i = r; i >= beg[pos[r]]; --i)\n\t\tif (a[i] + lazy[pos[r]] <= x) ++ret;\n\t\t\n\tfor ( int i = pos[l] + 1; i < pos[r]; ++i) {\n\t\tif (x - mn[i] - lazy[i] < 0) continue;\n//\t\tint kt = ret;\n\t\tif (x - mn[i] - lazy[i] >= mx[i] - mn[i]) ret += sum[i][mx[i] - mn[i]];\n\t\telse ret += sum[i][x - mn[i] - lazy[i]];\n\t//\tif (tyz == 14 && x == 490899) {\n\t//\t\tcerr << ret - kt << enddl;\n\t//\t}\n\t}//cerr << \"fucker!\" << enddl;\n\treturn ret; \n}\n\nint qans(int l, int r, int k) {\n\t int ll = 0x3f3f3f3f, rr = -0x3f3f3f3f, ans = -1;\n\tfor ( int i = pos[l]; i <= pos[r]; ++i) ll = min_(ll, mn[i] + lazy[i]), rr = max_(rr, mx[i] + lazy[i]);\n\tif (ll == rr) return ll; int lll = l, rrr = r;\n\t//cerr << tyz << ' ' << ll << ' '<< rr << endl;\n\t//if (tyz == 21363) cout << \"beg \" << ll << ' ' << rr << endl;\n\twhile (ll <= rr) {\n\t\tint mid = ll + rr >> 1;\n\t\tif (check(lll, rrr, mid) >= k) ans = mid, rr = mid - 1;\n\t\telse ll = mid + 1;\n\t} //if (tyz == 14) cerr << \"ans = \" << ans << enddl; \n\treturn ans;\n}\n\nvoid upd(int i) {\n\tmn[i] = 0x3f3f3f3f, mx[i] = -0x3f3f3f3f;\n\tfor ( int j = beg[i]; j <= endd[i]; ++j) {\n\t\tmn[i] = min_(mn[i], a[j]), mx[i] = max_(mx[i], a[j]);\n\t}\n \tmemset(sum[i], 0, sizeof sum[i]);\n\tfor ( int j = beg[i]; j <= endd[i]; ++j)\n\t\t++sum[i][a[j] - mn[i]];\n\tfor ( int j = 1; j <= mx[i] - mn[i]; ++j)\n\t\tsum[i][j] += sum[i][j - 1];\n}\n\nvoid modify(int l, int r, int k) {\n\tif (pos[l] == pos[r]) {\n\t\tfor ( int i = l; i <= r; ++i) a[i] += k;\n\t\tupd(pos[l]);\n\t\treturn ;\n\t}\n\tfor (int i = l; i <= endd[pos[l]]; ++i) a[i] += k; upd(pos[l]);\n\tfor (int i = r; i >= beg[pos[r]]; --i)  a[i] += k; upd(pos[r]);\n\tfor (int i = pos[l] + 1; i < pos[r]; ++i) lazy[i] += k;\n}\n\nvoid build() {\n\tfor ( int i = 1; i <= n; ++i)\n\t\ta[i] += lazy[pos[i]];\n\t\n\tfor ( int i = 1; i <= bl; ++i) lazy[i] = 0;\n\tbeg[1] = 1; pos[1] = 1;\n\tint ls = 0x3f3f3f3f, rs = -0x3f3f3f3f;\n\tbl = 1;\n\tfor ( int i = 1; i <= n; ++i) {\n\t\tls = min_(a[i], ls); rs = max_(a[i], rs);\n\t\tif (rs - ls > eps || i - beg[bl] >= block ) ls = rs = a[i], endd[bl] = i - 1, beg[++bl] = i;\n\t\tpos[i] = bl;\n\t}\n\tendd[bl] = n;\n\tfor ( int i = 1; i <= bl; ++i) {\t\t\n\t\tupd(i);\n\t}\n}\n\n//=========================================================tree==================================================\n\nstruct edge {\n\tint head, to, nxt, val;\n}ed[100005];\n\nint en = 0;\nint dep[100005], dfn[100005], id = 0, rr[100005];\nint sta[100005], dis[100005], top = 0;\n\nvoid addedge(int from, int to, int val) {\n\ted[++en].to = to; ed[en].nxt = ed[from].head; ed[from].head = en; ed[en].val = val;\n}\n\nvoid dfs(int u, int v) {\n\tsta[++top] = u; dis[top] = v;\n\twhile (top) {\n\t\tint uu = sta[top], val = dis[top], tmp = xcyak[top];\n\t\tif (tmp) { rr[uu] = id; --top; continue; }\n\t\tdfn[uu] = ++id; a[id] = val; xcyak[top] = 1;\n\t\tfor( int i = ed[uu].head; i; i = ed[i].nxt)\n\t\t\tsta[++top] = ed[i].to, dis[top] = val + ed[i].val, xcyak[top] = 0;\n\t}\n}\n\nint main() {\n//\tfreopen(\"heiheihei.in\", \"r\", stdin);\n//\tfreopen(\"standard.out\", \"w\", stdout);\n\tn = read(); m = read(); len = read();\n\tfor ( int i = 2; i <= n; ++i) {\n\t\tl = read(); k = read();\n\t\taddedge(l, i, k);\n\t} block = sqrt(n) + 1;\n\tdfs(1, 0);\n\tmemset(mn, 0x3f, sizeof(mn));\n\tmemset(mx, -0x3f, sizeof(mx));\n\tbl = n / block + 1;\n\tbuild();\n\twhile (m--) {\n\t\topt = read(); l = read(); k = read();\n\t\tif (opt == 1) {\n\t\t//\tcerr << \"dfn[l] = \" << dfn[l] << ' ' << rr[l] << enddl;\n\t\t\t++tyz;\n\t\t\tif (rr[l] - dfn[l] + 1 < k) puts(\"-1\");\n\t\t\telse printf(\"%d\\n\", qans(dfn[l], rr[l], k));\n\t\t} else modify(dfn[l], rr[l], k), ++gqyak;\n\t\tif (gqyak == 2600) {\n////\t\t\tcerr << \"gqyak = \" << gqyak << enddl;\n\t\t\tbuild();// tyz = 0;\n\t\t\tgqyak = 0;\n\t\t}\n\t} //cerr << dfn[l] << endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1595422325,
        "uid": 98096,
        "name": "Smallbasic",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3712 \u3010\u5c11\u5973\u4e0e\u6218\u8f66\u3011"
    },
    {
        "content": "#### \u6b64\u9898 1e5\uff0c\u5206\u5757\u9003\u4e0d\u8fc7\u3002  \n\n\u5c1d\u8bd5\u8fd9\u6837\u5206\u5757\uff1a  \n\n\u5757\u5185\u5143\u7d20\u6570\u76ee\u4e0d\u8d85\u8fc7sqrt(n)\u4e2a\uff0c\u4e14\u5757\u5185\u5143\u7d20\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u4e4b\u5dee\u4e0d\u8d85\u8fc72000\u3002\u8bb0\u5f55\u5757\u5185\u6bcf\u4e2a\u5143\u7d20\u6bd4\u5757\u5185\u5143\u7d20\u6700\u5c0f\u503c\u5927\u591a\u5c11\uff0c\u8bb0\u5728\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u8dd1\u4e00\u8fb9\u524d\u7f00\u548c\uff0c\u8fd9\u6837\u4fbf\u53ef\u4ee5O(1)\u7684\u65f6\u95f4\u5185\u67e5\u8be2\u5757\u5185\u5c0f\u4e8ek\u7684\u5143\u7d20\u7684\u4e2a\u6570\u3002   \n\n\u67e5\u8be2\u5f88\u7b80\u5355\uff0c\u4e0d\u5fc5\u8d58\u8ff0\u3002\u8003\u8651\u4fee\u6539\uff0c\u6574\u5757\u4fee\u6539\u653e\u61d2\u60f0\u6807\u8bb0\uff0c\u5176\u4f59\u7684\u53ef\u4ee5\u8fd9\u6837\uff1a\u6bcf\u6b21\u52a0\u4e00\u4e2a\u4e0d\u8d85\u8fc710\u7684\u503c\uff0c\u90a3\u4e48\u53ea\u8fdb\u884c1000\u6b21\u4fee\u6539\u5757\u5185\u5143\u7d20\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\u4e4b\u5dee\u4e0d\u4f1a\u8d85\u8fc720000\uff0c\u4f9d\u7136\u80fd\u7528\u6570\u7ec4\u5b58\u4e0b\u3002\u90a3\u4e48\u6bcf\u8fdb\u884c1000\u6b21\u64cd\u4f5c\u5c31\u91cd\u65b0\u5206\u5757\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6O(n*sqrt(n)*log(n))\uff0c\u53ef\u4ee5\u8dd1\u8fc7\u3002  \n\n\u4ee3\u7801\uff1a  \n\n```\n#include<bits/stdc++.h>\n#define Min(x,y)\t((x)<(y)?\t(x):(y))\n#define Max(x,y)\t((x)>(y)?\t(x):(y))\nusing namespace std;\nconst int blo=300,s=2000;\nconst int INF=0x3f3f3f3f;\nconst int SIZEBLO=2010,N=100010;\nint n,m,len,tot;\nint cnt=0,hed[N],to[N],nxt[N],val[N];\nint dfn[N],idx=0,dep[N],low[N];\nint bl[N],L[SIZEBLO],R[SIZEBLO],lz[SIZEBLO],bL[SIZEBLO],bR[SIZEBLO],sum[SIZEBLO][20010];\nint sta[N],Dis[N],mark[N],top=0;\n\ninline int read() {\n\tregister int tmp=0;register bool flag=0;register char c=getchar();\n\twhile(c<'0'||c>'9') { if(c=='-')\tflag=1;c=getchar(); }\n\twhile(c>='0'&&c<='9')\ttmp=(tmp<<1)+(tmp<<3)+(c^48),c=getchar();\n\treturn flag?\t-tmp:tmp;\n}\ninline void add(int x,int y,int z) { to[++cnt]=y,val[cnt]=z,nxt[cnt]=hed[x],hed[x]=cnt; }\nvoid dfs(int u,int dis) {\n\tdfn[u]=++idx,dep[idx]=dis; for(int i=hed[u];i;i=nxt[i])\tdfs(to[i],dis+val[i]);\n\tlow[u]=idx;\n}\nvoid Dfs(int u,int dis) {\n\tsta[++top]=u,Dis[top]=dis;\n\twhile(top) {\n\t\tint v1=sta[top],v2=Dis[top],v3=mark[top];\n\t\tif(v3) { low[v1]=idx,--top;continue; }\n\t\tdfn[v1]=++idx,dep[idx]=v2,mark[top]=1;\n\t\tfor(int i=hed[v1];i;i=nxt[i])\tsta[++top]=to[i],Dis[top]=v2+val[i],mark[top]=0;\n\t}\n}\ninline void reset(int x) {\n\tif(!lz[x])\treturn ; for(int i=L[x];i<=R[x];i++)\tdep[i]+=lz[x]; lz[x]=0;\n}\ninline void update(int x) {\n\tbL[x]=INF,bR[x]=-INF;\n\tfor(int i=L[x];i<=R[x];i++)\tbL[x]=Min(bL[x],dep[i]),bR[x]=Max(bR[x],dep[i]);\n\tfor(int i=0;i<=bR[x]-bL[x];i++)\tsum[x][i]=0;\n\tfor(int i=L[x];i<=R[x];i++)\t++sum[x][dep[i]-bL[x]];\n\tfor(int i=1;i<=bR[x]-bL[x];i++)\tsum[x][i]+=sum[x][i-1];\n}\nvoid build() {\n\tfor(int i=1;i<=bl[n];i++)\treset(i);\n\tint lx=INF,rx=-INF,u=1;L[1]=1;\n\tfor(int i=1;i<=n;i++) {\n\t\tlx=Min(lx,dep[i]),rx=Max(rx,dep[i]);\n\t\tif(rx-lx>s||i-L[u]>=blo)\tlx=rx=dep[i],R[u]=i-1,L[++u]=i;\n\t\tbl[i]=u;\n\t}\n\tR[u]=n; for(int i=1;i<=bl[n];i++)\tupdate(i);\n}\ninline int Getval(int x,int w) {\n\tif(w<bL[x])\treturn 0; if(w>=bR[x])\treturn sum[x][bR[x]-bL[x]];\n\treturn sum[x][w-bL[x]];\n}\ninline int query(int l,int r,int w) {\n\tint Count=0;\n\tif(bl[l]+1>=bl[r]) {\n\t\tfor(int i=l;i<=r;i++)\tif(dep[i]<=w)\t++Count;\n\t\treturn Count;\n\t}\n\tfor(int i=l;i<=R[bl[l]];i++)\tif(dep[i]<=w)\t++Count;\n\tfor(int i=L[bl[r]];i<=r;i++)\tif(dep[i]<=w)\t++Count;\n\tfor(int i=bl[l]+1;i<bl[r];i++)\tCount+=Getval(i,w);\n\treturn Count;\n}\ninline int Kth(int l,int r,int k) {\n\tif(r-l+1<k)\treturn -1;\n\treset(bl[l]),reset(bl[r]);\n\tint ll=INF,rr=-INF,midd,tans=0;\n\tfor(int i=bl[l];i<=bl[r];i++)\tll=Min(ll,bL[i]),rr=Max(rr,bR[i]);\n\tif(ll==rr)\treturn ll;\n\twhile(ll<=rr) {\n\t\tmidd=(ll+rr)>>1;\n\t\tif(query(l,r,midd)>=k)\ttans=midd,rr=midd-1;\n\t\telse\tll=midd+1;\n\t}\n\treturn tans;\n}\ninline void change(int l,int r,int w) {\n\treset(bl[l]),reset(bl[r]);\n\tif(bl[l]+1>=bl[r]) {\n\t\tfor(int i=l;i<=r;i++)\tdep[i]+=w; update(bl[l]),update(bl[r]);\n\t\treturn ;\n\t}\n\tfor(int i=l;i<=R[bl[l]];i++)\tdep[i]+=w; update(bl[l]);\n\tfor(int i=L[bl[r]];i<=r;i++)\tdep[i]+=w; update(bl[r]);\n\tfor(int i=bl[l]+1;i<bl[r];i++)\tlz[i]+=w,bL[i]+=w,bR[i]+=w;\n}\nint main() {\n\tn=read(),m=read(),len=read();\n\tfor(int i=2,x,y;i<=n;i++)\tx=read(),y=read(),add(x,i,y);\n\tDfs(1,0),build();\n\tfor(int i=1,opt,x,y;i<=m;i++) {\n\t\topt=read(),x=read(),y=read();\n\t\tif(opt==1)\tprintf(\"%d\\n\",Kth(dfn[x],low[x],y));\n\t\telse\t++tot,change(dfn[x],low[x],y);\n\t\tif(i%1000==0)\ttot=0,build();\n\t}\n\treturn 0;\n}\n```  \n\n~~\u795d\u4f60\u4eec\u6210\u529f~~",
        "postTime": 1543841783,
        "uid": 41584,
        "name": "daniel14311531",
        "ccfLevel": 7,
        "title": "\u3010\u5206\u5757\u3011\u5c11\u5973\u4e0e\u6218\u8f66"
    },
    {
        "content": "\u4e00\u4e2a\u770b\u8d77\u6765\u9760\u8c31\u70b9\u7684\u505a\u6cd5\u3002\n\n\u4e0b\u9762\u8ba4\u4e3a $n=m$\uff0c$b$ \u4e3a\u5757\u957f\u3002\n\n\u51b7\u9759\u5206\u6790\u3002\n\n\u6211\u4eec\u6709\u8fd9\u6837\u4e00\u4e2a\u505a\u6cd5\uff1a\n\n\u6bcf\u4e00\u5757\u7ef4\u62a4\u4e00\u4e2a\u540e\u7f00\u548c\u6570\u7ec4 $a$\u3002\u8fb9\u5757\u5904\u7406\u7684\u65f6\u5019\u5bf9\u4e00\u4e2a\u6570 $x$ \u589e\u52a0 $k$ \u5c31\u662f\u5bf9\u533a\u95f4 $[x+1,x+k]$ \u589e\u52a0 $1$\u3002\n\n\u7136\u540e\u67e5\u8be2\u8be5\u5757\u5185\u6709\u591a\u5c11\u4e2a $\\le x$ \u7684\u6570\u7684\u65f6\u5019\uff0c\u7528\u5757\u957f\u51cf\u53bb $>x$ \u7684\u6570\u5373 $a_{x+1}$\u3002\n\n\u8fd9\u770b\u8d77\u6765\u662f\u4e00\u4e2a\u5bf9\u52b2\u7684\u505a\u6cd5\u3002\u3002\u4e0d\u8fc7\u6ce8\u610f\u5230\u4e00\u4e2a\u6570\u53ef\u4ee5\u53bb\u5230 $nlen$ \u7ea7\u522b\u3002\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(\\dfrac {n^2 len} b)$\u3002\n\n\u4e0d\u8fc7\u51b7\u9759\u4e00\u4e0b\u3002\u3002\u6211\u4eec\u7ef4\u62a4\u7684\u5176\u5b9e\u662f\u8fd9\u4e2a\u5757\u51cf\u53bb\u6700\u5c0f\u503c\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u8981\u7ef4\u62a4\u7684\u503c\u57df\u662f\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5dee\u3002\u4fdd\u8bc1\u8fd9\u4e2a\u5dee $\\le n$\u3002\n\n\u4e0d\u8fc7\u597d\u50cf\u8fd8\u662f\u4e0d\u592a\u884c\u3002\u3002\u56e0\u4e3a\u6bcf\u6b21\u64cd\u4f5c\u4f1a\u8ba9 $O(1)$ \u4e2a\u6563\u5757\u7684\u503c\u57df\u589e\u52a0 $len$\u3002\u3002\n\n\u673a\u4f1a\u6765\u4e86\uff01\u6211\u4eec\u8981\u7528 $\\dfrac n {len}$ \u7684\u64cd\u4f5c\u6b21\u6570\u624d\u80fd\u8ba9\u4e00\u4e2a\u5757\u4e0d\u6ee1\u8db3\u6027\u8d28\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u6240\u6709\u7684\u64cd\u4f5c\u4e2d\uff0c\u6211\u4eec\u81f3\u591a\u8ba9 $O(m/\\dfrac n {len})=O(len)$ \u4e2a\u5757\u4e0d\u6ee1\u8db3\u6027\u8d28\uff01\n\n\u90a3\u4e48\u5bf9\u8fd9\u4e9b\u5757\uff0c\u7528\u5757\u5185\u6392\u5e8f\u4e8c\u5206\u7684\u65b9\u6cd5\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u8fd9\u4e9b\u5757\u521d\u59cb\u7684\u6781\u5dee\u662f\u5426\u4f1a\u8fc7\u5927\u5462\uff1f\n\n\u6709\u4e00\u4e2a\u5f88\u91cd\u8981\u7684\u6027\u8d28\uff0c\u5c31\u662f\u8fd9\u4e9b\u503c\u662f\u901a\u8fc7\u4e00\u68f5\u6811\u7ed9\u51fa\u7684\uff01\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a dfn \u7684\u5757\u5728\u6811\u4e0a\u662f\u4e00\u4e2a\u8fde\u901a\u5757\uff01\n\n\u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u76f4\u5f84\u4e3a $\\le b$\uff0c\u8fd9\u610f\u5473\u7740\u6781\u5dee $\\le blen$\u3002\n\n\u7b97\u4e00\u4e0b\u590d\u6742\u5ea6\uff1a\n\n\u4fee\u6539\u7684\u590d\u6742\u5ea6\uff0c\u5bf9\u4e8e\u6392\u5e8f\u5757\u7684\u4fee\u6539\u662f $O(b)$\uff0c\u5bf9\u4e8e\u5176\u5b83\u7684\u5757\u662f $O(blen)$\u3002\n\n\u67e5\u8be2\u7684\u590d\u6742\u5ea6\uff0c\u5355\u6b21\u533a\u95f4\u67e5\u8be2 $\\le x$ \u7684\u6570\uff0c\u6563\u5757\u662f $O(b)$\uff1b\u6240\u6709\u7684\u6392\u5e8f\u6574\u5757\u662f $O(len\\log b)$\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5ffd\u7565\uff1b\u5176\u5b83\u7684\u6574\u5757\u662f $O(\\dfrac n b)$\u3002\n\n\u5916\u9762\u518d\u5e26\u4e0a\u4e00\u4e2a\u4e8c\u5206\uff0c\u5c31\u662f $O(\\log n(b+\\dfrac n b))$\u3002\n\n\u53d6 $b=\\sqrt n$\uff0c\u4fee\u6539\u5c31\u662f $O(\\sqrt n len)$\uff0c\u67e5\u8be2\u5c31\u662f $O(\\sqrt n \\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int b=317,mx=1e5+5,up=1<<int(log2(b)); \nint a[mx];\npair<int,int> st[mx],st1[mx],st2[mx];\nint bl[mx],fl[mx],fr[mx],tag[mx],ks;\nint t[mx/b+5][mx+1];\nint mxb[mx];\nchar ibuf[900<<20],*s,out[900<<20];\nint wz;\ninline int read()\n{\n    register int u=0,w=1;\n    while(*s<48)\n\t{\n\t\tif(*s=='-') w=-1;\n\t\ts++;\n\t} \n    while(*s>32)\n        u=u*10+*s++-48;\n    return u*w;\n}\nvoid print(int x)\n{\n\tif(x<0) \n\t{\n\t\tout[wz++]='-',print(-x);\n\t\treturn;\n\t}\n    if(x>9) print(x/10);\n\tout[wz++]=x%10+'0';\n}\nint n;\nvoid init()\n{\n\tint i,j,k,mn;\n\tfor(i=1;i<=n;i+=b)\n\t\tfl[++ks]=i,fr[ks]=min(n,i+b-1);\n\tfor(i=1;i<=ks;i++)\n\t{\n\t\tmn=2e9;\n\t\tfor(j=fl[i];j<=fr[i];j++)\n\t\t\tmn=min(mn,a[j]);\n\t\ttag[i]=mn;\n\t\tfor(j=fl[i];j<=fr[i];j++)\n\t\t{\n\t\t\tbl[j]=i;\n\t\t\tmxb[i]=max(mxb[i],a[j]-=mn);\n\t\t\tfor(k=0;k<=a[j];k++)\n\t\t\t\tt[i][k]++;\n\t\t}\n\t}\t\t\t\t\n}\nvoid build(int l,int r)\n{\n\tfor(int i=l;i<=r;i++)\n\t\tst[i]=make_pair(a[i],i);\n\tsort(st+l,st+r+1);\n}\nvoid add2(int l,int r,int k)\n{\n\tint i,j,w;\n\tfor(i=l;i<=r;i++)\n\t\ta[i]+=k;\n\tj=w=0;\n\tfor(i=fl[bl[l]];i<=fr[bl[l]];i++)\n\t\tif(st[i].second>=l&&st[i].second<=r)\n\t\t\tst1[++j]=st[i],st1[j].first+=k;\n\t\telse\n\t\t\tst2[++w]=st[i];\n\tmerge(st1+1,st1+1+j,st2+1,st2+1+w,st+fl[bl[l]]);\n}\nvoid add(int l,int r,int k)\n{\n\tint i,j,be=bl[l];\n\tif(be==bl[r])\n\t{\n\t\tif(mxb[be]>mx)\n\t\t{\n\t\t\tfor(i=l;i<=r;i++)\n\t\t\t\ta[i]+=k;\n\t\t\tbuild(fl[be],fr[be]);\n\t\t\treturn;\n\t\t}\n\t\tfor(i=l;i<=r;i++)\n\t\t\tmxb[be]=max(mxb[be],a[i]+k);\n\t\tif(mxb[be]>mx)\t\n\t\t{\n\t\t\tadd2(l,r,k);\n\t\t\treturn;\n\t\t}\n\t\tfor(i=l;i<=r;i++)\n\t\t{\n\t\t\tfor(j=a[i]+1;j<=a[i]+k;j++)\n\t\t\t\tt[be][j]++;\n\t\t\ta[i]+=k;\n\t\t}\n\t\treturn;\n\t}\n\tadd(l,fr[be],k),add(fl[bl[r]],r,k);\n\tfor(i=be+1;i<bl[r];i++)\n\t\ttag[i]+=k;\n}\nint bound(int l,int r,int k)\n{\n\tif(st[l].first>k) return 0;\n\tif(st[r].first<=k) return r-l+1;\n\tint i,w=l;\n\tfor(i=up;i>=1;i/=2)\n\t\tif(w+i<=r&&st[w+i].first<=k)\n\t\t\tw+=i;\n\treturn w-l+1;\n}\nbool check(int l,int r,int mid,int k)\n{\n\tint s=0,i;\n\tif(bl[l]==bl[r])\n\t{\n\t\tfor(i=l;i<=r;i++)\n\t\t\ts+=a[i]+tag[bl[i]]<=mid;\n\t}\n\telse\n\t{\n\t\tfor(i=l;i<=fr[bl[l]];i++)\n\t\t\ts+=a[i]+tag[bl[i]]<=mid;\n\t\tfor(i=bl[r]-1;i>bl[l];i--)\n\t\t{\n\t\t\tif(mxb[i]>mx) s+=bound(fl[i],fr[i],mid-tag[i]);\n\t\t\telse if(mid-tag[i]>=-1)\n\t\t\t\ts+=(fr[i]-fl[i]+1)-t[i][min(mx,mid-tag[i]+1)];\n\t\t\tif(s>=k) return 1;\n\t\t}\t\n\t\tfor(i=fl[bl[r]];i<=r;i++)\n\t\t\ts+=a[i]+tag[bl[i]]<=mid;\n\t}\n\treturn s>=k;\n}\nint ask(int l,int r,int k)\n{\n\tint le=0,ri=mx*20,mid,re;\n\twhile(le<=ri)\n\t{\n\t\tmid=le+ri>>1;\n\t\tif(check(l,r,mid,k))\n\t\t\tri=mid-1,re=mid;\n\t\telse\n\t\t\tle=mid+1;\n\t}\n\treturn re;\n}\nvector<pair<int,int> > tr[100005];\nint size[100005],dfn[100005];\nint cdfn;\nvoid dfs(int d,int s)\n{\n\tdfn[d]=++cdfn;\n\ta[cdfn]=s;\n\tsize[d]=1;\n\tfor(int i=0;i<tr[d].size();i++)\n\t\tdfs(tr[d][i].first,s+tr[d][i].second),size[d]+=size[tr[d][i].first];\n}\nint main()\n{\n\tfread(s=ibuf,1,900<<20,stdin);\n\tint m,i,opt,x,k;\n\tn=read(),m=read(),read();\n\tfor(i=2;i<=n;i++)\n\t\tk=read(),tr[k].push_back({i,read()});\n\tdfs(1,0);\t\n\tinit();\n\twhile(m--)\n\t{\n\t\topt=read(),x=read(),k=read();\n\t\tif(opt==1) print(ask(dfn[x],dfn[x]+size[x]-1,k)),out[wz++]='\\n';\n\t\telse add(dfn[x],dfn[x]+size[x]-1,k);\n\t}\n\tfwrite(out,1,wz,stdout);\n} \n```\n",
        "postTime": 1635934870,
        "uid": 203623,
        "name": "Ntokisq",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3712 \u5c11\u5973\u4e0e\u6218\u8f66"
    }
]