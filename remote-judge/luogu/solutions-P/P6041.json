[
    {
        "content": "\u7406\u8bba\u4e0a\u662f\u53ef\u4ee5\u8fbe\u5230$nlogn$\u7684\n\n\u4f46\u662f\u6211\u7684\u957f\u94fe\u5256\u5206\u8dd1\u7684\u3002\u3002\u3002\u3002\n\n$nlogn$\u7684\u957f\u94fe\u5256\u5206\u8dd1\u7684\u8fd8\u6ca1$nlog^2n$\u7684\u500d\u589e\u8dd1\u7684\u5feb\n\n$nlog^2n$\u7684\u500d\u589e\u80fd\u8fc7$nlogn$\u7684\u957f\u94fe\u5256\u5206\u505a\u6cd5\u8fc7\u4e0d\u4e86\n\n\u5982\u679c\u80fd\u6709\u54ea\u4f4d\u5927\u4f6c\u6bd4\u8f83\u95f2\u62dc\u6258\u7ed9\u849f\u84bb\u5361\u5361\u5e38\n\n\u4f46\u957f\u94fe\u5256\u5206\u5f00\u4e86$O2$\u8dd1\u7684\u98de\u5feb(\u6bd4\u500d\u589e\u5feb\n\n\u521d\u6b65\u4f30\u8ba1\u662f$vector$\u7684\u95ee\u9898\n\n\u6765\u8bf4\u505a\u6cd5\n\n\u53ef\u4ee5\u8003\u8651$bfs$\u5e8f\n\n\u8fd9\u6837\u6bcf\u4e00\u5c42\u5728$bfs$\u5e8f\u4e2d\u5c31\u662f\u4e00\u4e2a\u533a\u95f4\n\n\u56e0\u4e3a\u6211\u4eec\u662f\u6309\u7167\u4e00\u4e2a\u987a\u5e8f\u6765\u904d\u5386\u7684\n\n\u56e0\u6b64\u6bcf\u4e00\u5c42\u7684\u8282\u70b9\u5728$bfs$\u5e8f\u4e2d\u662f\u5355\u8c03\u7684\n\n\u6240\u4ee5\u4ed6\u4eec\u7684$k$\u7ea7\u7956\u5148\u4e5f\u662f\u5355\u8c03\u7684\n\n\u7531\u6b64\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u4e8c\u5206\n\n\u627e\u5230\uff08\u5728\u7b2c$i$\u5c42\u4e2d$k$\u7ea7\u7956\u5148\u662f$u$\uff09\u7684\u533a\u95f4\u7684\u5de6\u53f3\u7aef\u70b9\n\n\uff08\u52a0\u4e2a\u62ec\u53f7\u9632\u6b62\u6709\u6b67\u4e49\uff09\n\n\u627e\u5230\u4e86\u7136\u540e\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u6bcf\u4e2a\u989c\u8272\u90fd\u5f00\u4e00\u4e2a\u524d\u7f00\u548c\n\n\u5f53\u7136\u7531\u4e8e\u8fc7\u5927\u6211\u4eec\u9700\u8981$vector$\n\n\u7136\u540e\u6211\u4eec\u5b58\u4e00\u4e0b\u6bcf\u4e2a$vector$\u91cc\u6bcf\u4e2a\u5143\u7d20\u7684\u6807\u53f7\n\n\uff08\u6240\u4ee5\u8fd8\u9700\u8981\u4e00\u4e2a$vector$\uff09\n\n\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4e8c\u5206\u627e\u5230\u5de6\u53f3\u7aef\u70b9\u5728$vector$\u91cc\u7684\u4f4d\u7f6e\n\n\u7136\u540e\u6211\u4eec\u5c31\u53ef\u4ee5\u7edf\u8ba1\u67d0\u4e2a\u533a\u95f4\u91cc\u989c\u8272\u662f$c$\u7684\u8282\u70b9\u7684\u6743\u503c\u4e4b\u548c\n\n\u7531\u4e8e\u500d\u589e\u627e$k$\u7ea7\u7956\u5148\u662f$logn$\u7684\n\n\u4e8c\u5206\u4e5f\u662f$logn$\u7684\n\n\u6240\u4ee5\u603b\u4f53\u65f6\u95f4\u590d\u6742\u5ea6\u662f$nlog^2n$\u7684\n\n\u5f53\u7136\u53ef\u4ee5\u901a\u8fc7\u957f\u94fe\u5256\u5206\u4f18\u5316\u5230$nlogn$\n\n\u4f46\u6b63\u5982\u6211\u5f00\u5934\u6240\u8bf4\u6211\u5199\u7684\u5e38\u6570\u8f83\u5927\u4e0d\u5438\u6c27\u8fc7\u4e0d\u4e86\n\ncode\uff08\u500d\u589e\uff09\uff1a\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#define FUP(i,x,y) for(int i=(x);i<=(y);i++)\n#define FDW(i,x,y) for(int i=(x);i>=(y);i--)\n#define MAXN 500010\n#define INF 0x7fffffff\n#define MOD 1000000007\n#define ll long long\n#define db double\nusing namespace std;\nint read(){\n    int w=0,flg=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')flg=-1;ch=getchar();}\n    while(ch<='9'&&ch>='0'){w=w*10-'0'+ch,ch=getchar();}\n    return w*flg;\n}\n//edge\nint head[MAXN],ednum;\nstruct edge{\n\tint nxt,to;\n}ed[MAXN];\nvoid add_Edge(int u,int v)\n{\n\tednum++;\n\ted[ednum].nxt=head[u],ed[ednum].to=v;\n\thead[u]=ednum;\n}\n//readin\nint n,q,col[MAXN],d[MAXN],dad,pos,lev;\n//k\nint lg[MAXN],bg[MAXN];\n//node\nint num[MAXN],dep[MAXN],fa[MAXN][21];\n//bfs\nint bfscnt,re[MAXN],que[MAXN],front,tail;\nvoid bfs()\n{\n\tque[0]=1,dep[1]=1;\n\twhile(front<=tail)\n\t{\n\t\tint u=que[front++];\n\t\tre[++bfscnt]=u,num[u]=bfscnt;\n\t\tif(bg[dep[u]]==0)\n\t\t{\n\t\t\tbg[dep[u]]=bfscnt;\n\t\t}\n\t\tfor(int i=head[u];i;i=ed[i].nxt)\n\t\t{\n\t\t\tdep[ed[i].to]=dep[u]+1;\n\t\t\tque[++tail]=ed[i].to;\n\t\t}\n\t}\n}\n//dfs\nvoid dfs(int u)\n{\n\tfor(int i=1;(1<<i)<dep[u];i++)\n\t{\n\t\tfa[u][i]=fa[fa[u][i-1]][i-1];\n\t}\n\tfor(int i=head[u];i;i=ed[i].nxt)\n\t{\n\t\tdfs(ed[i].to);\n\t}\n}\n//prep\nvector<int>vc[MAXN],id[MAXN];\nvoid init()\n{\n\tn=read(),q=read();\n\tFUP(i,1,n)\n\t{\n\t\tvc[i].push_back(0),id[i].push_back(0);\n\t\tlg[i]=lg[i-1]+(1<<lg[i-1]==i),lg[i-1]--;\n\t\tcol[i]=read();\n\t}\n\tlg[n]--;\n\tFUP(i,1,n)\n\t{\n\t\td[i]=read();\n\t}\n\tFUP(i,2,n)\n\t{\n\t\tdad=read(),add_Edge(dad,i),fa[i][0]=dad;\n\t}\n\tbfs();\n\tdfs(1);\n\tFUP(i,1,n)\n\t{\n\t\tint c=col[re[i]];\n\t\tif(vc[c].size()==0)\n\t\t{\n\t\t\tvc[c].push_back(d[re[i]]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tint lst=vc[c][vc[c].size()-1];\n\t\t\tvc[c].push_back(lst+d[re[i]]);\n\t\t}\n\t\tid[c].push_back(i);\n\t}\n}\n//query\nint query_k(int u,int k)\n{\n\tint tmp=0;\n\tFDW(i,lg[k],0)\n\t{\n\t\tif(tmp+(1<<i)<=k)\n\t\t{\n\t\t\ttmp+=(1<<i);\n\t\t\tu=fa[u][i];\n\t\t}\n\t}\n\treturn u;\n}\nint query_side(int u,int k,int opt)\n{\n\tint l=bg[dep[u]+k],r=bg[dep[u]+k+1]-1,ret;\n\tif(r<0)\n\t{\n\t\tr=n;\n\t}\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1,kfa=query_k(re[mid],k);\n\t\tif(num[kfa]<num[u])\n\t\t{\n\t\t\tl=mid+1;\n\t\t}\n\t\tif(num[kfa]>num[u])\n\t\t{\n\t\t\tr=mid-1;\n\t\t}\n\t\tif(num[kfa]==num[u])\n\t\t{\n\t\t\tret=mid;\n\t\t\tif(opt==0)\n\t\t\t{\n\t\t\t\tr=mid-1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tl=mid+1;\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}\nint midck(int x,int c)\n{\n\tint ret,l=0,r=vc[c].size()-1;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(id[c][mid]<=x)\n\t\t{\n\t\t\tret=mid,l=mid+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr=mid-1;\n\t\t}\n\t}\n\treturn ret;\n}\nint query_col(int ql,int qr,int c)\n{\n\tql--;\n\tint rl=midck(ql,c),rr=midck(qr,c);\n\t//printf(\"%d,\",c);\n\t//printf(\"%d,%d,%d\\n\",rl,rr,vc[c].size());\n\t//puts(\"1111\");\n\treturn vc[c][rr]-vc[c][rl];\n}\nint query(int pos,int lev)\n{\n\tpos=query_k(pos,lev);\n\tif(pos==0)\n\t{\n\t\treturn 0;\n\t}\n\tint l=query_side(pos,lev,0),r=query_side(pos,lev,1);\n\t//printf(\"%d,%d\\n\",l,r);\n\treturn query_col(l,r,col[pos]);\n}\n//solve\nvoid solve()\n{\n\tFUP(i,1,q)\n\t{\n\t\tpos=read(),lev=read();\n\t\tprintf(\"%d\\n\",query(pos,lev));\n\t}\n}\nint main(){\n\t//freopen(\"data.in\",\"r\",stdin);\n\t//freopen(\"zj.out\",\"w\",stdout);\n\tinit();\n\tsolve();\n    return 0;\n}\n```\n\ncode\uff08\u957f\u94fe\u5256\u5206\uff09\uff1a\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#define FUP(i,x,y) for(rg i=(x);i<=(y);i++)\n#define FDW(i,x,y) for(rg i=(x);i>=(y);i--)\n#define MAXN 500010\n#define INF 0x7fffffff\n#define MOD 1000000007\n#define ll long long\n#define db double\n#define rg register int\nusing namespace std;\ninline int read(){\n    int w=0,flg=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')flg=-1;ch=getchar();}\n    while(ch<='9'&&ch>='0'){w=w*10-'0'+ch,ch=getchar();}\n    return w*flg;\n}\n//edge\nint head[MAXN],ednum;\nstruct edge{\n\tint nxt,to;\n}ed[MAXN];\ninline void add_Edge(int u,int v)\n{\n\tednum++;\n\ted[ednum].nxt=head[u],ed[ednum].to=v;\n\thead[u]=ednum;\n}\n//readin\nint n,q,col[MAXN],d[MAXN],dad,pos,lev;\n//k\nint lg[MAXN],bg[MAXN];\n//node\nint num[MAXN],dep[MAXN],fa[MAXN][21];\n//bfs\nint bfscnt,re[MAXN],que[MAXN],front,tail;\ninline void bfs()\n{\n\tque[0]=1,dep[1]=1;\n\twhile(front<=tail)\n\t{\n\t\trg u=que[front++];\n\t\tre[++bfscnt]=u,num[u]=bfscnt;\n\t\tif(bg[dep[u]]==0)\n\t\t{\n\t\t\tbg[dep[u]]=bfscnt;\n\t\t}\n\t\tfor(rg i=head[u];i;i=ed[i].nxt)\n\t\t{\n\t\t\tdep[ed[i].to]=dep[u]+1;\n\t\t\tque[++tail]=ed[i].to;\n\t\t}\n\t}\n}\n//dfs\nint son[MAXN],len[MAXN],top[MAXN];\ninline void dfs(int u)\n{\n\tfor(rg i=1;(1<<i)<dep[u];i++)\n\t{\n\t\tfa[u][i]=fa[fa[u][i-1]][i-1];\n\t}\n\tfor(rg i=head[u];i;i=ed[i].nxt)\n\t{\n\t\tdfs(ed[i].to);\n\t\tif(len[ed[i].to]>len[son[u]])\n\t\t{\n\t\t\tson[u]=ed[i].to;\n\t\t}\n\t}\n\tlen[u]=len[son[u]]+1;\n}\ninline void dfs2(int u,int topf)\n{\n\ttop[u]=topf;\n\tif(son[u])\n\t{\n\t\tdfs2(son[u],topf);\n\t}\n\tfor(rg i=head[u];i;i=ed[i].nxt)\n\t{\n\t\tif(ed[i].to!=son[u])\n\t\t{\n\t\t\tdfs2(ed[i].to,ed[i].to);\n\t\t}\n\t}\n}\n//prep\nvector<int>vc[MAXN],id[MAXN],up[MAXN],down[MAXN];\ninline void init()\n{\n\tn=read(),q=read();\n\tFUP(i,1,n)\n\t{\n\t\tvc[i].push_back(0),id[i].push_back(0);\n\t\tlg[i]=lg[i-1]+(1<<lg[i-1]==i),lg[i-1]--;\n\t\tcol[i]=read();\n\t}\n\tlg[n]--;\n\tFUP(i,1,n)\n\t{\n\t\td[i]=read();\n\t}\n\tFUP(i,2,n)\n\t{\n\t\tdad=read(),add_Edge(dad,i),fa[i][0]=dad;\n\t}\n\tbfs();\n\tdfs(1);\n\tdfs2(1,1);\n\tFUP(i,1,n)\n\t{\n\t\trg c=col[re[i]];\n\t\tif(vc[c].size()==0)\n\t\t{\n\t\t\tvc[c].push_back(d[re[i]]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\trg lst=vc[c][vc[c].size()-1];\n\t\t\tvc[c].push_back(lst+d[re[i]]);\n\t\t}\n\t\tif(top[i]==i)\n\t\t{\n\t\t\trg tmp=i;\n\t\t\tFUP(j,1,len[i]+1)\n\t\t\t{\n\t\t\t\tdown[i].push_back(tmp);\n\t\t\t\ttmp=son[tmp];\n\t\t\t}\n\t\t\ttmp=i;\n\t\t\tFUP(j,1,len[i]+1)\n\t\t\t{\n\t\t\t\tup[i].push_back(tmp);\n\t\t\t\ttmp=fa[tmp][0];\n\t\t\t}\n\t\t}\n\t\tid[c].push_back(i);\n\t}\n}\n//query\ninline int query_k(int u,int k)\n{\n\tif(k==0)\n\t{\n\t\treturn u;\n\t}\n\tif(dep[u]<=k)\n\t{\n\t\treturn 0;\n\t}\n\tu=fa[u][lg[k]];\n\tk^=(1<<lg[k]);\n\tif(dep[u]-dep[top[u]]>=k)\n\t{\n\t\treturn down[top[u]][dep[u]-dep[top[u]]-k];\n\t}\n\treturn up[top[u]][k-(dep[u]-dep[top[u]])];\n}\ninline int query_side(int u,rg k,int opt)\n{\n\tint l=bg[dep[u]+k],r=bg[dep[u]+k+1]-1,ret;\n\tif(r<0)\n\t{\n\t\tr=n;\n\t}\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1,kfa=query_k(re[mid],k);\n\t\tif(num[kfa]<num[u])\n\t\t{\n\t\t\tl=mid+1;\n\t\t}\n\t\tif(num[kfa]>num[u])\n\t\t{\n\t\t\tr=mid-1;\n\t\t}\n\t\tif(num[kfa]==num[u])\n\t\t{\n\t\t\tret=mid;\n\t\t\tif(opt==0)\n\t\t\t{\n\t\t\t\tr=mid-1;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tl=mid+1;\n\t\t\t}\n\t\t}\n\t}\n\treturn ret;\n}\ninline int midck(int x,int c)\n{\n\tint ret,l=0,r=vc[c].size()-1;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(id[c][mid]<=x)\n\t\t{\n\t\t\tret=mid,l=mid+1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tr=mid-1;\n\t\t}\n\t}\n\treturn ret;\n}\ninline int query_col(int ql,int qr,int c)\n{\n\tql--;\n\trg rl=midck(ql,c),rr=midck(qr,c);\n\t//prrgf(\"%d,\",c);\n\t//prrgf(\"%d,%d,%d\\n\",rl,rr,vc[c].size());\n\t//puts(\"1111\");\n\treturn vc[c][rr]-vc[c][rl];\n}\ninline int query(int pos,int lev)\n{\n\tpos=query_k(pos,lev);\n\tif(pos==0)\n\t{\n\t\treturn 0;\n\t}\n\tint l=query_side(pos,lev,0),r=query_side(pos,lev,1);\n\t//prrgf(\"%d,%d\\n\",l,r);\n\treturn query_col(l,r,col[pos]);\n}\n//solve\ninline void solve()\n{\n\tFUP(i,1,q)\n\t{\n\t\tpos=read(),lev=read();\n\t\tprintf(\"%d\\n\",query(pos,lev));\n\t}\n}\nint main(){\n\t//freopen(\"data.in\",\"r\",stdin);\n\t//freopen(\"zj.out\",\"w\",stdout);\n\tinit();\n\tsolve();\n    return 0;\n}\n```\n\u5982\u679c\u6709\u795e\u7287\u65e0\u804a\u62dc\u6258\u5e2e\u6211\u5361\u5361\u5e38\u6216\u624b\u5199\u4e00\u4e2a$vector$\u8c22\u8c22\u4e86\uff01",
        "postTime": 1581231110,
        "uid": 151366,
        "name": "Pbri",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6041 \u3010\u300cACOI2020\u300d\u5e03\u4e01\u6697\u6740\u8ba1\u5212\u3011"
    },
    {
        "content": "$\\ \\ \\ \\ \\ \\ \\ \\ \\color{dodgerblue}\\texttt{This is T3's Solution}$  \n$\\ \\ \\ \\ \\ \\ \\ \\ $[$\\color{dodgerblue}\\texttt{T3:Link}$](https://www.luogu.com.cn/problem/T115794) \n\n\u6b64\u9898\u51fa\u9898\u4eba ~~(\u5f53\u7136\u4e0d\u662f\u6211)~~ \u8868\u793a\u8fd9\u662f\u4e00\u9053 $DSU\\ on\\ tree$(\u6811\u4e0a\u542f\u53d1\u5f0f\u5408\u5e76) \u677f\u9898\uff0c\u7136\u540e\u4ed6\u4e0d\u5c51\u4e8e\u5199\u9898\u89e3\u3002\n\n\u4e8e\u662f\u5c31\u7531\u6211\u6765\u8f6c\u8ff0\u4e00\u4e0b\u3002\n\n## Subtask 1\n\n\u76f4\u63a5\u66b4\u529b $dfs$ \u6216 $bfs$ \u627e\u51fa\u70b9 $u$ \u7684 $k$ \u7ea7\u7956\u5148\u7136\u540e\u8ba1\u7b97\u5373\u53ef\u3002\n\n\u671f\u671b\u5f97\u5206\uff1a30\u5206\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\texttt{\u8fc7\u4e0d\u4e86})$\u3002\n\n\u8d34\u4e00\u4e0b\u4ee3\u7801\u5427\u3002\n```cpp\n//Author:C20211711LJS\n#include<bits/stdc++.h>\n#define mp make_pair\nusing namespace std;\nvector<int> G[500005];\nint n,q,fa[500005],col[500005],d[500005];\nint findByKthFather(int now,int rest)\n{\n\tif(!rest)\treturn now;\n\telse\treturn findByKthFather(fa[now],rest-1);\n}\nint bfs(int baser,int per,int ss)\n{\n\tint ans=0;\n\tqueue<pair<int,int> > Q;\n\tQ.push(mp(per,ss));\n\twhile(Q.size())\n\t{\n\t\tint now=Q.front().first,rest=Q.front().second;\n\t\tQ.pop();\n\t\tif(rest==0)\n\t\t{\n\t\t\tif(col[now]==col[baser])\tans+=d[now];\n\t\t\tcontinue;\n\t\t}\n\t\tfor(unsigned int i=0;i<G[now].size();++i)\tQ.push(mp(G[now][i],rest-1));\n\t}\n\treturn ans;\n}\nint main(){\n\tscanf(\"%d %d\",&n,&q);\n\tfor(int i=1;i<=n;++i)\tscanf(\"%d\",&col[i]);\n\tfor(int i=1;i<=n;++i)\tscanf(\"%d\",&d[i]);\n\tfor(int i=2;i<=n;++i)\tscanf(\"%d\",&fa[i]),G[fa[i]].push_back(i);\n\twhile(q-->0)\n\t{\n\t\tint u,k;\n\t\tscanf(\"%d %d\",&u,&k);\n\t\tint kthfather=findByKthFather(u,k);\n\t\tif(kthfather==0)\n\t\t{\n\t\t\tputs(\"0\");\n\t\t\tcontinue;\n\t\t}\n\t\tprintf(\"%d\\n\",bfs(kthfather,kthfather,k));\n\t}\n\treturn 0;\n}\n```\n\n## Subtask 2\n\n\u6811\u662f\u4e00\u6761\u94fe\uff0c\u6240\u4ee5\u70b9 $u$ \u7684 $k$ \u7ea7\u7956\u5148\u7684 $k$ \u7ea7\u513f\u5b50\u53ea\u4f1a\u6709\u70b9$u$\u3002\n\n\u76f4\u63a5\u7528\u500d\u589e\u627e\u51fa\u70b9 $u$ \u7684 $k$ \u7ea7\u7956\u5148\uff0c\u7136\u540e\u5224\u65ad\u4e24\u70b9\u7684\u989c\u8272\u662f\u5426\u76f8\u540c\u7136\u540e\u7b97\u8d21\u732e\u5373\u53ef\u3002\n\n\u4ee3\u7801\n```cpp\n//Author:FCBM71 \n#include<cstdio>\nconst int N=1e6+5,M=N<<1;\nint dep[N],fa[N],n,q,c[N],a[N],u,k,ord[N],so[N];\nint head[N],nxt[M],to[M],le[M],nume;\nnamespace Subtask2{\n\tvoid build(int x,int d){\n\t\tdep[x]=d;\n\t\tord[d]=x;\n\t\tif(so[x])build(so[x],d+1); \n\t}\n\tinline int query(int x,int k){\n\t\tint gr=ord[dep[x]-k];\n\t\treturn(c[gr]==c[x])?a[x]:0;\n\t}\n}\nint main(){\n\tscanf(\"%d %d\",&n,&q);\n\tfor(int i=1;i<=n;++i)scanf(\"%d\",&c[i]);\n\tfor(int i=1;i<=n;++i)scanf(\"%d\",&a[i]);\n\tusing namespace Subtask2;\n\tfor(int i=2;i<=n;++i){\n\t\tscanf(\"%d\",&fa[i]);\n\t\tso[fa[i]]=i;\n\t}\n\tbuild(1,1);\n\twhile(q--){\n\t\tscanf(\"%d%d\",&u,&k);\n\t\tif(k>=dep[u]){printf(\"0\\n\");continue;}\n\t\tprintf(\"%lld\\n\",query(u,k));\n\t}\n\treturn 0;\n}\n```\n## Subtask 3\n\n\u9996\u5148\uff0c\u6211\u4eec\u5148\u5f00\u4e00\u4e2a `vector` \u6570\u7ec4 $que$ \u5c06\u6bcf\u7ec4\u8be2\u95ee $\\{u,k\\}$ \u79bb\u7ebf\u4e0b\u6765\u8ba9 $que_{\\texttt{u \u7684 k \u7ea7\u7956\u5148}}$ \u5b58\u8fdb\u4e00\u4e2a\u4e09\u5143\u7ec4 $\\{a_i,b_i,c_i\\}$\uff0c\u8868\u793a\u8fd9\u662f\u7b2c $i$ \u4e2a\u8be2\u95ee\uff0c $u$ \u8282\u70b9\u7684\u6df1\u5ea6\uff0c$u$ \u8282\u70b9\u7684 $k$ \u7ea7\u7956\u5148\u7684\u989c\u8272\u3002\n\n\u6211\u4eec\u5b9a\u4e49 $cnt_{i,j}$ \u8868\u793a\u6df1\u5ea6\u4e3a $i$\uff0c\u989c\u8272\u4e3a $j$ \u83b7\u5f97\u7684\u603b\u8d21\u732e\uff0c\u7136\u540e\u66b4\u529b\u9012\u5f52\u8ba1\u7b97\uff0c\u8ba1\u7b97\u540e\u518d\u64a4\u9500\u8d21\u732e\u5c31\u53ef\u4ee5\u4e86\uff0c\u53ef\u662f\u8fd8\u662f\u8981 $TLE$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u6700\u574f\u4e3a $O(n^2)$\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u4e00\u79cd\u8d2a\u5fc3\u7b56\u7565\uff0c\u6211\u4eec\u6bcf\u6b21\u7b97\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c06\u91cd\u513f\u5b50\u7684\u7b54\u6848\u901a\u8fc7\u4fdd\u7559\u4f20\u5230\u7236\u4eb2\u8282\u70b9\uff0c\u5bf9\u4e8e\u8f7b\u513f\u5b50\u7684\u7b54\u6848\u6211\u4eec\u90fd\u76f4\u63a5\u66b4\u529b\u6c42\u51fa\u7b54\u6848\u3002\n\n\u53ef\u80fd\u6709\u4eba\u4f1a\u89c9\u5f97\u8fd9\u6837\u505a\u5e76\u6ca1\u6709\u6539\u53d8\u591a\u5c11\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fd9\u6837\u505a\u5df2\u7ecf\u5c06\u65f6\u95f4\u590d\u6742\u5ea6\u964d\u5230  $O(n\\log^2 n)$\u3002\n\n**\u6ce8\u610f\uff0c\u989c\u8272\u56e0\u4e3a\u592a\u5927\uff0c\u4e0d\u80fd\u76f4\u63a5\u5f00 $cnt$ \u6570\u7ec4\uff0c\u5426\u5219\u4f1a MLE\uff0c\u4f46\u662f\u4e5f\u4e0d\u80fd\u7528 STL \u7684 `map` \u4f1a TLE\uff0c\u53ea\u80fd\u624b\u5199 Hash\uff0c ```gp_hash_table``` \u4e5f\u662f\u53ef\u4ee5\u8fc7\u7684\u3002**\n\n\u4e3a\u4e86\u7b80\u4fbf\uff0c\u8fd9\u91cc\u7528\u7684 ```gp_hash_table```\u3002\u4e0a\u4ee3\u7801\u3002\n\n```cpp\n//Author:Walking_Dead\n#include <cmath>\n#include <vector>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/hash_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n#define Int register int\n#define MAXN 1000005\nstruct edge{\n\tint v,nxt;\n}e[MAXN << 1];\nint top = 1;\nint head[MAXN];\nvoid Add_Edge (int u,int v){\n\te[++ top] = edge {v,head[u]};\n\thead[u] = top;\n}\nint n,m;\nint col[MAXN],dep[MAXN],con[MAXN],par[MAXN][30];\nint son[MAXN],size[MAXN];\ngp_hash_table<int, int> cnt[MAXN];\nvoid dfs (int u,int fa){\n\tdep[u] = dep[fa] + 1,size[u] = 1;par[u][0] = fa;\n\tfor (Int i = head[u];i;i = e[i].nxt)\n\t{\n\t\tint v = e[i].v;\n\t\tif (v == fa) continue;\n\t\tdfs (v,u);\n\t\tsize[u] += size[v];\n\t\tif (size[v] > size[son[u]]) son[u] = v;\n\t}\n}\nvoid Init (){\n\tfor (Int j = 1;j <= 25;++ j)\n\t\tfor (Int i = 1;i <= n;++ i)\n\t\t\tpar[i][j] = par[par[i][j - 1]][j - 1];\n}\nint Ancestors (int u,int k){\n\tfor (Int i = 25;i >= 0;-- i)\n\t\tif (k >> i & 1)\n\t\t\tu = par[u][i];\n\treturn u;\n}\nbool vis[MAXN];\nvoid calc (int u,int val){\n\tcnt[dep[u]][col[u]] += val * con[u];\n\tfor (Int i = head[u];i;i = e[i].nxt)\n\t{\n\t\tint v = e[i].v;\n\t\tif (vis[v]) continue;\n\t\tcalc (v,val);\n\t}\n}\nstruct node{\n\tint id,dep,color;\n};\nvector <node> que[MAXN];\nint Ans[MAXN];\nvoid Solve (int u,int k){\n\tfor (Int i = head[u];i;i = e[i].nxt)\n\t{\n\t\tint v = e[i].v;\n\t\tif (v == son[u]) continue;\n\t\tSolve (v,0);\n\t}\n\tif (son[u]) Solve (son[u],1),vis[son[u]] = 1;\n\tcalc (u,1),vis[son[u]] = 0;\n\tfor (Int i = 0;i < que[u].size();++ i)\n\t\tAns[que[u][i].id] = cnt[que[u][i].dep][que[u][i].color];\n\tif (!k) calc (u,-1); \n}\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++)\nint read (){\n\tint x = 0;char c = getchar();int f = 1;\n\twhile (c < '0' || c > '9'){if (c == '-') f = -f;c = getchar();}\n\twhile (c >= '0' && c <= '9'){x = (x << 3) + (x << 1) + c - '0';c = getchar();}\n\treturn x * f;\n}\nvoid write (int x){\n\tif (x < 0){x = -x;putchar ('-');}\n\tif (x > 9) write (x / 10);\n\tputchar (x % 10 + '0');\n}\nsigned main(){\n\tn = read (),m = read ();\n\tfor (Int i = 1;i <= n;++ i) col[i] = read ();\n\tfor (Int i = 1;i <= n;++ i) con[i] = read ();\n\tfor (Int i = 2;i <= n;++ i){\n\t\tint fa = read ();\n\t\tAdd_Edge (fa,i);\n\t}\n\tdfs (1,0);\n\tInit ();\n\tfor (Int i = 1;i <= m;++ i){\n\t\tint u = read (),k = read ();\n\t\tint fafa = Ancestors (u,k);\n\t\tif (!fafa) continue;\n\t\tque[fafa].push_back(node {i,dep[u],col[fafa]});\n\t}\n\tSolve (1,1);\n\tfor (Int i = 1;i <= m;++ i)\n\t\twrite (Ans[i]),putchar ('\\n');\n\treturn 0;\n} \n```",
        "postTime": 1579499439,
        "uid": 154560,
        "name": "Silver187",
        "ccfLevel": 7,
        "title": "\u300cACOI2020\u300d\u5e03\u4e01\u6697\u6740\u8ba1\u5212  \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9898\u4e00\u5f00\u59cb\u89c9\u5f97\u50cfdsu on tree\uff0c\u4f46\u662f\u6211\u4e0d\u4f1a\u3002\n\n\u4e8e\u662f\u63d0\u4f9b\u4e24\u79cd\u505a\u6cd5\uff1a\n1. bfs + \u83ab\u961f\uff08\u590d\u6742\u5ea6\u4e0d\u6b63\u786e\uff0c\u9700\u4f7f\u7528\u90e8\u5206\u5206\u505a\u6cd5\u4ee5\u53ca\u5438\u6c27\uff09\n2. bfs + \u4e3b\u5e2d\u6811\uff08\u590d\u6742\u5ea6\u6b63\u786e\uff0c\u9700\u4f7f\u7528\u90e8\u5206\u5206\uff0c\u65e0\u9700\u5438\u6c27\u53ef\u8fc7\uff0c\u4f46\u662f\u5728\u5438\u6c27\u6761\u4ef6\u4e0b\u8dd1\u5f97\u6bd4\u4e0a\u9762\u7684\u6162\uff09\n\n## \u65b9\u6cd5\u4e00\n\n**\u5148\u8bf4\u4e00\u4e0b\u57fa\u7840\u7684bfs\u95ee\u9898\u3002**\n\n\u5e38\u89c1\u7684\u6811\u4e0a\u95ee\u9898\u597d\u50cf\u7528dfs\u5e8f\u89e3\u51b3\u7684\u6bd4\u8f83\u591a\uff08\u53ef\u80fd\u53ea\u662f\u849f\u84bb\u505a\u9898\u592a\u5c11\uff09\u3002\n\n\u5229\u7528dfs\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u89e3\u51b3\u4e00\u4e9b\u5b50\u6811\u95ee\u9898\u3002\u5229\u7528dfs\u5e8f\u4e0a\u4e00\u4e2a\u8282\u70b9\u540e\u9762\u4e00\u6bb5\u8fde\u7eed\u533a\u95f4\u90fd\u5728\u5b83\u7684\u5b50\u6811\u5f53\u4e2d\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898\u56e0\u4e3a\u9700\u8981\u7edf\u8ba1\u67d0\u4e00\u7ea7\u7684\u6240\u6709\u513f\u5b50\u7684\u4fe1\u606f\u3002\u8bf7\u539f\u8c05\u849f\u84bb\u6ca1\u60f3\u5230\u600e\u4e48\u7528dfs\u6765\u505a\u3002\n\n\u6240\u4ee5\u5c31\u6709\u4e86bfs\u7684\u505a\u6cd5\uff0c\u6839\u636ebfs\u7684\u6027\u8d28\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\uff0c\u4e00\u4e2a\u70b9\u7684\u67d0\u4e00\u7ea7\u7684\u6240\u6709\u513f\u5b50\u53cd\u6620\u5230bfs\u5e8f\u4e0a\u4e00\u5b9a\u4e5f\u662f\u4e00\u6bb5\u8fde\u7eed\u7684\u533a\u95f4\u3002\n\n\u5229\u7528\u500d\u589e\u548c\u4e8c\u5206\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 $O(log\\,n + 2\\, log^2n )$ \u7684\u65f6\u95f4\u5185\u6c42\u51fa\u6bcf\u4e2a\u8be2\u95ee\u6240\u9700\u8981\u7edf\u8ba1\u7684bfs\u5e8f\u533a\u95f4\uff0c\u8fd9\u4e2a\u533a\u95f4\u7684 $k$ \u7ea7\u7956\u5148\u662f\u540c\u4e00\u4e2a\u3002\u7b2c\u4e00\u4e2a $log$ \u662f\u500d\u589e\u627e\u7956\u5148\u7684\uff0c\u7b2c\u4e8c\u4e2a $log^2$ \u662f\u4e8c\u5206\u786e\u5b9a\u5de6\u7aef\u70b9\u7684\uff0c\u7b2c\u4e09\u4e2a $log^2$ \u662f\u4e8c\u5206\u786e\u5b9a\u53f3\u7aef\u70b9\u7684\uff0c\u4e8c\u5206\u7684\u5224\u65ad\u65b9\u5f0f\u662f\u770b $mid$ \u7684 $k$ \u7ea7\u7956\u5148\u662f\u4e0d\u662f\u4e5f\u662f\u8be5\u7956\u5148\uff0c\u6240\u4ee5\u662f $log^2$ \u7684\u3002\n\n\u7136\u540e\u95ee\u9898\u8f6c\u5316\u4e3a\u7ed9\u5b9a\u82e5\u5e72\u7ec4\u5de6\u7aef\u70b9\u53f3\u7aef\u70b9\uff0c\u5728\u4e00\u6bb5\u5e8f\u5217\u4e0a\u7edf\u8ba1\u4e00\u4e9b\u4fe1\u606f\u3002\u8fd9\u4e00\u770b\u5c31\u5f88**\u83ab\u961f**\u5bf9\u4e0d\u5bf9\u3002\n\n\u4f46\u662f 5e5 \u7684\u6570\u636e\u53ef\u80fd\u4f1a\u963b\u6321\u4e00\u4e9b\u4eba\u7684\u60f3\u6cd5\uff0c\u4f46\u662f\u6211\u6bd4\u8f83\u5934\u94c1\u3002~~\u672c\u7740\u6570\u636e\u4e00\u5b9a\u662f\u968f\u673a\u7684\u60f3\u6cd5~~\uff0c\u6211\u4ea4\u4e86\u4e00\u53d1\u53d1\u73b0\u53ea\u6709\u7b2c\u4e8c\u4e2a\u90e8\u5206\u5206\u4e0d\u53ef\u8fc7\u3002\n\n\u6240\u4ee5\u679c\u65ad\u6253\u4e0a\u90e8\u5206\u5206\u505a\u6cd5\u6c34\u8fc7\u3002\n\n### \u90e8\u5206\u5206\u505a\u6cd5\n\n\u5f88\u663e\u7136\u4e00\u4e2a\u8282\u70b9\u7684\u67d0\u4e00\u7ea7\u7684\u540e\u4ee3\u53ea\u4f1a\u6709\u4e00\u4e2a\u3002\u6240\u4ee5\u6bcf\u4e2a\u8be2\u95ee\u76f4\u63a5\u500d\u589e\u627e\u4ed6\u7684\u7956\u5148\uff0c\u5982\u679c\u989c\u8272\u76f8\u540c\u7b54\u6848\u5c31\u662f\u8be5\u8282\u70b9\u7684$d$\uff0c\u5426\u5219\u5c31\u662f0 \u3002\n\n## \u65b9\u6cd5\u4e8c\n\n\u4f46\u662f\u672c\u7740\u5bf9\u4eba\u6c11\u8d1f\u8d23\uff08~~\u61d2\u5f97\u5199\u522b\u7684\u9898~~\uff09\u7684\u539f\u5219\uff0c\u6211\u60f3\u4e86\u60f3\u600e\u4e48\u505a\u590d\u6742\u5ea6\u662f\u5bf9\u7684\u3002\n\n\u7136\u540e\u53d1\u73b0\u5904\u7406\u5e8f\u5217\u95ee\u9898\u67d0\u4e00\u6bb5\u533a\u95f4\u7684\u95ee\u9898\u53ef\u4ee5\u524d\u7f00\u548c\uff0c\u4f46\u662f\u7a7a\u95f4\u5f00\u4e0d\u4e0b\uff0c\u6240\u4ee5\u4e3b\u5e2d\u6811\u4e5f\u633a\u884c\u7684\u3002\n\n\u7136\u540e\u628a\u4e3b\u5e2d\u6811\u7684\u677f\u5b50\u6539\u4e00\u6539\u5c31\u53ef\u505a\u4e86\u3002\n\n\u8fd9\u4e2a\u4e3b\u5e2d\u6811\u662f\u5bf9\u989c\u8272\u5f00\u7684\uff0c\u5373 $l==r$ \u65f6 $sum[u]$ \u5bf9\u5e94\u7684\u5c31\u662f\u5728bfs\u5e8f\u4e0a ($1$ \u5230 \u67d0\u4e00\u4e0b\u6807) \u989c\u8272\u4e3a $l$ \u7684\u6743\u503c\u7684\u603b\u548c\uff0c\u652f\u6301\u5355\u70b9\u4fee\u6539\u5355\u70b9\u67e5\u8be2\u5373\u53ef\u3002\n\n\u6ce8\u610f\u6211\u7684\u4ee3\u7801\u91cc\u4e3b\u5e2d\u6811\u533a\u95f4\u53ea\u662f $[1,n]$ \u7684\uff0c\u5982\u679c\u6709\u989c\u8272\u5927\u4e8e $n$ \u7684\u8bdd\u4f1a\u9519\u3002\u7801\u7684\u65f6\u5019\u5fd8\u4e86\uff0c\u73b0\u5728\u61d2\u5f97\u6539\u4e86\u3002\u6b63\u786e\u7684\u505a\u6cd5\u662f\u8bfb\u5165\u65f6\u8bb0\u5f55\u4e00\u4e0b\u6700\u5927\u7684\u989c\u8272 $mx$\uff0c\u7136\u540e\u5efa\u6811\u5efa$[1,mx]$\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u7528 $O(log \\,n)$ \u590d\u6742\u5ea6\u505a\u5230\u5728\u7ebf\u56de\u7b54\u8be2\u95ee\u3002\n\n\u590d\u6742\u5ea6\u74f6\u9888\u5e94\u8be5\u662f $O(q \\, log^2n)$\uff0c\u5e94\u8be5\u662f\u53ef\u8fc7\u7684\uff0c\u4f46\u662f\u4e0d\u77e5\u9053\u4e3a\u4f55\u94fe\u7684\u60c5\u51b5\u5c31\u662f\u6709\u4e24\u4e2a\u70b9\u4f1aT \u3002\n\n\u611f\u89c9\u662f\u5e38\u6570\u7684\u95ee\u9898\uff0c\u770b\u5230\u9898\u89e3\u91cc $O(n \\, log \\, n)$ \u957f\u5256\u7684\u5927\u5144\u5f1f\u90fd\u8fc7\u4e0d\u53bb\u6211\u5c31\u4e0d\u60f3\u8c03\u4e86\u3002\n\n## \u6700\u540e\n\n\u55ef...\u611f\u89c9\u8fd9\u9898\u81ea\u5df1\u5199\u6076\u5fc3\u4e86\u3002\n\n### code1\uff08bfs + \u83ab\u961f\uff09\uff1a\n\n```cpp\n#include <queue>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\nconst int maxn = 5e5 + 10;\ninline int read() {\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') { if (c == '-') w = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') s = s * 10 + c - '0', c = getchar();\n\treturn s * w;\n}\nstruct edge {\n\tint nex;\n\tint to;\n} e[maxn << 1];\nint head[maxn];\nint tot;\nvoid Add(int u, int v) {\n\te[++tot] = (edge) { head[u], v }, head[u] = tot;\n}\nint n, m;\nint bfsclock;\nint c[maxn];\nint d[maxn];\nint son[maxn];\nint bfn[maxn];\nint idex[maxn];\nint sum[maxn];\nint ans[maxn];\nint fa[maxn][26];\nint bel[maxn];\nstruct node {\n\tint c;\n\tint l;\n\tint r;\n\tint id;\n\tbool operator < (const node &x) const {\n\t\tif (bel[l] != bel[x.l]) return l < x.l;\n\t\tif (bel[l] & 1) return r < x.r;\n\t\treturn r > x.r;\n\t}\n} Q[maxn];\nint Find(int u, int k) {\n\tint res = 0;\n\twhile (k) {\n\t\tif (k & 1) u = fa[u][res];\n\t\tres++, k >>= 1;\n\t}\n\treturn u;\n}\nvoid PreWork(int u) {\n\tfor (int i = 1; i <= 25; ++i) {\n\t\tfa[u][i] = fa[fa[u][i - 1]][i - 1];\n\t}\n\tfor (int i = head[u]; i; i = e[i].nex) {\n\t\tint v = e[i].to;\n\t\tif (v == fa[u][0]) continue;\n\t\tPreWork(v);\n\t}\n}\nqueue<int> que;\nbool vis[maxn];\nvoid bfs() {\n\tque.push(1);\n\twhile (!que.empty()) {\n\t\tint u = que.front();\n\t\tque.pop();\n\t\tbfn[u] = ++bfsclock;\n\t\tidex[bfsclock] = u;\n\t\tfor (int i = head[u]; i; i = e[i].nex) {\n\t\t\tint v = e[i].to;\n\t\t\tif (!vis[v]) que.push(v), vis[v] = 1;\n\t\t}\n\t}\n}\nvoid init() {\n\tint s = sqrt(n), cnt = 0;\n\tfor (int l = 1, r; l + s - 1 <= n; l += s) {\n\t\tr = l + s - 1;\n\t\tcnt++;\n\t\tfor (int i = l; i <= r; ++i) bel[i] = cnt;\n\t}\n\tif (s * cnt < n) {\n\t\tint l = s * cnt + 1;\n\t\tint r = n;\n\t\tcnt++;\n\t\tfor (int i = l; i <= r; ++i) bel[i] = cnt;\n\t}\n}\nvoid putin(int x) {\n\tsum[c[idex[x]]] += d[idex[x]];\n}\nvoid del(int x) {\n\tsum[c[idex[x]]] -= d[idex[x]];\n}\nint main() {\n\tcin >> n >> m;\n\tinit();\n\tfor (int i = 1; i <= n; ++i) c[i] = read();\n\tfor (int i = 1; i <= n; ++i) d[i] = read();\n\tfor (int i = 2; i <= n; ++i) {\n\t\tfa[i][0] = read();\n\t\tAdd(fa[i][0], i);\n\t\tson[fa[i][0]]++;\n\t}\n\tPreWork(1);\n\tbfs();\n\tint flag = 1;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif (son[i] > 1) flag = 0;\n\t}\n\tif (flag) {\n\t\tfor (int i = 1; i <= m; ++i) {\n\t\t\tint u = read(), k = read();\n\t\t\tint faa = Find(u, k);\n\t\t\tif (c[u] == c[faa]) cout << d[u] << '\\n';\n\t\t\telse cout << 0 << '\\n';\n\t\t}\n\t\treturn 0;\n\t}\n\tfor (int i = 1; i <= m; ++i) {\n\t\tint u = read(), k = read();\t\n\t\tint faa = Find(u, k);\n\t\tint l = 1, r = bfn[u] - 1, mid;\n\t\tQ[i].id = i;\n\t\tQ[i].c = c[faa];\n\t\twhile (l <= r) {\n\t\t\tmid = (l + r) >> 1;\n\t\t\tif (Find(idex[mid], k) == faa) r = mid - 1;\n\t\t\telse l = mid + 1;\n\t\t}\n\t\tQ[i].l = l;\n\t\tl = bfn[u] + 1, r = n;\n\t\twhile (l <= r) {\n\t\t\tmid = (l + r) >> 1;\n\t\t\tif (Find(idex[mid], k) == faa) l = mid + 1;\n\t\t\telse r = mid - 1;\n\t\t}\n\t\tQ[i].r = l - 1;\n\t}\n\tsort(Q + 1, Q + 1 + m);\n\tfor (int i = 1, l = 1, r = 0; i <= m; ++i) {\n\t\tnode q = Q[i];\n\t\twhile (l > q.l) putin(--l);\n\t\twhile (r < q.r) putin(++r);\n\t\twhile (l < q.l) del(l++);\n\t\twhile (r > q.r) del(r--);\n\t\tans[q.id] = sum[q.c];\n\t}\n\tfor (int i = 1; i <= m; ++i) cout << ans[i] << '\\n';\n\treturn 0;\n}\n```\n\n### code2\uff08bfs + \u4e3b\u5e2d\u6811\uff09\uff1a\n\n```cpp\n#include <queue>\n#include <cmath>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\ntypedef long long ll;\nconst int maxn = 5e5 + 10;\ninline int read() {\n\tint s = 0, w = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') { if (c == '-') w = -1; c = getchar(); }\n\twhile (c >= '0' && c <= '9') s = s * 10 + c - '0', c = getchar();\n\treturn s * w;\n}\nstruct edge {\n\tint nex;\n\tint to;\n} e[maxn << 1];\nint head[maxn];\nint tot;\nvoid Add(int u, int v) {\n\te[++tot] = (edge) { head[u], v }, head[u] = tot;\n}\nint n, m;\nint bfsclock;\nint son[maxn];\nint c[maxn];\nint d[maxn];\nint bfn[maxn];\nint idex[maxn];\nint fa[maxn][26];\nint Find(int u, int k) {\n\tint res = 0;\n\twhile (k) {\n\t\tif (k & 1) u = fa[u][res];\n\t\tres++, k >>= 1;\n\t}\n\treturn u;\n}\nvoid PreWork(int u) {\n\tfor (int i = 1; i <= 25; ++i) {\n\t\tfa[u][i] = fa[fa[u][i - 1]][i - 1];\n\t}\n\tfor (int i = head[u]; i; i = e[i].nex) {\n\t\tint v = e[i].to;\n\t\tif (v == fa[u][0]) continue;\n\t\tPreWork(v);\n\t}\n}\nqueue<int> que;\nbool vis[maxn];\nvoid bfs() {\n\tque.push(1);\n\twhile (!que.empty()) {\n\t\tint u = que.front();\n\t\tque.pop();\n\t\tbfn[u] = ++bfsclock;\n\t\tidex[bfsclock] = u;\n\t\tfor (int i = head[u]; i; i = e[i].nex) {\n\t\t\tint v = e[i].to;\n\t\t\tif (!vis[v]) que.push(v), vis[v] = 1;\n\t\t}\n\t}\n}\n\n//\u4e3b\u5e2d\u6811\nint cnt;\nint rt[maxn];\nll sum[maxn << 5];\nint ls[maxn << 5];\nint rs[maxn << 5];\nint build(int l, int r) {\n\tint root = ++cnt;\n\tsum[root] = 0;\n\tif (l == r) return root;\n\tint mid = (l + r) >> 1;\n\tls[root] = build(l, mid);\n\trs[root] = build(mid + 1, r);\n\treturn root;\n}\nint modify(int pre, int l, int r, int pos, int val) {\n\tint root = ++cnt;\n\tls[root] = ls[pre];\n\trs[root] = rs[pre];\n\tsum[root] = sum[pre] + val;\n\tif (l == r) return root;\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid) ls[root] = modify(ls[pre], l, mid, pos, val);\n\telse rs[root] = modify(rs[pre], mid + 1, r, pos, val);\n\treturn root;\n}\nint query(int u, int v, int l, int r, int pos) {\n\tif (l == r) return sum[v] - sum[u];\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid) return query(ls[u], ls[v], l, mid, pos);\n\treturn query(rs[u], rs[v], mid + 1, r, pos);\n}\n\nint main() {\n\tcin >> n >> m;\n\tfor (int i = 1; i <= n; ++i) c[i] = read();\n\tfor (int i = 1; i <= n; ++i) d[i] = read();\n\tfor (int i = 2; i <= n; ++i) {\n\t\tfa[i][0] = read();\n\t\tAdd(fa[i][0], i);\n\t\tson[fa[i][0]]++;\n\t}\n\tPreWork(1);\n\tbfs();\n\tint flag = 1;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tif (son[i] > 1) flag = 0;\n\t}\n\tif (flag) {\n\t\tfor (int i = 1; i <= m; ++i) {\n\t\t\tint u = read(), k = read();\n\t\t\tint faa = Find(u, k);\n\t\t\tif (c[u] == c[faa]) cout << d[u] << '\\n';\n\t\t\telse cout << 0 << '\\n';\n\t\t}\n\t\treturn 0;\n\t}\n\trt[0] = build(1, n);\n\tfor (int i = 1; i <= n; ++i) {\n\t\trt[i] = modify(rt[i - 1], 1, n, c[idex[i]], d[idex[i]]);\n\t}\n\tfor (int i = 1; i <= m; ++i) {\n\t\tint u = read(), k = read();\t\n\t\tint faa = Find(u, k);\n\t\tif (!faa) {\n\t\t    cout << 0 << '\\n';\n\t\t    continue;\n\t\t}\n\t\tint l = 1, r = bfn[u] - 1, mid;\n\t\tint L, R;\n\t\twhile (l <= r) {\n\t\t\tmid = (l + r) >> 1;\n\t\t\tif (Find(idex[mid], k) == faa) r = mid - 1;\n\t\t\telse l = mid + 1;\n\t\t}\n\t\tL = l;\n\t\tl = bfn[u] + 1, r = n;\n\t\twhile (l <= r) {\n\t\t\tmid = (l + r) >> 1;\n\t\t\tif (Find(idex[mid], k) == faa) l = mid + 1;\n\t\t\telse r = mid - 1;\n\t\t}\n\t\tR = l - 1;\n\t\tprintf(\"%d\\n\", query(rt[L - 1], rt[R], 1, n, c[faa]));\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1605775193,
        "uid": 315472,
        "name": "zfio",
        "ccfLevel": 4,
        "title": "\u300cACOI2020\u300d\u5e03\u4e01\u6697\u6740\u8ba1\u5212 \u9898\u89e3"
    }
]