[
    {
        "content": "\u770b\u5230\u6570\u636e\u8303\u56f4\u8fd9\u4e48\u5c0f\uff0c\u90a3\u4e48\u5e94\u8be5\u662f\u4e2a\u7acb\u65b9\u5de6\u53f3\u7684\u7b97\u6cd5\u3002\n\n\u4f46\u662f\u6211\u4eec\u5177\u4f53\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u7b97\u6cd5\uff0c\u6211\u4eec\u5148\u6765\u53d1\u6398\u4e00\u4e9b\u6027\u8d28\uff1a\n\n- \u5728\u767b\u673a\u6865\u4e4b\u95f4\u6216\u6446\u6e21\u8f66\u4e4b\u95f4\u778e\u52a8\u662f\u6ca1\u610f\u4e49\u7684\uff0c\u8fd9\u663e\u7136\u3002\n\n- \u4e0d\u4f1a\u6709\u5728\u6446\u6e21\u8f66\u7684\u98de\u673a\u79fb\u52a8\u5230\u767b\u673a\u6865\uff0c\u8fd9\u4e5f\u663e\u7136\u3002\n\n- \u5982\u679c\u4e00\u4e2a\u98de\u673a\u4ece\u767b\u673a\u6865\u79fb\u52a8\u5230\u6446\u6e21\u8f66\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u5728\u767b\u8bb0\u540e\u4e0b\u4e00\u4e2a\u65f6\u523b\u9a6c\u4e0a\u8fc7\u53bb\uff0c\u5426\u5219\u4f1a\u767d\u767d\u5360\u7528\u767b\u673a\u6865\u7684\u4f4d\u7f6e\u3002\n\n\u6709\u4e86\u8fd9\u4e09\u6761\u4e4b\u540e\u6211\u4eec\u53d1\u73b0\u98de\u673a\u53ef\u9009\u7684\u72b6\u6001\u53ea\u5269\u4e0b\u4e86\u4e09\u79cd\uff1a\n\n- \u4e00\u76f4\u5728\u6446\u6e21\u8f66\u3002\n\n- \u4e00\u76f4\u5728\u767b\u673a\u6865\u3002\n\n- \u5728\u767b\u673a\u6865\u767b\u673a\u4e4b\u540e\u4e0b\u4e00\u65f6\u523b\u53bb\u6446\u6e21\u8f66\u3002\n\n\u8fd9\u770b\u8d77\u6765\u5c31\u975e\u5e38\u8d39\u7528\u6d41\uff0c\u6211\u4eec\u8003\u8651\u5efa\u56fe\u3002\n\n\uff08\u4ee5\u4e0b $i$ \u8868\u793a\u65f6\u95f4\u70b9\uff0c$i'$ \u8868\u793a\u98de\u673a\u70b9\u3002\uff09\n\n\u540c\u65f6\u5904\u7406\u767b\u673a\u6865\u548c\u6446\u6e21\u8f66\u4e0d\u597d\u5f04\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u65e0\u89e3\u5224\u6389\uff08\u8fd9\u5bb9\u6613\u4f7f\u7528\u5dee\u5206\u52a0\u4e00\u904d\u524d\u7f00\u548c\u529e\u5230\uff09\uff0c\u56e0\u4e3a\u98de\u673a\u53ea\u53ef\u80fd\u4ece\u767b\u673a\u6865\u5230\u6446\u6e21\u8f66\u800c\u4e0d\u4f1a\u8fd4\u56de\u6765\uff0c\u6240\u4ee5\u98de\u673a\u53bb\u4e86\u6446\u6e21\u8f66\u90a3\u8fb9\u5c31\u53ef\u4ee5\u89c6\u4e3a\u76f4\u63a5\u8d77\u98de\uff0c\u4e0d\u7528\u7ba1\u8fd9\u4e2a\u98de\u673a\u4e86\u3002\u8fd9\u6837\u53ea\u8003\u8651\u767b\u673a\u6865\uff0c\u95ee\u9898\u53d8\u5f97\u7b80\u5355\u4e00\u4e9b\u3002\n\n\u9996\u5148\u79bb\u6563\u5316\u65f6\u95f4\uff0c\u5bf9\u6bcf\u4e2a\u65f6\u95f4\u5efa\u4e00\u4e2a\u70b9\uff0c\u6bcf\u4e2a\u98de\u673a\u5efa\u4e00\u4e2a\u70b9\u3002\u76f8\u90bb\u4e24\u4e2a\u65f6\u95f4\u70b9\u8fde\u8fb9 $(i,i+1,a,0)$ \u8868\u793a\u98de\u673a\u505c\u5728\u8fd9\u91cc\uff08\u767b\u673a\u6865\u6700\u591a\u53ea\u80fd\u505c $a$ \u67b6\u98de\u673a\uff09\uff1b\u5bf9\u4e8e\u6bcf\u4e2a\u98de\u673a\uff0c\u8fde\u8fb9 $(i',T,1,0)$ \u8868\u793a\u98de\u673a\u8d77\u98de\uff0c$(S,s,1,0)$ \u8868\u793a $s$ \u65f6\u8fd9\u4e2a\u98de\u673a\u5230\u8fbe\u3002\n\n\u7136\u540e\u6211\u4eec\u8ba8\u8bba\u4e09\u79cd\u72b6\u6001\uff1a\n\n- \u4e00\u76f4\u5728\u6446\u6e21\u8f66\uff1a\u4ed6\u6839\u672c\u6ca1\u6709\u505c\u5728\u767b\u673a\u6865\uff0c\u7b97\u5b8c\u8d21\u732e\u76f4\u63a5\u6254\u4e86\u5b83\uff0c\u4e8e\u662f\u8fde\u8fb9 $(s,i',1,x)$\u3002\n\n- \u4e00\u76f4\u5728\u767b\u673a\u6865\uff1a\u98de\u673a\u9700\u8981\u4e00\u76f4\u7b49\u5230\u8d77\u98de\u7684\u65f6\u523b\u624d\u79bb\u5f00\u767b\u673a\u6865\uff0c\u4f46\u662f\u6ca1\u6709\u8d21\u732e\uff0c\u8fde\u8fb9 $(t,i',1,0)$\u3002\n\n- \u5728\u767b\u673a\u6865\u767b\u673a\u4e4b\u540e\u4e0b\u4e00\u65f6\u523b\u53bb\u6446\u6e21\u8f66\uff1a\u5728 $s+1$ \u65f6\u523b\u4ee5\u540e\u98de\u673a\u5c31\u4e0d\u5728\u767b\u673a\u6865\u4e86\uff0c\u6211\u4eec\u8ba9\u4ed6\u7b49\u5f85\u4e00\u65f6\u523b\uff0c\u7136\u540e\u76f4\u63a5\u6254\u4e86\u5b83\uff0c\u8fde\u8fb9 $(s+1,i',1,px)$\u3002\n\n\u7136\u540e\u8dd1\u8d39\u7528\u6d41\uff0c\u5c31\u505a\u5b8c\u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\n#include<cstring>\n#include<cmath>\n#include<algorithm>\nusing namespace std;\nstruct edge\n{\n    int nxt,to,weight,val;\n}e[100001<<2];\nint T,n,m,p,tot=1,h[100001],s,t,cur[100001],dep[100001],cost,node[100001],cnt,plane[100001][3],sum[100001];\ndouble P;\nbool vis[100001];\ninline int read()\n{\n    int x=0;\n    char c=getchar();\n    while(c<'0'||c>'9')\n        c=getchar();\n    while(c>='0'&&c<='9')\n    {\n        x=(x<<1)+(x<<3)+(c^48);\n        c=getchar();\n    }\n    return x;\n}\ninline void add(int x,int y,int w,int val)\n{\n    e[++tot].nxt=h[x];\n    h[x]=tot;\n    e[tot].to=y;\n    e[tot].weight=w;\n    e[tot].val=val;\n}\ninline bool SPFA()\n{\n    for(register int i=0;i<=t;++i)\n    {\n        vis[i]=0;\n        dep[i]=0x3f3f3f3f;\n        cur[i]=h[i];\n    }\n    queue<int> q;\n    q.push(s);\n    dep[s]=0;\n    while(!q.empty())\n    {\n        int k=q.front();\n        q.pop();\n        vis[k]=0;\n        for(register int i=h[k];i;i=e[i].nxt)\n            if(e[i].weight&&dep[e[i].to]>dep[k]+e[i].val)\n            {\n                dep[e[i].to]=dep[k]+e[i].val;\n                if(!vis[e[i].to])\n                {\n                    vis[e[i].to]=1;\n                    q.push(e[i].to);\n                }\n            }\n    }\n    return dep[t]^dep[0];\n}\nint dfs(int k,int f)\n{\n    if(k==t)\n    {\n        vis[t]=1;\n        return f;\n    }\n    vis[k]=1;\n    int r=0,used=0;\n    for(register int i=cur[k];i;i=e[i].nxt)\n    {\n        cur[k]=i;\n        if((!vis[e[i].to]||vis[e[i].to]==t)&&e[i].weight&&dep[e[i].to]==dep[k]+e[i].val)\n            if((r=dfs(e[i].to,min(e[i].weight,f-used))))\n            {\n                e[i].weight-=r;\n                e[i^1].weight+=r;\n                used+=r;\n                cost+=r*e[i].val;\n                if(f==used)\n                    break;\n            }\n    }\n    return used;\n}\ninline int dinic()\n{\n    while(SPFA())\n    {\n        vis[t]=1;\n        while(vis[t])\n        {\n            memset(vis,0,sizeof vis);\n            dfs(s,1<<20);\n        }\n    }\n    return cost;\n}\nint main()\n{\n    T=read();\n    while(T--)\n    {\n        tot=1;\n        memset(e,0,sizeof e);\n        memset(h,0,sizeof h);\n        memset(node,0,sizeof node);\n        memset(sum,0,sizeof sum);\n        cost=0;\n        n=read(),m=read(),p=read();\n        scanf(\"%lf\",&P);\n        for(register int i=1;i<=n;++i)\n            plane[i][0]=read(),node[++cnt]=plane[i][1]=read(),node[++cnt]=plane[i][2]=read();\n        sort(node+1,node+cnt+1);\n        cnt=unique(node+1,node+cnt+1)-node-1;\n        s=n+cnt+1,t=s+1;\n        for(register int i=1;i<cnt;++i)\n        {\n            add(i,i+1,m,0);\n            add(i+1,i,0,0);\n        }\n        for(register int i=1;i<=n;++i)\n        {\n            plane[i][1]=lower_bound(node+1,node+cnt+1,plane[i][1])-node;\n            plane[i][2]=lower_bound(node+1,node+cnt+1,plane[i][2])-node;\n            ++sum[plane[i][1]];\n            --sum[plane[i][2]];\n            add(s,plane[i][1],1,0);\n            add(plane[i][1],s,0,0);\n            add(i+cnt,t,1,0);\n            add(t,i+cnt,0,0);\n            add(plane[i][2],i+cnt,1,0);\n            add(i+cnt,plane[i][2],0,0);\n            add(plane[i][1],i+cnt,1,plane[i][0]);\n            add(i+cnt,plane[i][1],0,-plane[i][0]);\n            add(plane[i][1]+1,i+cnt,1,(int)floor(plane[i][0]*P+1e-5));\n            add(i+cnt,plane[i][1]+1,0,(int)-floor(plane[i][0]*P+1e-5));\n        }\n        bool flag=1;\n        for(register int i=1;i<=cnt;++i)\n        {\n            sum[i]+=sum[i-1];\n            if(sum[i]>m+p)\n            {\n                puts(\"impossible\");\n                flag=0;\n                break;\n            }\n        }\n        if(!flag)\n            continue;\n        printf(\"%d\\n\",dinic());\n    }\n    return 0;\n}\n```\n",
        "postTime": 1627994015,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P7425 \u3010[THUPC2017] \u673a\u573a\u3011"
    },
    {
        "content": "\u6839\u636e\u6570\u636e\u8303\u56f4\uff0c\u4e0d\u59a8\u731c\u6d4b\uff0c\u53ef\u4ee5\u5229\u7528**\u8d39\u7528\u6d41**\u89e3\u51b3\u672c\u9898\u3002\n\n\u8d39\u7528\u6d41\u7684\u5e38\u89c1\u5957\u8def\u662f\u5c06\u65f6\u95f4\u4f5c\u4e3a\u8282\u70b9\u5efa\u56fe\uff0c\u672c\u9898\u4e5f\u4e0d\u4f8b\u5916\u3002\u6211\u4eec\u5c06\u6bcf\u67b6\u98de\u673a\u7684\u767b\u673a\u548c\u8d77\u98de\u65f6\u95f4\u79bb\u6563\u5316\uff0c\u4fbf\u53ef\u4ee5\u5f97\u5230 $m\\,(m\\le 2n)$ \u4e2a\u65f6\u95f4\u70b9\u3002\u90a3\u4e48\u672c\u9898\u7684\u505a\u6cd5\u5c31\u662f\uff1a\u901a\u8fc7\u8fd9\u4e9b\u65f6\u95f4\u70b9\u6784\u5efa\u7f51\u7edc\uff0c\u5c06\u98de\u673a\u6570\u4f5c\u4e3a\u5bb9\u91cf\uff0c\u4e0d\u6109\u5feb\u5ea6\u4f5c\u4e3a\u8d39\u7528\uff0c\u6c42\u89e3\u8d39\u7528\u6d41\u3002\n\n\u5728\u6b64\u4e4b\u524d\uff0c\u8981\u6ce8\u610f\u4e24\u70b9\uff1a\n\n- \u5148\u5224\u65ad\u65e0\u89e3\u7684\u60c5\u51b5\uff08\u8fd9\u662f\u56e0\u4e3a\u5728\u540e\u9762\u7684\u5efa\u56fe\u4e2d\uff0c\u6211\u4eec\u4f1a\u628a\u6bcf\u4e2a\u65f6\u523b\u70b9\u62c6\u5206\u6210\u5728\u505c\u673a\u6865\u548c\u6446\u6e21\u8f66\u7684\u4e24\u70b9\uff0c\u4f46\u7531\u4e8e\u4e24\u8005\u7684\u6570\u91cf\u4e0d\u7b49 $(a\\neq b)$\uff0c\u4e0d\u80fd\u76f4\u63a5\u4fdd\u8bc1\u62c6\u5206\u7684\u53ef\u884c\u6027\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u5148\u6392\u9664\u6b64\u7c7b\u65e0\u89e3\u60c5\u51b5\uff09\u3002\u8fd9\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u8981\u7edf\u8ba1\u6bcf\u4e2a\u65f6\u523b\u7684\u98de\u673a\u6570\u76ee\uff0c**\u4e00\u65e6\u8d85\u8fc7 $a+b$ \u4fbf\u65e0\u89e3**\u3002\n\n- **\u4e0d\u5e94**\u5c06\u4e0d\u6ee1\u610f\u5ea6\u4f5c\u4e3a\u8d39\u7528\u8dd1\u6700\u5c0f\u8d39\u7528\u6d41\u3002\u6b63\u786e\u7684\u505a\u6cd5\u662f\u5148\u5047\u8bbe\u6240\u6709\u4e58\u5ba2\u90fd\u5148\u53bb\u6446\u6e21\u8f66\uff0c\u5c31\u662f\u90fd\u5f88\u4e0d\u6ee1\u610f\uff08\u5373\u521d\u59cb\u5316 ${\\rm ans}=\\sum x_i$)\uff0c\u7136\u540e\u5c06\u6bcf\u6761\u8fb9\u7684\u8d39\u7528\u8bbe\u4e3a\u6b64\u6b21\u64cd\u4f5c\u53ef\u4ee5\u51cf\u5c0f\u7684\u4e0d\u6ee1\u610f\u5ea6\uff0c\u8dd1**\u6700\u5927\u8d39\u7528\u6d41**\u3002\u7136\u540e\u5c06 ${\\rm ans}$ \u51cf\u53bb\u8fd9\u4e2a\u6700\u5927\u8d39\u7528\uff0c\u5373\u53ef\u5f97\u5230\u6700\u5c0f\u4e0d\u6ee1\u610f\u5ea6\u3002\n\n\u660e\u786e\u8fd9\u4e24\u70b9\u540e\uff0c\u5c31\u53ef\u4ee5\u7ed9\u51fa\u5982\u4e0b\u7684\u5efa\u56fe\u6b65\u9aa4\uff1a\n\n1. \u8bbe\u7acb\u6e90\u70b9 $S=0$ \u548c\u6c47\u70b9 $T=m+1$\uff0c\u5206\u522b\u4ee3\u8868\u521d\u59cb\u65f6\u523b\u548c\u7ed3\u675f\u65f6\u523b\u3002\n\n2. \u5bf9\u4e8e\u6bcf\u4e2a\u65f6\u95f4\u70b9 $i\\,(1\\le i\\le m)$\uff0c\u5c06\u5176\u62c6\u5206\u6210\u4e24\u4e2a\u70b9 $i$ \u548c $i'$\uff0c\u5206\u522b\u4ee3\u8868\u8be5\u65f6\u523b\u7684\u505c\u673a\u697c\u548c\u6446\u6e21\u8f66\u3002\n\n3. \u8fde\u63a5 $S\\to 1\\to 2\\to\\cdots\\to m\\to T$\u3002\u5176\u4e2d\u6bcf\u6761\u8fb9\u5bb9\u91cf\u4e3a $a$\uff0c\u8d39\u7528\u4e3a $0$\u3002\u8fd9\u4ee3\u8868\u505c\u673a\u697c\u6570\u91cf\u6052\u4e3a $a$\uff0c\u4e14\u4e00\u76f4\u5446\u5728\u505c\u673a\u697c\u5e76\u4e0d\u4f1a\u51cf\u5c0f\u4e58\u5ba2\u4e0d\u6ee1\u610f\u5ea6\u3002\n\n\n4. \u5bf9\u4e8e\u6bcf\u4e2a\u767b\u673a\u65f6\u523b $s_i$\uff0c\u8fde\u63a5 $s_i\\to i'$\u3002\u5bb9\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $0$\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u5df2\u7ecf\u9ed8\u8ba4\u4e58\u5ba2\u90fd\u5148\u53bb\u6446\u6e21\u8f66\u4e86\uff0c\u4e0d\u4f1a\u6539\u53d8\u4e0d\u6ee1\u610f\u5ea6\u3002\n\n5. \u5bf9\u4e8e\u6bcf\u4e2a\u8d77\u98de\u65f6\u523b $t_i$\uff0c\u8fde\u63a5 $i'\\to t_i$\u3002\u5bb9\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $x_i$\u3002\u4ee3\u8868\u4e00\u5f00\u59cb\u53bb\u505c\u673a\u697c\u53ef\u4ee5\u51cf\u5c11 $x_i$ \u7684\u4e0d\u6ee1\u610f\u5ea6\u3002\n\n6. \u5bf9\u4e8e\u6bcf\u4e2a\u767b\u673a\u65f6\u523b $s_i$\uff0c\u8fde\u63a5 $i'\\to s_i+1$\n\u3002\u5bb9\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $x_i-px_i$\u3002\u8fd9\u4ee3\u8868\u4e34\u65f6\u4ece\u6446\u6e21\u8f66\u8f6c\u53bb\u505c\u673a\u697c\u53ef\u4ee5\u51cf\u5c11 $x_i$ \u7684\u4e0d\u6ee1\u610f\u5ea6\uff0c\u4f46\u5207\u6362\u4f1a\u5e26\u6765 $px_i$ \u7684\u4e0d\u6ee1\u610f\u5ea6\u3002\n\n\u81f3\u6b64\u6211\u4eec\u4fbf\u5b8c\u6210\u4e86\u7f51\u7edc\u7684\u6784\u5efa\u3002\u5229\u7528 Dinic \u4e4b\u7c7b\u7684\u7b97\u6cd5\u6c42\u51fa\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n---\n\n```cpp\n#include<bits/stdc++.h>\n#define nb 666\n#define mb 23333\n#define inf 1e8\n#define X(a) memset(a, 0, sizeof(a))\nusing namespace std;\n\nint ans, _, n, m, a, b, x[nb], s[nb], t[nb], O[nb], sum[nb];\nint S, T, cnt, dis[nb], head[mb], cur[mb];\nbool vis[nb];\ndouble p;\n\nstruct edge{\n\tint to, next, val, cost;\n}e[mb];\n\nvoid add_edge(int u, int v, int w, int c){\n\te[++cnt].to = v, e[cnt].val = w, e[cnt].cost =  c, e[cnt].next = head[u], head[u] = cnt;\n\te[++cnt].to = u, e[cnt].val = 0, e[cnt].cost = -c, e[cnt].next = head[v], head[v] = cnt;\n}\n\nbool SPFA(){\n\tmemset(dis, 0xcf, sizeof(dis));\n\tmemcpy(cur, head, sizeof(cur));\n\tdis[S] = 0, vis[S] = 1;\n\tqueue<int> q;\n\tq.push(S);\n\twhile(!q.empty()){\n\t\tint u = q.front();\n\t\tq.pop(), vis[u] = 0;\n\t\tfor(int i = head[u]; i; i = e[i].next){\n\t\t\tint v = e[i].to;\n\t\t\tif(e[i].val && dis[v] < dis[u] + e[i].cost){\n\t\t\t\t// \u6c42\u6700\u5927\u8d39\u7528\uff0cSPFA \u5904\u7406\u6700\u957f\u8def\n\t\t\t\tdis[v] = dis[u] + e[i].cost;\n\t\t\t\tif(!vis[v]) q.push(v), vis[v] = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T] > -inf;\n}\n\nint DFS(int u, int in){\n\tif(u == T) return in;\n\tvis[u] = 1;\n\tint out = 0;\n\tfor(int &i = cur[u]; i && out < in; i = e[i].next){\n\t\tint v = e[i].to;\n\t\tif(!vis[v] && e[i].val && dis[v] == dis[u] + e[i].cost){\n\t\t\tint res = DFS(v, min(e[i].val, in - out));\n\t\t\tif(res) ans -= res * e[i].cost, e[i].val -= res, e[i ^ 1].val += res, out += res;\n\t\t\t//\t\u6ce8\u610f\u4e86\uff0c\u8fd9\u91cc\u662f \"ans -= ...\"\uff0c\u56e0\u4e3a\u8981\u5c3d\u53ef\u80fd\u591a\u5730\u51cf\u53bb\u4e0d\u6ee1\u610f\u5ea6\n\t\t}\n\t}\n\tvis[u] = 0;\n\treturn out;\n}\n\nint main(){\n\tfor(cin >> _; _; _--){\n\t\tans = 0, cnt = 1;\n\t\tX(sum), X(head), X(vis);\n\t\t// \u6e05\u7a7a\u6570\u7ec4\n\n\t\tcin >> n >> a >> b >> p;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tcin >> x[i] >> s[i] >> t[i];\n\t\t\tO[i * 2 - 1] = s[i], O[i * 2] = --t[i];\n\t\t}\n\t\tsort(O + 1, O + n * 2 + 1);\n\t\tm = unique(O + 1, O + n * 2 + 1) - O - 1;\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\t// \u79bb\u6563\u5316\uff0c\u540c\u65f6\u7edf\u8ba1\u6bcf\u65f6\u523b\u98de\u673a\u6570\u76ee\n\t\t\ts[i] = lower_bound(O + 1, O + m + 1, s[i]) - O;\n\t\t\tt[i] = lower_bound(O + 1, O + m + 1, t[i]) - O + 1;\n\t\t\tsum[s[i]]++, sum[t[i]]--;\n\t\t}\n\n\t\tbool oops = 0;\n\t\tfor(int i = 1; i <= m; i++){\n\t\t\tsum[i + 1] += sum[i];\n\t\t\toops |= (sum[i] > a + b);\n\t\t}\t// \u82e5\u67d0\u65f6\u523b\u98de\u673a\u6570\u76ee\u5927\u4e8e a + b \u5373\u65e0\u89e3\n\t\tif(oops){\n\t\t\tcout << \"impossible\\n\";\n\t\t\tcontinue;\n\t\t}\n\n\t\tS = 0, T = m + 1;\n\t\tfor(int i = 0; i <= m; i++){\n\t\t\tadd_edge(i, i + 1, a, 0);\n\t\t}\n\t\tfor(int i = 1; i <= n; i++){\n\t\t\tans += x[i];\t// \u5148\u7d2f\u8ba1\u4e0d\u6ee1\u610f\u5ea6\n\t\t\tadd_edge(s[i], i + 1 + m, 1, 0);\n\t\t\tadd_edge(i + 1 + m, s[i] + 1, 1, x[i] - floor(p * x[i] + 1e-5));\n\t\t\tadd_edge(i + 1 + m, t[i], 1, x[i]);\n\t\t\t// \u6309\u7167\u6240\u8ff0\u6b65\u9aa4\u5efa\u56fe\uff08\u8fd9\u91cc i' = i + 1 + m)\n\t\t}\n\t\twhile(SPFA()) DFS(S, inf);\t// \u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\n\t\tcout << ans << endl;\n\t}\n\treturn 0;\n}\n```\n\n---\n\n### \u8bf4\u5728\u540e\u9762\n\n\u8fd9\u9053\u9898\u7f51\u4e0a\u8c8c\u4f3c\u6ca1\u6709\u8be6\u7ec6\u7684\u9898\u89e3\uff0c\u6240\u4ee5\u4e2a\u4eba\u89c1\u89e3\u53ef\u80fd\u6709\u504f\u5dee\uff08\u5c24\u5176\u662f\u5efa\u56fe\u90a3\uff09\uff0c\u6b22\u8fce\u6307\u6b63\u3002",
        "postTime": 1627918784,
        "uid": 142338,
        "name": "pythoner713",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P7425 \u3010[THUPC2017] \u673a\u573a\u3011"
    }
]