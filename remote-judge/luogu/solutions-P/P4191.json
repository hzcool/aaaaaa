[
    {
        "content": "\u840c\u65b0\u521a\u5b66 FFT\uff0c\u7136\u540e\u5c31\u770b\u89c1\u4e86\u8fd9\u9898\uff0c\uff0c\n\n\u9996\u5148\u89c2\u5bdf\u9898\u76ee\u4e2d\u7ed9\u7684\u4f2a\u4ee3\u7801\uff0c\u4e0d\u96be\u53d1\u73b0\u8981\u6c42\u51fa\u5e8f\u5217 $a$ \u4e0e\u300c\u5e8f\u5217 $b$ \u7684\u5faa\u73af\u5377\u79ef $c$ \u6b21\u5e42\u300d\u7684\u5faa\u73af\u5377\u79ef\u3002\n\n\u4f60\u8981\u77e5\u9053\u4e00\u4e2a\u7ed3\u8bba\uff1a\u4e24\u4e2a\u957f\u4e3a $n$ \u7684\u5e8f\u5217\u5206\u522b DFT \u540e\uff0c\u5bf9\u5e94\u9879\u4e58\u8d77\u6765\u518d IDFT\uff0c\u5c31\u662f\u4e24\u4e2a\u5e8f\u5217\u505a\u957f\u5ea6\u4e3a $n$ \u7684\u5faa\u73af\u5377\u79ef\u7684\u7ed3\u679c\u3002\n\n\u8bc1\u660e\u5f88\u7b80\u5355\uff0c\u5957\u4e00\u4e0b\u5355\u4f4d\u6839\u53cd\u6f14\u5c31\u884c\u4e86\uff0c\u4e0d\u662f\u8fd9\u91cc\u4e3b\u8981\u8bb2\u7684\u5185\u5bb9\u3002\n\n****\n\u73b0\u5728\u7684\u95ee\u9898\u5c31\u662f\u600e\u4e48\u5feb\u901f\u505a\u7ed9\u5b9a\u957f\u4e3a $n$ \u7684 DFT\u3002\u867d\u7136 Bluestein \u53ef\u4ee5\u505a\uff0c\u4f46\u5e38\u6570\u8fc7\u5927\uff1b\u4e0d\u59a8\u8003\u8651\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u6761\u4ef6\uff1a$n$ \u7684\u8d28\u56e0\u5b50\u90fd\u4e0d\u8d85\u8fc7 $10$\u3002\n\n\u8bbe $d$ \u662f $n$ \u7684\u4e00\u4e2a\u8d28\u56e0\u5b50\uff0c\u5bf9 $A(x)$ \u505a DFT \u65f6\uff0c\u53ef\u4ee5\u5206\u6210 $d$ \u4e2a\u591a\u9879\u5f0f\uff1a\n\n$$A_i(x)=\\sum_{j=0}^{n/d-1} a_{i+jd}x^j$$\n\u8fd9\u6837\u5c31\u6709\n$$A(x)=\\sum_{i=0}^{d-1}x^iA_i(x^d)$$\n\u4ee3\u5165\u5355\u4f4d\u6839\u5c31\u662f\n$$A(\\omega_n^j)=\\sum_{i=0}^{d-1}\\omega_n^{ij}A_i(\\omega_n^{jd})$$\n$$A(\\omega_n^j)=\\sum_{i=0}^{d-1}\\omega_n^{ij}A_i(\\omega_{n/d}^j)$$\n\u76f4\u63a5\u5206\u6cbb\u505a\u5373\u53ef\u3002\n\n\u8fd9\u91cc\u5199\u7684\u662f\u9012\u5f52\u7248\uff0c\u6bd4\u8f83\u6162\uff1b\u7a0d\u5fae\u6539\u6539\uff0c\u5904\u7406\u51fa\u6bcf\u4e2a\u6570\u5728\u6700\u540e\u8dd1\u5230\u54ea\u4e2a\u4f4d\u7f6e\uff08\u5373\u666e\u901a FFT \u4e2d\u7684 rev \u6570\u7ec4\uff09\uff0c\u4e00\u5c42\u5c42\u5408\u5e76\u4e0a\u53bb\uff0c\u5c31\u662f\u8fed\u4ee3\u7248\u4e86\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff08\u5e38\u6570\u5de8\u5927\uff09\uff1a\n```cpp\n#pragma GCC optimize (2)\n#pragma GCC optimize (\"unroll-loops\")\n#include<cstdio>\n#include<iostream>\n#include<algorithm>\n#include<cstring>\n#include<cmath>\n#define N 500003\n#define ll long long\n#define reg register\nusing namespace std;\n\ninline void read(int &x){\n    x = 0;\n    char c = getchar();\n    while(c<'0'||c>'9') c = getchar();\n    while(c>='0'&&c<='9'){\n        x = (x<<3)+(x<<1)+(c^48);\n        c = getchar();\n    }\n}\n\nvoid print(int x){\n    if(x>9) print(x/10);\n    putchar(x%10+'0');\n}\n\nint p,r;\n\ninline int power(int a,int t){\n    int res = 1;\n    while(t){\n        if(t&1) res = (ll)res*a%p;\n        a = (ll)a*a%p;\n        t >>= 1;\n    }\n    return res;\n}\n\ninline int findrt(int x){\n    static int fac[N];\n    int cnt = 0,m = x-1;\n    for(reg int i=2;i*i<=m;++i){\n        if(m%i!=0) continue;\n        fac[++cnt] = i;\n        while(m%i==0) m /= i;\n    }\n    if(m>1) fac[++cnt] = m;\n    for(reg int i=2;i<=x;++i){\n        bool flag = true;\n        for(reg int j=1;j<=cnt;++j){\n            if(power(i,(x-1)/fac[j])!=1) continue;\n            flag = false;\n            break;\n        }\n        if(flag) return i;\n    }\n    return -1;\n}\n\nint fac[233]; // it's factor not factorial\nint cnt;\n\ninline void getfac(int x){\n    for(reg int i=2;i*i<=x;++i){\n        if(x%i!=0) continue;\n        while(x%i==0){\n            fac[++cnt] = i;\n            x /= i;\n        }\n    }\n    if(x>1) fac[++cnt] = x;\n}\n\nvoid dft(int *f,int n,int dep){\n    int rt[n];\n    rt[0] = 1,rt[1] = power(r,(p-1)/n);\n    for(reg int i=2;i!=n;++i) rt[i] = (ll)rt[i-1]*rt[1]%p;\n    if(n<=64){\n        int a[n];\n        memset(a,0,n<<2);\n        for(reg int i=0;i!=n;++i)\n        for(reg int j=0;j!=n;++j)\n            a[i] = (a[i]+(ll)f[j]*rt[i*j%n])%p;\n        memcpy(f,a,n<<2);\n        return;\n    }\n    int d = fac[dep],lim = n/fac[dep];\n    int g[d][lim];\n    for(reg int i=0;i!=d;++i)\n    for(reg int j=0;j!=lim;++j)\n        g[i][j] = f[i+j*d];\n    for(reg int i=0;i!=d;++i) dft(g[i],lim,dep+1);    \n    for(reg int j=0;j!=n;++j){\n        f[j] = 0;\n        for(reg int i=0;i!=d;++i)\n            f[j] = (f[j]+(ll)rt[i*j%n]*g[i][j%lim])%p;\n    }\n}\n\ninline void idft(int *f,int n){\n    reverse(f+1,f+n);\n    dft(f,n,1);\n    int x = power(n,p-2);\n    for(reg int i=0;i!=n;++i) f[i] = (ll)f[i]*x%p;\n}\n\nint n,k;\nint a[N],b[N];\n\nint main(){ \n    read(n),read(k);\n    p = n+1,r = findrt(n+1);\n    getfac(n);\n    for(reg int i=0;i!=n;++i) read(a[i]);\n    for(reg int i=0;i!=n;++i) read(b[i]);\n    dft(a,n,1),dft(b,n,1);\n    for(reg int i=0;i!=n;++i) a[i] = (ll)a[i]*power(b[i],k)%p;\n    idft(a,n);\n    for(reg int i=0;i!=n;++i) print(a[i]),putchar('\\n');\n    return 0;   \n}\n```",
        "postTime": 1588796513,
        "uid": 115864,
        "name": "NaCly_Fish",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4191 \u3010[CTSC2010]\u6027\u80fd\u4f18\u5316\u3011"
    },
    {
        "content": "***\n\u9898\u610f\uff1a\n\n\u7ed9\u5b9a\u957f\u5ea6\u4e3a $n$ \u7684\u591a\u9879\u5f0f $A, B$\n\n\u6c42 $A * B^C $ \u5faa\u73af\u5377\u79ef\u7684\u7ed3\u679c\uff0c\u6a21\u8d28\u6570 $n+1$\n***\n\n\u9996\u5148\u8981\u4f1a $\\mathrm{FFT}$\uff0c\u4e0d\u4ec5\u8981\u4f1a\u5199\uff0c\u800c\u4e14\u8981\u61c2\u539f\u7406\n\n\u5c06 $F(x)=a_0+a_1x+a_2x^2+\\dots+a_{n-1}x^{n-1}$ \u7684\u7cfb\u6570\u5206\u6210\u4e24\u90e8\u5206\n\n$$F^{[0]}(x)=a_0+a_2x+\\dots+a_{n-2}x^{\\frac{n-2}2}$$\n\n$$F^{[1]}(x)=a_1+a_3x+\\dots+a_{n-1}x^{\\frac{n-2}2}$$\n\n$$F(x)=F^{[0]}(x^2)+xF^{[1]}(x^2)$$\n\n\u5c06 $n$ \u6b21\u5355\u4f4d\u6839\u4ee3\u5165\n\n$$F(\\omega_n^i)=F^{[0]}(\\omega_n^{2i})+\\omega_n^iF^{[1]}(\\omega_n^{2i})$$\n\n\u7531\u4e8e\u5355\u4f4d\u6839\u5177\u6709\u6d88\u53bb\u5f8b\n\n$$F(\\omega_n^i)=F^{[0]}(\\omega_{\\frac n2}^i)+\\omega_n^iF^{[1]}(\\omega_{\\frac n2}^i)$$\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5206\u6cbb\u4e86\n\n\u8fd9\u9898\u4e5f\u662f\u7c7b\u4f3c\uff0c\u8003\u8651\u5c06 $n$ \u5206\u89e3\u8d28\u56e0\u6570\uff0c\u7136\u540e\u5c06 $n$ \u4e0d\u65ad\u5730\u5206\u6210 $p$ \u5757\uff0c\u8fd9\u6837\u624d\u80fd\u4fdd\u8bc1\u590d\u6742\u5ea6\n\n\u5177\u4f53\u5730\uff1a\n\n$$ F(x)=a_0+a_1x+a_2x^2+\\dots+a_{n-1}x^{n-1} $$\n\n$$F^{[0]}=a_0+a_px+\\dots+a_{n-p}x^{\\frac {n-p}p}$$\n\n$$F^{[i]}=a_i+a_{p+i}x+\\dots+a_{n-p+i}x^{\\frac{n-p}p}$$\n\n$$F(\\omega_n^i)=F^{[0]}(\\omega_{\\frac np}^i)+\\omega_n^iF^{[1]}(\\omega_{\\frac np}^i)+\\dots+\\omega_n^{i(p-1)}F^{[p-1]}(\\omega_{\\frac np}^i)$$\n\n\u53ef\u4ee5\u5f00\u59cb\u5206\u6cbb\n\n\u6ce8\u610f\u6b64\u65f6\u5982\u679c\u8981\u5199\u8fed\u4ee3\u7248\u7684 $\\mathrm{FFT}$\uff0c\u9700\u8981\u6ce8\u610f\u7684\u662f $\\mathrm{rev}$ \u6570\u7ec4\u53ef\u80fd\u6bd4\u8f83\u7279\u6b8a\n\n$\\omega_n$ \u53ef\u4ee5\u968f\u610f\u53d6\u6a21\u6570\u7684\u4e00\u4e2a\u539f\u6839\n\n\u4ee3\u7801\uff1a\n```cpp\n// luogu-judger-enable-o2\n#include <iostream>\n#include <algorithm>\n\nconst int N = 500000;\nusing LL = long long;\nint n, m, wn[N], primes[N], power[N], prime_tot, mod;\nint pow(int x, int y) {\n    int ans = 1;\n    for (; y; y >>= 1, x = (LL) x * x % mod)\n        if (y & 1) ans = (LL) ans * x % mod;\n    return ans;\n}\nvoid reduce(int &x) {\n    x += x >> 31 & mod;\n}\nvoid factor(int n) {\n    for (int i = 2; i * i <= n; ++i)\n        if (n % i == 0) n /= i, primes[prime_tot++] = i--;\n    if (n > 1) primes[prime_tot++] = n;\n}\nint primitive_root() {\n    for (int i = 2; ; ++i) {\n        bool flag = 1;\n        for (int j = 0; j < prime_tot; ++j)\n            if (pow(i, n / primes[j]) == 1) {\n                flag = 0; break;\n            }\n        if (flag) return i;\n    }\n}\nint tmp[N];\nvoid reverse(int *A) {\n    for (int i = prime_tot - 1, block = n; ~i; --i) {\n        for (int idx = 0, k = 0; k < n; k += block)\n            for (int j = 0; j < primes[i]; ++j)\n                for (int l = 0; l < block; l += primes[i])\n                    tmp[idx++] = A[k + j + l];\n        for (int k = 0; k < n; ++k) A[k] = tmp[k];\n        block /= primes[i];\n    }\n}\nvoid dft(int *A, int typ) {\n    reverse(A);\n    for (int i = 0, block = 1; i < prime_tot; ++i) {\n        const int mid = block, wi = wn[n / (block *= primes[i])];\n        for (int j = 0; j < n; ++j)\n            tmp[j] = 0;\n        for (int j = 0; j < n; j += block) {\n            int wk = 1;\n            for (int k = 0; k < block; ++k) {\n                for (int l = k % mid, w = 1; l < block; l += mid, w = (LL) w * wk % mod)\n                    reduce(tmp[j + k] += (LL) w * A[j + l] % mod - mod);\n                wk = (LL) wk * wi % mod;\n            }\n        }\n        for (int j = 0; j < n; ++j)\n            A[j] = tmp[j];\n    }\n    if (!typ) {\n        std::reverse(A + 1, A + n);\n        for (int i = 0; i < n; ++i)\n            A[i] = (LL) A[i] * n % mod;\n    }\n}\nint a[N], b[N], rk[N];\nint main() {\n    std::ios::sync_with_stdio(0), std::cin.tie(0);\n    std::cin >> n >> m, mod = n + 1, factor(n);\n    wn[0] = 1, wn[1] = primitive_root();\n    for (int i = 2; i < n; ++i) wn[i] = (LL) wn[i - 1] * wn[1] % mod;\n    for (int i = 0; i < n; ++i) std::cin >> a[i];\n    for (int i = 0; i < n; ++i) std::cin >> b[i];\n    dft(a, 1), dft(b, 1);\n    for (int i = 0; i < n; ++i)\n        a[i] = (LL) a[i] * pow(b[i], m) % mod;\n    dft(a, 0);\n    for (int i = 0; i < n; ++i)\n        std::cout << a[i] << '\\n';\n    return 0;\n}\n\n```",
        "postTime": 1547904202,
        "uid": 26127,
        "name": "Weng_Weijie",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4191 \u3010[CTSC2010]\u6027\u80fd\u4f18\u5316\u3011"
    },
    {
        "content": "### \u524d\u8a00\n\n\u6027\u80fd\u4f18\u5316\u2026\u2026\u7ecf\u5178\u9898\u3002\n\n\u8fd9\u9898\u53ef\u4ee5\u770b\u5230\u5b83\u7ed9\u4f60\u66b4\u529b\u7b97\u4e86\u5faa\u73af\u5377\u79ef\uff0c\u4e8e\u662f\u60f3\u5230 FFT \u5355\u4f4d\u6839\u5904\u70b9\u503c\u4e58\u6cd5\u5bf9\u5e94\u5faa\u73af\u5377\u79ef\u7684\u672c\u8d28\u3002\n\n\u53ef\u662f FFT \u957f\u5ea6\u662f $2^n$ \u7684\uff0c\u4f1a\u6302\u6389\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651 Bluestein \u7b97\u6cd5\u3002\n\n---\n### Bluestein \u7b97\u6cd5\n\n\u524d\u7f6e\u77e5\u8bc6\uff1a[\u4efb\u610f\u6a21\u6570 Chirp Z-Transform](https://www.luogu.com.cn/problem/P6828)\uff0c\u786e\u4fdd\u4f60\u80fd\u8fc7\u677f~~\u4ee5\u514d\u88ab\u5361\u5e38~~\u3002\n\n\u4ee5\u4e0b\u8bbe $\\omega_n$ \u4e3a $n$ \u6b21\u672c\u539f\u5355\u4f4d\u6839\u3002\n\n\u8bbe\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6570\u5217 $\\{f_n\\}$ \u7684\u5faa\u73af\u5377\u79ef\u70b9\u503c\u6570\u5217 $\\{g_n\\}$ \u4e3a\n\n$$\ng_t=\\sum_{k=0}^{n-1}f_k\\omega_n^{kt}\n$$\n\n\u7531\u5355\u4f4d\u6839\u53cd\u6f14\uff0c\u6709\n\n$$\nf_t=\\frac1n\\sum_{k=0}^{n-1}g_k\\omega_n^{-kt}\n$$\n\n\u4ee5\u4e0a\u4e24\u9879\u5747\u53ef\u7528 CZT \u52a0\u901f\u3002\n\n---\n### \u56de\u5230\u672c\u9898\n\n\u7531\u4e8e\u5355\u4f4d\u6839\u70b9\u503c\u70b9\u4e58\u672c\u8d28\u5373\u6570\u5217\u5faa\u73af\u5377\u79ef\uff0c\u8fd9\u9898\u53d8\u5f97\u53ef\u505a\u3002\n\n\u628a $a,b$ \u70b9\u503c\u641e\u4e00\u4e0b\uff0c\u70b9\u503c\u6309\u8981\u6c42\u4e58\u8d77\u6765\uff0c\u56de\u6f14\u7cfb\u6570\uff0c\u8f93\u51fa\uff0c\u505a\u5b8c\u4e86\uff1f\uff01\n\n\u4e8e\u662f\u4f60\u5199\uff0c\u4ea4\u4e0a\u53bb\uff0c\u53d1\u73b0\u88ab\u5361\u5e38\u4e86\u2026\u2026\n\n\u5361\u5361\u5e38\u5c31\u8fc7\u4e86\u3002\n\n---\n### Code\n\n$c$ \u80fd\u5bf9 $n$ \u53d6\u6a21\u662f\u56e0\u4e3a\u5728\u70b9\u503c\u8ba1\u7b97\u65f6\u80fd\u4f7f\u7528\u8d39\u9a6c\u5c0f\u5b9a\u7406\u3002\n\n```cpp\n// Problem: P4191 [CTSC2010]\u6027\u80fd\u4f18\u5316\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/P4191\n// Memory Limit: 250 MB\n// Time Limit: 6000 ms\n\n#include <algorithm>\n#include <math.h>\n#include <stdio.h>\n#include <vector>\ntypedef long long llt;\ntypedef unsigned uint;typedef unsigned long long ullt;\ntypedef bool bol;typedef char chr;typedef void voi;\ntypedef double dbl;\ntemplate<typename T>bol _max(T&a,T b){return(a<b)?a=b,true:false;}\ntemplate<typename T>bol _min(T&a,T b){return(b<a)?a=b,true:false;}\ntemplate<typename T>T power(T base,T index,T mod){return((index<=1)?(index?base:1):(power(base*base%mod,index>>1,mod)*power(base,index&1,mod)))%mod;}\ntemplate<typename T>T lowbit(T n){return n&-n;}\ntemplate<typename T>T gcd(T a,T b){return b?gcd(b,a%b):a;}\ntemplate<typename T>T lcm(T a,T b){return(a!=0||b!=0)?a/gcd(a,b)*b:(T)0;}\ntemplate<typename T>T exgcd(T a,T b,T&x,T&y){if(!b)return y=0,x=1,a;T ans=exgcd(b,a%b,y,x);y-=a/b*x;return ans;}\nconst dbl Pi=acos(-1);\nclass cpx\n{\n    public:\n        dbl a,b;\n        cpx():a(0),b(0){}\n        cpx(dbl a):a(a),b(0){}\n        cpx(dbl a,dbl b):a(a),b(b){}\n        voi unit(dbl alpha){a=cos(alpha),b=sin(alpha);}\n        cpx friend operator+(cpx a,cpx b){return cpx(a.a+b.a,a.b+b.b);}\n        cpx friend operator-(cpx a,cpx b){return cpx(a.a-b.a,a.b-b.b);}\n        cpx operator-(){return cpx(-a,-b);}\n        cpx friend operator*(cpx a,cpx b){return cpx(a.a*b.a-a.b*b.b,a.b*b.a+b.b*a.a);}\n        cpx friend operator/(cpx a,ullt v){return cpx(a.a/v,a.b/v);}\n        cpx conj(){return cpx(a,-b);}\n        cpx mul_i(){return cpx(-b,a);}\n        cpx div_i(){return cpx(b,-a);}\n    public:\n        cpx&operator=(ullt v){return a=v,b=0,*this;}\n        cpx&operator+=(cpx v){return*this=*this+v;}\n        cpx&operator-=(cpx v){return*this=*this-v;}\n        cpx&operator*=(cpx v){return*this=*this*v;}\n        cpx&operator/=(ullt v){return a/=v,b/=v,*this;}\n        dbl&real(){return a;}\n        dbl&imag(){return b;}\n};\nullt Mod;\nullt chg(ullt v){return(v<Mod)?v:v-Mod;}\nclass poly\n{\n    private:\n        std::vector<ullt>V;\n    public:\n        class FFT\n        {\n            private:\n                std::vector<uint>V;std::vector<cpx>G;uint len;\n            public:\n                uint length(){return len;}\n                voi bzr(uint length)\n                {\n                    uint p=0;len=1,V.clear(),G.clear();\n                    while(length){p++,len<<=1,length>>=1;}\n                    V.resize(len),G.resize(len);\n                    for(uint i=0;i<len;++i)V[i]=((i&1)?(V[i>>1]|len)>>1:(V[i>>1]>>1)),G[i].unit(Pi*2/len*i);\n                }\n                voi fft(std::vector<cpx>&y,bol op)\n                {\n                    if(y.size()<len)y.resize(len);\n                    for(uint i=0;i<len;i++)if(V[i]<i)std::swap(y[i],y[V[i]]);\n                    for(uint h=2;h<=len;h<<=1)for(uint j=0;j<len;j+=h)for(uint k=j;k<j+(h>>1);k++){cpx u=y[k],t=G[len/h*(k-j)]*y[k+h/2];y[k]=u+t,y[k+h/2]=u-t;}\n                    if(op){uint l=1,r=len-1;while(l<r)std::swap(y[l++],y[r--]);for(uint i=0;i<len;i++)y[i]/=len;}\n                }\n                voi fft_fft(std::vector<cpx>&a,std::vector<cpx>&b,bol op)\n                {\n                    if(a.size()<len)a.resize(len);\n                    if(b.size()<len)b.resize(len);\n                    for(uint i=0;i<len;i++)a[i]+=b[i].mul_i();\n                    fft(a,op),b[0]=a[0].conj();for(uint i=1;i<len;i++)b[i]=a[len-i].conj();\n                    for(uint i=0;i<len;i++){cpx p=a[i],q=b[i];a[i]=(p+q)/2llu,b[i]=(p-q).div_i()/2llu;}\n                }\n        };\n    public:\n        poly(){V.clear();}\n        poly(std::vector<ullt>V){for(uint i=0;i<V.size();i++)push(V[i]%Mod);cut_zero();}\n        bol empty(){return cut_zero(),!size();}\n        voi bzr(){V.clear();}\n        voi push(ullt v){V.push_back(v%Mod);}\n        voi pop(){V.pop_back();}\n        ullt val(uint n){return(n<V.size())?V[n]:0;}\n        uint deg(){return V.size()-1;}\n        uint size(){return V.size();}\n        voi add(uint p,ullt v)\n        {\n            if(deg()<p)chg_deg(p);\n            V[p]=(V[p]+v)%Mod;\n        }\n        poly friend operator+(poly a,ullt v){a.add(0,v);return a;}\n        poly friend operator+(poly a,poly b)\n        {\n            uint len=std::max(a.size(),b.size());\n            a.chg_siz(len),b.chg_siz(len);\n            for(uint i=0;i<len;i++)a[i]=chg(a[i]+b[i]);\n            a.cut_zero();\n            return a;\n        }\n        poly friend operator-(poly a,poly b)\n        {\n            uint len=std::max(a.size(),b.size());\n            a.chg_siz(len),b.chg_siz(len);\n            for(uint i=0;i<len;i++)a[i]=chg(a[i]+Mod-b[i]);\n            a.cut_zero();\n            return a;\n        }\n        poly operator-()\n        {\n            cut_zero();uint len=size();\n            poly ans;ans.chg_siz(len);\n            for(uint i=0;i<len;i++)ans[i]=chg(Mod-V[i]);\n            return ans;\n        }\n        poly friend operator*(poly a,poly b)\n        {\n            FFT s;poly p;\n            uint n=a.deg(),m=b.deg(),len;\n            s.bzr(n+m+1),len=s.length();\n            std::vector<cpx>v1(len),v2(len),v3(len),v4(len);\n            for(uint i=0;i<len;i++)v3[i]=cpx(a.val(i)&32767),v1[i]=cpx(a.val(i)>>15),v4[i]=cpx(b.val(i)&32767),v2[i]=cpx(b.val(i)>>15);\n            s.fft_fft(v1,v2,0),s.fft_fft(v3,v4,0);\n            for(uint i=0;i<len;i++)v4[i]=(v3[i]+v1[i].mul_i())*v4[i],v2[i]=(v3[i]+v1[i].mul_i())*v2[i];\n            s.fft(v2,1),s.fft(v4,1),p.chg_deg(n+m);for(uint i=0;i<=n+m;i++)p[i]=(((ullt)(v2[i].b+.5)%Mod<<30)+((ullt)(v2[i].a+v4[i].b+.5)%Mod<<15)+(ullt)(v4[i].a+.5))%Mod;\n            p.cut_zero();\n            return p;\n        }\n        poly inv(){return inv(size());}\n        poly inv(uint prec)\n        {\n            poly ans,f,tmp,w;\n            llt x,y;\n            exgcd<llt>(val(0),Mod,x,y);\n            ans.push(x%(llt)Mod+(llt)Mod),f.push(val(0));\n            for(uint k=1;k<prec;k<<=1)\n            {\n                for(uint i=k;i<(k<<1);++i)f.push(val(i));\n                tmp=f*ans,tmp.chg_siz(k<<1),w.bzr();for(uint i=0;i<k;++i)w.push(tmp[i+k]);\n                w*=ans;for(uint i=0;i<k;++i)ans.push(Mod-w[i]);\n            }\n            return ans;\n        }\n        poly diff(){uint n=size();poly ans;for(uint i=1;i<n;++i)ans.push(V[i]*i);return ans;}\n        poly inte()\n        {\n            uint n=size();\n            poly ans;\n            ans.chg_deg(n);\n            ullt k=1;llt x,y;\n            std::vector<ullt>W;W.push_back(1),W.push_back(1);\n            for(uint i=2;i<n;++i)W.push_back(k=(k*i)%Mod);\n            exgcd<llt>(k*n%Mod,Mod,x,y);\n            k=chg(x%(llt)Mod+(llt)Mod);\n            for(uint i=n;i;--i)ans[i]=V[i-1]*k%Mod*W[i-1]%Mod,k=k*i%Mod;\n            return ans;\n        }\n        poly ln(){return(this->diff()*this->inv()).inte().chg_deg_ed(deg());}\n        poly exp(){return exp(size());}\n        poly exp(uint prec)\n        {\n            poly m;m.push(1);\n            if(empty())return m;\n            uint tp=1;\n            while(tp<prec)m*=*this-(m.diff()*m.inv(tp<<=1)).inte()+1,m.chg_siz(tp);\n            m.chg_siz(prec);\n            return m;\n        }\n        poly reverse(){poly ans;for(uint i=deg();~i;--i)ans.push(V[i]);return ans;}\n        poly operator/(poly b)\n        {\n            cut_zero(),b.cut_zero();uint m=size(),n=b.deg();if(m<=n)return poly();\n            poly f=this->reverse()*b.reverse().inv(m-n);f.chg_siz((m>n)?m-n:0);return f.reverse();\n        }\n        poly operator%(poly b){poly f=*this-*this/b*b;f.cut_zero();return f;}\n        voi cut_zero(){while(!V.empty()&&!V.back())V.pop_back();}\n        voi chg_siz(const uint siz){while(V.size()<siz)V.push_back(0);while(V.size()>siz)V.pop_back();}\n        voi chg_deg(const uint d){chg_siz(d+1);}\n        poly chg_deg_ed(const uint d){poly ans=*this;return ans.chg_deg(d),ans;}\n    public:\n        ullt&operator[](uint num){return V[num];}\n        poly&operator=(std::vector<ullt>V){bzr();for(uint i=0;i<V.size();i++)push(V[i]%Mod);cut_zero();return*this;}\n        poly&operator=(std::vector<cpx>V){bzr();for(uint i=0;i<V.size();i++)push((llt)(V[i].a+.5)%(llt)Mod+(llt)(Mod));cut_zero();return*this;}\n        poly&operator+=(poly b){return*this=*this+b;}\n        poly&operator-=(poly b){return*this=*this-b;}\n        poly&operator*=(poly b){return*this=*this*b;}\n        poly&operator/=(poly b){return*this=*this/b;}\n        poly&operator%=(poly b){return*this=*this%b;}\n};\nullt gotg()\n{\n    static ullt Fac[15];uint cnt=0;\n    ullt v=Mod-1;\n    for(ullt i=2;i*i<=v;i++)\n        if(!(v%i))\n        {\n            Fac[cnt++]=i;\n            do v/=i;while(!(v%i));\n        }\n    if(v>1)Fac[cnt++]=v;\n    for(ullt ans=2;;ans++)if(power<ullt>(ans,Mod-1,Mod)==1)\n    {\n        bol b=true;\n        for(uint i=0;b&&i<cnt;i++)if(power<ullt>(ans,(Mod-1)/Fac[i],Mod)==1)b=false;\n        if(b)return ans;\n    }\n    return 0;\n}\nullt A[500005],B[500005];\nuint g_pow[1000005];\nuint g_binom_pow[1000005];\nuint inv_pow[1000005];\nuint inv_binom_pow[1000005];\npoly P1,P2;\nint main()\n{\n\tuint n;ullt c;scanf(\"%u%llu\",&n,&c),Mod=n+1,c%=n;\n\tullt g=gotg();ullt inv=power(g,Mod-2,Mod);\n\tg_pow[0]=inv_pow[0]=g_binom_pow[0]=inv_binom_pow[0]=1;\n\tfor(uint i=1;i<=n*2;i++)\n\t{\n\t\tg_pow[i]=(ullt)g_pow[i-1]*g%Mod,inv_pow[i]=(ullt)inv_pow[i-1]*inv%Mod,\n\t\tg_binom_pow[i]=(ullt)g_binom_pow[i-1]*g_pow[i-1]%Mod,\n\t\tinv_binom_pow[i]=(ullt)inv_binom_pow[i-1]*inv_pow[i-1]%Mod;\n\t}\n\tfor(uint i=0;i<n;i++)scanf(\"%llu\",A+i),A[i]%=Mod;\n\tfor(uint i=0;i<n;i++)scanf(\"%llu\",B+i),B[i]%=Mod;\n\tP1.chg_siz(n<<1),P2.chg_siz(n);\n\tfor(uint i=0;i<(n<<1);i++)P1[i]=g_binom_pow[i];\n\tfor(uint i=0;i<n;i++)\n\t\tP2[i]=A[i]*inv_binom_pow[i]%Mod;\n\tP2=P2.reverse()*P1;\n\tfor(uint i=0;i<n;i++)\n\t\tA[i]=P2.val(n+i-1)*inv_binom_pow[i]%Mod;\n\tP2.chg_siz(n);\n\tfor(uint i=0;i<n;i++)\n\t\tP2[i]=B[i]*inv_binom_pow[i]%Mod;\n\tP2=P2.reverse()*P1;\n\tfor(uint i=0;i<n;i++)\n\t\tA[i]=A[i]*power(P2.val(n+i-1)*inv_binom_pow[i]%Mod,c,Mod)%Mod;\n\tfor(uint i=0;i<(n<<1);i++)P1[i]=inv_binom_pow[i];\n\tP2.chg_siz(n);\n\tfor(uint i=0;i<n;i++)P2[i]=A[i]*g_binom_pow[i]%Mod;\n\tP2=P2.reverse()*P1;\n\tfor(uint i=0;i<n;i++)printf(\"%llu\\n\",P2.val(n+i-1)*(Mod-g_binom_pow[i])%Mod);\n    return 0;\n}\n```\n",
        "postTime": 1642597825,
        "uid": 105050,
        "name": "myee",
        "ccfLevel": 7,
        "title": "4191"
    },
    {
        "content": "\u9996\u5148\u7531\u4e8e\u67d0\u79cd\u5965\u5999\u91cd\u91cd\u7684\u539f\u56e0\uff0c\u505a\u957f\u5ea6\u4e3a$n$\u7684$FFT$\u518d\u4e58\u8d77\u6765\u76f8\u5f53\u4e8e\u5bf9\u4e24\u4e2a\u5e8f\u5217\u505a\u4e86\u957f\u4e3a$n$\u7684\u5faa\u73af\u5377\u79ef.\u4f7f\u7528\u5355\u4f4d\u6839\u53cd\u6f14\u8bc1\u660e\u5982\u4e0b:\n\n$$\\begin{aligned}c_k&=\\sum_{0\\leq i<n}\\sum_{0\\leq j<n}[(i+j)\\!\\!\\!\\!\\mod n=k]a_ib_j\\\\&=\\sum_{0\\leq i<n}\\sum_{0\\leq j<n}a_ib_j\\frac{1}{n}\\sum_{0\\leq d<n}\\omega_n^{d(i+j-k)}\\\\&=\\frac{1}{n}\\sum_{0\\leq d<n}\\omega_n^{-dk}\\left(\\sum_{0\\leq i<n}a_i\\omega_n^{di}\\right)\\left(\\sum_{0\\leq j<n}b_j\\omega_n^{dj}\\right)\\end{aligned}$$\n\n\u4f60\u53d1\u73b0\u7b49\u5f0f\u7684\u53f3\u8fb9\u521a\u597d\u5c31\u662f$FFT(A)$\u548c$FFT(B)$\u5bf9\u5e94\u9879\u4e58\u8d77\u6765\u4e4b\u540e\u518d$IDFT$\u56de\u53bb\uff0c\u4e8e\u662f\u8fd9\u4e2a\u7ed3\u8bba\u662f\u6b63\u786e\u7684.\n\n\u90a3\u4e48\u56de\u5230\u539f\u9898\uff0c\u76f8\u5f53\u4e8e\u662f\u6c42$A\\cdot B^C$\uff0c\u4e58\u6cd5\u662f\u957f\u5ea6\u4e3a$n$\u7684\u5faa\u73af\u5377\u79ef.\u7cfb\u6570\u5bf9$n+1$\u53d6\u6a21.\n\n\u8fd9\u6837\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u5982\u4f55\u6c42\u51fa\u957f\u5ea6\u4e3a$n$\u7684FFT\uff0c\u7531\u4e8e\u7cbe\u5ea6\u95ee\u9898\u9700\u8981\u4f7f\u7528NTT\uff0c\u800c\u9898\u76ee\u4fdd\u8bc1$n+1$\u662f\u8d28\u6570\uff0c\u4ece\u800c\u6a21$n+1$\u610f\u4e49\u4e0b\u5b58\u5728\u539f\u6839\uff0c\u90a3\u4e48\u663e\u7136\u6709$\\omega_n\\equiv g\\pmod{(n+1)}$.\n\n\u8003\u8651\u6b63\u5e38\u7684FFT\uff0c\u76f8\u5f53\u4e8e\u662f\u8fdb\u884c\u5982\u4e0b\u7684\u4e00\u4e2a\u8fc7\u7a0b:\n\n- \u6c42$A(\\omega_n^{i}),i=0,1,\\cdots,n-1$\n\n- \u63d0\u51fa$A$\u7684\u5076\u6570\u9879\u7cfb\u6570\u548c\u5947\u6570\u9879\u7cfb\u6570\uff0c\u5206\u522b\u5f62\u6210\u4e24\u4e2a\u65b0\u7684\u591a\u9879\u5f0f$A_0(x)$\u548c$A_1(x)$\uff0c\u5bb9\u6613\u770b\u51fa\u6709$A(x)=A_0(x^2)+xA_1(x^2)$\n\n- \u5957\u4e0a\u5355\u4f4d\u6839\uff0c\u6709$A(\\omega_n^i)=A_0(\\omega_n^{2i})+\\omega_n^iA_1(\\omega_n^{2i})=A_0(\\omega_{n/2}^i)+\\omega_n^iA_1(\\omega_{n/2}^i)$\n\n- \u4f60\u53d1\u73b0\u95ee\u9898\u88ab\u5206\u6210\u4e86\u6c42$A_0(\\omega_{n/2}^i)$\u548c$A_1(\\omega_{n/2}^i)$\u4e24\u4e2a\u5b50\u95ee\u9898\uff0c\u4f46\u8fd8\u6709\u4e00\u4e2a\u5c0f\u95ee\u9898\u662f\u5b50\u95ee\u9898\u53ea\u80fd\u6c42\u51fa$i<n/2$\u7684\u70b9\u503c\uff0c\u800c\u6211\u4eec\u8981\u6c42$i<n$\n\n- \u8fd9\u65f6\u5019\u5229\u7528\u5355\u4f4d\u6839\u7684\u7b2c\u4e8c\u4e2a\u6027\u8d28\uff0c\u6709$\\omega_{n/2}^{i+n/2}=\\omega_{n/2}^i,\\omega_{n}^{i+n/2}=-\\omega_n^i$.\u8fd9\u4e2a\u5728\u5b9e\u73b0\u7684\u65f6\u5019\u88ab\u53eb\u505a\u201c\u8774\u8776\u64cd\u4f5c\u201d.\n\n- \u5230\u8fd9\u91cc\u5c31\u53ef\u4ee5\u5206\u6cbb\u4e86\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u51fa\u4e00\u4e2a\u9012\u5f52\u7684FFT\n\n- \u6211\u4eec\u89c2\u5bdf\u4e86\u4e00\u4e0b\u5206\u6cbb\u7684\u65f6\u5019\u6bcf\u4e2a\u5143\u7d20\u88ab\u5212\u5f52\u5230\u7684\u4f4d\u7f6e\u5e76\u9884\u5904\u7406\u4e86\u8fd9\u4e2a\u4e1c\u897f.\u73b0\u5728\u6211\u4eec\u53ea\u8981\u628a\u5e8f\u5217\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u653e\u5230\u5b83\u6700\u540e\u7684\u4f4d\u7f6e\u5c31\u53ef\u4ee5\u81ea\u5e95\u5411\u4e0a\u5408\u5e76\u800c\u4e0d\u662f\u81ea\u4e0a\u800c\u4e0b\u5206\u6cbb\u4e86.\u8fd9\u6837\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u9ad8\u6548\u7684\u80fd\u8dd11e6\u7684\u8fed\u4ee3\u5b9e\u73b0\uff0c\u4e5f\u5c31\u662f\u6211\u4eec\u901a\u5e38\u5199\u7684FFT.\n\n\u6211\u4eec\u53d1\u73b0\u6700\u5173\u952e\u7684\u5c31\u662f\u7b2c\u4e8c\u6b65\uff0c\u5b83\u628a\u5143\u7d20\u6309\u7167\u4f4d\u7f6e\u6a21\u4e8c\u7684\u4f59\u6570\u5206\u6210\u4e24\u4efd.\u53ef\u4e0d\u53ef\u4ee5\u4e0d\u6309\u7167\u6a21\u4e8c\u800c\u662f\u6309\u7167\u522b\u7684\u5206\u5462\uff1f\u7b54\u6848\u662f\u80af\u5b9a\u7684\uff0c\u5047\u8bbe\u6211\u4eec\u6309\u7167\u6a21$p$\u7684\u4f59\u6570\u5206\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u628aFFT\u9b54\u6539\u6210\u4e86\u4ee5\u4e0b\u8fc7\u7a0b(\u8bbe\u521d\u59cb\u957f\u5ea6\u4e3a$pn$):\n\n- \u6c42$A(\\omega_{pn}^i),0\\leq i<n$\n\n- \u628a$A$\u7684\u7cfb\u6570\u6309\u7167\u8be5\u9879\u6b21\u6570\u6a21$p$\u5206\u7c7b\uff0c\u5206\u51fa$p$\u4e2a\u591a\u9879\u5f0f$A_0(x),A_1(x),\\cdots,A_{p-1}(x)$.\u5177\u4f53\u5730\uff0c\u6709$A_k(x)=\\sum\\limits_{0\\leq i<n}a_{pi+k}x^i$.\u5bb9\u6613\u770b\u51fa\u5b83\u4eec\u6ee1\u8db3\u5173\u7cfb$A(x)=\\sum\\limits_{0\\leq k<p}x^kA_k(x^p)$.\n\n- \u5957\u4e0a\u5355\u4f4d\u6839\uff0c\u6709$A(\\omega_{pn}^i)=\\sum\\limits_{0\\leq k<p}\\omega_{pn}^{ki} A_k(\\omega_{n}^i)$.\u8fd9\u6837\u95ee\u9898\u88ab\u5206\u6210\u4e86$p$\u4e2a\u5b50\u95ee\u9898.\u521a\u624d\u7684\u5c0f\u95ee\u9898\u4f9d\u7136\u5b58\u5728.\n\n- $i$\u4e00\u5b9a\u53ef\u4ee5\u8868\u793a\u6210$\\lfloor\\frac{i}{n}\\rfloor n+(i\\!\\!\\mod n)$\uff0c\u6211\u4eec\u628a\u540e\u9762\u5199\u6210$in+r$.\u8fd9\u6837\u5c31\u6709\n\n  $$A(\\omega_{pn}^{in+r})=\\sum_{0\\leq k<p}\\omega_{pn}^{k(in+r)}A_k(\\omega_n^{in+r})=\\sum_{0\\leq k<p}\\omega_{p}^{ik}\\omega_{pn}^{kr}A_k(\\omega_n^r)$$\n  \n  \u89c2\u5bdf\u8fd9\u4e2a\u5f0f\u5b50\uff0c\u5f53$r$\u56fa\u5b9a\u7684\u65f6\u5019\u76f8\u5f53\u4e8e\u662f\u5bf9$\\omega_{pn}^{kr}A_k(\\omega_n^r)$\u7ec4\u6210\u7684\u591a\u9879\u5f0f\u505a\u4e86\u957f\u5ea6\u4e3a$p$\u7684FFT.\u8fd9\u4e2a\u65f6\u5019\u6ca1\u5565\u597d\u7684\u505a\u6cd5\uff0c\u53ea\u80fd$O(p^2)$\u66b4\u529b\u53bb\u505a.\u4e8e\u662f\u8fd9\u4e2a\u5c0f\u95ee\u9898\u53ef\u4ee5\u5728$O(p^2)$\u7684\u65f6\u95f4\u5185\u89e3\u51b3.\u65f6\u95f4\u590d\u6742\u5ea6$T(pn)=pT(n)+O(p^2n)$.\u753b\u753b\u9012\u5f52\u6811\u53ef\u4ee5\u770b\u51fa\u6765\u6bcf\u4e00\u5c42\u7684\u590d\u6742\u5ea6\u90fd\u662f$O(pN)$\u7684\uff0c\u5176\u4e2d$N$\u662f\u539f\u59cb\u957f\u5ea6.\n\n- \u53d1\u73b0\u5c42\u4e0e\u5c42\u4e4b\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6bcf\u4e00\u5c42\u53ef\u4ee5\u9009\u53d6\u4e0d\u540c\u7684$p$\uff0c\u53ea\u8981\u8fd9\u4e2a$p$\u6574\u9664\u5b50\u95ee\u9898\u7684\u89c4\u6a21\u5373\u53ef.\u5230\u8fd9\u91cc\u53ef\u4ee5\u5206\u6cbb\u4e86\uff0c\u53ef\u4ee5\u5199\u51fa\u4e00\u4e2a\u9012\u5f52\u5f62\u5f0f\u7684FFT.\u663e\u7136$p$\u8d8a\u5c0f\u8d8a\u597d\uff0c\u5982\u679c$n=\\prod p_i^{k_i}$\uff0c\u90a3\u4e48\u8fd9\u6837\u505aFFT\u7684\u590d\u6742\u5ea6\u662f$O(n\\sum p_ik_i)$\u7684.\n\n- \u6211\u4eec\u8fd8\u662f\u53ef\u4ee5\u9884\u5904\u7406\u6bcf\u4e2a\u5143\u7d20\u6700\u540e\u88ab\u5212\u5206\u5230\u7684\u4f4d\u7f6e\uff0c\u7136\u540e\u81ea\u5e95\u5411\u4e0a\u5408\u5e76\u6765\u4ee3\u66ff\u5206\u6cbb.\u8fd9\u6837\u53ef\u4ee5\u5199\u51fa\u4e00\u4e2a\u9ad8\u6548\u7684\u8fed\u4ee3FFT.\n\n\u5230\u8fd9\u91ccFFT\u5c31\u53ef\u4ee5\u5199\u4e86\uff0c\u81f3\u4e8e\u6c42\u539f\u6839\u548c\u5206\u89e3\u8d28\u56e0\u6570\u90fd\u662f\u57fa\u7840\u6280\u80fd\u4e86\u5427(\n\n\u5173\u4e8e\u5361\u5e38\u6570\uff0c\u6211\u9884\u5904\u7406\u4e86\u5355\u4f4d\u6839\uff0c\u8fd9\u6837\u8dd1\u5f97\u98de\u5feb.\n\nFFT\u5b8c\u5c31\u628a\u5bf9\u5e94\u4f4d\u7684$a_i$\u4e58\u4e0a$b_i^C$\uff0c\u7136\u540e\u518dIDFT\u56de\u53bb\u5c31\u597d\u4e86.\n\n\u5173\u4e8eIDFT\u6709\u4e00\u4e2a\u7b80\u5355\u5730\u5199\u6cd5\uff0c\u8003\u8651\u6c42\u7684\u5176\u5b9e\u662f\n\n$$\nnc_i=\\sum_{0\\leq k<n}a_k\\omega_n^{-ki}=\\sum_{0\\leq k<n}a_k\\omega_n^{i(n-k)}\n$$\n\n\u6240\u4ee5\u53ef\u4ee5\u628a$A$\u4ece\u7b2c\u4e00\u4f4d\u5f00\u59cb\u7ffb\u8f6c\u4e00\u4e0b\uff0c\u7136\u540e\u505aDFT\u518d\u9664\u4ee5$n$\u5373\u53ef.\n\n\u5b9e\u73b0\u7ec6\u8282\u53ef\u4ee5\u770b\u4ee3\u7801.\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\nusing namespace std;\nconst int N=1e6;\nint rev[N],tmp[N],a[N],n,C,mod,b[N],p[N],pn,g,wp[10][10],wn[N<<1];\nint qpower(int a,int b)\n{\n\tint ans=1;for(;b;b>>=1,a=1ll*a*a%mod)if(b&1)ans=1ll*ans*a%mod;return ans;\n}\nint getpos(int x)\n{\n\tint pos=0,len=n;\n\tfor(int j=1;j<=pn;j++)\n\t\tpos+=len/p[j]*(x%p[j]),len/=p[j],x/=p[j];\n\treturn pos;\n}\nvoid NTT(int a[])\n{\n\tfor(int i=0;i<n;i++)tmp[rev[i]]=a[i];\n\tfor(int i=0;i<n;i++)a[i]=tmp[i];\n\tint len=1,cntw=0;\n\tfor(int i=pn;i>=1;len*=p[i],i--)\n\t{\n\t\tfor(int j=0;j<n;j+=p[i]*len)\n\t\t{\n\t\t\tfor(int r=0;r<len;r++)\n\t\t\t{\n\t\t\t\tint w=1,*z=wn+cntw+r*p[i];\n\t\t\t\tfor(int k=0;k<p[i];k++)tmp[k]=1ll*a[j+k*len+r]*(*(z+k))%mod;\n\t\t\t\tfor(int k=0;k<p[i];k++)\n\t\t\t\t{\n\t\t\t\t\tint *z=a+j+k*len+r;*z=0;w=wp[p[i]][k];\n\t\t\t\t\tfor(int t=p[i]-1;t>=0;t--)*z=(1ll*(*z)*w+tmp[t])%mod;//\u79e6\u4e5d\u97f6\u516c\u5f0f\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcntw+=len*p[i];\n\t}\n}\nvoid make()\n{\n\tpn=0;int tn=n;\n\twhile(tn%2==0)p[++pn]=2,tn>>=1;\n\twhile(tn%3==0)p[++pn]=3,tn/=3;\n\twhile(tn%5==0)p[++pn]=5,tn/=5;\n\twhile(tn%7==0)p[++pn]=7,tn/=7;\n\tfor(g=2;;g++)\n\t{\n\t\tif(n%2==0&&qpower(g,n>>1)==1)continue;\n\t\tif(n%3==0&&qpower(g,n/3)==1)continue;\n\t\tif(n%5==0&&qpower(g,n/5)==1)continue;\n\t\tif(n%7==0&&qpower(g,n/7)==1)continue;\n\t\tbreak;\n\t}\n\tfor(int i=1;i<=pn;i++)\n\t{\n\t\tif(p[i]==p[i-1])continue;\n\t\tint omg=qpower(g,n/p[i]),w=1;\n\t\tfor(int j=0;j<p[i];j++,w=1ll*w*omg%mod)wp[p[i]][j]=w;\n\t}\n\tint len=1,cnt=0;\n\tfor(int i=pn;i>=1;len*=p[i],i--)\n\t{\n\t\tint omgn=qpower(g,n/(len*p[i]));\n\t\tfor(int r=0,omg=1;r<len;r++,omg=1ll*omg*omgn%mod)\n\t\t\tfor(int j=0,w=1;j<p[i];j++,w=1ll*w*omg%mod)wn[cnt+r*p[i]+j]=w;//\u628a\u7cfb\u6570p[i]\u653e\u5728r\u4e0a\u53ef\u4ee5\u51cf\u5c11cache miss\u6765\u4f18\u5316\u5e38\u6570\n\t\tcnt+=p[i]*len;\n\t}\n}\nint getin()\n{\n\tint x=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')x=x*10+ch-48,ch=getchar();\n\treturn x;\n}\nint main()\n{\n\tn=getin(),C=getin();mod=n+1;C%=n;\n\tmake();\n\tfor(int i=0;i<n;i++)a[i]=getin();\n\tfor(int i=0;i<n;i++)b[i]=getin();\n\tfor(int i=0;i<n;i++)rev[i]=getpos(i);\n//\tfor(int i=0;i<n;i++)cout<<rev[i]<<\" \";puts(\"\");\n\tNTT(a),NTT(b);\n\tfor(int i=0;i<n;i++)a[i]=1ll*a[i]*qpower(b[i],C)%mod;\n\treverse(a+1,a+n);\n\tNTT(a);for(int i=0;i<n;i++)a[i]=(mod-a[i])%mod;\n\tfor(int i=0;i<n;i++)printf(\"%d\\n\",a[i]);\n}\n```",
        "postTime": 1579183084,
        "uid": 22136,
        "name": "qwaszx",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P4191 \u3010[CTSC2010]\u6027\u80fd\u4f18\u5316\u3011"
    },
    {
        "content": "## \u9898\u610f\n\u7ed9\u51fa $n$ \u6b21\u591a\u9879\u5f0f $A,B$ \u548c\u5e38\u6570 $C$\uff0c\u6c42 $A\\times B^C$ \u7684\u7cfb\u6570\u5bf9 $n+1$ \u53d6\u6a21\u7684\u7ed3\u679c\uff0c\u5176\u4e2d\u4e58\u6cd5\u5b9a\u4e49\u4e3a\u6a21 $n$ \u610f\u4e49\u4e0b\u7684\u5faa\u73af\u5377\u79ef\u3002\u4fdd\u8bc1 $n$ \u80fd\u88ab\u5206\u4e3a\u82e5\u5e72\u4e0d\u8d85\u8fc7 $10$ \u7684\u6b63\u6574\u6570\u7684\u4e58\u79ef\u4e14 $n+1$ \u662f\u8d28\u6570\u3002($1\\le n\\le 5\\times 10^5,1\\le C\\le 10^9,\\rm 6s,250MB$)\n## \u9898\u89e3\n> \u95f2\u8bdd\u3002\u6211\u4eec\u6a21\u62df\u8d5b\u8003\u4e86\u4e00\u9053\u5faa\u73af\u5377\u79ef\u7684\u9898\uff0c\u6211\u53d1\u73b0\u6211\u5565\u4e5f\u4e0d\u4f1a\u3002\u5b66\u4e60\u4e86\u5b66\u957f\u7684\u535a\u5ba2\u4e4b\u540e\u505a\u4e86\u8fd9\u9053\u9898\u3002\u7136\u540e\u53d1\u73b0\u6211\u4e4b\u524d\u5bf9 FFT \u7684\u7406\u89e3\u592a\u6d45\u4e86\u3002\n\n\u9996\u5148\u8981\u77e5\u9053\u4e00\u70b9\uff0c$\\rm DFT$ \u548c $\\rm IDFT$ \u7684\u8fc7\u7a0b\u5b9e\u9645\u4e0a\u662f\u5728\u505a\u5faa\u73af\u5377\u79ef\uff0c\u5faa\u73af\u7684\u957f\u5ea6\u548c $\\rm DFT$ \u65f6\u7528\u5230\u7684\u5355\u4f4d\u6839\u6b21\u6570\u76f8\u540c\u3002\u8003\u8651\uff1a\n$$h_k=\\sum_{i=0}^{n-1}\\sum_{j=0}^{n-1}f_i\\times g_j[(i+j)\\bmod n=k]$$\n\u5373 $f,g$ \u7684 $n$ \u6b21\u5faa\u73af\u5377\u79ef\u3002\u7528\u5355\u4f4d\u6839\u53cd\u6f14\u641e\u6389\u53d6\u6a21\uff1a\n$$\\begin{aligned}\n\th_k&=\\frac{1}{n}\\sum_{i=0}^{n-1}\\sum_{j=0}^{n-1}f_i\\times g_j\\sum_{d=0}^{n-1}\\omega_{n}^{(i+j-k)d}\\\\\n\t&=\\frac{1}{n}\\sum_{d=0}^{n-1}\\omega_{n}^{-kd}\\sum_{i=0}^{n-1}f_i\\omega_n^{id}\\sum_{j=0}^{n-1}g_j\\omega_n^{jd}\n\\end{aligned}$$\n\u6ce8\u610f\u5230\u540e\u9762\u4e24\u4e2a\u6c42\u548c\u5f0f\u5206\u522b\u76f8\u5f53\u4e8e $F(\\omega_{n}^d),G(\\omega_n^d)$\u3002\u6ce8\u610f\u5230\u6c42 $F(\\omega_{n}^d)\\times G(\\omega_n^d)$ \u7684\u8fc7\u7a0b\u5c31\u662f $\\rm DFT$ \u8f6c\u5316\u6210\u70b9\u503c\u540e\u70b9\u79ef\uff0c\u5f97\u5230 $\\operatorname{DFT}(H)$\u3002\u4e4b\u540e $\\operatorname{IDFT}$ \u7684\u8fc7\u7a0b\u53ea\u9700\u8981\u4ee3\u5165 $\\omega_{n}^{-d}$\uff0c\u518d\u9664 $n$ \u5c31\u597d\u4e86\u3002\n\n\u518d\u770b\u56de\u4e0a\u8ff0\u8fc7\u7a0b\u7684\u5b9e\u73b0\u4e4b\u4e00\uff0c$\\rm FFT$\u3002\u5b83\u4f9d\u8d56\u7684\u662f $n$ \u4e3a $2$ \u7684\u6b21\u5e42\uff0c\u4e14 $\\omega_{\\frac{n}{2^k}}$ \u5b58\u5728\uff08\u5982\u679c\u5728\u6a21\u610f\u4e49\u4e0b\u7684\u8bdd\uff09\uff0c\u6765\u5bf9\u591a\u9879\u5f0f\u8fdb\u884c\u5206\u6cbb\u3002\u5177\u4f53\u6765\u8bb2\uff0c\u8003\u8651\u5c06\u539f\u591a\u9879\u5f0f\u5947\u5076\u5206\u6cbb\u3002\n$$F_0(z)=\\sum_{i\\bmod 2=0}f_iz^{\\frac{i}{2}},F_1(z)=\\sum_{i\\bmod2=0}f_iz^{\\frac{i-1}{2}}$$\n\u4ece\u800c\uff1a\n$$F(\\omega_n^k)=F_0(\\omega_n^{2k})+\\omega_n^kF_1(\\omega_n^{2k})$$\n\u8fd9\u6837\u5206\u6cbb\u8fd8\u4e0d\u592a\u591f\uff0c\u56e0\u4e3a\u8fd8\u8981\u6c42\u4ee3\u5165\u7684\u5355\u4f4d\u6839\u6b21\u6570\u548c\u591a\u9879\u5f0f\u6b21\u6570\u76f8\u540c\u3002\u6240\u4ee5\u6211\u4eec\u518d\u628a\u5355\u4f4d\u6839\u53d8\u4e00\u4e0b\u3002\n$$F(\\omega_n^k)=F_0(\\omega_{\\frac{n}{2}}^k)+\\omega_n^kF_1(\\omega_{\\frac{n}{2}}^k)$$\n\u53d1\u73b0 $k$ \u548c $k+\\frac{n}{2}$ \u5904\u7684\u503c\u5bf9\u5e94\u7684\u8868\u8fbe\u5f0f\u5f88\u76f8\u4f3c\u3002\n$$F(\\omega_n^{k+\\frac{n}{2}})=F_0(\\omega_{\\frac{n}{2}}^k)-\\omega_n^kF_1(\\omega_{\\frac{n}{2}}^k)$$\n\u4ece\u800c\u6211\u4eec\u53ef\u4ee5\u5c06\u95ee\u9898\u89c4\u6a21\u7f29\u5c0f\u4e00\u534a\uff0c\u4e14\u53ef\u4ee5\u4e00\u6b21\u6c42\u4e24\u4e2a\u503c\u3002\u800c\u5bf9\u4e8e $\\rm IDFT$\uff0c\u76f8\u5f53\u4e8e\u4ee3\u5165\u7684\u5355\u4f4d\u6839\u53d6\u53cd\uff0c\u6700\u540e\u5f97\u5230\u7684\u7cfb\u6570\u518d\u9664 $n$\u3002\n$$F(\\omega_n^{-k})=\\sum_{i=0}^{n-1}f_i\\omega_n^{-ki}=\\sum_{i=0}^{n-1}f_i\\omega_{n}^{(n-k)i}=f_0+\\sum_{i=1}^{n-1}f_{n-i}\\omega_{n}^{ki}=F^R(\\omega_n^k)$$\n\u6240\u4ee5\u53ea\u9700\u8981\u628a $F$ \u7684\u7cfb\u6570\u4ece $1$ \u5230 $n-1$ \u7ffb\u8f6c\u4e00\u4e0b\u5c31\u80fd\u8f6c\u5316\u6210 $\\rm DFT$ \u7684\u8fc7\u7a0b\u3002\n\n\u5e73\u5e38\u6211\u4eec\u4f53\u611f $\\rm FFT$ \u53ea\u662f\u666e\u901a\u7684\u591a\u9879\u5f0f\u4e58\u6cd5\u662f\u56e0\u4e3a\uff0c\u6211\u4eec\u5355\u4f4d\u6839\u7528\u7684\u662f $>\\deg F+\\deg G$ \u7684\u6700\u5c0f\u7684 $2$ \u7684\u6b21\u5e42\u3002\u6a21\u6570\u6bd4\u6700\u5927\u53ef\u80fd\u5f97\u5230\u7684\u6b21\u6570\u8fd8\u5927\uff0c\u5c31\u6ca1\u6709\u5f71\u54cd\u4e86\u3002\n\n\u56de\u5230\u8fd9\u9053\u9898\u3002\u8fd9\u9053\u9898\u5b9e\u9645\u4e0a\u8981\u6c42\u7684\u662f\u6a21 $n+1$ \u610f\u4e49\u4e0b $n$ \u6b21\u5355\u4f4d\u6839\u4e0b\u7684 $\\rm DFT$\u3002\u6211\u4eec\u4f9d\u7136\u60f3\u6cbf\u7528 $\\rm FFT$ \u7684\u5206\u6cbb\u601d\u8def\uff0c\u6700\u5927\u7684\u95ee\u9898\u5728\u4e8e\u4e0d\u80fd\u518d\u6bcf\u6b21\u65b9\u4fbf\u5730\u5206\u6cbb\u6210\u5de6\u53f3\u4e24\u534a\u4e86\u3002\u4f46\u9898\u76ee\u4fdd\u8bc1\uff0c$n$ \u7684\u6240\u6709\u56e0\u5b50\u90fd\u5f88\u5c0f\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u6bcf\u6b21\u5206\u6cbb\u90fd\u7528 $n$ \u7684\u67d0\u4e2a\u8d28\u56e0\u5b50 $d$ \u5206\u6cbb\uff0c\u7136\u540e\u82b1\u8d39 $\\mathcal{O}(d)$ \u7684\u65f6\u95f4\u6765\u628a\u5b83\u4eec\u7ec4\u5408\u8d77\u6765\u3002\u4ece\u800c\u505a\u5230 $\\mathcal{O}(n\\sum k_ip_i)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002$k_i,p_i$ \u5206\u522b\u8868\u793a $n$ \u7684\u8d28\u56e0\u5b50\u548c\u5b83\u7684\u6b21\u6570\u3002\u8003\u8651\u6bcf\u4e2a\u8d28\u56e0\u5b50\u4f1a\u51fa\u73b0 $k_i$ \u6b21\uff0c\u6bcf\u6b21\u90fd\u4f1a\u9020\u6210 $\\mathcal{O}(p_in)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\uff08\u8fd9\u91cc\u548c $\\rm FFT$ \u4e0d\u4e00\u6837\uff0c\u4e0b\u9762\u8bf4\uff09\n \n\u5177\u4f53\u6765\u8bb2\uff0c\u6211\u4eec\u6bcf\u5c42\u9009\u62e9 $n$ \u7684\u4e00\u4e2a\u56e0\u5b50 $m$\uff0c\u56e0\u4e3a\u6a21\u6570\u7684 $\\varphi$ \u503c\u662f $n$\uff0c\u4ece\u800c\u6c42\u51fa\u539f\u6839 $g$ \u540e $m$ \u6b21\u5355\u4f4d\u6839 $g^{\\frac{n}{m}}$ \u4e00\u5b9a\u5b58\u5728\u3002\u7136\u540e\u4eff\u7167\u4e0a\u8ff0\u8fc7\u7a0b\u5206\u6cbb\uff1a\n$$F_j(z)=\\sum_{i\\bmod m=j}f_iz^{\\frac{i-j}{m}}$$\n\u4e4b\u540e\u7ec4\u5408\uff1a\n$$F(\\omega_n^k)=\\sum_{j=0}^{m-1}\\omega_{n}^{ij}F_j(\\omega_{\\frac{n}{m}}^k)$$\n\u8fd9\u91cc\u5c31\u4e0d\u80fd\u518d\u50cf\u521a\u521a\u4e00\u6837\u7279\u5316\u4e00\u4e0b $k$ \u6bd4\u8f83\u5927\u7684\u60c5\u51b5\u4e86\uff0c\u4e0d\u8fc7\u53ea\u9700\u8981\u8ba9\u6307\u6570\u5bf9\u5355\u4f4d\u6839\u7684\u6b21\u6570\u53d6\u6a21\u5373\u53ef\u5f97\u5230\u9700\u8981\u7684\u503c\u3002\u56e0\u4e3a\u4e0d\u80fd\u4e00\u6b21\u6c42\u51fa\u591a\u4e2a\u503c\uff0c\u6240\u4ee5\u6bcf\u5c42\u9700\u8981\u7684\u8ba1\u7b97\u91cf\u4e4b\u548c\u90fd\u662f $\\mathcal{O}(nd)$ \u7684\u3002\n\n\u4f3c\u4e4e\u8fd8\u53ef\u4ee5\u5b9e\u73b0\u6210\u975e\u9012\u5f52\u7248\u7684\uff0c\u4f46\u6211\u4e0d\u4f1a\u4e86\u3002~~\u4e0d\u8fc7\u6211\u8fd9\u4e2a\u9012\u5f52\u7248\u7684\u5f00\u4e86 O2 \u597d\u50cf\u8fd8\u633a\u5feb\u3002~~\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nstruct IO\n{\n\tstatic const int N = 1 << 22;\n\tchar buf[N], pbuf[N], *p1 = buf, *p2 = buf, *pp = pbuf;\n\t#define gc() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, N, stdin), p1 == p2) ? EOF : *p1++)\t\n\ttemplate <typename T>\n\tvoid read(T& x)\n\t{\n\t\tx = 0; char ch; int f = 0;\n\t\twhile ((ch = gc()) < '0' || ch > '9') f |= (ch == '-');\n\t\twhile (x = (x << 1) + (x << 3) + (ch ^ 48), (ch = gc()) >= '0' && ch <= '9') ;\n\t\tif (f) x = ~x + 1;\n\t}\n\tvoid putc(char c)\n\t{\n\t\tif (pp - pbuf == N) fwrite(pbuf, 1, N, stdout), pp = pbuf;\n\t\t*pp++ = c;\n\t}\n\ttemplate <typename T>\n\tvoid print(T x)\n\t{\n\t\tstatic int st[20]; int tp = 0;\n\t\tif (x < 0) putc('-'), x = ~x + 1;\n\t\tdo st[++tp] = x % 10, x /= 10; while (x);\n\t\twhile (tp) putc(st[tp--] + '0');\n\t}\n\t~IO() { fwrite(pbuf, pp - pbuf, 1, stdout); }\n}io;\nconst int N = 5e5 + 10; typedef long long ll;\nint d[30], gn[N], n, mod, m;\ninline int ksm(int a, int b) \n{ \n    int ret = 1; \n    while (b) \n    { \n        if (b & 1) ret = (ll)ret * a % mod;\n        a = (ll)a * a % mod; b >>= 1;\n    } \n    return ret;\n}\nvoid init()\n{\n    std::vector<int> P;\n    for (int i = 2, t = n; i <= 7; ++i)\n    {\n        if (t % i) continue;\n        P.push_back(i);\n        while (t % i == 0) d[++m] = i, t /= i;\n    }\n    auto check = [&](int g)\n    {\n        int phi = mod - 1;\n        for (auto p : P) if (ksm(g, phi / p) == 1) return false;\n        return true;\n    };\n    int G = 1; while (!check(G)) ++G;\n    gn[0] = 1; for (int i = 1; i < N; ++i) gn[i] = (ll)gn[i - 1] * G % mod;\n}\nstruct Poly\n{\n    std::vector<int> a;\n    int& operator[](const int& id) { return a[id]; }\n    void setTime(const int& tim) { a.resize(tim + 1); }\n    int getTime() { return (int)a.size() - 1; }\n    std::vector<int>::iterator begin() { return a.begin(); }\n    std::vector<int>::iterator end() { return a.end(); }\n}A, B;\nvoid FFT(Poly& F, int dep)\n{\n    if (!F.getTime()) return ;\n    int n = F.getTime() + 1, m = d[dep];\n    std::vector<Poly> A; A.resize(m);\n    for (int i = 0; i < m; ++i) A[i].setTime(n / m - 1);\n    for (int i = 0; i < n; ++i) A[i % m][(i - i % m) / m] = F[i];\n    for (int i = 0; i < m; ++i) FFT(A[i], dep + 1);\n    for (int i = 0, p = ::n / n; i < n; ++i)\n    {\n        F[i] = 0;\n        for (int j = 0, q = 0; j < m; ++j, (q += i) %= n)\n            (F[i] += (ll)gn[p * q] * A[j][i % (n / m)] % mod) %= mod;\n    }\n}\nint main()\n{\n    int C; io.read(n); io.read(C); mod = n + 1; init();\n    A.setTime(n - 1); B.setTime(n - 1);\n    for (int i = 0; i < n; ++i) io.read(A[i]);\n    for (int i = 0; i < n; ++i) io.read(B[i]);\n    FFT(A, 1); FFT(B, 1);\n    for (int i = 0; i < n; ++i) A[i] = (ll)A[i] * ksm(B[i], C) % mod;\n    std::reverse(++A.begin(), A.end()); FFT(A, 1); \n    for (int i = 0, inv = ksm(n, mod - 2); i < n; ++i) \n        A[i] = (ll)A[i] * inv % mod, io.print(A[i]), io.putc('\\n');\n    return 0;\n}\n```",
        "postTime": 1658918397,
        "uid": 137603,
        "name": "zhiyangfan",
        "ccfLevel": 9,
        "title": "P4191 [CTSC2010]\u6027\u80fd\u4f18\u5316 \u9898\u89e3"
    },
    {
        "content": "\u8bb0$n$\u6b21\u5355\u4f4d\u6839\u4e3a$\\omega_{n}$\u3002\u5982\u679c$DFT$\u65f6\u4ee3\u5165\u7684\u70b9\u503c\u662f$\\omega_n^0,\\omega_n^1,...,\\omega_n^{n-1}$\uff0c\u90a3\u4e48\u6211\u4eec\u6c42\u7684\u5c31\u662f\u6a21$n$\u7684\u5faa\u73af\u5377\u79ef\uff08\u5355\u4f4d\u6839\u7684\u6027\u8d28\uff0c\u4e58\u7684\u65f6\u5019\u6307\u6570\u76f8\u5f53\u4e8e\u5bf9$n$\u53d6\u6a21\uff09\u3002\n\n\u800c\u6734\u7d20\u7684$NTT$\u5b9e\u73b0\u9700\u8981\u5c06\u5e8f\u5217\u957f\u5ea6\u8865\u5230$2^k$\uff0c\u8fd9\u6837\u9700\u8981\u4ee3\u5165\u7684\u662f$2^k$\u6b21\u5355\u4f4d\u6839\uff0c\u6c42\u5faa\u73af\u5377\u79ef\u5c31\u4e0d\u5bf9\u4e86\u3002\u4e5f\u5c31\u662f\u5e8f\u5217\u957f\u5ea6\u5fc5\u987b\u662f$n$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5904\u7406\u4efb\u610f\u957f\u5ea6\u7684$DFT$\uff0c\u53ef\u4ee5\u7528$Bluestein's\\ Algotithm$\u89e3\u51b3\uff1a\n\n\u8003\u8651$DFT$\u7684\u5f62\u5f0f\uff1a\n$$\\begin{aligned}y_k&=\\sum_{i=0}^{n-1}a_i\\omega_n^{ki}\\\\&=\\sum_{i=0}^{n-1}a_i\\omega_{2n}^{k^2+i^2-(k-i)^2}\\\\&=\\omega_{2n}^{k^2}\\sum_{i=0}^{n-1}a_i\\omega_{2n}^{i^2}\\omega_{2n}^{-(k-i)^2}\\end{aligned}$$\n\n\u6ce8\u610f\u5230\u548c\u5f0f\u90e8\u5206\u662f\u4e2a\u5377\u79ef\uff0c\u53ef\u4ee5\u7528$FFT/NTT$\u8ba1\u7b97\u3002\u6240\u4ee5$Bluestein$\u7684\u590d\u6742\u5ea6\u662f$O(n\\log n)$\u7684\u3002\n\n\u5177\u4f53\uff1a$k-i$\u53ef\u80fd\u662f\u8d1f\u7684\uff0c\u6240\u4ee5\u5bf9\u540e\u4e00\u9879\u53f3\u79fb$n$\u4f4d\uff0c\u4ee4$f_i=a_i\\omega_{2n}^{i^2},\\ g_i=\\omega_{2n}^{-(i-n)^2}$\uff0c\u90a3\u4e48$y_k=\\omega_{2n}^{k^2}\\sum_{i}f_ig_{n+k-i}=\\omega_{2n}^{k^2}(f\\times g)_{n+k}$\u3002\n\n$IDFT$\u540c\u7406\uff0c\u53ef\u4ee5\u76f4\u63a5\u4ee4$\\omega_{2n}=\\omega_{2n}^{-1}$\uff0c\u4ee3\u5230$DFT$\u7684\u5f0f\u5b50\u91cc\uff0c\u4e5f\u53ef\u4ee5\u4e00\u6837\u7684\u63a8\u4e00\u4e0b\u3002\n\n\u8fd9\u6837\u505a\u9700\u8981\u7528\u5230$2n$\u6b21\u5355\u4f4d\u6839\uff0c\u6709\u4e9b\u9898\u53ef\u80fd\u4e0d\u5b58\u5728\uff0c\u53ef\u4ee5\u6362\u79cd\u66ff\u6362$ki$\u7684\u65b9\u5f0f\u6765\u907f\u514d\u3002\u81ea\u5df1\u60f3\u4e00\u4e0b\u597d\u54af\u3002\n\n\u6240\u4ee5\u5bf9\u4e8e\u672c\u9898\u5c31\u4ee3\u5165$n$\u4e2a\u5355\u4f4d\u6839\uff0c\u7528$Bluestein$\u8f6c\u6210\u70b9\u503c\u8868\u793a\uff0c\u4e24\u591a\u9879\u5f0f\u76f8\u4e58\u518d$IDFT$\u5373\u53ef\u3002\u590d\u6742\u5ea6$O(n\\log n)$\u3002\n\n\u4ee3\u7801\u5495\u5495\u5495\u4e86\u3002",
        "postTime": 1552184599,
        "uid": 39887,
        "name": "SovietPower\u2728",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4191 \u3010[CTSC2010]\u6027\u80fd\u4f18\u5316\u3011"
    },
    {
        "content": "```\n\u7531\u539f\u6839\u7684\u6027\u8d28\u53ef\u77e5\uff0c\u957f\u5ea6\u4e3ann\u7684FFT\u5373\u53ef\u652f\u6301\u2217\u2217\u8fd0\u7b97\uff0c\u96be\u70b9\u5728\u4e8ebCbC\u4f7f\u5f97\u503c\u57df\u8fc7\u5927\uff0c\u5373\u4f7f\u80fd\u591f\u5feb\u901f\u8ba1\u7b97\u957f\u5ea6\u4e3ann\u7684FFT\uff0c\u4f7f\u7528\u590d\u6570\u8fd0\u7b97\u7684FFT\u4e5f\u5f88\u96be\u5f97\u5230\u7cbe\u786e\u7684\u7b54\u6848\u3002\n\n\u5148\u8003\u8651\u5982\u4f55\u5feb\u901f\u8ba1\u7b97\u957f\u5ea6\u4e3ann\u7684FFT\u3002 \n\u5f53n=2kn=2k\u65f6\uff0cFFT\u6bcf\u6b21\u662f\u5c06\u5e8f\u5217\u4e00\u5206\u4e3a\u4e8c\uff0c\u7136\u540e\u5229\u7528\u5206\u6cbb\u7684\u6280\u5de7\u6765\u8fdb\u884c\u5408\u5e76\u3002 \n\u56e0\u6b64\u5f53n=2k1\u22c53k2\u22c55k3\u22c57k4n=2k1\u22c53k2\u22c55k3\u22c57k4\u65f6\uff0cFFT\u6bcf\u6b21\u53ef\u80fd\u5c06\u5e8f\u5217\u4e00\u5206\u4e3ap(p=2,3,5,7)p(p=2,3,5,7)\uff0c\u5408\u5e76\u65f6\u7684\u5f0f\u5b50\u9700\u8981\u91cd\u65b0\u63a8\u5bfc\u3002 \n\u4e0d\u59a8\u8bbe\u662f\u5c06pp\u4e2a\u957f\u5ea6\u4e3ann\u7684\u5f0f\u5b50\u5408\u5e76\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3ap\u22c5np\u22c5n\u7684\u5f0f\u5b50\uff0c\u5373\u5229\u7528pp\u7ec4nn\u4e2a\u70b9\u503c\u5f97\u5230pnpn\u4e2a\u70b9\u503c\u3002 \n\u7531\u4e8e\u5206\u88c2\u65f6\u5c06\u6a21pp\u610f\u4e49\u76f8\u540c\u7684\u90e8\u5206\u653e\u5728\u4e86\u4e00\u8d77\uff0c\u6240\u4ee5\u5bf9\u4e8e\u5408\u5e76\u540e\u7684\u591a\u9879\u5f0f \nF(x)=\u22110\u2264i<pnaixi\nF(x)=\u22110\u2264i<pnaixi\n\n\u62c6\u5206\u7684pp\u4e2a\u591a\u9879\u5f0f\u5206\u522b\u4e3a \nFr(x)=\u22110\u2264i<naip+rxi\nFr(x)=\u22110\u2264i<naip+rxi\n\n\u6545\u6709 \nF(\u03c9an+bpn)=\u22110\u2264r<p(\u03c9an+bpn)rFr(\u03c9bn)\nF(\u03c9pnan+b)=\u22110\u2264r<p(\u03c9pnan+b)rFr(\u03c9nb)\n\n\u4e8e\u662f\u53ef\u4ee5O(p)O(p)\u5408\u5e76\u51fa\u6bcf\u4e2a\u70b9\u7684\u503c\uff0c\u800c\u8fd9\u6837\u7684\u5206\u6cbb\u5c42\u6570\u662fO(\u22114i=1ki)=O(logn)O(\u2211i=14ki)=O(log\u2061n)\uff0c\u6bcf\u5c42\u7684\u590d\u6742\u5ea6\u662fO(pn)=O(7n)O(pn)=O(7n)\uff0c\u56e0\u6b64\u6574\u4f53\u7684\u590d\u6742\u5ea6\u662fO(nlogn)O(nlog\u2061n)\u3002 \n\u4e0a\u8ff0\u65b9\u6cd5\u4e5f\u53ef\u975e\u9012\u5f52\u5b9e\u73b0\uff0c\u5728\u5206\u88c2\u8fc7\u7a0b\u4e2d\u6ce8\u610f\u6bcf\u6bb5\u4e4b\u95f4\u4e92\u4e0d\u5f71\u54cd\uff0c\u5728\u5408\u5e76\u8fc7\u7a0b\u4e2d\u6ce8\u610f\u5b58\u50a8\u65b9\u5f0f\u5373\u53ef\uff0c\u7b14\u8005\u7684\u505a\u6cd5\u5c31\u662f\u8fed\u4ee3\u7684\u505a\u6cd5\u3002\n\u518d\u8003\u8651\u89e3\u51b3\u7cbe\u5ea6\u95ee\u9898\uff0c\u7531\u540c\u4f59\u5173\u7cfb\u7684\u6027\u8d28\uff0c\u53ef\u4ee5\u4f7f\u5f97\u6bcf\u6b21\u8ba1\u7b97\u76f8\u4e58\u65f6\u7684\u503c\u57df\u964d\u4f4e\u5230O(n2)O(n2)\uff0c\u4f46\u9700\u8981\u5c06\u5355\u4f4d\u590d\u6839\u6620\u5c04\u5230\u6a21\u610f\u4e49\u4e0b\u7684\u5269\u4f59\u7cfb\u4e2d\u3002 \n\u7531\u4e8e(n+1)(n+1)\u662f\u8d28\u6570\uff0c\u03c6(n+1)=n\u03c6(n+1)=n\uff0c\u6240\u4ee5\u5728\u6a21(n+1)(n+1)\u610f\u4e49\u4e0b\u5b58\u5728\u539f\u6839gg\uff0c\u4f7f\u5f97g\u2261\u03c9n(modn+1)g\u2261\u03c9n(modn+1)\uff0c\u4e8e\u662f\u5229\u7528NTT\u4ee3\u66ffFFT\u8ba1\u7b97\u5373\u53ef\u3002 \n\u7531\u4e8e\u6a21(n+1)(n+1)\u610f\u4e49\u4e0b\u539f\u6839\u7684\u6570\u91cf\u4e3a\u03c6(n)=n\u220fpiisprime,pi|n1\u22121pi\u03c6(n)=n\u220fpiisprime,pi|n1\u22121pi\uff0c\u800cnn\u7684\u8d28\u56e0\u5b50\u5927\u5c0f\u4e0d\u8d85\u8fc710\uff0c\u6240\u4ee5\u671f\u671b\u68c0\u67e5358\u22485358\u22485\u6b21\u5c31\u53ef\u4ee5\u627e\u5230\u539f\u6839\u4e86\u3002\n\n\u4e0a\u8ff0\u505a\u6cd5\u57fa\u4e8enn\u662f10-smooth number\uff0c\u5373Cooley\u2013Tukey FFT algorithm\uff0c\u800c\u5bf9\u4e8e\u66f4\u5f3a\u6027\u8d28\u7684nn\uff0c\u53ef\u4ee5\u4f7f\u7528Bluestein\u2019s algorithm\u3002\n#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nconst int maxn = 500001;\nint n, m, mod, tot, p[maxn], pw[maxn], a[maxn], b[maxn];\nint mod_pow(int x, int k)\n{\n    int ret = 1;\n    for( ; k > 0; k >>= 1, x = (LL)x * x % mod)\n        if(k & 1)\n            ret = (LL)ret * x % mod;\n    return ret;\n}\nvoid NTT(int x[maxn], int flag)\n{\n    static int y[maxn] = {};\n    int *cur = x, *nxt = y;\n    for(int i = tot - 1, delta = n / p[i]; i > 0; --i, delta /= p[i], swap(cur, nxt))\n        for(int j = 0, *np = nxt; j < n; j += delta * p[i])\n            for(int k = 0; k < p[i]; ++k)\n                for(int l = 0, *cp = cur + j + k; l < delta; ++l, ++np, cp += p[i])\n                    *np = *cp;\n    for(int i = 0, clen = 1, nlen = p[i]; i < tot; ++i, clen = nlen, nlen *= p[i], swap(cur, nxt))\n        for(int j = 0, k = 0, ww = 1, delta = 0; j < n; ++j, k = k + 1 < clen ? k + 1 : 0, ww = (LL)ww * pw[i] % mod, delta = delta + nlen > j ? delta : delta + nlen)\n        {\n            nxt[j] = 0;\n            for(int t = 0, www = 1; t < nlen; t += clen, www = (LL)www * ww % mod)\n                nxt[j] = (nxt[j] + (LL)www * cur[delta + t + k]) % mod;\n        }\n    if(flag == -1)\n    {\n        reverse(cur + 1, cur + n);\n        for(int i = 0; i < n; ++i)\n            cur[i] = (LL)cur[i] * n % mod; \n    }\n    if(cur != x)\n        memcpy(x, cur, n * sizeof(int));\n}\nint main()\n{\n    int tmp;\n    scanf(\"%d%d\", &n, &m);\n    mod = n + 1;\n    tmp = n;\n    m = (m - 1) % n + 1;\n    for(int i = 2; i * i <= tmp; ++i)\n        for( ; tmp % i == 0; tmp /= i, p[tot++] = i);\n    if(tmp > 1)\n        p[tot++] = tmp;\n    for(int ori = 2; ; ++ori)\n    {\n        bool flag = 1;\n        for(int i = 0; i < tot && flag; ++i)\n            if(!i || p[i - 1] != p[i])\n                flag &= mod_pow(ori, n / p[i]) != 1;\n        if(flag)\n        {\n            pw[tot - 1] = ori;\n            for(int i = tot - 2; i >= 0; --i)\n                pw[i] = mod_pow(pw[i + 1], p[i + 1]);\n            break;\n        }\n    }\n    for(int i = 0; i < n; ++i)\n        scanf(\"%d\", a + i);\n    NTT(a, 1);\n    for(int i = 0; i < n; ++i)\n        scanf(\"%d\", b + i);\n    NTT(b, 1);\n    for(int i = 0; i < n; ++i)\n        a[i] = (LL)a[i] * mod_pow(b[i], m) % mod;\n    NTT(a, -1);\n    for(int i = 0; i < n; ++i)\n        printf(\"%d\\n\", a[i]);\n    return 0;\n}\n```",
        "postTime": 1535601150,
        "uid": 123679,
        "name": "okbj",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4191 \u3010[CTSC2010]\u6027\u80fd\u4f18\u5316\u3011"
    },
    {
        "content": "\u9898\u610f\uff1a \n\n\u6c42\u7ed9\u51fa\u4e24\u4e2a\u957f\u5ea6\u4e3an\u7684\u6574\u6570\u5e8f\u5217a[0..n\u22121],b[0..n\u22121]\u548c\u975e\u8d1f\u6574\u6570C\u3002\u5bf9\u4e8e\u4e24\u4e2a\u957f\u5ea6\u4e3an\u7684\u6574\u6570\u5e8f\u5217\uff0c\u5b9a\u4e49\u2217\u8fd0\u7b97\uff0c\u7ed3\u679c\u4e3a\u4e00\u4e2a\u957f\u5ea6\u4e3an\u7684\u6574\u6570\u5e8f\u5217\uff0c\u4f8b\u5982f\u2217g=h\uff0c\u5219\u6709h[k]=\u2211i+j\u2261k(modn)f[i]\u22c5g[j]\u3002 \n\u6c42a\u2217b\u2217b\u2217\u22ef\u2217b\u6bcf\u4e00\u4f4d\u6a21(n+1)\u7684\u503c\uff0c\u5176\u4e2d\u6709C\u4e2a\u2217\u8fd0\u7b97\uff0c(n+1)\u662f\u8d28\u6570\uff0cn\u7684\u8d28\u56e0\u6570\u5927\u5c0f\u5747\u4e0d\u8d85\u8fc710\u3002 \nn\u22645\u22c5105,a[i],b[i],C\u2264109\n\n\u9898\u89e3\uff1a\n\n\u5faa\u73af\u5377\u79ef\u88f8\u9898\u3002\u9996\u5148\u5377\u79ef\u6ee1\u8db3\u7ed3\u5408\u5f8b\uff0c\u540e\u9762\u7684\u90e8\u5206\u53ef\u4ee5\u6c42\u51fa\u70b9\u503c\u4e4b\u540e\u5feb\u901f\u5e42\u3002\n\n\u8003\u8651FFT\u5982\u4f55\u6c42\u51fa\u5faa\u73af\u7684\u5377\u79ef\uff1a \n\u7531Cooley\u2212Tukey\u7b97\u6cd5\u4e2d\u7684IDFT\u53ef\u77e5\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u4e00\u4e2a\u51fd\u6570\u7684n\u4e2a\u70b9\u503c\u5219\u53ef\u4ee5\u901a\u8fc7\u9006\u53d8\u6362\u6c42\u51fa\u539f\u51fd\u6570\uff0c\u73b0\u5728\u5047\u8bbe\u5df2\u7ecf\u6c42\u51fa\u4e24\u4e2a\u51fd\u6570\u7684n\u4e2a\u70b9\u503c\u3002\u6309\u7167\u540c\u6837\u7684\u65b9\u6cd5\uff0c\u6709\uff1a\n\nA(\u03c9kn)=\u2211i=0n\u22121aiwikn,B(\u03c9kn)=\u2211i=0n\u22121biwikn\n\n\u76f8\u4e58\u53ef\u5f97\uff1a \n\nC(\u03c9k)=\u2211i=0n\u22121aiwikn\u2211j=0n\u22121bjwjkn\n\n\u56e0\u4e3a\u6709\u03c9ikn\u22c5\u03c9jkn=\u03c9k\u22c5(i+j)n=\u03c9k\u22c5((i+j)modn)n\n\n\u90a3\u4e48\n\nC(wkn)=\u2211(i+jmodn)=lAlwkln\n\n\u5176\u4e2d\n\nAl=ai\u22c5bj(i+jmodn=l)\n\n\u53d1\u73b0C\u5c31\u662fDFT\u540e\u7684\u6807\u51c6\u5f62\u5f0f\uff0c\u4e5f\u5c31\u662f\u8bf4\u76f4\u63a5\u5bf9\u8fd9\u4e2a\u70b9\u503c\u8fdb\u884cIDFT\u5c31\u53ef\u4ee5\u5f97\u5230\u539f\u51fd\u6570\uff0c\u76f4\u63a5\u6c42\u70b9\u503c\u5c31\u597d\u4e86\u3002\n\n\u76f4\u63a5\u6c42\u70b9\u503c\uff1f\uff1fn\u53ef\u80fd\u4e0d\u662f2k\u7684\u5f62\u5f0f\u3002\n\n\u5176\u5b9e\u53ea\u9700\u8981\u5bf9n\u8fdb\u884c\u8d28\u56e0\u6570\u5206\u89e3\uff0c\u6bcf\u4e00\u5c42\u6bcf\u4e00\u4e2a\u6570\u66b4\u529b\u9009\u53d6\u4e0a\u4e00\u5c42\u7684\u7ed3\u679c\u3002 \n\u56e0\u4e3an\u7684\u6700\u5927\u8d28\u56e0\u6570\u4e0d\u8d85\u8fc77\uff0c\u90a3\u4e48\u6bcf\u4e00\u5c42\u7684\u6bcf\u4e00\u4e2a\u6570\u9009\u62e9\u7684\u6570\u4e0d\u8d85\u8fc77\u4e2a\uff0c\u590d\u6742\u5ea6\u662fO(7\u22c5nlogn)\u3002 \n\u63a8\u5bfc\u8fc7\u7a0b\u53ef\u4ee5\u53c2\u8003:[\u4f20\u9001\u95e8](http://blog.csdn.net/skywalkert/article/details/51737272)\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int Maxn=5e5+50;\ninline int read(){\n    char ch=getchar();int i=0,f=1;\n    while(!isdigit(ch)){if(ch=='-')f=-1;ch=getchar();}\n    while(isdigit(ch)){i=(i<<1)+(i<<3)+ch-'0';ch=getchar();}\n    return i*f;\n}\ninline void W(int x){\n    static int buf[50];\n    if(!x){putchar('0');return;}\n    while(x)buf[++buf[0]]=x%10,x/=10;\n    while(buf[0])putchar(buf[buf[0]--]+'0');\n}\nint n,C,G,pw[Maxn],a[Maxn],b[Maxn],tp[Maxn],mod,pr[Maxn],tot,pos[Maxn];\ninline int power(int a,int b){\n    int res=1;\n    for(;b;b>>=1,a=1ll*a*a%mod)if(b&1)res=1ll*res*a%mod;\n    return res; \n}\ninline bool check(int x,int t){\n    for(int i=1;i<=tot;i++)if(power(x,t/pr[i])==1)return true;\n    return false;\n}\ninline void findori(int phi){\n    for(int i=2;i<=10;i++)\n        for(;!(phi%i);pr[++tot]=i,phi/=i);\n    G=2;\n    while(check(G,n))++G;\n}\ninline int getpos(int x,int s,int now,int al){\n    if(now==tot+1)return s;\n    int bl=al/pr[now],rs=x%pr[now];\n    return getpos((x-rs)/pr[now],s+bl*rs,now+1,bl);\n}\ninline void dft(int *A){\n    memcpy(tp,A,sizeof(int)*n);\n    for(int i=0;i<n;i++)tp[pos[i]]=A[i];\n    for(int i=0;i<n;i++)A[i]=tp[i];\n    for(int bl=1,pos=tot;pos>=1;bl*=pr[pos],--pos){\n        int bl_len=bl*pr[pos],ct=n/bl_len;\n        for(int bg=0;bg<n;bg+=bl_len)\n            for(int p=0;p<bl_len;p+=bl){\n                for(int q=0;q<bl;++q){\n                    int s=0,o=(p+q)*ct;\n                    for(int r=0;r<pr[pos];++r)\n                        (s+=1ll*pw[1ll*o*r%n]*A[bg+r*bl+q]%mod)%=mod; \n                    tp[bg+p+q]=s;\n                }\n            }\n        for(int i=0;i<n;i++)A[i]=tp[i];\n    }\n} \nint main(){\n    n=read(),C=read();mod=n+1;findori(n);C=(C-1)%n+1; \n    for(int i=0;i<n;i++)a[i]=read();\n    for(int i=0;i<n;i++)b[i]=read();\n    pw[0]=1;for(int i=1;i<n;i++)pw[i]=1ll*pw[i-1]*G%mod;\n    for(int i=1;i<n;i++)pos[i]=getpos(i,0,1,n);\n    dft(a),dft(b);\n    for(int i=0;i<n;i++)a[i]=1ll*a[i]*power(b[i],C)%mod;\n    dft(a);reverse(a+1,a+n);\n    for(int i=0;i<n;i++)a[i]=1ll*a[i]*power(n,n-1)%mod;\n    for(int i=0;i<n;i++)W(a[i]),putchar('\\n');\n}```",
        "postTime": 1535545542,
        "uid": 98856,
        "name": "\u61a8\u8c46Beng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4191 \u3010[CTSC2010]\u6027\u80fd\u4f18\u5316\u3011"
    }
]