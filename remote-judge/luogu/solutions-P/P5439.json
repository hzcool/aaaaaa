[
    {
        "content": "#### \u9898\u76ee\u5927\u610f\n\n> \u7ed9\u4e24\u9897\u6811 $T_1, T_2$ \u4ee5\u53ca\u6620\u5c04 $f: T_1 \\rightarrow T_2$\uff0c\u5176\u4e2d $T_2$ \u6709\u6839\uff0c\u8bb0 $[u,v]$ \u4e3a $T_1$ \u4e0a\u4e24\u70b9 $u, v$ \u7684\u7b80\u5355\u8def\u5f84\u4e0a\u70b9\u96c6\uff0c\u6c42\n> $$\\sum_{x \\in T_1} \\sum_{y \\in T_1} \\sum_{u\\in T_1} \\sum_{v\\in T_1} [x<y][u<v][[u,v] \\subseteq [x, y]] (\\operatorname{dep}(\\operatorname{lca}(f(u),f(v))) - 1)$$\n> \u5176\u4e2d\u6c42 LCA \u548c\u6df1\u5ea6\u5747\u4e3a\u5728 $T_2$ \u4e0a\u3002\n\n#### \u524d\u7f6e\u77e5\u8bc6\n\n- \u70b9\u5206\u6cbb\n- \u865a\u6811\n\n#### \u9898\u89e3\n\n\u6539\u53d8\u6c42\u548c\u987a\u5e8f\uff0c\u8003\u8651\u5c06\u4e0e\u503c\u4e3b\u8981\u76f8\u5173\u7684 $u, v$ \u653e\u5230\u524d\u9762\uff1a\n$$\\sum_{u\\in T_1} \\sum_{v\\in T_1} [u<v] (\\operatorname{dep}(\\operatorname{lca}(f(u),f(v))) - 1)\\sum_{x \\in T_1} \\sum_{y \\in T_1} [x<y][[u,v] \\subseteq [x, y]]$$\n\u6ce8\u610f $[u<v]+[v<u] = \\frac{[u\\neq v]}2$\uff0c\u4e0d\u59a8\u5c06\u95ee\u9898\u8f6c\u5316\u4e3a\u6c42\u4e0d\u540c\u70b9\u4e4b\u95f4\u5173\u7cfb\uff1a\n$$\\frac14 \\sum_{u\\in T_1} \\sum_{v\\in T_1} [u\\neq v] (\\operatorname{dep}(\\operatorname{lca}(f(u),f(v))) - 1)\\sum_{x \\in T_1} \\sum_{y \\in T_1} [x\\neq y][[u,v] \\subseteq [x, y]]$$\n\u8003\u8651\u8fdb\u884c\u70b9\u5206\u6cbb\uff0c\u5bf9\u7a7f\u8fc7\u91cd\u5fc3 $c$ \u7684\u6240\u6709 $[u,v]$ \u5bf9\u7b54\u6848\u7684\u8d21\u732e\u8fdb\u884c\u7edf\u8ba1\u3002\u8bb0\u5f53\u524d\u5206\u6cbb\u65f6 $c$ \u4e3a\u6839\uff0c$\\operatorname{sub}(u)$ \u4e3a $u$ \u8282\u70b9\u5728\u6574\u4e2a $T_1$ \u7684\u5b50\u6811\u5927\u5c0f\u3002\u9996\u5148\u8003\u8651 $u, v$ \u5747\u4e0d\u4e3a $c$ \u7684\u60c5\u51b5\uff0c\u82e5\u5b83\u4eec\u5728\u4e0d\u540c\u5b50\u6811\u5185\uff0c\u5219\u8d21\u732e\u4e3a\n$$(\\operatorname{dep}(\\operatorname{lca}(f(u),f(v))) - 1) \\operatorname{sub} (u) \\operatorname{sub} (v)$$\n\u8003\u8651\u6309\u7167\u6b64\u5b9a\u4e49\u5c06\u6574\u4e2a\u5206\u6cbb\u7684\u8fde\u901a\u5757\u7684\u8d21\u732e\u8fdb\u884c\u8ba1\u7b97\uff0c\u7136\u540e\u5bb9\u65a5\u6389\u6bcf\u4e2a\u5b50\u6811\u5185\u7684\u8d21\u732e\u3002\u5373\u6211\u4eec\u8981\u89e3\u51b3\u5bf9\u4e8e $T_1$ \u4e0a\u4e00\u4e2a\u70b9\u96c6 $S$\uff0c\u6c42\u51fa\n$$\\left(\\sum_{u\\in S} \\sum_{v\\in S} (\\operatorname{dep}(\\operatorname{lca}(f(u),f(v))) - 1) \\operatorname{sub} (u) \\operatorname{sub} (v) \\right) - \\sum_{u\\in S} (\\operatorname{dep}(f(u)) - 1)\\operatorname{sub}(u)^2$$\n\u8003\u8651\u5728 $T_2$ \u4e0a $(\\operatorname{dep}(\\operatorname{lca}(f(u),f(v))) - 1) \\operatorname{sub} (u) \\operatorname{sub} (v)$ \u7684\u610f\u4e49\uff0c\u8fd9\u7b49\u4ef7\u4e8e\u5c06 $f(u)$ \u5230 $T_2$ \u7684\u6839\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u52a0\u4e0a $\\operatorname{sub}(u)$ \u7684\u6743\u503c\uff0c\u8be2\u95ee $f(v)$ \u7684\u7236\u4eb2\u5230\u6839\u8282\u70b9\u7684\u8def\u5f84\u4e0a\u6743\u503c\u548c\u4e0e $\\operatorname{sub}(v)$ \u7684\u4e58\u79ef\u3002\u5982\u679c\u901a\u8fc7\u6570\u636e\u7ed3\u6784\u8fdb\u884c\u8ba1\u7b97\u4f1a\u591a\u51fa\u4e00\u4e2a $\\log$ \u7684\u4ee3\u4ef7\uff0c\u8003\u8651\u8be5\u95ee\u9898\u662f\u79bb\u7ebf\u7684\uff0c\u901a\u8fc7\u865a\u6811\u4f18\u5316\u590d\u6742\u5ea6\u3002\n\n\u5c06 $\\{f(u) | u\\in S\\} \\cup \\{ \\operatorname{root}(T_2) \\}$ \u7684\u865a\u6811\u5efa\u51fa\uff0c\u8003\u8651\u5148\u5c06\u6bcf\u4e2a\u70b9\u6620\u5c04\u5230\u7684\u70b9\u52a0\u4e0a\u5bf9\u5e94\u6743\u503c $w(f(u)) \\leftarrow w(f(u)) + \\operatorname{sub}(u)$\uff0c\u8fd9\u7ef4\u62a4\u4e86\u5b9e\u9645\u4fee\u6539\u5bf9\u5e94\u7684\u5dee\u5206\uff0c\u7b2c\u4e8c\u6b65\u5c06\u865a\u6811\u4ece\u4e0b\u81f3\u4e0a\u8fdb\u884c\u7d2f\u52a0\uff0c\u8fd9\u65f6\u6bcf\u4e2a\u70b9\u4e0e\u539f\u672c\u7684\u70b9\u6743\u6982\u5ff5\u4e00\u81f4\uff0c\u7b2c\u4e09\u6b65\u4ece\u4e0a\u81f3\u4e0b\u7d2f\u52a0\uff0c\u8bb0 $p(x)$ \u4e3a\u5728\u865a\u6811\u4e0a\u7684\u7236\u8282\u70b9\uff0c$s(f(u)) = s(p(f(u))) + w(p(f(u)))[\\operatorname{dep} (f(u)) - \\operatorname{dep}(p(f(u)))]$\u3002\n\n\u8fd9\u65f6 $\\sum_{v\\in S} s(f(v)) \\operatorname{sub}(v)$ \u5373\u4e3a\u6240\u6c42\u3002\u865a\u6811\u8ba1\u7b97\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(|S|)$\u3002\u4f46\u6ce8\u610f\u5efa\u7acb\u865a\u6811\u65f6\u901a\u5e38\u6709\u4e00\u4e2a\u5bf9 DFS \u5e8f\u6392\u5e8f\u7684\u95ee\u9898\uff0c\u8003\u8651\u5230\u672c\u9898\u6240\u6c42\u5168\u90e8\u4e3a\u79bb\u7ebf\u95ee\u9898\uff0c\u6240\u4ee5\u79bb\u7ebf\u8fdb\u884c\u591a\u6570\u7ec4\u7684\u57fa\u6570\u6392\u5e8f\u5373\u53ef\u505a\u5230\u4e25\u683c\u7684 $\\Theta\\left(m + \\sum |S|\\right) = \\Theta(m + n\\log n)$\u3002\n\n\u5bf9\u4e8e $u$ \u4e3a\u91cd\u5fc3\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u679a\u4e3e $v$ \u8fdb\u884c\u8ba1\u7b97\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u70b9\u5206\u6cbb\u5185\u90e8\u6240\u6d88\u8017\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(|S|)$\uff0c\u6545\u70b9\u5206\u6cbb\u7684\u603b\u4f53\u590d\u6742\u5ea6\u4e3a $\\Theta(n\\log n)$\u3002\u4e3a\u4e86\u8f85\u52a9\u6c42\u51fa\u865a\u6811\uff0c\u53ef\u80fd\u9700\u8981 $\\Theta(1)$ LCA \u8ba1\u7b97\uff0c\u9884\u5904\u7406\u7684\u7406\u8bba\u590d\u6742\u5ea6\u53ef\u4ee5\u505a\u5230 $\\Theta(m)$\uff0c\u4f7f\u7528\u6734\u7d20\u7684 ST \u8868\u53ef\u4ee5\u505a\u5230 $\\Theta(m\\log m)$\u3002\n\n\u56e0\u6b64\uff0c\u672c\u9898\u7684\u7406\u8bba\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(m + n\\log n)$\uff0c\u9700\u8981 $\\Theta(m + n\\log n)$ \u7684\u7a7a\u95f4\u3002\u672c\u9898 std(by PinkRabbit) \u7684\u5b9e\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(m\\log m + n\\log n)$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(m\\log m + n\\log n)$\u3002\n\n\u53d6\u51b3\u4e8e\u6c42\u6743\u503c\u8fd9\u4e00\u90e8\u5206\u7684\u4e0d\u540c\u5b9e\u73b0\uff0c\u53ef\u80fd\u6709\u4f8b\u5982\u4ee5\u4e0b\u4e00\u4e9b\u590d\u6742\u5ea6\u7684\u7b97\u6cd5\u53ef\u80fd\u5361\u8fc7\u65f6\u9650\uff1a\n\n\u6811\u94fe\u5256\u5206\uff1a$\\Theta(m + n\\log n\\log^2 m)$\n\nLCT / \u5168\u5c40\u5e73\u8861\u4e8c\u53c9\u6811\u4f18\u5316\uff1a$\\Theta(m\\log m + n\\log n \\log m)$\n\n\u4f7f\u7528 `std::sort()` \u8fdb\u884c DFS \u5e8f\u7684\u6392\u5e8f\uff1a$\\Theta(m\\log m + n\\log^2 n)$\uff0c\u7a7a\u95f4 $\\Theta(m\\log m + n)$\n\n#### \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n// #include <ctime>\n#define il inline\ntypedef long long LL;\nconst int MN = 300005;\nconst int MV = 12000005; // max virtual tree nodes < 2 N log N\nconst int Mod = 998244353, Inv2 = (Mod + 1) / 2;\nil void ad(int &x, int y) { x -= (x += y) >= Mod ? Mod : 0; }\n\nint N, M, Ans;\nint id[MN], h[MN], g[MN], nxt[MN * 3], to[MN * 3], tot;\nil void ins(int *a, int x, int y) { nxt[++tot] = a[x], to[tot] = y, a[x] = tot; }\nil void init() {\n\tint x;\n\tscanf(\"%d%d\", &N, &M);\n\tfor (int i = 1; i <= N; ++i) {\n\t\tscanf(\"%d\", &x);\n\t\tif (x) ins(g, x, i), ins(g, i, x);\n\t}\n\tscanf(\"%*d\");\n\tfor (int i = 2; i <= M; ++i) scanf(\"%d\", &x), ins(h, x, i);\n\tscanf(\"%*s\");\n\tfor (int i = 1; i <= N; ++i) scanf(\"%d\", &id[i]);\n} // read & edge-linking part\n\nint idf[MN], dfn[MN], dfc;\nint dep[MN], lg[MN * 2], st[MN * 2][20], ldf[MN], rdf[MN], ecn;\nvoid tdfs(int u) {\n\tidf[++dfc] = u, dfn[u] = dfc;\n\tst[++ecn][0] = u, ldf[u] = ecn;\n\tfor (int i = h[u]; i; i = nxt[i])\n\t\tdep[to[i]] = dep[u] + 1, tdfs(to[i]), st[++ecn][0] = u;\n\trdf[u] = ecn;\n}\nil int chkdep(int i, int j) { return dep[i] < dep[j] ? i : j; }\nil void _st() {\n\tlg[0] = -1;\n\tfor (int i = 1; i <= ecn; ++i) lg[i] = lg[i >> 1] + 1;\n\tfor (int j = 0; j < lg[ecn]; ++j)\n\t\tfor (int i = 2 << j; i <= ecn; ++i)\n\t\t\tst[i][j + 1] = chkdep(st[i - (1 << j)][j], st[i][j]);\n}\nil int qurdep(int l, int r) { int b = lg[r - l + 1]; return chkdep(st[l + (1 << b) - 1][b], st[r][b]); }\nil int lca(int x, int y) {\n\tif (rdf[x] < ldf[y]) return qurdep(rdf[x], ldf[y]);\n\telse if (rdf[y] < ldf[x]) return qurdep(rdf[y], ldf[x]);\n\telse return dep[x] < dep[y] ? x : y;\n} // dfn & O(M log M) - O(1) RMQ-LCA part\n\nint Q, ty[MN * 2], qh[MN * 2], buk[MN], nx[MV * 2], b[MV * 2], w[MV * 2], vcn;\nil void add(int *h, int x, int y, int z) { nx[++vcn] = h[x], b[vcn] = y, w[vcn] = z, h[x] = vcn; }\n// queries part\n\nint faz[MN], siz[MN], _siz[MN];\nvoid _dfs(int u, int fz) {\n\tfaz[u] = fz, siz[u] = 1;\n\tfor (int i = g[u]; i; i = nxt[i]) if (to[i] != fz)\n\t\t_dfs(to[i], u), siz[u] += siz[to[i]];\n\t_siz[u] = siz[u];\n}\nint vis[MN], sz[MN], ts, rsz, rt;\nvoid getrt(int u, int fz) {\n\tint mxs = 0; sz[u] = 1;\n\tfor (int i = g[u]; i; i = nxt[i]) {\n\t\tif (to[i] == fz || vis[to[i]]) continue;\n\t\tgetrt(to[i], u), sz[u] += sz[to[i]];\n\t\tmxs = std::max(mxs, sz[to[i]]);\n\t}\n\tmxs = std::max(mxs, ts - sz[u]);\n\tif (mxs < rsz) rt = u, rsz = mxs;\n}\nvoid fors(int u, int fz) {\n\tadd(buk, dfn[id[u]], Q, siz[u]);\n\tfor (int i = g[u]; i; i = nxt[i]) if (to[i] != fz && !vis[to[i]]) fors(to[i], u);\n}\nvoid dfs(int u) {\n\tif (ts == 1) return ; // no-op\n\tsiz[u] = N;\n\tfor (int x = u; !vis[faz[x]]; x = faz[x]) siz[faz[x]] = N - _siz[x];\n\tty[++Q] = 0, fors(u, 0);\n\tfor (int i = g[u]; i; i = nxt[i]) if (!vis[to[i]])\n\t\tty[++Q] = 1, add(buk, dfn[id[u]], Q, siz[to[i]]), fors(to[i], u);\n\tfor (int x = u; !vis[x]; x = faz[x]) siz[x] = _siz[x];\n\tvis[u] = 1;\n\tint nsz = ts;\n\tfor (int i = g[u]; i; i = nxt[i]) if (!vis[to[i]]) {\n\t\trsz = ts = sz[to[i]] < sz[u] ? sz[to[i]] : nsz - sz[u];\n\t\tgetrt(to[i], 0), dfs(rt);\n\t}\n} // O(N log N) tree decomposition part\n\nint Sum, sum[MN], rch[MN], tp;\nil void C(int x, int y) { if (x) ad(Sum, (LL)y * y % Mod * (dep[x] - dep[rch[tp]]) % Mod); }\n\nint main() {\n//\tfreopen(\"eternal-8-3.in\", \"r\", stdin);\n//\tint tim1, tim2, tim3, tim4, tim5, tim6, tim7;\n//\ttim1 = clock();\n\tinit();\n//\ttim2 = clock();\n\tdep[1] = 0, tdfs(1);\n//\ttim3 = clock();\n\t_st();\n//\ttim4 = clock();\n\t_dfs(1, 0), vis[0] = 1, rsz = ts = N, getrt(1, 0), dfs(rt);\n//\ttim5 = clock();\n\tfor (int i = M; i >= 1; --i)\n\t\tfor (int j = buk[i]; j; j = nx[j])\n\t\t\tadd(qh, b[j], idf[i], w[j]);\n\t// O(N log N) radix sort part\n//\ttim6 = clock();\n\tfor (int q = 1; q <= Q; ++q) {\n\t\tint s = 0, x, y; Sum = 0;\n\t\trch[tp = 1] = 1, sum[1] = 0;\n\t\tfor (int i = qh[q]; i; i = nx[i]) {\n\t\t\tint u = b[i];\n\t\t\tad(Sum, Mod - (LL)w[i] * w[i] * dep[u] % Mod);\n\t\t\tad(s, w[i]);\n\t\t\tif (nx[i] && b[nx[i]] == u) continue;\n\t\t\tint lc = lca(rch[tp], u);\n\t\t\tfor (x = y = 0; dep[rch[tp]] > dep[lc]; ad(y, sum[tp]), x = rch[tp--]) C(x, y);\n\t\t\tif (dep[rch[tp]] < dep[lc]) rch[++tp] = lc, sum[tp] = 0;\n\t\t\tad(sum[tp], y);\n\t\t\tC(x, y);\n\t\t\trch[++tp] = u, sum[tp] = s;\n\t\t\ts = 0;\n\t\t}\n\t\tfor (x = y = 0; tp; ad(y, sum[tp]), x = rch[tp--]) C(x, y);\n\t\tad(Ans, ty[q] ? Mod - Sum : Sum);\n\t} // virtual tree part\n//\ttim7 = clock();\n\tAns = (LL)Ans * Inv2 % Mod, printf(\"%d\\n\", Ans);\n/*\tprintf(\" Init : %dms\\n\", tim2 - tim1);\n\tprintf(\" Trie : %dms\\n\", tim3 - tim2);\n\tprintf(\" ST   : %dms\\n\", tim4 - tim3);\n\tprintf(\" DFZ  : %dms\\n\", tim5 - tim4);\n\tprintf(\" sort : %dms\\n\", tim6 - tim5);\n\tprintf(\" vt   : %dms\\n\", tim7 - tim6);*/\n\treturn 0;\n}\n```\n\n",
        "postTime": 1561816304,
        "uid": 21423,
        "name": "Elegia",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5439 \u3010\u3010XR-2\u3011\u6c38\u6052\u3011"
    },
    {
        "content": "\u5982\u679c\u6ca1\u6709 $subtask$ \u65f6\u95f4\u53d6 $min$ \u7684\u673a\u5236\uff0c\u8fd9\u4efd\u4ee3\u7801\u5c06\u8dd1\u5f97\u6bd4\u6240\u6709\u4ee3\u7801\u90fd\u5feb\u5f97\u591a\u3002\u3002\u3002\n\n\u9996\u5148\u770b\u5230\u8fd9\u9898\u4e00\u773c\u8fb9\u5206\u6cbb + \u865a\u6811\u4e0a $dp$\uff0c\u540e\u6765\u770b\u5230\u6ca1\u6709\u4fdd\u8bc1 $d_i$ \u4e92\u4e0d\u76f8\u7b49\u5c31\u4e0d\u4f1a\u641e\u4e86\u3002\u3002\u3002\n\n\u7b97\u4e86\uff0c\u8001\u8001\u5b9e\u5b9e\u7b97\u8d21\u732e\u5427\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5bf9 $(x,y)$ \u7b97\u5b83\u7684\u8d21\u732e\u3002\n\n$x,y\\not =LCA(x,y)$\uff0c\u8d21\u732e\u662f $siz_x\\times siz_y\\times dep_{LCA(x,y)}$\n\n\u4e0d\u59a8\u4ee4 $x=LCA(x,y)$\uff0c\u90a3\u4e48\u82e5 $z$ \u662f $x\\rightarrow y$ \u8def\u5f84\u7684\u7b2c\u4e8c\u4e2a\u70b9\uff0c\u8d21\u732e\u662f $(n-siz_z)\\times siz_y\\times dep_{LCA(x,y)}$\n\n\u56e0\u4e3a\u4e09\u4e2a\u4e1c\u897f\u4e58\u8d77\u6765\u4e0d\u597d\u5904\u7406\uff0c\u6211\u4eec\u628a $dep$ \u8fd9\u4e2a\u9650\u5236\u5dee\u5206\u4e00\u4e0b\uff0c\u628a $y\\rightarrow rt$ \u52a0 $siz_y$\uff0c\u7136\u540e\u679a\u4e3e $x$\uff0c\u6c42 $x\\rightarrow rt$ \u7684\u548c\uff0c\u4e58\u4e0a $siz_x$\u3002\n\n\u7b2c\u4e00\u4e2a\u90e8\u5206\u7684\u8d21\u732e\u662f\u53ef\u4ee5\u79bb\u7ebf\u5904\u7406\u7684\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)/O(n\\log n)$\uff0c\u4f60\u53ef\u4ee5\u50cf\u6211\u4e00\u6837\u6c42\u548c\u90a3\u90e8\u5206\u76f4\u63a5\u9884\u5904\u7406 $dfs$ \u5e8f\u524d\u7f00\u548c\u540e\u66b4\u529b\u5411\u4e0a\u8df3\u3002\n\n\u5f53\u7136\uff0c\u7b2c\u4e00\u4e2a\u90e8\u5206\u7684\u8d21\u732e\u6211\u4eec\u591a\u7b97\u4e86\uff0c\u6211\u4eec\u8981\u5728\u7b2c\u4e8c\u90e8\u5206\u51cf\u6389\u3002\n\n\u7b2c\u4e8c\u4e2a\u90e8\u5206\u7684\u8d21\u732e\u5c31\u66b4\u529b\u591a\u4e86\uff0c\u5047\u8bbe $dfs$ \u7684\u65f6\u5019\u904d\u5386\u7684\u662f $x\\rightarrow y$ \u8fd9\u6761\u8fb9\uff0c\u6211\u4eec\u628a $d_x\\rightarrow rt$ \u52a0 $n-siz_y-siz_x$\uff0c\u904d\u5386\u5b8c $y$ \u7684\u5b50\u6811\u540e\u51cf\u53bb\u8fd9\u4e2a\u503c\uff0c\u7136\u540e\u904d\u5386\u5230\u4e00\u4e2a\u70b9\u66b4\u529b\u5411\u4e0a\u8df3\u5c31\u884c\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2 m)$\uff0c\u800c\u4e14\u8fd9\u4e00\u4e2a\u662f\u6811\u5256\u7684 $\\log$ \u4e00\u4e2a\u662f\u7ebf\u6bb5\u6811/\u6811\u72b6\u6570\u7ec4\u7684 $\\log$\uff0c\u5e38\u6570\u6781\u5c0f\u5c31\u5bf9\u4e86\u3002\n\n$Code\\ Below:$\n\n```cpp\n// luogu-judger-enable-o2\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=300000+10;\nconst int mod=998244353;\nint n,m,rt,a[maxn],fa[maxn],siz[maxn],ans,head[maxn],to[maxn<<1],nxt[maxn<<1],tot;\n\nnamespace Tree\n{\nint c[2][maxn],w[maxn],val[maxn],head[maxn],to[maxn],nxt[maxn],tot;\nint top[maxn],dep[maxn],siz[maxn],son[maxn],fa[maxn],id[maxn],mp[maxn],tim;\n#define lowbit(x) ((x)&(-(x)))\ninline void add(int *c,int x,int y)\n{\n    for(;x<=m;x+=lowbit(x)) c[x]=(c[x]+y)%mod;\n}\ninline int Ask(int *c,int x)\n{\n    int ans=0;\n    for(;x;x-=lowbit(x)) ans=(ans+c[x])%mod;\n    return ans;\n}\ninline void Update(int x,int v) {add(c[0],x,v);add(c[1],x,1ll*(x-1)*v%mod);}\ninline void update(int l,int r,int v) {Update(l,v);Update(r+1,mod-v);}\ninline int Query(int x) {return (1ll*x*Ask(c[0],x)%mod-Ask(c[1],x)+mod)%mod;}\ninline int query(int l,int r) {return (Query(r)-Query(l-1)+mod)%mod;}\ninline void modify(int x,int y)\n{\n    for(;x;x=fa[top[x]]) update(id[top[x]],id[x],y);\n}\ninline int ask(int x)\n{\n    int ans=0;\n    for(;x;x=fa[top[x]]) ans=(ans+query(id[top[x]],id[x]))%mod;\n    return ans;\n}\ninline int ask_pre(int x)\n{\n    int ans=0;\n    for(;x;x=fa[top[x]]) ans=(ans+(val[id[x]]-val[id[top[x]]-1]+mod)%mod)%mod;\n    return ans;\n}\ninline void addedge(int x,int y)\n{\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\nvoid dfs1(int x,int f)\n{\n    siz[x]=1;fa[x]=f;dep[x]=dep[f]+1;\n    int maxson=-1;\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        dfs1(y,x);siz[x]+=siz[y];w[x]=(w[x]+w[y])%mod;\n        if(siz[y]>maxson) maxson=siz[y],son[x]=y;\n    }\n}\nvoid dfs2(int x,int topf)\n{\n    id[x]=++tim;mp[tim]=x;top[x]=topf;\n    if(son[x]) dfs2(son[x],topf);\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        if(y==son[x]) continue;\n        dfs2(y,y);\n    }\n}\ninline void init()\n{\n    scanf(\"%d\",&fa[1]);\n    for(int i=2;i<=m;i++) scanf(\"%d\",&fa[i]),addedge(fa[i],i);\n    scanf(\"%*s\");\n    for(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n    for(int i=1;i<=n;i++) w[a[i]]=(w[a[i]]+::siz[i])%mod;\n    for(int i=head[1];i;i=nxt[i]) dfs1(to[i],0),dfs2(to[i],to[i]);\n    for(int i=1;i<=m;i++) val[i]=w[mp[i]];\n    for(int i=1;i<=m;i++) val[i]=(val[i]+val[i-1])%mod;\n}\n}\n\ninline void addedge(int x,int y)\n{\n    to[++tot]=y;\n    nxt[tot]=head[x];\n    head[x]=tot;\n}\nvoid dfs(int x)\n{\n    siz[x]=1;\n    for(int i=head[x];i;i=nxt[i]) dfs(to[i]),siz[x]+=siz[to[i]];\n}\nvoid dfs1(int x)\n{\n    ans=(ans+1ll*Tree::ask(a[x])*siz[x]%mod)%mod;\n    for(int i=head[x];i;i=nxt[i])\n    {\n        int y=to[i];\n        Tree::modify(a[x],(n-siz[y]-siz[x]+mod)%mod);\n        dfs1(y);\n        Tree::modify(a[x],(siz[y]+siz[x]-n+mod)%mod);\n    }\n}\n\nint main()\n{\n    scanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%d\",&fa[i]);\n        if(!fa[i]) rt=i;\n        else addedge(fa[i],i);\n    }\n    dfs(rt);Tree::init();\n    for(int i=1;i<=n;i++)\n    {\n        ans=(ans+1ll*Tree::ask_pre(a[i])*siz[i]%mod)%mod;\n        ans=(ans+1ll*siz[i]*siz[i]%mod*(mod-Tree::dep[a[i]])%mod)%mod;\n    }\n    ans=1ll*ans*((mod+1)>>1)%mod;dfs1(rt);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1561903250,
        "uid": 35069,
        "name": "Owen_codeisking",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5439 \u3010\u3010XR-2\u3011\u6c38\u6052\u3011"
    },
    {
        "content": "\u53bb\u770b\u8fb9\u4e0a\u7684\u9898\u89e3\uff0c\u4f60\u4e00\u5b9a\u770b\u5230\u4e86\u4e0d\u5c11\u8bf8\u5982\u201c\u628ay->rt\u52a0sizy\u201d\uff0c\u201c\u5b50\u6811\u5927\u5c0f\u4e58\u5b50\u6811\u5927\u5c0f\u201d\u4e4b\u7c7b\u7684\u5b57\u773c\u3002\u8fd9\u91cc\u4f1a\u7ed3\u5408\u56fe\u50cf\u52a0\u4ee5\u8bf4\u660e\u5b83\u4eec\u7684\u610f\u4e49\u53ca\u7406\u89e3\u5b83\u4eec\u7684\u6b63\u786e\u6027\u3002**\u6211\u4eec\u7528map\u6765\u8868\u793a\u50a8\u5b58\u539f\u56fe\u6570\u636e\u7684\u5bf9\u8c61\uff0c\u7528trie\u6765\u8868\u793a\u50a8\u5b58Trie\u6811\u7684\u5bf9\u8c61**\u3002trie\u6811\u4e0a\u6839\u8282\u70b9\u7684\u6df1\u5ea6\u4e3a0\uff0cmap\u6811\u4e0a\u5219\u65e0\u8981\u6c42\u3002\n\n---\n\n\u9996\u5148\u6211\u4eec\u6765\u7406\u89e3\u4e00\u4e0b\u70b9\u5bf9\u8d21\u732e\u7684\u8ba1\u7b97\u3002\u5bf9\u4e8e\u4e00\u4e2a**\u65e0\u5e8f**\u70b9\u5bf9(u,v)\uff0c\u82e5map.LCA(u, v)\u4e0d\u4e3au\u6216v\uff0c\u5219\u5b83\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff1a\n\n![](https://cdn.luogu.com.cn/upload/pic/69928.png )\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u4efb\u4f55\u4ee5\u7ea2\u3001\u84dd\u5708\u5185\u70b9\u4e3a\u4e24\u7aef\u70b9\u7684\u8def\u5f84\u90fd\u4f1a\u7a7f\u8fc7\u70b9\u5bf9(u,v)\u3002\n\n\u8fd9\u65f6\uff0cmap\u6811\u4e0a\u7a7f\u8fc7\u8be5\u70b9\u5bf9\u7684\u8def\u5f84\u6761\u6570\u4e3amap.size[u] \\* map.size[v],\u8d21\u732e\u5c31\u5e94\u8be5\u662fmap.size[u] \\* map.size[v] \\* trie.dep[trie.LCA(mapto[u], mapto[v])]\u3002\u8fd9\u91cc\u9700\u8981\u6ce8\u610f\u533a\u5206\u4f55\u65f6\u662fmap\uff0c\u4f55\u65f6\u7528trie\uff0c\u800c\u5176\u4e2d\u7684mapto\u662f\u9898\u76ee\u4e2d\u8f93\u5165\u7684\u3001\u4ecemap\u5230trie\u7684\u6620\u5c04\u5173\u7cfb\u3002\n\n\u5426\u5219\uff0c\u5b83\u5e94\u8be5\u662f\u8fd9\u6837\u7684\uff08\u5047\u5b9au\u7684\u6df1\u5ea6\u66f4\u5c0f\uff09\uff1a\n![](https://cdn.luogu.com.cn/upload/pic/69950.png )\n\n\u90a3\u4e48\uff0cmap\u6811\u4e0a\u7a7f\u8fc7\u8be5\u70b9\u5bf9\u7684\u8def\u5f84\u6761\u6570\u4e3a(n - map.size[w]) \\* map.size[v],\u540c\u7406\uff0c\u8d21\u732e\u8981\u518d\u4e58\u4e0a\u5176trie\u6811\u4e0a\u7684LCA\u7684\u6df1\u5ea6\u3002\n\n\u5f53\u7136\uff0c\u4e0a\u9762\u90a3\u90e8\u5206\u8fd8\u662f\u6bd4\u8f83\u597d\u60f3\u6e05\u695a\u7684\uff0c\u672a\u5fc5\u9700\u8981\u753b\u56fe\u3002\u7136\u800c\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u4ee5\u67d0\u79cd\u7384\u5999\u7684\u65b9\u5f0f**\u5c06\u201c\u8ba1\u7b97\u70b9\u5bf9\u7684\u8d21\u732e\u201d\u8f6c\u6362\u4e3a\u201c\u8ba1\u7b97\u70b9\u7684\u8d21\u732e\u201d**\u3002\n\n\u63a5\u4e0b\u6765\u8981\u8003\u8651\u5728map\u4e0etrie\u6811\u4e0a\u8fdb\u884c\u8f6c\u6362\uff0c\u56e0\u6b64\u6211\u4eec**\u7528x,y\u63cf\u8ff0\u5728map\u4e0a\u7684\u70b9\uff0c\u7528u,v\u63cf\u8ff0\u5728trie\u6811\u4e0a\u7684\u70b9**\u3002\n\n\u8003\u8651\u7edf\u8ba1v\u7684\u8d21\u732e\u65f6\uff0c\u5982\u4f55\u8ba1\u5165u\u3002\n![](https://cdn.luogu.com.cn/upload/pic/69933.png)\n\n\u663e\u7136\uff0cu->trie.root\u4e0ev->trie.root\u4e24\u6761\u8def\u5f84\u5c06\u4f1a\u4ea4\u4e8etrie.LCA(u,v)\u5904\u3002\n\n\u53ef\u4ee5\u60f3\u5230\uff0c\u82e5\u6211\u4eec**\u628au\u80fd\u5bf9v\u9020\u6210\u7684\u8d21\u732e\u4ee5\u67d0\u79cd\u65b9\u5f0f\u8bb0\u5f55\u5728u->trie.root\u4e0a**\uff0c\u90a3\u4e48\u5728\u8bbf\u95ee\u5230v\u65f6\uff0c**\u53ea\u9700\u8981\u6cbf\u7740\u5b83\u7684\u8def\u5f84\u5f80\u4e0a\u8d70\u5230\u6839\uff0c\u5c31\u53ef\u4ee5\u5f97\u77e5\u5176\u5b83\u70b9\u5bf9v\u7684\u8d21\u732e\u7684\u5f71\u54cd**\u3002\u5f53\u7136\u8fd9\u4e2a\u6743\u503c\u5fc5\u987b**\u8981\u4fbf\u4e8e\u5408\u5e76**\uff0c\u800c\u4e14\u5bf9\u4e8e\u4efb\u4f55\u7684v\u90fd\u9002\u7528\uff08\u5373\u4e0d\u80fd\u51fa\u73b0\u7c7b\u4f3ctrie.LCA(u,v)\u7684\u5b57\u773c\uff09\u3002\u63a5\u4e0b\u6765\u4f60\u4f1a\u770b\u5230\uff0c\u8fd9\u4e2a\u201c\u5408\u5e76\u201d\u5b9e\u9645\u4e0a\u53ea\u662f\u4e2a\u666e\u901a\u52a0\u6cd5\u3002\n\n\u5148\u8003\u8651\u600e\u4e48\u8fd9\u6837\u505a\u3002\u8fd9\u4e2a\u201c\u6743\u503c\u201d\u662f\u4ec0\u4e48\uff1f\u8ba9\u6211\u4eec\u770b\u4e00\u4e0b\u6211\u4eec\u7684\u5f0f\u5b50\uff1a\n```cpp\nmap.size(x) * map.size(y) * trie.dep[trie.LCA(u, v)]\n```\ntrie.dep[trie.LCA(u, v)]\u5b9e\u9645\u4e0a\u662ftrie.LCA(u,v)\u5230\u6839\u7684\u8ddd\u79bb\uff0c\u6216\u8005\u8bf4\u662f\u9700\u8981\u7ecf\u8fc7\u7684\u8def\u5f84\u6761\u6570\u3002\n\n\u90a3\u4e48\u82e5\u6211\u4eec\u5c06trie.LCA(u,v)->trie.root\u4e0a\u7684\u6240\u6709**\u8fb9**\u52a0\u4e0a\u6743\u503cmap.size(x)\uff0c\"map.size(x)\"\u4e0e\"trie.dep[trie.LCA(u, v)]\"\u8fd9\u4e24\u4e2a\u4e0ev\u76f8\u5173\u7684\u9879\u5c31\u53ef\u4ee5\u6254\u6389\u4e86\u2014\u2014trie.dep[trie.LCA(u, v)]\u4f1a\u5728\u7d2f\u52a0\u81f3\u6839\u7684\u65f6\u5019\u201c\u81ea\u52a8\u201d\u4e58\u4e0a\uff0c\u800cmap.size[v]\u5728\u7edf\u8ba1v\u7684\u8d21\u732e\u7684\u65f6\u5019\u662f\u5df2\u77e5\u91cf\u3002\n\n\u7ed3\u5408\u4e0a\u9762\u7684\u601d\u8003\u4ee5\u53cau->trie.root\u4e0ev->trie.root\u4ea4\u4e8etrie.LCA(u,v)\u7684\u6027\u8d28\uff0c\u65b9\u6cd5\u5f88\u663e\u7136\u4e86\uff1a\u6211\u4eec\u5c06u->trie.root\u4e0a\u6240\u6709\u7684**\u8fb9**\u90fd\u52a0\u4e0amap.size[x]\uff0c\u5bf9\u6240\u6709\u70b9\u505a\u5b8c\u8fd9\u4ef6\u4e8b\u60c5\u4e4b\u540e\uff0cv\u7684**\u603b\u8d21\u732e**\u5c31\u662fv->trie.root\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u7684\u6743\u503c\u548c\u4e0emap.size[v]\u7684\u79ef\uff01\n\n\u4f3c\u4e4e\u89c9\u5f97\u54ea\u91cc\u4e0d\u5bf9\u52b2\uff1f\u4e0d\u5bf9\u52b2\u5c31\u5bf9\u4e86\u2190\u2190\u3002\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u8fd9\u6837\u7edf\u8ba1\u7684\u65f6\u5019\u6709\u4e00\u4e2a\u975e\u5e38\u663e\u800c\u6613\u89c1\u7684\u95ee\u9898\uff1a**\u7167\u8fd9\u4e48\u8ba1\u7b97\uff0c\u70b9\u5bf9(v,v)\u5c45\u7136\u80fd\u6709\u8d21\u732e**\uff1f\u70b9\u5bf9(v,v)\u5f53\u7136\u4e0d\u80fd\u6709\u8d21\u732e\uff0c\u56e0\u6b64\u6211\u4eec\u8981\u5728\u7b2c\u4e00\u6b21\u7edf\u8ba1\u7b54\u6848\u7684\u65f6\u5019\u628a\u5b83\u53bb\u6389\uff08\u672a\u8003\u8651\u53d6\u6a21\uff09\uff1a\n```cpp\nans -= map.size[v] \\* map.size[v] \\* trie.dep[mapto[v]]\n```\n\u8fd9\u4e2a\u5e94\u8be5\u6ca1\u4ec0\u4e48\u95ee\u9898\u5427\uff0c\u8bfb\u8005\u4ed4\u7ec6\u60f3\u60f3\u5e94\u8be5\u80fd\u7406\u89e3\u3002\n\n\u5177\u4f53\u5b9e\u73b0\"\u5c06v->trie.root\u8def\u5f84\u4e0a\u6240\u6709\u8fb9\u6743\u6c42\u548c\"\u65f6\uff0c\u6211\u4eec\u5f53\u7136\u53ef\u4ee5\u7528\u6811\u5256+\u6811\u72b6\u6570\u7ec4/\u7ebf\u6bb5\u6811\u6765\u505a\uff0c\u800c\u4e14\u5b9e\u9645\u4e0a\u63a5\u4e0b\u6765\u7684\u7edf\u8ba1\u4e5f\u8981\u7528\u5230\u8fd9\u4e9b\u7b97\u6cd5\uff0c\u4f46**\u5b9e\u9645\u4e0a\u6211\u4eec\u662f\u53ef\u4ee5O(n)\u505a\u51fa\u8fd9\u4e00\u6b65\u7684**\u3002\n\n**\u8003\u8651\u5728\u5199\u5e73\u8861\u6811\u65f6\u7684\u6807\u8bb0\u4e0b\u4f20**\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\uff1a\u5f53\u6211\u4eec\u8981\u628au->trie.root\u4e0a\u6240\u6709\u8fb9\u6743\u503c\u52a0map.size[x]\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u5728u\u5904\u6253\u4e0a\u6807\u8bb0\uff0c\u4e4b\u540e\u5229\u7528dfs\u4e00\u6b21\u6027\u5c06\u6240\u6709\u5b50\u8282\u70b9\u7684\u6743\u503c\u7d2f\u52a0\u56de\u6536\u81f3\u6839\uff08\u5373\u5c06\u6574\u6761\u8def\u5f84\u4e0a\u7684\u8fb9\u52a0\u4e0a\u6743\u503c\uff09\uff0c\u518d\u7528\u4e00\u6b21dfs\u5c06\u6743\u503c\u4ece\u6839\u7d2f\u52a0\u81f3\u5b50\u8282\u70b9\uff08\u5373\u6c42\u51fa\u8be5\u70b9\u5f80\u4e0a\u81f3\u6839\u7684\u8def\u5f84\u6743\u503c\u548c\uff09\u3002\n\n\u5f53\u7136\uff0c\u5728\u4e4b\u540e\u6211\u4eec\u8fd8\u8981\u96642\uff08\u4e582\u7684\u9006\u5143\uff09\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd9\u4e48\u505a\u4f1a\u540c\u65f6\u7edf\u8ba1(u,v)\u4e0e(v,u)\uff0c\u800c\u9898\u4e2d\u8981\u6c42\u7684\u662f\u65e0\u5e8f\u70b9\u5bf9\u3002\n\n\u5f53\u7136\uff0c\u5982\u679c\u4f60\u8001\u8001\u5b9e\u5b9e\u628a\u4e0a\u9762\u6240\u6709\u5185\u5bb9\u7801\u597d\uff0c\u4f60\u4f1a\u53d1\u73b0\u6837\u4f8b\u8fc7\u4e0d\u53bb\uff1a\u7a0b\u5e8f\u7ed9\u51fa\u4e86**17**\uff0817\u53ef\u4ee5\u9a8c\u8bc1\u4f60\u4e0a\u9762\u662f\u5426\u5199\u5bf9\uff09\u3002\u4e3a\u4ec0\u4e48\uff1f\n\n\u56e0\u4e3a\u6211\u4eec\u8fd9\u6837\u8003\u8651\u7684\u65f6\u5019\uff0c**\u5c06x,y\u7684map.LCA\u4e3ax\u6216y\u7684\u60c5\u51b5\u5ffd\u7565\u4e86**\uff0c\u800c\u8fd9\u4e24\u79cd\u60c5\u51b5\u662f\u4e0d\u80fd\u5408\u5e76\u8fdb\u4e0a\u8ff0\u4e00\u79cd\u65b9\u5f0f\u8fdb\u884c\u7edf\u8ba1\u7684\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u4e0a\u9762\u7684\u8f6c\u79fb\u65b9\u5f0f**\u6709\u7684\u5730\u65b9\u53ef\u80fd\u591a\u7b97\u4e86\uff0c\u6709\u7684\u5730\u65b9\u53c8\u53ef\u80fd\u5c11\u7b97\u4e86**\u3002\u542c\u4e0a\u53bb\u975e\u5e38\u68d8\u624b\uff0c\u600e\u4e48\u529e\uff1f\n\n\u6211\u4eec\u5148\u5217\u51fa\u4e4b\u524d\u7684\u5f0f\u5b50\uff0c\u7406\u6027\u5206\u6790\u4e00\u4e0b\uff1a\n```cpp\nA : map.size[x] * map.size[y] * C\nB : (n - map.size[z]) * map.size[y] * C\nC : trie.dep[trie.LCA(u, v)]\n\u4f17\u6240\u5468\u77e5\uff0cA + (-A + B) = B\nD = -A + B : (n - map.size[x] - map.size[z]) * map.size[y] * C\nE : (n - map.size[x] - map.size[z])\uff0c\u4e0ey\u6216C\u65e0\u5173\n```\n\u5982\u679c\u6211\u4eec\u5bf9\u6240\u6709\u88ab\u8bef\u7b97\u4e3aA\u7684\u70b9\uff0c\u90fd\u80fd\u591f\u7ed9\u5b83\u91cd\u65b0\u8865\u4e0a\u6743\u503cD\uff0c\u90a3\u4e48\u4e4b\u524d\u7684\u9519\u8bef\u5c31\u88ab\u201c\u5f25\u8865\u201d\u4e86\u3002\n\n\u867d\u7136D\u4e2d\u6709\u591a\u4e86\u4e00\u4e2a\u53d8\u91cfz\uff0c\u975e\u5e38\u53ef\u6015\uff0c\u4f46\u5b9e\u9645\u4e0az\u662fx\u7684\u4e00\u4e2a\u5b50\u8282\u70b9\uff08\u53ef\u4ee5\u53c2\u7167\u524d\u9762\u90a3\u5f20\u51fa\u73b0\u4e86x\u3001y\u3001z\u7684\u56fe\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u6a21\u4eff\u4e0a\u9762\u5728\u8def\u5f84\u4e0a\u52a0\u6743\u503c\u7684\u65b9\u6cd5\uff0c\u7edf\u8ba1\u4e00\u4e0b\u6240\u6709\u70b9\u7684D\u7c7b\u8d21\u732e\u3002**\u7531\u4e8e\u8981\u6c42x\u3001y\u3001z\u5728\u540c\u4e00\u6761\u201c\u76f4\u201d\uff08\u6df1\u5ea6\u5355\u8c03\uff09\u8def\u5f84\u4e0a**\uff0c\u8fd9\u4e00\u6b21\u5fc5\u987b\u5728\u7ebf\u7edf\u8ba1\u7b54\u6848\uff1a\u5f53\u4ecex\u70b9\u7ecf\u8fc7z\u70b9\u8fdb\u5165\u4e0b\u9762\u7684\u5b50\u6811\u65f6\uff0c\u5728\u8def\u5f84x->trie.root\u4e0a\u52a0\u4e0aE\uff1b\u5f53\u66f4\u6539\u513f\u5b50z\u6216\u8005\u662f\u4ecex\u9000\u51fadfs\u65f6\uff0c\u5728\u8def\u5f84x->trie.root\u4e0a\u51cf\u53bbE\u3002\u8fd9\u663e\u7136\u662f\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u5256+\u7ebf\u6bb5\u6811\u6216\u533a\u95f4\u52a0\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u7684\u3002\n\n\uff08\u4e0a\u9762\u4e00\u6bb5\u601d\u7ef4\u96be\u5ea6\u53ef\u80fd\u8f83\u5927\uff0c\u5e0c\u671b\u8bfb\u8005\u4ed4\u7ec6\u4f53\u4f1a\u3002\uff09\n\n\u4e0b\u9762\u9644\u4e0a\u6570\u636e\u751f\u6210\u5668\uff08\u542b\u751f\u6210\u6570\u636e\u53ca\u8c03\u7528\u7a0b\u5e8f\uff09\n```cpp\n#include <ctime>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n\n#include <algorithm>\n\nint main() {\n\tsrand(time(0));\n\twhile (1) {\n\t\tFILE *out(fopen(\"data.in\", \"w\"));\n\t\tint n = 3, m = 3;//3\uff0c3\u5e94\u8be5\u53ef\u4ee5\u89e3\u51b3\u8f83\u4e3a\u5e73\u51e1\u7684\u4ee3\u7801\u9519\u8bef\u4e86\uff1b\u5c0f\u6570\u636e\u80fd\u8fc7\u5927\u6570\u636e\u7206\u70b8\u53ef\u4ee5\u8003\u8651\u53d6\u6a21\u7684\u6f0f\u6d1e\n\t\tfprintf(out, \"%d %d\\n0 \", n, m);\n\t\tfor (int i(2); i <= n; ++i) {\n\t\t\tfprintf(out, \"%d \", rand() % (i - 1) + 1);\n\t\t} fprintf(out, \"\\n0 \");\n\t\tfor (int i(2); i <= m; ++i) fprintf(out, \"%d \", rand() % (i - 1) + 1);\n\t\tfprintf(out, \"\\n0\");\n\t\tfor (int i(1); i != m; ++i) fprintf(out, \"%c\", char(rand() % 26 + 'a'));//\u8c61\u5f81\u6027\u7684\u5b57\u7b26\u4e32\n\t\tfprintf(out, \"\\n\");\n\t\tfor (int i(1); i <= n; ++i) {\n\t\t\tfprintf(out, \"%d \", rand() % (m - 1) + 2);\n\t\t}\n\t\tfclose(out);\n\t\tsystem(\"std.exe < data.in > std.out\");//std\n\t\tsystem(\"P5439.exe < data.in > mine.out\");//\u9700\u8981\u8c03\u8bd5\u7684\u4ee3\u7801\n\t\tif (system(\"fc std.out mine.out\")) {\n\t\t\tprintf(\"orz\\n\");//good luck!\n\t\t\tsystem(\"pause\");\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\u5f53\u7136\uff0c\u8fd8\u6709\u6211\u4e0a\u4ea4\u7684\u4ee3\u7801\u3002\u5947\u4e11\u65e0\u6bd4(\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n\n#include <algorithm>\n\nnamespace kyel {\n\ttypedef long long lint;\n\tconst lint mod(998244353);\n\tconst int maxn(312345);\n\tchar str[maxn];\n\tint n, m;\n\tclass graph {\n\tpublic:\n\t\tgraph() : end(2) {}\n\t\tclass node {\n\t\tpublic:\n\t\t\tint to, next;\n\t\t}all[maxn];\n\t\tint head[maxn], dep[maxn], end;\n\t\tlint size[maxn];\n\t\tvoid add(int fr, int to) {\n\t\t\tall[end].to = to, all[end].next = head[fr];\n\t\t\thead[fr] = end++;\n\t\t}\n\t}trie, map;\n\tint root, mapto[maxn];\n\tlint val[maxn], ans;//val\u5373\u7b2c\u4e00\u6b65\u9644\u5728\u8def\u5f84\u4e0a\u7684\u6743\u503c\n\tinline void add(lint& a, lint b) { a = (a + b) % mod; }\n\tinline void sub(lint& a, lint b) { a = ((a - b) % mod + mod) % mod; } \n\tinline lint mulv(lint a, lint b) { return a * b % mod; } \n\tvoid dfs1(int now) {//\u521d\u59cb\u5316map.size\u4e0emap.dep\uff0c\u5176\u4e2dmap.dep\u597d\u50cf\u6ca1\u7528\u5230\uff1f\n\t\tmap.size[now] = 1;\n\t\tfor (int i(map.head[now]); i; i = map.all[i].next) {\n\t\t\tint to(map.all[i].to);\n\t\t\tmap.dep[to] = map.dep[now] + 1;\n\t\t\tdfs1(to);\n\t\t\tmap.size[now] += map.size[to];\n\t\t}\n\t\tadd(val[mapto[now]], map.size[now]);//\u7b2c\u4e00\u6b65\u7edf\u8ba1\u7684\u6b65\u9aa4\uff0c\u7ed9\u70b9\u6253\u4e0a\u6807\u8bb0\n\t}\n\tvoid dfs2(int now) {//\u521d\u59cb\u5316trie\u7684size\u4e0edep\uff0c\u6ce8\u610f\u5230dep\u4ece0\u5f00\u59cb\u3002\n\t\ttrie.size[now] = 1;\n\t\tfor (int i(trie.head[now]); i; i = trie.all[i].next) {\n\t\t\tint to(trie.all[i].to);\n\t\t\ttrie.dep[to] = trie.dep[now] + 1;\n\t\t\tdfs2(to);\n\t\t\ttrie.size[now] += trie.size[to];\n\t\t}\n\t}\n\tvoid dfs3(int now) {//\u5c06trie\u70b9\u4e0a\u7684\u6807\u8bb0\u8f6c\u79fb\u5230\u8def\u5f84\u4e0a\n\t\tfor (int i(trie.head[now]); i; i = trie.all[i].next) {\n\t\t\tint to(trie.all[i].to);\n\t\t\tdfs3(to);\n\t\t\tif (now != 1) add(val[now], val[to]);\n\t\t}\n\t}\n\tvoid dfs4(int now) {//\u5c06trie\u8def\u5f84\u4e0a\u7684\u6807\u8bb0\u7d2f\u52a0\u81f3\u70b9\u4e0a\n\t\tfor (int i(trie.head[now]); i; i = trie.all[i].next) {\n\t\t\tint to(trie.all[i].to);\n\t\t\tadd(val[to], val[now]);\n\t\t\tdfs4(to);\n\t\t}\n\t}\n\tint heavy[maxn], top[maxn], ttos[maxn], father[maxn];//\u6811\u5256\n\tvoid dfs(int now) {\n\t\tlint *sz(trie.size);\n\t\tfor (int i(1); i <= m; ++i) {\n\t\t\tnow = i;\n\t\t\tfor (int j(trie.head[i]); j; j = trie.all[j].next) {\n\t\t\t\tint to(trie.all[j].to);\n\t\t\t\tfather[to] = now;\n\t\t\t\tif (sz[to] > sz[heavy[now]]) heavy[now] = to;\n\t\t\t}\n\t\t}\n\t}\n\tvoid dfs(int now, int up) {\n\t\tgraph::node *all(trie.all);\n\t\ttop[now] = up;\n\t\tttos[now] = ++ttos[0];\n\t\tif (heavy[now]) dfs(heavy[now], up);\n\t\tfor (int i(trie.head[now]); i; i = all[i].next) {\n\t\t\tif (all[i].to == heavy[now]) continue;\n\t\t\tdfs(all[i].to, all[i].to);\n\t\t}\n\t}\n\tnamespace seg {//\u6c38\u4e45\u5316\u6807\u8bb0\u7ebf\u6bb5\u6811\n\t\t#define ls (n << 1)\n\t\t#define rs (n << 1 | 1)\n\t\tlint val[maxn << 2], tag[maxn << 2];\n\t\tvoid add(int n, int left, int right, int l, int r, lint v) {\n\t\t\tif (left == l && right == r) {\n\t\t\t\tkyel::add(val[n], v * (r - l + 1) % mod);\n\t\t\t\tkyel::add(tag[n], v);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint mid(left + right >> 1);\n\t\t\tif (r <= mid) add(ls, left, mid, l, r, v);\n\t\t\telse if (l > mid) add(rs, mid + 1, right, l, r, v);\n\t\t\telse add(ls, left, mid, l, mid, v), add(rs, mid + 1, right, mid + 1, r, v);\n\t\t\tval[n] = (val[ls] + val[rs] + tag[n] * (right - left + 1) % mod) % mod;\n\t\t}\n\t\tlint query(int n, int left, int right, int l, int r) {\n\t\t\tif (left == l && right == r) return val[n];\n\t\t\tlint ret(0);\n\t\t\tint mid(left + right >> 1);\n\t\t\tif (r <= mid) ret = query(ls, left, mid, l, r);\n\t\t\telse if (l > mid) ret = query(rs, mid + 1, right, l, r);\n\t\t\telse ret = (query(ls, left, mid, l, mid) + query(rs, mid + 1, right, mid + 1, r)) % mod;\n\t\t\tkyel::add(ret, tag[n] * (r - l + 1) % mod);\n\t\t\treturn ret;\n\t\t}\n\t}\n\tvoid segadd(int pos, lint v) {//\u5c06trie\u6811\u4e0a\u4ecepos\u5230\u6839\u7684\u8def\u5f84\u6743\u503c\u52a0v\n\t\twhile (pos) {\n\t\t\tseg::add(1, 1, m, ttos[top[pos]], ttos[pos], v);\n\t\t\tpos = father[top[pos]];\n\t\t}\n\t}\n\tlint segask(int pos) {//\u6c42trie\u6811\u4e0a\u4ecepos\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u6743\u503c\u548c\n\t\tlint ret(0);\n\t\twhile (pos) {\n\t\t\tadd(ret, seg::query(1, 1, m, ttos[top[pos]], ttos[pos]));\n\t\t\tpos = father[top[pos]];\n\t\t}\n\t\tsub(ret, seg::query(1, 1, m, ttos[1], ttos[1]));//\u6ce8\u610f\u5230\u8fb9\u6743\u5b9e\u9645\u9644\u4e8e\u6df1\u5ea6\u8f83\u5927\u7684\u70b9\u4e0a\u3002\u5f53\u7136\u4e5f\u53ef\u4ee5\u4e0a\u4e00\u4e2asegadd\u51fd\u6570\u53ea\u52a0\u5230\u8ddd\u79bb\u6839\u8ddd\u79bb\u4e3a1\u7684\u5730\u65b9\u3002\uff08\u603b\u4e4b\u8981\u5c0f\u5fc3\u8fb9\u6743\u4e0e\u70b9\u6743\u7684\u533a\u522b\u5c31\u597d\u4e86\uff09\n\t\treturn ret;\n\t}\n\tvoid dfs5(int now) {//\u6700\u540e\u4e00\u6b21\u7edf\u8ba1\uff0c\u5c06\u6240\u6709\u70b9\u7684\u9519\u8bef\u8d21\u732e\u8fdb\u884c\u4fee\u6b63\n\t\tadd(ans, segask(mapto[now]) * map.size[now]);\n\t\tfor (int i(map.head[now]); i; i = map.all[i].next) {\n\t\t\tint to(map.all[i].to);\n\t\t\tsegadd(mapto[now], n - map.size[now] - map.size[to]);\n\t\t\tdfs5(to);\n\t\t\tsegadd(mapto[now], -n + map.size[now] + map.size[to]);\n\t\t}\n\t}\n\tinline void read(int& x) {\n\t\tchar c(getchar()); x = 0;\n\t\twhile (c < '0' || c > '9') c = getchar();\n\t\twhile (c >= '0' && c <= '9') x = x * 10 + (c & 15), c = getchar();\n\t}\n\tvoid kyel() {\n\t\tread(n), read(m);\n\t\tfor (int i(1); i <= n; ++i) {\n\t\t\tint fth; read(fth);\n\t\t\tif (fth == 0) root = i;\n\t\t\telse map.add(fth, i);\n\t\t}\n\t\tfor (int i(1); i <= m; ++i) {\n\t\t\tint fth; read(fth);\n\t\t\tif (fth)\n\t\t\t\ttrie.add(fth, i);\n\t\t} scanf(\"%s\", str);\n\t\tfor (int i(1); i <= n; ++i) {\n\t\t\tread(mapto[i]);\n\t\t}\n\t\tdfs1(root);\n\t\tdfs2(1);\n\t\tdfs3(1);\n\t\tdfs4(1);\n\t\tfor (int i(1); i <= n; ++i) {\n\t\t\tadd(ans, mulv(map.size[i], val[mapto[i]]));\n\t\t\tsub(ans, map.size[i] * map.size[i] % mod * trie.dep[mapto[i]] % mod);\n\t\t}//\u7edf\u8ba1\u7b2c\u4e00\u6b21\u7edf\u8ba1\u7684\u7b54\u6848\n\t\tans = ans * (((mod + 1) >> 1) % mod) % mod;//\u96642\n\t\tdfs(1), dfs(1, 1);\n\t\tdfs5(root);\n\t\tprintf(\"%lld\\n\", ans);\n\t}\n}                           \nint main() {\n\tkyel::kyel();\n\treturn 0;\n}\n\n```\n",
        "postTime": 1565165062,
        "uid": 163894,
        "name": "kyel",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5439 \u3010\u3010XR-2\u3011\u6c38\u6052\u3011"
    },
    {
        "content": "$T$ \u662f\u8282\u70b9\u6570\u4e3a $n$ \u7684\u90a3\u68f5\u6811\uff0c$T'$ \u662f Trie \u6811\u3002\u5e26 $'$ \u7684\uff0c\u6bd4\u5982 $\\text{dep}'_u$\uff0c\u8868\u793a Trie \u4e0a\u7684\u4fe1\u606f\uff08\u6ce8\u610f\u5230 $\\text{dep}'$ \u8981\u4ece $0$ \u5f00\u59cb\uff09\uff0c\u4e0d\u5e26\u7684\u8868\u793a\u539f\u6811\u3002$[u,v]$ \u8868\u793a $u\\to v$ \u7684\u8def\u5f84\uff0c$S$ \u662f\u539f\u6811\u4e0a\u65e0\u5e8f\u70b9\u5bf9\u7684\u5168\u96c6\u3002\n\n\u90a3\u4e48\u7b54\u6848\u5c31\u662f\uff1a\n\n$$\\sum\\limits_{(s,t)\\in S}\\sum\\limits_{[u,v]\\subseteq [s,t]}\\text{dep}'_{\\text{lca}(u,v)}$$\n\n\u8003\u8651\u679a\u4e3e $(u,v)$ \u5206\u60c5\u51b5\u8ba1\u7b97\u8d21\u732e\uff1a\n\n- $\\text{lca(u,v)}\\neq u,v$\uff1a\u663e\u7136\u5305\u542b $[u,v]$ \u7684\u8def\u5f84\u6570\u4e3a $\\text{siz}_u\\text{siz}_v$\n- \u5426\u5219\u8bbe $u$ \u4e3a $v$ \u7684\u7956\u5148\uff0c$w$ \u4e3a $u$ \u5411 $v$ \u5ef6\u4f38\u7684\u90a3\u4e2a\u513f\u5b50\uff0c\u90a3\u4e48\u7ecf\u8fc7 $[u,v]$ \u7684\u8def\u5f84\u6570\u4e3a $(n-\\text{siz}_w)\\text{siz}_v$\u3002\n\n\u8003\u8651\u7b2c\u4e00\u79cd\u8d21\u732e\u548b\u7b97\uff0c\u6839\u636e\u67d0\u9053[\u7ecf\u5178\u9898](https://www.luogu.com.cn/problem/P4211)\u7684\u5957\u8def\uff0c\u4e00\u4e2a\u7b80\u5355\u7684\u60f3\u6cd5\u662f\u679a\u4e3e $u$\uff0c\u7136\u540e $[d_u\\to \\text{root}']$ \u4e0a\u9762\u6240\u6709\u70b9\u589e\u52a0 $\\text{siz}_u$\uff0c\u7136\u540e\u679a\u4e3e $v$\uff0c\u5bf9 $[d_v\\to\\text{root}']$ \u6c42\u548c\u4e58\u4e0a $\\text{siz}_v$ \u5373\u53ef\u3002\u4f46\u662f\u8981\u9664\u6389\u6839\u7684\u8d21\u732e\uff0c\u56e0\u4e3a $\\text{dep}'_{d_\\text{root}}=0$\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u8d21\u732e\uff0c\u6211\u4eec\u76f4\u63a5\u5bf9 $T$ \u641c\u4e00\u8fb9\uff0c\u5230\u4e86\u4e00\u4e2a\u70b9 $v$\uff0c\u8003\u8651\u5b83\u5230 $\\text{root}$ \u7684\u8def\u5f84\u5bf9 $v$ \u7684\u8d21\u732e\u548c\u3002\u6211\u4eec\u5230\u4e00\u4e2a\u70b9 $u$\uff0c\u679a\u4e3e\u51fa\u8fb9 $u\\to w$\uff0c\u76f4\u63a5\u7ed9 $[u,\\text{root}]$ \u52a0\u4e0a $n-\\text{siz}_w$\uff0c\u7136\u540e\u5f80 $w$ \u8d70\uff0c\u56de\u6eaf\u7684\u65f6\u5019\u518d\u51cf\u53bb\u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u6837\u4f1a\u7b97\u91cd\uff0c\u53d1\u73b0\u5728\u7b2c\u4e00\u79cd\u8d21\u732e\u4e2d\uff0c\u5728 $u$ \u5b50\u6811\u5185\u7684 $v$ \u4e5f\u88ab\u8ba1\u7b97\u4e86\u3002\u51b7\u9759\u5206\u6790\u4e00\u4e0b\uff0c\u56e0\u4e3a\u7b97\u91cd\u7684 $(u,v)$ \u5747\u6ee1\u8db3 $v$ \u5728 $u$ \u5b50\u6811\u5185\uff0c\u6240\u4ee5\u6211\u4eec\u505a\u7b2c\u4e8c\u79cd\u8d21\u732e\u7684\u65f6\u5019\u5c06\u589e\u91cf $n-\\text{siz}_w$ \u53d8\u6210 $n-\\text{siz}_w-\\text{siz}_u$ \u5373\u53ef\u3002\n\n\u7136\u540e\u7ebf\u6bb5\u6811\u968f\u4fbf\u505a\u4e86\uff0c\u590d\u6742\u5ea6 $O(n\\log^2 n)$\u3002\u81ea\u8ba4\u4e3a\u5199\u5f97\u5f88\u6e05\u65b0\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n\nnamespace vbzIO {\n    char ibuf[(1 << 20) + 1], *iS, *iT;\n    #if ONLINE_JUDGE\n    #define gh() (iS == iT ? iT = (iS = ibuf) + fread(ibuf, 1, (1 << 20) + 1, stdin), (iS == iT ? EOF : *iS++) : *iS++)\n    #else\n    #define gh() getchar()\n    #endif\n    #define pc putchar\n    #define pi pair<int, int>\n    #define tu3 tuple<int, int, int>\n    #define tu4 tuple<int, int, int, int>\n    #define mp make_pair\n    #define mt make_tuple\n    #define fi first\n    #define se second\n    #define pb push_back\n    #define ins insert\n    #define era erase\n    inline int read () {\n        char ch = gh();\n        int x = 0;\n        bool t = 0;\n        while (ch < '0' || ch > '9') t |= ch == '-', ch = gh();\n        while (ch >= '0' && ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = gh();\n        return t ? ~(x - 1) : x;\n    }\n    inline void write(int x) {\n        if (x < 0) {\n            x = ~(x - 1);\n            putchar('-');\n        }\n        if (x > 9)\n            write(x / 10);\n        putchar(x % 10 + '0');\n    }\n}\nusing vbzIO::read;\nusing vbzIO::write; \n\nconst int mod = 998244353;\nconst int maxn = 3e5 + 300;\nconst int inv2 = (mod + 1) / 2;\nstruct seg { int sum, tag; } tr[maxn << 2];\nint n, m, rt, dfc, ans, fa[maxn], a[maxn];\nint sz[maxn], dep[maxn], siz[maxn], fath[maxn], son[maxn], top[maxn], id[maxn], d[maxn];\nvector<int> t1[maxn], t2[maxn];\n\n#define ls x << 1\n#define rs x << 1 | 1\n#define mid ((l + r) >> 1)\nvoid pushup(int x) { tr[x].sum = (tr[ls].sum + tr[rs].sum) % mod; }\nvoid pushtag(int x, int c, int l, int r) { (tr[x].sum += 1ll * c * (r - l + 1) % mod) %= mod, (tr[x].tag += c) %= mod; }\nvoid pushdown(int x, int l, int r) {\n\tif (!tr[x].tag) return;\n\tpushtag(ls, tr[x].tag, l, mid), pushtag(rs, tr[x].tag, mid + 1, r);\n\ttr[x].tag = 0;\n}\n\nvoid upd(int l, int r, int s, int t, int c, int x) {\n\tif (s <= l && r <= t) return pushtag(x, c, l, r);\n\tpushdown(x, l, r);\n\tif (s <= mid) upd(l, mid, s, t, c, ls);\n\tif (t > mid) upd(mid + 1, r, s, t, c, rs);\n\tpushup(x);\n}\n\nint qry(int l, int r, int s, int t, int x) {\n\tif (s <= l && r <= t) return tr[x].sum;\n\tint res = 0;\n\tpushdown(x, l, r);\n\tif (s <= mid) (res += qry(l, mid, s, t, ls)) %= mod;\n\tif (t > mid) (res += qry(mid + 1, r, s, t, rs)) %= mod;\n\treturn res;\n}\n\nvoid updp(int u, int c) {\n\tc %= mod;\n\twhile (u) {\n\t\tupd(0, m, id[top[u]], id[u], c, 1);\n\t\tu = fath[top[u]];\n\t}\n}\n\nint qryp(int u) {\n\tint res = 0;\n\twhile (u) {\n\t\t(res += qry(0, m, id[top[u]], id[u], 1)) %= mod;\n\t\tu = fath[top[u]];\n\t}\n\treturn res;\n}\n\nvoid dfs1(int u, int fat) {\n\tsiz[u] = 1, dep[u] = dep[fat] + 1;\n\tfor (int v : t2[u]) {\n\t\tdfs1(v, u), siz[u] += siz[v];\n\t\tif (siz[v] > siz[son[u]]) son[u] = v; \n\t}\n}\n\nvoid dfs2(int u, int pre) {\n\ttop[u] = pre, id[u] = ++dfc;\n\tif (son[u]) dfs2(son[u], pre);\n\tfor (int v : t2[u]) {\n\t\tif (v == son[u]) continue;\n\t\tdfs2(v, v);\n\t}\n} \n\nvoid dfs3(int u) {\n\tsz[u] = 1;\n\tfor (int v : t1[u]) \n\t\tdfs3(v), sz[u] += sz[v];\n}\n\nvoid dfs4(int u) {\n\tfor (int v : t2[u]) \n\t\tdfs4(v), (d[u] += d[v]) %= mod;\n}\n\nvoid dfs5(int u, int fat) {\n\t(d[u] += d[fat]) %= mod;\n\tfor (int v : t2[u]) dfs5(v, u);\n}\n\nvoid dfs6(int u) {\n\t(ans += 1ll * sz[u] * qryp(a[u]) % mod) %= mod;\n\tfor (int v : t1[u]) {\n\t\tupdp(a[u], mod + n - sz[u] - sz[v]);\n\t\tdfs6(v);\n\t\tupdp(a[u], mod - n + sz[u] + sz[v]); \n\t}\n}\n\nint main() {\n\tn = read(), m = read();\n\tfor (int i = 1; i <= n; i++) {\n\t\tfa[i] = read(); \n\t\tif (!fa[i]) rt = i;\n\t\telse t1[fa[i]].pb(i);\n\t}\n\tfor (int i = 1; i <= m; i++) {\n\t\tfath[i] = read();\n\t\tif (fath[i]) t2[fath[i]].pb(i);\n\t}\n\tscanf(\"%*s\");\n\tfor (int i = 1; i <= n; i++) a[i] = read();\n\tfor (int u : t2[1]) dep[u] = 1, fath[u] = 0, dfs1(u, 0), dfs2(u, u);\n\tdfs3(rt);\n\tfor (int i = 1; i <= n; i++) (d[a[i]] += sz[i]) %= mod;\n\tdfs4(1), d[1] = 0, dfs5(1, 0);\n\tfor (int i = 1; i <= n; i++) {\n\t\tans = (ans + 1ll * sz[i] * d[a[i]] % mod) % mod;\n\t\tans = (ans + mod - 1ll * sz[i] * sz[i] % mod * dep[a[i]] % mod) % mod;\n\t}\n\tans = 1ll * ans * inv2 % mod;\n\tdfs6(rt);\n\twrite(ans);\n\treturn 0;\n}\n```",
        "postTime": 1678524531,
        "uid": 306573,
        "name": "Ender32k",
        "ccfLevel": 0,
        "title": "P5439 \u3010XR-2\u3011\u6c38\u6052"
    },
    {
        "content": "\u51fa\u9898\u4eba\u5728NOI\u7684\u65f6\u5019\u544a\u8bc9\u4e86\u6211\u8fd9\u9053\u9898\uff0c\u7136\u540e\u5c31\u53e3\u80e1\u4e86\u4e00\u4e2a\u548c\u6807\u7b97\u4e0d\u592a\u4e00\u6837\u7684\u505a\u6cd5\u3002\n    \n\u200b\t\u9996\u5148\u8003\u8651\u70b9\u5bf9\u7684\u8d21\u732e\uff0c\u5373$\\sum depth(lca(u,v))$\u5982\u4f55\u5904\u7406\u3002\n\n\u200b\t\u5bf9\u7b2c\u4e00\u68f5\u6811\u91cd\u94fe\u5256\u5206\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u4e2a\u8282\u70b9$u$\u8003\u8651lca\u662f$u$\u7684\u6240\u6709\u70b9\u5bf9\u7684\u8d21\u732e\u3002\u4f9d\u6b21dfs\u8282\u70b9$u$\u7684\u6bcf\u4e00\u68f5\u5b50\u6811\u4e2d\u7684\u6240\u6709\u8282\u70b9\uff0c\u5bf9\u4e8edfs\u5230\u7684\u8282\u70b9$v$\uff0c\u56e0\u4e3a\u70b9\u5bf9\u6709\u5e8f\uff0c\u53ea\u9700\u8981\u8003\u8651$u$\u7684\u6240\u6709\u5b50\u6811\u4e2d$v$\u6240\u5728\u7684\u5b50\u6811\u4e4b\u540e\u7684\u5b50\u6811\u4e2d\u7684\u8282\u70b9\u4e0e$v$\u5339\u914d\u4ea7\u751f\u7684\u8d21\u732e\uff0c\u663e\u7136\u8fd9\u4e9b\u70b9\u5bf9\u5e94dfs\u5e8f\u4e0a\u4e00\u4e2a\u533a\u95f4\uff0c\u6c42\u70b9\u5230\u533a\u95f4lca\u7684\u6df1\u5ea6\u548c\u53ef\u4ee5\u91c7\u7528[LNOI2014 LCA] \u7684\u8ba1\u7b97\u65b9\u6cd5\u3002\u7136\u540e\u53d1\u73b0\u663e\u7136\u6700\u540e\u4e00\u4e2a\u5b50\u6811\u4e0d\u9700\u8981dfs\uff0c\u6211\u4eec\u628a\u91cd\u5b50\u6811\u653e\u5230\u6700\u540e\u4e00\u4e2a\u5c31\u80fd\u7c7b\u4f3cdsu on tree\u7684\u505a\u4e86\u3002\u6700\u540e\u5bf9\u4e8e\u6839\u8282\u70b9\u5355\u72ec\u5904\u7406\u4e00\u4e0b\u3002\n\n\u200b\t\u7136\u540e\u8003\u8651\u6269\u5c55\u5230\u6240\u6709\u8def\u5f84\u7684\u6240\u6709\u70b9\u5bf9\u7684\u548c\u3002\u5bf9\u4e8e\u70b9\u5bf9$(u, v)$\uff0c\u663e\u7136\u5b83\u4eec\u88ab$size(u)\\times size(v)$\u6761\u8def\u5f84\u5305\u542b\uff0c\u8d21\u732e\u4e3a$size(u)\\times size(v) \\times depth(lca(u,v))$ \u3002\u5728\u4e0a\u9762dsu on tree\u7684\u8fc7\u7a0b\u4e2d\u6211\u4eec\u679a\u4e3e$u$\uff0c\u53ef\u4ee5\u5728\u8be2\u95ee\u533a\u95f4lca\u7684\u65f6\u5019\u53ef\u4ee5\u76f4\u63a5\u4e58\u4e0a$size(u)$\uff0c\u7136\u540e\u8003\u8651\u88ab\u8be2\u95ee\u7684$v$\uff0c\u6211\u4eec\u4ee4$v$\u88ab\u4f5c\u4e3alca\u7aef\u70b9\u8ba1\u7b97\u7684\u65f6\u5019\u8d21\u732e\u4e58\u4ee5$size(v)$\u5373\u53ef\u3002\u5982\u679c\u7c7b\u4f3c[LNOI2014 LCA]\u5730\u91c7\u7528lct\u89e3\u6cd5\u56de\u7b54\u533a\u95f4lca\u8be2\u95ee\uff0c\u5728\u64cd\u4f5c\u65f6\u5c06\u5f53\u524d\u70b9\u5230\u6839\u7684\u6240\u6709\u70b9\u6743\u503c$+1$\u6539\u6210$+size(v)$\u5c31\u80fd\u5904\u7406\u4e86\u3002\n\n\u200b\t\u8ba4\u4e3a$n,m$\u540c\u7ea7\u7684\u8bdd\uff0c\u590d\u6742\u5ea6$nlog^2n$\u3002",
        "postTime": 1563637333,
        "uid": 48355,
        "name": "EternalAlexander",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5439 \u3010\u3010XR-2\u3011\u6c38\u6052\u3011"
    }
]