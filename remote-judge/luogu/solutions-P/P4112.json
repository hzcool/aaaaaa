[
    {
        "content": "## \u697c\u4e0a\u5de8\u4f6c\u7684\u601d\u8def\u90fd\u5f88\u6e05\u6670\uff01\u4f46\u4ee3\u7801\u7565\u663e\u5197\u957f\n\n**\u9898\u610f**\uff1a\n\n\u95ee\u6700\u77ed\u7684\u6ee1\u8db3\uff1a\u662fA\u7684\u5b50\u4e32\uff08\u5b50\u5e8f\u5217\uff09\uff0c\u4e14\u4e0d\u662fB\u7684\u5b50\u4e32\uff08\u5b50\u5e8f\u5217\uff0c\u5b50\u5e8f\u5217\uff08\u5b50\u4e32\uff09\uff09\u3002\uff08\u5171\u56db\u4e2a\u95ee\u9898\uff09\n\n**\u601d\u8def**\uff1a\n\n1. \u5b50\u4e32\u95ee\u9898\uff0c\u8003\u8651\u540e\u7f00\u81ea\u52a8\u673a\uff1b\u5b50\u5e8f\u5217\u95ee\u9898\uff0c\u8003\u8651\u5e8f\u5217\u81ea\u52a8\u673a\uff1b\n2. \u7136\u540e\u672c\u9898\u8981\u6c42\u5c5e\u4e8e\u524d\u8005\uff0c\u800c\u4e0d\u5c5e\u4e8e\u540e\u8005\u7684\u5b50\u7ed3\u6784\uff0c\u53ef\u4ee5\u8003\u8651\u66b4\u529b\u7684\u5728\u4e24\u79cdDAG\u4e0a\u540c\u65f6\u8dd1\uff1b\u82e5\u524d\u8005\u53ef\u4ee5\u8dd1\uff0c\u540e\u8005\u5374\u4e0d\u80fd\u8dd1\uff0c\u8bf4\u660e\u6b64\u5b50\u7ed3\u6784\u4ec5\u5c5e\u4e8e\u524d\u8005\uff0c\u597d\u50cf\u95ee\u9898\u5c31\u89e3\u51b3\u4e86\uff1f\n3. \u4f46\u4ed4\u7ec6\u4e00\u60f3\uff0c\u957f\u5ea6\u4e3a$2000$\u7684\u4e32\u5b50\u5e8f\u5217\u4f3c\u4e4e\u592a\u591a\u4e86\uff0c\u597d\u50cf\u4e0d\u80fd\u8dd1\u5b8c\uff1f\u8fd9\u91cc\u6211\u4eec\u8003\u8651$bfs$\uff0c\u8bb0\u5f55\u54ea\u4e9b\u72b6\u6001\uff08\u4e8c\u7ef4\uff09\u5df2\u7ecf\u904d\u5386\uff1b\u5bf9\u4e8e\u5df2\u7ecf\u904d\u5386\u8fc7\u7684\u72b6\u6001\uff0c\u867d\u7136\u6b64\u524d\u5728\u904d\u5386\u65f6\u5f53\u524d\u72b6\u6001\u6240\u4ee3\u8868\u7684\u5b50\u7ed3\u6784\u53ef\u80fd\u4e0d\u4e00\u6837\uff08\u6bd4\u5982\u5e8f\u5217\u81ea\u52a8\u673a\u901a\u8fc7\u4e0d\u540c\u7684\u8def\u5f84\u5230\u8fbe\u67d0\u4e2a\u8282\u70b9\uff09\uff0c\u4f46\u6b64\u540e\u8282\u70b9\u7684\u53ef\u5230\u8fbe\u6027\u5374\u53ea\u4e0e\u5f53\u524d\u8282\u70b9\u662f\u5426\u53ef\u5230\u8fbe\u6709\u5173\uff0c\u800c\u4e0e\u600e\u6837\u5230\u8fbe\u7684\u65e0\u5173\uff0c\u6545\u540e\u7eed\u8282\u70b9\u662f\u5426\u53ef\u5230\u8fbe\u5728\u4e4b\u524d\u7684$bfs$\u4e2d\u5df2\u7ecf\u5904\u7406\u597d\u4e86\uff1b\u56e0\u6b64\u53ef\u4ee5\u50cf\u666e\u901a\u7684$bfs$\u4e00\u6837\uff0c\u904d\u5386\u8fc7\u7684\u72b6\u6001\u53ef\u63a5\u5ffd\u7565\u6389\uff01\uff08\u4f7f\u7528$n\u00d7n$\u7684$vis$\u8bb0\u5f55\uff09\n4. \u590d\u6742\u5ea6\uff1a\u540e\u7f00\u81ea\u52a8\u673a\u4e3a$O(n*\u2211)$\uff1b\u5e8f\u5217\u81ea\u52a8\u673a\u4e3a$O(n*\u2211)$\uff1b\u6bcf\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\u8282\u70b9\u6570\u4e3a$2*n$\uff0c\u6bcf\u4e2a\u5e8f\u5217\u81ea\u52a8\u673a\u8282\u70b9\u6570\u4e3a$n$\uff0c$bfs$\u904d\u5386\u65f6\u6bcf\u4e2a\u70b9\u904d\u5386\u8fb9\u6570\u4e3a$\u2211$\uff0c\u56e0\u6b64$bfs$\u590d\u6742\u5ea6\u4e3a$O(n*\u2211)$;\n5. **\u603b\u590d\u6742\u5ea6\u4e3a$O(n*\u2211)$**\u3002\uff08$\u2211$\u4e3a\u5b57\u7b26\u96c6\u5927\u5c0f\uff09\n\n**\u538b\u884c\u601d\u8def**\uff1a\u7531\u4e8e\u540e\u7f00\u81ea\u52a8\u673a\u4e0e\u5e8f\u5217\u81ea\u52a8\u673a\u90fd\u53ef\u4ee5\u770b\u505aDAG\uff0c\u800c\u5728$bfs$\u7684\u65f6\u5019\u4e5f\u53ea\u9700\u8981\u7528\u5230\u8fb9\uff0c\u56e0\u6b64\u5728\u5ffd\u7565\u8fd9\u4e24\u79cd\u81ea\u52a8\u673a\u7684\u5176\u4ed6\u7ed3\u6784\u540e\uff0c\u5c31\u53d8\u5f97\u4e00\u6837\u5566\uff01\u56db\u4e2a$bfs$\u5b8c\u5168\u53ef\u4ee5\u5199\u5728\u4e00\u8d77\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\n\nconst int maxn = 4e3+10;\n\nstruct P{ int a, b, c; };\nint ch[2][2][maxn][26], fa[2][maxn], len[2][maxn];\nbool vis[maxn][maxn];\nint tot[2]={1,1}, last[2]={1,1};\nchar s[maxn];\n\nvoid add(int c, int f) {\n    int p=last[f], np=last[f]=++tot[f];\n    len[f][np]=len[f][p]+1;\n    for(; p&&!ch[f][1][p][c]; p=fa[f][p]) ch[f][1][p][c]=np;\n    if(!p) fa[f][np]=1;\n    else {\n        int q=ch[f][1][p][c];\n        if(len[f][q]==len[f][p]+1) fa[f][np]=q;\n        else {\n            int nq=++tot[f]; len[f][nq]=len[f][p]+1;\n            fa[f][nq]=fa[f][q]; fa[f][q]=fa[f][np]=nq;\n            memcpy(ch[f][1][nq],ch[f][1][q],104);\n            for(; p&&ch[f][1][p][c]==q; p=fa[f][p]) ch[f][1][p][c]=nq;\n        }\n    }\n}\n\nvoid pre(int f) {\n    for(int i=strlen(s+1); i; --i) {\n        memcpy(ch[f][0][i-1],ch[f][0][i],104);\n        ch[f][0][i-1][s[i]-'a']=i;\n    }\n}\n\nvoid bfs(int f1, int f2) {\n    memset(vis,0,sizeof(vis));\n    queue<P> q;\n    q.push((P){f1,f2,0}); vis[f1][f2]=1;\n    while(!q.empty()) {\n        P now=q.front(); q.pop();\n        for(int i=0; i<26; ++i) if(ch[0][f1][now.a][i]) {\n            if(ch[1][f2][now.b][i]) {\n                int a=ch[0][f1][now.a][i], b=ch[1][f2][now.b][i];\n                if(!vis[a][b]) vis[a][b]=1, q.push((P){a,b,now.c+1});\n            }\n            else return (void)printf(\"%d\\n\", now.c+1);\n        }\n    }\n    printf(\"-1\\n\");\n}\n\nint main() {\n    scanf(\"%s\", s+1);\n    pre(0); for(int i=1; s[i]; ++i) add(s[i]-'a',0);\n    scanf(\"%s\", s+1);\n    pre(1); for(int i=1; s[i]; ++i) add(s[i]-'a',1);\n    bfs(1,1); bfs(1,0); bfs(0,1); bfs(0,0);\n}\n```\n\n### [\u66f4\u68d2\u7684\u89c2\u8d4f\u4f53\u9a8c\uff01](https://blog.csdn.net/weixin_43823767/article/details/102689565)",
        "postTime": 1571745440,
        "uid": 139247,
        "name": "UniverseofHK",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4112 \u3010[HEOI2015]\u6700\u77ed\u4e0d\u516c\u5171\u5b50\u4e32\u3011"
    },
    {
        "content": "\u7f51\u4e0a\u6709\u8bf4\u7528DP\u7684\uff0c\u4f46\u90a3\u6837\u5c31\u76f8\u5f53\u4e8e\u505a\u4e864\u9053\u9898\uff0c\u6211\u8ffd\u6c42\u6548\u7387\uff0c\u80af\u5b9a\u4e0d\u4f1a\u8fd9\u4e48\u5e72\n\n\u5176\u5b9e\u53ef\u4ee5\u6bcf\u4e2a\u4e32\u5efa\u4e00\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u4ee5\u53ca\u4e00\u4e2a\u5e8f\u5217\u81ea\u52a8\u673a\uff0c\u5206\u522b\u7528\u4e8e\u8bc6\u522b\u5b50\u4e32\u548c\u5b50\u5e8f\u5217\n\n\u5e8f\u5217\u81ea\u52a8\u673a\u662f\u4e00\u4e2a\u76f8\u5f53\u4e0d\u4f18\u79c0\u7684\u81ea\u52a8\u673a\uff0c\u5176\u6784\u9020\u590d\u6742\u5ea6\u7406\u8bba\u662fO(n^2)\u7684\uff0c\u56e0\u4e3a\u6bcf\u65b0\u589e\u4e00\u4e2a\u5b57\u7b26\uff0c\u5e8f\u5217\u81ea\u52a8\u673a\u4e0a\u6709\u5f88\u591a\u7ed3\u70b9\u90fd\u80fd\u7ee7\u7eed\u63a5\u53d7\u8fd9\u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u90fd\u8981\u8fde\u8fb9\u8fc7\u53bb\n\n\u6bcf\u4e00\u95ee\u5c31\u76f8\u5f53\u4e8e\u5728A\u3001B\u4e32\u76f8\u5e94\u7684\u81ea\u52a8\u673a\u4e0a\u8dd1\u5e7f\u641c\uff0c\u9047\u5230\u7b2c\u4e00\u4e2aA\u4e32\u5339\u914d\u3001B\u4e32\u5931\u914d\u7684\u5b57\u7b26\u5c31\u8f93\u51fa\u5f53\u524d\u6df1\u5ea6\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u4e00\u4e2a\u5e7f\u641c\uff0c\u7136\u540e\u590d\u52363\u904d\uff0c\u6539\u51e0\u4e2a\u5b57\u6bcd\u5c31\u53ef\u4ee5\u4e86\u54c8\u54c8\u54c8\u54c8\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nstruct SAM\n{\n    int ch[4010][26],prt[4010];\n    int len[4010];\n    int lst,tot;\n    SAM(){lst=tot=1;}\n    \n    void insert(int c)\n    {\n        int p=lst,np=++tot;len[np]=len[p]+1;\n        while(p&&!ch[p][c]) ch[p][c]=np,p=prt[p];\n        if(!p) prt[np]=1;\n        else\n        {\n            int q=ch[p][c];\n            if(len[q]==len[p]+1) prt[np]=q;\n            else\n            {\n                int nq=++tot;len[nq]=len[p]+1;\n                memcpy(ch[nq],ch[q],sizeof(ch[nq]));\n                prt[nq]=prt[q];prt[q]=prt[np]=nq;\n                while(ch[p][c]==q) ch[p][c]=nq,p=prt[p];\n            }\n        }\n        lst=np;\n    }\n} SA,SB;\n\nstruct SqAM\n{\n    int ch[4010][26],lst[26],pre[4010];\n    int root,tot;\n    SqAM(){root=tot=1;for(int i=0;i<26;i++)lst[i]=1;}\n    \n    void insert(int c)\n    {\n        int p=lst[c],np=++tot;\n        pre[np]=p;\n        for(int i=0;i<26;i++)\n            for(int j=lst[i];j&&!ch[j][c];j=pre[j])\n                ch[j][c]=np;\n        lst[c]=np;\n    }\n} SQA,SQB;\n\nchar A[2010],B[2010];\nint la,lb;\nstruct THIRD\n{\n    int a,b,step;\n    THIRD(int x=0,int y=0,int z=0):a(x),b(y),step(z){}\n};\nint vis[4010][4010];\n\nint BFS1()\n{\n    queue<THIRD> q;\n    q.push(THIRD(1,1,0));\n    vis[1][1]=1;\n    while(!q.empty())\n    {\n        int ra=q.front().a,rb=q.front().b,st=q.front().step;\n        for(int i=0;i<26;i++)\n        {\n            int va=SA.ch[ra][i],vb=SB.ch[rb][i];\n            if(va&&vb)\n            {\n                if(vis[va][vb]==1) continue;\n                q.push(THIRD(va,vb,st+1));\n                vis[va][vb]=1;\n            }\n            if(va&&!vb) return st+1;\n        }\n        q.pop();\n    }\n    return -1;\n}\n\nint BFS2()\n{\n    queue<THIRD> q;\n    q.push(THIRD(1,1,0));\n    vis[1][1]=2;\n    while(!q.empty())\n    {\n        int ra=q.front().a,rb=q.front().b,st=q.front().step;\n        for(int i=0;i<26;i++)\n        {\n            int va=SA.ch[ra][i],vb=SQB.ch[rb][i];\n            if(va&&vb)\n            {\n                if(vis[va][vb]==2) continue;\n                q.push(THIRD(va,vb,st+1));\n                vis[va][vb]=2;\n            }\n            if(va&&!vb) return st+1;\n        }\n        q.pop();\n    }\n    return -1;\n}\n\nint BFS3()\n{\n    queue<THIRD> q;\n    q.push(THIRD(1,1,0));\n    vis[1][1]=3;\n    while(!q.empty())\n    {\n        int ra=q.front().a,rb=q.front().b,st=q.front().step;\n        for(int i=0;i<26;i++)\n        {\n            int va=SQA.ch[ra][i],vb=SB.ch[rb][i];\n            if(va&&vb)\n            {\n                if(vis[va][vb]==3) continue;\n                q.push(THIRD(va,vb,st+1));\n                vis[va][vb]=3;\n            }\n            if(va&&!vb) return st+1;\n        }\n        q.pop();\n    }\n    return -1;\n}\n\nint BFS4()\n{\n    queue<THIRD> q;\n    q.push(THIRD(1,1,0));\n    vis[1][1]=4;\n    while(!q.empty())\n    {\n        int ra=q.front().a,rb=q.front().b,st=q.front().step;\n        for(int i=0;i<26;i++)\n        {\n            int va=SQA.ch[ra][i],vb=SQB.ch[rb][i];\n            if(va&&vb)\n            {\n                if(vis[va][vb]==4) continue;\n                q.push(THIRD(va,vb,st+1));\n                vis[va][vb]=4;\n            }\n            if(va&&!vb) return st+1;\n        }\n        q.pop();\n    }\n    return -1;\n}\n\nint main()\n{\n    scanf(\"%s%s\",A,B);\n    la=strlen(A),lb=strlen(B);\n    for(int i=0;i<la;i++) SA.insert(A[i]-'a'),SQA.insert(A[i]-'a');\n    for(int i=0;i<lb;i++) SB.insert(B[i]-'a'),SQB.insert(B[i]-'a');\n    printf(\"%d\\n%d\\n%d\\n%d\\n\",BFS1(),BFS2(),BFS3(),BFS4());\n    return 0;\n}\n```",
        "postTime": 1528597575,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P4112 \u3010[HEOI2015]\u6700\u77ed\u4e0d\u516c\u5171\u5b50\u4e32\u3011"
    },
    {
        "content": "### \u4e0d\u4f1asam\u8fd8\u60f3\u5207\u9898\u7684\u5c0f\u4f19\u4f34\u4eec\u96c6\u5408\u4e86\u3002\n\n\u4e00\u9053\u56db\u5408\u4e00\u9898\uff0c\u5982\u679c\u5206\u5f00\u505a\u524d\u4e24\u4e2a\u597d\u8bf4\uff0c\u540e\u4e24\u4e2a\u5f97\u6709\u70b9\u64cd\u4f5c \uff0c\u4e0d\u8fc7\u7531\u4e8e\u6211\u592a\u83dc\u505a\u4e0d\u5f97\u3002\n\n\u90a3\u6211\u4eec\u628a\u8fd9\u56db\u4e2a\u770b\u6210\u4e00\u7c7b\u95ee\u9898\u3002\n\n\u8003\u8651\u81ea\u52a8\u673a\uff1a\u4e00\u4e2a\u8282\u70b9\u8868\u793a\u4e00\u4e2a\u72b6\u6001\uff0c\u6bcf\u6761\u8fb9\u8868\u793a\u72b6\u6001\u7684\u8f6c\u79fb\u3002\u7531\u4e8e\u5b50\u4e32\u548c\u5b50\u5e8f\u5217\u90fd\u80fd\u5efa\u51fa\u81ea\u52a8\u673a\u6765\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e24\u4e2a\u81ea\u52a8\u673a\u8fdb\u884c\u76f8\u540c\u7684\u8f6c\u79fb\uff0c\u5219 $A$ \u4e2d\u6709\u800c $B$ \u4e2d\u6ca1\u6709\u7684\u72b6\u6001\u5c31\u662f\u6211\u4eec\u8981\u627e\u7684\u7b54\u6848\u3002\n\n\u5b50\u5e8f\u5217\u5efa\u6210\u81ea\u52a8\u673a\u8fd9\u4e2a\u5e94\u8be5\u90fd\u4f1a\uff0c\u7531\u4e8e\u5e0c\u671b\u6700\u957f\u7684\u5339\u914d\uff0c\u80af\u5b9a\u76f8\u540c\u7684\u5b57\u7b26\u8d8a\u9760\u524d\u8d8a\u597d\u3002\u6bcf\u4e2a\u4f4d\u7f6e\u662f\u4e00\u4e2a\u70b9\uff0c\u5411\u540e\u6bcf\u4e2a\u5b57\u7b26\u5f80\u79bb\u5b83\u6700\u8fd1\u7684\u70b9\u8fde\u8fb9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4e3a $O(n*$ \u5b57\u7b26\u96c6\u5927\u5c0f$)$ \u3002\n\n\u5b50\u4e32\u5efa\u6210\u81ea\u52a8\u673a\u53ef\u4ee5\u9009\u62e9\u524d\u7f00\u81ea\u52a8\u673a\u4e5f\u53ef\u9009\u62e9\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u800c\u8fd9\u9898\u6570\u636e\u8303\u56f4\u662f $2000$\uff0c\u56e0\u4e3a\u590d\u6742\u5ea6\u74f6\u9888\u5e76\u4e0d\u5728\u8fd9\u91cc\uff0c\u5f53\u7136\u5982\u679c\u4e0d\u60f3\u8003\u8651\u7a7a\u95f4\u7684\u8bdd\u53ef\u4ee5\u5199 $sam$\u3002\u6211\u4eec\u8fd9\u91cc\u53ea\u9700\u8981\u7528 $trie$ \u5f53\u81ea\u52a8\u673a\u5c31\u53ef\u4ee5\u4e86\uff0c\u628a\u6bcf\u4e2a\u5b50\u4e32\u53d6\u51fa\u6765\u5efa\u7acb\u4e00\u4e2a $trie$\uff0c\u5b57\u7b26\u603b\u957f\u5ea6 $O(n^2)$\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u7a7a\u95f4\u590d\u6742\u5ea6\u5747\u4e3a $O(n^2*\u5b57\u7b26\u96c6\u5927\u5c0f)$\u3002\u770b\u7740\u5927\u7b97\u7b97\u5176\u5b9e\u53ef\u8fc7\u3002\n\n\u90a3\u4e48\u81ea\u52a8\u673a\u5c31\u5efa\u597d\u4e86\uff0c\u6bcf\u6b21\u8be2\u95ee\u662f\u4ec0\u4e48\uff0c\u5c31\u628a\u4e24\u4e2a\u5b57\u7b26\u4e32\u5efa\u6210\u76f8\u5e94\u7684\u81ea\u52a8\u673a\u5c31\u597d\u4e86\u3002\u90a3\u4e48\u73b0\u5728\u8003\u8651\u5982\u4f55\u627e\u7b54\u6848\u3002\n\n\u56e0\u4e3a\u4e00\u6761\u8fb9\u76f8\u5f53\u4e8e\u52a0\u8fdb\u53bb\u4e00\u4e2a\u5b57\u7b26\uff0c\u6211\u4eec\u8fdb\u884c $BFS$\uff0c\u9047\u5230\u7b2c\u4e00\u4e2a $A$ \u4e2d\u5b58\u5728\u800c $B$ \u4e2d\u4e0d\u5b58\u5728\u7684\u72b6\u6001\u5c31\u628a\u957f\u5ea6 $+1$ \u8f93\u51fa\u51fa\u6765\u3002\u5982\u679c\u904d\u5386 $A$ \u7684\u5b8c\u6574\u4e2a\u81ea\u52a8\u673a\uff08\u81ea\u52a8\u673a\u80af\u5b9a\u4e0d\u4f1a\u6709\u73af\u7684\uff09\uff0c\u8fd8\u6ca1\u6709\u627e\u5230\u4e00\u4e2a $B$ \u4e2d\u6ca1\u6709\u7684\u72b6\u6001\uff0c\u90a3 $A$ \u5c31\u592a\u900a\u4e86\uff0c\u8f93\u51fa $-1$\u3002\n\n\u8003\u8651 $BFS$ \u590d\u6742\u5ea6\uff1a$trie$ \u8fdb\u884c $BFS$ \u65f6\uff0c\u7531\u4e8e $trie$ \u662f\u50cf\u6811\u4e00\u6837\u7684\u7ed3\u6784\uff0c\u6bcf\u4e2a\u70b9\u53ea\u4f1a\u88ab\u904d\u5386\u4e00\u6b21\uff0c\u590d\u6742\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 $O(n^2)$ \u3002\u800c\u5f53\u4e24\u4e2a\u5e8f\u5217\u81ea\u52a8\u673a\u8fdb\u884c\u904d\u5386\u7684\u65f6\u5019\uff0c\u7531\u4e8e\u5230\u8fbe\u4e00\u4e2a\u70b9\u53ef\u4ee5\u901a\u8fc7\u4e0d\u540c\u7684\u8def\u5f84\uff0c\u5982\u679c\u65e0\u8111\u52a0\u70b9\u4f1a\u88ab\u5361\u6210\u6307\u6570\u7ea7\u3002\u6211\u4eec\u9700\u8981\u7528 $vis$ \u6570\u7ec4\u8bb0\u5f55\u4e00\u4e0b\u54ea\u4e9b\u72b6\u6001\u5230\u8fbe\u8fc7\uff0c\u7531\u4e8e\u5e8f\u5217\u81ea\u52a8\u673a\u8282\u70b9\u6709 $n$ \u4e2a\uff0c\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u90fd\u662f $O(n^2)$ \u7684\uff0c\u800c\u4e14\u8fd9\u4e2a\u590d\u6742\u5ea6\u74f6\u9888\u4e0d\u53ef\u907f\uff0c\u524d\u9762\u81ea\u7136\u4e5f\u5c31\u4e0d\u9700\u8981\u90a3\u4e48\u4f18\u4e86\u3002\n\n\u4e0d\u8fc7\u8981\u6ce8\u610f\u53ea\u6709\u4e24\u4e2a\u81ea\u52a8\u673a\u540c\u65f6\u4e3a\u5e8f\u5217\u81ea\u52a8\u673a\u7684\u65f6\u5019\u624d\u7528 $vis$\uff0c\u5426\u5219 $trie$ \u90a3\u4e48\u591a\u70b9\u4e5f\u5f00\u4e0d\u4e0b\u662f\u5427~\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=101010;\nconst int qwq=2000100;\nconst int inf=0x3f3f3f3f;\n\nstruct T {\n\n\tchar s[N];\n\tint n;\n\tint ch[qwq][26],cnt,now,rt;\n\n\tvoid trie() {\n\t\tmemset(ch,0,sizeof(ch));\n\t\trt = now = cnt = 1;\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tnow = rt;\n\t\t\tfor(int j=i;j<=n;j++) {\n\t\t\t\tint c = s[j] - 'a';\n\t\t\t\tif(!ch[now][c]) ch[now][c] = ++cnt;\n\t\t\t\tnow = ch[now][c];\n\t\t\t}\n\t\t}\n\t}\n\n\tvoid lie() {\n\t\tmemset(ch,0,sizeof(ch));\n\t\tcnt = n; rt = 0;\n\t\tfor(int i=1;i<=n;i++) {\n\t\t\tfor(int j=i-1;j>=0;j--) {\n\t\t\t\tch[j][ s[i]-'a' ] = i;\n\t\t\t\tif(s[j]==s[i]) break;\n\t\t\t}\n\t\t}\n\t}\n\n} A,B;\n\nstruct E{ int x,y,le; };\nqueue <E> q;\nbool vis[2333][2333];\n\nint query() {\n\tbool flag = 0;\n\tif(A.rt==0 && B.rt==0) flag = 1;\n\tq.push( (E){A.rt,B.rt,0} );\n\tvis[A.rt][B.rt] = 1;\n\twhile(!q.empty()) {\n\t\tE now = q.front(); q.pop();\n\t\tfor(int i=0;i<25;i++) {\n\t\t\tint u = A.ch[now.x][i], v = B.ch[now.y][i];\n\t\t\tif(flag) { if(vis[u][v]) continue; }\n\t\t\tif(!u) continue;\n\t\t\tif(u && !v) { while(!q.empty()) q.pop(); return now.le+1; }\n\t\t\tq.push( (E){u,v,now.le+1} );\n\t\t\tif(flag) vis[u][v] = 1;\n\t\t}\n\t}\n\treturn -1;\n}\n\nint main() {\n\tint ans4;\n\tscanf(\"%s%s\",A.s+1,B.s+1);\n\tA.n = strlen(A.s+1); B.n = strlen(B.s+1);\n\tA.trie(); B.trie(); cout<<query()<<\"\\n\";\n\tB.lie();            cout<<query()<<\"\\n\";\n\tA.lie();            ans4 = query();\n\tB.trie();           cout<<query()<<\"\\n\"<<ans4;\n\treturn 0;\n}\n```\n\n\u5982\u679c\u6709\u4e0d\u592a\u4e25\u8c28\u6216\u8005\u590d\u6742\u5ea6\u9519\u8bef\u7684\u5730\u65b9\u5e0c\u671b\u5404\u4f4d\u5927\u4f6c\u6307\u6b63\uff0c\u8c22\u8c22 orz\u3002",
        "postTime": 1589366605,
        "uid": 102726,
        "name": "Flandre_495",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4112 \u3010[HEOI2015]\u6700\u77ed\u4e0d\u516c\u5171\u5b50\u4e32\u3011"
    },
    {
        "content": "\u7ed9\u5b9a\u4e24\u4e2a\u5b57\u7b26\u4e32$A$\u548c$B$\uff0c\u6211\u4eec\u9700\u8981\u627e\u51fa\u4e00\u4e2a\u4e32\uff0c\u5176\u5728$A$\u4e2d\u51fa\u73b0\u4e14\u4e0d\u5728$B$\u4e2d\u51fa\u73b0\uff0c\u8fd9\u4e2a\u4e32\u4e3a\u5b50\u4e32\u6216\u8005\u5b50\u5e8f\u5217\uff0c\u6c42\u5728\u6bcf\u79cd\u60c5\u51b5\u4e0b\uff0c\u8be5\u4e32\u7684\u6700\u77ed\u957f\u5ea6\u3002\n\n\u8003\u8651\u5230\u540e\u7f00\u81ea\u52a8\u673a\u53ef\u4ee5\u8bc6\u522b\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b50\u4e32\uff0c\u5e8f\u5217\u81ea\u52a8\u673a\u53ef\u4ee5\u8bc6\u522b\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u6240\u6709\u5b50\u5e8f\u5217\u3002\n\n\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u5bf9$A$\u548c$B$\u4e24\u4e2a\u5b57\u7b26\u4e32\u5efa\u51fa\u76f8\u5e94\u7684\u81ea\u52a8\u673a\uff0c\u5728\u4e24\u4e2a\u81ea\u52a8\u673a\u4e0a\u540c\u65f6\u8fdb\u884c$bfs$\uff0c\u5f53\u53d1\u73b0\u5b58\u5728\u4e00\u4e2a\u4e32\u5728$A$\u4e0a\u53ef\u8bc6\u522b\uff0c\u5728$B$\u4e0a\u65e0\u6cd5\u8bc6\u522b\uff0c\u90a3\u4e48\u5c31\u627e\u5230\u4e86\u7b54\u6848\uff0c\u82e5$bfs$\u6574\u4e2a\u8fc7\u7a0b\u7ed3\u675f\u4e86\uff0c\u8bf4\u660e\u6ca1\u6709\u7b26\u5408\u8981\u6c42\u7684\u7b54\u6848\uff0c\u76f4\u63a5\u8fd4\u56de$-1$\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u770b\u4ee3\u7801\u5427\u3002\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define maxn 4010\nusing namespace std;\nchar s1[maxn],s2[maxn];\nstruct Automata\n{\n    int root,tot,las;\n    int len[maxn],ch[maxn][30],fa[maxn],last[30];\n    void clear_sam()\n    {\n        tot=las=root=1;\n        memset(fa,0,sizeof(fa));\n        memset(ch,0,sizeof(ch));\n        memset(len,0,sizeof(len));\n    }\n    void clear_seq()\n    {\n        root=2010;\n        memset(ch,0,sizeof(ch));\n        memset(last,0,sizeof(last));\n    }\n    void insert(int c)\n    {\n        int p=las,np=las=++tot;\n        len[np]=len[p]+1;\n        while(p&&!ch[p][c]) ch[p][c]=np,p=fa[p];\n        if(!p) fa[np]=root;\n        else\n        {\n            int q=ch[p][c];\n            if(len[q]==len[p]+1) fa[np]=q;\n            else\n            {\n                int nq=++tot;\n                memcpy(ch[nq],ch[q],sizeof(ch[q]));\n                len[nq]=len[p]+1,fa[nq]=fa[q],fa[np]=fa[q]=nq;\n                while(ch[p][c]==q) ch[p][c]=nq,p=fa[p];\n            }\n        }\n    }\n    void sam(char *s)\n    {\n        clear_sam();\n        int lenth=strlen(s+1);\n        for(int i=1;i<=lenth;++i) insert(s[i]-'a'+1);\n    }\n    void seq(char *s)\n    {\n        clear_seq();\n        int lenth=strlen(s+1);\n        for(int i=lenth;i;--i)\n        {\n            for(int j=1;j<=26;++j) ch[i][j]=last[j];\n            last[s[i]-'a'+1]=i;\n        }\n        for(int i=1;i<=26;++i) ch[root][i]=last[i];\n    }\n}A,B;\nstruct node\n{\n    int a,b,len;\n};\nbool vis[maxn][maxn];\nint query()\n{\n    memset(vis,0,sizeof(vis));    \n    queue<node> q;\n    q.push((node){A.root,B.root,0});\n    vis[A.root][B.root]=true;\n    while(!q.empty())\n    {\n        node now=q.front();\n        q.pop();\n        for(int i=1;i<=26;++i)\n        {\n            int a=A.ch[now.a][i],b=B.ch[now.b][i];\n            if(vis[a][b]) continue;\n            if(a&&!b) return now.len+1;\n            vis[a][b]=true;\n            q.push((node){a,b,now.len+1});\n        }\n    }\n    return -1;\n}\nint main()\n{\n\tscanf(\"%s%s\",s1+1,s2+1);\n    A.sam(s1),B.sam(s2),printf(\"%d\\n\",query());\n    A.sam(s1),B.seq(s2),printf(\"%d\\n\",query());\n    A.seq(s1),B.sam(s2),printf(\"%d\\n\",query());\n    A.seq(s1),B.seq(s2),printf(\"%d\\n\",query());\n\treturn 0;\n}\n```\n",
        "postTime": 1580473767,
        "uid": 172489,
        "name": "lhm_",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P4112 \u3010[HEOI2015]\u6700\u77ed\u4e0d\u516c\u5171\u5b50\u4e32\u3011"
    },
    {
        "content": "### Waring\n\n\u5728\u9605\u8bfb\u672c\u6587\u4e4b\u524d\uff0c\u4f60\u9700\u8981\u5b66\u4f1a [OI-Wiki \u81ea\u52a8\u673a](https://oi-wiki.org/string/automaton/) \u3002\n\n\u7ecf\u8fc7\u4f5c\u8005\u5c1d\u8bd5\uff0c\u4f60\u9700\u8981\u5f00`O2\u4f18\u5316`\uff0c\u5426\u5219\u53ea\u4f1a\u62ff\u5230 $70$ \u5206\u7684\u597d\u6210\u7ee9\u3002\n\n### \u8981\u70b9\n- \u5e8f\u5217\u81ea\u52a8\u673a\n\n### \u5b9a\u4e49\n\n\u5e8f\u5217\u81ea\u52a8\u673a\u662f\u63a5\u53d7\u4e14\u4ec5\u63a5\u53d7\u4e00\u4e2a\u5b57\u7b26\u4e32\u7684\u5b50\u5e8f\u5217\u7684\u81ea\u52a8\u673a\u3002\n\n\u672c\u6587\u4e2d\u7528 $s$ \u4ee3\u6307\u8fd9\u4e2a\u5b57\u7b26\u4e32\u3002\n\n### \u72b6\u6001\n\u82e5 $s$ \u5305\u542b  $n$ \u4e2a\u5b57\u7b26\uff0c\u90a3\u4e48\u5e8f\u5217\u81ea\u52a8\u673a\u5305\u542b $n+1$  \u4e2a\u72b6\u6001\u3002\n\n\u4ee4 $t$  \u662f $s$  \u7684\u4e00\u4e2a\u5b50\u5e8f\u5217\uff0c\u90a3\u4e48 $\\delta(start,t)$ \u662f  \u5728 $s$ \u4e2d\u7b2c\u4e00\u6b21\u51fa\u73b0\u65f6\u672b\u7aef\u7684\u4f4d\u7f6e\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e00\u4e2a\u72b6\u6001 $i$ \u8868\u793a\u524d\u7f00 $s[1..i]$ \u7684\u5b50\u5e8f\u5217\u4e0e\u524d\u7f00 $s[1..i-1]$  \u7684\u5b50\u5e8f\u5217\u7684\u5dee\u96c6\u3002\n\n\u5e8f\u5217\u81ea\u52a8\u673a\u4e0a\u7684\u6240\u6709\u72b6\u6001\u90fd\u662f\u63a5\u53d7\u72b6\u6001\u3002\n\n### \u8f6c\u79fb\n\n\u7531\u72b6\u6001\u5b9a\u4e49\u53ef\u4ee5\u5f97\u5230\uff0c $\\delta(u,c)=\\min\\{i|i>u,s[i]=c\\}$ \uff0c\u4e5f\u5c31\u662f\u5b57\u7b26 $c$ \u4e0b\u4e00\u6b21\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\n\n\u4e3a\u4ec0\u4e48\u662f\u201c\u4e0b\u4e00\u6b21\u201d\u51fa\u73b0\u7684\u4f4d\u7f6e\u5462\uff1f\u56e0\u4e3a\u82e5 $i>j$ \uff0c\u540e\u7f00 $s[i..|s|]$ \u7684\u5b50\u5e8f\u5217\u662f\u540e\u7f00 $s[j..|s|]$ \u7684\u5b50\u5e8f\u5217\u7684\u5b50\u96c6\uff0c\u4e00\u5b9a\u662f\u9009\u5c3d\u91cf\u9760\u524d\u7684\u6700\u4f18\u3002\n\n### \u6784\u5efa\n\n\u4ece\u540e\u5411\u524d\u626b\u63cf\uff0c\u8fc7\u7a0b\u4e2d\u7ef4\u62a4\u6bcf\u4e2a\u5b57\u7b26\u6700\u524d\u7684\u51fa\u73b0\u4f4d\u7f6e\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/he68x1rz.png)\n\n\u8fd9\u6837\u6784\u5efa\u7684\u590d\u6742\u5ea6\u662f $O(n|\\sum|)$ \u3002\n\n### Solution\n\u8fd9\u9898\u7684 (1) \u548c (3) \u4e24\u95ee\u9700\u8981`\u540e\u7f00\u81ea\u52a8\u673a`\uff0c\u800c\u4e14\u505a\u6cd5\u7c7b\u4f3c\uff0c\u5728\u8fd9\u91cc\u53ea\u8bb2\u89e3 (2) \u548c (4) \u4e24\u95ee\u3002\n\n(2) \u6bd4\u8f83\u7b80\u5355\uff0c\u679a\u4e3e $A$ \u7684\u5b50\u4e32\u8f93\u5165\u8fdb $B$ \u7684\u5e8f\u5217\u81ea\u52a8\u673a\uff0c\u82e5\u4e0d\u63a5\u53d7\u5219\u8ba1\u5165\u7b54\u6848\u3002\n\n(4) \u9700\u8981 `DP`\u3002\u4ee4 $f(i,j)$ \u8868\u793a\u5728 $A$ \u7684\u5e8f\u5217\u81ea\u52a8\u673a\u4e2d\u5904\u4e8e\u72b6\u6001 $i$ \uff0c\u5728 $B$ \u7684\u5e8f\u5217\u81ea\u52a8\u673a\u4e2d\u5904\u4e8e\u72b6\u6001 $j$ \uff0c\u9700\u8981\u518d\u6dfb\u52a0\u591a\u5c11\u4e2a\u5b57\u7b26\u80fd\u591f\u4e0d\u662f\u516c\u5171\u5b50\u5e8f\u5217\u3002\n\n$f(i,null)=0$ \uff0c $f(i,j)=\\min\\limits_{\\delta_A(i,c) \\ne null}f(\\delta_A(i,c),\\delta_B(j,c))+1$ \u3002\n\n### Code\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n\nusing namespace std;\n\nconst int N = 2005;\n\nchar s[N], t[N];\nint na[N][26], nb[N][26], nxt[26];\nint n, m, a[N], b[N], tot = 1, p = 1, f[N][N << 1];\n\nstruct SAM {\n  int par, ch[26], len;\n} sam[N << 1];\n\nvoid insert(int x) {\n  int np = ++tot;\n  sam[np].len = sam[p].len + 1;\n  while (p && !sam[p].ch[x]) {\n    sam[p].ch[x] = np;\n    p = sam[p].par;\n  }\n  if (p == 0)\n    sam[np].par = 1;\n  else {\n    int q = sam[p].ch[x];\n    if (sam[q].len == sam[p].len + 1)\n      sam[np].par = q;\n    else {\n      int nq = ++tot;\n      sam[nq].len = sam[p].len + 1;\n      memcpy(sam[nq].ch, sam[q].ch, sizeof(sam[q].ch));\n      sam[nq].par = sam[q].par;\n      sam[q].par = sam[np].par = nq;\n      while (p && sam[p].ch[x] == q) {\n        sam[p].ch[x] = nq;\n        p = sam[p].par;\n      }\n    }\n  }\n  p = np;\n}\n\nint main() {\n  scanf(\"%s%s\", s + 1, t + 1);\n\n  n = strlen(s + 1);\n  m = strlen(t + 1);\n\n  for (int i = 1; i <= n; ++i) a[i] = s[i] - 'a';\n  for (int i = 1; i <= m; ++i) b[i] = t[i] - 'a';\n\n  for (int i = 1; i <= m; ++i) insert(b[i]);\n\n  for (int i = 0; i < 26; ++i) nxt[i] = n + 1;\n  for (int i = n; i >= 0; --i) {\n    memcpy(na[i], nxt, sizeof(nxt));\n    nxt[a[i]] = i;\n  }\n\n  for (int i = 0; i < 26; ++i) nxt[i] = m + 1;\n  for (int i = m; i >= 0; --i) {\n    memcpy(nb[i], nxt, sizeof(nxt));\n    nxt[b[i]] = i;\n  }\n\n  int ans = N;\n\n  for (int l = 1; l <= n; ++l) {\n    for (int r = l, u = 1; r <= n; ++r) {\n      u = sam[u].ch[a[r]];\n      if (!u) {\n        ans = min(ans, r - l + 1);\n        break;\n      }\n    }\n  }\n\n  printf(\"%d\\n\", ans == N ? -1 : ans);\n\n  ans = N;\n\n  for (int l = 1; l <= n; ++l) {\n    for (int r = l, u = 0; r <= n; ++r) {\n      u = nb[u][a[r]];\n      if (u == m + 1) {\n        ans = min(ans, r - l + 1);\n        break;\n      }\n    }\n  }\n\n  printf(\"%d\\n\", ans == N ? -1 : ans);\n\n  for (int i = n; i >= 0; --i) {\n    for (int j = 1; j <= tot; ++j) {\n      f[i][j] = N;\n      for (int c = 0; c < 26; ++c) {\n        int u = na[i][c];\n        int v = sam[j].ch[c];\n        if (u <= n) f[i][j] = min(f[i][j], f[u][v] + 1);\n      }\n    }\n  }\n\n  printf(\"%d\\n\", f[0][1] == N ? -1 : f[0][1]);\n\n  memset(f, 0, sizeof(f));\n\n  for (int i = n; i >= 0; --i) {\n    for (int j = 0; j <= m; ++j) {\n      f[i][j] = N;\n      for (int c = 0; c < 26; ++c) {\n        int u = na[i][c];\n        int v = nb[j][c];\n        if (u <= n) f[i][j] = min(f[i][j], f[u][v] + 1);\n      }\n    }\n  }\n\n  printf(\"%d\\n\", f[0][0] == N ? -1 : f[0][0]);\n\n  return 0;\n}\n```\n\n\n------------\n\u4ee5\u4e0a\u5185\u5bb9\u8f6c\u81ea[OI-Wiki](https://oi-wiki.org/string/seq-automaton/#_5)\u3002\n\n",
        "postTime": 1585621620,
        "uid": 252431,
        "name": "sh7adow_",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4112 \u3010[HEOI2015]\u6700\u77ed\u4e0d\u516c\u5171\u5b50\u4e32\u3011"
    },
    {
        "content": "\u4e00\u770b\u9898\u97624\u54081\uff0c\u60f3\u5077\u61d2\u7684\u6211\u5c31\u4e0d\u60f3\u5199\u4e86\u3002\u4e8e\u662f\u6211\u5c31\u5728\u60f3\uff0c\u6211\u53ef\u4e0d\u53ef\u4ee5\u53ea\u5199\u4e00\u4e2a\u51fd\u6570\u7136\u540e\u8c03\u75284\u904dA\u6389\u8fd9\u9053\u9898\uff0c\u7136\u540e\u6211\u53d1\u73b0\u662f\u53ef\u884c\u7684\u3002\n\n\u9996\u5148\u5206\u6790\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u5f88\u5feb\u660e\u767d\uff0c\u6211\u4eec\u9700\u8981\u6784\u5efa\u540e\u7f00\u81ea\u52a8\u673a\u548c\u5e8f\u5217\u81ea\u52a8\u673a\u3002\u5f88\u5de7\u5408\u7684\u662f\uff0c\u8fd9\u4fe9\u8d27\u90fd\u662f\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5f3a\u884c\u62bd\u8c61\u9898\u76ee\uff0c\u5f97\u5230\u4ee5\u4e0b\u8fd9\u4e2a\u65b0\u9898\u76ee\uff1a\n\n\u7ed9\u51fa\u4e24\u4e2a\u90fd\u53ea\u6709\u4e00\u4e2a\u6e90\u70b9\u7684\u6709\u5411\u65e0\u73af\u56fe\uff0c\u540c\u65f6\u4ece\u6e90\u70b9\u51fa\u53d1\uff0c\u53ea\u80fd\u540c\u65f6\u7ecf\u8fc7\u8fb9\u6743\uff08\u8f6c\u79fb\u5b57\u7b26\uff09\u76f8\u540c\u7684\u8fb9\u3002\u8981\u6c42\u627e\u5230\u6700\u77ed\u7684\u4e00\u6761\u8def\u5f84\uff0c\u4f7f\u5f97\u7b2c\u4e00\u4e2a\u56fe\u4e2d\u8d70\u5230\u7684\u70b9\u6709\u4e00\u6761\u8fb9\u662f\u7b2c\u4e8c\u4e2a\u56fe\u4e2d\u7684\u70b9\u6ca1\u6709\u7684\uff08\u7b2c\u4e00\u4e2a\u56fe\u4e2d\u7684\u70b9\u8fd8\u80fd\u7ee7\u7eed\u8f6c\u79fb\uff0c\u800c\u7b2c\u4e8c\u4e2a\u56fe\u4e2d\u7684\u70b9\u65e0\u8def\u53ef\u8d70\uff09\u3002\u5982\u679c\u7b2c\u4e00\u4e2a\u56fe\u4e2d\u7684\u4efb\u610f\u4e00\u6761\u8def\u5f84\u5728\u7b2c\u4e8c\u4e2a\u9014\u4e2d\u90fd\u5b58\u5728\u5bf9\u5e94\u7684\u4e00\u6761\u8def\u5f84\uff0c\u90a3\u4e48\u8f93\u51fa-1\u3002\n\n\u8fd9\u4e0b\u6211\u4eec\u5c31\u628a4\u4e2a\u95ee\u9898\u5316\u4e3a\u540c\u4e00\u4e2a\u95ee\u9898\u4e86\u3002\u90a3\u4e48\u8fd9\u4e48\u8fdb\u884c\u4ee3\u7801\u8bbe\u8ba1\u624d\u53ef\u4ee5\u8ba9\u4e00\u4e2a\u51fd\u6570\u65e2\u80fd\u63a5\u53d7\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u53c8\u80fd\u63a5\u53d7\u5e8f\u5217\u81ea\u52a8\u673a\u5462\uff1f\n\n\u5e38\u7528\u7684\u6709\u4e24\u4e2a\u529e\u6cd5\uff0c\u4e00\u4e2a\u662f\u4f7f\u7528template\u5173\u952e\u5b57\uff0c\u8ba9\u51fd\u6570\u672c\u8eab\u53d8\u4e3a\u4e00\u4e2a\u4e0d\u786e\u5b9a\u53c2\u6570\u7684\u4e1c\u897f\uff08\u5c31\u662f\u8ba9std::sort\u53ef\u4ee5\u4e3a\u6240\u6b32\u4e3a\u7684\u90a3\u4e2a\uff09\u3002\u800c\u53e6\u4e00\u79cd\u529e\u6cd5\u5219\u662f\u4f7f\u7528OOP\u7684\u7279\u6027\uff1a\u7ee7\u627f\u3002\n\n\u6211\u4eec\u77e5\u9053\u540e\u7f00\u81ea\u52a8\u673a\u548c\u5e8f\u5217\u81ea\u52a8\u673a\u90fd\u662f\u6709\u5411\u65e0\u73af\u56fe\uff08\u6216\u8005\u8bf4\u201c\u81ea\u52a8\u673a\u201d\uff09\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5b9a\u4e49\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff08\u81ea\u52a8\u673a\uff09\u7c7b\u3002\n\n```\nclass auto_mata{\n    public:\n        const int V;\n        vector<int>tr[N];\n        int node_count;\n        auto_mata(int V_):V(V_){\n            node_count=0;\n        }\n        virtual int new_node(){\n            tr[node_count]=vector<int>(V,0);\n            return node_count++;\n        }\n};\n```\n\u5b83\u62e5\u6709\u6709\u5411\u65e0\u73af\u56fe\uff08\u81ea\u52a8\u673a\uff09\u7684\u5171\u6027\uff1a\n\nV\uff1a\u5b57\u7b26\u96c6\u5927\u5c0f\n\ntr\uff1a\u8f6c\u79fb\u8fb9\n\nauto_mata(int)\uff1a\u751f\u6210\u6307\u5b9a\u5b57\u7b26\u96c6\u5927\u5c0f\u7684\u4e00\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff08\u81ea\u52a8\u673a\uff09\n\nnew_node\uff1a\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\uff08\u8fd9\u4e2a\u4e0d\u91cd\u8981\uff0c\u53ef\u4ee5\u518d\u540e\u9762\u5355\u72ec\u5199\uff09\n\n\u6211\u4eec\u7684\u540e\u7f00\u81ea\u52a8\u673a\u548c\u5e8f\u5217\u81ea\u52a8\u673a\u81ea\u7136\u53ef\u4ee5\u9009\u62e9\u7ee7\u627f\u6709\u5411\u65e0\u73af\u56fe\uff08\u81ea\u52a8\u673a\uff09\u7c7b\uff0c\u5e76\u5728\u6b64\u57fa\u7840\u4e0a\u589e\u6dfb\u81ea\u5df1\u72ec\u6709\u7684\u4ee3\u7801\n\n```\nclass suffix_auto_mata:public auto_mata{\n    public:\n        int last;\n        int f[N];\n        int len[N];\n        suffix_auto_mata(int V_):auto_mata(V_){\n            ...\n        }\n        ...\n};\nclass subsequence_auto_mata:public auto_mata{\n    public:\n        subsequence_auto_mata(int V_):auto_mata(V_){\n            ...\n        }\n        ...\n};\n```\n\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u5199\u4e00\u4e2a\u51fd\u6570\n```\nint bfs(const auto_mata &a,const auto_mata &b);\n```\n\u6765\u63a5\u53d7\u4efb\u4f55\u4e24\u4e2a\u6709\u5411\u65e0\u73af\u56fe\uff08\u81ea\u52a8\u673a\uff09\uff08\u4f60\u751a\u81f3\u53ef\u4ee5\u4f20\u5165\u4e00\u4e2a\u7ee7\u627f\u4e86auto_mata\u7684trie\uff0c\u5bf9\u5e94\u95ee\u9898\u5c31\u6709\u4f1a\u51fa\u73b0\u53d8\u5316\u3002\u53ef\u4ee5\u51fa8\u548c1\u4e86\uff09\uff0c\u7136\u540e\u8ba1\u7b97\u51fa\u6211\u4eec\u62bd\u8c61\u540e\u7684\u95ee\u9898\u7684\u7b54\u6848\u3002\n\n\u4ee5\u4e0b\u4e3a\u5b8c\u6574\u4ee3\u7801\n\n```\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<algorithm>\n#include<set>\n#include<queue>\nusing std::queue;\nusing std::set;\nusing std::min;\nusing std::vector;\ntypedef long long ll;\ntypedef long double ld;\nconst int N=1e5;\nconst int INF=0x3f3f3f3f;\nvoid file(const char *str){\n    char in[100],out[100];\n    sprintf(in,\"%s.in\",str),sprintf(out,\"%s.out\",str);\n    freopen(in,\"r\",stdin),freopen(out,\"w\",stdout);\n}\nll read(){\n    ll a=0;int op=1;char ch=getchar();\n    while(ch<'0'||'9'<ch){if(ch=='-')op=-1;ch=getchar();}\n    while('0'<=ch&&ch<='9'){a=(a<<3)+(a<<1)+(48^ch);ch=getchar();}\n    return a*op;\n}\nclass auto_mata{\n    public:\n        const int V;\n        vector<int>tr[N];\n        int node_count;\n        auto_mata(int V_):V(V_){\n            node_count=0;\n        }\n        virtual int new_node(){\n            tr[node_count]=vector<int>(V,0);\n            return node_count++;\n        }\n};\nclass suffix_auto_mata:public auto_mata{\n    public:\n        int last;\n        int f[N];\n        int len[N];\n        suffix_auto_mata(int V_):auto_mata(V_){\n            new_node();\n            new_node();\n            last=1;\n        }\n        virtual int new_node(){\n            int t=auto_mata::new_node();\n            f[t]=0;\n            len[t]=0;\n            return t;\n        }\n        int split(int c,int p){\n            int q=tr[p][c],nq=new_node();\n            f[nq]=f[q];\n            f[q]=nq;\n            len[nq]=len[p]+1;\n            for(int i=0;i<V;i++)tr[nq][i]=tr[q][i];\n            while(p&&tr[p][c]==q){\n                tr[p][c]=nq;\n                p=f[p];\n            }\n            return nq;\n        }\n        int add(int c){\n            return last=add(c,last);\n        }\n        int add(int c,int p){\n            if(tr[p][c]){\n                if(len[tr[p][c]]==len[p]+1)return tr[p][c];\n                return split(c,p);\n            }\n            int np=new_node();\n            len[np]=len[p]+1;\n            while(p&&!tr[p][c]){\n                tr[p][c]=np;\n                p=f[p];\n            }\n            if(!p){\n                f[np]=1;\n            }else{\n                if(len[tr[p][c]]==len[p]+1){\n                    f[np]=tr[p][c];\n                }else{\n                    f[np]=split(c,p);\n                }\n            }\n            return np;\n        }\n};\nclass subsequence_auto_mata:public auto_mata{\n    public:\n        subsequence_auto_mata(int V_):auto_mata(V_){\n            new_node();\n            new_node();\n        }\n        void add(int c){\n            int t=new_node();\n            for(int i=t-1;i&&!tr[i][c];i--)tr[i][c]=t;\n        }\n};\nset<int>s[N];\nint bfs(const auto_mata &a,const auto_mata &b){\n    int x,y,d;\n    queue<int>qx,qy,qd;\n    for(int i=1;i<(int)a.node_count;i++)s[i].clear();\n    s[1].insert(1);\n    qx.push(1);\n    qy.push(1);\n    qd.push(0);\n    while(!qx.empty()){\n        x=qx.front();\n        y=qy.front();\n        d=qd.front();\n        if(!y)return d;\n        qx.pop();\n        qy.pop();\n        qd.pop();\n        for(int i=0;i<a.V;i++)if(a.tr[x][i]){\n            if(s[a.tr[x][i]].find(b.tr[y][i])==s[a.tr[x][i]].end()){\n                s[a.tr[x][i]].insert(b.tr[y][i]);\n                qx.push(a.tr[x][i]);\n                qy.push(b.tr[y][i]);\n                qd.push(d+1);\n            }\n        }\n    }\n    return -1;\n}\nsuffix_auto_mata sufa(26),sufb(26);\nsubsequence_auto_mata seqa(26),seqb(26);\nchar str[N];\nvoid input(){\n    scanf(\" %s\",str);\n    for(int i=0;str[i];i++){\n        sufa.add(str[i]-'a');\n        seqa.add(str[i]-'a');\n    }\n    scanf(\" %s\",str);\n    for(int i=0;str[i];i++){\n        sufb.add(str[i]-'a');\n        seqb.add(str[i]-'a');\n    }\n}\nvoid ini(){\n}\nvoid solve(){\n    printf(\"%d\\n\",bfs(sufa,sufb));\n    printf(\"%d\\n\",bfs(sufa,seqb));\n    printf(\"%d\\n\",bfs(seqa,sufb));\n    printf(\"%d\\n\",bfs(seqa,seqb));\n}\nvoid output(){\n}\nvoid test(){\n    input();\n    ini();\n    solve();\n    output();\n}\nvoid all(){\n    file(\"4112\");\n    test();\n}\nint main(){\n    all();\n    return 0;\n}\n```\n\n\u7531\u4e8eOOP\u548cSTL\u559c\u95fb\u4e50\u89c1\u7684\u5e38\u6570\uff0c\u518d\u52a0\u4e0a\u5199\u6cd5\u5404\u79cd\u66b4\u529b\uff0c\u4e0d\u6263\u7ec6\u8282\uff0c\u6240\u4ee5\u8981\u5f00O2\u624d\u80fd\u8fc7\u3002\u4f46\u4e8b\u5b9e\u4e0a\u4e0d\u50cf\u6211\u8fd9\u4e48\u5199\u5f97\u4e11\u5e94\u8be5\u662f\u4e0d\u4f1a\u6bd4\u666e\u901a\u505a\u6cd5\u6162\u591a\u5c11\u7684\u3002",
        "postTime": 1552480878,
        "uid": 81705,
        "name": "\u5bc6\u671f\u671b",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4112 \u3010[HEOI2015]\u6700\u77ed\u4e0d\u516c\u5171\u5b50\u4e32\u3011"
    },
    {
        "content": "\u7ed9\u5b9a\u4e24\u4e2a\u957f\u5ea6\u5206\u522b\u4e3a $n,m$ \u7684\u4e32 $A,B$\uff0c\u6c42\uff1a\n\n(1) $A$ \u7684\u4e00\u4e2a\u6700\u77ed\u5b50\u4e32\uff0c\u5b83\u4e0d\u662f $B$ \u7684\u5b50\u4e32\n\n(2) $A$ \u7684\u4e00\u4e2a\u6700\u77ed\u5b50\u4e32\uff0c\u5b83\u4e0d\u662f $B$ \u7684\u5b50\u5e8f\u5217\n\n(3) $A$ \u7684\u4e00\u4e2a\u6700\u77ed\u5b50\u5e8f\u5217\uff0c\u5b83\u4e0d\u662f $B$ \u7684\u5b50\u4e32\n\n(4) $A$ \u7684\u4e00\u4e2a\u6700\u77ed\u5b50\u5e8f\u5217\uff0c\u5b83\u4e0d\u662f $B$ \u7684\u5b50\u5e8f\u5217\n\n\u8f93\u51fa\u56db\u4e2a\u7b54\u6848\u7684\u957f\u5ea6\u3002$n, m \\leq 2 \\times 10^3$\n\n-------------\n\n\u662f\u4e0d\u662f\u6700\u8fd1 $\\texttt{steam}$ \u6b63\u5728\u6253\u5305\u6240\u4ee5\u6211\u4e5f\u505a\u4e86\u8fd9\u4e48\u4e00\u4e2a\u6253\u5305\u9898...\n\n\u56db\u4e2a\u95ee\u9898\u662f\u56db\u79cd\u89e3\u6cd5\uff0c\u4e5f\u5c31\u662f\u5178\u578b\u7684 $\\text{4 in 1}$\n\n\u63a5\u4e0b\u6765\u6765\u5206\u6790\u8fd9\u56db\u79cd\u60c5\u51b5\u600e\u4e48\u5904\u7406\u3002\n\n\u524d\u7f6e\u6280\u80fd\uff1a **\u540e\u7f00\u81ea\u52a8\u673a**\u3001**\u5e8f\u5217\u81ea\u52a8\u673a**\n\n--------------------------\n\n### \u60c5\u51b5(1)\n\n\u76f8\u5f53\u4e8e\u6c42 $A, B$ \u4e32\u540e\u7f00\u7684 $\\text{lcp}$ \u957f\u5ea6 $+1$\u3002\u4e5f\u53ef\u4ee5\u770b\u505a\u662f\u4e24\u4e2a\u524d\u7f00\u7684\u6700\u957f\u516c\u5171\u540e\u7f00\u3002\u56e0\u4e3a\u540e\u7f00\u7684\u524d\u7f00\u662f\u5b50\u4e32\u561b\u3002\n\n\u8fd9\u6709\u5f88\u591a\u89e3\u6cd5\uff0c\u8fd9\u91cc\u5c31\u76f4\u63a5\u7528DP\u505a\u3002\n\n\u8bb0 $f(i,j)$ \u8868\u793a \u5339\u914d\u5230 $A$ \u4e32\u7684\u7b2c $i$ \u4e2a\uff0c$B$ \u4e32\u7684\u7b2c $j$ \u4e2a\uff08\u90fd\u4ece\u540e\u5f80\u524d\u6570\uff09\u7684\u6700\u957f\u516c\u5171\u540e\u7f00\n\n\u9006\u5e8f\u679a\u4e3e $a_i, b_j$\uff0c\u5982\u679c $a_i = b_j$\uff0c\u8868\u793a\u4e24\u4e2a\u4e32\u7684\u6700\u957f\u516c\u5171\u540e\u7f00\u53ef\u4ee5\u518d\u540c\u65f6\u5f80\u524d\u5f80\u524d\u6269\u5c55 $1$ \u4f4d\uff0c\u5373\n$$f(i,j)=f(i+1,j+1)+1$$\n\u63a5\u4e0b\u6765\u679a\u4e3e\u6bcf\u4e00\u4e2a\u524d\u7f00 $a_i,b_j$\uff0c\u7136\u540e\u6c42\u51fa\u4e24\u4e2a\u524d\u7f00\u7684\u6700\u957f\u516c\u5171\u540e\u7f00\uff0c\u5373\uff1a\n$$mx=\\max(mx,f(i,j))$$\n\u5982\u679c\u5339\u914d\u4e0a\u4e86($mx \\neq n-i+1$)\uff0c\u90a3\u4e48\u5c31\u7528 $mx$ \u66f4\u65b0\u7b54\u6848\u3002\n$$ans=\\min(mx,ans)$$\n\u590d\u6742\u5ea6 $O(nm)$\n\n```c++\nvoid Subtask() { \n    static int F[MaxN][MaxN];\n    for(int i = N; i > 0; i--) \t\n        for(int j = M; j > 0; j--) \n            if(S[i] == _S[j]) F[i][j] = F[i + 1][j + 1] + 1; \n    int Ans = Inf;\n    for(int i = 1; i <= N; i++) {\n        int _Ans = 0;\n        #define Max(A, B) std::max(A, B)\n        #define Min(A, B) std::min(A, B) \n        for(int j = 1; j <= M; j++) _Ans = Max(_Ans, F[i][j]);\n        if(_Ans ^ (N - i + 1)) Ans = Min(Ans, _Ans + 1);\n    }\n    if(Ans == Inf) Ans = -1;\n    printf(\"%d\\n\", Ans);\n}\n```\n\n\n\n---------------\n\n### \u60c5\u51b5(2)\n\n\u5bf9 $B$ \u4e32\u5efa\u7acb **\u5e8f\u5217\u81ea\u52a8\u673a**\uff0c\u5728\u5e8f\u5217\u81ea\u52a8\u673a\u4e0a\u8d2a\u5fc3\u3002\n\n\u5efa\u7acb\u5e8f\u5217\u81ea\u52a8\u673a\uff1a\n\n```c++\nvoid Init() {\n    int A[MaxN];\n    for(int i = 0; i < 26; i++) A[i] = N + 1;\n    for(int i = M; i >= 0; i--) {\n        int Ch = _S[i] - 'a';\n        for(int j = 0; j < 26; j++) Next[j][i] = A[j];\n        A[Ch] = i;\n    } \n}\n```\n\n\n\n\u600e\u4e48\u8d2a\u5fc3\u5462\uff1f\u9996\u5148 $O(n)$ \u5730\u679a\u4e3e $A$ \u7684\u6240\u6709\u524d\u7f00\uff0c\u7136\u540e\u679a\u4e3e\u8fd9\u4e9b\u524d\u7f00\u7684\u6240\u6709\u540e\u7f00\u3002\n\n\u679a\u4e3e\u524d\u7f00\u7684\u540e\u7f00\u65f6\uff0c\u5c06\u8fd9\u4e9b\u503c\u653e\u5230\u5e8f\u5217\u81ea\u52a8\u673a\u4e0a\u8dd1 \u3002\n\n\u8bb0\u5f55\u4e00\u4e2a\u503c $now$\uff0c\u5f53\u679a\u4e3e\u5230 $a_j$ \u65f6\uff0c\u8f6c\u79fb $now=next(a_j,now)$\n\n\u4e00\u65e6\u51fa\u73b0\u5931\u914d\uff08$now > n$\uff09\uff0c\u5c31\u53ef\u4ee5\u7528\u5b50\u4e32\u7684\u957f\u5ea6\u6765\u66f4\u65b0\u7b54\u6848\u4e86\u3002\u5373\uff1a\n$$ans=\\min(ans,j-i+1)$$\n\u590d\u6742\u5ea6 $O(n^2)$\n\n```c++\nvoid _Subtask() {\n        Init();\n        int Ans = Inf;\n        for(int i = 1; i <= N; i++) {\n            int Now = 0;\n            for(int j = i; j <= N; j++) {\n                int Ch = S[j] - 'a';\n                Now = Next[Ch][Now];\n                if(Now > N) {\n                    Ans = Min(Ans, j - i + 1);\n                    break;\n                }\n            }\n        }\n        if(Ans == Inf) Ans = -1; \n        printf(\"%d\\n\", Ans);\n    }\n```\n\n----------------\n\n### \u60c5\u51b5(3)\n\n\u5bf9 $B$ \u4e32\u5efa\u7acb **\u540e\u7f00\u81ea\u52a8\u673a**\uff0c\u7136\u540e\u5728\u540e\u7f00\u81ea\u52a8\u673a\u4e0aDP\u3002\n\n\u539f\u7406\u548c $(1)$ \u4e00\u6837\uff0c\u627e\u51fa\u6700\u957f\u7684\u53ef\u5339\u914d\u90e8\u5206\u5e76\u4f7f\u5b83\u5c3d\u91cf\u77ed\uff0c\u90a3\u4e48\u7b54\u6848\u4e3a\u957f\u5ea6 $+1$\n\n\u540e\u7f00\u81ea\u52a8\u673a\uff1a\n\n```c++\nvoid Insert(char C) {\n    int Ch = C - 'a';\n    int Np = ++Tot, P = Lst; Lst = Np;\n    Len[Np] = Len[P] + 1;\n    while(P && !Tr[Ch][P]) Tr[Ch][P] = Np, P = Fa[P];\n    if(!P) Fa[Np] = 1;\n    else {\n        int Q = Tr[Ch][P];\n        if(Len[Q] == Len[P] + 1) Fa[Np] = Q;\n        else {\n            int Nq = ++Tot; Fa[Nq] = Fa[Q]; Len[Nq] = Len[P] + 1;\n            for(int i = 0; i < 26; i++) Tr[i][Nq] = Tr[i][Q];\n            Fa[Q] = Fa[Np] = Nq;\n            while(P && Tr[Ch][P] == Q) Tr[Ch][P] = Nq, P = Fa[P];\n        } \n    }\n}\n```\n\n\u8bb0 $f(i)$ \u8868\u793a\u5728\u81ea\u52a8\u673a\u4e0a\u8dd1\u5230\u4f4d\u7f6e $i$ \u7684\u6700\u77ed\u957f\u5ea6\u662f\u591a\u5c11\u3002\n\n\u90a3\u4e48\u6bcf\u6b21\u679a\u4e3e $A$ \u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\uff0c\u5e76\u4e14\u904d\u5386\u6574\u4e2a\u540e\u7f00\u81ea\u52a8\u673a\u53bb\u8df3\u3002\n\n\u5047\u8bbe $i$ \u679a\u4e3e $A$ \u4e32\uff0c$j$ \u679a\u4e3e\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u8bb0\u5f55 $now=tr(j,a_i)$\n\n\u5982\u679c $now \\neq 0$\uff0c\u8868\u793a\u53ef\u4ee5\u7ee7\u7eed\u5f80\u4e0b\u5339\u914d\uff0c\u66f4\u65b0 $f$\uff1a\n$$f(now)=\\min(f(now),f(j) + 1)$$\n\u5426\u5219\uff0c\u8868\u793a\u5931\u914d\u4e86\uff0c\u66f4\u65b0\u7b54\u6848\uff1a\n$$ans=\\min(ans,f(j)+1)$$\n\u590d\u6742\u5ea6 $O(n \\times tot)$\uff0c\u5176\u4e2d $tot$ \u662f\u540e\u7f00\u81ea\u52a8\u673a\u7684\u8282\u70b9\u6570\u3002\n\n```c++\nvoid __Subtask() {\n    static int F[MaxN]; memset(F, 0x3f, sizeof(F)); F[1] = 0;\n    int Ans = Inf;\n    for(int i = 1; i <= N; i++) {\n        for(int j = 1; j <= Tot; j++) {\n            int Ch = S[i] - 'a';\n            int Now = Tr[Ch][j];\n            if(!Now) Ans = Min(Ans, F[j] + 1);\n            else F[Now] = Min(F[Now], F[j] + 1);\n        }\n    }\n    if(Ans == Inf) Ans = -1;\n    printf(\"%d\\n\", Ans);\n}\n```\n\n----------------------\n\n### \u60c5\u51b5(4)\n\n\u5bf9 $B$ \u4e32\u5efa\u7acb **\u5e8f\u5217\u81ea\u52a8\u673a**\uff0c\u7136\u540e\u5728\u5e8f\u5217\u81ea\u52a8\u673a\u4e0aDP\u3002\n\n\u539f\u7406\u548c $(1)$\uff0c$(3)$ \u4e00\u6837\uff0c\u505a\u6cd5\u548c $(3)$ \u51e0\u4e4e\u4e00\u6a21\u4e00\u6837\uff0c\u9664\u4e86\u628a\u540e\u7f00\u81ea\u52a8\u673a\u6539\u6210\u5e8f\u5217\u81ea\u52a8\u673a\u4ee5\u5916\u3002\n\n\u4e0d\u518d\u8d58\u8ff0\u3002\n\n```c++\nvoid ___Subtask() {\n    static int F[MaxN]; memset(F, 0x3f, sizeof(F)); F[0] = 0;\n    int Inf = F[1];\n    int Ans = Inf;\n    for(int i = 1; i <= N; i++) {\n        for(int j = 0; j <= M; j++) {\n            int Ch = S[i] - 'a';\n            int Now = Next[Ch][j];\n            if(Now > N) Ans = Min(Ans, F[j] + 1);\n            else F[Now] = Min(F[Now], F[j] + 1);\n        }\n    }\n    if(Ans == Inf) Ans = -1;\n    printf(\"%d\\n\", Ans);\n}\n```\n\n---------------\n\n### \u9644\u5f55\uff1a\n\n[\u6d1b\u8c37 P 4112 \u6700\u77ed\u4e0d\u516c\u5171\u5b50\u4e32](https://www.luogu.org/problemnew/show/P4112)\n\n[My blog](http://xiaoyao24256.com/index.php/archives/301/)",
        "postTime": 1545785991,
        "uid": 17757,
        "name": "WhiteEurya",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P4112 \u3010[HEOI2015]\u6700\u77ed\u4e0d\u516c\u5171\u5b50\u4e32\u3011"
    },
    {
        "content": "\u672c\u9898\u9898\u610f\u7ed9\u4f60\u4e24\u4e2a\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u7684\u4e32 $A$  \u548c $B$\uff0c\u6c42\uff1a\n\n1. $A$ \u7684\u4e00\u4e2a\u6700\u77ed\u7684\u5b50\u4e32\uff0c\u5b83\u4e0d\u662f $B$ \u7684\u5b50\u4e32\uff1b\n\n2. $A$ \u7684\u4e00\u4e2a\u6700\u77ed\u7684\u5b50\u4e32\uff0c\u5b83\u4e0d\u662f $B$ \u7684\u5b50\u5e8f\u5217\uff1b\n\n3. $A$ \u7684\u4e00\u4e2a\u6700\u77ed\u7684\u5b50\u5e8f\u5217\uff0c\u5b83\u4e0d\u662f $B$ \u7684\u5b50\u4e32\uff1b\n\n4. $A$ \u7684\u4e00\u4e2a\u6700\u77ed\u7684\u5b50\u5e8f\u5217\uff0c\u5b83\u4e0d\u662f $B$ \u7684\u5b50\u5e8f\u5217\u3002\n\n$1\\le\\left\\vert A \\right\\vert,\\left\\vert B \\right\\vert\\le2000$\n\n\n\u8fd9\u9898\u7684 $(1)$ \u548c $(3)$ \u4e24\u95ee\u9700\u8981\u540e\u7f00\u81ea\u52a8\u673a\uff0c\u800c\u4e14\u505a\u6cd5\u7c7b\u4f3c\uff0c\u5728\u8fd9\u91cc\u53ea\u8bb2\u89e3 $(2)$ \u548c $(4)$ \u4e24\u95ee\u3002\n\n$(2)$ \u6bd4\u8f83\u7b80\u5355\uff0c\u679a\u4e3e $A$ \u7684\u5b50\u4e32\u8f93\u5165\u8fdb $B$ \u7684\u5e8f\u5217\u81ea\u52a8\u673a\uff0c\u82e5\u4e0d\u63a5\u53d7\u5219\u8ba1\u5165\u7b54\u6848\u3002\n\n(4) \u9700\u8981 $DP$\u3002\u4ee4 $f(i,j)$ \u8868\u793a\u5728 $A$ \u7684\u5e8f\u5217\u81ea\u52a8\u673a\u4e2d\u5904\u4e8e\u72b6\u6001,\u5728 $B$ \u7684\u5e8f\u5217\u81ea\u52a8\u673a\u4e2d\u5904\u4e8e\u72b6\u6001 $i$\uff0c\u9700\u8981\u518d\u6dfb\u52a0\u591a\u5c11\u4e2a\u5b57\u7b26\u80fd\u591f\u4e0d\u662f\u516c\u5171\u5b50\u5e8f\u5217\u3002\n\n$f(i,null) = 0$\n\n$f(i,j) = \\frac{min}{\\vartheta(i,c)\\ne null} f(\\vartheta_A(i,c),\\vartheta_B(j,c))+1$\n\nac\u4ee3\u7801\uff1a\n```cpp\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n\nusing namespace std;\n\nconst int N = 2005;\n\nchar s[N], t[N];\nint na[N][26], nb[N][26], nxt[26];\nint n, m, a[N], b[N], tot = 1, p = 1, f[N][N << 1];\n\nstruct SAM {\n  int par, ch[26], len;\n} sam[N << 1];\n\nvoid insert(int x) {\n  int np = ++tot;  //\u65b0\u8282\u70b9\n  sam[np].len = sam[p].len + 1;\n  while (p && !sam[p].ch[x]) {\n    sam[p].ch[x] = np;\n    p = sam[p].par;\n  }\n  if (p == 0)\n    sam[np].par = 1;\n  else {\n    int q = sam[p].ch[x];\n    if (sam[q].len == sam[p].len + 1)\n      sam[np].par = q;\n    else {\n      int nq = ++tot;\n      sam[nq].len = sam[p].len + 1;\n      memcpy(sam[nq].ch, sam[q].ch, sizeof(sam[q].ch));\n      sam[nq].par = sam[q].par;\n      sam[q].par = sam[np].par = nq;\n      while (p && sam[p].ch[x] == q) {\n        sam[p].ch[x] = nq;\n        p = sam[p].par;\n      }\n    }\n  }\n  p = np;\n}\n\nint main() {\n  scanf(\"%s%s\", s + 1, t + 1);\n\n  n = strlen(s + 1);\n  m = strlen(t + 1);\n\n  for (int i = 1; i <= n; ++i) a[i] = s[i] - 'a';\n  for (int i = 1; i <= m; ++i) b[i] = t[i] - 'a';\n\n  for (int i = 1; i <= m; ++i) insert(b[i]);\n\n  // nxt[S[i]]<-i\n  for (int i = 0; i < 26; ++i) nxt[i] = n + 1;\n  for (int i = n; i >= 0; --i) {\n    memcpy(na[i], nxt, sizeof(nxt));\n    nxt[a[i]] = i;\n  }\n\n  for (int i = 0; i < 26; ++i) nxt[i] = m + 1;\n  for (int i = m; i >= 0; --i) {\n    memcpy(nb[i], nxt, sizeof(nxt));\n    nxt[b[i]] = i;\n  }\n\n  //\u56db\u79cd\u60c5\u51b5\u8ba1\u7b97\u7b54\u6848\n  // 1\n  int ans = N;\n  for (int l = 1; l <= n; ++l) {\n    for (int r = l, u = 1; r <= n; ++r) {\n      u = sam[u].ch[a[r]];\n      if (!u) {\n        ans = min(ans, r - l + 1);\n        break;\n      }\n    }\n  }\n\n  printf(\"%d\\n\", ans == N ? -1 : ans);\n\n  // 2\n  ans = N;\n\n  for (int l = 1; l <= n; ++l) {\n    for (int r = l, u = 0; r <= n; ++r) {\n      u = nb[u][a[r]];\n      if (u == m + 1) {\n        ans = min(ans, r - l + 1);\n        break;\n      }\n    }\n  }\n\n  printf(\"%d\\n\", ans == N ? -1 : ans);\n\n  // 3\n  for (int i = n; i >= 0; --i) {\n    for (int j = 1; j <= tot; ++j) {\n      f[i][j] = N;\n      for (int c = 0; c < 26; ++c) {\n        int u = na[i][c];\n        int v = sam[j].ch[c];\n        if (u <= n) f[i][j] = min(f[i][j], f[u][v] + 1);\n      }\n    }\n  }\n\n  printf(\"%d\\n\", f[0][1] == N ? -1 : f[0][1]);\n\n  // 4\n  memset(f, 0, sizeof(f));\n\n  for (int i = n; i >= 0; --i) {\n    for (int j = 0; j <= m; ++j) {\n      f[i][j] = N;\n      for (int c = 0; c < 26; ++c) {\n        int u = na[i][c];\n        int v = nb[j][c];\n        if (u <= n) f[i][j] = min(f[i][j], f[u][v] + 1);\n      }\n    }\n  }\n\n  printf(\"%d\\n\", f[0][0] == N ? -1 : f[0][0]);\n\n  return 0;\n}\n```\n\n\n",
        "postTime": 1631797168,
        "uid": 380660,
        "name": "Liuboxuan090808",
        "ccfLevel": 0,
        "title": "P4112\u9898\u89e3"
    },
    {
        "content": "## \u3010SAM & \u5b50\u5e8f\u5217\u81ea\u52a8\u673a\u3011\u3010P4112\u3011 [HEOI2015]\u6700\u77ed\u4e0d\u516c\u5171\u5b50\u4e32\n\n### Analysis\n\n\u4e00\u9053\u975e\u5e38\u65e0\u804a\u7684\u56db\u5408\u4e00\u9898\u3002\n\n\u524d\u7f6e\u77e5\u8bc6\u662f SAM \u548c [\u5b50\u5e8f\u5217\u81ea\u52a8\u673a](https://www.luogu.com.cn/problem/P5826)\u3002\n\n\u4ee5\u4e0b\u7ea6\u5b9a $a$\uff0c$b$ \u4e32\u957f\u5747\u4e3a $n$\uff0c\u5b57\u7b26\u96c6\u5927\u5c0f\u4e3a $t$\u3002\n\n#### \u95ee\u9898 1\n\n\u9996\u5148\u5bf9 $b$ \u5efa\u51fa SAM\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 $s$\uff0c\u5982\u679c\u628a\u5b83\u653e\u5728\u8fd9\u4e2a SAM \u4e0a\u8dd1\uff0c\u6ca1\u6709\u8dd1\u5230\u65e0\u6cd5\u8f6c\u79fb\u7684\u4f4d\u7f6e\uff0c\u5219 $s$ \u662f $b$ \u7684\u5b50\u4e32\uff0c\u5426\u5219\u4e0d\u662f\u3002\n\n\u6ce8\u610f\u5230\u4e32\u957f\u975e\u5e38\u5c0f\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u679a\u4e3e $a$ \u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\uff0c\u7136\u540e\u9010\u4e2a\u52a0\u5165\u5b57\u7b26\u5e76\u5728 SAM \u4e0a\u8fdb\u884c\u8f6c\u79fb\uff0c\u5982\u679c\u52a0\u5165\u4e00\u4e2a\u5b57\u7b26\u65f6\u65e0\u6cd5\u8f6c\u79fb\uff0c\u90a3\u4e48\u663e\u7136\u5f53\u524d\u5b50\u4e32\u5c31\u662f\u4e00\u4e2a\u7b26\u5408\u8981\u6c42\u7684\u5b50\u4e32\u3002\u6700\u540e\u5bf9\u6240\u6709\u7684\u8d77\u59cb\u4f4d\u7f6e\u7684\u60c5\u51b5\u7684\u7b54\u6848\u53d6 min \u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2)$\u3002\n\n#### \u95ee\u9898 2\n\n\u5bf9 $b$ \u5efa\u51fa\u5b50\u5e8f\u5217\u81ea\u52a8\u673a\uff0c\u7528\u4e0e\u95ee\u9898 1 \u76f8\u540c\u7684\u505a\u6cd5\u679a\u4e3e $a$ \u7684\u5b50\u4e32\u7684\u8d77\u59cb\u4f4d\u7f6e\u5e76\u8ba1\u7b97\u7b54\u6848\u5373\u53ef\u3002\u53ea\u4e0d\u8fc7\u8fd9\u6b21\u65f6\u653e\u5728\u5b50\u5e8f\u5217\u81ea\u52a8\u673a\u4e0a\u8dd1\u3002\n\n\u8fd9\u91cc\u7684\u5b57\u7b26\u96c6\u5f88\u5c0f\uff0c\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u6784\u9020\u5b50\u5e8f\u5217\u81ea\u52a8\u673a\u800c\u65e0\u9700\u4f7f\u7528\u6a21\u677f\u9898\u7684\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u3002\n\n\u6784\u9020\u81ea\u52a8\u673a\u7684\u590d\u6742\u5ea6\u4e3a $O(nt)$\uff0c\u5339\u914d\u590d\u6742\u5ea6\u4e3a $O(n^2)$\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(nt + n^2)$\u3002\n\n#### \u95ee\u9898 3\n\n\u5bf9 $a$ \u5efa\u51fa\u5b50\u5e8f\u5217\u81ea\u52a8\u673a\u3002\u5728\u8fd9\u4e2a\u81ea\u52a8\u673a\u4e0a\u904d\u5386\u6240\u6709\u7684\u8def\u5f84\u5373\u53ef\u904d\u5386 $a$ \u7684\u6240\u6709\u5b50\u5e8f\u5217\u3002\n\n\u7136\u540e\u53ef\u4ee5\u904d\u5386 $a$ \u7684\u6240\u6709\u72b6\u6001\uff0c\u540c\u65f6\u7ef4\u62a4\u5f53\u524d\u72b6\u6001\u5728 $b$ \u7684 SAM \u4e0a\u7684\u5bf9\u5e94\u72b6\u6001\u3002\u663e\u7136\u67d0\u6b21\u8f6c\u79fb\u5982\u679c\u8f6c\u79fb\u51fa\u4e86\u81ea\u52a8\u673a\uff0c\u90a3\u4e48 $a$ \u7684\u5f53\u524d\u72b6\u6001\u5c31\u662f\u4e00\u4e2a\u6ee1\u8db3\u8981\u6c42\u7684\u5b50\u5e8f\u5217\u3002\u8003\u8651\u5bf9\u4e8e $a$ \u7684\u5b50\u5e8f\u5217\u81ea\u52a8\u673a\u7684\u4e00\u4e2a\u72b6\u6001 $u$ \u548c $b$ \u7684 SAM \u7684\u4e00\u4e2a\u72b6\u6001 $v$\uff0c\u5982\u679c\u5339\u914d\u5230\u4e86 $(u, v)$ \u72b6\u6001\uff0c\u90a3\u4e48\u8be5\u72b6\u6001\u7ee7\u7eed\u8f6c\u79fb\u80fd\u589e\u52a0\u7684\u5b57\u7b26\u4e32\u957f\u5ea6\u662f\u786e\u5b9a\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a $(u, v)$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u5339\u914d\u5230 $(u, v)$ \u7684\u6700\u77ed\u5b57\u7b26\u4e32\u957f\u5ea6\u662f\u591a\u5c11\u3002\u8fd9\u4e2a\u95ee\u9898\u53ef\u4ee5 BFS \u89e3\u51b3\uff0c\u6bcf\u6b21\u53d6\u961f\u9996\uff0c\u5e76\u5c1d\u8bd5\u8f6c\u79fb\u6240\u6709\u7684\u5b57\u7b26\uff0c\u5982\u679c\u8f6c\u79fb\u540e\u7684\u72b6\u6001\u8fd8\u6ca1\u6709\u5165\u961f\uff0c\u5219\u538b\u5165\u961f\u5217\u5e76\u66f4\u65b0\u957f\u5ea6\u3002\u5982\u679c\u67d0\u4e2a\u8f6c\u79fb\u5728 $a$ \u4e0a\u5b58\u5728\u4f46\u5728 $b$ \u4e0a\u4e0d\u5b58\u5728\uff0c\u5219\u76f4\u63a5\u66f4\u65b0\u7b54\u6848\u5373\u53ef\u3002\n\n\u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\uff1aSAM \u4e2a\u5b50\u5e8f\u5217\u81ea\u52a8\u673a\u7684\u8282\u70b9\u6570\u5747\u4e3a $O(n)$\uff0c\u56e0\u6b64\u4e00\u5171\u6709 $O(n^2)$ \u4e2a\u72b6\u6001\u3002\u6bcf\u6b21\u8f6c\u79fb\u9700\u8981 $O(t)$ \u679a\u4e3e\u65b0\u52a0\u7684\u5b57\u7b26\uff0c\u56e0\u6b64\u603b\u590d\u6742\u5ea6 $O(n^2 t)$\u3002\n\n#### \u95ee\u9898 4\n\n\u5bf9 $b$ \u4e5f\u5efa\u51fa\u5b50\u5e8f\u5217\u81ea\u52a8\u673a\uff0c\u7136\u540e\u7528\u540c\u6837\u7684\u65b9\u5f0f\u8fdb\u884c bfs \u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2 t)$\u3002\n\n\u5982\u679c\u4ea4\u4e0a\u53bb\u4ee3\u7801 TLE/MLE \u4e86\u5f88\u591a\u70b9\uff0c\u6709\u53ef\u80fd\u662f\u56e0\u4e3a\u5728 bfs \u7684\u65f6\u5019\u6ca1\u6709\u8bb0\u5f55\u90a3\u4e9b\u72b6\u6001\u5df2\u7ecf\u7ecf\u8fc7\u4e86\u800c\u9020\u6210\u4e86 $O(n^4)$ \u7684\u65f6\u7a7a\u590d\u6742\u5ea6\u3002\n\n### Code\n\n```cpp\nnamespace Fusu {\n\nconst int maxt = 26;\nconst int maxn = 8005;\n\nvoid Init();\nvoid Ca1c();\nvoid Ca2c();\nvoid Ca3c();\nvoid Ca4c();\n\nvoid Main() {\n  Init();\n  Ca1c();\n  Ca2c();\n  Ca3c();\n  Ca4c();\n}\n\nnamespace SAM {\n\nstruct Node {\n  Node *fail;\n  int len;\n  std::map<char, Node*> trans;\n  bool vis[2005];\n};\nNode Mem[maxn], *pool = Mem;\ninline Node *New(const int x) {\n  auto u = pool++;\n  u->len = x;\n  return u;\n};\n\nvoid build(char *s, const int n, Node *&rt) {\n  auto lst = rt = New(0);\n  for (int i = 1, x = s[i] - 'a'; i <= n; x = s[++i] - 'a') {\n    auto p = lst, np = New(i);\n    lst = np;\n    while (p && (p->trans.count(x) == false)) {\n      p->trans[x] = np;\n      p = p->fail;\n    }\n    if (p == nullptr) {\n      np->fail = rt;\n    } else {\n      auto q = p->trans[x];\n      if (q->len == (p->len + 1)) {\n        np->fail = q;\n      } else {\n        auto nq = New(p->len + 1);\n        nq->trans = q->trans;\n        nq->fail = q->fail;\n        q->fail = np->fail = nq;\n        while (p && (p->trans[x] == q)) {\n          p->trans[x] = nq;\n          p = p->fail;\n        }\n      }\n    }\n  }\n}\n\n} // namespace SAM\nSAM::Node *ra, *rb;\n\nnamespace SQAM {\n\nvoid Build(int trans[][maxt], const char *const s, const int n) {\n  for (int i = n, x = s[i] - 'a', di = i - 1; i; x = s[i = di--] - 'a') {\n    for (int j = 0; j < maxt; ++j) {\n      trans[di][j] = trans[i][j];\n    }\n    trans[di][x] = i;\n  }\n}\n\n} // namespace SQAM\nint ta[maxn][maxt], tb[maxn][maxt];\n\nint n, m;\nchar s[maxn], t[maxn];\n\nvoid Init() {\n  n = qrs(s + 1);\n  m = qrs(t + 1);\n  SAM::build(t, m, rb);\n  SQAM::Build(ta, s, n);\n  SQAM::Build(tb, t, m);\n}\n\nvoid Ca1c() {\n  int ans = n + 1;\n  for (int i = 1; i <= n; ++i) {\n    auto u = rb;\n    for (int j = i, x = s[i] - 'a', len = 0; j <= n; x = s[++j] - 'a') if (++len < ans) {\n      if (u->trans.count(x) == false) {\n        ans = len;\n      } else {\n        u = u->trans[x];\n      }\n    } else {\n      break;\n    }\n  }\n  qw((ans == n + 1) ? -1 : ans, '\\n');\n}\n\nvoid Ca2c() {\n  int ans = n + 1;\n  for (int i = 1; i <= n; ++i) {\n    int u = 0;\n    for (int j = i, x = s[j] - 'a', len = 0; j <= n; x = s[++j] - 'a') if (++len < ans) {\n      if (tb[u][x] == 0) {\n        ans = len;\n      } else {\n        u = tb[u][x];\n      }\n    } else {\n      break;\n    }\n  }\n  qw((ans == n + 1) ? -1 : ans, '\\n');\n}\n\nstd::queue<std::pair<int, std::pair<int, SAM::Node*> > > Q;\nvoid Ca3c() {\n  int ans = -1;\n  Q.push({0, {0, rb}});\n  rb->vis[0] = true;\n  while (!Q.empty()) {\n    auto u = Q.front(); Q.pop();\n    int len = u.first + 1, sq = u.second.first;\n    auto ss = u.second.second;\n    bool flag = false;\n    for (int j = 0; j < maxt; ++j) if (ta[sq][j] != 0) {\n      if (ss->trans.count(j) == false) {\n        ans = len;\n        flag = true;\n        break;\n      } else if (ss->trans[j]->vis[ta[sq][j]] == false) {\n        ss->trans[j]->vis[ta[sq][j]] = true;\n        Q.push({len, {ta[sq][j], ss->trans[j]}});\n      }\n    }\n    if (flag) break;\n  }\n  qw(ans, '\\n');\n}\n\nstd::queue<std::pair<int, std::pair<int, int> > > QQ;\nbool vis[2005][2005];\nvoid Ca4c() {\n  int ans = -1;\n  QQ.push({0, {0, 0}});\n  vis[0][0] = true;\n  while (!QQ.empty()) {\n    auto x = QQ.front(); QQ.pop();\n    int len = x.first + 1, u = x.second.first, v = x.second.second;\n    bool flag = false;\n    for (int j = 0; j < maxt; ++j) if (ta[u][j]) {\n      if (tb[v][j]) {\n        bool &vv = vis[ta[u][j]][tb[v][j]];\n        if (vv == false) {\n          QQ.push({len, {ta[u][j], tb[v][j]}});\n          vv = true;\n        }\n      } else {\n        ans = len;\n        flag = true;\n        break;\n      }\n    }\n    if (flag) break;\n  }\n  qw(ans, '\\n');\n}\n\n} // namespace Fusu\n\n```\n\n\n\n",
        "postTime": 1587490135,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4112 \u3010[HEOI2015]\u6700\u77ed\u4e0d\u516c\u5171\u5b50\u4e32\u3011"
    }
]