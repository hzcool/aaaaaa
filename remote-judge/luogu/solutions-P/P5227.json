[
    {
        "content": "## Description\n\n\u7ed9\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\u3002\n\n\u5171 $k$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u7ed9\u51fa\u4e00\u4e2a\u8fb9\u96c6\u3002\u95ee\uff1a\u5220\u53bb\u8fb9\u96c6\u4e2d\u7684\u8fb9\u540e\uff0c\u6539\u56fe\u662f\u5426\u4e3a\u8fde\u901a\u56fe\u3002\u8be2\u95ee\u4e92\u76f8\u72ec\u7acb\u3002\n\n\u5141\u8bb8\u79bb\u7ebf\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1 \\leq n, k \\leq 10^5$\uff0c$1 \\leq m \\leq 2 \\times 10^5$\uff0c$1 \\leq c \\leq 4$\u3002  \n\u65f6\u7a7a\u9650\u5236\uff1a$2000 \\ \\mathrm{ms} / 256 \\ \\mathrm{MiB}$\n\n## Solution\n\n\u4efb\u610f\u5220\u8fb9\u663e\u7136\u662f\u4e0d\u597d\u505a\u7684\uff0c\u6211\u4eec\u8fd8\u662f\u8003\u8651\u628a\u5220\u8fb9\u8f6c\u5316\u4e3a\u52a0\u8fb9\u3002\n\n\u6211\u4eec\u5c06\u8be2\u95ee\u7684\u5e8f\u5217\u770b\u6210\u4e00\u4e2a\u65f6\u95f4\u8f74\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff1a\u6bcf\u6761\u8fb9\u4f1a\u5728\u82e5\u5e72\u4e2a\u65f6\u95f4\u533a\u95f4\u5185\u51fa\u73b0\u3002\n\n\u5177\u4f53\u5730\uff0c\u6211\u4eec\u8003\u8651\u4efb\u610f\u4e00\u6761\u8fb9 $x$\uff0c\u8bbe $x$ \u8fb9\u88ab\u5220\u9664 $w$ \u6b21\uff0c\u5220\u9664\u7684\u4f4d\u7f6e\u5206\u522b\u662f $P_1,P_2,...,P_w$\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u89c6\u4e3a\uff1a$x$ \u8fb9\u5728\u65f6\u95f4\u533a\u95f4 $[1,P_1-1],[P_1+1,P_2-1],...,[P_w+1,k]$ \u4e2d\u51fa\u73b0\u3002\n\n\u50cf\u8fd9\u79cd \" \u64cd\u4f5c\u5728\u82e5\u5e72\u4e2a\u65f6\u95f4\u533a\u95f4\u5185\u6709\u6548 \" \u7684\u95ee\u9898\uff0c\u6070\u6070\u662f\u7ebf\u6bb5\u6811\u5206\u6cbb\u6613\u4e8e\u89e3\u51b3\u7684\u3002\n\n\u79bb\u7ebf\u5904\u7406\u51fa\u6bcf\u6761\u8fb9\u88ab\u5220\u9664\u7684\u4f4d\u7f6e\uff0c\u89e3\u51b3\u8fd9\u4e2a\u53ef\u4ee5\u7528 $m$ \u4e2a `std::vector` \u6765\u89e3\u51b3\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u5c06\u5176\u6302\u5728 \" \u8be5\u8fb9\u51fa\u73b0\u7684\u65f6\u95f4\u533a\u95f4\u5bf9\u5e94\u7684\u7ebf\u6bb5\u6811\u8282\u70b9 \" \u7684 `std::vector` \u4e0a\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u8dd1\u4e00\u8fb9\u6574\u68f5\u7ebf\u6bb5\u6811\uff0c\u8fdb\u884c\u76f8\u5e94\u7684\u64cd\u4f5c\u3002\u64cd\u4f5c\u7684\u8fc7\u7a0b\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 **\" \u53ef\u64a4\u9500\u5e76\u67e5\u96c6 \"** \u7ef4\u62a4\u3002\u4e3a\u4e86\u4e0d\u7834\u574f\u5e76\u67e5\u96c6\u5f62\u6001\uff0c\u4f18\u5316\u9009\u62e9\u4f7f\u7528 **\" \u6309\u79e9\u5408\u5e76 \"**\u3002\n\n\u518d\u5728\u5e76\u67e5\u96c6\u4e0a\u7ef4\u62a4\u4e00\u4e0b **\" \u5f53\u524d\u8fde\u901a\u5757\u5927\u5c0f\uff08$\\mathrm{size}$\uff09\"**\uff0c\u5bf9\u4e8e\u4efb\u610f\u52a0\u8fdb\u53bb\u7684\u8fb9\uff0c\u82e5\u52a0\u8fb9\u4e4b\u540e\u7684\u8fde\u901a\u5757\u5927\u5c0f\u4e3a $n$\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u56fe\u4e3a\u8fde\u901a\u56fe\uff08\u5426\u5219\u8fd8\u6709 $n-\\mathrm{size}$ \u4e2a\u8282\u70b9\u4e0d\u5728\u5f53\u524d\u8fde\u901a\u5757\u4e2d\uff09\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(kc \\log k\\log n)$\uff0c[\u8bc4\u6d4b\u94fe\u63a5](https://www.luogu.com.cn/record/31558132)\u3002\n\n## Code\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <vector>\n#include <stack>\n\n#define RI register int\n\nusing namespace std;\n\nnamespace IO {\n\tstatic char buf[1 << 20], *fs, *ft;\n\tinline char gc() {\n\t    if (fs == ft) {\n\t        ft = (fs = buf) + fread(buf, 1, 1 << 20, stdin);\n\t\n\t        if (fs == ft)\n\t            return EOF;\n\t    }\n\t\n\t    return *fs++;\n\t}\n\t#define gc() getchar()\n\tinline int read() {\n\t    int x = 0, f = 1;\n\t    char s = gc();\n\t\n\t    while (s < '0' || s > '9') {\n\t        if (s == '-')\n\t            f = -f;\n\t\n\t        s = gc();\n\t    }\n\t\n\t    while (s >= '0' && s <= '9') {\n\t        x = x * 10 + s - '0';\n\t        s = gc();\n\t    }\n\t\n\t    return x * f;\n\t}\n} using IO::read;\n\nconst int N = 100100, M = 200100;\n\nint n, m;\n\nint a[M], b[M];\n\nint k;\n\nvector<int> pos[M];\n\nstruct SegmentTree {\n    int l, r;\n    vector<int> e;\n} t[N * 4];\n\nvoid build(int p, int l, int r) {\n    t[p].l = l, t[p].r = r;\n\n    if (l == r)\n        return;\n\n    int mid = (l + r) / 2;\n    build(p * 2, l, mid), build(p * 2 + 1, mid + 1, r);\n}\n\nvoid insert(int p, int l, int r, int x) {\n    if (l <= t[p].l && t[p].r <= r) {\n        t[p].e.push_back(x);\n        return;\n    }\n\n    int mid = (t[p].l + t[p].r) / 2;\n\n    if (l <= mid)\n        insert(p * 2, l, r, x);\n\n    if (mid < r)\n        insert(p * 2 + 1, l, r, x);\n}\n\nint fa[N], size[N], d[N];\n\nint get(int x) {\n    while (fa[x] != x)\n        x = fa[x];\n\n    return x;\n}\n\nstruct Node {\n    int x, y, z;\n    Node(int v1, int v2, int v3): x(v1), y(v2), z(v3) {}\n};\n\nstack<Node> s;\n\nvoid solve(int x, bool flag) {\n    int ori = s.size();\n\n    for (RI i = 0; i < (int)t[x].e.size(); i++) {\n        int u = a[t[x].e[i]], v = b[t[x].e[i]];\n        int p = get(u), q = get(v);\n\n        if (p == q)\n            continue;\n\n        if (d[p] < d[q])\n            swap(p, q);\n\n        s.push((Node){ q, d[p] == d[q], size[q] });\n\n        fa[q] = p, d[p] += d[p] == d[q], size[p] += size[q];\n\n        if (size[p] == n)\n            flag = true;\n    }\n\n    if (t[x].l == t[x].r)\n        puts(flag ? \"Connected\" : \"Disconnected\");\n    else\n        solve(x * 2, flag), solve(x * 2 + 1, flag);\n\n    while (s.size() > ori) {\n        Node res = s.top();\n        s.pop();\n        d[fa[res.x]] -= res.y, size[fa[res.x]] -= res.z, fa[res.x] = res.x;\n    }\n}\n\nint main() {\n    n = read(), m = read();\n\n    for (RI i = 1; i <= m; i++)\n        a[i] = read(), b[i] = read();\n\n    k = read();\n\n    for (RI i = 1; i <= m; i++)\n        pos[i].push_back(0);\n\n    for (RI i = 1; i <= k; i++)\n        for (RI c = read(); c; c--)\n            pos[read()].push_back(i);\n\n    for (RI i = 1; i <= m; i++)\n        pos[i].push_back(k + 1);\n\n    build(1, 1, k);\n\n    for (RI i = 1; i <= m; i++)\n        for (RI j = 1; j < (int)pos[i].size(); j++)\n            if (pos[i][j - 1] + 1 <= pos[i][j] - 1)\n                insert(1, pos[i][j - 1] + 1, pos[i][j] - 1, i);\n\n    for (RI i = 1; i <= n; i++)\n        fa[i] = i, size[i] = 1, d[i] = 1;\n\n    solve(1, false);\n\n    return 0;\n}\n```",
        "postTime": 1583742446,
        "uid": 129578,
        "name": "Calculatelove",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5227 \u3010[AHOI2013] \u8fde\u901a\u56fe\u3011"
    },
    {
        "content": "\u795e\u4ed9\u54c8\u5e0c\u9898\uff0c\u590d\u6742\u5ea6 $O(k\\times \\min(2^c,\\log n)+n+m)$\uff0c\u76ee\u524d\u4f60\u8c37\u6700\u4f18\u89e3\u3002\n\n\u524d\u7f6e\u5b9a\u4e49\uff1a\u975e\u6811\u8fb9\u7684\u8986\u76d6\u6811\u8fb9\u6307\u7684\u662f\u975e\u6811\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5728\u6811\u4e0a\u7684\u6700\u77ed\u8def\u8986\u76d6\u7684\u8fb9\u3002\u8bb0 xor \u4e3a $\\oplus$\u3002\n\n\u8003\u8651\u7ed9\u975e\u6811\u8fb9\u4e00\u4e2a\u968f\u673a\u6743\u503c\uff0c\u800c\u6811\u8fb9\u7684\u6743\u503c\u4e3a\u6240\u6709\u8986\u76d6\u5176\u7684\u975e\u6811\u8fb9\u7684 $\\oplus$\uff0c\u5219\u5220\u8fb9\u4e0d\u8fde\u901a\u5f53\u4e14\u4ec5\u5f53\u5220\u9664\u7684\u8fb9\u96c6\u7684\u4e00\u4e2a\u5b50\u96c6 $\\oplus$ \u662f $0$\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u5728 $c$ \u5c0f\u7684\u65f6\u5019\u679a\u4e3e\u5b50\u96c6\u3001$c$ \u5927\u7684\u65f6\u5019\u7ebf\u6027\u57fa\u5b9e\u73b0\u3002\u6811\u8fb9\u7684\u6743\u503c\u53ef\u4ee5\u901a\u8fc7\u6811\u4e0a\u5dee\u5206\u5feb\u901f\u4fee\u6539\u3002\n\n\u8bc1\u660e\uff1a\u8003\u8651\u88ab\u5206\u5f00\u7684\u4e24\u4e2a\u6781\u5927\u8fde\u901a\u70b9\u96c6\u4e4b\u95f4\u88ab\u5220\u6389\u7684\u8fb9\u7684 $\\oplus$\u3002\u8003\u8651\u6bcf\u6761\u975e\u6811\u8fb9\u4ea7\u751f\u7684\u8d21\u732e\u3002\u82e5\u8fd9\u6761\u8fb9\u4e24\u7aef\u5728\u540c\u4e00\u70b9\u96c6\uff08\u8bbe\u4e3a $A$\uff09\uff0c\u90a3\u4e48\u5176\u8986\u76d6\u7684\u88ab\u5220\u9664\u6811\u8fb9\u5fc5\u5b9a\u662f $A\\to B\\to A \\to B\\to A$\uff0c\u5076\u6570\u6b21\uff1b\u82e5\u8fd9\u6761\u8fb9\u4e24\u7aef\u5728\u4e0d\u540c\u70b9\u96c6\u5219\u51fa\u73b0\u5947\u6570\u6b21\uff0c\u52a0\u4e0a\u975e\u6811\u8fb9\u672c\u8eab\u8fd8\u662f\u5076\u6570\u6b21\uff0c\u56e0\u800c $\\oplus$ \u5fc5\u5b9a\u4e3a $0$\u3002\n\n\u5f53 $\\oplus$ \u4e3a $0$ \u65f6\uff0c\u7531\u4e8e\u6211\u6bd4\u8f83\u61d2\uff0c\u5c31\u53ea\u8bc1 dfs \u6811\u7684\u60c5\u51b5\u4e86\u3002\n\n\u663e\u7136\u8fd9\u4e9b\u8fb9\u81f3\u5c11\u6709\u4e00\u6761\u6811\u8fb9\uff0c\u8bbe\u6df1\u5ea6\u6700\u5c0f\u7684\u90a3\u6761\u4e3a $(fa_u,u)$\u3002\u8003\u8651\u6811\u8fb9\u4e3a $(fa_u,u)$\uff0c\u90a3\u4e48\u82e5 $fa_u$ \u548c $u$ \u8fd8\u80fd\u8fde\u901a\uff0c\u5fc5\u5b9a\u662f\u901a\u8fc7 $u$ \u5b50\u6811\u51fa\u53d1\u7684\u67d0\u6761\u975e\u6811\u8fb9 $(x,y)$\uff08$x$ \u5728 $u$ \u5b50\u6811\u5185\uff09 \u8df3\u5230 $fa_u$ \u7684\u7956\u5148\u3002\u7531\u4e8e $(fa_u,u)$ \u6df1\u5ea6\u6700\u5c0f\uff0c\u56e0\u6b64 $fa_u$ \u5230 $y$ \u7684\u8def\u5f84\u4e0a\u8fb9\u90fd\u672a\u65ad\u5f00\u3002\u7531\u4e8e $(x,y)$ \u6ca1\u6709\u8d21\u732e\uff0c\u90a3\u4e48\u8981\u4e48\u81ea\u8eab\u88ab\u5220\u4e86\uff0c\u8981\u4e48 $(x,u)$ \u4e0a\u8fd8\u6709\u53e6\u4e00\u6761\u8fb9\u88ab\u5220\u4e86\uff0c\u65e0\u8bba\u54ea\u79cd $u$ \u90fd\u4e0d\u80fd\u7ecf\u8fc7 $(x,y)$ \u5230\u8fbe\u6df1\u5ea6\u66f4\u5c0f\u7684\u8282\u70b9\u3002\n\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <algorithm>\nusing namespace std;\ntypedef unsigned long long ll;\nconst int N=1e5+2,M=2e5+2;\nll v[N],val[M],js;\nint lj[M],nxt[M],bh[M],fir[N],f[N];\nint n,m,i,x,y,z,c,bs;\ninline void read(int &x)\n{\n\tc=getchar();\n\twhile ((c<48)||(c>57)) c=getchar();\n\tx=c^48;c=getchar();\n\twhile ((c>=48)&&(c<=57))\n\t{\n\t\tx=x*10+(c^48);\n\t\tc=getchar();\n\t}\n}\nint getf(int x)\n{\n\tif (f[x]==x) return x;\n\treturn f[x]=getf(f[x]);\n}\ninline ll sj()\n{\n\tjs=rand();js<<=31;return js|rand();\n}\ninline void add(int x,int y,int z)\n{\n\tlj[++bs]=y;\n\tbh[bs]=z;\n\tnxt[bs]=fir[x];\n\tfir[x]=bs;\n\tlj[++bs]=x;\n\tbh[bs]=z;\n\tnxt[bs]=fir[y];\n\tfir[y]=bs;\n}\nvoid dfs(int x)\n{\n\tint i;\n\tfor (i=fir[x];i;i=nxt[i]) if (lj[i]!=f[x])\n\t{\n\t\tf[lj[i]]=x;\n\t\tdfs(lj[i]);\n\t\tv[x]^=(val[bh[i]]=v[lj[i]]);\n\t}\n}\nint main()\n{\n\tsrand(383778817);\n\tread(n);read(m);\n\tfor (i=1;i<=n;i++) f[i]=i;\n\tfor (i=1;i<=m;i++)\n\t{\n\t\tread(x);read(y);\n\t\tif (getf(x)==getf(y)) {v[x]^=(val[i]=sj());v[y]^=val[i];}\n\t\telse {add(x,y,i);f[f[x]]=f[y];}\n\t}memset(f,0,sizeof(f));dfs(1);read(m);\n\twhile (m--)\n\t{\n\t\tread(x);\n\t\tif (x==1) {read(y);if (val[y]) puts(\"Connected\"); else puts(\"Disconnected\");}\n\t\telse if (x==2) {read(y);read(z);if ((val[y])&&(val[y]^val[z])&&(val[z])) puts(\"Connected\"); else puts(\"Disconnected\");}\n\t\telse if (x==3) {read(y);read(z);read(i);if ((val[y])&&(val[z])&&(val[i])&&(val[y]^val[z])&&(val[z]^val[i])&&(val[y]^val[i])&&(val[y]^val[z]^val[i])) puts(\"Connected\"); else puts(\"Disconnected\");}\n\t\telse {read(x);read(y);read(z);read(i);if ((val[x])&&(val[y])&&(val[z])&&(val[i])&&(val[x]^val[y])&&(val[x]^val[z])&&(val[x]^val[i])&&(val[z]^val[y])&&(val[i]^val[y])&&(val[z]^val[i])&&(val[x]^val[y]^val[z])&&(val[x]^val[y]^val[i])&&(val[x]^val[i]^val[z])&&(val[i]^val[y]^val[z])&&(val[x]^val[y]^val[z]^val[i])) puts(\"Connected\"); else puts(\"Disconnected\");}\n\t}\n}\n```\n",
        "postTime": 1555421882,
        "uid": 29826,
        "name": "SSerxhs",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5227 \u3010[AHOI2013]\u8fde\u901a\u56fe\u3011"
    },
    {
        "content": "## Description\n\n\u7ed9\u5b9a\u4e00\u4e2a\u65e0\u5411\u8fde\u901a\u56fe\u548c\u82e5\u5e72\u4e2a\u5c0f\u96c6\u5408\uff0c\u6bcf\u4e2a\u5c0f\u96c6\u5408\u5305\u542b\u4e00\u4e9b\u8fb9\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u96c6\u5408\uff0c\u4f60\u9700\u8981\u786e\u5b9a\u5c06\u96c6\u5408\u4e2d\u7684\u8fb9\u5220\u6389\u540e\u6539\u56fe\u662f\u5426\u4fdd\u6301\u8054\u901a\u3002\u96c6\u5408\u95f4\u7684\u8be2\u95ee\u76f8\u4e92\u72ec\u7acb\n\n\u5b9a\u4e49\u4e00\u4e2a\u56fe\u4e3a\u8054\u901a\u7684\u5f53\u4e14\u4ec5\u5f53\u5bf9\u4e8e\u4efb\u610f\u7684\u4e24\u4e2a\u9876\u70b9\uff0c\u90fd\u5b58\u5728\u4e00\u6761\u8def\u5f84\u8fde\u63a5\u5b83\u4eec\n\n## Input\n\n\u7b2c\u4e00\u884c\u4e3a\u4e24\u4e2a\u6574\u6570 $n,m$\uff0c\u4ee3\u8868\u65e0\u5411\u56fe\u7684\u70b9\u6570\u548c\u8fb9\u6570\n\n\u4e0b\u9762 $m$ \u884c\uff0c\u5305\u542b\u4e24\u4e2a\u6574\u6570 $u,v$\uff0c\u4ee3\u8868\u8be5\u8fb9\u8fde\u63a5\u70b9 $u,v$\u3002\u7b2c $i + 1$ \u884c\u7684\u8fb9\u7684\u7f16\u53f7\u4e3a $i$\u3002\u4fdd\u8bc1\u4e0d\u5b58\u5728\u91cd\u8fb9\u548c\u81ea\u73af\n\n\u4e0b\u9762\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 $k$\uff0c\u8868\u793a\u96c6\u5408\u4e2a\u6570\n\n\u4e0b\u9762 $k$ \u884c\u6bcf\u884c\u63cf\u8ff0\u4e00\u4e2a\u96c6\u5408\uff0c\u6bcf\u884c\u7684\u7b2c\u4e00\u4e2a\u6570\u4e3a\u96c6\u5408\u4e2d\u8fb9\u7684\u4e2a\u6570 $c$\uff0c\u540e\u9762 $c$ \u4e2a\u6570\u4ee3\u8868\u96c6\u5408\u5185\u7684\u8fb9\n\n## Output\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u96c6\u5408\uff0c\u8f93\u51fa\u4e00\u884c\u4ee3\u8868\u53bb\u6389\u8be5\u96c6\u5408\u4e2d\u7684\u8fb9\u540e\u56fe\u662f\u5426\u8054\u901a\uff0c\u5982\u679c\u8054\u901a\u8f93\u51fa ``Connected``\uff0c\u5426\u5219\u8f93\u51fa ``Disconnected``\n\n## Hint\n\n$1~\\leq~n,k~\\leq~10^5$\n\n$1~\\leq~m~\\leq~2~\\times~10^5$\n\n$1~\\leq~c~\\leq~4$\n\n## Solution\n\n**\u8fd9\u4e2a\u5206\u6cbb\u65b9\u6cd5\u53eb\u505a\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u800c\u4e0d\u662fcdq\u5206\u6cbb\u3002**\n\n\u6211\u4eec\u8003\u8651\u5206\u6cbb\uff0c\u8bbe $[l,r]$ \u4e3a\u533a\u95f4 $[l,r]$ \u4e2d\u8be2\u95ee\u6d89\u53ca\u8fb9\u90fd\u6ca1\u6709\u88ab\u8fde\u4e0a\u4e14\u5176\u5b83\u8fb9\u90fd\u8fde\u4e0a\u65f6\u56fe\u662f\u5426\u8054\u901a\uff0c\u90a3\u4e48\u9012\u5f52\u5230\u5e95\u65f6\u5373\u4e3a\u4e00\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u3002\n\n\u5177\u4f53\u65b9\u6cd5\u4e3a\u5148\u5c06\u6ca1\u6709\u88ab\u8be2\u95ee\u8fc7\u7684\u8fb9\u8fde\u4e0a\u3002\u7136\u540e\u5728\u9012\u5f52\u533a\u95f4 $[l,r]$ \u65f6\uff0c\u5c06\u533a\u95f4\u5185 $[l,mid]$ \u7684\u8be2\u95ee\u4e2d\u4e0d\u6d89\u53ca\u7684\u8fb9\u5168\u90e8\u8fde\u4e0a\uff0c\u9012\u5f52\u5904\u7406\u5de6\u4fa7\u533a\u95f4\uff0c\u7136\u540e\u64a4\u9500\u4e0a\u6b21\u7684\u8fde\u8fb9\uff0c\u518d\u5c06 $(mid, r]$ \u4e2d\u8be2\u95ee\u4e0d\u6d89\u53ca\u7684\u8fb9\u90fd\u8fde\u4e0a\uff0c\u5904\u7406\u53f3\u8fb9\uff0c\u56de\u6eaf\u540e\u518d\u6b21\u64a4\u9500\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u8054\u901a\u5757\u4e2a\u6570\uff0c\u5728\u5e95\u90e8\u5373\u53ef\u5224\u65ad\u3002\u5b58\u50a8\u9700\u8981\u64a4\u9500\u7684\u64cd\u4f5c\u53ef\u4ee5\u7528\u4e00\u4e2a\u6808\u5b9e\u73b0\u3002\n\n\u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u9012\u5f52\u5c42\u6570\u4e3a $O(\\log k)$\uff0c\u4e8e\u662f\u6bcf\u4e2a\u8be2\u95ee\u88ab\u5904\u7406 $O(\\log k)$ \u6b21\uff0c\u5bf9\u6bcf\u4e2a\u8be2\u95ee\u4e2d\u7684\u6bcf\u6761\u8fb9\uff0c\u6bcf\u88ab\u5904\u7406\u4e00\u6b21\u5c31\u4f1a\u6709\u4e00\u6b21\u5e76\u67e5\u96c6\u7684\u5220\u9664\u548c\u64a4\u9500\u64cd\u4f5c\uff0c\u7531\u4e8e\u662f\u6309\u79e9\u5408\u5e76\u5b9e\u73b0\uff0c\u5355\u6b21\u64cd\u4f5c\u590d\u6742\u5ea6 $O(\\log n)$\u3002\u6240\u4ee5\u5355\u4e2a\u8be2\u95ee\u7684\u590d\u6742\u5ea6\u4e3a $O(c~\\log n)$\u3002\u5171\u6709 $k$ \u4e2a\u64cd\u4f5c\uff0c\u4e8e\u662f\u603b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(k~\\times~c~\\times~\\log k~\\log n)$\u3002\n\n\u8fd9\u4e2a\u5206\u6cbb\u548ccdq\u5206\u6cbb\u7684\u533a\u522b\u5927\u6982\u5728\u4e8e\u2026\u2026\u6b64\u5206\u6cbb\u65f6 mid \u4e24\u4fa7\u7684\u533a\u95f4\u662f\u88ab \u201c\u5e73\u7b49\u5bf9\u5f85\u201d \u7684\uff0c\u5373\u8bb0\u5f55\u53f3\u8fb9\u533a\u95f4\u5bf9\u5de6\u8fb9\u533a\u95f4\u7684\u8d21\u732e\uff0c\u4f46\u662fcdq\u5206\u6cbb\u4e0d\u662f\u3002\n\n\u53e6\u5916\u4e0a\u9762\u505a\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u65f6\u5019\u5e76\u6ca1\u6709\u5c06\u6811\u663e\u5f0f\u7684\u5efa\u51fa\u6765\uff0c\u4f46\u4ed6\u4eec\u5728\u672c\u8d28\u4e0a\u662f\u4e00\u6837\u7684\u3002\n\n\u53e6\u5916\u8fd8\u6709\u4e00\u79cd\u795e\u4ed9\u505a\u6cd5\u5728[\u8fd9\u91cc](https://www.cnblogs.com/bestFy/p/9401859.html)\n\n## Code\n\n```cpp\n#include <cstdio>\n#include <vector>\n#ifdef ONLINE_JUDGE\n#define freopen(a, b, c)\n#endif\n\ntypedef long long int ll;\n\nnamespace IPT {\n\tconst int L = 1000000;\n\tchar buf[L], *front=buf, *end=buf;\n\tchar GetChar() {\n\t\tif (front == end) {\n\t\t\tend = buf + fread(front = buf, 1, L, stdin);\n\t\t\tif (front == end) return -1;\n\t\t}\n\t\treturn *(front++);\n\t}\n}\n\ntemplate <typename T>\ninline void qr(T &x) {\n\tchar ch = IPT::GetChar(), lst = ' ';\n\twhile ((ch > '9') || (ch < '0')) lst = ch, ch=IPT::GetChar();\n\twhile ((ch >= '0') && (ch <= '9')) x = (x << 1) + (x << 3) + (ch ^ 48), ch = IPT::GetChar();\n\tif (lst == '-') x = -x;\n}\n\nnamespace OPT {\n\tchar buf[120];\n}\n\ntemplate <typename T>\ninline void qw(T x, const char aft, const bool pt) {\n\tif (x < 0) {x = -x, putchar('-');}\n\tint top=0;\n\tdo {OPT::buf[++top] = static_cast<char>(x % 10 + '0');} while (x /= 10);\n\twhile (top) putchar(OPT::buf[top--]);\n\tif (pt) putchar(aft);\n}\n\nconst int maxn = 100010;\nconst int maxm = 200010;\n\nstruct Edge {\n\tint from, to;\n};\nEdge edge[maxm];\n\nstruct Ask {\n\tint c;\n\tint mu[5];\n};\nAsk ask[maxn];\n\nstruct OP {\n\tint a, b, p;\n};\nOP stack[maxm * 20];\n\nint n, m, k, cnt, top;\nint ufs[maxn], rk[maxn];\nbool vis[maxm];\n\nvoid reset();\nint find(int);\nvoid cont(int, bool);\nvoid unionn(int, int, bool);\nvoid work(int, int, std::vector<int>&);\nvoid divide(int, int, std::vector<int>&);\n\nint main() {\n\tfreopen(\"1.in\", \"r\", stdin);\n\tqr(n); qr(m); cnt = n;\n\tfor (int i = 1; i <= m; ++i) {\n\t\tqr(edge[i].from); qr(edge[i].to);\n\t}\n\tqr(k);\n\tfor (int i = 1; i <= k; ++i) {\n\t\tqr(ask[i].c);\n\t\tfor (int j = 1; j <= ask[i].c; ++j) {qr(ask[i].mu[j]); vis[ask[i].mu[j]] = true;}\n\t}\n\tfor (int i = 1; i <= n; ++i) ufs[i] = i, rk[i] = 1;\n\tstd::vector<int>dn;\n\tfor (int i = 1; i <= m; ++i) \n\t\tif (!vis[i]) cont(i, false);\n\t\telse dn.push_back(i);\n\twork(1, k, dn);\n\treturn 0;\n}\n\nvoid work(int l, int r, std::vector<int>&e) {\n\tfor (int i = l; i <= r; ++i) {\n\t\tfor (int j = 1; j <= ask[i].c; ++j) vis[ask[i].mu[j]] = true;\n\t}\n\tstd::vector<int>dn;\n\tint _tp = top;\n\tfor (int i = 0, len = e.size(); i < len; ++i) {\n\t\tif (!vis[i]) cont(i, true);\n\t\telse dn.push_back(i);\n\t}\n\tfor (int i = l; i <= r; ++i) {\n\t\tfor (int j = 1; j <= ask[i].c; ++j) vis[ask[i].mu[j]] = false;\n\t}\n\tdivide(l, r, dn);\n\twhile (top != _tp) reset();\n}\n\nvoid divide(int l, int r, std::vector<int>&e) {\n\tif (l == r) {\n\t\tputs(cnt == 1 ? \"Connected\" : \"Disconnected\");\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\twork(l, mid, e);\n\twork(mid + 1, r, e);\n}\n\nint find(int x) {return ufs[x] == x ? x : find(ufs[x]);}\n\nvoid cont(int x, bool rec) {\n\tint fa = find(edge[x].from), fb = find(edge[x].to);\n\tif (fa != fb) {\n\t\tunionn(fa, fb, rec);\n\t\t--cnt;\n\t}\n}\n\nvoid unionn(int a, int b, bool rec) {\n\tint c;\n\tif (rk[a] < rk[b]) {c = 1; ufs[a] = b;}\n\telse if (rk[a] > rk[b]) {c = 2; ufs[b] = a;}\n\telse {c = 3; ufs[b] = a; ++rk[a];}\n\tif (rec) stack[++top] = {a, b, c};\n}\n\nvoid reset() {\n\tint a = stack[top].a, b = stack[top].b, p = stack[top--].p;\n\tswitch (p) {\n\t\tcase 1:\n\t\t\tufs[a] = a; break;\n\t\tcase 2:\n\t\t\tufs[b] = b; break;\n\t\tcase 3:\n\t\t\tufs[b] = b; --rk[a]; break;\n\t}\n\t++cnt;\n}\n```\n\n\n\n\n\n\n\n",
        "postTime": 1550976568,
        "uid": 65363,
        "name": "\u4e00\u6276\u82cf\u4e00",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P5227 \u3010[AHOI2013]\u8fde\u901a\u56fe\u3011"
    },
    {
        "content": "\u7ebf\u6027\u7a7a\u95f4\u505a\u6cd5\uff0c\u4f46\u4e4b\u524d\u7684\u9898\u89e3\u5e76\u6ca1\u6709\u7ed9\u51fa\u5b8c\u6574\u7684\u8bc1\u660e\uff0c\u8fd9\u91cc\u501f\u9274 https://wuhongxun.blog.uoj.ac/blog/3003 \u4e2d\u7684\u8bc1\u660e\uff0c\u5e76\u7a0d\u5fae\u52a0\u4e00\u70b9\u7ec6\u8282\u3002\n\n\u5148\u6c42\u51fa\u539f\u56fe\u7684\u4e00\u68f5\u751f\u6210\u6811\uff0c\u5f97\u5230\u4e00\u4e9b\u6811\u8fb9\u4e0e\u975e\u6811\u8fb9\uff0c\u4ee4\u7b2c $i$ \u6761\u975e\u6811\u8fb9\u7684\u6743\u503c\u662f $2^i$\uff0c\u518d\u4ee4\u8fd9\u6761\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u5728\u6811\u4e0a\u7684\u5bf9\u5e94\u8def\u5f84\u4e0a\u7684\u8fb9\u5168\u90e8 $\\oplus 2^i$\u3002\n\n\u90a3\u4e48\u4e00\u4e2a\u6781\u5c0f\u7684\u5272\u4e00\u5b9a\u6ee1\u8db3\u5176\u4e2d\u6240\u6709\u8fb9\u7684\u6743\u503c\u5f02\u6216\u548c\u4e3a $0$\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u8be2\u95ee\u96c6\u5408\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5f02\u6216\u4e3a $0$ \u7684\u5b50\u96c6\uff0c\u53ef\u4ee5\u7528\u7ebf\u6027\u57fa\u7b80\u5355\u89e3\u51b3\u3002\n\n\u8bc1\u660e\u5206\u4e3a\u4e24\u6b65\uff0c\u6781\u5c0f\u7684\u5272\u4e00\u5b9a\u5f02\u6216\u548c\u4e3a $0$\uff0c\u5f02\u6216\u548c\u4e3a $0$ \u4e00\u5b9a\u4e3a\u4e00\u4e2a\u5272\u3002\n\n\u9996\u5148\uff0c\u6bcf\u4e00\u6761\u975e\u6811\u8fb9\u76f8\u5f53\u4e8e\u7ed9\u4e00\u4e2a\u73af $\\oplus$ \u4e0a $2^i$\uff0c\u90a3\u4e48\u4e00\u4e2a\u70b9\u7684\u6240\u6709\u76f8\u8fde\u7684\u8fb9\u7684 $\\oplus$ \u4e00\u5b9a\u4e3a $0$\uff0c\u4ee4\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u4e3a\u5176\u76f8\u90bb\u8fb9\u7684\u5f02\u6216\u548c\u3002\n\n\u5047\u8bbe\u8fd9\u4e2a\u5272\u5c06\u56fe\u5272\u6210\u4e86 $A,B$ \u4e24\u4e2a\u70b9\u96c6\uff08\u76f8\u5f53\u4e8e\u5272\u6389\u4e86\u6240\u6709 $A-B$ \u7684\u8fb9\uff09\uff0c\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e2a\u5272\u7684\u6743\u503c\u5373\u4e3a $A$ \u4e2d\u6240\u6709\u70b9\u70b9\u6743\u7684\u5f02\u6216\u548c\uff0c\u5f88\u660e\u663e\u662f $0$\u3002\n\n\u73b0\u5728\u8bc1\u660e\u5f02\u6216\u548c\u4e3a $0$ \u4e00\u5b9a\u4e3a\u4e00\u4e2a\u5272\u3002\n\n\u5047\u8bbe\u4e0d\u662f\u4e00\u4e2a\u5272\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8be2\u95ee\u4e2d\u7684\u6811\u8fb9\uff0c\u6211\u4eec\u627e\u5230\u4e00\u6761\u8986\u76d6\u5b83\u7684\u975e\u6811\u8fb9\u6765\u6210\u4e3a\u65b0\u7684\u6811\u8fb9\uff0c\u5728\u6574\u4e2a\u8fc7\u7a0b\u4e2d\u8fb9\u7684\u6743\u503c\u4fdd\u6301\u4e0d\u53d8\uff0c\u7b80\u5355\u7684\u5206\u7c7b\u8ba8\u8bba\u53ef\u4ee5\u5f97\u51fa\u8fd9\u6837\u64cd\u4f5c\u4e4b\u540e\u4ecd\u7136\u6ee1\u8db3\u4e00\u6761\u6811\u8fb9\u7684\u6743\u503c\u7b49\u4e8e\u6240\u6709\u7ecf\u8fc7\u5b83\u7684\u975e\u6811\u8fb9\u7684\u6743\u503c\u7684\u5f02\u6216\u548c\uff0c\u4e14\u6240\u6709\u975e\u6811\u8fb9\u7684\u6743\u503c\u7ebf\u6027\u65e0\u5173\uff08\u7531\u4e8e\u5f02\u6216\u64cd\u4f5c\u59cb\u7ec8\u662f\u5bf9\u57fa\u4e2d\u7684\u5143\u7d20\u8fdb\u884c\u7684\uff09\u3002\n\n\u64cd\u4f5c\u7ed3\u675f\u4e4b\u540e\uff0c\u6240\u6709\u7684\u8be2\u95ee\u4e2d\u7684\u6811\u8fb9\u53d8\u6210\u4e86\u975e\u6811\u8fb9\uff0c\u4f46\u8fd9\u4e9b\u975e\u6811\u8fb9\u6743\u503c\u7ebf\u6027\u65e0\u5173\uff0c\u4e0e\u5f02\u6216\u548c\u4e3a $0$ \u77db\u76fe\u3002\n\n\u7efc\u4e0a\uff0c\u7b97\u6cd5\u6b63\u786e\u6027\u5f97\u8bc1\uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u7528\u968f\u673a\u6743\u503c\u4ee3\u66ff $2^i$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define re register\nusing namespace std;\nint n,m,head[100002],cnt,val[200002],d[200002],q,p[31];\nchar v[100002];\nstruct edge{int to,next,w;}e[400002];\ninline void add(re int x,re int y,re int z){e[++cnt]=(edge){y,head[x],z},head[x]=cnt;}\ninline void dfs(re int x,re int y){v[x]=1;\n\tfor(re int i=head[x];i;i=e[i].next)\n\t\tif(!v[e[i].to])dfs(e[i].to,x),d[x]^=d[e[i].to],val[e[i].w]=d[e[i].to];\n\t\telse if(e[i].to^y&&!val[e[i].w])val[e[i].w]=rand(),d[x]^=val[e[i].w],d[e[i].to]^=val[e[i].w];\n}\ninline bool ins(re int x){\n\tfor(re int i=30;~i;--i)\n\t\tif(x&(1<<i)){\n\t\t\tif(!p[i])return p[i]=x;\n\t\t\tx^=p[i];\n\t\t}return 0;\n}\nint main(){\n\tsrand(20050816),scanf(\"%d%d\",&n,&m);\n\tfor(re int i=1,x,y;i<=m;++i)scanf(\"%d%d\",&x,&y),add(x,y,i),add(y,x,i);\n\tdfs(1,1),scanf(\"%d\",&q);\n\twhile(q--){\n\t\tre int o,x,s=1;scanf(\"%d\",&o),memset(p,0,sizeof(p));\n\t\twhile(o--)scanf(\"%d\",&x),s&=ins(val[x]);\n\t\tputs(s?\"Connected\":\"Disconnected\");\n\t}\n}\n\n```\n",
        "postTime": 1644325612,
        "uid": 41476,
        "name": "gyh20",
        "ccfLevel": 10,
        "title": "\u7ebf\u6027\u57fa"
    },
    {
        "content": "$$\\texttt{Description}$$\n\n[P5227 [AHOI2013]\u8fde\u901a\u56fe](https://www.luogu.com.cn/problem/P5227)\n\n$$\\texttt{Solution}$$\n\n\u6211\u4eec\u770b\u5230\u9898\u76ee\u8981\u6c42\u628a\u96c6\u5408\u4e2d\u7684\u8fb9\u5220\u6389\uff0c\u6240\u4ee5\u53ef\u4ee5\u60f3\u5230**\u7ebf\u6bb5\u6811\u5206\u6cbb**\uff0c\u5224\u65ad\u56fe\u662f\u5426\u8054\u901a\uff0c\u5c31\u53ef\u4ee5\u7528**\u5e76\u67e5\u96c6**\u5224\u65ad\u3002\n\n\u7ebf\u6bb5\u6811\u5206\u6cbb\u7ef4\u62a4\u7684\u662f\u4e00\u6761**\u65f6\u95f4\u8f74**\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u65f6\u95f4\u70b9\u51fa\u73b0\u7684\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u8fb9\u7684\u7f16\u53f7\u6302\u5230\u5bf9\u5e94\u7684\u65f6\u95f4\u8282\u70b9\u4e0a\uff0c\u5177\u4f53\u53ef\u4ee5\u7528 **vector** \u8bb0\u5f55\u3002\n\n\u63a5\u7740\u6211\u4eec\u641c\u7d22\u6574\u68f5\u7ebf\u6bb5\u6811\uff0c\u9047\u5230\u6807\u8bb0\u7740\u7684\u8fb9\u5c31\u628a\u5b83\u52a0\u5165\u5230\u5e76\u67e5\u96c6\u4e2d\uff0c\u5f53\u8fd9\u68f5\u5b50\u6811\u904d\u5386\u5b8c\u4e4b\u540e\u5c31\u8981\u4ece\u5e76\u67e5\u96c6\u4e2d\u64a4\u9500\u6b64\u6b21\u64cd\u4f5c\uff0c\u5c31\u4e0d\u4f1a\u5f71\u54cd\u5230\u5176\u4ed6\u65f6\u95f4\u8282\u70b9\u3002\n\n\u6240\u4ee5\u6211\u4eec\u9700\u8981\u7528**\u53ef\u64a4\u9500\u5e76\u67e5\u96c6**\uff0c\u5177\u4f53\u5c31\u662f\u5728\u52a0\u5165\u4e00\u6761\u8fb9\u524d\u7528\u4e00\u4e2a\u6808\u628a\u5e76\u67e5\u96c6\u4e2d\u7684\u4fe1\u606f\u8bb0\u5f55\u4e00\u4e0b\uff0c\u64a4\u9500\u65f6\u53ea\u9700\u628a\u4fe1\u606f\u4ece\u6808\u4e2d\u5f39\u51fa\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u4e0d\u80fd\u591f\u7834\u574f\u5e76\u67e5\u96c6\u4e2d\u7684\u6811\u5f62\u7ed3\u6784\uff0c\u6211\u4eec\u91c7\u7528**\u6309\u79e9\u5408\u5e76**\u7684\u65b9\u5f0f\u4f18\u5316\u5e76\u67e5\u96c6\u3002\n\n\u641c\u7d22\u5230\u53f6\u5b50\u8282\u70b9\u4e4b\u540e\u5c31\u53ef\u4ee5\u5224\u65ad\u5e76\u4e14\u8bb0\u5f55\u7b54\u6848\uff0c\u5177\u4f53\u53ef\u4ee5\u8bb0\u5f55\u5e76\u67e5\u96c6\u4e2d\u4e00\u4e2a\u8054\u901a\u5757\u7684\u5927\u5c0f\uff0c\u4efb\u610f\u9009\u62e9\u4e00\u4e2a\u8054\u901a\u5757\u67e5\u8be2\uff0c\u5982\u679c\u5927\u5c0f\u7b49\u4e8e $n$\uff0c\u5219\u56fe\u8054\u901a\uff0c\u5426\u5219\u56fe\u4e0d\u8054\u901a\u3002\n\n\u56e0\u4e3a\u5e76\u67e5\u96c6\u662f\u7528\u6309\u79e9\u5408\u5e76\u4f18\u5316\u7684\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta (n \\log^2 n)$\u3002\n\n$$\\texttt{Code}$$\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int MAXN = 2e5 + 10;\n\nint n, m, A[MAXN], B[MAXN], f[MAXN], siz[MAXN], dep[MAXN], k;\n\nvector <int> disappear[MAXN];\n\nbool connected[MAXN];\n\ninline int find(int x) {\n\tif (f[x] != x) return find(f[x]);\n\telse return x;\n}\n\nstruct Node {\n\tint l, r;\n\tvector <int> q;\n}t[ MAXN << 2 ];\n\nstruct Information {\n\tint fx, fy, depfx, depfy, sizfx, sizfy;\n\tbool Union;\n};\n\nstack <Information> undo;\n\ninline void build(int p, int l, int r) {\n\tt[p].q.clear(); t[p].l = l; t[p].r = r;\n\tif (l == r) return ;\n\tint mid = l + r >> 1;\n\tbuild(p << 1, l, mid); build(p << 1 | 1, mid + 1, r);\n}\n\ninline void update(int p, int x, int y, int Q) {\n\tif (t[p].l >= x && t[p].r <= y) {\n\t\tt[p].q.emplace_back(Q);\n\t\treturn ;\n\t}\n\tint mid = t[p].l + t[p].r >> 1;\n\tif (x <= mid) update(p << 1, x, y, Q);\n\tif (mid < y) update(p << 1 | 1, x, y, Q);\n}\n\ninline void dfs(int p) {\n\t// Add\n\tfor (auto i : t[p].q) {\n\t\tint fx = find(A[i]), fy = find(B[i]);\n\t\tif (fx != fy) {\n\t\t\tif (dep[fx] > dep[fy]) swap(fx, fy);\n\t\t\tundo.push((Information){fx, fy, dep[fx], dep[fy], siz[fx], siz[fy], true});\n\t\t\tif (dep[fx] == dep[fy]) dep[fy]++;\n\t\t\tf[fx] = fy;\n\t\t\tsiz[fy] += siz[fx];\n\t\t}\n\t\telse {\n\t\t\tundo.push((Information){0, 0, 0, 0, 0, 0, false});\n\t\t}\n\t}\n\tif (t[p].l == t[p].r) {\n\t\tif (siz[ find(1) ] == n) connected[ t[p].l ] = true;\n\t\telse connected[ t[p].l ] = false;\n\t}\n\telse {\n\t\tdfs(p << 1); dfs(p << 1 | 1);\n\t}\n\t// Undo\n\tfor (int i = 0; i < t[p].q.size(); i++) {\n\t\tInformation T = undo.top(); undo.pop();\n\t\tif (T.Union == true) {\n\t\t\tf[ T.fx ] = T.fx; f[ T.fy ] = T.fy;\n\t\t\tdep[ T.fx ] = T.depfx;\n\t\t\tdep[ T.fy ] = T.depfy;\n\t\t\tsiz[ T.fx ] = T.sizfx;\n\t\t\tsiz[ T.fy ] = T.sizfy;\n\t\t}\n\t}\n}\n\nint main() {\n\tios::sync_with_stdio(false); cin.tie(0); cout.tie(0);\n\t\n\tcin >> n >> m;\n\tfor (int i = 1; i <= m; i++) cin >> A[i] >> B[i];\n\t\n\tfor (int i = 1; i <= n; i++) f[i] = i, siz[i] = dep[i] = 1;\n\t\n\tcin >> k;\n\tbuild(1, 1, k);\n\tfor (int i = 1; i <= k; i++) {\n\t\tint c; cin >> c;\n\t\tfor (int j = 1; j <= c; j++) {\n\t\t\tint x; cin >> x; disappear[x].emplace_back(i);\n\t\t}\n\t}\n\t\n\tfor (int i = 1; i <= m; i++) {\n\t\tint last = 0;\n\t\tfor (auto v : disappear[i]) {\n\t\t\tif (last + 1 <= v - 1) update(1, last + 1, v - 1, i);\n\t\t\tlast = v;\n\t\t}\n\t\tif (last + 1 <= k) update(1, last + 1, k, i);\n\t}\n\t\n\tdfs(1);\n\t\n\tfor (int i = 1; i <= k; i++)\n\t\tif (connected[i]) cout << \"Connected\" << endl; else cout << \"Disconnected\" << endl;\n\t\n\treturn 0;\n}\n```\n\n\n$$\\texttt{Thanks for watching!}$$",
        "postTime": 1657267934,
        "uid": 355448,
        "name": "Fido_Puppy",
        "ccfLevel": 0,
        "title": "P5227 [AHOI2013]\u8fde\u901a\u56fe"
    },
    {
        "content": "\u8fd9\u91cc\u7ed9\u51fa\u4e00\u79cd\u5e38\u6570\u5de8\u5927\uff0c\u7801\u91cf5k\u7684\u4e11\u964b\u7b97\u6cd5\uff1a\u5927\u529b$LCT$\n\n\u590d\u6742\u5ea6\u662f$\\Theta(nlogn)$\uff08\u5b9e\u9645\u4e0a\u6bd4\u6211\u81ea\u5df1\u5199\u7684\u7ebf\u6bb5\u6811\u5206\u6cbb\u52a0\u6309\u79e9\u5408\u5e76\u5e76\u67e5\u96c6\u603b\u65f6\u95f4\u616210s\uff09\n\n\u505a\u6cd5\u662f\u7528LCT\u7ef4\u62a4\u6309\u5220\u9664\u65f6\u95f4\u4e3a\u6743\u503c\u7684\u6700\u5927\u751f\u6210\u6811\n\n\u6b63\u786e\u6027\u663e\u7136\uff0c\u4f46\u662f\u5e38\u6570\u5de8\u5927\n\n\u6211\u4eec\u79bb\u7ebf\u6765\u5f97\u5230\u6bcf\u6761\u8fb9\u7684\u5220\u9664\u65f6\u95f4\n\n\u5728$LCT$\u91cc\u7ef4\u62a4\u6743\u503c\u6700\u5c0f\u7684\u8fb9\u7684\u7f16\u53f7\n\n\u5224\u65ad\u56fe\u662f\u5426\u8fde\u901a\u5c31$access$\u52a0\u4e0a$splay$\u4efb\u610f\u4e00\u4e2a\u70b9\u6765\u5224\u65ad\u5b83\u7684$size$\u662f\u5426\u4e3a$n$\n\n\u7ef4\u62a4$size$\u9700\u8981\u7528\u5230\u865a\u5b50\u6811\u7684$trick$\uff0c\u6ce8\u610f\u6bcf\u6b21$link$\u548c$access$\u7684\u65f6\u5019\u8981\u66f4\u65b0\u865a\u5b50\u6811\n\n\u8fd9\u91cc\u7ed9\u51fa\u7ebf\u6bb5\u6811\u5206\u6cbb\u548c$LCT$\u4e24\u79cd\u505a\u6cd5\u7684$code$\uff0c\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u505a\u6cd5\u4e4b\u524d\u7684\u5927\u4f6c\u5df2\u7ecf\u8bb2\u7684\u5f88\u660e\u767d\u4e86\uff0c\u6211\u5c31\u4e0d\u518d\u5570\u55e6\u4e86\n\n\u5982\u679c\u6709\u4ec0\u4e48\u4e0d\u6e05\u695a\u7684\u53ef\u4ee5\u5728\u8bc4\u8bba\u533a\u7559\u8a00\n\n\u7ebf\u6bb5\u6811\u5206\u6cbb\uff1a\n\n```cpp\n#include <set>\n#include <map>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <tuple>\n#include <bitset>\n#include <cstdio>\n#include <vector>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <algorithm>\n#include <unordered_map>\n#define inl inline\n#define re register int\n#define fa(x) t[x].fa\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\n#define ll long long\nconst int inf = 0x7fffffff;\n#define lowbit(x) ((x) & (-x))\nusing namespace std;\n#ifndef _DEBUG\n#define getchar() (*(IOB.in.p++))\n#define putchar(c) (*(IOB.out.p++)=(c))\n#define io_eof() (IOB.in.p>=IOB.in.pend)\nstruct IOBUF { struct { char buff[1 << 27], *p, *pend; }in; struct { char buff[1 << 27], *p; }out; IOBUF() { in.p = in.buff; out.p = out.buff; in.pend = in.buff + fread(in.buff, 1, 1 << 27, stdin); }~IOBUF() { fwrite(out.buff, 1, out.p - out.buff, stdout); } }IOB;\n#endif\ntemplate<typename IO>\ninl void write(IO x) {\n    if (x == 0) return (void)putchar('0');\n    if (x < 0)putchar('-'), x = -x;\n    static char buf[30];\n    char* p = buf;\n    while (x) {\n        *(p++) = x % 10 + '0';\n        x /= 10;\n    }\n    while (p > buf)putchar(*(--p));\n}\ninl void writestr(const char *s) { while (*s != 0)putchar(*(s++)); }\ntemplate<typename IO>inl void writeln(IO x) { write(x), putchar('\\n'); }\ntemplate<typename IO>inl void writesp(IO x) { write(x), putchar(' '); }\ninl int readstr(char *s) {\n    char *begin = s, c;\n    while (1) {\n        c = getchar();\n        if (c < 33 || c>127)break;\n        *(s++) = c;\n    }\n    *s = 0;\n    return s - begin;\n}\ntemplate<typename IO>\ninl IO read() {\n    IO x = 0;\n    register bool w = 0;\n    register char c = getchar();\n    while (c > '9' || c < '0') {\n        if (c == '-') w = 1;\n        c = getchar();\n    }\n    while (c >= '0' && c <= '9') {\n        x = (x << 3) + (x << 1) + (c ^ 48);\n        c = getchar();\n    }\n    return w ? -x : x;\n}\nint n, m, pre[1000001];\nbool ans[1000001];\nvector<int>ve[1000001];\nstruct edge {\n    int u, v;\n}e[1000001];\nstruct quiz {\n    int st, ed, id;\n}q[10000001];\nstruct dsu {\n    int st[1000001], top, siz[1000001], fa[1000001];\n    inl void init() { for (re i = 1; i <= n; i++)siz[i] = 1; }\n    inl int find(int x) { return fa[x] ? find(fa[x]) : x; }\n    inl void link(int x, int y) {\n        st[++top] = 0;\n        re fx = find(x), fy = find(y);\n        if (fx == fy)return;\n        if (siz[fx] > siz[fy])swap(x, y), swap(fx, fy);\n        fa[fx] = fy, siz[fy] += siz[fx];\n        st[top] = fx;\n    }\n    inl void cut() {\n        if (!st[top]) {\n            top--; return;\n        }\n        siz[fa[st[top]]] -= siz[st[top]];\n        fa[st[top--]] = 0;\n    }\n    inl bool query() { return siz[find(1)] == n; }\n}s;//\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6\ninl void insert(int k, int l, int r, int x, int y, int w) {\n    if (l >= x && r <= y) {\n        ve[k].push_back(w);\n        return;\n    }\n    re mid = l + r >> 1;\n    if (x <= mid)insert(k << 1, l, mid, x, y, w);\n    if (y > mid)insert(k << 1 | 1, mid + 1, r, x, y, w);\n}\ninl void query(int k, int l, int r) {\n    if (l > r)return;\n    for (auto i : ve[k]) s.link(e[i].u, e[i].v);\n    if (l == r)ans[l] = s.query();\n    else {\n        re mid = l + r >> 1;\n        query(k << 1, l, mid), query(k << 1 | 1, mid + 1, r);\n    }\n    re siz = ve[k].size();\n    while (siz--)s.cut();\n}//\u7ebf\u6bb5\u6811\u5408\u5e76\nsigned main() {\n    n = read<int>(), m = read<int>();\n    s.init();\n    for (re i = 1; i <= m; i++) {\n        re x = read<int>(), y = read<int>();\n        e[i] = edge{ x,y }, pre[i] = 1;\n    }\n    re tot = 0, k = read<int>();\n    for (re i = 1; i <= k; i++) {\n        re a = read<int>();\n        for (re j = 1; j <= a; j++) {\n            re x = read<int>();\n            if (pre[x] <= i - 1)q[++tot] = quiz{ pre[x],i - 1,x };\n            pre[x] = i + 1;\n        }\n    }\n    for (re i = 1; i <= m; i++) {\n        if (pre[i] != k + 1) {\n            q[++tot] = quiz{ pre[i],k,i };\n        }\n    }\n    for (re i = 1; i <= tot; i++) {\n        insert(1, 1, k, q[i].st, q[i].ed, q[i].id);\n    }\n    query(1, 1, k);\n    for (re i = 1; i <= k; i++)writestr(ans[i] ? \"Connected\\n\" : \"Disconnected\\n\");\n}\n```\n\n$LCT$\uff1a\n\n```cpp\n#include <set>\n#include <map>\n#include <cmath>\n#include <queue>\n#include <stack>\n#include <tuple>\n#include <bitset>\n#include <cstdio>\n#include <vector>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n#include <iostream>\n#include <algorithm>\n#include <unordered_map>\n#define inl inline\n#define re register int\n#define fa(x) t[x].fa\n#define ls(x) t[x].child[0]\n#define rs(x) t[x].child[1]\n#define ll long long\nconst int inf = 0x7fffffff;\n#define lowbit(x) ((x) & (-x))\nusing namespace std;\n#ifndef _DEBUG\n#define getchar() (*(IOB.in.p++))\n#define putchar(c) (*(IOB.out.p++)=(c))\n#define io_eof() (IOB.in.p>=IOB.in.pend)\nstruct IOBUF { struct { char buff[1 << 26], *p, *pend; }in; struct { char buff[1 << 26], *p; }out; IOBUF() { in.p = in.buff; out.p = out.buff; in.pend = in.buff + fread(in.buff, 1, 1 << 26, stdin); }~IOBUF() { fwrite(out.buff, 1, out.p - out.buff, stdout); } }IOB;\n#endif\ntemplate<typename IO>\ninl void write(IO x) {\n\tif (x == 0) return (void)putchar('0');\n\tif (x < 0)putchar('-'), x = -x;\n\tstatic char buf[30];\n\tchar* p = buf;\n\twhile (x) {\n\t\t*(p++) = x % 10 + '0';\n\t\tx /= 10;\n\t}\n\twhile (p > buf)putchar(*(--p));\n}\ninl void writestr(const char *s) { while (*s != 0)putchar(*(s++)); }\ntemplate<typename IO>inl void writeln(IO x) { write(x), putchar('\\n'); }\ntemplate<typename IO>inl void writesp(IO x) { write(x), putchar(' '); }\ninl int readstr(char *s) {\n\tchar *begin = s, c;\n\twhile (1) {\n\t\tc = getchar();\n\t\tif (c < 33 || c>127)break;\n\t\t*(s++) = c;\n\t}\n\t*s = 0;\n\treturn s - begin;\n}\ntemplate<typename IO>\ninl IO read() {\n\tIO x = 0;\n\tregister bool w = 0;\n\tregister char c = getchar();\n\twhile (c > '9' || c < '0') {\n\t\tif (c == '-') w = 1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + (c ^ 48);\n\t\tc = getchar();\n\t}\n\treturn w ? -x : x;\n}\nint n, m;\nstruct node {\n\tint w, min, size, fa, child[2], vir;\n\tbool filp;\n}t[10000001];\ninl void maintain(int x) {\n\tt[x].size = t[ls(x)].size + t[rs(x)].size + t[x].vir + (x <= n);\n\tif (x > n)t[x].min = x;\n\tif (t[x].w >= t[t[ls(x)].min].w)t[x].min = t[ls(x)].min;\n\tif (t[t[x].min].w >= t[t[rs(x)].min].w)t[x].min = t[rs(x)].min;\n}//vir\u662f\u865a\u5b50\u6811\u7684size\u548c\ninl bool poi(int x) {\n\treturn rs(fa(x)) == x;\n}\ninl bool nroot(int x) {\n\treturn ls(fa(x)) == x || rs(fa(x)) == x;\n}\ninl void rotate(int x) {\n\tre f = fa(x), gf = fa(f), fs = poi(x), gfs = poi(f), s = t[x].child[fs ^ 1];\n\tif (nroot(f))t[gf].child[gfs] = x;\n\tt[f].child[fs] = s, t[x].child[fs ^ 1] = f;\n\tif (s)fa(s) = f;\n\tfa(x) = gf, fa(f) = x;\n\tmaintain(f);\n}\ninl void reverse(int x) {\n\tswap(ls(x), rs(x)), t[x].filp ^= 1;\n}\ninl void pushdown(int x) {\n\tif (t[x].filp) {\n\t\tif (ls(x))reverse(ls(x));\n\t\tif (rs(x))reverse(rs(x));\n\t\tt[x].filp = 0;\n\t}\n}\ninl void push(int x) {\n\tif (nroot(x))push(fa(x));\n\tpushdown(x);\n}\ninl void splay(int x) {\n\tpush(x);\n\twhile (nroot(x)) {\n\t\tif (nroot(fa(x)))poi(x) == poi(fa(x)) ? rotate(fa(x)) : rotate(x);\n\t\trotate(x);\n\t}\n\tmaintain(x);\n}\ninl void access(int x) {\n\tfor (re i = 0; x; x = fa(i = x)) {\n\t\tsplay(x), t[x].vir += t[rs(x)].size, t[x].vir -= t[rs(x) = i].size, maintain(x);\n\t}\n}\ninl void makeroot(int x) {\n\taccess(x), splay(x), reverse(x);\n}\ninl void split(int x, int y) {\n\tmakeroot(y), access(x), splay(x);\n}\ninl void link(int x, int y) {\n\tsplit(x, y), fa(y) = x, t[x].vir += t[y].size, maintain(x);\n}\ninl void cut(int x, int y) {\n\tsplit(x, y);\n\tfa(y) = ls(x) = 0, maintain(x);\n}\ninl int findroot(int x) {\n\taccess(x), splay(x), pushdown(x);\n\twhile (ls(x))pushdown(x = ls(x));\n\tsplay(x); return x;\n}\ninl bool query() {\n\taccess(1), splay(1);\n\treturn t[1].size == n;\n}\nstruct edge {\n\tint u, v, w;\n}e[10000001];\nstruct quiz {\n\tbool op, flag;\n\tint i, tim;\n}q[10000001];\nint now[10000001], num, ans[10000001], st[1000001], top;\nsigned main() {\n\tn = read<int>(), m = read<int>();\n\tfor (re i = 0; i <= n; i++)t[i].w = inf;\n\tfor (re i = 1; i <= m; i++) {\n\t\tre x = read<int>(), y = read<int>();\n\t\te[i] = edge{ x,y }, now[i] = i;\n\t\tq[++num] = quiz{ 1,0,i,0 };\n\t}//op\u4e3a0\u8868\u793a\u5220\u9664(cut)\uff0c\u4e3a1\u8868\u793a\u52a0\u5165(link),flag\u8868\u793a\u662f\u5426\u4e3a\u8be2\u95ee\n\tre k = read<int>(), a, tot = m;\n\tfor (re i = 1; i <= k; i++) {\n\t\ta = read<int>();\n\t\tfor (re j = 1; j <= a; j++) {\n\t\t\tre x = read<int>();\n\t\t\te[now[x]].w = i - 1;\n\t\t\tt[now[x] + n].w = i - 1;\n\t\t\tq[++num] = quiz{ 0,0,now[x],i };\n\t\t\te[++tot].u = e[now[x]].u, e[tot].v = e[now[x]].v, now[x] = tot;\n\t\t\tst[++top] = now[x];\n\t\t}\n\t\tq[++num].flag = 1;\n\t\tif (i != k) {\n\t\t\twhile (top) {\n\t\t\t\tq[++num] = quiz{ 1,0,st[top--],i };\n\t\t\t}\n\t\t}\n\t}\n\tfor (re i = 1; i <= m; i++) {\n\t\tif (!e[now[i]].w) {\n\t\t\te[now[i]].w = k;\n\t\t\tt[now[i] + n].w = k;\n\t\t}\n\t}\n\ttot += n;\n\tfor (re i = 1; i <= tot; i++) {\n\t\tt[i].size = 1;\n\t}//\u521d\u59cb\u5316\n\tfor (re i = 1; i <= num; i++) {//\u7ef4\u62a4\u6700\u5927\u751f\u6210\u6811\n\t\tif (q[i].flag) {\n\t\t\twritestr(query() ? \"Connected\\n\" : \"Disconnected\\n\");\n\t\t}\n\t\telse {\n\t\t\tre j = q[i].i, u = e[j].u, v = e[j].v, w = e[j].w;\n\t\t\tmakeroot(u);\n\t\t\tif (q[i].op) {\n\t\t\t\tif (findroot(v) == u) {\n\t\t\t\t\tre minn = t[u].min;\n\t\t\t\t\tif (t[minn].w >= w)continue;\n\t\t\t\t\tcut(e[minn - n].u, minn), cut(e[minn - n].v, minn);\n\t\t\t\t}\n\t\t\t\tlink(u, j + n), link(v, j + n);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (findroot(v) == u) {\n\t\t\t\t\tmaintain(j + n);\n\t\t\t\t\tif (!t[j + n].fa && !t[j + n].size)continue;\n\t\t\t\t\tcut(e[j].u, j + n), cut(e[j].v, j + n);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n",
        "postTime": 1558431730,
        "uid": 110271,
        "name": "Genius_Z",
        "ccfLevel": 0,
        "title": "P5227 [AHOI2013]\u8fde\u901a\u56fe LCT\u52a8\u6001\u56fe \u8fde\u901a\u6027"
    },
    {
        "content": "[\u6233\u6211\u83b7\u5f97\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8cqwq](https://www.goldenpotato.cn/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/luogu-p5227-ahoi2013-%E8%BF%9E%E9%80%9A%E5%9B%BE/)\n\n---\n# Solution\n\u8fd9\u9898\u53ef\u4ee5\u79bb\u7ebf\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\u7ef4\u62a4\u52a8\u6001\u56fe\u8fde\u901a\u6027\u6765\u641e\u3002\n\n\u8fd9\u9898\u6211\u4eec\u8003\u8651\u79bb\u7ebf\u4e0b\u6765\u641e\u3002\u79bb\u7ebf\u4e4b\u540e\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0\uff0c**\u67d0\u6761\u8fb9\u4f1a\u5728\u67d0\u4e9b\u8be2\u95ee\u533a\u95f4\u4e2d\u51fa\u73b0\u3002**\n\n\u8003\u8651**\u4ee5\u8be2\u95ee\u7684\u7f16\u53f7\u4e3a\u4e0b\u6807\u5efa\u7ebf\u6bb5\u6811\uff0c\u6211\u4eec\u628a\u6bcf\u4e00\u6761\u8fb9\u51fa\u73b0\u7684\u65f6\u95f4\u6bb5\u5168\u90e8\u52a0\u5230\u7ebf\u6bb5\u6811\u91cc\u9762\u53bb\u3002**\n\n\u63a5\u4e0b\u6765\uff0c\u76f4\u63a5**\u5728\u7ebf\u6bb5\u6811\u4e0a\u8dd1dfs**,\u6bcf\u5230\u4e00\u4e2a\u533a\u95f4\uff0c\u5c31\u628a\u8fd9\u4e2a\u533a\u95f4\u91cc\u9762\u5b58\u7684\u8fb9\u901a\u901a\u5728\u5e76\u67e5\u96c6\u4e2d\u8fde\u4e0a\uff1b\u6bcf\u5b8c\u6210\u4e00\u4e2a\u533a\u95f4\uff0c\u5c31\u628a\u8fd9\u4e2a\u533a\u95f4\u8fde\u4e0a\u7684\u8fb9\u901a\u901a\u53d6\u6d88\uff08\u7c7b\u4f3c\u4e8e\u56de\u6eaf\uff09\u3002\n\n\u8fd9\u6837\u641e\uff0c\u6211\u4eec\u6bcf\u6b21\u5230\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u53f6\u5b50\u8282\u70b9\u4ee3\u8868\u7684\u8be2\u95ee\u4e0a\u6240\u8981\u8fde\u7684\u8fb9\u4e00\u5b9a\u5df2\u7ecf\u5168\u90e8\u8fde\u4e0a\u4e86\uff0c\u76f4\u63a5\u5728\u5e76\u67e5\u96c6\u4e2d\u67e5\u8be2\u4efb\u610f\u8282\u70b9\u7684\u7236\u4eb2\u7684$size$\u662f\u5426\u4e3a$n$\u5373\u53ef\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u8fd9\u91cc\u6709\u64a4\u9500\uff08\u56de\u6eaf\uff09\u64cd\u4f5c\uff0c\u56e0\u6b64\u5fc5\u9700\u4f7f\u7528**\u6309\u79e9\u5408\u5e76\u7684\u5e76\u67e5\u96c6\u3002\u6211\u4eec\u53ea\u9700\u8981\u5f00\u4e00\u4e2a\u6808\uff0c\u628a\u6bcf\u6b21\u4fee\u6539\u7684fa\u7684\u8282\u70b9\u8bb0\u5f55\u4e0b\u6765\u5373\u53ef\u5b8c\u6210\u64a4\u9500\u7684\u64cd\u4f5c\u3002\n\n.\n\n\u65f6\u95f4\u590d\u6742\u5ea6$O(nlog^2n)$ \u5417\uff1f\n\n\u95ee\u9898\u662f\u8fd9\u73a9\u610f\u80fd\u8fc7\u554a.....\n\n~~\u56e0\u6b64\uff0c\u6211\u4eec\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f$O($\u80fd\u8fc7$)$~~\n\n\u5c31\u9171\uff0c\u6211\u4eec\u53c8\u5207\u6389\u4e00\u9053\u9898\u5566\u3002(\uff89\uff9f\u2200\uff9f)\uff89 \n\n---\n# Code\n```cpp\n//Luogu P5227 [AHOI2013]\u8fde\u901a\u56fe\n//Mar,22ed,2019\n//\u7ebf\u6bb5\u6811\u5206\u6cbb\u79bb\u7ebf\u7ef4\u62a4\u52a8\u6001\u56fe\u8fde\u901a\u6027\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<ctime>\nusing namespace std;\nlong long read()\n{\n\tlong long x=0,f=1; char c=getchar();\n\twhile(!isdigit(c)){if(c=='-') f=-1;c=getchar();}\n\twhile(isdigit(c)){x=x*10+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int N=100000+100;\nconst int M=200000+100;\nint n,m,q,p,ans[M];\nstruct UnF\n{\t\n\tint size[N],fa[N],mstack[M],top;\n\tvoid Init()\n\t{\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tsize[i]=1;\n\t}\n\tint FindFather(int x)\n\t{\n\t\tif(fa[x]==0) return x;\n\t\treturn FindFather(fa[x]);\n\t}\n\tvoid Link(int x,int y)\n\t{\n\t\tmstack[++top]=0;\n\t\tint fa_x=FindFather(x),fa_y=FindFather(y);\n\t\tif(size[fa_x]>size[fa_y]) \n\t\t\tswap(x,y),swap(fa_x,fa_y);\n\t\tif(fa_x==fa_y) return;\n\t\tmstack[top]=fa_x;\t\n\t\tfa[fa_x]=fa_y,size[fa_y]+=size[fa_x];\n\t}\n\tint Query()\n\t{\n\t\tif(size[FindFather(1)]==n) return true;\n\t\treturn false;\n\t}\n\tvoid Undo()\n\t{\n\t\tif(mstack[top]==0)\n\t\t{\n\t\t\ttop--;\n\t\t\treturn;\n\t\t}\n\t\tsize[fa[mstack[top]]]-=size[mstack[top]];\n\t\tfa[mstack[top]]=0;\n\t\ttop--;\n\t}\n}unf;\nstruct OP\n{\n\tint s,t,id;\n}op2[M*20],e[M];\nstruct SegmentTree\n{\n\t#define mid ((now_l+now_r)>>1)\n\t#define lson (now<<1)\n\t#define rson (now<<1|1)\n\tvector <int> w[M<<2];\n\tvoid Insert(int l,int r,int x,int now,int now_l,int now_r)\n\t{\n\t\tif(now_l>=l and now_r<=r)\n\t\t{\n\t\t\tw[now].push_back(x);\n\t\t\treturn;\n\t\t}\n\t\tif(l<=mid) Insert(l,r,x,lson,now_l,mid);\n\t\tif(r>mid) Insert(l,r,x,rson,mid+1,now_r);\n\t}\n\tvoid dfs(int now,int now_l,int now_r)\n\t{\n\t\tif(now_l>now_r) return;\n\t\tfor(int i=0;i<int(w[now].size());i++)\n\t\t\tunf.Link(e[w[now][i]].s,e[w[now][i]].t);\n\t\tif(now_l==now_r)\n\t\t\tans[now_l]=unf.Query();\n\t\telse\n\t\t{\n\t\t\tdfs(lson,now_l,mid);\n\t\t\tdfs(rson,mid+1,now_r);\n\t\t}\n\t\tfor(int i=0;i<int(w[now].size());i++)\n\t\t\tunf.Undo();\n\t}\n\t#undef mid\n\t#undef lson\n\t#undef rson\n}sgt;\nint last[M],K;\nint main()\n{\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++)\n\t\te[i].s=read(),e[i].t=read(),last[i]=1;\n\tK=read();\n\tfor(int i=1;i<=K;i++)\n\t{\n\t\tint c=read();\n\t\tfor(int j=1;j<=c;j++)\n\t\t{\n\t\t\tint x=read();\n\t\t\top2[++p].s=last[x],op2[p].t=i-1,op2[p].id=x;\n\t\t\tlast[x]=i+1;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++)\n\t\tif(last[i]!=K+1)\n\t\t\top2[++p].s=last[i],op2[p].t=K,op2[p].id=i;\n\t\t\t\n\tfor(int i=1;i<=p;i++)\n\t\tif(op2[i].s<=op2[i].t)\n\t\t{\n\t\t\tsgt.Insert(op2[i].s,op2[i].t,op2[i].id,1,1,K);\n\t\t\t//cerr<<op2[i].s<<\" \"<<op2[i].t<<\" \"<<op2[i].id<<endl;\n\t\t}\n\t\t\n\tunf.Init();\n\tsgt.dfs(1,1,K);\n\t\n\tfor(int i=1;i<=K;i++)\n\t\tif(ans[i]==0)\n\t\t\tprintf(\"Disconnected\\n\");\n\t\telse\n\t\t\tprintf(\"Connected\\n\");\n\treturn 0;\n}\n\n```\n\n\n\n\n",
        "postTime": 1553226798,
        "uid": 52563,
        "name": "GoldenPotato137",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P5227 \u3010[AHOI2013]\u8fde\u901a\u56fe\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u5206\u6cbb\u677f\u5b50\u3002\u8fd9\u79cd\u52a8\u6001\u56fe\u7684\u95ee\u9898\u770b\u90fd\u4e0d\u8981\u770b\uff0c\u5927\u6982\u7387\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\u3002\n\n\u6211\u4eec\u6709\u4e00\u5806\u7684\u96c6\u5408\uff0c\u6bcf\u6b21\u628a\u8fd9\u4e2a\u96c6\u5408\u7684\u8fb9\u5220\u6389\uff0c\u95ee\u4f60\u6bcf\u4e2a\u65f6\u523b\u7684\u8fde\u901a\u6027\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u628a\u8fd9\u4e2a\u65f6\u523b\u5220\u53bb\u7684\u96c6\u5408\u91cc\u7684\u8fb9\u5220\u6389\uff0c\u4e5f\u5c31\u662f\u8fd9\u4e2a\u533a\u95f4\u4e0d\u7528\u52a0\u8fd9\u6761\u8fb9\uff0c\u6309\u5e38\u89c4\u628a\u8fb9\u6254\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u904d\u5386\u4e00\u4e0b\uff0c\u6bcf\u4e2a\u70b9\u7684\u8fde\u901a\u6027\u5c31\u51fa\u6765\u4e86\u3002\n\n\u62ff\u6837\u4f8b\u4e3e\u4e2a\u4f8b\u5b50\uff1a\n\n```plain\n4 5\n1 2\n2 3\n3 4\n4 1\n2 4\n3\n1 5\n2 2 3\n2 1 2\n```\n\n- \u90a3\u4e48 $1$ \u53f7\u8fb9\u5728\u7ebf\u6bb5\u6811\u4e0a\u6302\u5230 $[1,2]$ \u533a\u95f4\u4e0a\u3002\n- \u90a3\u4e48 $2$ \u53f7\u8fb9\u5728\u7ebf\u6bb5\u6811\u4e0a\u6302\u5230 $[1,1]$ \u533a\u95f4\u4e0a\u3002\n- \u90a3\u4e48 $3$ \u53f7\u8fb9\u5728\u7ebf\u6bb5\u6811\u4e0a\u6302\u5230 $[1,1],[3,3]$ \u533a\u95f4\u4e0a\u3002\n- \u90a3\u4e48 $4$ \u53f7\u8fb9\u5728\u7ebf\u6bb5\u6811\u4e0a\u6302\u5230 $[1,3]$ \u533a\u95f4\u4e0a\u3002\n- \u90a3\u4e48 $5$ \u53f7\u8fb9\u5728\u7ebf\u6bb5\u6811\u4e0a\u6302\u5230 $[2,3]$ \u533a\u95f4\u4e0a\u3002\n\n\u904d\u5386\u5373\u53ef\u3002\n\n```cpp\n//Don't act like a loser.\n//This code is written by huayucaiji\n//You can only use the code for studying or finding mistakes\n//Or,you'll be punished by Sakyamuni!!!\n#include<bits/stdc++.h>\n#define int long long\n#define pr pair<int,int>\nusing namespace std;\n\nint read() {\n\tchar ch=getchar();\n\tint f=1,x=0;\n\twhile(ch<'0'||ch>'9') {\n\t\tif(ch=='-')\n\t\t\tf=-1;\n\t\tch=getchar();\n\t}\n\twhile(ch>='0'&&ch<='9') {\n\t\tx=x*10+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn f*x;\n}\n\nconst int MAXN=4e5+10,MAXQ=2e5+10;\n\nint n,m,q,cnt,num;\nstack<pr > stk;\nint size[MAXN],father[MAXN],a[MAXN],ans[MAXQ];\nvector<int > edge[MAXQ<<2];\npr e[MAXN];\n\npr make_edge(int x,int y) {\n\treturn make_pair(min(x,y),max(x,y));\n}\nint find(int x) {\n\tif(x!=father[x]) {\n\t\treturn find(father[x]);\n\t}\n\treturn x;\n}\nvoid merge(pr s) {\n\tint x=find(s.first);\n\tint y=find(s.second);\n\tif(x==y) {\n\t\tstk.push(make_pair(-1,-1));\n\t\treturn ;\n\t}\n\tnum--;\n\tif(size[x]>size[y]) {\n\t\tswap(x,y);\n\t}\n\tfather[x]=y;\n\tsize[y]+=size[x];\n\tstk.push(make_pair(x,y));\n}\nvoid del() {\n\tint x=stk.top().first;\n\tint y=stk.top().second;\n\tstk.pop();\n\tif(x==-1) {\n\t\treturn ;\n\t}\n\tnum++;\n\tfather[x]=x;\n\tsize[y]-=size[x];\n}\n\nvoid modify(int l,int r,int p,int x,int y,int s) {\n\tif(x>y||r<x||y<l) {\n\t\treturn ;\n\t}\n\tif(x<=l&&r<=y) {\n\t\tedge[p].push_back(s);\n\t\treturn ;\n\t}\n\t\n\tint mid=(l+r)>>1;\n\tmodify(l,mid,p<<1,x,y,s);\n\tmodify(mid+1,r,p<<1|1,x,y,s);\n}\n\nvoid query(int l,int r,int p) {\n\tint sz=edge[p].size();\n\tfor(int i=0;i<sz;i++) {\n\t\tmerge(e[edge[p][i]]);\n\t}\n\tif(l==r) {\n\t\tif(num==1) {\n\t\t\tans[l]=1;\n\t\t}\n\t\telse {\n\t\t\tans[l]=0;\n\t\t}\n\t}\n\telse {\n\t\tint mid=(l+r)>>1;\n\t\tquery(l,mid,p<<1);\n\t\tquery(mid+1,r,p<<1|1);\n\t} \n\twhile(sz--) {\n\t\tdel();\n\t}\n}\n\nsigned main() {\n\tcin>>n>>m;\n\tnum=n;\n\tfor(int i=1;i<=n;i++) {\n\t\tfather[i]=i;\n\t\tsize[i]=i;\n\t} \n\tfor(int i=1;i<=m;i++) {\n\t\te[i]=make_edge(read(),read());\n\t\ta[i]=1;\n\t}\n\tcin>>q;\n\t\n\tfor(int i=1;i<=q;i++) {\n\t\tint k=read();\n\t\twhile(k--) {\n\t\t\tint c=read();\n\t\t\tmodify(1,q,1,a[c],i-1,c);\n\t\t\ta[c]=i+1;\n\t\t}\n\t}\n\tfor(int i=1;i<=m;i++) {\n\t\tmodify(1,q,1,a[i],q,i);\n\t}\n\t\n\tquery(1,q,1);\n\tfor(int i=1;i<=q;i++) {\n\t\tif(ans[i]) {\n\t\t\tprintf(\"Connected\\n\");\n\t\t} \n\t\telse {\n\t\t\tprintf(\"Disconnected\\n\");\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1615077440,
        "uid": 132976,
        "name": "huayucaiji",
        "ccfLevel": 6,
        "title": "LG5227 [AHOI2013]\u8fde\u901a\u56fe"
    },
    {
        "content": "\u79bb\u7ebf\u4e4b\u540e\u5206\u6cbb\u3002\n\n\u5220\u8fb9\u7ef4\u62a4\u8fde\u901a\u6027\u6bd4\u8f83\u96be\u505a\u5230\uff0c\u8003\u8651\u8f6c\u5316\u6210\u52a0\u8fb9\u64cd\u4f5c\u3002\n\n\u5148\u628a\u6ca1\u51fa\u73b0\u5728\u8be2\u95ee\u4e2d\u7684\u8fb9\u52a0\u8fdb\u6765\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fde\u901a\u6027\uff0c\u540c\u65f6\u8bb0\u5f55\u8fde\u901a\u5757\u4e2a\u6570\u3002\n\n\u7136\u540e\u5206\u6cbb\u8be2\u95ee\uff0c\u5206\u6210A\u548cB\u4e24\u5757\u3002\n\n\u6211\u4eec\u8003\u8651\u5148\u6c42\u51faA\u90e8\u5206\u7684\u7b54\u6848\uff0c\u5219\u628a\u51fa\u73b0\u5728B\u4e2d\u4f46\u6ca1\u51fa\u73b0\u5728A\u4e2d\u7684\u8fb9\u52a0\u5165\uff0c\u7136\u540e\u9012\u5f52\u89e3\u51b3A\u7684\u95ee\u9898\u3002\u4e4b\u540e\u590d\u539f\u5e76\u67e5\u96c6\uff0c\u628a\u628a\u51fa\u73b0\u5728A\u4e2d\u4f46\u6ca1\u51fa\u73b0\u5728B\u4e2d\u7684\u8fb9\u52a0\u5165\uff0c\u9012\u5f52\u89e3\u51b3B\u7684\u95ee\u9898\u3002\u6700\u540e\u518d\u590d\u539f\u5e76\u67e5\u96c6\u5373\u53ef\u3002\n\n\u8003\u8651\u5982\u4f55\u590d\u539f\u5e76\u67e5\u96c6\u3002\n\n\u6211\u4eec\u5f00\u4e00\u4e2a\u6808\uff0c\u6bcf\u6b21\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u53d8\u4e86\uff0c\u5c31\u628a\u5f53\u524d\u4fe1\u606f\u538b\u5165\u6808\u91cc\u3002\u590d\u539f\u7684\u65f6\u5019\u518d\u4f9d\u6b21\u5f39\u51fa\u6808\u5373\u53ef\u6062\u590d\u4fe1\u606f\u3002\u590d\u539f\u603b\u590d\u6742\u5ea6\u548c\u5e76\u67e5\u96c6\u662f\u4e00\u6837\u7684\u3002\n\n### UPD\uff1a\n\n\u53d1\u73b0\u8fd9\u6837\u7528\u5e76\u67e5\u96c6\u590d\u6742\u5ea6\u6709\u70b9\u5047\uff0c\u4f1a\u8bc1\u7684\u53ef\u4ee5\u544a\u8bc9\u7a9d\u5440QAQ\n\n\u53cd\u6b63\u80fd\u8fc7QAQ\n\n## Code\uff1a\n```cpp\n#include<cstdio>\n#include<utility>\ntypedef std::pair<int,int>PII;\nconst int N=100005;\nint n,m,q;\nPII e[N<<1];\nint c[N][4],g[N],tot[N<<1],ans[N],C,fa[N],top=0;\nstd::pair<int,int>sta[N*60];\nint find(int x){\n\tif(x==fa[x])return x;\n\tsta[++top]=std::make_pair(x,fa[x]);return fa[x]=find(fa[x]);\n}\nvoid solve(int l,int r){\n\tif(l==r)ans[l]=C==1;else{\n\t\tconst int preC=C,mid=l+r>>1;\n\t\tint head=top;\n\t\tfor(int i=mid+1;i<=r;++i)\n\t\tfor(int j=g[i]-1;~j;--j){\n\t\t\tconst int v=c[i][j];\n\t\t\tif(!--tot[v]){\n\t\t\t\tint x=find(e[v].first),y=find(e[v].second);\n\t\t\t\tif(x!=y){\n\t\t\t\t\t--C;\n\t\t\t\t\tsta[++top]=std::make_pair(x,fa[x]);\n\t\t\t\t\tfa[x]=y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsolve(l,mid);\n\t\tfor(int i=mid+1;i<=r;++i)\n\t\tfor(int j=g[i]-1;~j;--j)++tot[c[i][j]]; \n\t\tC=preC;\n\t\twhile(top!=head){\n\t\t\tconst PII a=sta[top--];\n\t\t\tfa[a.first]=a.second;\n\t\t}\n\t\tfor(int i=l;i<=mid;++i)\n\t\tfor(int j=g[i]-1;~j;--j){\n\t\t\tconst int v=c[i][j];\n\t\t\tif(!--tot[v]){\n\t\t\t\tint x=find(e[v].first),y=find(e[v].second);\n\t\t\t\tif(x!=y){\n\t\t\t\t\t--C;\n\t\t\t\t\tsta[++top]=std::make_pair(x,fa[x]);\n\t\t\t\t\tfa[x]=y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tsolve(mid+1,r);\n\t\tfor(int i=l;i<=mid;++i)\n\t\tfor(int j=g[i]-1;~j;--j)++tot[c[i][j]]; \n\t\tC=preC;\n\t\twhile(top!=head){\n\t\t\tconst PII a=sta[top--];\n\t\t\tfa[a.first]=a.second;\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tC=n;\n\tfor(int i=1;i<=n;++i)fa[i]=i;\n\tfor(int i=1;i<=m;++i)scanf(\"%d%d\",&e[i].first,&e[i].second);\n\tscanf(\"%d\",&q);\n\tfor(int i=1;i<=q;++i){\n\t\tscanf(\"%d\",&g[i]);\n\t\tfor(int j=0;j<g[i];++j)scanf(\"%d\",&c[i][j]),++tot[c[i][j]];\n\t}\n\tfor(int i=1;i<=m;++i)if(!tot[i]){\n\t\tint u=find(e[i].first),v=find(e[i].second);\n\t\tif(u!=v)--C,fa[v]=u;\n\t}\n\ttop=0;\n\tsolve(1,q);\n\tfor(int i=1;i<=q;++i)puts(ans[i]?\"Connected\":\"Disconnected\");\n\treturn 0;\n}\n```",
        "postTime": 1551342983,
        "uid": 6813,
        "name": "mrsrz",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 P5227 \u3010[AHOI2013]\u8fde\u901a\u56fe\u3011"
    },
    {
        "content": "## \u524d\u8a00\n\n[\u9898\u76ee\u94fe\u63a5](https://www.luogu.com.cn/problem/P5227)\n\n\u7b2c\u4e00\u9053\u72ec\u7acb\u8c03\u51fa\u6765\u7684\u7ebf\u6bb5\u6811\u5206\u6cbb\uff0c\u7eaa\u5ff5\u4e0b\uff0c~~\u867d\u7136\u662f\u677f\u5b50~~\u3002\n\n\u8ddf\u4e8c\u5206\u56fe\u90a3\u4e00\u9898\u57fa\u672c\u5dee\u4e0d\u591a\u3002\n\n## \u6b63\u6587\n\n\u4e00\u53e5\u8bdd\u9898\u610f\uff1a\u52a8\u6001\u65e0\u5411\u56fe\uff0c\u652f\u6301\u5220\u8fb9\uff0c\u5224\u65ad\u56fe\u7684\u8fde\u901a\u6027\u3002\u50cf\u8fd9\u79cd\u52a8\u6001\u56fe\u7684\u95ee\u9898\uff0c\u5927\u90e8\u5206\u90fd\u53ef\u4ee5\u4f7f\u7528**\u7ebf\u6bb5\u6811\u5206\u6cbb**\u6765\u8f7b\u677e\u89e3\u51b3\u3002\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u76ee\uff0c\u5220\u8fb9\u80af\u5b9a\u4e0d\u597d\u76f4\u63a5\u505a\uff0c\u8003\u8651\u5c06\u5220\u8fb9\u8f6c\u5316\u4e3a\u52a0\u8fb9\uff1a\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u5176\u6240\u6709\u7684**\u51fa\u73b0\u533a\u95f4**\uff0c\u5176\u4e2d\u8fd9\u4e2a\u201c\u533a\u95f4\u201d\u662f**\u4ee5\u65f6\u95f4\u4e3a\u8f74**\u7684\u3002\u5177\u4f53\u5730\uff0c\u5047\u5982\u5bf9\u4e8e\u8fb9 $i$\uff0c\u5b83\u5728\u7b2c $S_1,S_2,...,S_n$ \u4e2a\u96c6\u5408\u4e2d\u88ab\u5220\u9664\uff0c\u90a3\u4e48 $i$ \u7684\u51fa\u73b0\u533a\u95f4\u4e5f\u5c31\u53ef\u4ee5\u8868\u793a\u6210 $[1,S_1-1],[S_1+1,S_2-1],...,[S_n+1,k]$\u3002\u8fd9\u4e9b\u533a\u95f4\u663e\u7136\u53ef\u4ee5\u5f00 $m$ \u4e2a ```vector<int>``` \u5b58\u50a8\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u6bcf\u6761\u8fb9\u7684\u6bcf\u4e2a\u51fa\u73b0\u533a\u95f4 $[L,R]$\uff0c\u5c06\u5176\u6302\u5230\u7ebf\u6bb5\u6811\u4e0a\u5bf9\u5e94\u7684 $\\log$ \u4e2a\u5bf9\u5e94\u7ed3\u70b9\uff08\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u7ed3\u70b9\u5f00\u4e00\u4e2a ```vector<int>``` \u6765\u5b58\u50a8\u6302\u5728\u5b83\u4e0a\u9762\u7684\u8fb9\u7684\u96c6\u5408\uff09\u3002\u8fd9\u6837\u505a\u4e4b\u540e\uff0c\u4e0d\u96be\u53d1\u73b0\uff1a\u65f6\u95f4 $i$ \u4e0a\u6240\u6709\u51fa\u73b0\u7684\u8fb9\u5c31\u662f\u4ece\u7ebf\u6bb5\u6811\u6839\u7ed3\u70b9\u8d70\u5230 $i$ \u5bf9\u5e94\u53f6\u5b50\u7ed3\u70b9\u4e0a\u6240\u6709\u8fb9\u96c6\u7684\u5e76\u96c6\u3002\n\n\u7136\u540e\u518d\u8003\u8651\u76f4\u63a5 dfs \u904d\u5386\u4e00\u904d\u8fd9\u4e2a\u7ebf\u6bb5\u6811\uff0c\u671f\u95f4\u4f7f\u7528\u53ef\u64a4\u9500\u5e76\u67e5\u96c6\u6765\u8fde\u8fb9\uff0c\u5982\u679c\u8d70\u5230\u53f6\u5b50\u7ed3\u70b9\uff0c\u5c31\u5224\u65ad\u5f53\u524d\u65f6\u523b\u7684\u8fde\u901a\u6027\uff0c\u56de\u6eaf\u7684\u65f6\u5019\u5728\u5e76\u67e5\u96c6\u91cc\u64a4\u9500\u5728\u5f53\u524d\u7ed3\u70b9\u6240\u8fde\u7684\u8fb9\uff0c\u8fd9\u6837\u7b54\u6848\u5c31\u88ab\u6211\u4eec\u79bb\u7ebf\u5730\u6c42\u51fa\u6765\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5927\u6982\u4e3a $\\mathcal{O}(n\\log^2n)$\u3002\n\n## Code\n\n```cpp\n#include<bits/stdc++.h>\n#define fi first\n#define se second\n#define Mp make_pair\n#define pb push_back\n#define For(i,a,b) for(int i=a;i<=b;i++)\n#define Rof(i,a,b) for(int i=a;i>=b;i--)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef double db;\ntypedef long double ld;\ntypedef std::pair<int,int> pii;\ntypedef std::pair<long long,long long> pll;\nusing namespace std;\n\nconst int N=2e5+5;\nconst int P=1e9+7;\nconst int inf=1e9;\nconst bool DataS=0;\n\nnamespace IO{\n\t#define pc putchar\n\t#define writes(x) write(x),pc(' ')\n\t#define writeln(x) write(x),pc('\\n')\n\ttemplate<class T=ll> T read(){\n\t\tT ans=0,flag=1;char ch=getchar();\n\t\tfor(;!isdigit(ch);ch=getchar()) if(ch=='-') flag=-1;\n\t\tfor(;isdigit(ch);ch=getchar()) ans=ans*10+(ch^48);\n\t\treturn ans*flag;\n\t}\n\ttemplate<class T> void read(T& x){x=read();}\n\ttemplate<class T1,class... T2> void read(T1& Arg,T2&... Args){read(Arg);read(Args...);}\n\ttemplate<class T> void write(T x){\n\t\tif(x<0) putchar('-'),x=-x;\n\t\tif(x>9) write(x/10);\n\t\tputchar(x%10+'0');\n\t}\n}using namespace IO;\n\nstruct Node{ \n\tint x,y,siz;\n}st[N];\n\nint n,m,k,top;\nint s[N],t[N],fa[N],siz[N];\nvector<int>v[N],S[N];\nbool ans[N];\n\nint find(int x){\n\twhile(x!=fa[x]) x=fa[x];  //\u6ce8\u610f\u4e0d\u8981\u8def\u5f84\u538b\u7f29\n\treturn x;\n}\n\nvoid merge(int x,int y){\n\tint fx=find(x),fy=find(y);\n\tif(fx==fy) return;\n\tif(siz[fx]>siz[fy]) swap(fx,fy);  //\u6309\u79e9\u5408\u5e76 \n\tst[++top]={fx,fy,siz[fy]};\n\tfa[fx]=fy;siz[fy]+=siz[fx];\n}\n\nvoid revoke(int tim){  //\u64a4\u9500\u64cd\u4f5c\n\twhile(top>tim){\n\t\tfa[st[top].x]=st[top].x;\n\t\tsiz[st[top].y]=st[top].siz;\n\t\ttop--;\n\t}\n}\n\nnamespace SGT_Solve{\n\t#define ls(k) k<<1\n\t#define rs(k) k<<1|1\n\tvector<int>T[N];\n\tvoid insert(int x,int y,int id,int l,int r,int now){  //\u63d2\u5165\n\t\tif(x<=l&&r<=y) return T[now].pb(id);\n\t\tint mid=(l+r)>>1;\n\t\tif(x<=mid) insert(x,y,id,l,mid,ls(now));\n\t\tif(y>mid) insert(x,y,id,mid+1,r,rs(now));\n\t}\n\tvoid solve(int l,int r,int now){\n\t\tif(l>r) return;\n\t\tint pre=top;\n\t\tfor(int id:T[now]) merge(s[id],t[id]);\n\t\tif(l==r) ans[l]=(siz[find(1)]==n);  //\u8fde\u901a\u5757\u5927\u5c0f\u4e3a n \u8bf4\u660e\u6574\u5f20\u56fe\u8fde\u901a \n\t\telse{\n\t\t\tint mid=(l+r)>>1;\n\t\t\tsolve(l,mid,ls(now));\n\t\t\tsolve(mid+1,r,rs(now));\n\t\t}\n\t\trevoke(pre);  //\u56de\u6eaf\u65f6\u64a4\u9500\u672c\u5c42\u7684\u64cd\u4f5c \n\t}\n}\n\nvoid Main(){\n\tread(n,m);\n\tFor(i,1,m) read(s[i],t[i]);\n\tFor(i,1,n) fa[i]=i,siz[i]=1;\n\tread(k);\n\tFor(i,1,k){\n\t\tint c=read();\n\t\tFor(j,1,c) S[i].pb(read());\n\t}\n\tFor(i,1,k) for(int j:S[i]) v[j].pb(i);\n\tFor(i,1,m){\n\t\tint l=1;\n\t\tfor(int j:v[i]){  //\u5c06\u6240\u6709\u51fa\u73b0\u533a\u95f4\u6302\u5728\u7ebf\u6bb5\u6811\u4e0a\n\t\t\tif(l<=j-1) SGT_Solve::insert(l,j-1,i,1,k,1);\n\t\t\tl=j+1;\n\t\t}\n\t\tif(l<=k) SGT_Solve::insert(l,k,i,1,k,1);\n\t}\n\tSGT_Solve::solve(1,k,1);\n\tFor(i,1,k) printf(ans[i]?\"Connected\\n\":\"Disconnected\\n\");\n}\n\nsigned main(){\n\tint T=DataS?read():1;\n\twhile(T--) Main();\n\treturn 0;\n}\n```\n",
        "postTime": 1678589583,
        "uid": 530180,
        "name": "King_Powers2021",
        "ccfLevel": 4,
        "title": "\u3010P5227 [AHOI2013]\u8fde\u901a\u56fe\u3011\u9898\u89e3"
    },
    {
        "content": "\n\u7ebf\u6bb5\u6811\u5206\u6cbb\u4e86\u89e3\u4e00\u4e0b\uff1f\u63a8\u8350\u4e00\u9053\u9898[BZOJ4025\u4e8c\u5206\u56fe](https://www.lydsy.com/JudgeOnline/problem.php?id=4025)\u3002\n\n## \u9898\u76ee\u5206\u6790\n\n\u9996\u5148\u65f6\u95f4\uff08\u8f93\u5165\u987a\u5e8f\uff09\u6392\u5e8f\uff0c\u5efa\u7ebf\u6bb5\u6811\u3002\n\u5220\u8fb9\u4e0d\u597d\u505a\uff08\u56e0\u4e3a\u662f\u4e00\u4e2a\u4e2a\u65f6\u95f4\u70b9\uff09\uff0c\u8003\u8651\u8f6c\u5316\u4e3a\u52a0\u8fb9\uff0c\u5c31\u53ef\u4ee5\u5957\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\u7684\u601d\u8def\uff0c\u5c06\u8fb9\u5b58\u5728\u7684\u533a\u95f4\u5bf9\u5e94\u5728\u7ebf\u6bb5\u6811\u4e0a\u7684\u5256\u5206\uff0c\u7136\u540e$dfs$\u7ebf\u6bb5\u6811\uff0c\u8d70\u5230\u4e00\u4e2a\u8282\u70b9\u4fbf\u52a0\u4e0a\u5bf9\u5e94\u7684\u8fb9\uff0c\u518d\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u4e00\u4e0b\u8fde\u901a\u6027\u3002\u6ce8\u610f\u8fd9\u91cc\u7684\u5e76\u67e5\u96c6\u6709\u64a4\u9500\u64cd\u4f5c\uff0c\u8bb0\u5f55\u4e00\u4e0b$unite$\u524d\u7684\u72b6\u6001\uff0c\u5728\u56de\u6eaf\u65f6\u4e00\u6b65\u6b65\u8fd8\u539f\u5373\u53ef\uff08\u6240\u4ee5\u4e0d\u80fd\u8def\u5f84\u538b\uff0c\u4f1a\u7834\u574f\u7ed3\u6784\uff09\uff0c\u5f53$l==r$\u65f6\uff0c\u5e76\u67e5\u96c6\u7684\u8fde\u901a\u6027\u4fbf\u662f\u65f6\u523bl\u5bf9\u5e94\u7684\u56fe\u7684\u8fde\u901a\u6027\uff0c\u5224\u65ad\u4e00\u4e0b$size$\u5373\u53ef\u3002\n\n## \u4ee3\u7801\u5982\u4e0b\n\n```cpp\n\n#include<list>\n#include<cstdio>\n#include<cstdlib>\n#define N 100005\n#define mid ((l+r)>>1)\nusing namespace std;\nint n,m,k,fa[N],sz[N],h[2000005],T_cnt=0,S_top=0,ans[N];\nstruct E{ int u,v; }e[N*2];\nstruct T{ int id,nex; }t[8000005];\nstruct Node{ int x,y,fa,sz; }S[N];\nlist<int> l[N*2];\ninline int In(){\n\tchar c=getchar(); int x=0,f=1;\n\tfor(;c<'0'||c>'9';c=getchar()) if(c=='-') f=-1;\n\tfor(;c>='0'&&c<='9';c=getchar()) x=x*10+c-'0';\n\treturn x;\n}\ninline int find(int x){\n\treturn fa[x]==x?x:find(fa[x]);\n}\ninline void unit(int a,int b){\n\tint x=find(a),y=find(b);\n\tif(x==y) return;\n\tif(sz[x]>sz[y]) swap(x,y);\n\tS[++S_top]=(Node){x,y,fa[x],sz[y]};\n\tsz[y]+=sz[x]; fa[x]=y;\n}\ninline void undo(int bck){\n\twhile(S_top>bck){\n\t\tfa[S[S_top].x]=S[S_top].fa;\n\t\tsz[S[S_top].y]=S[S_top].sz;\n\t\t--S_top;\n\t}\n}\nvoid Update(int L,int R,int C,int l,int r,int u){\n\tif(L<=l&&r<=R){ t[++T_cnt]=(T){C,h[u]}; h[u]=T_cnt; return; }\n\tif(L<=mid) Update(L,R,C,l,mid,u<<1);\n\tif(R>mid) Update(L,R,C,mid+1,r,u<<1|1);\n}\nvoid Solve(int l,int r,int x){\n\tint S_bck=S_top;\n\tfor(int i=h[x];i;i=t[i].nex){\n\t\tint u=e[t[i].id].u,v=e[t[i].id].v;\n\t\tunit(u,v);\n\t}\n\tif(l==r) ans[l]=(sz[find(1)]==n);\n\telse Solve(l,mid,x<<1),Solve(mid+1,r,x<<1|1);\n\tundo(S_bck);\n}\nint main(){\n\tn=In(); m=In(); int last;\n\tlist<int>::iterator it;\n\tfor(int i=1;i<=n;++i) fa[i]=i,sz[i]=1;\n\tfor(int i=1;i<=m;++i)\n\te[i].u=In(),e[i].v=In();\n\tk=In();\n\tfor(int i=1;i<=k;++i)\n\tfor(int c=In();c;--c)\n\tl[In()].push_back(i);\n\tfor(int i=1;i<=m;++i){\n\t\tl[i].push_back(k+1); l[i].sort();\n\t\tfor(last=1,it=l[i].begin();it!=l[i].end();++it){\n\t\t\tif(last!=*it) Update(last,*it-1,i,1,k,1);\n\t\t\tlast=*it+1;\n\t\t}\n\t}\n\tSolve(1,k,1);\n\tfor(int i=1;i<=k;++i) printf(ans[i]?\"Connected\\n\":\"Disconnected\\n\");\n\treturn 0;\n}\n\n```",
        "postTime": 1551151829,
        "uid": 86324,
        "name": "pkh68",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 P5227 \u3010[AHOI2013]\u8fde\u901a\u56fe\u3011"
    },
    {
        "content": "\u5982\u679c\u6211\u4eec\u6309\u7167\u9898\u76ee\u7684\u8bf4\u6cd5\u53bb\u5220\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u4f1a\u5f97\u5230\u4e00\u4e2a\u65b0\u56fe\u3002\n\n\u5982\u4f55\u5224\u65ad\u4e00\u4e2a\u65b0\u56fe\u7684\u8fde\u901a\u6027\uff1f\u4f3c\u4e4e\u53ea\u80fd\u91cd\u65b0\u8dd1\u4e00\u6b21\u641c\u7d22\uff0c\u590d\u6742\u5ea6\u4e0a\u5929\u3002\n\n\u89c2\u5bdf\u5230 $c\\le 4$\uff0c\u6240\u4ee5\u4e00\u6761\u8fb9\u4f1a\u5728\u5927\u90e8\u5206\u65f6\u95f4\u5185\u5b58\u5728\u3002\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u628a\u201c\u5220\u8fb9\u201d\u6539\u6210\u201c\u52a0\u8fb9\u201d\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u95ee\u9898\u53d8\u6210\uff1a\u7ed9\u5b9a\u4e00\u4e2a\u56fe\uff0c\u6bcf\u6761\u8fb9\u5728**\u4e00\u4e2a\u7279\u5b9a\u65f6\u95f4**\u5b58\u5728\uff0c\u6c42**\u6bcf\u4e00\u65f6\u523b**\uff0c\u56fe\u662f\u5426\u662f\u8fde\u901a\u56fe\u3002\n\n\u89c2\u5bdf\u65f6\u95f4\u548c\u65f6\u523b\uff0c\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u7528\u7ebf\u6bb5\u6811\u5206\u6cbb\u89e3\u51b3\u3002\u603b\u7684\u65f6\u95f4\u4e2a\u6570\u662f $kc$ \u4e2a\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u8db3\u591f\u901a\u8fc7\u3002\n\n\u6211\u4eec\u601d\u8003\u4ec0\u4e48\u65f6\u5019\u56fe\u662f\u8fde\u901a\u56fe\uff1a\u56fe\u53ea\u6709\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u8fde\u901a\u5757\u7684\u5927\u5c0f\u662f\u70b9\u6570 $n$\u3002\n\n\u5f88\u663e\u7136\u8bb0\u5f55\u8fde\u901a\u5757\u7684\u5927\u5c0f\u6bd4\u8bb0\u5f55\u8fde\u901a\u5757\u7684\u4e2a\u6570\u7b80\u5355\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8fb9\u548c\u8fde\u901a\u5757\u7684\u5173\u7cfb\u4e86\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u5bf9\u65f6\u95f4\u8f74\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u6bcf\u6b21\u5c06\u52a0\u8fb9\u533a\u95f4\u4e22\u5230\u7ebf\u6bb5\u6811\u4e0a\u9762\uff0c\u5728\u53f6\u5b50\u8282\u70b9\u5224\u65ad\u5f53\u524d\u5e76\u67e5\u96c6\u662f\u5426\u6ee1\u8db3\u8fde\u901a\u5757\u7684\u5927\u5c0f\u662f $n$ \u8fd9\u4e00\u9650\u5236\u3002\n\n\u4f46\u662f\u9898\u76ee\u7ed9\u4e86**\u5220\u8fb9\u65f6\u523b**\uff0c\u6240\u4ee5\u6574\u4e2a\u65f6\u95f4\u9664\u4e86**\u5220\u8fb9\u65f6\u523b**\u5176\u4ed6\u90fd\u662f**\u8fb9\u5b58\u5728\u7684\u65f6\u95f4**\u3002\n\n\u5177\u4f53\u5730\uff0c\u5047\u5982\u4e00\u6761\u8fb9\u6d88\u5931\u7684\u65f6\u523b\u662f $t_1$ \u548c $t_2$\uff0c\u5219 $[1,t_1)$ \u4e0e $(t_2,k]$ \u90fd\u662f\u8fd9\u6761\u8fb9\u5b58\u5728\u7684\u65f6\u95f4\u3002\n\n\u7528\u4e00\u4e2a vector \u8bb0\u5f55\u8fd9\u4e9b\u6d88\u5931\u7684\u65f6\u523b\uff0c\u5219\u8be5\u8fb9\u76f8\u90bb\u7684\u4e24\u4e2a\u6d88\u5931\u65f6\u523b\u7684\u5dee\u5c31\u662f\u8fb9\u5b58\u5728\u7684\u65f6\u95f4\u4e86\uff0c\u5f88\u65b9\u4fbf\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u4e0a\uff0c\u8981\u8bb0\u4f4f\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\uff0c\u56e0\u4e3a\u5e76\u67e5\u96c6\u8981\u64a4\u9500\u3002\n\n\u4e0d\u4ec5\u5982\u6b64\uff0c\u53ef\u4ee5\u628a\u534a\u95ed\u534a\u5f00\u533a\u95f4\u6539\u6210\u5168\u5f00\u7684\u533a\u95f4\uff0c\u5728\u4e22\u5165\u7ebf\u6bb5\u6811\u65f6\u518d\u4f5c\u52a0\u51cf\u5904\u7406\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define fs(i,x,y,z) for(int i=x;i<=y;i+=z)\n#define ft(i,x,y,z) for(int i=x;i>=y;i+=z)\n#define ll long long\n#define ull unsigned long long\n#define db double\n#define ms(a,b) memset(a,b,sizeof(a))\n#define sz(a) sizeof(a)\n#define mid ((l+r)>>1) \n#define ls (now<<1)\n#define rs (now<<1|1)\nusing namespace std;\nconst int rw[]={-1,0,1,0,-1,1,-1,1},cl[]={0,1,0,-1,-1,1,1,-1};\nconst int N=600001,inf=0x3f3f3f3f;\ninline int read(){\n\tint date=0,w=1;char c=0;\n\twhile(c<'0'||c>'9'){if(c=='-')w=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){date=date*10+c-'0';c=getchar();}\n\treturn date*w;\n}\nvector<int> tme[N];//\u6bcf\u6761\u8fb9\u7684\u51fa\u73b0\u65f6\u95f4\u8868 \nint n,m,u[N],v[N],k,e[N],c[N],res[N],lst[N],q,pre[N];//\u6bcf\u6b21\u64cd\u4f5c\u628ae[i]\u653e\u6210c[i]\uff0clst[i]\u4e3a\u7b2ci\u6761\u8fb9\u4fdd\u6301\u5f53\u524d\u989c\u8272\u7684\u6700\u540e\u65f6\u95f4 \n//pre[i]\u8868\u793a\u7b2ci\u6761\u8fb9\u5728\u8fdb\u884c\u672c\u6b21\u64cd\u4f5c\u65f6\u7684\u989c\u8272 \nstruct node{vector<int> czs;}tr[N<<2];//czs\u653e\u7684\u662f\u6b64\u65f6\u6b64\u523b\u54ea\u4e9b\u8fb9\u5728\u573a \nvoid upd(int l,int r,int now,int ql,int qr,int val){\n\tif(l>r||ql>qr) return;//\u9488\u5bf9\u4e00\u5f00\u59cb\u5c31\u6d88\u5931\u7684\u60c5\u51b5 \n\tif(ql<=l&&r<=qr) return void(tr[now].czs.push_back(val));\n\tif(ql<=mid) upd(l,mid,ls,ql,qr,val);\n\tif(qr>mid) upd(mid+1,r,rs,ql,qr,val);\n}\nstruct cz{int x,y,s;};//c\u662f\u64cd\u4f5c\u7684\u989c\u8272 \nstack<cz> st;//\u8fd9\u4e2a\u6808\u5b58\u4e86\u6bcf\u4e2a\u6570\u88abA\u4e0a\u53bb\u524d\u662f\u8c01 \nstruct dsu{\n\tint fa[N<<1],sz[N<<1];\n\tvoid init(int n){fs(i,1,n,1) fa[i]=i,sz[i]=1;}\n\tint find(int x){return fa[x]==x?x:find(fa[x]);}//\u4e0d\u80fd\u8def\u5f84\u538b\u7f29\uff01\n\tvoid mrg(int x,int y){\n\t\tx=find(x),y=find(y);//if(x==y) return;\n\t\tif(sz[x]<sz[y]) swap(x,y);//\u4fdd\u8bc1sz[x]>=sz[y] \n\t\tfa[y]=x;if(x!=y) sz[x]+=sz[y];\n\t\tst.push({x,y,sz[y]});\n\t} \n\tvoid del(){\n\t\tcz now=st.top();st.pop();\n\t\tfa[now.y]=now.y;sz[now.x]-=now.s;\n\t\tsz[now.y]=now.s;\n\t}\n}d; \nvoid solve(int l,int r,int now){\n\tint cur=st.size();//\u73b0\u5728\u7684\u5927\u5c0f\n\tfor(auto i:tr[now].czs){//i\u662f\u5f53\u524d\u8fd9\u4e2a\u64cd\u4f5c \n\t\tint x=u[i],y=v[i];//,col=c[i];\n\t\td.mrg(x,y);//,d[col].mrg(x,y+n,col);//x\u548cy\u4e92\u76f8\u5bf9\u7acb \n\t}\n\tif(l==r){\n\t\tif(d.sz[d.find(1)]==n) puts(\"Connected\");\n\t\telse puts(\"Disconnected\");\n\t\twhile(st.size()>cur) d.del();\n\t\treturn;\n\t}\n\tsolve(l,mid,ls);solve(mid+1,r,rs);\n\twhile(st.size()>cur) d.del(); //\u65f6\u95f4\u8f74\u8dd1\u5b8c\u4e86\uff0c\u8be5\u56de\u6eaf\u4e86\uff0c\u628a\u8fd9\u4e00\u5c42\u7684\u6240\u6709\u64cd\u4f5c\u90fd\u5220\u4e86\u5427\n}\nint main(){\n\tn=read(),m=read();\n\td.init(2*n);\n\tfs(i,1,m,1) u[i]=read(),v[i]=read(),tme[i].push_back(0);//lst[i]=q;//\u5230q\u4e3a\u6b62 \n\tq=read();\n\tfs(i,1,q,1){\n\t\tint x=read();\n\t\tfs(j,1,x,1) tme[read()].push_back(i);\n\t}\n\tfs(i,1,m,1) tme[i].push_back(q+1);\n\tfs(i,1,m,1){\n\t\tint pq=tme[i].size();\n\t\tfs(j,0,pq-1,1) upd(1,q,1,tme[i][j]+1,tme[i][j+1]-1,i);\n\t}\n\tsolve(1,q,1); \n//\tfs(i,1,q,1) printf(\"%s\\n\",res[i]>0?\"YES\":(res[i]==0?\"NO\":\"QwQ\")); \n\treturn 0;\n}\n```",
        "postTime": 1682932397,
        "uid": 336603,
        "name": "\u51fa\u8a00\u4e0d\u900a\u738b\u5b50",
        "ccfLevel": 0,
        "title": "P5227"
    }
]