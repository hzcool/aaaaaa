[
    {
        "content": "\n## \u89e3\u9898\u601d\u8def\n\n\u5f53\u7136\u8fd9\u662f\u4e00\u9053\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u6a21\u677f\u9898\uff0c\u4f46\u6211\u4eec\u6709\u66f4\u7b80\u5355\u66f4\u5feb\u7684\u505a\u6cd5\n\n\u8bf7\u60f3\u8c61\u4e00\u4e0b\u8d85\u7ea7\u66b4\u529b bfs \u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u4ece s \u70b9\u5f00\u59cb bfs\uff0c\u626b\u4e00\u904d\u627e\u5230\u5305\u542b s \u7684\u533a\u95f4\uff0c\u4ece\u800c\u8f7b\u677e\u627e\u5230\u548c s \u8ddd\u79bb\u4e3a 1 \u7684\u70b9\uff0c\u6211\u4eec\u518d\u7528\u8ddd\u79bb\u4e3a 1 \u7684\u70b9\u627e\u5230\u8ddd\u79bb\u4e3a 2 \u7684\u70b9\n\n\u8fd9\u6837\u663e\u7136\u5f88\u66b4\u529b\uff0c\u4f46\u53ef\u559c\u7684\u662f\uff0c\u6211\u4eec\u6709\u4e9b\u5730\u65b9\u8fd8\u53ef\u4ee5\u4f18\u5316\n\n* bfs \u8fc7\u7a0b\u4e2d\u6bcf\u4e2a\u70b9\u53ea\u88ab\u66f4\u65b0\u4e00\u6b21\u4e14\u53ea\u66f4\u65b0\u522b\u4eba\u4e00\u6b21\n* \u9700\u8981\u5feb\u901f\u627e\u5230\u5305\u542b s \u7684\u533a\u95f4\uff0c\u5e76\u5220\u4e4b\n\n\u90a3\u4e48\u7b2c\u4e00\u4e2a\u4f18\u5316\u6211\u4eec\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u5c31\u53ef\u4ee5\u7ef4\u62a4\uff0c\u8fd9\u662f\u7ecf\u5178\u5957\u8def\u4e0d\u518d\u591a\u8bf4\n\n\u7b2c\u4e8c\u4e2a\u4f18\u5316\u4f7f\u7528\u7ebf\u6bb5\u6811\uff0c\u5c06\u533a\u95f4\u6302\u5728\u7ebf\u6bb5\u6811\u4e0a\uff0c\u8be2\u95ee\u65f6\u76f4\u63a5\u628a\u6839\u8282\u70b9\u5230\u5bf9\u5e94\u53f6\u5b50\u8282\u70b9\u4e0a\u6302\u7684\u533a\u95f4\u5168\u90e8\u6254\u5230\u961f\u5217\u4e2d\u5e76\u5220\u9664\n\n\u603b\u590d\u6742\u5ea6 $\\Theta((n+m)log_n$ \u6e29\u99a8\u63d0\u793a\uff1a\u6700\u597d\u4e0d\u8981\u7528 vector \u3002\u76ee\u524d\u662f\u6700\u4f18\u89e3\n\n```cpp\nconst int M = 200500;\nconst int N = 500500;\nint m, n, s;\nint l1[M], r1[M], l2[M], r2[M];\nbool vis[N]; int dis[N], f[N];\n\nint find(int x) {\n\treturn f[x] == x ? x : f[x] = find(f[x]);\n}\n\n#define ls p << 1\n#define rs ls | 1\n\nstruct node {\n\tint l, r, k;\n}q[N];\nint h[N<<2], ne[N<<4], to[N<<4], tot;\ninline void add(int x, int y) {\n\tne[++tot] = h[x], to[h[x] = tot] = y;\n}\n\nvoid change(int p, int l, int r, int L, int R, int k) {\n\tif (L <= l && r <= R) return add(p, k);\n\tint mid = (l + r) >> 1;\n\tif (L <= mid) change(ls, l, mid, L, R, k);\n\tif (mid < R) change(rs, mid + 1, r, L, R, k);\n}\n\nint L, R;\nvoid update(int p, int l, int r, int x, int k) {\n\tif (h[p]) {\n\t\tfor (int i = h[p]; i; i = ne[i]) {\n\t\t\tint tp = to[i];\n\t\t\tif (!vis[tp]) q[++R] = ((node){l2[tp], r2[tp], k}), vis[tp] = 1;\n\t\t}\n\t\th[p] = 0;\n\t}\n\tif (l == r) return;\n\tint mid = (l + r) >> 1;\n\tif (x <= mid) update(ls, l, mid, x, k);\n\telse update(rs, mid + 1, r, x, k); \n}\n\nvoid bfs(int s) {\n\tL = 1, R = 0;\n\tq[++R] = ((node){s, s, 0});\n\twhile (L <= R) {\n\t\tnode x = q[L++];\n\t\tfor (int i = find(x.l); i <= x.r; i = find(i + 1)) \n\t\t\tupdate(1, 1, n, i, x.k + 1), dis[i] = x.k, f[i] = i + 1;\n\t}\n}\n\nint main() {\n\tread(n), read(m), read(s);\n\tfor (int i = 1;i <= m; i++) {\n\t\tread(l1[i]), read(r1[i]), read(l2[i]), read(r2[i]);\n\t\tchange(1, 1, n, l1[i], r1[i], i); \n\t\tl1[i + m] = l2[i], r1[i + m] = r2[i];\n\t\tl2[i + m] = l1[i], r2[i + m] = r1[i];\n\t\tchange(1, 1, n, l2[i], r2[i], i + m);\n\t}\n\tfor (int i = 1;i <= n + 1; i++) f[i] = i; bfs(s);\n\tfor (int i = 1;i <= n; i++) write(dis[i]);\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1594624437,
        "uid": 122144,
        "name": "hs_black",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6348 \u3010[PA2011]Journeys\u3011"
    },
    {
        "content": "\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u6a21\u677f\u9898\u3002\n\n\u5efa\u7acb\u4e00\u68f5\u5165\u6811\uff0c\u4e00\u68f5\u51fa\u6811\uff0c\u5bf9\u4e8e\u6bcf\u6b21\u8fde\u8fb9\u5efa\u4e24\u4e2a\u865a\u70b9\uff0c\u5728\u5176\u95f4\u8fde\u4e00\u6761\u6743\u4e3a\u4e00\u7684\u8fb9\uff1b\u7136\u540e\u4ece\u51fa\u6811\u8fde\u51fa\u6765\uff0c\u8fde\u8fdb\u53bb\u5165\u6811\uff0c\u8fb9\u6743\u5747\u4e3a $0$\u3002\u6ce8\u610f\u8fb9\u662f\u53cc\u5411\u7684\uff0c\u56e0\u6b64\u9700\u8981\u505a\u4e24\u904d\u3002\n\n\u6700\u77ed\u8def\u4e0d\u9700\u8981 Dijkstra\uff0c\u53ea\u9700\u8981 01BFS\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n\u6838\u5fc3\u4ee3\u7801\uff1a\n\n```cpp\nint n,q,S,tot,ls[4000005],rs[4000005],dis[4000005],h[4000005],cnt;\nstruct Edge{\n\tint to,next,value;\n}e[8000005];\nvoid AddEdge(int x,int y,int z){\n\te[++cnt]={y,h[x],z};\n\th[x]=cnt;\n}\nvoid Dijkstra() {\n\tmemset(dis,0x3f,sizeof(dis));\n\tdeque<int> q;\n\tdis[S]=0;\n\tq.push_back(S);\n\twhile(!q.empty()) {\n\t\tint now=q.front();\n\t\tq.pop_front();\n\t\tfor(int i=h[now]; i; i=e[i].next) {\n\t\t\tint y=e[i].to,v=e[i].value;\n\t\t\tif(dis[y]>dis[now]+v) {\n\t\t\t\tdis[y]=dis[now]+v;\n\t\t\t\tif(v)q.push_back(y);\n\t\t\t\telse q.push_front(y);\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)printf(\"%d\\n\",dis[i]);\n}\nvoid Build(int &p,int &q,int l,int r) {\n\tif(l==r){\n\t\tp=l,q=l;\n\t\treturn ;\n\t}\n\tif(!p)p=++tot;\n\tif(!q)q=++tot;\n\tint mid=(l+r)/2;\n\tBuild(ls[p],ls[q],l,mid),AddEdge(ls[p],p,0),AddEdge(q,ls[q],0);\n\tBuild(rs[p],rs[q],mid+1,r),AddEdge(rs[p],p,0),AddEdge(q,rs[q],0);\n}\nvoid Add(int p,int l,int r,int x,int y,int z,int flag) {\n\tif(x<=l&&r<=y) {\n\t\tif(flag)AddEdge(z,p,0);\n\t\telse AddEdge(p,z,0);\n\t\treturn ;\n\t}\n\tint mid=(l+r)/2;\n\tif(x<=mid)Add(ls[p],l,mid,x,y,z,flag);\n\tif(mid<y)Add(rs[p],mid+1,r,x,y,z,flag);\n}\nint main() {\n\tn=read(),q=read(),S=read(),tot=n;\n\tint root1=0,root2=0;\n\tBuild(root1,root2,1,n);\n\twhile(q--){\n\t\tint x=read(),y=read(),z=read(),w=read(),a=++tot,b=++tot;\n\t\tAddEdge(a,b,1);\n\t\tAdd(root1,1,n,x,y,a,0);\n\t\tAdd(root2,1,n,z,w,b,1);\n\t\ta=++tot,b=++tot;\n\t\tAddEdge(a,b,1);\n\t\tAdd(root1,1,n,z,w,a,0);\n\t\tAdd(root2,1,n,x,y,b,1);\n\t}\n\tDijkstra();\n}\n```",
        "postTime": 1586481652,
        "uid": 42156,
        "name": "feecle6418",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6348 \u3010[PA2011]Journeys\u3011"
    },
    {
        "content": "[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/P6348)\n\n# \u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\n\n\u6211\u4eec\u53ef\u4ee5\u4ece\u6700\u6734\u7d20\u7684\u601d\u8def\u5f00\u59cb\u60f3\u8d77\u3002\n\n## 0.0 \u66b4\u529b\u5efa\u56fe\n\n\u5bf9\u4e8e\u4e00\u5806\u9053\u8def $(a,b),(c,d)$\uff0c\u4e24\u4e24\u8fde\u8fb9\u3002\n\n## 1.0 \u8fde\u5411\u516c\u5171\u8fb9\n\n\u5bf9\u4e8e\u4e00\u5806\u9053\u8def $(a,b),(c,d)$\uff0c\u6211\u4eec\u8ba9 $(a,b)$ \u8fde\u5411\u4e00\u4e2a\u865a\u62df\u70b9 $k$\uff0c\n\n\u518d\u4ece $k$ \u5411 $(c,d)$ \u8fde\u8fb9\u3002\n\n\u4f46\u662f\u8fd9\u6837\u603b\u5171\u8981\u8fde $2nm$ \u6761\u8fb9\uff0c\u80af\u5b9a\u4f1a\u70b8\u3002\n\n\u6240\u4ee5\u8981\u60f3\u529e\u6cd5\u4f18\u5316\u8fde\u8fb9\u7684\u8fb9\u6570\u3002\n\n## 2.0 \u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\n\n\u8fd9\u4e2a\u65f6\u5019\u7ebf\u6bb5\u6811\u91cd\u78c5\u51fa\u51fb\u3002\n\n- **\u6027\u8d28 2.1** \u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u7684\u70b9 $(l,r)$\uff0c\u4e00\u4e2a\u5305\u542b\u5b83\u7684\u533a\u95f4 $(L,R)$ \u8fde\u5411\u7684\u70b9\uff0c\u90a3\u4e48 $(l,r)$ \u4e5f\u80fd\u8fde\u5411\u3002\n\n- **\u6027\u8d28 2.2** \u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\u7684\u70b9 $(l,r)$\uff0c\u53e6\u4e00\u4e2a\u70b9 $a$ \u5982\u679c\u80fd\u5230\u8fbe\u4e00\u4e2a\u5305\u542b $(l,r)$ \u533a\u95f4 $(L,R)$\uff0c\u90a3\u4e48\u70b9 $a$ \u4e5f\u80fd\u5230\u8fbe $(l,r)$\u3002\n\n**\u7531\u6b64\uff0c\u6211\u4eec\u4fbf\u53ef\u5efa\u51fa\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u8fdb\u6811\u548c\u51fa\u6811\u3002**\n\n**\u540c\u65f6\uff0c\u8fd9\u4e5f\u662f\u4e3a\u4ec0\u4e48\u8fdb\u6811\u4ece\u7236\u8282\u70b9\u8fde\u5411\u5b50\u8282\u70b9\uff0c\u4e8c\u51fa\u6811\u4ece\u5b50\u8282\u70b9\u8fde\u5411\u7236\u8282\u70b9\u7684\u539f\u56e0\u3002**\n\n\u4e0d\u628a\u4e24\u68f5\u6811\u5efa\u5230\u4e00\u5757\uff0c\u662f\u4e3a\u4e86\u9632\u6b62\u76f4\u63a5\u987a\u7740\u7ebf\u6bb5\u6811\u76f4\u63a5\u8d70\u5b8c\u6240\u6709\u70b9\u3002\n\n\u800c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4 $(l,r)$ \u5b83\u5728\u8fdb\u6811\u3001\u51fa\u6811\u672c\u8d28\u4e0a\u662f\u4e00\u4e2a\u70b9\u3002\n\n\u6240\u4ee5**\u7ecf\u8fc7\u67d0\u6761\u8fb9\u5230\u8fbe\u8fdb\u6811\u540e\uff0c\u53ef\u4ee5\u56de\u5230\u51fa\u6811\u7ee7\u7eed\u8d70\u4e0b\u4e00\u6761\u8fb9**\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u8fdb\u6811\u7684\u70b9\u76f4\u63a5\u8fde\u5411\u5bf9\u5e94\u7684\u51fa\u6811\u7684\u70b9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lbokvrg5.png)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/df63re4h.png)\n\n\u56fe\u4e2d\u7eff\u8272\u7684\u8fb9\u6743\u4e4b\u6807\u4e0a $1$\uff0c\u4f46\u662f\u6700\u540e\u7b54\u6848\u8981\u9664\u4ee5 $2$\u3002\n\n\u56e0\u4e3a\u4ece $(a,b)$ \u8fde\u5230 $(c,d)$ \u7ecf\u8fc7\u4e24\u6761\u7eff\u8fb9\uff0c\u8def\u7a0b\u7b97\u4e86 $2$\uff0c\u4f46\u5176\u5b9e\u53ea\u7528\u7b97\u4e00\u6761\uff0c\u6240\u4ee5\u8981\u9664\u4ee5 $2$\u3002\n\n\u6216\u8005\u8fde\u5411\u7eff\u70b9\u7684\u8fb9\u548c\u7eff\u70b9\u8fde\u51fa\u7684\u8fb9\u4efb\u610f\u4e00\u4e2a\u6807\u6743\u503c\u4e5f\u53ef\u4ee5\u3002\n\n## code\n\n```cpp\n#include<bits/stdc++.h>\n#define ls(o) (o<<1)\n#define rs(o) (o<<1|1)\n//#define int long long\nusing namespace std;\nconst int N=500010,M=4200010;\nint n,m,p,out,num[N];\nstruct edge{\n    int v,w;\n};\nvector<edge> g[M];\nvoid build_in(int o,int l,int r){\n    if(l==r)return;\n    int mid=l+r>>1;\n    build_in(ls(o),l,mid);\n    build_in(rs(o),mid+1,r);\n    g[o].push_back({ls(o),0});\n    g[o].push_back({rs(o),0});\n}\nvoid build_out(int o,int l,int r){\n    g[o].push_back({o+n*4,0});\n    if(l==r)return (void)(num[l]=o+n*4);\n    int mid=l+r>>1;\n    build_out(ls(o),l,mid);\n    build_out(rs(o),mid+1,r);\n    g[ls(o)+n*4].push_back({o+n*4,0});\n    g[rs(o)+n*4].push_back({o+n*4,0});\n}\nvoid merge1(int o,int l,int r,int x,int y,int k){\n    if(l>=x&&r<=y)return (void)(g[k].push_back({o,1}),g[o+n*4].push_back({k+1,1}));\n    int mid=l+r>>1;\n    if(mid>=x)merge1(ls(o),l,mid,x,y,k);\n    if(mid<y)merge1(rs(o),mid+1,r,x,y,k);\n}\nvoid merge2(int o,int l,int r,int x,int y,int k){\n    if(l>=x&&r<=y)return (void)(g[k+1].push_back({o,1}),g[o+n*4].push_back({k,1}));\n    int mid=l+r>>1;\n    if(mid>=x)merge2(ls(o),l,mid,x,y,k);\n    if(mid<y)merge2(rs(o),mid+1,r,x,y,k);\n}\nint d[M];\nbool vis[M];\ndeque<int> q;\nvoid dijstra(int s){\n    memset(d,127,sizeof(d));\n    d[s]=0;\n    q.push_front(s);\n    while(!q.empty()){\n        int u=q.front();\n        q.pop_front();\n//      if(vis[u])continue;\n//      vis[u]=1;\n        for(int i=0;i<g[u].size();i++){\n            int v=g[u][i].v;\n//          if(vis[v])continue;\n            int w=g[u][i].w;\n            if(d[v]>d[u]+w){\n                d[v]=d[u]+w;\n                if(w==1)q.push_back(v);\n                else q.push_front(v);\n            }\n        }\n    }\n}\ninline char nc(){\n    static char buf[1000010],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,1000010,stdin),p1==p2)?EOF:*p1++;\n}\n//#define nc getchar\ninline int read(){\n    register int s=0,w=0;\n    static char ch=nc();\n    for(;!isdigit(ch);)ch=nc();\n    for(;isdigit(ch);){\n        s=(s<<1)+(s<<3)+(ch^48);\n        ch=nc();\n    }\n    return w?-s:s;\n}\nsigned main(){\n    n=read(),m=read(),p=read();\n    build_in(1,1,n);\n    build_out(1,1,n);\n    for(register int a,b,c,d,i=1;i<=m;++i){\n        a=read(),b=read(),c=read(),d=read();\n        merge1(1,1,n,a,b,n*8+i*2);\n        merge2(1,1,n,c,d,n*8+i*2);\n    }\n    dijstra(num[p]);\n    for(register int i=1;i<=n;++i)printf(\"%d\\n\",d[num[i]]/2);\n//  for(int i=1;i<=tot;i++){\n//    printf(\"%lld %lld %lld %lld:\\n\",i,tr[i].l,tr[i].r,g[i].size());\n//    for(int j=0;j<g[i].size();j++)printf(\"%lld %lld\\n\",g[i][j].v,g[i][j].w);\n//  }\n}\n```",
        "postTime": 1634649255,
        "uid": 310802,
        "name": "_Diu_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6348 [PA2011]Journeys"
    },
    {
        "content": "![](https://i.loli.net/2021/09/04/o7qUxj13fWIntGQ.png)\n\u9996\u5148\u5efa\u51fa\u4e24\u9897\u7ebf\u6bb5\u6811\uff0c\u4e00\u9897\u5165\u6811\uff0c\u4e00\u9897\u51fa\u6811\u3002  \n\u5165\u6811\u4e2d\u8fde\u8fb9 $(fa,son,0)$\uff0c\u51fa\u6811\u4e2d\u8fde\u8fb9 $(son,fa,0)$\u3002  \n\u5e76\u4e14\u4e24\u68f5\u6811\u4e2d\u5bf9\u5e94\u7684\u8282\u70b9\u4e5f\u8981\u8fde\u6743\u4e3a $0$ \u7684\u8fb9\uff0c\u4ee3\u8868\u53ef\u4ee5\u4ece\u8be5\u533a\u95f4\u91cd\u65b0\u51fa\u53d1\u3002  \n\u6bcf\u6b21\u8fde\u8fb9\u65f6\uff0c\u65b0\u5efa\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff0c\u51fa\u6811\u5bf9\u5e94\u533a\u95f4\u5411\u865a\u62df\u8282\u70b9\u8fde\u6743\u4e3a $0$ \u7684\u8fb9\uff0c\u865a\u62df\u8282\u70b9\u5411\u5165\u6811\u8fde\u6743\u4e3a $1$ \u7684\u8fb9\u3002  \n\u6ce8\u610f\u65e0\u5411\u8fb9\u8981\u8fde\u4e24\u6b21\u3002  \n\u6700\u540e\u7528 01-BFS \u8dd1\u6700\u77ed\u8def\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define N 4200005\ntypedef pair<int, bool> pii;\nvector<pii> e[N];\nvoid add(int u, int v, bool w) { e[u].push_back({v, w}); }\nint n, m, p, tot;\nint num[N], dis[N];\n#define rt 1, 1, n\n#define lpos (pos << 1)\n#define rpos (lpos | 1)\n#define lson lpos, l, mid\n#define rson rpos, mid + 1, r\nvoid bld(int pos, int l, int r)\n{\n    add(pos + 4 * n, pos, 0);\n    if (l == r)\n        return num[l] = pos, void();\n    add(lpos, pos, 0), add(rpos, pos, 0);\n    add(pos + 4 * n, lpos + 4 * n, 0), add(pos + 4 * n, rpos + 4 * n, 0);\n    int mid = (l + r) >> 1;\n    bld(lson), bld(rson);\n}\nvoid Add(int pos, int l, int r, int L, int R, bool op) //0 \u51fa\u6811 1 \u5165\u6811\n{\n    if (L <= l && r <= R)\n    {\n        if (op == 0)\n            add(pos, 8 * n + tot, 0);\n        else\n            add(8 * n + tot, pos + 4 * n, 1);\n        return;\n    }\n    int mid = (l + r) >> 1;\n    if (L <= mid)\n        Add(lson, L, R, op);\n    if (R > mid)\n        Add(rson, L, R, op);\n}\ndeque<int> q;\nvoid BFS_01()\n{\n    memset(dis, 0x3f, sizeof(dis));\n    dis[num[p]] = 0;\n    q.push_back(num[p]);\n    while (!q.empty())\n    {\n        int u = q.front();\n        q.pop_front();\n        for (pii x : e[u])\n        {\n            int v = x.first;\n            if (dis[v] > dis[u] + x.second)\n            {\n                dis[v] = dis[u] + x.second;\n                if (x.second == 1)\n                    q.push_back(v);\n                else\n                    q.push_front(v);\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d%d\", &n, &m, &p);\n    bld(rt);\n    while (m--)\n    {\n        tot++;\n        int a, b, c, d;\n        scanf(\"%d%d%d%d\", &a, &b, &c, &d);\n        Add(rt, a, b, 0);\n        Add(rt, c, d, 1);\n        tot++;\n        Add(rt, a, b, 1);\n        Add(rt, c, d, 0);\n    }\n    BFS_01();\n    for (int i = 1; i <= n; i++)\n    {\n        if (i == p)\n            printf(\"0\\n\");\n        else\n            printf(\"%d\\n\", dis[num[i] + 4 * n]);\n    }\n    return 0;\n}\n\n```",
        "postTime": 1631318175,
        "uid": 236006,
        "name": "cymrain07",
        "ccfLevel": 7,
        "title": "P6348 Journeys"
    },
    {
        "content": "\u8fd9\u91cc\u8bb2\u4e0b\u5f3a\u5236\u7a7a\u95f4\u9650\u5236 $O(n+m)$ \u7684\u505a\u6cd5\n\n\u5f53\u7136\u76f4\u63a5\u7ebf\u6bb5\u6811\u5efa\u56fe\u66f4\u53ef\u505a\uff1b\u4f46\u53ef\u60dc\u8fd9\u6837\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $O(m\\log n)$ \u7684\uff08\u66f4 naive \u4e00\u4e9b\u7684\u5efa\u56fe\u751a\u81f3\u662f $O(m\\log^2 n)$ \u7684 \\fad\uff09\n\n## \u89e3\u6790\n\n\uff08\u4e0b\u9762\u5c06\u5f62\u5982\u8f93\u5165\u7ed9\u51fa\u7684 $(a, b, c, d)$ \u7684\u56db\u5143\u7ec4\u79f0\u4e3a \u201c\u4e00\u6761\u8fb9\u201d\uff1b\u867d\u7136\u5b83\u53ef\u80fd\u63cf\u8ff0\u4e86\u591a\u4e2a\u7ed3\u70b9\u95f4\u7684\u8fde\u901a\u5173\u7cfbX\uff09\n\n\u7531\u4e8e\u8fb9\u6743\u6ca1\u6709\u8d1f\u6570\uff1b\u8003\u8651\u6700\u77ed\u8def\u7b97\u6cd5\u7684\u6027\u8d28\uff0c\u4e00\u6761\u8fb9\u663e\u7136**\u53ea\u4f1a\u88ab\u4f7f\u7528\u4e00\u6b21**\uff08\u7b2c\u4e00\u6b21\u7528\u5230\u8fd9\u6761\u8fb9\u5373\u662f\u6700\u77ed\u8def\uff09\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528\u5b8c\u4e00\u6761\u8fb9\u5c31\u5220\u53bb\u5b83\u3002\u8fd9\u6837\u590d\u6742\u5ea6\u5c31\u548c\u6bcf\u6761\u8fb9\u7684\u533a\u95f4\u5927\u5c0f\u65e0\u5173\u4e86\n\n\u8bbe\u5f53\u524d\u70b9\u7684\u7f16\u53f7\u4e3a $x$\u3002\u82e5\u5c06\u6bcf\u6761\u8fb9\u89c6\u4e3a\uff08\u4e24\u4e2a\uff09\u533a\u95f4\uff0c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u627e\u5230**\u6240\u6709\u8986\u76d6 $x$ \u7684\u533a\u95f4**\n\n\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u82e5\u6709\u4e00\u4e2a\u533a\u95f4 $[l, r]$\uff0c\u6211\u4eec\u5c06\u5176\u5b58\u5728\u4e0b\u6807\u4e3a $l$ \u7684\u4f4d\u7f6e\u4e0a\uff08\u540c\u65f6\u4e5f\u4e00\u5e76\u4fdd\u5b58\u8fb9\u7684\u7f16\u53f7\u4ec0\u4e48\uff09\uff0c\u5e76\u53d6\u5176\u4e2d $r$ \u6700\u5927\u7684\u533a\u95f4\u4f5c\u4e3a\u8be5\u4e0b\u6807\u7684 \u201c\u6743\u201d\uff08\u5177\u4f53\u5b9e\u73b0\u65f6\u53ef\u4ee5\u6392\u4e2a\u5e8f\uff0c\u7136\u540e\u4ece\u540e\u5f80\u524d\u4f5c\u4e3a\u8be5\u4e0b\u6807\u7684 \u201c\u6743\u201d\uff09\uff1b\u7ebf\u6bb5\u6811\u4e0a\u5219\u5177\u4f53\u7ef4\u62a4\u533a\u95f4\u5185\u6700\u5927\u7684 \u201c\u6743\u201d \u53ca\u5176\u4fe1\u606f\uff08\u5373\u6765\u81ea\u4e8e\u54ea\u4e2a\u4f4d\u7f6e\u4ec0\u4e48\uff09\u3002\u6bcf\u6b21\u8be2\u95ee\u65f6\uff0c\u5c31\u5bfb\u627e $[1, x]$ \u4e2d\uff08\u663e\u7136\u53ea\u6709\u5de6\u7aef\u70b9\u5728 $[1, x]$ \u5185\u7684\u533a\u95f4\u624d\u80fd\u8986\u76d6 $x$\uff09\u6700\u5927\u7684 \u201c\u6743\u201d\uff0c\u7528\u6389\u5176\u5bf9\u5e94\u7684\u8fb9\uff0c\u7136\u540e\u518d\u627e\uff1b\u76f4\u5230\u627e\u5230\u7684\u8fb9\u7684 $r$ \u4e0d\u5927\u4e8e $x$ \u65f6\u7ed3\u675f\uff08\u8fd9\u65f6\u5019 $x$ \u65e0\u6cd5\u4f7f\u7528\u8fd9\u6761\u8fb9\uff09\n\n\u201c\u4f7f\u7528\u201d \u6bcf\u6761\u8fb9\u7684\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u533a\u95f4\u4e2d\u7684\u5143\u7d20\uff0c\u4f46\u540c\u65f6\u7528\u5e76\u67e5\u96c6\u5c06\u8bbf\u95ee\u8fc7\u7684\u5143\u7d20\uff08\u5df2\u53d1\u73b0\u6700\u77ed\u8def\u7684\u5143\u7d20\uff09\u7f29\u8d77\u6765\u4ee5\u4fdd\u969c\u590d\u6742\u5ea6\n\n\u53e6\u5916\u7531\u4e8e\u672c\u9898\u7684\u8fb9\u6ca1\u6709\u8fb9\u6743\uff0c\u56e0\u6b64\u6ca1\u5fc5\u8981\u5199 Dijkstra \u4e4b\u7c7b\uff1b\u7528 Bfs \u5c31\u884c\u4e86\n\n\u63cf\u8ff0\u4e0d\u592a\u6e05\u695a\u7684\u5730\u65b9\u53ef\u53c2\u8003\u4ee3\u7801qaq\n\n## CODE\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing std::pair;\nusing std::vector;\nusing std::sort;\ntypedef pair<int, int> pad;\n\nconst int MAXN =5e5+20, MAXM =1e5+20, MAXSeg =1<<20;\n\n/*------------------------------IO------------------------------*/\n\nint read(){\n\tint x =0; char c =getchar();\n\twhile(c < '0' || c > '9') c =getchar();\n\twhile(c >= '0' && c <= '9') x =(x<<1)+(x<<3)+(48^c), c =getchar();\n\treturn x;\n}\n\nvoid write(const int &x){\n\tif(x/10)\n\t\twrite(x/10);\n\tputchar('0'+x%10);\n}\n\n/*------------------------------Seg------------------------------*/\n\nstruct node{\n\tint l, r, id;\n\t\n\tnode(){}\n\tnode(const int &L, const int &R, const int &ID):l(L), r(R), id(ID){}\n\t\n\tnode operator + (const node &B) const{\n\t\tnode ret(l, r, id);\n\t\tif(B.r > ret.r)\n\t\t\tret =B;\n\t\treturn ret;\n\t}\n\tbool operator < (const node &B) const{\n\t\treturn r < B.r;\n\t}\n}data[MAXSeg];/*\u4ee5 [nl, nr] \u4e3a\u5de6\u7aef\u70b9\u7684\u8fb9\u4e2d r \u6700\u5927\u7684\u8fb9*/\n\nvector<node> v[MAXN];\n\nint N =1;\n\ninline void pushup(const int &x){\n\tdata[x] =data[x<<1]+data[x<<1^1];\n}\n\nvoid Build(const int &n){\n\twhile(N < n)\n\t\tN <<=1;\n\tfor(int i =N; i < N+n; ++i)\n\t\tdata[i] =v[i-N+1].back();\n\tfor(int i =N-1; i >= 1; --i)\n\t\tpushup(i);\n}\n\n/*\u4ee5 [l, r] \u4e3a\u5de6\u7aef\u70b9\u7684\u8fb9\u4e2d r \u6700\u5927\u7684\u8fb9*/\nnode query(const int &l, const int &r, const int &nl =1, const int &nr =N, const int &x =1){\n\tif(l == nl && r == nr)\n\t\treturn data[x];\n\tint mid =nl+nr>>1;\n\tif(r <= mid)\n\t\treturn query(l, r, nl, mid, x<<1);\n\telse if(l >= mid+1)\n\t\treturn query(l, r, mid+1, nr, x<<1^1);\n\telse\n\t\treturn query(l, mid, nl, mid, x<<1)+query(mid+1, r, mid+1, nr, x<<1^1);\n}\n\nvoid del_edge(const int &pos, const int &nl =1, const int &nr =N, const int &x =1){\n\tif(nl == nr){\n\t\tv[pos].pop_back();\n\t\tdata[x] =v[pos].back();\n\t\treturn;\n\t}\n\tint mid =nl+nr>>1;\n\tif(pos <= mid)\n\t\tdel_edge(pos, nl, mid, x<<1);\n\telse\n\t\tdel_edge(pos, mid+1, nr, x<<1^1);\n\tpushup(x);\n}\n\n/*------------------------------Disjoint Set------------------------------*/\n\nint fa[MAXN];\n\nvoid Build_ds(const int &n){\n\tfor(int i =1; i <= n+1; ++i)\n\t\tfa[i] =i;\n}\n\nint find(const int &x){\n\treturn (fa[x] == x) ? x : fa[x] =find(fa[x]);\n}\n\n/*\u5220\u9664\u7f16\u53f7\u5e8f\u5217\u4e0a\u8be5\u5904\u7684\u70b9*/\nvoid del_pos(const int &pos){\n\tint x =find(pos)+1;\n\tfa[pos] =x;\n}\n\n/*------------------------------01Bfs------------------------------*/\n\nstruct query{\n\tint l1, r1, l2, r2;\n}q[MAXM];\n\npad que[MAXN];\nint head, tail;\n\nint dist[MAXN];\n\n#define fi first\n#define se second\n\nvoid Bfs(const int &s){\n\tque[tail++] =pad(s, 0);\n\tdel_pos(s);\n\twhile(head < tail){\n\t\tpad nw =que[head++];\n\t\tdist[nw.fi] =nw.se;\n\t\twhile(1){\n\t\t\tnode tmp =query(1, nw.fi);\n\t\t\tif(tmp.r < nw.fi)\n\t\t\t\tbreak;\n\t\t\telse if(tmp.l == q[tmp.id].l1){\n\t\t\t\tfor(int to =find(q[tmp.id].l2); to <= q[tmp.id].r2; del_pos(to), to =find(to+1))\n\t\t\t\t\tque[tail++] =pad(to, nw.se+1);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tfor(int to =find(q[tmp.id].l1); to <= q[tmp.id].r1; del_pos(to), to =find(to+1))\n\t\t\t\t\tque[tail++] =pad(to, nw.se+1);\n\t\t\t}\n\t\t\tdel_edge(tmp.l);\n\t\t}\n\t}\n}\n\n#undef fi\n#undef se\n\n/*------------------------------Main------------------------------*/\n\nint main(){\n\tint n =read(), m =read(), s =read();\n\tfor(int i =1; i <= m; ++i){\n\t\tint a =read(), b =read(), c =read(), d =read();\n\t\tq[i].l1 =a, q[i].r1 =b, q[i].l2 =c, q[i].r2 =d;\n\t\tv[q[i].l1].push_back(node(q[i].l1, q[i].r1, i));\n\t\tv[q[i].l2].push_back(node(q[i].l2, q[i].r2, i));\n\t}\n\tfor(int i =1; i <= n; ++i)\n\t\tv[i].push_back(node(0, 0, 0)), sort(v[i].begin(), v[i].end());\n\tBuild_ds(n), Build(n);\n\tBfs(s);\n\tfor(int i =1; i <= n; ++i)\n\t\twrite(dist[i]), putchar('\\n');\n}\n```",
        "postTime": 1605425427,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P6348 \u3010[PA2011]Journeys\u3011"
    },
    {
        "content": "[\u535a\u5ba2\u56ed\u67e5\u770b](https://www.cnblogs.com/AIskeleton/p/16306369.html)\n\n> [P6348 [PA2011]Journeys](https://www.luogu.com.cn/problem/P6348)\n\n> \u6709 $n$ \u4e2a\u70b9\uff0c$m$ \u6b21\u8fde\u8fb9\uff0c\u6bcf\u6b21\u5728\u4e24\u533a\u95f4 $[a,b],[c,d]$ \u7684\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u65e0\u5411\u8fb9\u3002\n> \u6c42\u95ee\u70b9 $p$ \u5230\u8fbe\u5176\u4f59\u7684\u6bcf\u4e2a\u70b9\u6240\u9700\u7ecf\u8fc7\u7684\u6700\u5c11\u8def\u5f84\u6570\u3002\n\n> $1\\le n\\le 5\\times 10^5,1\\le m\\le 10^5$\u3002\n\n\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c**\u533a\u95f4\u4e4b\u95f4\u8fde\u8fb9**\u7684\u6a21\u677f\u9898\u3002\n\n\u5f88\u660e\u663e\u76f4\u63a5\u66b4\u529b\u8fde\u8fb9\u7684\u65f6\u95f4\u548c\u7a7a\u95f4\u590d\u6742\u5ea6\u90fd\u662f $O(m\\,n^2)$\uff0c\u6240\u4ee5\u8981\u7528\u5230**\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe**\u6765\u4f18\u5316\u5efa\u8fb9\u7684\u590d\u6742\u5ea6\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u201c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4\uff0c\u90fd\u53ef\u4ee5\u5c06\u5176\u8f6c\u5316\u4e3a\u7ebf\u6bb5\u6811\u4e0a\u81f3\u591a $\\log_2n$ \u4e2a\u533a\u95f4\u201d\u8fd9\u4e00\u6027\u8d28\uff0c\u6765\u51cf\u5c11\u8fde\u8fb9\u7684\u6570\u91cf\u3002\n\n\u5148\u5efa\u51fa\u7ebf\u6bb5\u6811\uff0c\u8fde\u8fb9\u65f6\u6539\u4e3a\u5411\u7ebf\u6bb5\u6811\u4e0a\u7684\u8868\u793a\u76f8\u5e94\u7684\u533a\u95f4\u7684\u8282\u70b9\u8fde\u8fb9\u3002\n\n\u7ebf\u6bb5\u6811\u4e0a\u7684\u7236\u5b50\u8282\u70b9\u4e4b\u95f4\u8fde\u8fb9\u6743\u4e3a 0 \u7684\u6709\u5411\u8fb9\uff0c\u6839\u636e\u9898\u76ee\u8fde\u8fb9\u8981\u6c42\u786e\u5b9a\u65b9\u5411\uff0c\u6b64\u9898\u8981\u5efa\u4e24\u68f5\u7ebf\u6bb5\u6811\u3002\n\n- \u5982\u679c\u662f\u70b9\u5411\u533a\u95f4\u8fde\u8fb9\uff0c\u5c31\u5c06\u70b9\u8fde\u5411**\u6811\u4e2d\u7236\u8282\u70b9\u5411\u5b50\u8282\u70b9\u8fde\u8fb9**\u7684\u7ebf\u6bb5\u6811\u4e2d\u8282\u70b9\u3002\n- \u5982\u679c\u662f\u533a\u95f4\u5411\u70b9\u8fde\u8fb9\uff0c\u5c31\u4ece**\u6811\u4e2d\u5b50\u8282\u70b9\u5411\u7236\u8282\u70b9\u8fde\u8fb9**\u7684\u7ebf\u6bb5\u6811\u4e0a\u7684\u76f8\u5e94\u8282\u70b9\u5411\u8981\u6c42\u7684\u8282\u70b9\u8fde\u8fb9\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/o87spdle.png)\n\n\u6bd4\u5982\u56fe\u4e2d\u7684\u4f8b\u5b50\u5c31\u662f**\u70b9 u \u5411\u533a\u95f4 $[3,7]$ \u4e4b\u95f4\u7684\u70b9\u8fde\u8fb9**\u65f6\u7684\u60c5\u51b5\u3002\n\n\u5efa\u51fa\u4e24\u68f5\u7ebf\u6bb5\u6811\uff0c\u5176\u4e2d\u4e00\u68f5\u7684\u6bcf\u4e2a\u7236\u8282\u70b9\u5411\u5176\u5b50\u8282\u70b9\u8fde**\u8fb9\u6743\u4e3a 0 \u7684\u5355\u5411\u8fb9**\uff0c\u53e6\u4e00\u68f5\u5219\u4e0e\u4e4b\u76f8\u53cd\u3002\n\n\u5bf9\u4e8e\u6bcf\u6b21\u533a\u95f4\u8fde\u8fb9\u64cd\u4f5c\uff0c\u5728\u4e24\u68f5\u7ebf\u6bb5\u6811\u4e0a\u627e\u51fa\u5bf9\u5e94\u8282\u70b9\u5e76\u66b4\u529b\u8fde\u8fb9\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log_2^2n)$\uff0c\u4ecd\u9700\u4f18\u5316\u3002\n\n\u8003\u8651\u6bcf\u6b21\u5efa\u8fb9\u65f6\u5f15\u5165\u4e00\u4e2a\u865a\u70b9\uff0c\u5728\u865a\u70b9\u548c\u4e24\u68f5\u7ebf\u6bb5\u6811\u4e4b\u95f4**\u5206\u522b\u8fde\u4e24\u6761\u65b9\u5411\u76f8\u53cd\u7684\u6743\u503c\u4e3a 1 \u7684\u6709\u5411\u8fb9**\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u964d\u5230 $O(n\\log_2n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u4e0d\u76f4\u63a5\u76f4\u63a5\u53ea\u8fde\u4e00\u6761\u65e0\u5411\u8fb9\u7684\u539f\u56e0\u662f\uff0c\u5982\u679c\u4e24\u6761\u8fde\u63a5\u865a\u70b9\u548c\u7ebf\u6bb5\u6811\u4e0a\u8282\u70b9\u7684\u65e0\u5411\u8fb9**\u7ecf\u8fc7\u4e86\u540c\u4e00\u4e2a\u70b9**\uff0c\u5219\u4f1a\u8ba9\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u4e0a\u7684\u8282\u70b9\u53ef\u4ee5\u901a\u8fc7**\u7ebf\u6bb5\u6811\u4e0a\u7684\u8def\u5f84**\u5230\u8fbe\u6bcf\u4e00\u4e2a\u8282\u70b9\u3002\n\n\u5efa\u5b8c\u8fb9\u540e\u4ee5 $p$ \u4e3a\u8d77\u70b9\u8dd1\u4e00\u904d 01BFS \u5373\u53ef\u3002\n\u6700\u540e\u8ddd\u79bb\u5e94\u9664\u4e8c\uff0c\u56e0\u4e3a\u4e00\u6761\u8fb9\u88ab\u62c6\u6210\u4e86\u8fde\u5411\u865a\u70b9\u4ece\u865a\u70b9\u8fde\u5411\u76ee\u6807\u70b9\u4e24\u4e2a\u90e8\u5206\uff0c\u8fb9\u6743\u7b97\u4e86\u4e24\u6b21\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define MID int m=(l+r)>>1;\nusing namespace std;\nconst int N = 8e6;\nint rd() {\n    int w = 0, v = 1;\n    char c = getchar();\n\n    while (c < '0' || c > '9') {\n        if (c == '-')\n            v = -1;\n\n        c = getchar();\n    }\n\n    while (c >= '0' && c <= '9')\n        w = (w << 1) + (w << 3) + (c & 15), c = getchar();\n\n    return w * v;\n}\nvoid wr(int x) {\n    if (x < 0)\n        putchar('-'), x = -x;\n\n    if (x > 9)\n        wr(x / 10);\n\n    putchar(x % 10 + '0');\n}\nint fir[N], c, cnt, ls[N], rs[N], n, m, p, r1, r2, xd, vis[N], d[N];\ndeque <int>q;\nstruct E {\n    int v, nt, w;\n} e[N];\nvoid I(int u, int v, int w = 0) {\n    e[++cnt] = (E) {\n        v, fir[u], w\n    };\n    fir[u] = cnt;\n}\nvoid b1(int &p, int l, int r) {\n    if (l == r) {\n        p = l;\n        return;\n    }\n    p = ++c;\n    MID b1(ls[p], l, m);\n    b1(rs[p], m + 1, r);\n    I(p, ls[p]);\n    I(p, rs[p]);\n}\nvoid b2(int &p, int l, int r) {\n    if (l == r) {\n        p = l;\n        return;\n    }\n    p = ++c;\n    MID b2(ls[p], l, m);\n    b2(rs[p], m + 1, r);\n    I(ls[p], p);\n    I(rs[p], p);\n}\nvoid ch(int p, int l, int r, int L, int R, bool f) {\n    if (l >= L && r <= R) {\n        if (f) I(p, xd, 1);\n        else I(xd, p, 1);\n        return ;\n    }MID \n    if (L <= m)\n        ch(ls[p], l, m, L, R, f);\n    if (R > m)\n        ch(rs[p], m + 1, r, L, R, f);\n    return ;\n}\nvoid dj(int p) {\n    memset(d, 0x7f, sizeof(d));d[p] = 0;q.push_front(p);\n    while (!q.empty()) {\n        int u = q.front(), v, w;q.pop_front();\n        for (int i = fir[u]; i; i = e[i].nt) {\n            v = e[i].v;w = e[i].w;\n            if (d[v] > d[u] + w) {\n                d[v] = d[u] + w;\n                if (w == 1)\n                    q.push_back(v);\n                else\n                    q.push_front(v);\n            }\n        }\n    }\n}\nsigned main() {\n    n = rd();m = rd();p = rd();\n    c = n;b1(r1, 1, n);b2(r2, 1, n);\n    xd = c + 1;\n    for (int i = 1, a, b, c, d; i <= m; i++) {\n        a = rd();b = rd();c = rd();d = rd();\n        ch(r2, 1, n, a, b, 1);\n        ch(r1, 1, n, c, d, 0);\n        xd++;\n        ch(r2, 1, n, c, d, 1);\n        ch(r1, 1, n, a, b, 0);\n        xd++;\n    }dj(p);\n    for (int i = 1; i <= n; i++)\n        wr(d[i] / 2), putchar('\\n');\n    return 0;\n}\n```",
        "postTime": 1653455414,
        "uid": 540715,
        "name": "A_I_Skeleton",
        "ccfLevel": 0,
        "title": "P6348"
    },
    {
        "content": "# \u9898\u89e3\n\u987a\u7740\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u7684\u677f\u5b50\u6765\u7684\u3002\n\n\u539f\u672c\u60f3\u7684\u5efa\u56fe\u65b9\u5f0f\u662f\u627e\u5230\u6bcf\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684\u5165\u6811\u548c\u51fa\u6811\u8282\u70b9\u5206\u522b\u8fde\u8d77\u6765\uff0c\u4f46\u8fd9\u6837\u5355\u6b21\u8fde\u8fb9\u590d\u6742\u5ea6\u662f $O(\\log^2n)$\uff0cMLE+TLE \u3002\n\n\u9898\u89e3\u7684\u865a\u70b9\u505a\u6cd5\u76f4\u63a5\u964d\u4e00\u4e2a $\\log n$ \u5df2\u7ecf\u5f88\u8be6\u7ec6\uff0c\u4f46\u6211\u5b9e\u73b0\u7684\u65f6\u5019\u9047\u5230\u4e00\u70b9\u5c0f\u95ee\u9898\uff0c\u5199\u51fa\u6765\u544a\u8beb\u4e00\u4e0b\u548c\u6211\u6709\u540c\u6837\u60f3\u6cd5\u7684\u4eba\u3002\n\n## \u5173\u4e8e\u8fde\u8fb9\u65b9\u5411\n\n\u51fa\u6811/\u5165\u6811\u5411\u865a\u70b9\u8fde\u8fb9\u600e\u4e48\u8fde\uff1f\n\n\u663e\u7136\u51fa\u6811\u8fde\u5411\u865a\u70b9\uff0c\u865a\u70b9\u8fde\u5411\u5165\u6811\u8fd9\u79cd\u8fde\u8fb9\u65b9\u5f0f\u662f\u5bf9\u7684\u3002\n\n**\u5982\u679c\u6709\u4eba\u8fde\u53cc\u5411\u8fb9\u8bf7\u5f80\u4e0b\u770b\uff1a**\n\n\u4f46\u662f\u6211\u4e3a\u4e86\u56fe\u7701\u4e8b\u5efa\u4e86\u53cc\u5411\u8fb9\uff0c\u56e0\u4e3a\u6211\u89c9\u5f97\u4ece\u5165\u6811\u8d70\u56de\u51fa\u6811\u7684\u8fb9\u4e0d\u4f1a\u5bf9\u7b54\u6848\u6709\u5f71\u54cd\uff0c\u4f46\u662f WA \u4e86\u3002\n\n\u518d\u7ecf\u8fc7\u601d\u8003\u624d\u53d1\u73b0\u5355\u72ec\u4e00\u6761\u53cc\u5411\u8fb9\u6ca1\u4e8b\uff0c\u4f46\u5982\u679c\u4e24\u6761\u53cc\u5411\u8fb9\u8fde\u5728\u4e00\u8d77\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u8282\u70b9\u5c31\u4f1a\u901a\u8fc7\u53cc\u5411\u8fb9\u5728\u6811\u4e0a\u4e71\u8d70\u4e86\u3002\u56e0\u6b64\u4e0d\u80fd\u5efa\u53cc\u5411\u8fb9\u3002\n\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define FCC fclose(stdin),fclose(stdout)\n#define mid ((l+r)>>1)\n#define MP make_pair\n#define pr pair<ll,int>\nconst int INF = 0x3f3f3f3f,N = 5e5+10;\ninline ll read()\n{\n\tll ret=0;char ch=' ',c=getchar();\n\twhile(!(c>='0'&&c<='9')) ch=c,c=getchar();\n\twhile(c>='0'&&c<='9') ret=(ret<<1)+(ret<<3)+c-'0',c=getchar();\n\treturn ch=='-'?-ret:ret;\n}\nint n,m,s;\nint head[N<<5],ecnt=-1;\ninline void init_edge(){memset(head,-1,sizeof(head)),ecnt=-1;}\nstruct edge\n{\n\tint nxt,to,w;\n}a[N<<5];\ninline void add_edge(int x,int y,int w)\n{\n\ta[++ecnt]=(edge){head[x],y,w};\n\thead[x]=ecnt;\n}\nint ls[N<<5],rs[N<<5];\nint rtin,rtout,tot;\nvoid buildin(int &k,int l,int r)\n{\n\tk=++tot;\n\tif(l==r) return add_edge(k,l,0);\n\tbuildin(ls[k],l,mid);\n\tbuildin(rs[k],mid+1,r);\n\tadd_edge(k,ls[k],0);\n\tadd_edge(k,rs[k],0);\n}\nvoid addin(int k,int l,int r,int x,int y,int v)\n{\n\tif(x<=l&&r<=y) return add_edge(v,k,1);\n\tif(x<=mid) addin(ls[k],l,mid,x,y,v);\n\tif(y>mid) addin(rs[k],mid+1,r,x,y,v);\n}\nvoid buildout(int &k,int l,int r)\n{\n\tk=++tot;\n\tif(l==r) return add_edge(l,k,0);\n\tbuildout(ls[k],l,mid);\n\tbuildout(rs[k],mid+1,r);\n\tadd_edge(ls[k],k,0);\n\tadd_edge(rs[k],k,0);\n}\nvoid addout(int k,int l,int r,int x,int y,int v)\n{\n\tif(x<=l&&r<=y) return add_edge(k,v,1);\n\tif(x<=mid) addout(ls[k],l,mid,x,y,v);\n\tif(y>mid) addout(rs[k],mid+1,r,x,y,v);\n}\nvoid find(int k,int l,int r,int x,int y,int w,bool op)\n{\n\tif(x<=l&&r<=y) \n\t{\n\t\tif(!op) add_edge(k,tot,w);\n\t\telse add_edge(tot,k,w);\n\t\treturn;\n\t} \n\tif(x<=mid) find(ls[k],l,mid,x,y,w,op);\n\tif(y>mid)  find(rs[k],mid+1,r,x,y,w,op);\n}\nll dis[N<<5];\nbool vis[N<<5];\nvoid dijk()\n{\n\tpriority_queue<pr,vector<pr>,greater<pr> >q;\n\tmemset(dis,0x3f,sizeof(dis));\n\tmemset(vis,0,sizeof(vis));\n\tq.push(MP(0ll,s));\n\tdis[s]=0ll;\n\twhile(!q.empty())\n\t{\n\t\tint u=q.top().second;\n\t\tq.pop();\n\t\tif(vis[u]) continue;\n\t\tvis[u]=1;\n\t\tfor(int i=head[u];~i;i=a[i].nxt)\n\t\t{\n\t\t\tint v=a[i].to;\n\t\t//\tprintf(\"v=%d\\n\",v);\n\t\t\tif(dis[v]>dis[u]+a[i].w)\n\t\t\t{\n\t\t\t\tdis[v]=dis[u]+a[i].w;\n\t\t\t\tq.push(MP(dis[v],v));\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\ttot=n=read(),m=read(),s=read();\n\tinit_edge();\n\tbuildin(rtin,1,n);\n\tbuildout(rtout,1,n);\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint l1=read(),r1=read(),l2=read(),r2=read();\n\t\ttot++;//\u5efa\u7acb\u865a\u70b9 \n\t\tfind(rtout,1,n,l1,r1,0,false);\n\t\tfind(rtin,1,n,l2,r2,1,true);\n\t\ttot++;\n\t\tfind(rtout,1,n,l2,r2,0,false);\n\t\tfind(rtin,1,n,l1,r1,1,true);\n\t}\n\tdijk();\n\tfor(int i=1;i<=n;i++) printf(\"%lld\\n\",dis[i]);\n\treturn 0;\n}\n\n```\n",
        "postTime": 1636213166,
        "uid": 234783,
        "name": "conprour",
        "ccfLevel": 6,
        "title": "P6348 [PA2011]Journeys"
    },
    {
        "content": "\u663e\u7136\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u4f46\u662f\u76f4\u63a5\u4efb\u610f\u4e24\u4e2a\u70b9\u8fde\u8fb9\u7a7a\u95f4\u590d\u6742\u5ea6\u5c06\u8fbe\u5230\u96be\u770b\u7684 $O(n \\log ^ 2 n)$ \u6240\u4ee5\u6211\u4eec\u6765\u4e2a\u5c0f\u6539\u52a8\u3002              \n\n\u8003\u8651\u5728\u6bcf\u6b21\u8fde\u8fb9\u7684\u65f6\u5019\u5efa\u7acb\u4e2a\u865a\u70b9\uff0c\u7136\u540e\u5de6\u8fb9\u7684\u6811\u4e0a\u8986\u76d6\u8282\u70b9\u5411\u8fd9\u4e2a\u865a\u70b9\u8fde\u503c\u4e3a $0$ \u7684\u8fb9\uff0c\u8fd9\u4e2a\u70b9\u5411\u53f3\u8fb9\u6811\u4e0a\u7684\u8986\u76d6\u8282\u70b9\u8fde\u503c\u4e3a $1$ \u7684\u8fb9\u7a7a\u95f4\u590d\u6742\u5ea6\u5c31\u662f\u53ef\u4ee5\u63a5\u53d7\u7684 $O((n + q) \\log n)$\u3002              \n\n\u5f53\u7136\u4e5f\u6709\u4e00\u79cd\u9ad8\u8bba\u7684\u7a7a\u95f4 $O(n + q)$ \u505a\u6cd5\u6211\u4e5f\u4e0d\u4f1a\uff0c\u6709\u5174\u8da3\u7684\u540c\u5b66\u7ffb\u4e00\u7ffb\u6d1b\u8c37\u8fd9\u9053\u9898\u7684\u9898\u89e3\u5c31\u53ef\u4ee5\u7ffb\u5230\u3002               \n\n\u5b9e\u73b0\u6700\u77ed\u8def\u65f6\u7528 01BFS \u53ef\u4ee5\u7701\u4e00\u53ea $\\log$\uff0c\u8fd9\u91cc\u7528 Dijkstra \u5c31\u53ef\u4ee5\u8fc7\u4e86\u3002 \n\n01BFS\uff1a$O((n + m) \\log n) - O((n + q) \\log n)$\n\nDijkstra\uff1a$O((n + (n + q) \\log n) \\log n) - O((n + q) \\log n)$\u3002\n\n```cpp\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 5e5 + 5 , Inf = 1e9;\nint n,m,P,dis[Len << 4],head[Len << 4],cnt,tot,Indx[Len << 4][2],Pos[Len];\nbool flag[Len << 4];\nstruct node\n{\n\tint next,to,w;\n}edge[Len * 105];\nvoid add(int from,int to,int w)\n{\n\tedge[++ cnt].to = to;\n\tedge[cnt].next = head[from];\n\tedge[cnt].w = w;\n\thead[from] = cnt;\n}\n#define ls(p) p << 1\n#define rs(p) p << 1 | 1\nvoid build(int p,int l,int r)\n{\t\n\tIndx[p][0] = ++ tot;\n\tIndx[p][1] = ++ tot;\n\tadd(Indx[p][1] , Indx[p][0] , 0);\n\tif(l == r) \n\t{\n\t\tPos[l] = Indx[p][0];\n\t\t//printf(\"### %d %d\\n\",l,Pos[l]);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(ls(p) , l , mid);\n\tbuild(rs(p) , mid + 1 , r);\n\tadd(Indx[ls(p)][0] , Indx[p][0] , 0) , add(Indx[rs(p)][0] , Indx[p][0] , 0);\n\tadd(Indx[p][1] , Indx[ls(p)][1] , 0) , add(Indx[p][1] , Indx[rs(p)][1] , 0);\n}\nvector<int> Left[2];\nvector<int> Right[2];\nvoid update_L(int p,int l,int r,int nl,int nr,int opt)\n{\n\tif(nl <= l && nr >= r) \n\t{\n\t\tLeft[opt].push_back(Indx[p][0]);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(nl <= mid) update_L(ls(p) , l , mid , nl , nr , opt);\n\tif(nr > mid) update_L(rs(p) , mid + 1 , r , nl , nr , opt);\n}\nvoid update_R(int p,int l,int r,int nl,int nr,int opt)\n{\n\tif(nl <= l && nr >= r)\n\t{\n\t\tRight[opt].push_back(Indx[p][1]);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(nl <= mid) update_R(ls(p) , l , mid , nl , nr , opt);\n\tif(nr > mid) update_R(rs(p) , mid + 1 , r , nl , nr , opt);\n}\nvoid ADD()\n{\n\t++ tot;\n\tfor(int i = 0 ; i < Left[0].size() ; i ++) add(Left[0][i] , tot , 0);\n\tfor(int i = 0 ; i < Right[0].size() ; i ++) add(tot , Right[0][i] , 1);\n\t++ tot;\n\tfor(int i = 0 ; i < Left[1].size() ; i ++) add(Left[1][i] , tot , 0);\n\tfor(int i = 0 ; i < Right[1].size() ; i ++) add(tot , Right[1][i] , 1);\n}\nstruct Node\n{\n\tint x,val;\n\tNode(){x = val = 0;}\n\tNode(int X,int VAL){x = X , val = VAL;}\n\tbool operator < (const Node &Ano) const\n\t{\n\t\treturn val > Ano.val;\n\t}\n}PS;\nvoid BFS(int s)\n{\n\tpriority_queue<Node> Q;\n\tfor(int i = 1 ; i <= tot ; i ++) dis[i] = Inf , flag[i] = 0;\n\tQ.push(Node(s , 0));dis[s] = 0;\n\twhile(!Q.empty())\n\t{\n\t\tPS = Q.top();Q.pop();\n\t\tif(!flag[PS.x])\n\t\t{\n\t\t\tflag[PS.x] |= 1;\n\t\t\tfor(int e = head[PS.x] ; e ; e = edge[e].next)\n\t\t\t{\n\t\t\t\tint to = edge[e].to;\n\t\t\t\tif(dis[to] > dis[PS.x] + edge[e].w)\n\t\t\t\t{\n\t\t\t\t\tdis[to] = dis[PS.x] + edge[e].w;\n\t\t\t\t\tif(!flag[to]) Q.push(Node(to , dis[to]));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\nint main()\n{\n\tscanf(\"%d %d %d\",&n,&m,&P);\n\tbuild(1 , 1 , n);\n\tfor(int i = 1 ; i <= m ; i ++)\n\t{\n\t\tint a,b,c,d;scanf(\"%d %d %d %d\",&a,&b,&c,&d);\n\t\tLeft[0].clear() , Right[0].clear() , Left[1].clear() , Right[1].clear();\n \t\tupdate_L(1 , 1 , n , a , b , 0);\n \t\tupdate_R(1 , 1 , n , c , d , 0);\n \t\tupdate_L(1 , 1 , n , c , d , 1);\n \t\tupdate_R(1 , 1 , n , a , b , 1);\n \t\tADD();\n\t}\n\tBFS(Pos[P]);\n\tfor(int i = 1 ; i <= n ; i ++) printf(\"%d\\n\",dis[Pos[i]]);\n\treturn 0;\t\n} \n```",
        "postTime": 1634863787,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P6348 [PA2011]Journeys"
    }
]