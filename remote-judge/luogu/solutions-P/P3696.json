[
    {
        "content": "\u9996\u5148\u6211\u4eec\u6765\u8003\u8651\u5982\u4f55\u5efa\u6a21\u3002\n\n\u628a\u4e2d\u573a\u7684\u6bcf\u4e2a\u56e2\u4f53\u770b\u505a\u5de6\u62ec\u53f7\u3002\u7ed3\u675f\u65f6\u7684\u6bcf\u4e2a\u56e2\u4f53\u770b\u505a\u53f3\u62ec\u53f7\u3002\u7136\u540e\u6309\u7167\u4eba\u6c14\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u5230\u4e86\u4e00\u4e2a\u62ec\u53f7\u5e8f\u5217\u3002\u6bcf\u4e2a\u62ec\u53f7\u90fd\u6709\u4e00\u4e2a\u7f16\u53f7\uff08\u5373\u5176\u5b66\u6821\u7f16\u53f7\uff09\u3002\n\n\u8fd9\u4e2a\u62ec\u53f7\u5e8f\u5217\u4e00\u5f00\u59cb\u4e00\u5b9a\u662f\u5408\u6cd5\u7684\u3002\u56e0\u4e3a\u9898\u76ee\u4fdd\u8bc1\u6709\u89e3\uff08\u867d\u7136\u9898\u76ee\u4e2d\u5e76\u6ca1\u6709\u5199= =\uff09\u3002\n\n\u518d\u770b\u9898\u76ee\u7684\u8981\u6c42\u3002\u76f8\u5f53\u4e8e\u4fee\u6539\u5c3d\u91cf\u5c11\u7684\u53f3\u62ec\u53f7\u7684\u7f16\u53f7\u3002\u4f7f\u5f97\u6bcf\u4e2a\u5de6\u62ec\u53f7\u90fd\u80fd\u627e\u5230\u4e00\u4e2a\u7f16\u53f7\u76f8\u540c\u7684\u53f3\u62ec\u53f7\u4e0e\u4e4b\u5bf9\u5e94\u3002\n\n\n\u90a3\u4e48\u6211\u4eec\u7b2c\u4e00\u6b65\u53ef\u4ee5\u8d2a\u5fc3\u5730\u5c06\u5df2\u7ecf\u5339\u914d\u4e86\u7684\u76f8\u540c\u7f16\u53f7\u7684\u62ec\u53f7\u90fd\u5220\u53bb\u3002\n\n\u5220\u5b8c\u540e\u5269\u4e0b\u7684\u62ec\u53f7\u5e8f\u5217\u5c31\u4e0d\u4e00\u5b9a\u5408\u6cd5\u4e86= =\u3002\u6211\u4eec\u79f0\u4e4b\u4e3a\u574f\u6389\u7684\u62ec\u53f7\u5e8f\u5217\u3002\n\n\u6240\u4ee5\u8981\u91cd\u65b0\u52a0\u5165\u4e00\u4e9b\u4e4b\u524d\u5220\u6389\u7684\u5339\u914d\u62ec\u53f7\u4f7f\u5f97\u5e8f\u5217\u91cd\u65b0\u5408\u6cd5\u3002\u5728\u8fd9\u8fc7\u7a0b\u4e2d\u53ef\u4ee5\u65b9\u4fbf\u5730\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u5e76\u4e14\u4f60\u52a0\u5165\u7684\u62ec\u53f7\u5bf9\u8981\u5c3d\u91cf\u5c11\u3002\u56e0\u4e3a\u6bcf\u52a0\u5165\u4e00\u6b21\u90fd\u8981\u5c06\u76f8\u5e94\u7684\u53f3\u62ec\u53f7\u7f16\u53f7\u4fee\u6539\u3002\u4f7f\u5f97\u6ee1\u8db3\u9898\u76ee\u8981\u6c42\u3002\n\n\n\u8003\u8651\u52a0\u5165\u4e00\u5bf9\u62ec\u53f7\u65f6\u4f1a\u53d1\u751f\u4ec0\u4e48:\n\n\n    )      <--\u672a\u5339\u914d\u7684\u53f3\u62ec\u53f7      ==>      (  )  )\n\n (     )   <--\u65b0\u52a0\u5165\u7684\u62ec\u53f7              \u5de6\u8fb9\u4ea7\u751f\u4e00\u5bf9\u5339\u914d\u3002\u53f3\u8fb9\u591a\u51fa\u4e00\u4e2a\u672a\u5339\u914d\u7684\u53f3\u62ec\u53f7\n\n\u8fd9\u76f8\u5f53\u4e8e\u52a0\u5165\u4e00\u5bf9\u62ec\u53f7\u4f7f\u5f97\u67d0\u4e2a\u53f3\u62ec\u53f7\u5411\u53f3\u8fb9\u79fb\u52a8\u4e86\u3002\n\n\n\u90a3\u4e48\u6211\u4eec\u5c06\u6240\u6709\u53ef\u52a0\u5165\u7684\u62ec\u53f7\u5bf9 \u6309\u7167\u5de6\u7aef\u70b9\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\u7136\u540e\u4ece\u5de6\u5f80\u53f3\u626b\u3002\u7528\u4e00\u4e2a\u5806\u6765\u7ef4\u62a4\u5f53\u524d\u6700\u8fdc\u7684\u53f3\u7aef\u70b9\u3002\n\n\u5982\u679c\u9047\u5230\u4e00\u4e2a\u574f\u6389\u7684\u62ec\u53f7\u5e8f\u5217\u4e2d\u7684\u53f3\u62ec\u53f7\u3002\u5c31\u53d6\u51fa\u5806\u9876\u7684\u4f4d\u7f6e\u3002\u5e76\u5c06\u8fd9\u4e2a\u53f3\u62ec\u53f7\u5411\u53f3\u79fb\u52a8\u3002\u53ef\u4ee5\u8bc1\u660e\u8fd9\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\n\n\u518d\u8003\u8651\u5982\u4f55\u5904\u7406\u574f\u6389\u7684\u62ec\u53f7\u5e8f\u5217\u4e2d\u7684\u5de6\u62ec\u53f7\u3002\n\n\u6211\u4eec\u5c06\u574f\u6389\u7684\u62ec\u53f7\u5e8f\u5217\u4e2d\u6bcf\u4e00\u4e2a\u5de6\u62ec\u53f7\u90fd\u770b\u505a \u53f3\u62ec\u53f7\u5728\u65e0\u7a77\u8fdc\u5904\u7684\u4e00\u4e2a\u62ec\u53f7\u5bf9\u3002\u8fd9\u6837\u5b83\u5728\u5806\u4e2d\u7684\u4f18\u5148\u7ea7\u4e5f\u4f1a\u662f\u6700\u9ad8\u7684\u3002\n\n\u800c\u5f53\u5b83\u4e0e\u4e00\u4e2a\u53f3\u62ec\u53f7\u5339\u914d\u65f6\u3002\u90a3\u4e2a\u53f3\u62ec\u53f7\u5c06\u88ab\u79fb\u5230\u65e0\u7a77\u8fdc\u5904\u3002\n\n\u6211\u4eec\u53ea\u8981\u5c06\u6240\u6709\u7684\u53f3\u62ec\u53f7\u90fd\u79fb\u5230\u65e0\u7a77\u8fdc\u5904\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\n\u7edf\u8ba1\u7b54\u6848\uff1f\n\n\u52a0\u5165\u4e00\u5bf9\u62ec\u53f7\u65f6\u3002\u4f1a\u4ea7\u751f\u4e00\u5bf9\u65b0\u7684\u5339\u914d\u62ec\u53f7\u3002\u548c\u4e00\u4e2a\u65b0\u7684\u53f3\u62ec\u53f7\u3002\n\n\u6211\u4eec\u53ea\u9700\u8981\u5c06\u8fd9\u5bf9\u62ec\u53f7\u7684\u53f3\u62ec\u53f7\u7f16\u53f7\u4fee\u6539\u4f7f\u5f97\u5b83\u4eec\u7f16\u53f7\u76f8\u540c\u3002\u800c\u4e0d\u9700\u8981\u5904\u7406\u90a3\u4e2a\u65b0\u7684\u53f3\u62ec\u53f7\uff08\u60f3\u4e00\u60f3\uff09\u3002\n\n\u8fd9\u6837\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684\u7edf\u8ba1\u7b54\u6848\u4e86\u3002\n\n\n\u597d\u50cf\u8bb2\u8d77\u6765\u4e0d\u662f\u5f88\u660e\u767d\u3002\u4e0d\u5982\u770b\u770b\u4ee3\u7801= =\u3002\n\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#include<set>\nnamespace metaphysics\n{\n    const int N=201000,M=N<<1,INF=2147483647;\n    typedef std::pair<int,int> pii;\n    struct key{int ty,id,w,pos;key(){}key(int a,int b,int c){ty=a,id=b,w=c;}};\n    //ty\u8868\u793a\u5de6\u53f3\u62ec\u53f7 id\u8868\u793a\u7f16\u53f7 w\u4e3a\u4eba\u6c14\u503c pos\u4e3a\u6392\u5e8f\u540e\u7684\u4f4d\u7f6e\n    bool operator < (key a,key b){return a.w==b.w?a.ty>b.ty:a.w<b.w;}\n    key s[M];\n    pii t[N];\n    std::priority_queue<int>Q;\n    std::priority_queue<int,std::vector<int>,std::greater<int>>S; //\u8fd9\u662f\u5c0f\u6839\u5806\n    bool done[M];\n    int begin[N],next[M],pre[M];//\u94fe\u8868 \u7528\u6765\u5c06\u76f8\u540c\u7f16\u53f7\u7684\u62ec\u53f7\u8fde\u8d77\u6765\n    int n,m,tot,ans;\n    void gotin()\n    {\n        scanf(\"%d\",&n);\n        for(int i=1,x,y;i<=n;i++)scanf(\"%d%d\",&x,&y),s[i]=key(1,x,y);\n        for(int i=1,x,y;i<=n;i++)scanf(\"%d%d\",&x,&y),s[n+i]=key(-1,x,y);\n        m=n;n<<=1;\n        std::sort(s+1,s+n+1);\n        //\u6392\u5e8f\u5f97\u5230\u62ec\u53f7\u5e8f\u5217\n        for(int i=1;i<=n;i++)s[i].pos=i;\n        for(int i=n,x;i;i--)\n        {\n            x=s[i].id;\n            pre[begin[x]]=i;\n            next[i]=begin[x];\n            begin[x]=i;\n        }\n        //\u8fde\u63a5\u540c\u7f16\u53f7\u7684\u62ec\u53f7\n    }\n    void first_greedy()\n    {\n        tot=0;\n        for(int i=1,pos;i<=m;i++)\n            for(pos=begin[i];pos;pos=next[pos])\n                if(s[pre[pos]].ty>0 && s[pos].ty<0)\n                {\n                    pos[next][pre]=pos[pre][pre];     //\u76f8\u5f53\u4e8e   pre[next[pos]]=pre[pre[pos]]\n                    pos[pre][pre][next]=pos[next];    //\u76f8\u5f53\u4e8e   next[pre[pre[pos]]]=next[pos]\n                    pos[done]=pos[pre][done]=1;       //\u76f8\u5f53\u4e8e   done[pos]=done[pre[pos]]=1\n                    //done\u6570\u7ec4 \u7528\u6765\u8bb0\u5f55\u662f\u5426\u88ab\u5339\u914d\n                    t[++tot]=pii(pre[pos],pos);\n                }\n        //\u8d2a\u5fc3\u5730\u6d88\u9664 \u5df2\u5339\u914d\u7684 \u540c\u7f16\u53f7\u62ec\u53f7\u5bf9\n\n        int cnt=0;\n        while(!S.empty())S.pop();\n\n        for(int i=1;i<=n;i++)\n            if(done[i])continue;\n            else if((s[++cnt]=s[i]).ty>0)t[++tot]=pii(s[i].pos,INF);//\u5c06\u5de6\u62ec\u53f7\u770b\u505a\u53f3\u7aef\u70b9\u65e0\u7a77\u8fdc\u7684\u62ec\u53f7\u5bf9\n            else S.push(s[i].pos);         \n\n        std::sort(t+1,t+tot+1);\n        //\u5c06\u6240\u6709\u53ef\u52a0\u5165\u62ec\u53f7\u5bf9\u6392\u5e8f\n    }\n    void second_not_greedy()\n    {\n        while(!Q.empty())Q.pop();\n        ans=0;\n\n        int maxr,mit=S.top();\n        //mit\u8868\u793a\u5f53\u524d\u6700\u5de6\u8fb9\u7684 \u5f85\u5339\u914d\u53f3\u62ec\u53f7 \u7684\u4f4d\u7f6e\n        for(int i=1;i<=tot && !S.empty();i++)\n        {\n            Q.push(t[i].second);\n            while((t[i+1].first>mit || i==tot) && !S.empty())\n            {\n                maxr=Q.top();Q.pop();\n                //maxr\u8868\u793a\u5f53\u524d\u53ef\u5339\u914d\u62ec\u53f7\u4e2d\u6700\u8fdc\u7684\u53f3\u62ec\u53f7\u7684\u4f4d\u7f6e\n                //\u5982\u679cmaxr\u7b49\u4e8eINF \u6211\u4eec\u53ef\u4ee5\u5c06\u5176\u5339\u914d\u6389\n                if(maxr<INF)S.push(maxr);\n                S.pop();\n                mit=S.top();\n                ans++;\n                //\u7edf\u8ba1\u7b54\u6848\n            }\n        }\n    }\n    void solve()\n    {\n        gotin();\n        first_gredy();\n        second_not_gredy();\n        printf(\"%d\\n\",ans);\n    }\n}\nint main()\n{\n    metaphysics::solve();\n    return 0;\n}\n```",
        "postTime": 1491814521,
        "uid": 17993,
        "name": "demerzel_iv",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3696 \u3010Bushiroad\u7684\u5076\u50cf\u6d3e\u5bf9\u3011"
    }
]