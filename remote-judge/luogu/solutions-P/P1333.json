[
    {
        "content": "\n\u4e3b\u8981\u7684\u7b97\u6cd5\u662f\u6b27\u62c9\u8def\u3002\n\n\u9898\u76ee\u8981\u6c42\u6bcf\u6761\u6728\u68cd\u90fd\u7528\u8fc7\uff0c\u540c\u989c\u8272\u7684\u4e24\u7aef\u53ef\u4ee5\u76f8\u63a5\uff0c~~\u5982\u679c\u6ca1\u6709\u5b57\u7b26\u4e32\u5904\u7406\uff0c\u51e0\u4e4e\u662f\u4e00\u9053\u6b27\u62c9\u8def\u7684\u6a21\u677f\u9898~~\n\n\u628a\u6bcf\u79cd\u989c\u8272\u770b\u505a\u4e00\u4e2a\u70b9\uff0c\u6728\u68cd\u770b\u505a\u8fde\u63a5\u4e24\u79cd\u989c\u8272\u7684\u65e0\u5411\u8fb9\uff0c\u6574\u4e2a\u95ee\u9898\u5c31\u8f6c\u5316\u6210\u4e86\u6c42\u8fd9\u4e2a\u56fe\u662f\u5426\u5b58\u5728\u6b27\u62c9\u8def\u3002\n\n\u5bf9\u4e8e\u70b9\u7684\u7f16\u53f7\uff0c\u53ef\u4ee5\u91c7\u7528\u5b57\u5178\u6811\u6216\u8005\u7528STL\u91cc\u7684unordered\\_map\uff08map\u4f1a\u8d85\u65f6\uff09\u3002**\u91cd\u8981\uff1a\u5efa\u8bae\u4e0d\u9009STL,\u975e\u5e38\u6162\u2026\u2026**\n\n\u63a5\u4e0b\u6765\u5c31\u662f\u6b27\u62c9\u8def\u7684\u5224\u5b9a\u3002\n\n\u9996\u5148\u56fe**\u5fc5\u987b\u662f\u8054\u901a\u7684**\u3002\u697c\u4e0b\u7ed9\u51fa\u4e86\u7528dfs\u7684\u65b9\u6cd5\uff0c\u8fd9\u91cc\u7ed9\u51fa\u7528\u5e76\u67e5\u96c6\u7684\u65b9\u6cd5\u3002\n\n\u5bf9\u4e8e\u6240\u6709\u7684\u70b9\u5efa\u7acb\u4e00\u4e2a\u5e76\u67e5\u96c6\u3002\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u5c1d\u8bd5\u628a\u5b83\u4e24\u7aef\u7684\u70b9\u5408\u5e76\uff0c\u5e76\u8bb0\u5f55\u6709\u6548\u5408\u5e76\uff08\u5373\u5408\u5e76\u524d\u4e24\u4e2a\u70b9\u4e0d\u5728\u540c\u4e00\u7ec4\u4e2d\uff09\u7684\u6b21\u6570\u3002\n\n\u8bbe\u70b9\uff08\u6ce8\u610f\u4e0d\u662f\u8fb9\uff09\u7684\u6570\u91cf\u4e3aN\uff0c\u6709\u6548\u5408\u5e76\u6b21\u6570\u4e3aM\uff0c\u5219\u5f53\u4e14\u4ec5\u5f53M==N-1\u65f6\u56fe\u662f\u8054\u901a\u7684\u3002\u4e0b\u9762\u7ed9\u51fa\u7b80\u5355\u8bf4\u660e\uff1a\n\n\u5982\u679c\u56fe\u662f\u8054\u901a\u56fe\uff0c\u5e76\u67e5\u96c6\u5c31\u53ea\u6709\u4e00\u4e2a\u7ec4\u3002\u800c\u521d\u59cb\u6709N\u4e2a\u7ec4\uff0c\u6bcf\u6b21\u6709\u6548\u5408\u5e76\u4f1a\u51cf\u5c11\u4e00\u4e2a\u7ec4\uff0c\u6700\u540e\u53ea\u5269\u4e00\u4e2a\u7ec4\uff0c\u6240\u4ee5\u6709\u6548\u5408\u5e76\u6b21\u6570M=N-1\u3002\n\n\u5176\u6b21\uff08\u4e5f\u662f\u6700\u540e\uff09\uff0c\u56fe\u4e2d\u5947\u6570\u5ea6\u6570\u7684\u70b9\u7684\u4e2a\u6570\u5fc5\u987b\u4e3a0\uff08\u6700\u540e\u56de\u5230\u51fa\u53d1\u70b9\uff09\u62162\uff08\u4e00\u4e2a\u70b9\u51fa\u53d1\uff0c\u53e6\u4e00\u4e2a\u70b9\u7ed3\u675f\uff09\u3002\u5bf9\u6b64\uff0c\u8f93\u5165\u65f6\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u5ea6\u6570\uff0c\u6700\u540e\u5168\u90e8\u626b\u4e00\u904d\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n**\u6838\u5fc3\u90e8\u5206\u4ee3\u7801\u5982\u4e0b\uff1a**\n\n```cpp\n#include <stdio.h>\n#define N 500010//\u9898\u76ee\u4e2d\u8bf4\u6700\u591a\u6709250000\u6761\u8fb9\uff0c\u4e5f\u5c31\u662f\u6700\u591a\u6709500000\u4e2a\u70b9\nint n=0,deg[N];char s[15];//n:\u70b9\u6570\uff08\u989c\u8272\u6570\uff09,deg:\u6bcf\u4e2a\u70b9\u5ea6\u6570\n/*\u6c42\u7f16\u53f7\u90e8\u5206(getid)*/\n//...\n/*\u5e76\u67e5\u96c6*/\nint fa[N];\ninline int find(int a) {\n    return fa[a]?fa[a]=find(fa[a]):a;\n}\ninline bool join(int a,int b) {//\u6709\u6548\u5408\u5e76\u8fd4\u56detrue,\u65e0\u6548\u8fd4\u56defalse \n    int x=find(a),y=find(b);\n    if(x==y) return false;\n    fa[x]=y;return true;\n}\n/********************/\ninline bool check() {\n    int x,y,cnt=0;\n    while(~scanf(\"%s\",s)) {\n        x=getid(s);\n        scanf(\"%s\",s);\n        y=getid(s);//getid\u6c42\u7f16\u53f7 \n        if(join(x,y)) ++cnt;//\u8bb0\u5f55\u6709\u6548\u5408\u5e76\u6b21\u6570 \n        ++deg[x];++deg[y];//\u7edf\u8ba1\u5ea6\u6570 \n    }\n    if(cnt<n-1) return false;//\u5224\u8054\u901a:\u53ea\u6709\u5f53cnt==n-1\u65f6\u662f\u8054\u901a\u7684 \n    cnt=0;//\u8bb0\u5f55\u5947\u6570\u5ea6\u70b9\u7684\u4e2a\u6570\n    for(int i=1;i<=n;++i) if((deg[i]&1)&&++cnt>2) return false;//\u626b\u4e00\u904d\u989c\u8272\u7684\u5ea6,\u5947\u6570\u5ea6\u70b9\u4e2a\u6570>2\u5c31\u9000\u51fa \n    return true;\n}\nint main() {\n    puts(check()?\"Possible\":\"Impossible\");\n    return 0;\n}\n```\n**\u6c42\u7f16\u53f7\u7684\u90e8\u5206(\u4e24\u79cd\u505a\u6cd5)\uff1a**\n\n```cpp\n/*1.Trie/\u5b57\u5178\u6811*/\nint nd=1,root=1;struct node{int son[26],num;}t[1000010];\nint getid(const char *s) {\n    int k=root;char c;\n    for(int i=0;s[i];++i) {\n        c=s[i]-'a';\n        if(!t[k].son[c]) t[k].son[c]=++nd;//\u52a8\u6001\u5f00\u70b9\n        k=t[k].son[c];\n    }\n    if(!t[k].num) t[k].num=++n;\n    return t[k].num;\n}\n/*2.unordered_map*/\n#include <string>\n#include <unordered_map>\nusing namespace std;\nunordered_map<string,int> M;\nint getid(const char *s) {\n    return M[s]?M[s]:M[s]=++n;\n}\n```",
        "postTime": 1501059313,
        "uid": 37132,
        "name": "\u70ed\u8a00\u70ed\u8bed",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P1333 \u3010\u745e\u745e\u7684\u6728\u68cd\u3011"
    },
    {
        "content": "hash\u5927\u6cd5\u597d\uff0c\u7a0b\u5e8f\u5f88\u77ed\uff0c\u5c31\u662f\u901f\u5ea6\u6bd4\u5b57\u5178\u6811\u6162\u3002\n\u601d\u8def\u548c\u697c\u4e0b\u4e00\u6837\uff0c\u6b27\u62c9\u8def\uff0c\u5224\u65ad\u5947\u5165\u5ea6\u70b9\u4e2a\u6570\u548c\u5757\u6570\uff0c\u5947\u5165\u5ea6\u70b9\u5c0f\u4e8e3\u5757\u6570\u5c0f\u4e8e2\u4e3a\u6b27\u62c9\u8def\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream> \nusing namespace std;\n#define fo(a,b,c) for(int a=b;a<=c;a++)\nint read(){\n    int a=0,f=0;char c=getchar();\n    for(;c<'0'||c>'9';c=getchar())if(c=='-')f=1;\n    for(;c>='0'&&c<='9';c=getchar())a=a*10+c-'0';\n    return f?-a:a;\n}\nconst int seed=10086,mo=1e6+7;\nint a[mo],fa[mo];\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\nint hash(string s){\n\tint ha=0;\n\tfo(i,0,s.size()-1)ha=(1ll*ha*seed+s[i])%mo;\n\treturn ha;\n}//hash\nint main(){\n    int cnt=0,fct=0,sum=0;\n    for(string s[2];cin>>s[0]>>s[1];){\n    \tint b[2];\n    \tfo(j,0,1){\n    \t\tif(!a[b[j]=hash(s[j])]++)fa[b[j]]=b[j],fct++;//\u5982\u679c\u662f\u65b0\u7684\u989c\u8272\uff0c\u5e76\u67e5\u96c6\u8d4b\u521d\u503c\uff0c\u5757\u6570+1\n\t\t\tif(a[b[j]]&1)sum++;else sum--;//\u8c03\u6574\u5947\u5165\u5ea6\u70b9\n\t\t}\n\t\tif(find(b[0])!=find(b[1]))\n\t\t    fa[fa[b[0]]]=fa[b[1]],fct--;//\u5408\u5e76\n\t}\n\tcout<<((fct<2&&sum<3)?\"P\":\"Imp\")<<\"ossible\";\n    return 0;\n}\n```",
        "postTime": 1528782581,
        "uid": 12668,
        "name": "Minclxc",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1333 \u3010\u745e\u745e\u7684\u6728\u68cd\u3011"
    },
    {
        "content": "## \u8bf4\u5728\u524d\u9762\n\n\u7528M\u2193\u5199\u7684\u7b2c\u4e00\u7bc7\u9898\u89e3\uff0c\u6b22\u8fce\u63d0\u51fa\u610f\u89c1\n\n## \u5206\u6790\n\n\u4e00\u6839\u6728\u68d2\u5c31\u76f8\u5f53\u4e8e\u4e00\u6761\u8fb9\uff0c\u6728\u68d2\u4e24\u8fb9\u7684\u989c\u8272\u5c31\u662f\u8fd9\u6761\u8fb9\u6240\u8fde\u7684\u70b9\n\n\u90a3\u4e48\uff0c\u8fd9\u9053\u9898\u5c31\u662f\u95ee\u4e00\u5f20\u56fe\u662f\u5426\u5b58\u5728\u6b27\u62c9\u8def\n\n\u6b27\u62c9\u8def\u7684\u5224\u5b9a\u5f88\u7b80\u5355\u2014\u2014\u6240\u6709\u70b9\u90fd\u8fde\u901a\uff08\u5e76\u67e5\u96c6\uff09\uff0c\u6700\u591a\u4e24\u4e2a\u70b9\u7684\u5ea6\u4e3a\u5947\u6570\uff08\u4e00\u4e2a\u6570\u7ec4\u5c31\u53ef\u4ee5\u641e\u5b9a\uff09\n\n\u90a3\u4e48\u8fd9\u9053\u9898\u4e4b\u6240\u4ee5\u662f\u84dd\u9898\uff0c\u662f\u56e0\u4e3a\u5b83\u5bf9\u65f6\u95f4\u8981\u6c42\u5f88\u4e25\u683c\u2014\u2014\u6700\u591a2.5e6\u4e2a\u6728\u68d2\n\n\u4ee5\u53ca\u8bfb\u5165\u7684\u5b57\u7b26\u4e32\u7684\u5904\u7406\n\n### \u5b57\u7b26\u4e32\u7684\u5904\u7406\n\n\u8fd9\u91cc\u6700\u6700\u6700\u5feb\u7684\u65b9\u5f0f\u662f\u7528$trie$\n\n$trie$\u4e2d\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e24\u4e2a\u5143\u7d20\uff0c$num$\u6807\u8bb0\u548c$26$\u4e2a\u6307\u9488\n\n**\u8fd9\u91cc\u6211\u4eec\u7528\u6570\u7ec4\u6a21\u62df\u6307\u9488**\n\n1. \u8bbe$0$\u662f\u6839\u8282\u70b9\uff0c\u5b9e\u9645\u4e0a\u4e0d\u4ee3\u8868\u4efb\u4f55\u7684\u5b57\u6bcd\n2. \u5bf9\u4e8e\u8981\u52a0\u5165\u7684\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\uff0c\u9010\u4f4d\u8003\u8651\n3. \u5982\u679c\u5f53\u524d\u8282\u70b9\u6ca1\u6709$str[i]$\u8fd9\u4e2a\u5b50\u8282\u70b9\u7684\u8bdd\u5c31\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u4e3a\u5b50\u8282\u70b9\n4. \u8df3\u8f6c\u5230\u8fd9\u4e2a\u5b50\u8282\u70b9\uff0c\u5224\u65ad\u4e0b\u4e00\u4f4d\n5. \u91cd\u590d3\u30014\u6b65\u9aa4\n6. \u5982\u679c\u6700\u7ec8\u7684\u8282\u70b9\u6ca1\u6709\u88ab\u5206\u914d\u4e00\u4e2a\u7f16\u53f7\u7684\u8bdd\uff0c\u90a3\u4e48\u8fd9\u4e2a\u5c31\u65b0\u5efa\u4e00\u4e2a\u7f16\u53f7\u7ed9\u8fd9\u4e2a\u7ec8\u8282\u70b9\n\n\u8fd9\u6837\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4e32\u90fd\u6709\u4e86\u552f\u4e00\u7684\u7f16\u53f7\uff0c\u4e14\u7f16\u53f7\u662f\u8fde\u7eed\u7684\uff0c\u65b9\u4fbf\u5f00\u6570\u7ec4\u7b49\u540e\u7eed\u64cd\u4f5c\n\n\u8fd9\u5c31\u5b8c\u6210\u4e86trie\u7684\u90e8\u5206\u2014\u2014\u5b57\u7b26\u4e32\u5230\u6b63\u6574\u6570\u7684\u6620\u5c04\n\n```cpp\nstruct Trie\n{\n\tint son[26],num;\n}trie[2000010];\nint n,trie_cnt;\nint insert(string str)\n{\n\tint now=0;\n\tfor(int i=0;i<str.size();i++)\n\t{\n\t\tif(!trie[now].son[str[i]-'a']) trie[now].son[str[i]-'a']=++trie_cnt;\n\t\tnow=trie[now].son[str[i]-'a'];\n\t}\n\tif(!trie[now].num) trie[now].num=++n;\n\treturn trie[now].num;\n}\n```\n\u53ef\u80fd\u6709\u4eba\u4f1a\u95ee\u4e3a\u4ec0\u4e48\u4e0d\u7528$map$\uff1f\n\n>\u56e0\u4e3a$map$\u6bcf\u6b21\u63d2\u5165\u662f$logn$\u7684\uff0c\u800c$trie$\u6bcf\u6b21\u63d2\u5165\u4e0e\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u6709\u5173\uff08\u770b\u4f5c$O(1)$\u5c31\u597d\uff09\uff0c\u9898\u76ee\u4e5f\u8bf4\u4e86\u6bcf\u4e2a\u5355\u8bcd\u4e0d\u8d85\u8fc7$10$\u4e2a\u5b57\u6bcd\n>\n>\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528$unordered_map$\uff08\u9700\u8981C++11!\uff09\uff0c\u4e0d\u4f1a$STL$\u7684\u540c\u5b66\u53ef\u4ee5\u7528$hash$(\u8fd9\u4e2a\u8fd8\u662f\u6709\u70b9\u6162)\n>\n>\u6240\u4ee5\u8fd9\u91cc\u6700\u4f18\u7684\u5c31\u662f$trie$\u5566\uff01\n\n### \u5224\u65ad\u6b27\u62c9\u8def\n\n\u6b27\u62c9\u8def\u6709\u4e2a\u7ecf\u5178\u7684\u6545\u4e8b\u2014\u2014**\u4e03\u6865\u95ee\u9898**\uff0c\u76f8\u4fe1\u4f60\u5e94\u8be5\u8033\u719f\u80fd\u8be6\u4e86\n\n\u5373\uff1a\u7ecf\u8fc7\u6bcf\u6761\u8fb9\u6b63\u597d\u4e00\u6b21\uff0c\u80fd\u4e0d\u80fd\u628a\u6240\u6709\u8fb9\u90fd\u8d70\u4e00\u904d\uff1f\n\n\u53ef\u4ee5\u8bc1\u660e\uff0c\u53ea\u8981\u6574\u4e2a\u56fe\u662f**\u8fde\u901a**\u7684\uff0c\u4e14\u6709**\u5947\u6570\u5ea6\u7684\u70b9\u4e0d\u8d85\u8fc7\u4e24\u4e2a**\uff0c\u90a3\u4e48\u5c31\u5b58\u5728\u6b27\u62c9\u8def\uff01\n\n\u5ea6\u7684\u7edf\u8ba1\u53ea\u9700\u8981\u5728\u8bfb\u5165\u6728\u68d2\u7684\u65f6\u5019\u6807\u8bb0\u4e00\u4e0b\n\n\u5224\u65ad\u8fde\u901a\u56fe\u7528**\u5e76\u67e5\u96c6**\n\n#### \u8bfb\u5165\n\n```cpp\nwhile(cin>>str)\n{\n\tx=insert(str);\n\tcin>>str;\n\ty=insert(str);\n\tmerge(x,y);\n\tdegree[x]++;\n\tdegree[y]++;\n}\n```\n#### \u5224\u65ad\n\n\u5224\u65ad\u8fd9\u91cc\u6211\u7528\u4e86\u70b9\u5c0f\u6280\u5de7\uff0c\u540c\u65f6\u5224\u65ad\u5ea6\u548c\u5e76\u67e5\u96c6\n* \u5982\u679c\u6709\u76f8\u90bb\u7684\u4e24\u9879\u7684\u7956\u5148\u662f\u4e0d\u540c\u7684\uff0c\u90a3\u4e48\u8fd9\u80af\u5b9a\u4e0d\u662f\u8fde\u901a\u56fe\uff0c\u7ed9flag\u52a0\u4e0a\u4e00\u4e2a\u5927\u6570\u5b57\n* \u5982\u679c\u8fd9\u70b9\u7684\u5ea6\u662f\u5947\u6570\uff0c\u90a3\u4e48flag+1\u5c31\u597d\n* \u6700\u540e\u5224\u65adflag\uff0c\u5927\u4e8e2\u8bf4\u660e\u5947\u5ea6\u70b9\u591a\u4e86\u6216\u8005\u56fe\u4e0d\u8fde\u901a\uff0c\u5373\u4e0d\u53ef\u80fd\u6709\u6b27\u62c9\u8def\uff0c\u53cd\u4e4b\u5219\u5b58\u5728\n```cpp\nint flag=(degree[1]&1);\nfor(int i=2;i<=n;i++)\n{\n\tif(getf(i)!=getf(i-1)) flag+=10;\n\tif(degree[i]&1) flag++;\n}\nif(flag>2) cout<<\"Impossible\"<<endl;\nelse cout<<\"Possible\"<<endl;\n```\n## Code\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<cstdio>\n#include<cstring>\n#include<cmath>\n#include<map>\n#include<queue>\n#include<vector>\n#define IL inline\n#define re register\n#define LL long long\n#define ULL unsigned long long\n#define re register\n#define debug printf(\"Now is %d\\n\",__LINE__);\nusing namespace std;\n\ntemplate<class T>inline void read(T&x)\n{\n    char ch=getchar();\n    while(!isdigit(ch))ch=getchar();\n    x=ch-'0';ch=getchar();\n    while(isdigit(ch)){x=x*10+ch-'0';ch=getchar();}\n}\ninline int read()\n{\n\tint x=0;\n    char ch=getchar();\n    while(!isdigit(ch))ch=getchar();\n    x=ch-'0';ch=getchar();\n    while(isdigit(ch)){x=x*10+ch-'0';ch=getchar();}\n    return x;\n}\nint G[55];\ntemplate<class T>inline void write(T x)\n{\n    int g=0;\n    if(x<0) x=-x,putchar('-');\n    do{G[++g]=x%10;x/=10;}while(x);\n    for(re int i=g;i>=1;--i)putchar('0'+G[i]);putchar('\\n');\n}\n\n\n\nstruct Trie\n{\n\tint son[26],num;\n}trie[2000010];\nint n,trie_cnt;\nint insert(string str)\n{\n\tint now=0;\n\tfor(int i=0;i<str.size();i++)\n\t{\n\t\tif(!trie[now].son[str[i]-'a']) trie[now].son[str[i]-'a']=++trie_cnt;\n\t\tnow=trie[now].son[str[i]-'a'];\n\t}\n\tif(!trie[now].num) trie[now].num=++n;\n\treturn trie[now].num;\n}\nint f[500010];\nint getf(int x)\n{\n\twhile(x!=f[x]) x=f[x];\n\treturn x;\n}\nvoid merge(int x,int y)\n{\n\tx=getf(x);\n\ty=getf(y);\n\tf[x]=y;\n}\nint degree[500010];\nint main()\n{\n\tstring str;\n\tint x,y;\n\tfor(int i=1;i<=500000;i++) f[i]=i;\n\twhile(cin>>str)\n\t{\n\t\tx=insert(str);\n\t\tcin>>str;\n\t\ty=insert(str);\n\t\tmerge(x,y);\n\t\tdegree[x]++;\n\t\tdegree[y]++;\n\t}\n\tint flag=(degree[1]&1);\n\tfor(int i=2;i<=n;i++)\n\t{\n\t\tif(getf(i)!=getf(i-1)) flag+=10;\n\t\tif(degree[i]&1) flag++;\n\t}\n\tif(flag>2) cout<<\"Impossible\"<<endl;\n\telse cout<<\"Possible\"<<endl;\n\treturn 0;\n}\n```\n## \u7591\u60d1\n\n\u5982\u679c\u51fa\u73b0\uff0c\u6709\u4e24\u6839\u76f8\u540c\u7684\u6728\u68d2\u600e\u4e48\u529e\uff1f\u9898\u76ee\u4e2d\u5e76\u6ca1\u6709\u5426\u8ba4\u8fd9\u79cd\u60c5\u51b5\uff0c\u4f46\u662f\u4e0d\u8fd9\u6837\u5224\u65ad\u7684\u8bdd\u4e5f\u8fc7\u4e86\u554a\u2026\u2026\u5947\u602a\n\n\u5982\u679c\u4ee5\u540e\u8fd9\u9053\u9898\u4fee\u6539\u6216\u8005\u52a0\u5f3a\u4e86\uff0c\u8bf7\u6765\u8e22\u6211\u4e00\u811a\uff08",
        "postTime": 1604199589,
        "uid": 188769,
        "name": "Vanilla_chan",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 P1333 \u3010\u745e\u745e\u7684\u6728\u68cd\u3011"
    },
    {
        "content": "\u8003\u7684\u662fhash\u51fd\u6570\u3002\u8fd9\u91cc\u6211\u4eec\u4e0d\u53bb\u6784\u9020hash\u51fd\u6570\u3002\u800c\u7528\u5b57\u5178\u6811\u7684\u65b9\u6cd5\u6765\u5b9e\u73b0hash\u3002\u5373\u5c06\u5355\u8bcd\u8fd9\u6837\u7684\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3aint\u7c7b\u578b\u3002\u4fbf\u4e8e\u6211\u4eec\u7528\u4e0b\u6807\u8bbf\u95ee\u3002\u7136\u540e\u7528\u6728\u68cd\u7684\u4fe1\u606f\u5efa\u7acb\u4e00\u5f20\u56fe\u3002\u5373\u4e00\u6839\u6728\u68cd\u5c31\u662f\u4e00\u6761\u8fb9\u3002\u7136\u540e\u9700\u8981\u8fde\u63a5\u8d77\u6765\u3002\u5b83\u7684\u6761\u4ef6\u5c31\u662f\u3002\u8fd9\u6574\u5f20\u56fe\u4e3a\u6b27\u62c9\u56fe\u3002\u4e5f\u5c31\u662f\u4e00\u7b14\u753b\u3002\u7136\u540e\u5224\u65ad\u7684\u65b9\u6cd5\u662f\u3002\n\n1.\u56fe\u662f\u8054\u901a\u7684\u3002\n\n2.\u7edf\u8ba1\u6240\u6709\u7684\u70b9\u7684\u51fa\u5ea6\u3002\u5982\u679c\u51fa\u5ea6\u5168\u90e8\u4e3a\u5076\u6570\u6216\u8005\u6070\u597d\u53ea\u6709\u4e24\u4e2a\u70b9\u4e3a\u5947\u6570\u3002\u5219\u53ef\u4ee5\u4e00\u7b14\u753b\u3002\u5219\u80fd\u591f\u628a\u6240\u6709\u7684\u6728\u68cd\u90fd\u8fde\u63a5\u8d77\u6765\u3002\n\n//\u8054\u901a\u7684\u8bdd\u7528\u5e76\u67e5\u96c6\u4e5f\u53ef\u4ee5\u3002\u7528dfs\u4ece\u4efb\u610f\u4e00\u4e2a\u70b9\u8fdb\u884c\u641c\u7d22\u7136\u540e\u770b\u4e0b\u80fd\u4e0d\u80fd\u8d70\u5230\u6240\u6709\u7684\u70b9\u3002\u4e5f\u53ef\u4ee5\u3002\u4f46\u662f\u63a8\u8350\u7528dfs\uff0c\u56e0\u4e3a\u53ef\u4ee5\u4e00\u8fb9\u7edf\u8ba1\u51fa\u5ea6\u4fe1\u606f\u3002\n\n\u7136\u540e\u5982\u679c\u4e0d\u60f3\u6253\u5b57\u5178\u6811\u3002\u8fd8\u6709\u4e00\u79cd\u65b9\u6cd5\u3002\u5c31\u662f\u628a\u8fb9\u7684\u4fe1\u606f\u8bb0\u5f55\u4e0b\u6765(\u8bb0\u5f55\u7684\u65f6\u5019\uff0c\u4e24\u4e2a\u5b57\u7b26\u4e32\u8fdb\u884c\u4e00\u4e0b\u6bd4\u8f83\uff0c\u5c0f\u7684\u653e\u524d\u9762)\u3002\u7136\u540e\u5bf9\u8fb9\u7684\u4fe1\u606f\u8fdb\u884c\u6392\u5e8f\u3002\u4ee5\u8fb9\u7684\u5de6\u7aef\u70b9\u4f5c\u4e3a\u5173\u952e\u5b57\u6392\u5e8f\u3002\u7136\u540e\u5de6\u7aef\u70b9\u76f8\u540c\u7684\u8fb9\u5c31\u4f1a\u7d27\u90bb\u5728\u4e00\u8d77\u3002\u6211\u4eec\u628a\u5b57\u7b26\u4e32\u7f16\u53f7\u4e00\u4e0b\u5c31\u53ef\u4ee5\uff0c\u7136\u540e\u8fd8\u662f\u4e00\u6837\u5efa\u56fe\u5373\u53ef\u3002\u3002\n\n```cpp\n#include <cstdio>  \n#include <cstring>  \n  \nstruct tree//\u7528\u5b57\u5178\u6811\u7684\u65b9\u6cd5\u6765\u83b7\u53d6\u67d0\u4e2a\u5355\u8bcd\u7684hash\u503c\u3002  \n{  \n    int hash;  \n    int next[27];  \n};  \n  \nint tot = 0, ne[500001], first[500001], en[500001], totm = 0, chudu[500001] = { 0 },temp_tot,tot_v=1;  \n//\u7528\u90bb\u63a5\u8868\u6765\u5b58\u50a8\u56fe\u7684\u4fe1\u606f\u3002  \nbool visited[500001] = { 0 };  \ntree a[800001]; //\u7528\u6570\u7ec4\u6765\u6a21\u62df\u94fe\u8868\u3002  \n  \nint sear_ch(char s[50])//\u7528\u5b57\u5178\u6811\u3002\u6765\u83b7\u53d6s\u8fd9\u4e2a\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684hash\u503c\u3002  \n{  \n    int l = strlen(s);//\u83b7\u53d6\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002  \n    int p = 1;//\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u5f80\u4e0b\u8d70  \n    for (int i = 1; i <= l; i++)  \n    {  \n        int x = s[i - 1] - 'a' + 1;//\u628a\u5c0f\u5199\u5b57\u6bcd\u548c\u6570\u5b571..26\u5bf9\u5e94  \n        if (a[p].next[x] == 0)//\u5982\u679c\u8fd9\u4e2a\u8282\u70b9\u4e0d\u5b58\u5728\u3002\u5219\u65b0\u5efa\u4e00\u4e2a\u8282\u70b9\u3001  \n        {  \n            tot_v++;  \n            a[p].next[x] = tot_v;  \n        }  \n        p = a[p].next[x];//\u4e00\u76f4\u5f80\u4e0b\u8d70\u3002  \n    }  \n    if (a[p].hash == 0)//\u5982\u679c\u8fd9\u6761\u8def\u5f84(\u8fd9\u4e2a\u5b57\u7b26\u4e32)\u4e4b\u524d\u6ca1\u4eba\u8d70\u8fc7\uff0c\u5219\u7ed9\u5176\u4e00\u4e2a\u65b0\u7684hash\u503c  \n        a[p].hash = ++tot;  \n    return a[p].hash;//\u7136\u540e\u76f4\u63a5\u8fd4\u56de\u8fd9\u4e2a\u503c\u5c31\u53ef\u4ee5\u4e86\u3002\u3002  \n}  \n  \nvoid add(int x, int y)//\u52a0\u4e00\u6761\u4ecex\u6307\u5411y\u7684\u8fb9  \n{  \n    totm++;  \n    ne[totm] = first[x];//\u90bb\u63a5\u8868\u7528\u7684\u662f\u94fe\u5f0f\u5b58\u50a8\u7684\u65b9\u5f0f\u3002  \n    first[x] = totm;  \n    en[totm] = y;  \n}  \n  \nvoid dfs(int now)//\u8fd9\u4e2a\u7a0b\u5e8f\u4f1a\u4ece\u6700\u540e\u4e00\u4e2a\u70b9\u5f00\u59cb\u8fdb\u884cdfs\u770b\u4e00\u4e0b\u80fd\u4e0d\u80fd\u8d70\u904d\u6240\u6709\u7684\u70b9\u3002  \n{  \n    temp_tot--;//\u627e\u5230\u4e86\u4e00\u4e2a\u70b9\uff0c\u70b9\u7684\u6570\u76ee\u5c31\u51cf\u5c11\u3002\u6700\u540e\u770btemp_tot\u662f\u5426\u4e3a0  \n    visited[now] = true;  \n    int temp = first[now];  \n    while (temp != 0)//\u7528\u90bb\u63a5\u8868\u6765\u83b7\u53d6\u8fd9\u4e2a\u70b9\u7684\u51fa\u5ea6\u3002  \n    {  \n        chudu[now]++;//\u987a\u4fbf\u8bb0\u5f55\u51fa\u5ea6  \n        int y = en[temp];  \n        if (!visited[y])//\u5982\u679c\u6ca1\u6709\u8bbf\u95ee\u8fc7\u5c31\u8bbf\u95ee\u3002  \n            dfs(y);  \n        temp = ne[temp];//\u5bfb\u627e\u4e0b\u4e00\u4e2a\u51fa\u5ea6  \n    }  \n}  \n  \nint main()  \n{  \n    char s1[50], s2[50];  \n    while (scanf(\"%s%s\", s1, s2) != -1)//\u591a\u884c\u8f93\u5165  \n    {  \n        int x, y;  \n        x = sear_ch(s1);  \n        y = sear_ch(s2);  \n        add(x, y);  \n        add(y, x);  \n    }  \n    temp_tot = tot;//\u7528\u6765\u9012\u51cf\u7684temp  \n    if (tot>0) //\u5982\u679c\u4ec0\u4e48\u90fd\u6ca1\u8f93\u5165\u4e5f\u7b97\u662f\u53ef\u4ee5\u7684\u3002  \n        dfs(tot);  \n    if (temp_tot != 0)//\u5982\u679c\u56fe\u662f\u4e0d\u8fde\u901a\u7684\u5219\u4e0d\u80fd\u4e00\u7b14\u753b  \n    {  \n        printf(\"Impossible\");  \n        return 0;  \n    }  \n    int oushu = 0, jishu = 0;//\u7edf\u8ba1\u5947\u6570\u7684\u51fa\u5ea6\u548c\u5076\u6570\u7684\u51fa\u5ea6\u7684\u4e2a\u6570\u3002  \n    for (int i = 1; i <= tot; i++)  \n        if ((chudu[i] % 2) == 0)//\u5176\u5b9e\u53ea\u8981\u7edf\u8ba1\u5947\u6570\u7684\u51fa\u5ea6\u7684\u4e2a\u6570\u5c31\u53ef\u4ee5\u4e86\u3002  \n            oushu++;  \n        else  \n            jishu++;  \n    if (jishu == 0 || jishu == 2)//\u53ef\u4ee5\u770b\u5230\u53ea\u8981\u7edf\u8ba1\u5947\u6570\u7684\u51fa\u5ea6\u4e2a\u6570\u5c31\u53ef\u4ee5\u3002\u3002  \n        printf(\"Possible\");  \n    else  \n        printf(\"Impossible\");  \n    return 0;  \n}  \n```",
        "postTime": 1483257974,
        "uid": 32378,
        "name": "Malgr\u00e9_L_Guerre",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1333 \u3010\u745e\u745e\u7684\u6728\u68cd\u3011"
    },
    {
        "content": "\u9898\u76ee\u5177\u4f53\u89e3\u6cd5\u662f\u6b27\u62c9\u8def\uff0c\u6211\u60f3\u6ca1\u4ec0\u4e48\u597d\u8bf4\u4e86\u3002\u5e76\u4e14\u9898\u76ee\u5e76\u6ca1\u6709\u8981\u4f60\u6c42\u5177\u4f53\u65b9\u6848\uff0c\u6240\u4ee5\u96be\u5ea6\u66f4\u4f4e\u4e86\uff0c\u53ea\u9700\u8981\u8bb0\u5f55\u4e00\u4e0b\u6bcf\u4e2a\u70b9\u5ea6\u7684\u5947\u5076\uff0c\u5224\u65ad\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u662f\u5426\u8d85\u8fc72\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7136\u800c\u8fd9\u6837\u6253\u53ea\u670980\u5206\uff0c\u56e0\u4e3a\u67092\u4e2a\u70b9\u7684\u60c5\u51b5\u6728\u68cd\u4e4b\u95f4\u5e76\u4e0d\u8fde\u901a\uff0c\u8fde\u4e0d\u8d77\u6765\u3002\u6240\u4ee5\u9700\u8981\u5e76\u67e5\u96c6\u6765\u5224\u65ad\u8fde\u901a\u3002\n\n\u7136\u800c\u8fd9\u6837\u6253\u7684\u8bdd\u53ea\u670990\u5206\uff0c\u56e0\u4e3amap+\u5e76\u67e5\u96c6\u65f6\u95f4\u590d\u6742\u5ea6\u4f1a\u7206\u4e00\u4e2a\u70b9\u3002\u6240\u4ee5\u8003\u8651\u4f18\u5316\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\uff0cmap\u4f7f\u7528RBT\u7ed3\u6784\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(nlogn)\uff0c\u5360\u53bb\u4e86\u5927\u90e8\u5206\u65f6\u95f4\u590d\u6742\u5ea6\u3002\u6240\u4ee5\u8003\u8651\u66f4\u5feb\u7684\u65b9\u6cd5\u3002\n\n\u8fd9\u65f6\u5019\u5c31\u662fpb\\_ds\u5e93\u767b\u573a\u7684\u65f6\u5019\u4e86\u3002\u5728pb\\_ds\u4e2d\u7684hash\\_table\u4f7f\u7528\u54c8\u5e0c\u7684\u65b9\u6cd5\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4ec5\u4e3aO(n)\uff0c\u53ef\u4ee5\u5feb\u901f\u8c03\u7528\u3002\n\n\u7136\u540e\u5c31\u6ca1\u6709\u7136\u540e\u4e86\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/hash_policy.hpp>//pb_ds\u5e93\n#include<cctype>\n#define For(i,a,b) for(i=(a);i<=(b);++i)\n#define Forward(i,a,b) for(i=(a);i>=(b);--i)\nusing namespace std;\nusing namespace __gnu_pbds;//\u547d\u540d\u7a7a\u95f4\ntemplate<typename T>inline void read(T &x){\n    T s=0,f=1;char k=getchar();\n    while(!isdigit(k)&&k^'-')k=getchar();\n    if(!isdigit(k)){f=-1;k=getchar();}\n    while(isdigit(k)){s=s*10+(k^48);k=getchar();}\n    x=s*f;\n}\nvoid file(void){\n    #ifndef ONLINE_JUDGE\n    freopen(\"P1333.in\",\"r\",stdin);\n    freopen(\"P1333.out\",\"w\",stdout);\n    #endif\n}\nconst int MAXN=250050;\nchar l[15],r[15];\nint e,f[MAXN];\nbool in[MAXN];\ngp_hash_table<string,int>G;//hash_table\u5b9a\u4e49\nint find(int x)\n{\n    int t=f[x],d;while(t!=f[t])t=f[t];\n    while(f[x]!=t){d=f[x];f[x]=t;x=d;}\n    return t;\n}\nvoid work()\n{\n    while(scanf(\"%s%s\",l,r)!=EOF)\n    {\n        if(!G[l])G[l]=++e,f[e]=e;\n        if(!G[r])G[r]=++e,f[e]=e;\n        if(e>250010)//\u5982\u679c\u70b9\u6570\u8d85\u8fc7n+1\u7684\u8bdd\uff0c\u4e00\u5b9a\u4e0d\u5b58\u5728\u901a\u8def\uff0c\u76f4\u63a5\u8fd4\u56de\u3002\n        {\n            printf(\"Impossible\\n\");\n            return;\n        }\n        in[G[l]]^=1;//\u4fee\u6539\u5947\u5076\u60c5\u51b5\n        in[G[r]]^=1;\n        f[find(G[l])]=find(G[r]);//\u5408\u5e76\u5e76\u67e5\u96c6\n    }\n    int flag=0;\n    int i;\n    For(i,1,e)if(in[i])//\u5224\u65ad\u5947\u70b9\u4e2a\u6570\u662f\u5426\u8d85\u8fc72\n    {\n        if(flag==2)\n        {\n            printf(\"Impossible\\n\");\n            return;\n        }\n        else ++flag;\n    }\n    int father=find(1);\n    For(i,2,e)if(find(i)^father)//\u5224\u65ad\u662f\u5426\u8fde\u901a\n    {\n        printf(\"Impossible\\n\");\n        return;\n    }\n    printf(\"Possible\\n\");\n}\nint main(void){\n    file();\n    work();\n    return 0;\n}\n```",
        "postTime": 1508292472,
        "uid": 7035,
        "name": "Great_Influence",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1333 \u3010\u745e\u745e\u7684\u6728\u68cd\u3011"
    },
    {
        "content": "/*\u8fd9\u662f\u8be5\u9898\u7684\u5e76\u67e5\u96c6\u5199\u6cd5\uff0c\u597d\u7406\u89e3\u6709\u5174\u8da3\u6765\u770b\u770b\uff1b\n\u9996\u5148\u8fd9\u9898\u662f\u4e00\u4e2a\u6b27\u62c9\u8def\uff0c\u4f46\u662f\u4ec5\u4ec5\u5224\u65ad\u662f\u4e0d\u662f\u6b27\u62c9\u8def\u53ea\u670970\u5206\u60f3\u62ff\u6ee1\u5206\u9700\u8981\u5224\u65ad\u5176\u4e2d\u7684\u6bcf\u4e00\u6839\u662f\u4e0d\u662f\u90fd\u76f8\u8fde\uff0c\u8fd9\u5c31\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u4e86\uff0c\u5177\u4f53\u770b\u4ee3\u7801\u3002\uff1b\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint w,q,p,z,cnt,t;\nstring d[500000],qq[250000][2];\nchar a[11],b[11];\nunordered_map<string,int>c,l;/*\u542c\u8bf4unordered_map\n\u6bd4map\u5feb*/\nunordered_map<string,string>f;\nstring find(string x)//\u5e76\u67e5\u96c6\u6a21\u677f\uff1b\n{\n    if(f[x]!=x)\tf[x]=find(f[x]);/*\u627e\u4e00\u79cd\u989c\u8272\u7684\u7236\u4eb2\n    \u8282\u70b9\uff1b*/\n    return f[x];\n}\nint main()\n{\n    while(scanf(\"%s%s\",a,b)!=EOF)\n    {\n        qq[++t][0]=a;\n        qq[t][1]=b;\n       \tc[a]++;//\u8ba1\u7b97a\u7684\u5165\u5ea6\uff1b\n       \tc[b]++;//\u540c\u4e0a\uff1b\n       \tif(!l[a])\n       \t{\n       \t\td[++w]=a;//\u8ba1\u4e0d\u76f8\u540c\u7684\u70b9\uff1b\n            l[a]=1;//\u6807\u8bb0\uff1b\n        }\n        if(!l[b])\n       \t{\n            d[++w]=b;//\u540c\u4e0a\uff1b\n            l[b]=1;\n        }\n    }\n    for(int i=1;i<=w;i++)\n    f[d[i]]=d[i];//\u5e76\u67e5\u96c6\u9884\u5904\u7406\uff1b\n    for(int i=1;i<=t;i++)\n    {\n        string x1=find(qq[i][0]),x2=find(qq[i][1]);\n        if(x1!=x2)\n        {\n            f[x1]=x2;\n        }\n    }\n    for(int i=1;i<=w;i++)//\u5224\u65ad\u662f\u5426\u5728\u4e00\u4e2a\u96c6\u5408\u4e2d\uff1b\n    {\n        if(f[d[i]]==d[i])\n        cnt++;\n    }\n    if(cnt>1)//\u5982\u679c\u96c6\u5408\u5927\u4e8e1\u4e2a\u8bf4\u660e\u4e0d\u80fd\u8fde\u8d77\u6765\uff1b\n    {\n        cout<<\"Impossible\";\n        return 0;\n    }\n    for(int i=1;i<=w;i++)//\u5224\u65ad\u662f\u5426\u4e3a\u6b27\u62c9\u8def\uff1b\n    {\n        if(c[d[i]]%2!=0)//\u5224\u65ad\u8be5\u79cd\u989c\u8272\u5165\u5ea6\u662f\u5426\u4e3a\u5947\u6570\uff1b\n        p++;\n    }\n    if(p==0||p==2)//\u5982\u679c\u5947\u70b9\u4e2a\u6570\u4e3a2\u62160\u8bf4\u660e\u6784\u6210\u4e86\u6b27\u62c9\u8def\n    {\n        cout<<\"Possible\";\n        return 0;\n    }\n    cout<<\"Impossible\";\n    return 0;\n}\n```",
        "postTime": 1527396242,
        "uid": 87457,
        "name": "wshz",
        "ccfLevel": 0,
        "title": "\u745e\u745e\u7684\u6728\u68cd"
    },
    {
        "content": "\u6b21\u4f18\u89e3\u6765\u53d1\u4e00\u7bc7\u9898\u89e3 \uff08orz [Terrible](https://www.luogu.com.cn/user/195942)\n## \u5206\u6790\u9898\u76ee\n### \u5bf9\u5b57\u7b26\u4e32\u7684\u5904\u7406\n\u6211\u770b\u9898\u89e3\u91cc\u54c8\u5e0c\u7684 $base$ \u597d\u50cf\u90fd\u662f\u968f\u4fbf\u9009\u4e00\u4e2a\u6570\u7684\uff0c\u5176\u5b9e\u5bf9\u4e8e\u8fd9\u9898\u662f\u6709\u6280\u5de7\u7684\u3002\n\n\u8003\u8651\u5230\u5b57\u7b26\u4e32 **\u90fd\u662f\u5c0f\u5199** \u5b57\u6bcd\uff0c\u6211\u4eec\u53ef\u4ee5\u57fa\u4e8e $26$ \u8fdb\u5236\u5bf9\u5b57\u7b26\u4e32\u8fdb\u884c\u54c8\u5e0c\uff0c\u8bbe\u54c8\u5e0c\u503c\u4e3a $x$\uff0c\u6bcf\u8bfb\u5165\u4e00\u4e2a\u5b57\u7b26 $c$ \uff0c\u5c31\u628a $x$ \u8d4b\u503c\u4e3a $(x \\times 26 + c - 97)$\uff08$97$ \u662f\u5b57\u7b26 $a$ \u7684 ASCII \u7801\uff09\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86 $x$ \u662f\u552f\u4e00\u7684\uff0c\u53ef\u4ee5\u907f\u514d\u4e00\u4e9b\u51b2\u7a81\u3002\n\n\u7531\u4e8e $x$ \u53ef\u80fd\u4f1a\u8fbe\u5230 $26^{10}$\uff0c\u6240\u4ee5\u8981\u5bf9\u5b83\u4e0d\u65ad\u53d6\u6a21\u3002\n\n\u54c8\u5e0c\u5e38\u6570\u8f83\u5c0f\uff0c\u800c\u4e14 **\u53ef\u4ee5\u7ed3\u5408\u5feb\u8bfb\u8fb9\u8bfb\u8fb9\u54c8\u5e0c** \uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4f18\u4e8e\u5b57\u5178\u6811\u3002\n\n### \u6b27\u62c9\u8def\n#### \u5b9a\u4e49\n\n\u5148\u628a\u6837\u4f8b\u7684\u56fe\u653e\u5728\u8fd9\u91cc\uff08\u989c\u8272\u7528\u5355\u8bcd\u9996\u5b57\u6bcd\u8868\u793a,\u865a\u7ebf\u6682\u65f6\u4e0d\u7ba1\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/me5wc8di.png)\n\n> \u6b27\u62c9\u8def\u662f\u6307\u8054\u901a\u56fe\uff08\u65e0\u5411\u56fe\u6216\u6709\u5411\u56fe\u4ea6\u53ef\uff09\u4e2d\u6240\u6709\u8fb9\u4e14\u6bcf\u8fb9\u4ec5\u901a\u8fc7\u4e00\u6b21\u901a\u8def\u3002\n\n\u7528\u4eba\u8bdd\u6765\u8bb2\u5c31\u662f\uff0c\u8fd9\u4e2a\u56fe\u53ef\u4ee5\u88ab\u4f60\u6cbf\u7740\u8fb9\u4e00\u7b14\u753b\u6210\uff0c\u5e76\u4e0d\u91cd\u4e0d\u6f0f\u5730\u7ecf\u8fc7\u6240\u6709\u8fb9\u3002\n\n\u6211\u5bf9\u6b27\u62c9\u8def\u611f\u6027\u7684\u8ba4\u8bc6\u662f\u4e00\u6761 **\u4f1a\u53d8\u5f62\u7684\u94fe**\uff0c\u67d0\u4e9b\u8282\u70b9\u88ab\u7c98\u5728\u4e00\u8d77\u4e86\u3002 \n\n#### \u7ed3\u8bba1\n\n> \u904d\u5386\u6b27\u62c9\u56fe\u4e2d\u7684\u6bcf\u4e00\u6761\u8fb9\uff0c\u5e76\u5408\u5e76\u4e24\u4e2a\u70b9\u6240\u5728\u7684\u96c6\u5408\uff0c**\u5408\u5e76\u6b21\u6570\u5927\u4e8e\u7b49\u4e8e\u989c\u8272\u603b\u6570** $-1$\n\n\u8bc1\u660e\uff1a\n\n\\* \u4ee5\u4e0b\u201c\u540c\u8272\u73af\u201d\u610f\u4e49\u4e3a\u6240\u6709\u8282\u70b9\u989c\u8272\u76f8\u540c\u7684\u73af\n\n\u5bf9\u4e8e\u6ca1\u6709\u540c\u8272\u73af\u7684\u56fe\uff0c\u6211\u4eec\u8981\u8d70\u5230\u56fe\u4e2d\u7684\u6bcf\u4e00\u4e2a\u70b9\u4ee5\u53ca\u6bcf\u4e00\u6761\u8fb9\uff0c\u5e76\u8981\u4fdd\u8bc1\u4e0d\u91cd\u4e0d\u6f0f\u3002\u6211\u4eec\u8d70\u8fc7\u7684\u4efb\u610f\u4e24\u4e2a\u70b9\u6709\u4e00\u6761\u8fb9\u8fde\u63a5\uff0c\u6240\u6709\u7684\u70b9\u53c8\u662f\u8054\u901a\u7684\uff0c\u81ea\u7136\u5c31\u4f1a\u6709 $color-1$ \u6b21\u7684\u5408\u5e76\uff1b\n\n\u5bf9\u4e8e\u6709\u540c\u8272\u73af\u7684\u56fe\uff0c\u53ef\u80fd\u4f1a\u6709\u4e00\u4e9b\u540c\u8272\u7684\u8282\u70b9\u88ab\u591a\u6b21\u5408\u5e76\uff0c\u6240\u4ee5\u4f1a\u6709 $>color-1$ \u6b21\u7684\u5408\u5e76\n\n\u7efc\u4e0a\u6240\u8ff0\uff1a\u5408\u5e76\u6b21\u6570 $\\ge color-1$\n\n#### \u7ed3\u8bba2\n> \u6b27\u62c9\u56fe\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u6570\u91cf $<2$ \n\n\u8fd8\u662f\u653e\u4e0a\u6837\u4f8b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/me5wc8di.png)\n\n\u8bc1\u660e\uff1a\n\n\u6211\u4eec\u8bf4\u6b27\u62c9\u8def\u662f\u4e00\u4e2a\u4f1a\u53d8\u5f62\u7684\u94fe\uff0c\u90a3\u4e48\u5176\u8d77\u70b9\u548c\u7ec8\u70b9\u7684\u5ea6 **\u53ef\u80fd** \u4e3a\u5947\u6570\uff1b\u5f53\u56fe\u662f\u73af\u65f6\uff0c\u5219\u6ca1\u6709\u51fa\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u52a0\u4e0a\u8fd9\u6761\u865a\u7ebf\u540e\uff0c\u5165\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u8d85\u8fc7\u4e86 $2$\uff0c\u6211\u4eec\u5728\u8d70\u5b8c\u6709\u70b9\u5374\u65e0\u6cd5\u904d\u5386\u6240\u6709\u7684\u8fb9\uff0c\u539f\u56e0\u662f\u8fd9\u6761\u8fb9 **\u7834\u574f\u4e86\u201c\u4f1a\u53d8\u5f62\u7684\u94fe\u201d\u7684\u5f62\u6001** \u3002\n\n### \u89e3\u6cd5\n\u5148\u54c8\u5e0c\u5b57\u7b26\u4e32\uff0c\u5f97\u5230\u5176\u7f16\u53f7\u3002\n\n\u6211\u4eec\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u70b9\u3002\u6839\u636e\u54c8\u5e0c\u503c\u5224\u65ad\u8fd9\u662f\u5426\u662f\u65b0\u989c\u8272\uff0c\u5982\u679c\u662f\u603b\u989c\u8272\u6570\u52a0\u4e00\uff0c\u5e76\u66f4\u65b0\u8fd9\u4e2a\u54c8\u5e0c\u503c\u5bf9\u5e94\u7684\u989c\u8272\uff1b\u5426\u5219\u6cbf\u7528\u539f\u6765\u7684\u989c\u8272\u3002\u63a5\u7740\u5224\u65ad\u989c\u8272\u662f\u5426\u76f8\u7b49\uff0c\u5982\u679c\u662f\u5c31\u5408\u5e76\uff0c\u5408\u5e76\u6b21\u6570\u52a0\u4e00\uff1b\u5426\u5219\u4e0d\u7ba1\u3002\n\n\u7136\u540e\u7edf\u8ba1\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\u7684\u6570\u91cf\uff0c\u53d1\u73b0\u6570\u91cf\u5927\u4e8e $2$ \u5c31\u53ef\u4ee5\u7ed3\u675f\u7a0b\u5e8f\u4e86\u3002\n\n\u6700\u540e\uff0c\u5224\u65ad\u5408\u5e76\u6b21\u6570\u662f\u5426\u6bd4 $color-1$ \u5c0f\u5373\u53ef\u3002\n\n\n\n## \u4ee3\u7801\u5b9e\u73b0\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n//\u56e0\u4e3a\u6728\u68cd\u6709\u4e24\u5934,\u6240\u4ee5\u6700\u591a\u4f1a\u6709 250000*2 \u4e2a\u8282\u70b9 \nconst int maxn=500004,mod=1000007;\nchar c,str1[24],str2[24];\nint n,mer,odd,col1,col2,deg[maxn],f[maxn],id[mod];\n\n//\u5f97\u51fa\u5b57\u7b26\u4e32\u5bf9\u5e94\u7684\u989c\u8272,\u8fd4\u56de\u503c\u662f\u8f93\u5165\u662f\u5426\u7ed3\u675f \nbool getnum(int &num){   \n\tc=getchar();int ret=0;\n\tif(~c)  //\u8bfb\u5230EOF\u5c31\u8bf4\u660e\u8f93\u5165\u7ed3\u675f \n\t\treturn 0;\n\tfor(;c<'a'||c>'z';c=getchar());\n\tfor(;c>='a'&&c<='z';c=getchar())\n\t\tret=(ret*26+c-'a')%mod;\n\tnum=!id[ret]?id[ret]=++n:id[ret];  //\u5224\u65ad\u662f\u7b2c\u51e0\u79cd\u989c\u8272 \n\treturn 1;\n}\n\nint find(const int &k){ return f[k]==k?k:f[k]=find(f[k]);}\n\ninline bool link(const int &a,const int &b){\n\tint c=find(a),d=find(b);\n\tf[c]=d;\n\treturn c!=d;\n}\n\nint main(){\n\tregister int i;\n\tfor(i=1;i<maxn;i++)\n\t\tf[i]=i;\n\twhile(getnum(col1)&&getnum(col2)){\n\t\t//\u5982\u679c\u628a\u4e0d\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u7684\u70b9\u8fde\u63a5\u4e86,\u5408\u5e76\u6b21\u6570\u52a0\u4e00 \n\t\tif(link(col1,col2))\n\t\t\t++mer;\n\t\t++deg[col1],++deg[col2];\n\t} \n\tfor(i=1;i<=n;i++){\n\t\tif(deg[i]&1)\n\t\t\t++odd;\n\t\tif(odd>2){\n\t\t\tputs(\"Impossible\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tputs(mer<n-1?\"Impossible\":\"Possible\");\n\treturn 0;\n}\n```",
        "postTime": 1598232336,
        "uid": 289944,
        "name": "Na2PtCl6",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 P1333 \u3010\u745e\u745e\u7684\u6728\u68cd\u3011"
    },
    {
        "content": "\u9898\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e2a\u6807\u51c6\u7684\u6b27\u62c9\u56de\u8def\uff08\u4e00\u7b14\u753b\uff09\uff0c\u4e2a\u4eba\u89c9\u5f97\u5b57\u5178\u6811\u6bd4\u8f83\u96be\uff08\u53ef\u80fd\u662f\u6211\u83dc\uff0c\u6ca1\u89c1\u8fc7\uff09\u3002\n\u89e3\u6790\u5728\u4ee3\u7801\u4e2d\u4e86\uff1a\n```c\n#include<iostream>\n#include<cstdio>\n#include<cmath>\n#include<algorithm>\n#include<map>\n#include<cstring>\nusing namespace std;\n#define xx 1000010\nchar s1[51],s2[50];\nint tot=0,tot_v=1,k,ta=0;\n//tot\u8bb0\u5f55\u70b9\u6570 \uff0ck\u8bb0\u5f55\u51fa\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u7684\u4e2a\u6570\u3002 \nint exist[xx],sum=0;\n//\u8fd9\u4e24\u4e2a\u7528\u4e8e\u5224\u65ad\u662f\u5426\u53ea\u6709\u4e00\u4e2a\u6811\u3002 \nstruct er  \n{  \n    int hash;  \n    int next[27];  \n}a[800001];\nstruct re\n{\n\tint t,next,head,s,out,in;\n}e[xx*4];\nint search(char s[50])//hash\u5b57\u5178\u6811 \n{  \n    int l = strlen(s);  \n    int p = 1; \n    for (int i = 1; i <= l; i++)  \n    {  \n        int x = s[i - 1] - 'a' + 1;\n        if (a[p].next[x] == 0)  \n        {  \n            tot_v++;  \n            a[p].next[x] = tot_v;  \n        }  \n        p = a[p].next[x];  \n    }  \n    if (a[p].hash == 0)\n        a[p].hash = ++tot;  \n    return a[p].hash;  \n}  \nvoid build(int x,int y)//\u5efa\u6811 \n {\n \te[++ta].t=y;e[ta].s=x;\n \te[x].out++;e[y].in++;\n\te[ta].next=e[x].head;e[x].head=ta;\n }\n void dfs(int x)//\u904d\u5386\u5224\u65ad\u662f\u5426\u662f\u4e00\u4e2a\u6811\u6216\u68ee\u6797\u3002 \n {\n \tfor(int i=e[x].head;i;i=e[i].next)\n \t{\n \t\tif(exist[e[i].t]==0)\n \t\t{\n \t\t\texist[e[i].t]=1;\n \t\t\t++sum;//\u8bb0\u5f55\u4e00\u4e2a\u6811\u4e2d\u7684\u70b9\u6570\uff0c\u770b\u662f\u5426\u7b49\u4e8etot\u3002 \n \t\t\tdfs(e[i].t);\n \t\t}\n \t}\n }\nint main()\n{\n\twhile(cin>>s1>>s2)\n\t{\n\t\tint x,y;\n\t\tx=search(s1);//\u53d8\u5b57\u7b26\u4e3a\u6570\u5b57\uff0c\u65b9\u4fbf\u8bb0\u5f55\u3002 \n\t\ty=search(s2);\n\t\tbuild(x,y);build(y,x);\n\t}\n\tfor(int i=1;i<=tot;++i)\n\t{\n\t\tif(e[i].out%2!=0)\n\t\t++k;\n\t}\n\tdfs(1);\n\tint u=0;\n\tif(sum==tot)\n\tu=0;\n\telse u=1;\n\tif(u==1)//\u5982\u679c\u662f\u68ee\u6797\uff0c\u5219\u4e0d\u8054\u901a\u3002 \n\t{\n\t\tcout<<\"Impossible\";\n\t\treturn 0;\n\t}\n\tif((k==2||k==0))\n\tcout<<\"Possible\";\n\tif(k!=2&&k!=0)\n\tcout<<\"Impossible\";\n\treturn 0;\n}\n\n```",
        "postTime": 1523418292,
        "uid": 37488,
        "name": "ghmgjf",
        "ccfLevel": 0,
        "title": "1333\u745e\u745e\u7684\u6728\u68cd"
    },
    {
        "content": "\u6570\u636e\u65e9\u5df2\u52a0\u5f3a\uff0c\u9898\u89e3\u533a\u90e8\u5206\u9898\u89e3\u70b8\u4e86\uff08\u6709\u7684\u662f $TLE$ \uff0c\u6709\u7684\u662f $MLE$ \n\n\u9898\u610f\u7b80\u5316\uff1a\u82e5\u5e72\u6761\u6728\u68cd\uff0c\u5982\u679c\u4e24\u6761\u6728\u68cd\u6709\u4e00\u7aef\u4e00\u6837\uff0c\u5c31\u53ef\u4ee5\u63a5\u8d77\u6765\uff0c\u95ee\u8fd9\u82e5\u5e72\u6761\u6728\u68cd\u662f\u5426\u53ef\u4ee5\u5168\u90e8\u63a5\u8d77\u6765\u3002\n\n~~\u8fd9\u9898\u5e94\u8be5\u7ed9\u591a\u7ec4\u6570\u636e\uff0c\u4e0d\u7136\u4e8c\u9009\u4e00\u554a\uff01\uff01~~\n\n\u6a21\u578b\uff1a\u6b27\u62c9\u8def\n\n\u601d\u8def\uff1a\u628a\u6728\u68cd\u7684\u4e00\u7aef\u770b\u4f5c\u4e00\u4e2a\u70b9\uff0c\u4e00\u6839\u6728\u68cd\u770b\u4f5c\u4e00\u6761\u8fb9\u3002\u8fde\u63a5\u5168\u90e8\u6728\u68cd\u5c31\u662f\u5bfb\u627e\u4e00\u6761\u6b27\u62c9\u8def\u7ecf\u8fc7\u6240\u6709\u8fb9\uff08\u6728\u68cd\uff09\u3002\n\n\u56e0\u4e3a\u6728\u68cd\u7684\u4e24\u7aef\u5728\u8fd9\u91cc\u662f\u5b57\u7b26\u4e32\u3002\u6240\u4ee5\u5148\u628a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u6570\u5b57\u3002\u5373\uff1a\u7528\u4e00\u4e2a $unordered$_$map$ \u6807\u8bb0\u4e00\u4e0b\u5b57\u7b26\u4e32\u7684\u51fa\u73b0\u987a\u5e8f\uff0c\u51fa\u73b0\u987a\u5e8f\u5c31\u662f\u5b83\u7684\u7f16\u53f7\uff0c\u5c31\u8f6c\u6362\u597d\u4e86\u3002\uff08\u56e0\u4e3a\u9898\u89e3\u533a\u6709\u4eba\u7528\u4e86\u4e24\u4e2a $map$ \u4e00\u4e2a $bool$ \u6807\u8bb0\uff0c\u4e00\u4e2a\u7f16\u53f7\uff0c\u4f1a\u7206\u5185\u5b58\uff1b\u8fd8\u6709\u4eba\u7528\u4e86$4$\u4e2a $map$ \u4f1a\u7206\u65f6\u95f4\u548c\u5185\u5b58\uff09\n\n$Tips$\uff1a$unordered$_$map$ \u76f8\u5f53\u4e8e\u54c8\u5e0c\u3002\u5177\u4f53\u53ef\u767e\u5ea6\uff0c\u8fd9\u662fC++11\u7684\u4e1c\u897f\uff0c\u4f46\u662f\u8c8c\u4f3cC++\u4e5f\u53ef\u4ee5\u8c03\u7528\u3002$map$ \u7684\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(logn)$ , $unordered$ _ $map$ \u7684\u67e5\u8be2\u65f6\u95f4\u590d\u6742\u5ea6\u51e0\u4e4e\u4e3a$O(1)$\n\n\u6b27\u62c9\u8def\u5224\u5b9a\u6b65\u9aa4\n- \u5224\u5b9a\u662f\u5426\u8054\u901a\n- \u5224\u5b9a\u5947\u70b9\u6570\u662f\u5426\u4e3a$2$\u6216$0$\n\n$Tips$\uff1a\u5947\u70b9\u7684\u610f\u601d\u7684\u5165\u5ea6\u4e3a\u5947\u6570\u7684\u70b9\u3002\u67d0\u4e2a\u70b9\u7684\u5165\u5ea6\u7684\u610f\u601d\u662f\u6307\u5411\u8fd9\u4e2a\u70b9\u8fb9\u7684\u6570\u76ee\n\n$1$\u3001\u5224\u65ad\u662f\u5426\u8054\u901a\u7528\u5e76\u67e5\u96c6\u6c42\u56e2\u4f19\u6570\u3002\u56e2\u4f19\u6570\u4e3a1$->$\u8054\u901a\u3002\u5373\uff1a\u628a\u4e00\u6839\u6728\u68cd\u7684\u4e24\u7aef\u70b9\u5408\u5e76\u3002\n\n$2$\u3001\u5224\u5947\u70b9\u6570\uff0c\u5c31\u53ea\u9700\u8981\u5728\u679a\u4e3e\u8fb9\u7684\u65f6\u5019\uff0c\u628a\u4e24\u4e2a\u7aef\u70b9\u7684\u5165\u5ea6\u90fd++\uff08\u56e0\u4e3a\u662f\u65e0\u5411\u8fb9\uff09\u3002\u6700\u540e\u626b\u4e00\u4e0b\u6240\u6709\u70b9\uff0c$if$( \u5165\u5ea6%$2==1$) \u5947\u70b9\u6570++\u3002\u5224\u65ad\u5947\u70b9\u6570$==2||==0$\u3002\n\n$Code$\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=250005;\nstring x[2*N],y[2*N];\nint q[2*N],num[2*N],f[2*N];\nint cnt,res,ret,X[2*N],Y[2*N],nb;\nbool ts[2*N];\nmap<string,int> c;\nint find(int x)\n{\n\tif(f[x]==x) return x;\n\treturn f[x]=find(f[x]);\n}\nint main()\n{\n\tint i=1,l,j,n;\n\twhile(cin>>x[i]>>y[i]){\n\t\ti++;\n\t}\n\ti--;\n\tn=i;\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tif(!c[x[i]])\n\t\t{\n\t\t\tc[x[i]]=++nb;\n\t\t}\n\t\tif(!c[y[i]])\n\t\t{\n\t\t\tc[y[i]]=++nb;\n\t\t}\n\t}\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tX[i]=c[x[i]];\n\t\tY[i]=c[y[i]];\n\t}\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tnum[X[i]]++;\n\t\tnum[Y[i]]++;\n\t\tif(!ts[X[i]])\n\t\t{\n\t\t\tts[X[i]]=1;\n\t\t\tq[++cnt]=X[i];\n\t\t}\n\t\tif(!ts[Y[i]])\n\t\t{\n\t\t\tts[Y[i]]=1;\n\t\t\tq[++cnt]=Y[i];\n\t\t}\n\t}\n\tfor(i=1;i<=cnt;i++)\n\t{\n\t\tf[q[i]]=q[i];\n\t}\n\tfor(i=1;i<=n;i++)\n\t{\n\t\tint fx=find(X[i]),fy=find(Y[i]);\n\t\tif(fx!=fy)\n\t\t{\n\t\t\tf[fx]=fy;\n\t\t}\n\t}\n\tfor(i=1;i<=cnt;i++)\n\t{\n\t\tif(f[q[i]]==q[i])\n\t\t{\n\t\t\tret++;\n\t\t}\n\t}\n\tif(ret>1)\n\t{\n\t\tcout<<\"Impossible\";\n\t\treturn 0;\n\t}\n\tfor(i=1;i<=cnt;i++)\n\t{\n\t\tif(num[q[i]]%2!=0)\n\t\tres++;\n\t}\n\tif(res==0||res==2)\n\t{\n\t\tcout<<\"Possible\";\n\t}\n\telse cout<<\"Impossible\";\n \treturn 0;\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u5e76\u67e5\u96c6\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0d\u4f1a\u7b97  \u7a7a\u95f4\u590d\u6742\u5ea6\uff1amap\u7684\u7a7a\u95f4\u590d\u6742\u5ea6\u4e0d\u4f1a\u7b97\u3002 \u671f\u671b\u5f97\u5206100\u5206\uff0c\u5b9e\u9645\u5f97\u5206100\u5206\n\n[\u8bb0\u5f55](https://www.luogu.com.cn/record/36442863)\n\n\n\n",
        "postTime": 1596635394,
        "uid": 225100,
        "name": "ice_in_sky",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P1333 \u3010\u745e\u745e\u7684\u6728\u68cd\u3011"
    },
    {
        "content": "# \u4e00\u79cd\u9519\u8bef\u7684\u601d\u8def\n\n\u9996\u5148\u8fd9\u9898\u80af\u5b9a\u8981\u5c06\u5b57\u7b26\u4e32hash\u6210int\uff0c\u4e0b\u9762\u8bb2\u7684\u65f6\u5019\u4f1a\u76f4\u63a5\u7528int\u800c\u4e0d\u662f\u5b57\u7b26\u4e32\n\n\u8fd9\u9898\u6211\u4e00\u5f00\u59cb\u60f3\u7684\u601d\u8def\u662f\u8fd9\u6837\u7684\uff1a\u8bb0\u5f55\u6bcf\u4e2a\u8f93\u5165\u548c\u7f16\u53f7\uff0c\u6bd4\u5982\n```c++\n2 3\n3 4\n3 5\n```\n\u5c31\u5f53\u6210\u7b2c\u4e00\u4e2a\u7ed3\u70b9\u6709\u4e24\u6761\u5206\u522b\u4e3a2\u548c3\u7684\u8fb9\uff0c\u4e4b\u540e\u8f93\u5165\u5b8c\u540e\u5bf9\u62e5\u6709\u540c\u4e00\u4e2a\u7f16\u53f7\u7684\u70b9\u8fde\u8fb9\uff0c\u6bd4\u5982\u8fd9\u91cc\u5c31\u662f\u7b2c\u4e00\u4e2a\u70b9\u548c\u7b2c\u4e8c\u3001\u4e09\u4e2a\u70b9\u6709\u4e00\u6761\u8fb9\u8fde\u63a5\uff0c\u7b2c\u4e8c\u3001\u4e09\u4e2a\u70b9\u540c\u7406\u3002\u8fd9\u6837\u7684\u8bdd\u6700\u540e\u53ea\u8981\u5bf9\u56fe\u8dd1\u4e00\u6761\u201c\u6bcf\u4e2a\u70b9\u53ea\u8d70\u4e00\u6b21\u201d\u7684\u8def\u5c31\u884c\n\n\u7136\u540e\u6211\u5c31\u53bb\u7ffb\u300a\u79bb\u6563\u6570\u5b66\u53ca\u5176\u5e94\u7528\u300b\uff08~~ACM\u9009\u624b\u65e0\u6240\u8c13\u5f00\u5377\u95ed\u5377~~\uff09\uff0c\u7136\u540e\u53d1\u73b0\u6bcf\u4e2a\u70b9\u53ea\u8d70\u4e00\u6b21\u7684\u8def\u53eb\u505a\u54c8\u5bc6\u987f\u56de\u8def/\u901a\u8def\uff0c\u4ee5\u53ca\uff1a\n\n**\u5224\u65ad\u4e00\u4e2a\u56fe\u662f\u5426\u5b58\u5728\u54c8\u5bc6\u987f\u56de\u8def/\u901a\u8def\u662fNPC\u7684\uff01**\n\n\u5f97\uff0c\u60f3\u522b\u7684\u65b9\u6cd5\u5427\n\n\n# \u6b63\u89e3\n\n## \u57fa\u672c\u601d\u8def\n\n\u6211\u4eec\u628a\u6bcf\u4e2a\u989c\u8272\u90fd\u5f53\u6210\u4e00\u4e2a\u7ed3\u70b9\uff08\u53ef\u4ee5\u60f3\u5230\u8fd9\u80af\u5b9a\u8981\u7528\u5230hash\uff09\uff0c\u6bcf\u7ec4\u989c\u8272\u81ea\u7136\u90fd\u662f\u4e00\u6761\u8fb9\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u6709\u4e86\u4e00\u5f20\u56fe\uff0c\u5728\u8fd9\u5f20\u56fe\u4e0a\u5224\u65ad\u6b27\u62c9\u901a\u8def\u5c31\u884c\n\n\u53e6\u5916\u5224\u65ad\u6b27\u62c9\u56fe\u7684\u65f6\u5019\u662f\u4e0d\u9700\u8981\u8003\u8651\u81ea\u73af\u7684\uff0c\u4e5f\u5c31\u662f\u8f93\u5165\u76f8\u540c\u7684\u989c\u8272\u5e76\u6ca1\u6709\u5f71\u54cd\n\n## \u5224\u65ad\u6b27\u62c9\u56fe\u7684\u65b9\u6cd5\uff1a\n\n*\uff08\u5f53\u4e14\u4ec5\u5f53\u662f\u5145\u8981\u6761\u4ef6\u522b\u5fd8\u4e86\uff09*\n\n\u4e0b\u9762\u7684\u56fe\u90fd\u662f\u5141\u8bb8\u81ea\u73af\u3001\u91cd\u8fb9\u7684\n\n* \u5bf9\u4e8e\u65e0\u5411\u56fe$\\rm G$\uff0c$\\rm G$\u662f\u6b27\u62c9\u56fe\u5f53\u4e14\u4ec5\u5f53$\\rm G$**\u662f\u8fde\u901a\u7684**\u4e14\u6ca1\u6709\u5947\u5ea6\u9876\u70b9\n\n  \u6709\u5947\u5ea6\u5b9a\u70b9\u5c31\u610f\u5473\u7740\u201c\u4e00\u53bb\u4e0d\u8fd4\u201d\u4e86\uff0c\u8fd9\u5f88\u597d\u7406\u89e3\n\n* \u5bf9\u4e8e\u65e0\u5411\u56fe$\\rm G$\uff0c$\\rm G$\u662f\u534a\u6b27\u62c9\u56fe\u5f53\u4e14\u4ec5\u5f53$\\rm G$**\u662f\u8fde\u901a\u7684**\u4e14$\\rm G$\u4e2d\u6070\u6709$\\rm 0$\u4e2a\u6216$\\rm 2$\u4e2a\u5947\u5ea6\u9876\u70b9\n\n  \u5bf9\u4e8e\u6709\u4e24\u4e2a\u5947\u5ea6\u5b9a\u70b9\u7684\uff0c\u6b27\u62c9\u901a\u8def\u4e00\u5b9a\u662f\u4ece\u5176\u4e2d\u4e00\u4e2a\u51fa\u53d1\u5230\u53e6\u4e00\u4e2a\n\n* \u5bf9\u4e8e\u6709\u5411\u56fe$\\rm G$\uff0c$\\rm G$\u662f\u6b27\u62c9\u56fe\u5f53\u4e14\u4ec5\u5f53$\\rm G$\u7684\u6240\u6709\u9876\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e14\u6bcf\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u548c\u51fa\u5ea6\u76f8\u540c\n\n  \u5176\u4e2d\u6709\u5411\u56fe$\\rm G$\u5f3a\u8fde\u901a\u662f\u6307\uff0c$\\rm G$\u4e2d\u4efb\u610f\u4e24\u4e2a\u7ed3\u70b9\u8fde\u901a\n\n* \u5bf9\u4e8e\u6709\u5411\u56fe$\\rm G$\uff0c$\\rm G$\u662f\u534a\u6b27\u62c9\u56fe\u5f53\u4e14\u4ec5\u5f53$\\rm G$\u7684\u6240\u6709\u9876\u70b9\u5c5e\u4e8e\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e14\n\n  * \u6700\u591a\u53ea\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u51fa\u5ea6\u4e0e\u5165\u5ea6\u5dee\u4e3a$\\rm 1$\n  * \u6700\u591a\u53ea\u6709\u4e00\u4e2a\u9876\u70b9\u7684\u5165\u5ea6\u4e0e\u51fa\u5ea6\u5dee\u4e3a$\\rm 1$\n  * \u6240\u6709\u5176\u4ed6\u9876\u70b9\u7684\u5165\u5ea6\u548c\u51fa\u5ea6\u76f8\u540c\n\n\u8fd9\u6837\u4e00\u6765\u5224\u65ad\u6b27\u62c9\u56fe\u53ea\u8981\u8f93\u5165\u4e4b\u540e\u8dd1\u4e00\u904d\u8fde\u901a\u6027\u7136\u540e\u67e5\u627e\u6bcf\u4e2a\u70b9\u7684\u5ea6\u5c31\u884c\uff0c\u8fd9\u662f$\\rm O(n)$\u7684\n\n## \u6784\u5efahash\u7684\u65b9\u6cd5\n\n\u6211\u4f7f\u7528\u7684\u662f`map`\u6cd5\uff0c\u8fd9\u6837\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u76f8\u5f53\u4e8e\u201c\u5f80`map<string,int>`\u91cc\u63d2`string`\u201d\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5373$\\rm O(n\\log n)$\uff0c\u662f\u5f88\u53ef\u4ee5\u63a5\u53d7\u7684\n\n\u53e6\u5916\u6211\u4e5f\u4f7f\u7528\u5218\u6c5d\u4f73\u5927\u7237\u7684\u4e00\u79cd\u5199\u6cd5\uff0c\u5373\u5c06\u6784\u5efa\u65b0hash\u548c\u83b7\u5f97hash\u7684\u51fd\u6570\u653e\u5230\u4e00\u8d77\uff0c\u8fd9\u6837\u53ef\u4ee5\u51cf\u5c11\u7801\u91cf\n\n\u4e2a\u4eba\u81ea\u8ba4\u4e3a\u7801\u98ce\u4e0d\u9519\uff0c\u53ef\u4ee5\u76f4\u63a5\u770b\u4ee3\u7801\n\n# \u4ee3\u7801\n```c++\n#include <bits/stdc++.h>\n\n//#define _DEBUG_\n#ifdef _DEBUG_\n#define debug(x) cout << #x << \": \" << x << \"  \"\n#define print_n printf(\"\\n\")\n#define cout_n cout<<'\\n'\n#else\n#define debug(x)\n#define print_n\n#define cout_n\n#endif\n\nusing namespace std;\n#ifdef _DEBUG_\nconst int MAXN=10+5;\n#else\nconst int MAXN=5e5+100;\n#endif\n\n// \u4f7f\u7528map\u7684hash\nint strcnt;\nmap<string,int>msi;\nstring mis[MAXN];\nint Getint(string str){\n    int org=msi[str];\n    if (!org) {\n        msi[str]=++strcnt;\n        mis[strcnt]=str;\n        return strcnt;\n    }else{\n        return org;\n    }\n}\n\nvector<int>G[MAXN];\nvoid add(int u,int v){G[u].push_back(v);G[v].push_back(u);}\nint vis[MAXN];\nvoid visdfs(int u){\n    vis[u]=true;\n    for (auto v : G[u]) {\n        if (!vis[v]) {\n            visdfs(v);\n        }\n    }\n}\n\nint d[MAXN];\nstring buf;\nint main(int argc, const char * argv[]) {\n    ios::sync_with_stdio(false);\n    memset(d, 0, sizeof(d));\n    while ( cin>>buf ) {\n        string bufl;\n        cin>>bufl;\n        \n        int u,v;\n        u=Getint(buf);\n        v=Getint(bufl);\n        if (u!=v) {\n            d[u]++;d[v]++;\n            add(u, v);\n        }\n    }\n    memset(vis, false, sizeof(vis));\n    visdfs(1);\n    for (int i=1; i<=strcnt; i++) {\n        if (!vis[i]) {\n            cout<<\"Impossible\"<<'\\n';\n            return 0;\n        }\n    }\n    int oddi=0;\n    for (int i=1; i<=strcnt; i++) {\n        if (d[i]&1) {\n            oddi++;\n        }\n    }\n    if ( oddi==0 || oddi==2 ) {\n        cout<<\"Possible\"<<'\\n';\n    }else{\n        cout<<\"Impossible\"<<'\\n';\n    }\n    return 0;\n}\n```\n",
        "postTime": 1599206356,
        "uid": 362594,
        "name": "ipLee",
        "ccfLevel": 0,
        "title": "P1333 \u6b27\u62c9\u8def\u548c\u5176\u4ed6"
    }
]