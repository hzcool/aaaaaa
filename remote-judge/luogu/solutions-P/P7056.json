[
    {
        "content": "# NWRRC2015 Insider\u2019s Information\n\n## \u9898\u610f\n\n\u5bf9\u4e8e $[1, n]$ \u7684\u6392\u5217\uff0c\u7ed9 $m$ \u4e2a\u9650\u5236\uff0c\u7b2c $i$ \u4e2a\u9650\u5236\u63cf\u8ff0 $b_i$ \u51fa\u73b0\u5728 $a_i$\uff0c$c_i$ \u4e4b\u95f4\u3002\u4fdd\u8bc1\u5b58\u5728\u4e00\u4e2a\u6392\u5217\u6ee1\u8db3\u6240\u6709\u9650\u5236\u3002\n\n\u6784\u9020\u4e00\u4e2a $n$ \u7684\u6392\u5217\u81f3\u5c11\u6ee1\u8db3 $\\lceil \\frac m2 \\rceil$ \u4e2a\u9650\u5236\u3002\n\n## \u5206\u6790\n\n\u6bcf\u4e2a\u9650\u5236\u8fde\u63a5\u4e24\u6761\u6709\u5411\u8fb9 $(a_i\uff0cb_i)$\uff0c$(c_i\uff0cb_i)$\uff0c\u56e0\u4e3a\u6240\u6709\u9650\u5236\u90fd\u53ef\u4ee5\u88ab\u6ee1\u8db3\uff0c\u6240\u4ee5\u5728\u539f\u5e8f\u5217\u4e2d\u7684\u7aef\u70b9\u4e00\u5b9a\u5165\u5ea6\u4e3a $0$\u3002\n\n\u8fd9\u4e2a\u56fe\u867d\u7136\u5b58\u5728\u73af\uff0c\u4f46\u662f\u6211\u4eec\u5bf9\u8fd9\u4e2a\u56fe\u8fdb\u884c\u62d3\u6251\u6392\u5e8f\uff0c\u4e00\u6b21\u5220\u9664\u4e00\u4e2a\u7ea6\u675f\u7684\u4e24\u6761\u8fb9\uff0c\u4ecd\u7136\u662f\u53ef\u4ee5\u5c06\u6240\u6709\u70b9\u5165\u961f\u51fa\u961f\u7684\uff0c\u4f46\u662f\u6392\u5e8f\u540e\u4ec5\u80fd\u4fdd\u8bc1\u5176\u4e2d\u6bcf\u4e2a\u7ea6\u675f\u4e2d\uff0c$b$ \u70b9\u4e0d\u4f1a\u540c\u65f6\u6392\u5728 $a$\uff0c$c$ \u524d\u9762\u3002\u4f46\u662f\u8fd9\u5df2\u7ecf\u8db3\u591f\u505a\u6b64\u9898\u4e86\u3002\n\n\u8bc1\u660e\u5f88\u7b80\u5355\uff0c\u5982\u679c\u4e00\u4e2a $b$ \u7684\u5ea6\u53d8\u6210 $0$\uff0c\u4e00\u5b9a\u662f\u5b83\u7684\u6240\u6709\u5165\u8fb9\u90fd\u88ab\u5220\u9664\u4e86\uff0c\u6240\u4ee5\u4e0d\u5b58\u5728 $b$ \u88ab\u5220\u9664\uff0c$a$\uff0c$c$ \u90fd\u4ecd\u672a\u5220\u9664\u7684\u60c5\u51b5\u3002\n\n\u6211\u4eec\u6309\u62d3\u6251\u5e8f\u8003\u8651\u5c06\u70b9\u52a0\u5165\u6700\u5de6\u8fb9\u8fd8\u662f\u6700\u53f3\u8fb9\uff0c\u4ece\u4e24\u8fb9\u5f80\u4e2d\u95f4\u5806\u5143\u7d20\uff0c\u76f4\u5230\u586b\u6ee1\u6392\u5217\u4e3a\u6b62\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u7ea6\u675f\uff0c\u7b2c\u4e00\u4e2a\u653e\u5165\u7684\u5982\u679c\u662f $b$\uff0c\u5219\u65e0\u8bba $a$\uff0c$b$ \u600e\u4e48\u653e\uff0c\u90fd\u4e0d\u53ef\u80fd\u6ee1\u8db3\u7ea6\u675f\uff0c\u800c\u6211\u4eec\u7684\u62d3\u6251\u6392\u5e8f\u4e0d\u5b58\u5728 $b$ \u7b2c\u4e00\u4e2a\u653e\u7684\u60c5\u51b5\u3002\n\n\u5982\u679c\u7b2c\u4e00\u4e2a\u653e\u7684\u662f $a$ \u6216 $c$\uff0c\u7b2c\u4e8c\u4e2a\u653e\u7684\u70b9\u7684\u4f4d\u7f6e\u5c31\u51b3\u5b9a\u4e86\u8be5\u7ea6\u675f\u662f\u5426\u80fd\u6ee1\u8db3\u3002\n\n\u5982\u679c\u7b2c\u4e8c\u4e2a\u653e\u7684\u662f $b$\uff0c\u90a3\u4e48\u5b83\u653e\u5728\u7b2c\u4e00\u4e2a\u653e\u7684\u5143\u7d20\u540c\u4fa7\uff0c\u5219\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u65e0\u8bba\u600e\u4e48\u653e\uff0c\u7ea6\u675f\u90fd\u6ee1\u8db3\u3002\u5982\u679c\u653e\u5728\u5f02\u4fa7\uff0c\u5219\u65e0\u8bba\u6700\u540e\u4e00\u4e2a\u5143\u7d20\u600e\u4e48\u653e\uff0c\u7ea6\u675f\u90fd\u4e0d\u6ee1\u8db3\u3002\n\n\u5982\u679c\u7b2c\u4e8c\u4e2a\u653e\u7684\u662f $a$ \u6216 $c$ \u90a3\u4e48\u7b2c\u4e09\u4e2a\u653e\u7684\u4e00\u5b9a\u662f $b$\uff0c\u6240\u4ee5\u7b2c\u4e00\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u653e\u7684 $a$\uff0c$c$ \u53ea\u8981\u5728\u5f02\u4fa7\uff0c\u7ea6\u675f\u4e00\u5b9a\u6ee1\u8db3\uff0c\u5728\u540c\u4fa7\u5219\u4e00\u5b9a\u4e0d\u6ee1\u8db3\u3002\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u679a\u4e3e\u7684\u5143\u7d20\uff0c\u7edf\u8ba1\u5b83\u5c5e\u4e8e\u7684\u7ea6\u675f\u4e2d\uff0c\u6709\u591a\u5c11\u6b21\u662f\u7b2c\u4e8c\u4e2a\u653e\u7684\u5143\u7d20\uff0c\u7136\u540e\u7edf\u8ba1\u8fd9\u4e9b\u60c5\u51b5\u4e2d\uff0c\u662f\u653e\u5728\u5de6\u7aef\u6ee1\u8db3\u7684\u7ea6\u675f\u591a\u8fd8\u662f\u653e\u5728\u53f3\u7aef\u6ee1\u8db3\u7684\u7ea6\u675f\u591a\uff0c\u653e\u5230\u6ee1\u8db3\u7ea6\u675f\u591a\u7684\u4e00\u4fa7\uff0c\u8fd9\u6837\u5c31\u4fdd\u8bc1\u4e86\u4e00\u5b9a\u6ee1\u8db3 $\\lceil \\frac m2 \\rceil$ \u4e2a\u9650\u5236\u3002\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n\u56e0\u4e3a\u6bcf\u4e2a\u7ea6\u675f\u4f1a\u7ed9 $b_i$ \u5e26\u6765\u4e24\u4e2a\u5165\u5ea6\uff0c\u800c\u62d3\u6251\u6392\u5e8f\u65f6\u6211\u4eec\u9700\u8981\u7ed9 $b_i$ \u51cf\u53bb\u4e24\u4e2a\u5165\u5ea6\uff0c\u6240\u4ee5\u4e3a\u4e86\u65b9\u4fbf\uff0c\u4e0d\u5982\u76f4\u63a5\u7528\u4e00\u4e2a\u5165\u5ea6\u8868\u793a\u4e00\u4e2a\u7ea6\u675f\u3002\n\n\u8fc7\u7a0b\u4e2d\u6211\u4eec\u4e00\u904d\u62d3\u6251\u6392\u5e8f\u4e00\u8fb9\u5904\u7406\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u7684\u4f4d\u7f6e\u53ea\u548c\u5df2\u7ecf\u653e\u5165\u6392\u5217\u4e2d\u7684\u70b9\u6709\u5173\uff0c\u6240\u4ee5\u8fd9\u6837\u5904\u7406\u4e5f\u662f\u6b63\u786e\u7684\u3002\n\n\u5b9e\u73b0\u8fd8\u662f\u5f88\u77ed\u7684\uff0c\u6307\u9488\u8f7b\u55b7\u3002\n\n```cpp\nunsigned m, n, M;\nunsigned Top(0), Tl(0), Hd(0);\nunsigned A, B, C, D, t;\nunsigned Cnt(0), Ans[100005], Tmp(0), BdL(0), BdR;\nstruct Que;\nstruct Node {\n  vector<Que*> Bel; \n  unsigned Deg;\n  char Vis, Le;\n}N[100005], * Queue[100005];\nstruct Que {\n  Node* Le, * Ri, * Mid;\n  Que* Nxt;\n}Q[100005];\nsigned main() {\n  BdR = (n = RD()) + 1, m = RD();\n  for (unsigned i(1); i <= m; ++i) {\n    A = RD(), B = RD(), C = RD(), ++N[B].Deg;\n    Q[i].Le = N + A, N[A].Bel.emplace_back(Q + i);\n    Q[i].Mid = N + B, N[B].Bel.emplace_back(Q + i);\n    Q[i].Ri = N + C, N[C].Bel.emplace_back(Q + i);\n  }\n  for (unsigned i(1); i <= n; ++i) if(!N[i].Deg) Queue[++Tl] = N + i;\n  while (Tl ^ Hd) {//Topo and Solve \n    Node* Cur(Queue[++Hd]);\n    unsigned PutLeft(100000);\n    Cur->Vis = 1;\n    for (auto Prs:Cur->Bel) {\n      if(Cur == Prs->Le) {//Cur is A\n        if(Prs->Ri->Vis) {//2nd or 3rd\n          if(!(Prs->Mid->Vis)) {if(Prs->Ri->Le) --PutLeft; else ++PutLeft;}//2nd Add\n        } else if(!(--(Prs->Mid->Deg))) Queue[++Tl] = Prs->Mid;//1st Add\n      } else {//Cur is C or B\n        if(Cur == Prs->Ri) {//Cur is C\n          if(Prs->Le->Vis) {//2nd or 3rd\n            if(!(Prs->Mid->Vis)) {if(Prs->Le->Le) --PutLeft; else ++PutLeft;}//2nd Add\n          } else if(!(--(Prs->Mid->Deg)))Queue[++Tl] = Prs->Mid; //1st Add\n        } else {//Cur is B\n          if(!((Prs->Ri->Vis) & (Prs->Le->Vis))) {//2nd Add\n            if(Prs->Ri->Vis) {if(Prs->Ri->Le) ++PutLeft;else --PutLeft;}//1st is C\n            else {if(Prs->Le->Le) ++PutLeft;else --PutLeft;}//1st is A\n          }\n        }\n      }\n    }\n    Cur->Le = (PutLeft >= 100000);\n    Ans[(PutLeft < 100000) ? (--BdR) : (++BdL)] = Cur - N; \n  }\n  for (unsigned i(1); i <= n; ++i) printf(\"%u \", Ans[i]);\n  return Wild_Donkey;\n}\n```",
        "postTime": 1632834699,
        "uid": 143771,
        "name": "\u6bd4\u5229\u2642\u6d77\u7075\u987f",
        "ccfLevel": 8,
        "title": "NWRRC2015 Insider\u2019s Information"
    }
]