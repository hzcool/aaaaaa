[
    {
        "content": "\u626b\u63cf\u7ebf\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002  \n\u628a\u6bcf\u4e2a\u77e9\u5f62\u5de6\u8fb9\u754c\u548c\u53f3\u8fb9\u754c\u5b58\u50a8\uff0c\u7ed9\u5de6\u8fb9\u754c\u8d4b\u503c1\uff0c\u53f3\u8fb9\u754c\u8d4b\u503c-1\uff0c\u628a\u7ebf\u6bb5\u6392\u5e8f\uff0c\u7136\u540e\u4f9d\u6b21\u5904\u7406\u6bcf\u4e2a\u7ebf\u6bb5\uff0c\u7ed9\u7ebf\u6bb5\u6240\u5728\u7684\u533a\u95f4\u52a0\u4e0a\u4ed8\u7684\u503c\uff0c\u628a\u6bcf\u4e2a\u503c>0\u7684\u533a\u95f4\u52a0\u5230ans\u91cc\u5c31\u662f\u5f53\u524d\u88ab\u77e9\u5f62\u8986\u76d6\u7684\u7ebf\u7684\u957f\u5ea6\uff0c\u518d\u4e58\u4e0a\u8ddd\u79bb\u4e0b\u4e00\u4e2a\u7ebf\u6bb5\u4e4b\u95f4\u7684\u8ddd\u79bb\uff0c\u5c31\u662f\u8fd9\u4e24\u4e2a\u7ebf\u6bb5\u4e4b\u95f4\u8986\u76d6\u77e9\u5f62\u7684\u9762\u79ef\u3002  \n\u7136\u540e\u8003\u8651\u7528\u7ebf\u6bb5\u6811\u5904\u7406\u3002\u5148\u60f3\u5230\u7528lazy_tag\u8fdb\u884c\u533a\u95f4\u4fee\u6539\uff0c\u4f46\u5176\u5b9e\u53ea\u6709+1\u548c-1\u7684\u64cd\u4f5c\u5e76\u4e14\u90fd\u662f\u6210\u5bf9\u51fa\u73b0\u7684\uff0c\u6240\u4ee5\u53ea\u8981\u5728push_up\u7684\u65f6\u5019\u5bf9cnt[i]>0\u7684i\u533a\u95f4\u66f4\u65b0sum\u5373\u53ef\n```\nif(cnt[qaq])\nsum[qaq]=r-l+1;\nelse sum[qaq]=sum[left(qaq)]+sum[right(qaq)];\n```  \n\u7136\u540e\u8fd9\u4e2a\u9898\u5750\u6807\u5168\u662f\u6574\u6570\u4e14\u6570\u636e\u4e0d\u5927\uff0c\u6240\u4ee5\u5077\u4e2a\u61d2\u4e0d\u7528\u79bb\u6563\u5316  \n```\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=100010;\nstruct pg\n{\n\tint x;\n\tint y1;\n\tint y2;\n\tint flag;\n}line[N*5];\nint cnt[N*10],sum[N*10];\nint n;\nbool cmp(pg a,pg b)\n{\n\treturn a.x<b.x;\n}\nint left(int qaq)\n{\n\treturn qaq<<1;\n}\nint right(int qaq)\n{\n\treturn qaq<<1|1;\n}\nvoid push_up(int qaq,int l,int r)\n{\n\tif(cnt[qaq])\n\t\tsum[qaq]=r-l+1;\n\telse sum[qaq]=sum[left(qaq)]+sum[right(qaq)];\n}\nvoid change(int qaq,int l,int r,int nl,int nr,int k)\n{\n\tif(nl<=l&&nr>=r)\n\t{\n\t\tcnt[qaq]+=k;\n\t\tpush_up(qaq,l,r);\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tif(nl<=mid)change(left(qaq),l,mid,nl,nr,k);\n\tif(nr>mid)change(right(qaq),mid+1,r,nl,nr,k);\n\tpush_up(qaq,l,r);\n}\nint main()\n{\n\tcin>>n;\n\tint X1,X2,Y1,Y2;\n\tint tot=0;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d%d%d\",&X1,&Y1,&X2,&Y2);\n\t\tif(X1>X2)swap(X1,X2);\n\t\tif(Y1>Y2)swap(Y1,Y2);\n\t\tif (X1==X2)\n\t\t{\n             line[++tot].x=X1-1;line[tot].y1=Y1;line[tot].y2=Y2;line[tot].flag=1;\n             line[++tot].x=X2+1;line[tot].y1=Y1;line[tot].y2=Y2;line[tot].flag=-1;\n         }\n\t\t else\n\t\t {\n             line[++tot].x=X1;line[tot].y1=Y1-1;line[tot].y2=Y2+1;line[tot].flag=1;\n             line[++tot].x=X2;line[tot].y1=Y1-1;line[tot].y2=Y2+1;line[tot].flag=-1;\n         }\n\t}\n\tsort(line+1,line+tot+1,cmp);\n\tint ans=0;\n\tfor(int i=1;i<=tot;i++)\n\t{\n\t\t//cout<<sum[1]<<endl;\n\t\t\tans+=sum[1]*(line[i].x-line[i-1].x);\n\t\t\tchange(1,0,100010,line[i].y1,line[i].y2-1,line[i].flag);\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```\n\u5982\u679c\u8981\u8fdb\u884c\u79bb\u6563\u5316\uff0c\u5bf9\u6240\u6709\u7684x\u503c\u6392\u5e8f\u5e76\u53bb\u91cd\uff0c\u6807\u4e0a\u5e8f\u53f7\uff0c\u7528c[i]\u8868\u793a\u5e8f\u53f7\u4e3ai\u7684x\u503c\uff0c\u7136\u540e\u518dpush_up\u65f6\u6539\u6210sum[qaq]=c[r]-c[l]+1\u5373\u53ef\n\n",
        "postTime": 1556369021,
        "uid": 86830,
        "name": "\u4e2d\u4e8c\u75c5",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3875 \u3010[TJOI2010]\u88ab\u6c61\u67d3\u7684\u6cb3\u6d41\u3011"
    },
    {
        "content": "# [P3875 [TJOI2010]\u88ab\u6c61\u67d3\u7684\u6cb3\u6d41](http://www.luogu.com.cn/problem/P3875 \"P3875 [TJOI2010]\u88ab\u6c61\u67d3\u7684\u6cb3\u6d41\") \n\n\u672c\u6765\u662f\u4e3a\u4e86\u6539\u6628\u5929\u7684\u9898\uff0c\u53d1\u73b0\u626b\u63cf\u7ebf\u57fa\u672c\u4e0a\u90fd\u5fd8\u4e86\uff0c\u6253\u7b97\u627e\u4e2a\u626b\u63cf\u7ebf\u7ec3\u7ec3\u624b\uff0c\u7ed3\u679c\u6253\u7684\u6709\u6765\u6709\u56de\u7684\u3002\n\n## \u89e3\u6790\n\n\u6c61\u67d3\u533a\u57df\u662f\u4ee5\u6cb3\u6d41\u4e3a\u4e2d\u7ebf\u7684\u4e00\u5757\u77e9\u5f62\uff0c\u53ef\u80fd\u751f\u75c5\u7684\u793e\u533a\u6570\u91cf\u5c31\u662f\u8fd9\u4e9b\u77e9\u5f62\u7684\u9762\u79ef\u5e76\u3002\n\n\u5f88\u663e\u7136\u662f\u626b\u63cf\u7ebf\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u5b58\u50a8\u6bcf\u4e2a\u77e9\u5f62\u5de6\uff0c\u53f3\u8fb9\u754c\uff0c\u5de6\u8fb9\u754c\u8d4b $1$\uff0c\u53f3\u8fb9\u754c\u8d4b $-1$\uff0c\u628a\u7ebf\u6bb5\u6392\u5e8f\uff0c\u518d\u4f9d\u6b21\u5904\u7406\u6bcf\u4e00\u6761\u7ebf\u6bb5\u3002\n\n\u6574\u4f53\u6765\u8bf4\u633a\u677f\u5b50\u7684\uff0c\u9700\u8981\u6ce8\u610f\u4e00\u4e9b\u5c0f\u7ec6\u8282\u3002\n\n\u6cb3\u6d41\u8d77\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u7684\u5750\u6807\u4e0d\u4e00\u5b9a\u5148\u5de6\u540e\u53f3\uff0c\u5148\u4e0b\u540e\u4e0a\uff0c\u6240\u4ee5\u8981 ```swap``` \u4e00\u4e0b\u3002\n\n$x$ \u503c\u76f8\u7b49\u65f6\uff0c\u6cb3\u6d41\u4e3a\u7eb5\u5411\u6d41\u5411\uff0c\u5de6\u8fb9\u754c\u7684 $x$ \u503c\u4e3a $x - 1$\uff0c\u53f3\u8fb9\u754c\u7684 $x$ \u503c\u4e3a $x + 1$\u3002\n\n$y$ \u503c\u76f8\u7b49\u65f6\uff0c\u6cb3\u6d41\u4e3a\u6a2a\u5411\u6d41\u5411\uff0c\u5de6\uff0c\u53f3\u8fb9\u754c\u7684 $yl$\uff08\u4e0b\u65b9\u7684\u7aef\u70b9\uff09\u503c\u4e3a $y - 1$\uff0c$yl$\uff08\u4e0a\u65b9\u7684\u7aef\u70b9\uff09\u503c\u4e3a $y + 1$\u3002\n\n\u56e0\u4e3a\u6709 $-1$ \u548c $+1$ \u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u7aef\u70b9\u4f1a\u51fa\u73b0\u503c\u4e3a $0$ \u6216 $1000001$ \u7684\u60c5\u51b5\uff0c\u7ebf\u6bb5\u6811\u521d\u59cb\u5316\u7684\u65f6\u5019\u8981\u6ce8\u610f\u3002\n\n\u4ee5\u53ca\uff0c$4e5$ \u5927\u5c0f\u7684\u7ebf\u6bb5\u6811\u4f1a```RE```\uff0c\u6240\u4ee5\u5f00\u5927\u4e00\u70b9\u3002\n\n## Code\n\n```cpp\n#include<cstdio>\n#include<algorithm>\n\nusing namespace std;\n\nconst int MAXN = 1e4 + 10, MAXM = 2e5 + 10;\nint n, sum, maxr;\n\nstruct Line{\n    int x;\n    int yh, yl;\n    int sit;\n}line[MAXM << 1];\n\ninline bool cmp(const Line &a, const Line &b){\n    return a.x < b.x;\n}\n\nstruct Segment_Tree{\n    struct Tree{\n        int l, r;\n        int len;\n        int cnt;\n    }tr[MAXM << 2];\n\n    inline int lson(int rt){\n        return rt << 1;\n    }\n\n    inline int rson(int rt){\n        return rt << 1 | 1;\n    }\n\n    inline void Pushup(int rt){\n        if(tr[rt].cnt)\n            tr[rt].len = tr[rt].r - tr[rt].l + 1;\n        else   \n            tr[rt].len = tr[lson(rt)].len + tr[rson(rt)].len;\n    }\n\n    void Build(int rt, int l, int r){\n        tr[rt].l = l;\n        tr[rt].r = r;\n        tr[rt].len = 0;\n        tr[rt].cnt = 0;\n\n        if(l == r)\n            return;\n        \n        int mid = (l + r) >> 1;\n        Build(lson(rt), l, mid);\n        Build(rson(rt), mid + 1, r);\n    }\n\n    void Update(int rt, int l, int r, int data){\n        if(tr[rt].l >= l && tr[rt].r <= r){\n            tr[rt].cnt += data;\n\n            Pushup(rt);\n            return;\n        }\n\n        int mid = (tr[rt].l + tr[rt].r) >> 1;\n        if(l <= mid) Update(lson(rt), l, r, data);\n        if(r > mid) Update(rson(rt), l, r, data);\n\n        Pushup(rt);\n    }\n}S;\n\ninline int read(){\n    int x = 0, f = 1;\n    char c = getchar();\n\n    while(c < '0' || c > '9'){\n        if(c == '-') f = -1;\n        c = getchar();\n    }\n    while(c >= '0' && c <= '9'){\n        x = (x << 1) + (x << 3) + (c ^ 48);\n        c = getchar();\n    }\n\n    return x * f;\n}\n\nint main(){\n    n = read();\n    for(register int i = 1; i <= n; i++){\n        int x1, y1, x2, y2;\n        x1 = read(), y1 = read(), x2 = read(), y2 = read();\n        \n        if(x1 > x2) swap(x1, x2);\n        if(y1 > y2) swap(y1, y2);\n\n        if(x1 == x2){\n            line[(i << 1) - 1].x = x1 - 1, line[(i << 1)].x = x2 + 1;\n            line[(i << 1) - 1].yl = line[(i << 1)].yl = y1;\n            line[(i << 1) - 1].yh = line[(i << 1)].yh = y2;\n            line[(i << 1) - 1].sit = 1;\n            line[(i << 1)].sit = -1;\n        }\n        else if(y1 == y2){\n            line[(i << 1) - 1].x = x1, line[(i << 1)].x = x2;\n            line[(i << 1) - 1].yl = line[(i << 1)].yl = y1 - 1;\n            line[(i << 1) - 1].yh = line[(i << 1)].yh = y2 + 1; \n            line[(i << 1) - 1].sit = 1;\n            line[(i << 1)].sit = -1;\n        }\n    }\n\n    n <<= 1;\n    sort(line + 1, line + 1 + n, cmp);\n    S.Build(1, 0, 100001);\n\n    for(register int i = 1; i < n; i++){\n        S.Update(1, line[i].yl, line[i].yh - 1, line[i].sit);\n        sum += S.tr[1].len * (line[i + 1].x - line[i].x);\n    }\n\n    printf(\"%d\\n\", sum);\n\n    return 0;\n}\n```",
        "postTime": 1660310988,
        "uid": 452407,
        "name": "TSTYFST",
        "ccfLevel": 6,
        "title": "P3875 [TJOI2010]\u88ab\u6c61\u67d3\u7684\u6cb3\u6d41"
    },
    {
        "content": "emm\u8fd9\u9898\u5c31\u662f\u4e2a\u77e9\u5f62\u9762\u79ef\u5e76qwq\n\n**\u4f46\u662f**\n\n\u73b0\u5728\u7684\u67d0\u4e9b\u4eba\uff0c **\u4e00\u770b\u5230**\u626b\u63cf\u7ebf\uff0c **\u5c31\u60f3\u5230**\u7ebf\u6bb5\u6811\uff0c **\u66f4\u6709\u751a**\u8005\uff0c \u8ba4\u4e3a\u626b\u63cf\u7ebf\u5c31\u662f\u7ebf\u6bb5\u6811\u7684**\u4e00\u79cd\u5b9e\u73b0\u5f62\u5f0f**\u7f62\u4e86\u3002\n\n**\u5b9e\u9645\u4e0a\uff0c \u5206\u5757\u4e5f\u662f\u53ef\u4ee5\u505a\u626b\u63cf\u7ebf\u95ee\u9898\u7684** ~~\uff08\u7ebf\u6bb5\u6811\u4e5f\u662f\u4e00\u79cd\u5206\u5757\u4f60\u8fd9\u4e0d\u662f\u5e9f\u8bdd\u5417~~\n\n**\u5c0f\u849f\u84bb\u8fd9\u91cc\u5c31\u53d1\u4e00\u7bc7\u5206\u5757\u626b\u63cf\u7ebf\u7684\u9898\u89e3qwq**\n\n\u5177\u4f53\u505a\u6cd5\u5c31\u662f\u5148\u4fdd\u5b58\u4e00\u4e0b\u6bcf\u4e2a\u77e9\u5f62\u7684\u5de6\u53f3\u8fb9\uff0c \u7136\u540e\u6309\u4ece\u5de6\u5230\u53f3\u6392\u5e8f\uff08\u6a2a\u5750\u6807)\uff0c \u5faa\u73af\u4ece\u5de6\u5230\u53f3\u679a\u4e3e\u6bcf\u4e00\u6761\u8fb9\uff0c \u5148\u8ba1\u7b97\u51fa\u4e0a\u4e00\u6761\u8fb9\u5230\u8fd9\u6761\u8fb9\u4e00\u5171\u6709\u591a\u5c11\u9762\u79ef\u7684\u8d21\u732e\uff0c \u5373\uff08\u5f53\u524d\u8fb9\u7684\u4f4d\u7f6e-\u4e0a\u6761\u8fb9\u7684\u4f4d\u7f6e\uff09* \u4e0a\u6b21\u4fee\u6539\u540e\u7684\u5e8f\u5217\u4e0a\u6709\u591a\u5c11\u4e2a\u88ab\u8986\u76d6\u6b21\u6570\u975e0\u7684\u70b9\uff08\u7eb5\u5750\u6807\uff09 \n\n\u7136\u540e\u518d\u6839\u636e\u8fd9\u6761\u8fb9\u662f\u4e00\u4e2a\u77e9\u5f62\u5f00\u59cb\u7684\u8fb9\u8fd8\u662f\u7ed3\u675f\u7684\u8fb9\u6765\u5224\u65ad\u662f\u5728\u5206\u5757\u4e0a\u533a\u95f4\u52a0\u8fd8\u662f\u533a\u95f4\u51cf\u5c31\u884c\u5566qwq\n\n**\u8fd9\u91cc\u63d0\u4e00\u4e0b\u5206\u5757\u7684\u7ef4\u62a4\u533a\u95f4\u975e\u96f6\u4e2a\u6570\u7684\u65b9\u6cd5**\uff1a \n\n\u7ef4\u62a4\u4e00\u4e0b\u4e00\u4e2a\u5757\u5185 **\u88ab\u6563\u5757\u8986\u76d6\u6240\u8986\u76d6\u7684\uff08\u4e0d\u8ba1\u7b97\u6574\u5757\u4fee\u6539\uff09** \u6b21\u6570\u975e\u96f6\u7684\u70b9\u7684\u4e2a\u6570\uff0c \u548c\u6574\u5757\u8986\u76d6\u7684\u6b21\u6570\uff08\u975e\u8d1f\uff09 \n\n\u7edf\u8ba1\u7684\u65f6\u5019\u5224\u65ad\u4e00\u4e0b\u6574\u5757\u8986\u76d6\u7684\u6b21\u6570\u662f\u5426\u4e3a0\uff0c \u5982\u679c\u4e3a0\u7684\u7b54\u6848\u5c31\u52a0\u4e0a\u88ab\u6563\u5757\u6240\u8986\u76d6\u7684\u8986\u76d6\u6b21\u6570\u975e\u96f6\u7684\u70b9\u7684\u4e2a\u6570\uff0c \u5426\u5219\u5c31\u76f4\u63a5\u52a0\u4e0a\u5757\u957f\u4e45\u597d\u4e86qwq\uff08\u6539\u5757\u88ab\u6574\u4f53\u8986\u76d6\u4e86\uff09\n\n\u7136\u540e\u5c31\u6ca1\u4ec0\u4e48\u5566\u3002 \u6ca1\u600e\u4e48\u8c03\u53c2\u8dd1\u5f97\u8fd8\u633a\u5feb\uff0c \u5f53\u7136\u8fd8\u6709\u80fd\u4f18\u5316\u7684\u5730\u65b9\uff0c \u5c0f\u849f\u84bb\u6bd4\u8f83\u61d2\u5c31\u6ca1\u6709\u5199\uff0c \u4f46\u662f\u8fd8\u662f\u63d0\u4e00\u4e0b\u5427\uff0c \u5e94\u8be5\u8fd8\u662f\u53ef\u4ee5\u51cf\u5c11\u4e00\u5b9a\u5e38\u6570\u7684qwq\n\n\u6539\u8fdb\uff1a \u5728\u7edf\u8ba1\u548c\u4fee\u6539\u7684\u65f6\u5019\u987a\u4fbf\u7ef4\u62a4\u4e00\u4e0b \u88ab\u8986\u76d6\u7684\u6700\u4e0a\u9762\u7684\u548c\u6700\u4e0b\u9762\u7684\u70b9\uff0c \u8fd9\u6837\u5c31\u80fd\u7f29\u5c0f\u67e5\u8be2\u7684\u8303\u56f4\u5566qwqwq\n\n**\u90a3\u4e48\u4ee3\u7801\u5982\u4e0b\uff1a**\n```\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <algorithm>\n#define maxn 100010\n#define re register\n#define FOR(i, l, r) for(re int i = l; i <= r; ++i)\nusing namespace std;\n\nint n, m, c, r, t, x, y, z, xx, yy, cnt;\nint sq;\nint a[maxn], b[maxn], tag[maxn], ans[maxn];\n\nstruct hz {\n    int pos;\n    int st;\n    int ed;\n    int bl; //0\u4e3a\u5f00\u59cb1\u4e3a\u7ed3\u675f \n    bool operator < (const hz &o)const{\n        if(pos == o.pos) \n          return bl < o.bl;\n        return pos < o.pos;\n    }\n}h[maxn];\n\ninline void in(re int &x){\n    x=0;int bl = 1;char c=getchar();\n    while(c<'0'||c>'9'){\n    \tif(c == '-')\n    \t  bl = -1;\n        c=getchar();\n    }\n    while(c<='9'&&c>='0'){\n        x=(x<<1)+(x<<3)+(c^'0');\n        c=getchar();\n    }\n    x *= bl;\n}\n\nvoid out(re int a){\n    if(a < 0) {\n        putchar('-');\n        a = -a;\n    }\n    if(a>=10)out(a/10);\n    putchar(a%10+'0');\n}\n\nint query() {\n    int res = 0;\n    FOR(i, 1, b[100002]) { //\u7b2c\u4e00\u4e2a\u548c\u6700\u540e\u4e00\u4e2a\u5757\u4e0d\u53ef\u80fd\u6253\u6807\u8bb0 \n        if(tag[i])\n          res += sq;\n        else\n          res += ans[i]; \n    }\n    return res;\n}\n\nvoid changeup(int x, int y) {\n    FOR(i, x, min(y, b[x]*sq)) {\n        ++a[i]; \n        if(a[i] == 1)  \n          ++ans[b[x]];\n    }\n    if(b[x] != b[y])\n      FOR(i, (b[y]-1)*sq+1, y) {\n          ++a[i];\n          if(a[i] == 1)\n            ++ans[b[y]];\n      }\n    FOR(i, b[x]+1, b[y]-1)\n      ++tag[i];\n} \n\nvoid changedown(int x, int y) {\n    FOR(i, x, min(y, b[x]*sq)) {\n        --a[i]; \n        if(a[i] == 0)  \n          --ans[b[x]];\n    }\n    if(b[x] != b[y])\n      FOR(i, (b[y]-1)*sq+1, y) {\n          --a[i];\n          if(a[i] == 0)\n            --ans[b[y]];\n      }\n    FOR(i, b[x]+1, b[y]-1)\n      --tag[i];\n}\n\nint main() {\n    in(n);\n    sq = sqrt(100002);\n    FOR(i, 1, 100002)\n      b[i] = (i-1)/sq+1;\n    FOR(i, 1, n) {\n        in(x), in(y), in(xx), in(yy);\n        if(y == yy) {\n            if(x > xx)\n              swap(x, xx);\n            h[++cnt].bl = 0;\n            h[cnt].st = y;\n            h[cnt].ed = y+1;\n            h[cnt].pos = x+1;\n            \n            h[++cnt].bl = 1;\n            h[cnt].st = y;\n            h[cnt].ed = y+1;\n            h[cnt].pos = xx;\n        }\n        else {\n            if(y > yy)\n              swap(y, yy);\n            h[++cnt].bl = 0;\n            h[cnt].st = y+1;\n            h[cnt].ed = yy;\n            h[cnt].pos = x;\n            \n            h[++cnt].bl = 1;\n            h[cnt].st = y+1;\n            h[cnt].ed = yy;\n            h[cnt].pos = x+1;\n        }\n    }\n    sort(h+1, h+cnt+1);\n    int pre = 0;\n    int res = 0;\n    int now = 0;\n    FOR(i, 1, cnt) {\n        if(h[i].bl == 1) {\n            now = h[i].pos;\n            res += (now-pre+1)*query();\n            pre = now+1;\n            changedown(h[i].st, h[i].ed);\n        }\n        else {\n            now = h[i].pos;\n            res += (now-pre)*query();\n            pre = now;\n            changeup(h[i].st, h[i].ed);\n        }\n    }\n    out(res);\n    putchar(10);\n}\n```",
        "postTime": 1552641887,
        "uid": 66965,
        "name": "Juan_feng",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 P3875 \u3010[TJOI2010]\u88ab\u6c61\u67d3\u7684\u6cb3\u6d41\u3011"
    },
    {
        "content": "//UPD:\u6362\u4e86\u4e00\u5f20\u56fe\u7247\n\n\u6bcf\u4e00\u6761\u7ebf\u6bb5\u5bf9\u5e94\u4e00\u4e2a$2*i$\u6216\u8005$i*2$\u7684\u77e9\u5f62\u3002\u8f6c\u6362\u540e\u5c31\u662f\u4e00\u4e2a\u5f31\u5316\u7684\u626b\u63cf\u7ebf\u95ee\u9898\u3002\n\n\u5750\u6807\u8303\u56f4\u53ea\u6709100000\u4e14\u6ca1\u6709\u8d1f\u6570\uff0c\u6240\u4ee5\u4e0d\u7528\u79bb\u6563\u5316\u3002\u4e0b\u9762\u7b80\u5355\u8bb2\u8bb2\u626b\u63cf\u7ebf\u3002\n\n\u6211\u4eec\u7528\u4e00\u6839\u7ad6\u76f4\u7684\u7ebf\u4ece\u5de6\u5411\u53f3\u4f9d\u6b21\u626b\u63cf\uff0c\u6bcf\u5f53\u4e0e\u77e9\u5f62\u7684\u7ad6\u76f4\u8fb9\u91cd\u5408\u65f6\u5c31\u7d2f\u52a0\u4e00\u6b21\u9762\u79ef\uff0c\u76f8\u5f53\u4e8e\u628a\u5e76\u96c6\u56fe\u5f62\u5206\u5272\u4e3a\u4e00\u4e2a\u4e00\u4e2a\u5c0f\u7684\u77e9\u5f62\u3002\n![](https://cdn.luogu.com.cn/upload/image_hosting/hkkv76ib.png)\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u5efa\u7acb\u6570\u7ec4$d[i]$\u4fdd\u5b58\u8fd9\u4e2ay\u5750\u6807\u88ab\u8986\u76d6\u4e86\u591a\u5c11\u6b21\uff0c\u5e76\u628a\u77e9\u5f62\u7684\u7ad6\u8fb9\u6309$(x,y1,y2,d)$\u8868\u793a\uff0cd\u8868\u793a\u8fd9\u662f\u77e9\u5f62\u7684\u5de6\u8fb9\u754c(1)\u8fd8\u662f\u53f3\u8fb9\u754c(-1)\uff0c\u6bd4\u5982\u56fe\u4e2d\u7b2c\u4e00\u6761\u8fb9\u5c31\u662f$(2,3,7,1)$\uff0c\u5e76\u6309x\u6392\u5e8f\u4f9d\u6b21\u8003\u8651\u3002\n\n\u5bf9\u4e8e\u6bcf\u6761\u8fb9\uff0c\u6211\u4eec\u628a$[y1,y2)$\u7684\u503c\u90fd\u52a0\u4e0ad\uff0c\u8868\u793a\u8fd9\u6761\u5de6\u6570\u8fb9\u628ay\u8f74\u8fd9\u4e9b\u5730\u65b9\u53c8\u8986\u76d6\u4e86\u4e00\u6b21\uff0c\u6216\u8005\u53f3\u6570\u8fb9\u8868\u793a\u8be5\u77e9\u5f62\u5bf9y\u8f74\u5f71\u54cd\u5df2\u7ecf\u7ed3\u675f\u3002\n\n\uff08\u4e3a\u4ec0\u4e48\u662f\u5de6\u95ed\u53f3\u5f00\uff1a\u6211\u4eec\u628a\u70b9\u8f6c\u5316\u4e3a\u7ebf\u6bb5\u6765\u6c42\u8986\u76d6\u6b21\u6570\uff0c\u70b9\u7684\u6570\u91cf\u662f\u6bd4\u7ebf\u6bb5\u7684\u6570\u91cf\u591a1\u4e2a\u7684\uff0c\u6bd4\u5982\u7b2c\u4e00\u6761\u7ebf\u6bb5\u91cc$[3,7]$\u662f\u67095\u4e2a\u70b9\u7684\uff0c\u4f46\u662f\u653e\u5728d\u6570\u7ec4\u91cc\u53ea\u67094\u4e2a\u503c\u9700\u8981\u4fee\u6539\u3002\uff09\n\n\u63a5\u7740\u7edf\u8ba1\u7b54\u6848\uff0c\u4e0b\u4e00\u4e2a\u77e9\u5f62\u7684\u5bbd\u5c31\u662f\u76f8\u90bb\u4e24\u6839\u7ad6\u8fb9\u7684x\u5750\u6807\u5dee\uff0c\u800c\u957f\u5ea6\u5c31\u662fd\u6570\u7ec4\u91cc\u81f3\u5c11\u88ab\u8986\u76d6\u4e00\u6b21\u7684\u5750\u6807\u6570\u3002\n\n\uff08\u56fe\u4e2d\uff1a$2*4+2*6+1*8+2*7+1*7+1*4+3*4+0*0\\ =\\ 60$\uff09\n\nd\u6570\u7ec4\u6d89\u53ca\u4e86\u533a\u95f4\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4\u3002\n\n\u7531\u4e8e\u53ea\u9700\u8981\u67e5\u8be2$(1,N)$\u91cc\u7684\u8986\u76d6\u6b21\u6570\uff0c\u6211\u4eec\u7684\u61d2\u6807\u8bb0\u53ef\u4ee5\u4e0d\u7528\u4e0b\u63a8\u3002\u66f4\u65b0\u65f6\uff0c\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u6709\u61d2\u6807\u8bb0\uff08\u8868\u793a\u81ea\u5df1\u88ab\u5b8c\u5168\u8986\u76d6\u7684\u6b21\u6570\uff09\uff0c\u90a3\u4e48\u4ed6\u7684\u8d21\u732e\u5c31\u662f\u533a\u95f4\u603b\u957f\u5ea6\uff08\u56e0\u4e3a\u88ab\u8986\u76d6\uff09\uff0c\u5426\u5219\u9012\u5f52\u8ba1\u7b97\u5de6\u53f3\u513f\u5b50\u5e76\u76f8\u52a0\u3002\n\n\u8fd8\u6709\u4e00\u4e2a\u7ec6\u8282\uff0c\u7ebf\u6bb5\u6811\u4e0b\u8868\u53ea\u80fd\u4ece1\u5f00\u59cb\uff0c\u4f46\u9898\u76ee\u91cc\u53ef\u80fd\u51fa\u73b00\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u6240\u6709\u5750\u6807\u8bfb\u8fdb\u6765\u65f6+1\u50a8\u5b58\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define MAX (100000 + 10)\n#define mid (L + R >> 1)\n#define RS (i << 1 | 1)\n#define LS (i << 1)\nusing namespace std;\n\nstruct Node{int x,y1,y2,d;} a[MAX<<1];\nstruct Tree{int L,R,v,len;} d[MAX<<4];\nint N,ans,xa,xb,ya,yb;\n\nint cmp(const Node &a,const Node &b) {return a.x < b.x;}\nvoid swap(int &a,int &b) {a ^= b ^= a ^= b;}\n\nvoid read(int &a)\n{\n\tregister char c = getchar();\n\tfor (a=0; c<'0'||'9'<c; c=getchar());\n\tfor (; '0'<=c && c<='9'; c=getchar())\n\t\ta = a * 10 + (c & 15);\n}\n\nvoid init(int i,int L,int R)\n{\n\td[i].L = L; d[i].R = R;\n\tif (L != R) init(LS,L,mid), init(RS,mid+1,R);\n}\n\nvoid add(int i,int L,int R,int v)\n{\n\tif (L <= d[i].L && d[i].R <= R)\n\t\td[i].v += v;//v\u5373\u61d2\u6807\u8bb0\n\telse\n\t{\n\t\tconst int md = (d[i].L+d[i].R) >> 1;\n\t\tif (L <= md) add(LS,L,R,v);\n\t\tif (R > md) add(RS,L,R,v);\n\t}//\u4ee5\u4e0b\u5c31\u662f\u4e0a\u63a8\u8fc7\u7a0b\n\tif (d[i].v) d[i].len = d[i].R - d[i].L + 1;\n\telse d[i].len = d[LS].len + d[RS].len;//len\u5c31\u662f\u8986\u76d6\u957f\u5ea6\n}\n\nint main()\n{\n\tread(N); init(1,1,MAX);\n\tfor (int i = 1, xa = 0, xb = 0; i <= N; i++)\n\t{\n\t\tread(xa); read(ya);\n\t\tread(xb); read(yb);\n\t\tif (xa == xb)\n\t\t{//\u628a\u7ebf\u6bb5\u8f6c\u5316\u4e3a\u77e9\u5f62\n\t\t\tif (ya > yb) swap(ya,yb);\n\t\t\ta[i] = Node{xa, ya+1, yb+1, 1}, \n\t\t\ta[i+N] = Node{xa+2, ya+1, yb+1, -1};\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (xa > xb) swap(xa,xb);\n\t\t\ta[i] = Node{xa+1, ya, ya+2, 1},\n\t\t\ta[i+N] = Node{xb+1, ya, ya+2, -1};\n\t\t}\t\n\t}\n\t\n\tsort(a + 1, a + N + N + 1, cmp);\n\tfor (int i = 1; i <= N<<1; i++)\n\t{\n\t\tadd(1, a[i].y1, a[i].y2-1, a[i].d);\n\t\tans += d[1].len * (a[i+1].x - a[i].x);//\u8ba1\u7b97\u9762\u79ef\n\t}printf(\"%d\\n\",ans);\n}\n```\n\u4e3e\u4e00\u53cd\u4e09\uff1a\n\n[P5490 \u3010\u6a21\u677f\u3011\u626b\u63cf\u7ebf](https://www.luogu.org/problem/P5490)\n\n[P1856 [USACO5.5]\u77e9\u5f62\u5468\u957fPicture](https://www.luogu.org/problem/P1856)\n",
        "postTime": 1565854594,
        "uid": 73489,
        "name": "NyaRu_Official",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P3875 \u3010[TJOI2010]\u88ab\u6c61\u67d3\u7684\u6cb3\u6d41\u3011"
    },
    {
        "content": "http://www.elijahqi.win/2018/01/02/luogu3875-tjoi2010%e8%a2%ab%e6%b1%a1%e6%9f%93%e7%9a%84%e6%b2%b3%e6%b5%81/\n\n\n\u9898\u76ee\u80cc\u666f\n\nhttp://blog.csdn.net/elijahqi/article/details/78951550\n\n\u6709\u4e00\u5ea7\u57ce\u5e02\uff0c\u57ce\u5e02\u91cc\u6709\u8bb8\u591a\u6761\u4eba\u5de5\u6cb3\uff0c\u6cb3\u6d41\u7684\u6d41\u5411\u90fd\u662f\u6c34\u5e73\u6216\u8005\u7ad6\u76f4\u7684\u3002\u4e3a\u4e86\u65b9\u4fbf\u5e02\u6c11\u7528\u6c34\uff0c\u653f\u5e9c\u5c06\u6cb3\u6d41\u8bbe\u8ba1\u6210\u7f51\u683c\u72b6\u3002\u5728\u6c34\u5e73\u65b9\u5411\u4e0a\u548c\u7ad6\u76f4\u65b9\u5411\u4e0a\uff0c\u76f8\u90bb\u6cb3\u6d41\u7684\u8ddd\u79bb\u90fd\u662f1\u516c\u91cc\u3002\u6cb3\u6d41\u56f4\u51fa\u8bb8\u591a\u683c\u5b50\uff0c\u6bcf\u4e2a\u683c\u5b50\u5c31\u662f\u4e00\u4e2a\u793e\u533a\uff0c\u793e\u533a\u91cc\u7684\u5c45\u6c11\u53ef\u4ee5\u5230\u793e\u533a\u5468\u8fb9\u56db\u6761\u6cb3\u6bb5\u4e2d\u7684\u4efb\u610f\u4e00\u5904\u6253\u6c34\u559d\u3002\n\n\u9898\u76ee\u63cf\u8ff0\n\n\n\u90c1\u95f7\u7684\u662f\uff0c\u4e0d\u4e45\u4e4b\u540e\uff0c\u6709\u4e9b\u4e0d\u6cd5\u5546\u4eba\u4fee\u5efa\u4e86\u5de5\u5382\uff0c\u6c61\u67d3\u4e86\u6cb3\u6d41\u3002\u6cb3\u8fb9\u8bb8\u591a\u5c45\u6c11\u559d\u4e86\u88ab\u6c61\u67d3\u7684\u6c34\uff0c\u751f\u75c5\u4e86\u3002\u653f\u5e9c\u6d3e\u51fa\u4e13\u5458\u5c0f\u5f3a\u8c03\u67e5\u6c61\u67d3\u60c5\u51b5\u3002\u5730\u7406\u4e13\u5bb6\u5c0f\u5f3a\u884c\u52a8\u8fc5\u901f\uff0c\u5f88\u5feb\u7ed9\u51fa\u4e86\u6c61\u67d3\u5206\u5e03\u3002\u4ed6\u7ed9\u51fa\u4e86\u4e00\u5f20\u6c61\u67d3\u6e05\u5355\u3002\u6e05\u5355\u5217\u51fa\u4e86\u88ab\u6c61\u67d3\u7684\u6cb3\u6bb5\uff0c\u6240\u6709\u80fd\u559d\u5230\u8be5\u6cb3\u6bb5\u6c34\u7684\u5c45\u6c11\u90fd\u6709\u53ef\u80fd\u751f\u75c5\uff08\u6cb3\u6bb5\u7684\u7aef\u70b9\u5904\u5ffd\u7565\u4e0d\u8ba1\uff09\u3002\u4f46\u662f\uff0c\u7b28\u7b28\u7684\u5c0f\u5f3a\u600e\u4e48\u4e5f\u7b97\u4e0d\u51fa\u5177\u4f53\u4f1a\u6709\u591a\u5c11\u4e2a\u793e\u533a\u7684\u5c45\u6c11\u4f1a\u751f\u75c5\uff0c\u6240\u4ee5\uff0c\u4ed6\u8bf7\u4f60\u6765\u5e2e\u5e2e\u5fd9\u3002\n\n\n\u8f93\u5165\u8f93\u51fa\u683c\u5f0f\n\n\n\u8f93\u5165\u683c\u5f0f\uff1a\n\n\n\u8f93\u5165\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6574\u6570N\uff0c\u8868\u793a\u88ab\u6c61\u67d3\u7684\u6cb3\u6bb5\u7684\u6570\u76ee\u3002\n\n\n\u63a5\u4e0b\u6765N\u884c\uff0c\u6bcf\u884c4\u4e2a\u6574\u6570x1\uff0cy1\uff0cx2\uff0cy2\uff0c\u8868\u793a\u88ab\u6c61\u67d3\u6cb3\u6bb5\u7684\u8d77\u59cb\u4f4d\u7f6e\u548c\u7ed3\u675f\u4f4d\u7f6e\u3002\u6bcf\u884c\u8f93\u5165\u7684\u4e24\u4e2a\u4f4d\u7f6e\u4fdd\u8bc1\u4e0d\u91cd\u5408\uff0c\u5e76\u4e14\u6ee1\u8db3x1=x2\u6216y1=y2\n\n\n\u8f93\u51fa\u683c\u5f0f\uff1a\n\n\n\u8f93\u51fa\u4e00\u4e2a\u6574\u6570A\uff0c\u8868\u793a\u6709A\u4e2a\u793e\u533a\u7684\u5c45\u6c11\u4f1a\u559d\u5230\u88ab\u6c61\u67d3\u7684\u6c34\u3002\n\n\u8f93\u5165\u8f93\u51fa\u6837\u4f8b\n\n\n\u8f93\u5165\u6837\u4f8b#1\uff1a \u590d\u5236\n\n\n3\n1 3 4 3\n\n6 7 6 3\n\n4 6 7 6\n\n\n\u8f93\u51fa\u6837\u4f8b#1\uff1a \u590d\u5236\n\n\n16\n\n\u8bf4\u660e\n\n\u5bf9\u4e8e10%\u7684\u6570\u636e\uff0c1 \u2264 x1\uff0cy1\uff0cx2\uff0cy2 \u2264 100\uff0cN \u2264 100\uff1b\n\n\n\u5bf9\u4e8e30%\u7684\u6570\u636e\uff0c1 \u2264 x1\uff0cy1\uff0cx2\uff0cy2 \u2264 10000\uff0cN \u2264 100\uff1b\n\n\n\u5bf9\u4e8e100%\u7684\u6570\u636e\uff0c1 \u2264 x1\uff0cy1\uff0cx2\uff0cy2 \u2264 100000\uff0cN \u2264 10000\u3002\n\n\n\u6bcf\u4e2a\u6d4b\u8bd5\u70b9\u65f6\u96501\u79d2\u3002\n\n\n\u54c7\u9996\u5148\u5fc5\u819cicefox\u5de8\u4f6c \u5728\u849f\u84bb\u6211\u82e6\u82e6\u601d\u7d22 \u5927\u4f6c\u76f4\u63a5\u79d2\u51fa\u6b63\u89e3 \u8fd9\u4e0d\u77e9\u5f62\u9762\u79ef\u5e76\u561b \u5f3a\u554a %%![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180102120344650?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWxpamFocWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\u987a\u5e26\u5b66\u4e60\u4e86\u4e0b\u8fd9\u79cd\u626b\u63cf\u7ebf\u7684\u5199\u6cd5 \u8868\u793a\u81ea\u5df1\u4ee5\u524d\u5199\u7684\u5341\u5206\u4e0d\u597d \u4e0d\u65b9\u4fbf\u5199\u4ee3\u7801  \u5f88\u9ebb\u70e6 \u8fd8\u662f\u819cicefox\u5427\n\n![\u8fd9\u91cc\u5199\u56fe\u7247\u63cf\u8ff0](http://img.blog.csdn.net/20180102120344650?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvZWxpamFocWk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n\n\u8fd9\u9898\u9996\u5148\u5df2\u7ecf\u53ef\u4ee5\u77e5\u9053 \u65b9\u6cd5\u5c31\u662f\u626b\u63cf\u7ebf\u505a\u77e9\u5f62\u9762\u79ef\u5e76 \u90a3\u4e48 \u6211\u662f\u4ee5\u6a2a\u5750\u6807\u6392\u5e8f \u7136\u540e\u7eb5\u5750\u6807\u7ebf\u6bb5\u6811\u8fd9\u6837\u505a\u7684 \u9996\u5148\u6211\u628a\u6bcf\u4e2a\u77e9\u5f62\u62c6\u5206\u6210\u4e24\u4e2a\u7ebf \u4e00\u4e2a\u662f\u5de6\u8fb9\u7684\u4e00\u4e2a\u662f\u53f3\u8fb9\u7684 \u6ce8\u610f \u6211\u626b\u63cf\u7ebf\u6211\u73b0\u5728\u4e00\u5171\u9700\u8981\u7ef4\u62a4\u4e24\u79cd\u4e1c\u897f 1\u3001\u6211\u8fd9\u533a\u57df\u88ab\u8986\u76d6\u51e0\u6b21 2\u3001\u6211\u8fd9\u533a\u57df\u88ab\u8986\u76d6\u7684\u957f\u5ea6\u662f\u591a\u5c11\n\n\n\u90a3\u4e48\u53ea\u6709\u5728\u6211\u533a\u57df\u88ab\u8986\u76d6\u6b21\u6570\u51cf\u6ca1\u7684\u65f6\u5019\u6211\u9700\u8981\u628a\u533a\u95f4\u8986\u76d6\u7684\u957f\u5ea6\u66f4\u6539\u4e00\u4e0b  \u6ce8\u610f \u8fd9\u4e2a\u66f4\u6539\u4e0d\u662f\u76f4\u63a5\u66b4\u529b\u7684\u66f4\u6539\u62100 \u800c\u662f\u66f4\u6539\u6210\u6211\u5b50\u8282\u70b9\u8986\u76d6\u7684\u4e00\u5171\u6709\u591a\u5c11 \u6b64\u5916update\u7684\u65f6\u5019 \u5982\u679c\u53d1\u73b0\u6211\u5f53\u524d\u8fd9\u4e00\u5c42\u5df2\u7ecf\u88ab\u5b8c\u6574\u7684\u8986\u76d6\u4e86 \u90a3\u4e48\u6211\u5c31\u4e0d\u4ece\u4e0b\u4e00\u7ea7\u66f4\u65b0\u4e0a\u6765\u4e86 \u753b\u4e00\u753b\u56fe\u5c31\u53ef\u4ee5\u77e5\u9053\u4e86 \u7136\u540e\u76f4\u63a5\u8f93\u51fa\u7b54\u6848\u5373\u53ef \u53e6\u5916\u8fd9\u9898 \u56e0\u4e3a\u9488\u5bf9\u8fd9\u4e2ay\u4e5f\u4e0d\u662f\u95ed\u533a\u95f4 \u6240\u4ee5\u6211\u5e72\u8106\u7ed9\u4ed6\u53d8\u6210\u8fd9\u4e2a\u5de6\u95ed\u53f3\u5f00\u7684\u5f62\u5f0f\u65b9\u4fbf\u7edf\u8ba1\u7b54\u6848\n\n```cpp\n\n#include<cstdio>\n#include<algorithm>\n#define N 110000\n#define ll long long\nusing namespace std;\ninline char gc(){\n    static char now[1<<16],*S,*T;\n    if (T==S){T=(S=now)+fread(now,1,1<<16,stdin);if (T==S) return EOF;}\n    return *S++;\n}\ninline int read(){\n    int x=0;char ch=gc();\n    while(ch<'0'||ch>'9') ch=gc();\n    while(ch<='9'&&ch>='0'){x=x*10+ch-'0';ch=gc();}\n    return x;\n}\nstruct node{\n    int x,y1,y2,op;\n}line[N>>1];\nstruct node1{\n    int left,right,v,len;\n}tree[N<<2];\nint num=0,n,root;ll ans; \ninline bool cmp(node a,node b){return a.x==b.x?a.op>b.op:a.x<b.x;}\ninline void update(int x){\n    if (tree[x].v) return;\n    int l=tree[x].left,r=tree[x].right;\n    tree[x].len=tree[l].len+tree[r].len;\n}\ninline void insert1(int x,int l,int r,int l1,int r1,int v){\n    if (l1<=l&&r1>=r){tree[x].v+=v;if (tree[x].v) tree[x].len=r-l+1;else update(x);return;}\n    int mid=l+r>>1;if (l1<=mid) insert1(tree[x].left,l,mid,l1,r1,v);\n    if (r1>mid) insert1(tree[x].right,mid+1,r,l1,r1,v); update(x);\n}\nvoid build(int &x,int l,int r){\n    x=++num;if (l==r) return;\n    int mid=l+r>>1;build(tree[x].left,l,mid);build(tree[x].right,mid+1,r);\n}\nint main(){\n    freopen(\"3875.in\",\"r\",stdin);\n    n=read();int max1=0;\n    for (int i=1;i<=n;++i){\n        int x1=read(),y1=read(),x2=read(),y2=read();\n         if (x1>x2) swap(x1,x2);if (y1>y2) swap(y1,y2);max1=max(max1,y2+1);\n         if (x1==x2){\n             line[++num].x=x1-1;line[num].y1=y1;line[num].y2=y2;line[num].op=1;\n             line[++num].x=x2+1;line[num].y1=y1;line[num].y2=y2;line[num].op=0;\n         }else{\n             line[++num].x=x1;line[num].y1=y1-1;line[num].y2=y2+1;line[num].op=1;\n             line[++num].x=x2;line[num].y1=y1-1;line[num].y2=y2+1;line[num].op=0;\n         }\n    }sort(line+1,line+num+1,cmp);num=0;build(root,0,max1);ll ans=0;\n    for (int i=1;i<=n<<1;++i){\n        ans+=(ll)tree[root].len*(line[i].x-line[i-1].x);\n        insert1(root,0,max1,line[i].y1,line[i].y2-1,line[i].op?1:-1);\n    }printf(\"%lld\\n\",ans);\n    return 0;\n}\n\n```",
        "postTime": 1514900279,
        "uid": 5037,
        "name": "elijahqi",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 P3875 \u3010[TJOI2010]\u88ab\u6c61\u67d3\u7684\u6cb3\u6d41\u3011"
    }
]