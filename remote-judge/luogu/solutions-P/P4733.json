[
    {
        "content": "### Solution:\n\n\u8fd9\u9898\u697c\u4e0a\u5df2\u7ecf\u8bb2\u5f97\u5f88\u6e05\u695a\u4e86\uff0c\u5c31\u662f\u8003\u8651\u5c06\u4eba\u770b\u6210\u8fb9\u53bb\u8fde\u63a5\u4e24\u4e2a\u70b9\uff0c\u5c06\u70b9\u5206\u914d\u7ed9\u8fb9\u83b7\u5f97\u76f8\u5e94\u7684\u6743\u503c\u3002\u6709\u89e3\u5f53\u4e14\u4ec5\u5f53\u8fde\u51fa\u6765\u7684\u56fe\u662f\u4e00\u4e2a\u57fa\u73af\u6811\u68ee\u6797\u3002  \n\n\u800c\u57fa\u73af\u6811\u68ee\u6797\u662f\u65b9\u4fbf\u5c06\u70b9\u5206\u914d\u7ed9\u8fb9\u7684\u3002\u56e0\u4e3a\u5bf9\u4e8e\u6811\u7684\u90e8\u5206\uff0c\u65b9\u6848\u5df2\u7ecf\u786e\u5b9a\u3002\u5bf9\u4e8e\u73af\u7684\u90e8\u5206\uff0c\u5206\u914d\u5206\u6210\u987a\u65f6\u9488\u548c\u9006\u65f6\u9488\u4e24\u79cd\u60c5\u51b5\u3002\u800c\u5728\u8fd9\u4e00\u9053\u9898\u4e2d\uff0c\u56e0\u4e3a\u4e00\u6761\u8fb9\u80af\u5b9a\u8fde\u63a5\u7684\u662f\u5de6\u8fb9\u548c\u53f3\u8fb9\uff0c\u5f97\u5230\u7684\u662f\u4e00\u4e2a\u5076\u73af\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u987a\u65f6\u9488\u5206\u914d\u5f97\u5230\u7684\u6743\u503c\u548c\u9006\u65f6\u9488\u5206\u914d\u5f97\u5230\u7684\u6743\u503c\u662f\u76f8\u53cd\u6570\u3002\n\n\u56e0\u4e3a\u8981\u6c42\u5f97\u4e24\u8fb9\u7684\u6743\u503c\u5dee\u5728 $k$ \u5185\u662f\u5426\u6709\u89e3\uff0c\u8fd9\u4e2a\u95ee\u9898\u7ed3\u5408\u4e0a\u8fd9\u4e2a\u57fa\u73af\u6811\u68ee\u6797\u53ef\u4ee5\u7528\u80cc\u5305\u89e3\u51b3\u3002\u53ef\u4ee5\u5148\u5047\u5b9a\u90fd\u53d6\u987a\u65f6\u9488\u987a\u5e8f\uff0c\u7136\u540e\u7528\u9006\u65f6\u9488\u987a\u5e8f\u51cf\u53bb\u987a\u65f6\u9488\u987a\u5e8f\u4f5c\u4e3a\u6743\u503c\u53bb\u505a\uff0c\u4f46\u590d\u6742\u5ea6\u4e3a $O(\\frac {n^2a}{w})$ \u3002\u53e6\u5916\u4e00\u7bc7\u9898\u89e3\u597d\u50cf\u662f\u7528\u8fd9\u4e2a\u4e0d\u6b63\u786e\u7684\u590d\u6742\u5ea6\u901a\u8fc7\u7684\u3002 \n\n\u6ce8\u610f\u5230\u505a\u7684\u662f\u80cc\u5305\uff0c\u5e76\u4e14\u603b\u6743\u503c\u662f $na$ \u7684\uff0c\u53ef\u4ee5\u5f97\u77e5\u4e0d\u540c\u7684\u4e2a\u6570\u5728 $\\sqrt{na}$ \u5185\uff0c\u505a\u591a\u91cd\u80cc\u5305\u5c31\u597d\u4e86\u3002\u5355\u8c03\u961f\u5217\u6ca1\u6cd5 bitset \u4f18\u5316\uff0c\u6240\u4ee5\u4f7f\u7528\u4e8c\u8fdb\u5236\u5206\u7ec4\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u4e8c\u8fdb\u5236\u5206\u7ec4\u5728\u8fd9\u91cc\u7684\u590d\u6742\u5ea6\u662f $O(\\frac{na\\sqrt{na}}{w})$ \u7684\u800c\u975e\u697c\u4e0a\u9898\u89e3\u6240\u5199\u7684\u662f $O(\\frac{na\\sqrt{na}log(\\sqrt{na})}{w})$\u3002\n\n\u56e0\u4e3a\u8fd9\u91cc\u7684 $log$ \u5e76\u4e0d\u80fd\u7b80\u5355\u7684\u5199\u6210 $log(na)$\uff0c\u590d\u6742\u5ea6\u5e94\u8be5\u5199\u6210 $\\frac{na\\sum_i^{cnt}log(b_i)}{w}$ \uff0c\u5176\u4e2d $cnt$ \u662f\u4e0d\u540c\u6743\u503c\u7684\u4e2a\u6570\uff0c$b_i$ \u662f\u7b2c $i$ \u4e2a\u6743\u503c\u7684\u4e2a\u6570\u3002\u5176\u4e2d\u6ee1\u8db3 $\\sum_i^{cnt}b_i*val_i \\le na$\u3002\u8fd9\u4e2a\u4e1c\u897f\u5b9e\u9645\u4e0a\u662f\u53ef\u4ee5\u88ab\u8bc1\u660e\u662f\u5e38\u6570\u3002\n\ncode: \n```\n#include <bits/stdc++.h>\n\n\n\nusing namespace std;\nconst int N = 2e5 + 10;\nint n, k, m, bas;\nint c[N];\nint first[N], nex[N << 1], v[N << 1], w[N << 1], num = 1;\nint vis[N], cir[N], sav[N], stu[N], top = 0; \nint val[N], len[N], cnt = 0;\nstruct node {\n\tint val, cnt;\n}a[N];\nint edg = 0, ver = 0;\nbitset<N * 20> dp;\ninline void add(int x, int y, int z) {\n\tv[++num] = y;\n\tw[num] = z;\n\tnex[num] = first[x];\n\tfirst[x] = num;\n}\ninline void Find_cir(int u, int fa) {\n\tif (vis[u]) {\n\t\tfor (int i = top; i >= 1; i--) {\n\t\t\tcir[stu[i]] = true;\n\t\t\tsav[++len[cnt]] = stu[i];\n\t\t\tif (stu[i] == u) break;\n\t\t}\n\t\treturn ;\n\t}\n\tstu[++top] = u;\n\tver++;\n\tvis[u] = true;\n\tfor (int i = first[u]; i != -1; i = nex[i]) {\n\t\tint to = v[i];\n\t\tif ((i ^ fa) != 1 && !cir[to]) {\n\t\t\tedg++;\n\t\t\tFind_cir(to, i);\t\n\t\t}\n\t}\n\ttop--;\n}\ninline void DFS(int u, int fa) {\n\tfor (int i = first[u]; i != -1; i = nex[i]) {\n\t\tint to = v[i];\n\t\tif (!cir[to] && fa != to) {\n\t\t\tm += (to > n ? -w[i] : w[i]);\n\t\t\tDFS(to, u);\n\t\t}\n\t}\n}\ninline void dfs(int Rot, int u, int fa) {\n\tfor (int i = first[u]; i != -1; i = nex[i]) {\n\t\tint to = v[i];\n\t\tif ((fa ^ i) != 1 && cir[to]) {\n\t\t\tval[cnt] += (u > n ? -w[i] : w[i]);\n\t\t\tif (Rot != to) dfs(Rot, to, i);\n\t\t}\n\t}\n}\ninline void sol() {\n\tfor (int i = 1; i <= len[cnt]; i++) DFS(sav[i], 0);\n\tfor (int i = first[sav[1]]; i != -1; i = nex[i]) {\n\t\tint to = v[i];\n\t\tif (cir[to]) {\n\t\t\tval[cnt] += (sav[1] > n ? -w[i] * 2 : w[i] * 2);\n\t\t\tdfs(sav[1], to, 0);\n\t\t\tbreak;\n\t\t} \n\t}\n\tm += -val[cnt];\n\tval[cnt] = 2 * val[cnt];\n}\nint main() {\n\tmemset(first, -1, sizeof first);\n\tios::sync_with_stdio(false);\n\tcin.tie(0), cout.tie(0);\n\tcin >> n >> k;\n\tfor (int i = 1; i <= n * 2; i++) {\n\t\tint x, y;\n\t\tcin >> x >> y >> c[i];\n\t\tadd(x, y + n, c[i]);\n\t\tadd(y + n, x, c[i]);\n\t}\n\tfor (int i = 1; i <= n * 2; i++) {\n\t\tif (!vis[i])  {\n\t\t\tver = 0, edg = 0;\n\t\t\t++cnt;\n\t\t\tFind_cir(i, 0);\n\t\t\tif (ver != edg) {\n\t\t\t\tcout << \"NO\\n\";\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tsol();\n\t\t}\n\t}\n\tsort(val + 1, val + cnt + 1);\n\tint tem = cnt; cnt = 0; \n\tval[0] = -2e9;\n\tfor (int i = 1; i <= tem; i++) {\n\t\tif (val[i] != val[i - 1]) {\n\t\t\ta[++cnt].val = val[i];\n\t\t\ta[cnt].cnt = 1;\n\t\t} else a[cnt].cnt++;\n\t}\n\tbas = n * 20;\n\tdp[bas] = 1;\n\tfor (int i = 1; i <= cnt; i++) {\n\t\tfor (int j = 1; a[i].cnt; j = min(j * 2, a[i].cnt -= j)) {\n\t\t\tif (a[i].val < 0) dp = (dp | (dp >> (-a[i].val * j)));\n\t\t\telse dp = (dp | (dp << (a[i].val * j)));\n\t\t}\n\t} \n\tbool ans = 0;\n\tfor (int i = -k; i <= k; i++) ans |= dp[i + bas - m];\n\tif (ans) cout << \"YES\\n\";\n\telse cout << \"NO\\n\";\n\treturn 0;\n}\n```",
        "postTime": 1648001947,
        "uid": 114181,
        "name": "ChasingAft",
        "ccfLevel": 7,
        "title": "[BalticOI 2015]Tug of War"
    },
    {
        "content": "\u9000\u5f79\u524d\u6c34\u4e00\u53d1\u9898\u89e3\uff0c\u4fdd\u4f51\u6211\u5b89\u5ea6\u665a\u5e74\u3002\n\n### \u5206\u6790\n\n\u6211\u4eec\u6784\u9020\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u5de6\u53f3\u5404 $2n$ \u4e2a\u70b9\uff0c\u5de6\u8fb9\u8868\u793a\u9009\u624b\uff0c\u53f3\u8fb9\u8868\u793a\u4f4d\u7f6e\uff0c\u53ef\u884c\u7684\u4f4d\u7f6e\u8fde\u8fb9\u3002\u5982 $l1 = 2$\uff0c$r1 = 3$\uff0c\u5219\u8fde\u8fb9 $(1,2)$\u3001$(1,3+n)$\u3002\n\n\u4e4b\u524d\u6821\u5185\u819c\u4f60\u8d5b\u91cc\u4e5f\u51fa\u73b0\u8fc7\u957f\u6210\u8fd9\u6837\u7684\u4e8c\u5206\u56fe\uff0c\u8bb0\u5fc6\u72b9\u65b0\u3002\u5de6\u4fa7\u6bcf\u4e2a\u70b9\u5ea6\u90fd\u4e3a $2$\uff0c\u8fd9\u6837\u7684\u4e8c\u5206\u56fe\u6709\u5f88\u597d\u7684\u6027\u8d28\uff1a\u5f62\u5982\u82e5\u5e72\u73af\u4e0a\u957f\u51fa\u82e5\u5e72\u6761\u94fe\u3002\n\n\u5982\u4f55\u8bf4\u660e\uff1f\u82e5\u56fe\u53f3\u4fa7\u6709\u5b64\u70b9\u5219\u65e0\u89e3\uff0c\u82e5\u53f3\u4fa7\u67d0\u70b9\u5ea6\u4e3a $1$ \u5219\u8be5\u4f4d\u7f6e\u7684\u65b9\u6848\u786e\u5b9a\uff0c\u53ef\u4ee5\u987a\u7740\u5220\u53bb\u4e00\u6761\u94fe\u3002\u6545\u4ee4\u53f3\u4fa7\u70b9\u5ea6\u5747 $\\geq 2$\uff0c\u800c\u5de6\u4fa7\u70b9\u5ea6\u5747\u4e3a $2$\uff0c\u4e14\u5de6\u53f3\u70b9\u5ea6\u6570\u548c\u76f8\u7b49\uff0c\u53ef\u77e5\u5269\u4e0b\u7684\u56fe\u4e3a\u82e5\u5e72\u4e2a\u5076\u73af\u7684\u96c6\u5408\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u5076\u73af\uff0c\u53ea\u8981\u786e\u5b9a\u4e00\u540d\u9009\u624b\u7684\u5f52\u5c5e\u5c31\u80fd\u786e\u5b9a\u8fd9\u4e9b\u70b9\u5bf9\u4e24\u652f\u961f\u4f0d\u7684\u603b\u8d21\u732e\u3002\u90a3\u4e48\u5c31\u6709\u4e24\u79cd\u60c5\u51b5\u3002\u5148\u9ed8\u8ba4\u4e00\u79cd\u60c5\u51b5\uff0c\u9884\u5904\u7406\u6362\u65b9\u6848\u7684\u8d21\u732e\uff0c\u505a01\u80cc\u5305\u8bb0\u5f55\u67d0\u79cd\u529b\u91cf\u5dee\u80fd\u5426\u53d6\u5230\u5373\u53ef\u3002\u518d\u7528bitset\u4f18\u5316\u4e00\u4e0b\uff0c\u590d\u6742\u5ea6 $O(\\frac{n\\times k}{w})$\u3002\n\n\u53d6 $n=3e4$\u3001$k=6e5$\u3001$w=64$\uff0c\u7b97\u4e00\u4e0b\u5927\u6982\u662f $3e8$\uff0c\u4f3c\u4e4e\u5f88\u60ac\u3002\n\n\u770b\u5230\u65f6\u9650\u6709\u8db3\u8db3\u4e24\u79d2\uff0c\u8fd9\u6446\u660e\u4e86\u60f3\u653e $O(n^2)$ \u7ea7\u7684\u89e3\u6cd5\u8fc7\u554a\u3002\n\n\u90a3\u4e48\u5438\u4e2a\u6c27\uff0c\u559c\u63d022s\u6700\u52a3\u89e3\u3002\n\n### \u4ee3\u7801\n\n\u5220\u94fe\u7684\u65f6\u5019\u6ce8\u610f\u5224\u65ad\u70b9\u5230\u5e95\u5728\u4e0d\u5728\u94fe\u4e0a\u3002\u53ef\u4ee5\u7528\u62d3\u6251\u6392\u5e8f\u505a\uff0c\u4f46\u6211\u5199\u7684\u5f88\u4e11\u5c31\u662f\u4e86\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <bitset>\n\nusing namespace std;\n\nconst int MAXN = 60005, MAXK = 20*MAXN;\nint n, k, d[MAXN], ch[MAXN][2], a[MAXN], val[2], base[2], v[MAXN], t;\nbool vis[MAXN], vis_[MAXN];\nbitset<MAXK*2+100> f;\nvector<int> ed[MAXN];\n\nvoid proc_line(int x) {\n\td[x]--;\n\tif (d[x] >= 2) return;\n\tfor (int u : ed[x]) {\n\t\tif (!vis_[u]) {\n\t\t\tvis_[u] = 1;\n\t\t\tif (x <= n) val[0] += a[u];\n\t\t\telse val[1] += a[u];\n\t\t\tvis[x] = 1;\n\t\t\tif (ch[u][0] != x && !vis[ch[u][0]]) proc_line(ch[u][0]);\n\t\t\telse if (ch[u][1] != x && !vis[ch[u][1]]) proc_line(ch[u][1]);\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nvoid proc_circle(int x) {\n\tvis[x] = 1;\n\tfor (int u : ed[x]) {\n\t\tif (!vis_[u]) {\n\t\t\tvis_[u] = 1;\n\t\t\tif (x <= n) val[0] += a[u];\n\t\t\telse val[1] += a[u];\n\t\t\tif (ch[u][0] != x && !vis[ch[u][0]]) proc_circle(ch[u][0]);\n\t\t\telse if (ch[u][1] != x && !vis[ch[u][1]]) proc_circle(ch[u][1]);\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nint main() {\n\tscanf(\"%d %d\", &n, &k);\n\tfor (int i = 1; i <= 2*n; i++) {\n\t\tscanf(\"%d %d %d\", &ch[i][0], &ch[i][1], a+i);\n\t\tch[i][1] += n;\n\t\td[ch[i][0]]++;\n\t\td[ch[i][1]]++;\n\t\ted[ch[i][0]].push_back(i);\n\t\ted[ch[i][1]].push_back(i);\n\t}\n\tfor (int i = 1; i <= 2*n; i++) {\n\t\tif (d[i] == 0) {\n\t\t\tprintf(\"NO\\n\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tfor (int i = 1; i <= 2*n; i++) {\n\t\tif (d[i] == 1) {\n\t\t\tval[0] = val[1] = 0;\n\t\t\tproc_line(i);\n\t\t\tbase[0] += val[0];\n\t\t\tbase[1] += val[1];\n\t\t}\n\t}\n\tfor (int i = 1; i <= 2*n; i++) {\n\t\tif (!vis[i]) {\n\t\t\tval[0] = val[1] = 0;\n\t\t\tproc_circle(i);\n\t\t\tbase[0] += val[0];\n\t\t\tbase[1] += val[1];\n\t\t\tv[++t] = 2*val[1]-2*val[0];\n\t\t}\n\t}\n\tf[base[0]-base[1]+MAXK] = 1;\n\tfor (int i = 1; i <= t; i++) {\n\t\tif (v[i] > 0) {\n\t\t\tf |= f<<v[i];\n\t\t}\n\t\telse f |= f>>(-v[i]);\n\t}\n\tbool ans = 0;\n\tfor (int i = -k; i <= k; i++)\n\t\tans |= f[i+MAXK];\n\tprintf(ans?\"YES\\n\":\"NO\\n\");\n\treturn 0;\n}\n```\n",
        "postTime": 1637123556,
        "uid": 189044,
        "name": "Celebrimbor",
        "ccfLevel": 7,
        "title": "P4733 \u9898\u89e3"
    },
    {
        "content": "## \u89e3\u6790\n\n\u8003\u8651\u5c06\u6bcf\u4e2a\u4eba\u770b\u6210\u4e00\u6761\u8fb9\uff1b\u5177\u4f53\u6765\u8bf4\uff0c\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u4e3a $s_i$\uff0c\u8fde\u63a5 $l_i$ \u548c $n+r_i$ \u8fd9\u4e24\u4e2a\u7ed3\u70b9\n\n\u5982\u679c\u6211\u4eec\u8981\u786e\u5b9a\u4e00\u4e2a\u4eba\u7684\u961f\u4f0d\uff0c\u5c31\u76f8\u5f53\u4e8e\u5c06\u4ed6\u5bf9\u5e94\u7684\u8fb9 $(u, v)$ \u5220\u6389\uff0c\u5e76\u51b3\u5b9a\u662f\u5c06\u6743\u7ed9\u4e88 $u$ \u8fd8\u662f $v$\uff1b\u5e76\u4e14\u4e00\u4e2a\u7ed3\u70b9\u5fc5\u987b\u88ab\u7ed9\u4e88\u4e00\u6b21\u4e14\u4ec5\u4e00\u6b21\u6743\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u6211\u4eec\u5220\u6389\u4e00\u6761\u8fb9\u540e\uff0c\u8be5\u8fb9\u6240\u5728\u7684\u8054\u901a\u5757\u7684\u6240\u6709\u70b9\u7684\u6743\u90fd\u80fd\u88ab\u63a8\u65ad\u51fa\u6765\n\n\u89c2\u5bdf\u6700\u540e\u5f62\u6210\u7684\u56fe\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u82e5\u5355\u4e2a\u8054\u901a\u5757\u4e2d\u6709\u8d85\u8fc7\u4e00\u4e2a\u7684\u73af\uff0c\u90a3\u4e48\u4e8b\u5b9e\u4e0a\u662f\u627e\u4e0d\u5230\u65b9\u6848\u6ee1\u8db3\u6bcf\u4e2a\u4eba\u7684\u8981\u6c42\u7684\uff1b\u56e0\u4e3a\u65e0\u8bba\u6211\u4eec\u5220\u54ea\u6761\u8fb9\uff0c\u6700\u540e\u7684\u63a8\u65ad\u5173\u7cfb\u90fd\u5b58\u5728\u73af\u3002\u6b64\u5916\uff0c\u5982\u679c\u56fe\u4e2d\u5b58\u5728\u6811\u7684\u8fde\u901a\u5757\uff0c\u4e0d\u96be\u53d1\u73b0\u8fd9\u4e00\u5b9a\u4f1a\u5bfc\u81f4\u5176\u5b83\u8054\u901a\u5757\u5b58\u5728\u8d85\u8fc7\u4e00\u4e2a\u7684\u73af\u3002\u4e8e\u662f\u6700\u540e\uff0c\u5f53\u4e14\u4ec5\u5f53\u56fe\u4e3a\u57fa\u73af\u6811\u68ee\u6797\u65f6\u624d\u80fd\u6ee1\u8db3\u6bcf\u4e2a\u4eba\u7684\u8981\u6c42\n\n\u8003\u8651\u4e00\u9897\u57fa\u73af\u6811\u7684\u6743\u786e\u5b9a\u60c5\u51b5\u3002\u9996\u5148\u6211\u4eec\u53ea\u80fd\u9009\u62e9\u73af\u4e0a\u7684\u8fb9\uff08\u4e0d\u7136\u65e0\u6cd5\u63a8\u65ad\u51fa\u5408\u6cd5\u7684\u65b9\u6848\uff09\uff1b\u63a5\u7740\u80fd\u53d1\u73b0\u57fa\u73af\u6811\u4e0a\u6700\u7ec8\u7684\u65b9\u6848\u5b9e\u9645\u4e0a\u53ea\u6709\u4e24\u79cd\uff0c\u5373\u6cbf\u7740\u73af\u987a\u65f6\u9488\u5206\u914d\u6743\u6216\u9006\u65f6\u9488\u5206\u914d\u6743\uff08\u81f3\u4e8e\u4e0d\u5c5e\u4e8e\u73af\u7684 \u201c\u6811\u8fb9\u201d \u7684\u6743\u7684\u5206\u914d\u65b9\u5411\u5219\u662f\u786e\u5b9a\u7684\uff09\n\n\u4e8e\u662f\u9898\u76ee\u5c31\u88ab\u8f6c\u5316\u4e3a\uff1a\u7ed9\u5b9a $C$ \u4e2a\u7269\u54c1\uff08\u5176\u4e2d $C$ \u5b9e\u9645\u4e0a\u5c31\u662f\u56fe\u7684\u8fde\u901a\u5757\u4e2a\u6570\uff1b\u5373\u57fa\u73af\u6811\u4e2a\u6570\uff09\uff0c\u8981\u4e3a\u6bcf\u4e2a\u7269\u54c1\u4ece\u4e24\u4e2a\u6743\u503c\u4e2d\u9009\u62e9\u4e00\u4e2a\uff0c\u8981\u6c42\u4f7f\u5f97\u6700\u7ec8\u6743\u7684\u548c\u7684\u7edd\u5bf9\u503c\u5c0f\u4e8e\u7b49\u4e8e $k$\n\n\u4e8b\u5b9e\u4e0a\u53ef\u4ee5\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u5148\u9ed8\u8ba4\u9009\u62e9\u4e00\u4e2a\u6743\uff0c\u7136\u540e\u5c06\u5176\u6743\u91cd\u65b0\u8bbe\u4e3a\u539f\u5148\u4e24\u4e2a\u6743\u7684\u5dee\uff0c\u8fd9\u6837\u6700\u7ec8\u9898\u76ee\u5c31\u88ab\u8f6c\u5316\u4e3a\u4e86\u80cc\u5305\u95ee\u9898\n\n\u76f4\u63a5\u6734\u7d20\u5730 01 \u80cc\u5305\u7684\u8bdd\uff0c\u590d\u6742\u5ea6\u662f $\\Theta(C\\sum s_i)$\uff0c\u5373 $\\Theta(n^2a)$\uff08\u5176\u4e2d $a$ \u5373\u503c\u57df\uff0c\u8fd9\u91cc\u6700\u5927\u662f $40$\uff09\u7684\u3002\u5373\u4f7f\u7528 bitset \u4f18\u5316\u4e5f\u96be\u4ee5\u627f\u53d7\n\n\u4f46\u53ef\u4ee5\u53d1\u73b0\uff0c\u4e0d\u540c\u7684\u6743\u503c\u6570\u4e8b\u5b9e\u4e0a\u6700\u5927\u662f $\\sqrt {\\sum s_i}$ \u7ea7\u522b\u7684\uff08\u53ea\u9700\u8003\u8651\u5bf9\u4e8e\u6743\u503c $w$\uff0c\u81f3\u5c11\u9700\u8981 $\\frac w a$ \u4e2a\u5143\u7d20\u76f8\u52a0\uff09\u3002\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u4e0d\u540c\u7684\u6743\u503c\u505a\u591a\u91cd\u80cc\u5305\uff08\u5355\u8c03\u961f\u5217\u4f18\u5316\uff09\uff0c\u590d\u6742\u5ea6\u4e3a $O((\\sum s_i)^{\\frac 3 2})$\uff0c\u5373 $O((na)^{\\frac 3 2})$\n\n\u4f46\u8fd9\u6837\u6ca1\u6cd5\u7528 bitset\uff1b\u4e8e\u662f\u53ef\u4ee5\u60f3\u5230\u7528\u4e8c\u8fdb\u5236\u5206\u7ec4\u505a\u591a\u91cd\u80cc\u5305\uff0c\u8fd9\u6837\u6700\u540e\u7684\u590d\u6742\u5ea6\u5c31\u4e3a $O(\\frac {(\\sum s_i)^{\\frac 3 2})\\log_2 {\\sqrt {\\sum s_i}}} w)$\uff0c\u5373 $O(\\frac {((na)^{\\frac 3 2})\\log {\\sqrt {na}}} w)$\n\n## CODE\n\n\u5199\u5f97\u6bd4\u8f83\u6025\uff0c\u8bb2\u4e0d\u592a\u6e05\u695a\u7684\u5730\u65b9\u53ef\u4ee5\u53c2\u8003\u4ee3\u7801qaq\n\n```cpp\n#include <cstdio>\n#include <vector>\n#include <bitset>\n#include <map>\nusing std::vector;\nusing std::bitset;\nusing std::pair;\nusing std::map;\ntypedef pair<int, int> pad;\n\nconst int MAXN =3e4+20, MAXV =20;\n\n/*------------------------------IO------------------------------*/\n\nint read(){\n\tint x =0; char c =getchar(); bool f =0;\n\twhile(c < '0' || c > '9') (c == '-') ? f =1, c =getchar() : c =getchar();\n\twhile(c >= '0' && c <= '9') x =(x<<1)+(x<<3)+(c^48), c =getchar();\n\treturn (f) ? -x : x;\n}\n\nvoid write(const int &x){\n\tif(x < 0){\n\t\tputchar('-');\n\t\twrite(-x);\n\t}\n\telse{\n\t\tif(x/10)\n\t\t\twrite(x/10);\n\t\tputchar('0'+x%10);\n\t}\n}\n\n/*------------------------------Map------------------------------*/\n\nint first[MAXN<<1], tote;\nstruct edge{\n\tint to, nxt, w;\n}e[MAXN<<2];\n\ninline void addedge(const int &u, const int &v, const int &w){\n\t++tote;\n\te[tote].to =v, e[tote].nxt =first[u], first[u] =tote;\n\te[tote].w =w;\n\t++tote;\n\te[tote].to =u, e[tote].nxt =first[v], first[v] =tote;\n\te[tote].w =w;\n}\n\n/*------------------------------Dfs------------------------------*/\n\nnamespace Check_Illegal{\n\tbool vis[MAXN<<1];\n\t\n\tpad dfs(const int &u){\n\t\tvis[u] =1;\n\t\tpad ret(1, 0);\n\t\tfor(int l =first[u]; l; l =e[l].nxt){\n\t\t\tif(!vis[e[l].to]){\n\t\t\t\tpad tmp =dfs(e[l].to);\n\t\t\t\tret.first +=tmp.first, ret.second +=tmp.second;\n\t\t\t}\n\t\t\t++ret.second;\n\t\t}\n\t\treturn ret;\n\t}\n}\n\nnamespace Find_Circle{\n\tbool vis[MAXN<<1];\n\t\n\tint stk_id[MAXN<<1], stk_val[MAXN<<1], top;\n\tvector<int> Circle;\n\tint sum_circle[2];\n\t\n\tvoid init(){\n\t\tCircle.reserve(MAXN<<1);\n\t\t\n\t\ttop =0;\n\t\tCircle.clear();\n\t\tsum_circle[0] =sum_circle[1] =0;\n\t}\n\t\n\tvoid dfs(const int &u, const int &eid_from =0){\n\t\tstk_id[top] =u, stk_val[top] =(eid_from == 0) ? 0 : e[eid_from].w, ++top;\n\t\tvis[u] =1;\n\t\tfor(int l =first[u]; l; l =e[l].nxt){\n\t\t\tif(!vis[e[l].to])\n\t\t\t\tdfs(e[l].to, ((l-1)^1)+1);\n\t\t\telse if(l != eid_from && Circle.empty()){\n\t\t\t\tint pos =top, cur =1;\n\t\t\t\t/* \u73af\u5e94\u5f53\u5b58\u5728 */\n\t\t\t\twhile(stk_id[pos-1] != e[l].to){\n\t\t\t\t\tCircle.push_back(stk_id[pos-1]);\n\t\t\t\t\tsum_circle[cur ^=1] +=stk_val[pos-1];\n\t\t\t\t\t--pos;\n\t\t\t\t}\n\t\t\t\tCircle.push_back(e[l].to);\n\t\t\t\tsum_circle[cur ^=1] +=e[l].w;\n\t\t\t}\n\t\t}\n\t\t--top;\n\t}\n}\nusing Find_Circle::Circle;\nusing Find_Circle::sum_circle;\n\nnamespace QAQ{\n\tbool vis[MAXN<<1];\n\t\n\tint sum[2];\n\t\n\tvoid init(){\n\t\tsum[0] =sum[1] =0;\n\t}\n\t\n\tvoid dfs(const int &u, const int &N, const int &eid_from_twin =0){\n\t\tvis[u] =1;\n\t\tif(eid_from_twin)\n\t\t\tsum[(u > N)] +=e[eid_from_twin].w;\n\t\tfor(int l =first[u]; l; l =e[l].nxt)\n\t\t\tif(!vis[e[l].to])\n\t\t\t\tdfs(e[l].to, N, l);\n\t}\n}\nusing QAQ::sum;\n\n/*------------------------------Main------------------------------*/\n\nint main(){\n\tint n =read(), k =read();\n\tfor(int i =0; i < 2*n; ++i){\n\t\tint l =read(), r =read(), s =read();\n\t\taddedge(l, n+r, s);\n\t}\n\t// init done. //\n\t\n\tmap<int, int> Map;\n\tint Sum =0;\n\tfor(int i =1; i <= 2*n; ++i)\n\t\tif(!QAQ::vis[i]){\n\t\t\tpad tmp =Check_Illegal::dfs(i);\n\t\t\t/* \u5b58\u5728\u975e\u57fa\u73af\u6811\u8fde\u901a\u5757 */\n\t\t\tif(tmp.first != tmp.second/2){\n\t\t\t\tputs(\"NO\");\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t\n\t\t\tFind_Circle::init();\n\t\t\tFind_Circle::dfs(i);\n\t\t\t\n\t\t\tQAQ::init();\n\t\t\tfor(int ii =0; ii < (int)Circle.size(); ++ii)\n\t\t\t\tQAQ::vis[Circle[ii]] =1;\n\t\t\tfor(int ii =0; ii < (int)Circle.size(); ++ii)\n\t\t\t\tQAQ::dfs(Circle[ii], n);\n\t\t\t\n\t\t\tSum +=sum[0]-sum[1]+(sum_circle[1]-sum_circle[0]);\n\t\t\t/* \u73af\u4e0a\u53ef\u4ee5\u6709\u4e24\u4e2a\u65b9\u5411\u786e\u5b9a\u6743\u503c */\n\t\t\tint new_elm =\n\t\t\t\t(sum[0]-sum[1]+(sum_circle[0]-sum_circle[1]))\n\t\t\t\t-\n\t\t\t\t(sum[0]-sum[1]+(sum_circle[1]-sum_circle[0]))\n\t\t\t;\n\t\t\tif(Map.count(new_elm))\n\t\t\t\t++Map.find(new_elm)->second;\n\t\t\telse\n\t\t\t\tMap.insert(pad(new_elm, 1));\n\t\t}\n\t\n\tbitset<MAXN*MAXV*2+1> dp;\n\tconst int DELTA =MAXN*MAXV;\n\tdp[Sum+DELTA] =1;\n\tauto Dp =[&](const int &val){\n\t\tif(val >= 0)\n\t\t\tdp |=dp<<val;\n\t\telse\n\t\t\tdp |=dp>>(-val);\n\t};\n\tfor(pad elm:Map){\n\t\t/* \u8fd9\u91cc\u80fd\u4fdd\u8bc1 elm.second >= 0 */\n\t\tint p =1;\n\t\tfor(int i =0; i < 21 && ((p<<1)-1) <= elm.second; ++i, p <<=1)\n\t\t\tDp(elm.first*p);\n\t\tp >>=1;\n\t\tDp(elm.first*(elm.second-((p<<1)-1)));\n\t}\n\t\n\tbool OK =0;\n\tfor(int i =-k; i <= k; ++i)\n\t\tif(dp[DELTA+i]){\n\t\t\tOK =1;\n\t\t\tbreak;\n\t\t}\n\tif(OK)\n\t\tputchar('Y'), putchar('E'), putchar('S');\n\telse\n\t\tputchar('N'), putchar('O');\n}\n```",
        "postTime": 1607061277,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 P4733 \u3010[BalticOI 2015]Tug of War\u3011"
    },
    {
        "content": "\u5982\u679c\u5c06\u6bcf\u4e2a\u4eba\u770b\u4f5c\u8fb9\uff0c\u8fb9\u6743\u8bbe\u4e3a\u529b\u91cf\u503c\uff1b\n\n\u5c06\u5de6\u53f3\u7684\u4f4d\u7f6e\u770b\u4f5c\u70b9\uff0c\u90a3\u4e48\u6211\u4eec\u5c06\u6bcf\u4e2a\u4eba\u5bf9\u5e94\u7684\u4e24\u4e2a\u4f4d\u7f6e\u8fde\u63a5\u8d77\u6765\uff0c\u5c31\u80fd\u5f97\u5230\u4e00\u4e2a\u4e8c\u5206\u56fe\n\n\u73b0\u5728\u6211\u4eec\u8981\u505a\u7684\u5c31\u662f\u5c06\u8fb9\u4e0a\u7684\u6743\u503c\u5206\u914d\u7ed9\u5de6\u53f3\u90e8\uff0c\u4f7f\u5f97\u5de6\u53f3\u90e8\u6743\u503c\u4e4b\u548c\u76f8\u5dee\u4e0d\u8d85\u8fc7 $K$\n\n\u5224\u65ad\u662f\u5426\u5b58\u5728\u4e00\u79cd\u5206\u914d\u65b9\u6848\n\n\u5047\u8bbe\u5206\u914d\u7ed9\u5de6\u90e8\u9020\u6210\u7684\u8d21\u732e\u4e3a\u6b63\uff0c\u53f3\u90e8\u4e3a\u8d1f\uff0c\u6b64\u65f6\u53ea\u9700\u6240\u6709\u8d21\u732e\u4e4b\u548c\u7684\u7edd\u5bf9\u503c\u4e0d\u8d85\u8fc7 $K$\n\n\u9996\u5148\uff0c\u8fd9\u5f20\u4e8c\u5206\u56fe\u4e00\u5171\u6709 $2n$ \u4e2a\u70b9\uff0c$2n$ \u6761\u8fb9\uff0c\u56e0\u6b64\uff0c\u8fd9\u5f20\u4e8c\u5206\u56fe\u5176\u5b9e\u662f\u4e2a\u57fa\u73af\u6811\u68ee\u6797\uff0c\u8bbe\u5171\u6709 $cnt$ \u68f5\u57fa\u73af\u6811\uff0c$cnt \\le n$\n\n\u5bf9\u4e8e\u68ee\u6797\u4e2d\u6bcf\u68f5\u6811\uff0c\u53bb\u73af\u90e8\u5206\u7684\u5206\u914d\u662f\u5df2\u7ecf\u786e\u5b9a\u7684\u4e86\uff0c\u5373\u53ea\u80fd\u5c06\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u5206\u914d\u7ed9\u513f\u5b50\uff08\u4ee5\u73af\u4e3a\u6839\uff09\n\n\u800c\u5bf9\u4e8e\u73af\uff0c\u6211\u4eec\u53ea\u80fd\u6309\u987a\u65f6\u9488\u6216\u9006\u65f6\u9488\u8fdb\u884c\u5206\u914d\uff0c\u5e76\u4e14\u8fd9\u4e24\u79cd\u4e0d\u540c\u7684\u5206\u914d\u65b9\u6848\u5e26\u6765\u7684\u603b\u8d21\u732e\u4e92\u4e3a\u76f8\u53cd\u6570\n\n\u5982\u679c\u8bbe\u7b2c $i$ \u4e2a\u73af\uff0c\u6309\u987a\u65f6\u9488\u5206\u914d\u7684\u603b\u6743\u503c\u4e3a $a_i$\uff0c\u90a3\u4e48\u6309\u9006\u65f6\u9488\u5206\u914d\u7684\u65b9\u6848\u4e3a $-a_i$\n\n\u800c\u5bf9\u4e8e $cnt$ \u4e2a\u73af\uff0c\u5148\u5047\u8bbe\u5168\u90e8\u90fd\u6309\u4e00\u4e2a\u65b9\u5411\u5206\u914d\uff0c\u6b64\u65f6\u7b54\u6848\u4e3a $ans$\n\n\u5982\u679c\u5df2\u6ee1\u8db3 $|ans| \\le K$\uff0c\u5219\u73b0\u5728\u5df2\u7ecf\u53ef\u4ee5\u76f4\u63a5\u8f93\u51fa $\\text{YES}$ \u4e86\n\n\u5426\u5219\uff0c\u6211\u4eec\u9700\u8981\u5c06\u67d0\u4e9b\u73af\u8c03\u8f6c\u65b9\u5411\uff0c\u663e\u7136\u8c03\u8f6c\u7b2c $i$ \u4e2a\u73af\u5bf9 $ans$ \u9020\u6210\u7684\u8d21\u732e\u4e3a $-2a_i$\n\n\u4e8e\u662f\u73b0\u5728\u7684\u95ee\u9898\u4fbf\u8f6c\u5316\u4e3a\uff1a\n\n\u6709 $cnt$ \u4e2a\u7269\u54c1\uff0c\u7b2c $i$ \u4e2a\u7269\u54c1\u7684\u4ef7\u503c\u4e3a $-2a_i$\uff0c\u5f53\u524d\u6709\u7684\u4ef7\u503c\u4e3a $ans$\uff0c\u4f60\u9700\u8981\u9009\u62e9\u4e00\u4e9b\u7269\u54c1\uff0c\u4f7f\u5f97\u6700\u540e\u7684\u603b\u4ef7\u503c $\\le K$ \n\n\u76f4\u63a5 `bitset` \u4f18\u5316\u505a 01 \u80cc\u5305\u5bf9\u5427\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(\\frac{2cnt\\sum a_i}w)$\n\n\u800c $\\sum a_i \\le 2n \\times 20, cnt \\le n$\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\frac {80n^2}{w})$\n\n\u8fd9\u4e48\u591a $a_i$\uff0c\u5e94\u8be5\u4f1a\u6709\u4e00\u4e9b\u503c\u76f8\u540c\u5427\uff0c\u800c\u5bf9\u4e8e\u8fd9\u4e9b\u503c\u76f8\u540c\u7684\uff0c\u53ef\u4ee5\u5f53\u6210\u591a\u91cd\u80cc\u5305\u505a\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u4e8c\u8fdb\u5236\u4f18\u5316\u4e86\u5462\uff01 /hanx\n\n\u4f46\u4e07\u4e00\u51fa\u9898\u4eba\u9020\u7684\u6570\u636e\u5404\u4e2a $a_i$ \u4e92\u4e0d\u76f8\u540c\u5462\uff1f\u8fd9\u4e0d\u5c31\u5361\u6389\u4e86\u5417?\n\n\u90a3\u4e48\u51fa\u9898\u4eba\u6700\u574f\u4f1a\u5c06 $a$ \u6784\u9020\u4e3a\u4e00\u4e2a\u4ee5 $1$ \u4e3a\u9996\u9879\uff0c\u516c\u5dee\u4e3a $1$ \u7684\u7b49\u5dee\u6570\u5217\uff08\u8fd9\u6837\u9879\u6570 $cnt$ \u6700\u591a\uff09\n\n\u800c\u6b64\u65f6 $\\sum a_i = \\frac {(1 + cnt)cnt}{2} \\le 2n \\times 20$\uff0c\u89e3\u5f97 $cnt^2 + cnt \\le 80n$\n\n\u51fa\u9898\u4eba\u518d\u6bd2\u7624\u4e00\u70b9\uff0c$cnt$ \u53d6\u5230\u4e0a\u9650 $n$\uff08\u5373\u5168\u662f\u4e8c\u5143\u73af\u7684\u60c5\u51b5\uff09\uff0c\u5219\u89e3\u5f97 $cnt = n \\le 79$\uff0c\u6240\u4ee5\u6700\u591a\u53ea\u4f1a\u6709 $79$ \u79cd\u4e0d\u540c\u7684 $a_i$\n\n\u6240\u4ee5\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u7528\u4e8c\u8fdb\u5236\u4f18\u5316\u4e86\uff01\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u4e3a $O(\\frac {79 \\times 6.3 \\times 2 \\sum \\log{a_i}}{w})$\uff0c($\\log 79 \\approx 6.3$)\n\n\u7136\u800c\u5e76 $a_i \\le 2n \\times 20,n \\le 3e4$\uff0c\u4e8e\u662f\u4e4e $a_i \\le 1.2e6, \\log a_i \\le 20.2$\n\n\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u4e3a $O(\\frac {79 \\times 6.3 \\times 2 \\times 79 \\times 6.3 \\times 20.2} {w})$\uff0c\u5373 $O(\\frac {10007294}w)$\uff0c\u663e\u7136\u53ef\u8fc7 /hanx\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define re register\n// #define int long long\n// #define pair pair<int, int>\n// #define File(a) freopen(a\".in\", \"r\", stdin), freopen(a\".out\", \"w\", stdout);\n#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread (buf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\ninline int read()\n{\n    re int x = 0, f = 0;\n    re char c = getchar();\n    while (!isdigit(c)) {if (c == '-') f = 1;c = getchar();}\n    while (isdigit(c)) {x = (x << 3) + (x << 1) + c - 48;c = getchar();}\n    return f ? -x : x;\n}\ninline string getstr()\n{\n    string res = \"\";\n    re char ch = getchar();\n    while (isspace(ch)) ch = getchar();\n    while (!isspace(ch)) res.push_back(ch), ch = getchar();\n    return res;\n}\nconst int N = 6e4 + 5, inf = 0x7fffffff, P = 998244353;\nint n, nn, K, ans;\nint first[N], nex[N << 1], to[N << 1], w[N << 1], num = 1;\ninline void Add(int u, int v, int val)\n{\n    nex[++num] = first[u];\n    first[u] = num;\n    to[num] = v;\n    w[num] = val;\n}\nint deg[N];\nqueue<int> q;\ninline void update(int u)\n{\n    for (re int i = first[u]; i; i = nex[i])\n    {\n        int v = to[i];\n        if (deg[v] == 1) continue;\n        ans += (u > n ? -1 : 1) * w[i];\n        if (--deg[v] == 1) q.push(v);\n    }\n}\nint a[N], cnt;\nbool vis[N];\ninline void dfs(int u, int ban, int rt)\n{\n    vis[u] = 1;\n    for (re int i = first[u]; i; i = nex[i])\n    {\n        int v = to[i];\n        if (i == ban) continue;\n        if (v == rt)\n        {\n            ans += (u > n ? -1 : 1) * w[i];\n            a[cnt] += (u > n ? -1 : 1) * w[i];\n            return;\n        }\n        if (vis[v]) continue;\n        ans += (u > n ? -1 : 1) * w[i];\n        a[cnt] += (u > n ? -1 : 1) * w[i];\n        return dfs(v, i ^ 1, rt);\n    }\n}\nint b[500], t[N * 22]; // 79 * log(79) < 500\nbitset<N * 29> f; // \u8fd9\u91cc\u5e94\u672c\u6765\u5f00 N * 40 \u7684\uff08\u56e0\u4e3a\u6709\u8d1f\u6570\uff09\uff0c\u4f46\u770b\u6570\u636e\u4eff\u4f5b N * 29 \u8db3\u77e3\nsigned main()\n{\n    n = read(), K = read(); nn = n << 1;\n    for (re int i = 1; i <= nn; ++i)\n    {\n        int u = read(), v = read(), val = read();\n        ++deg[u], ++deg[v + n];\n        Add(u, v + n, val), Add(v + n, u, val);\n    }\n    for (re int i = 1; i <= nn; ++i)\n    {\n        if (deg[i] == 1) q.push(i);\n        else if (!deg[i]) return puts(\"NO\"), 0;\n    }\n    while (!q.empty())\n    {\n        int u = q.front(); q.pop();\n        vis[u] = 1, update(u);\n    }\n    const int base = nn * 20;\n    for (re int i = 1; i <= nn; ++i)\n    {\n        if (vis[i]) continue;\n        ++cnt;\n        dfs(i, 0, i);\n        a[cnt] = -a[cnt], a[cnt] <<= 1;\n        ++t[a[cnt] + base];\n    }\n    sort(a + 1, a + cnt + 1);\n    cnt = unique(a + 1, a + cnt + 1) - a - 1;\n    int tot = 0;\n    for (re int i = 1; i <= cnt; ++i)\n    {\n        int now = 1;\n        while (t[a[i] + base] >= now) b[++tot] = a[i] * now, t[a[i] + base] -= now, now <<= 1;\n        if (t[a[i] + base]) b[++tot] = a[i] * t[a[i] + base];\n    }\n    f.set(ans + base);\n    for (re int i = 1; i <= tot; ++i)\n        if (b[i] > 0) f |= f << b[i];\n        else f |= f >> (-b[i]);\n    for (re int i = -K + base, up = K + base; i <= up; ++i)\n        if (f[i]) return puts(\"YES\"), 0;\n    puts(\"NO\");\n    return 0;\n}\n```",
        "postTime": 1649417139,
        "uid": 205541,
        "name": "Aftglw",
        "ccfLevel": 0,
        "title": "[BalticOI 2015]Tug of War \u9898\u89e3"
    }
]