[
    {
        "content": "## \u601d\u8def\u6982\u8ff0\n\u8003\u8651\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u663e\u7136\uff0c\u82e5\u65b0\u52a0\u7684\u8fb9\u4e00\u5b9a\u5728\u65b0\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u90a3\u628a\u8fd9\u6761\u8fb9\u4e00\u5b9a\u66ff\u6362\u6389\u4e86\u539f\u56fe\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7684\u4e00\u6761\u8fb9\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u5224\u65ad\u65b0\u52a0\u7684\u8fb9\u662f\u5426\u4e00\u5b9a\u4f1a\u5728\u65b0\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u53ea\u9700\u8981\u5224\u65ad\uff0c\u539f\u56fe\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u65b0\u52a0\u7684\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\u4e4b\u95f4\u8def\u5f84\u7684\u8fb9\u6743\u6700\u5927\u503c\u662f\u5426\u5927\u4e8e\u8fd9\u6761\u65b0\u52a0\u7684\u8fb9\u7684\u8fb9\u6743\uff0c\u82e5\u5927\u4e8e\u5219\u4e00\u5b9a\u53ef\u4ee5\u52a0\u8fdb\u53bb\uff0c\u5426\u5219\u4e0d\u4e00\u5b9a\u3002\n\n## \u89e3\u6cd5\u5b9e\u73b0\n1. \u5bf9\u539f\u56fe\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5e76\u5efa\u65b0\u56fe\u3002\n\n2. \u5bf9\u4e8e\u65b0\u52a0\u7684\u8fb9\uff0c\u5728\u521a\u521a\u5efa\u7acb\u7684\u65b0\u56fe\u4e0a\u6c42\u4e24\u7aef\u70b9\u4e4b\u524d\u8def\u5f84\u8fb9\u6743\u6700\u5927\u503c\uff08\u8003\u8651 \u6700\u8fd1\u516c\u5171\u7956\u5148\u6216\u6811\u5256\uff09\uff0c\u6309\u7167\u4e0a\u9762\u7684\u60f3\u6cd5\u5224\u65ad\u5373\u53ef\u3002\n\n## code\n\u4ee3\u7801\u8f83\u4e11\u4e0d\u559c\u52ff\u55b7\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\n#define int long long\nconst int N=2e5+10,M=N*2;\n\nint n,m,q;\nstruct edge{\n\tint u,v,w;\n\tbool operator<(const edge &x)\tconst\n\t{\n\t\treturn w<x.w;\n\t}\n}ed[N];\nint fa[N];\nint h[N],e[M],ne[M],w[M],tot;\nint f[N][22],g[N][22],dep[N];\n\nint find(int x)\n{\n\tif(fa[x]==x)\treturn x;\n\treturn fa[x]=find(fa[x]);\n}\nvoid add(int a,int b,int c)\n{\n\te[++tot]=b;w[tot]=c;ne[tot]=h[a];h[a]=tot;\n}\nvoid dfs(int x,int FA)\n{\n\tdep[x]=dep[FA]+1;\n\tf[x][0]=FA;\n\tfor(int i=1;i<=20;i++)\n\t{\n\t\tf[x][i]=f[f[x][i-1]][i-1];\n\t\tg[x][i]=max(g[x][i-1],g[f[x][i-1]][i-1]);\n\t}\n\tfor(int i=h[x];i;i=ne[i])\n\t{\n\t\tint j=e[i];\n\t\tif(j==FA)\tcontinue;\n\t\tg[j][0]=w[i];\n\t\tdfs(j,x);\n\t}\n}\nint get_lca(int a,int b)\n{\n\tif(dep[a]<dep[b])\tswap(a,b);\n\tint ans=0;\n\tfor(int i=20;i>=0;i--)\n\t\tif(dep[f[a][i]]>=dep[b])\n\t\t{\n\t\t\tans=max(ans,g[a][i]);\n\t\t\ta=f[a][i];\n\t\t}\n\tif(a==b)\treturn ans;\n\tfor(int i=20;i>=0;i--)\n\t\tif(f[a][i]!=f[b][i])\n\t\t{\n\t\t\tans=max(ans,max(g[a][i],g[b][i]));\n\t\t\ta=f[a][i];b=f[b][i];\n\t\t}\n\treturn max(ans,max(g[a][0],g[b][0]));\n}\n\nsigned main()\n{\n\tscanf(\"%lld%lld%lld\",&n,&m,&q);\n\tfor(int i=1;i<=m;i++)\n\t\tscanf(\"%lld%lld%lld\",&ed[i].u,&ed[i].v,&ed[i].w);\n\tsort(ed+1,ed+1+m);\n\tfor(int i=1;i<=n;i++)\tfa[i]=i;\n\tfor(int i=1;i<=m;i++)\n\t{\n\t\tint a=find(ed[i].u),b=find(ed[i].v);\n\t\tif(a==b)\tcontinue;\n\t\tfa[a]=b;\n\t\tadd(ed[i].u,ed[i].v,ed[i].w);\n\t\tadd(ed[i].v,ed[i].u,ed[i].w);\n\t}\n\t\n\tdfs(1,0);\n\t\n\tfor(int i=1;i<=q;i++)\n\t{\n\t\tint a,b,c;\n\t\tscanf(\"%lld%lld%lld\",&a,&b,&c);\n\t\tint lca=get_lca(a,b);\n\t\tif(lca>c)\tprintf(\"Yes\\n\");\n\t\telse printf(\"No\\n\");\n\t}\n\treturn 0;\n}",
        "postTime": 1667878422,
        "uid": 672776,
        "name": "XTianShuo",
        "ccfLevel": 4,
        "title": "[ABC235E] MST + 1 \u9898\u89e3"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/AT_abc235_e)\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u7b2c $i$ \u6761\u8fb9\u8fde\u63a5 $x_i$ \u548c $y_i$\uff0c\u8fb9\u6743\u4e3a $c_i$\u3002\n\n\u6709 $Q$ \u7ec4\u8be2\u95ee\uff0c\u6bcf\u7ec4\u8be2\u95ee\u7ed9\u5b9a\u4e09\u4e2a\u6570 $u_i$\u3001$v_i$ \u548c $w_i$\uff0c\u4ee4 $e_i$ \u4e3a\u4e00\u6761\u8fde\u63a5 $u_i$ \u548c $v_i$ \u7684\u65e0\u5411\u8fb9\uff0c\u8fb9\u6743\u4e3a $w_i$\u3002\n\n\u5bf9\u4e8e\u6bcf\u7ec4\u8be2\u95ee\uff0c\u8bf7\u4f60\u5224\u65ad\uff1a\u5bf9\u4e8e\u52a0\u5165\u8fd9\u6761\u8fb9\u540e\u7684\u56fe\uff0c\u95ee\u5176\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u662f\u5426\u5305\u542b\u4e86\u8fd9\u6761\u8fb9\uff0c\u5982\u679c\u662f\uff0c\u8f93\u51fa`Yes`\uff0c\u5426\u5219\u8f93\u51fa`No`\u3002\n\n\u4fdd\u8bc1\u9898\u76ee\u7ed9\u5b9a\u7684\u539f\u56fe\u8fb9\u6743\u4e24\u4e24\u4e0d\u540c\uff0c\u4fdd\u8bc1\u52a0\u5165\u7684\u8fb9\u7684\u8fb9\u6743\u4e0e\u539f\u56fe\u4e2d\u7684\u4efb\u610f\u4e00\u6761\u8fb9\u90fd\u4e0d\u76f8\u540c\u3002\n\n**\u6bcf\u7ec4\u8be2\u95ee\u662f\u72ec\u7acb\u7684\uff0c\u4e92\u76f8\u4e0d\u4ea7\u751f\u5f71\u54cd\u3002**\n\n## \u601d\u8def\n\n\u4f7f\u7528**\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u3002**\n\n\u9996\u5148\u8fd9\u9898\u6570\u636e\u8303\u56f4\u4e0d\u5c0f\uff0c\u76f4\u63a5\u6a21\u62df\u662f\u80af\u5b9a\u4e0d\u884c\u7684\u3002\n\n\u6211\u4eec\u77e5\u9053\uff0c\u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\u662f\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u7136\u540e\u7528\u5e76\u67e5\u96c6\u5224\u65ad\u8fd9\u6761\u8fb9\u662f\u5426\u6709\u5fc5\u8981\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\uff0c\u800c\u6bcf\u6761\u8fb9\u80fd\u5426\u52a0\u5165\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u53d6\u51b3\u4e8e**\u90a3\u4e9b\u8fb9\u6743\u6bd4\u8fd9\u6761\u8fb9\u5c0f\u7684\u8fb9**\u3002\n\n\u540c\u7406\uff0c\u6bcf\u7ec4\u8be2\u95ee\u4e2d\u7ed9\u51fa\u7684\u8fb9\uff0c\u53ea\u53d6\u51b3\u4e8e\u90a3\u4e9b\u539f\u56fe\u4e2d\u7684\u8fb9\u6743\u6bd4\u5176\u5c0f\u7684\u8fb9\u3002\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u63a8\u51fa\u4e00\u79cd\u505a\u6cd5\uff1a\n\n- \u9996\u5148\u5c06\u6bcf\u4e2a\u8be2\u95ee\u7ed9\u51fa\u7684\u8fb9\u548c\u539f\u56fe\u4e2d\u7684\u8fb9\u5171\u540c\u8bb0\u5f55\u4e0b\u6765\u3002\n- \u7ed9\u6240\u6709\u8fb9\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n- \u5c31\u50cf\u666e\u901a\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e00\u6837\u5904\u7406\uff0c\u53ea\u662f\u90a3\u4e9b\u8be2\u95ee\u4e2d\u7684\u8fb9\u53ea\u9700\u8981\u5224\u65ad\u3001**\u4e0d\u9700\u8981\u52a0\u5165\u56fe\u4e2d**\u3002\n\n\u6700\u540e\u8f93\u51fa\u5373\u53ef\u3002\n\n[\u6211\u7684\u505a\u6cd5\u662f\u79bb\u7ebf\u505a\u6cd5\uff0c\u5728\u7ebf\u505a\u6cd5\u5df2\u7ecf\u6709\u4eba\u8bb2\u8fc7\u4e86\uff0c\u8be6\u89c1\u8fd9\u7bc7\u3002](https://www.luogu.com.cn/blog/XTianShuo/solution-at-abc235-e)\n\n## Code\n\n```cpp\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int M = 4e5 + 10; // \u8bb0\u5f97\u5f00\u4e24\u500d\u7a7a\u95f4\n\nstruct Node {\n  int x, y, z, f; // \u8bb0\u5f55\u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u7b49\uff0cf \u7528\u6765\u8bb0\u5f55\u662f\u7b2c\u51e0\u6b21\u8be2\u95ee\u7684\u8fb9\n  bool operator < (const Node &i) const {\n    return z < i.z;\n  }\n} a[M];\n\nint n, m, q, ans[M], f[M];\n\nint Find (int x) {\n  return (f[x] ? f[x] = Find(f[x]) : x);\n}\n\nint main(){\n  ios::sync_with_stdio(0), cin.tie(0);\n  cin >> n >> m >> q;\n  for (int i = 1; i <= m; i++) {\n    cin >> a[i].x >> a[i].y >> a[i].z;\n  }\n  for (int i = 1; i <= q; i++) {\n    cin >> a[i + m].x >> a[i + m].y >> a[i + m].z; // \u5c06\u6240\u6709\u8fb9\u8bb0\u5f55\u5728\u4e00\u8d77\n    a[i + m].f = i; // \u8bb0\u5f55\u662f\u7b2c\u51e0\u6b21\u8be2\u95ee\n  }\n  sort(a + 1, a + m + q + 1);\n  for (int i = 1; i <= m + q; i++) {\n    if (a[i].f) { // \u5982\u679c\u4e0d\u662f\u539f\u56fe\u4e2d\u7684\u8fb9\n      int l = Find(a[i].x), r = Find(a[i].y);\n      ans[a[i].f] = (l != r); // \u53ea\u9700\u5224\u65ad\uff0c\u4e0d\u9700\u52a0\u5165\n    } else { // \u662f\u539f\u56fe\u4e2d\u7684\u8fb9\n      // \u514b\u9c81\u65af\u5361\u5c14\u7b97\u6cd5\n      int l = Find(a[i].x), r = Find(a[i].y);\n      if (l != r) {\n        f[l] = r;\n      }\n    }\n  }\n  for (int i = 1; i <= q; i++) { // \u8f93\u51fa\n    cout << (ans[i] ? \"Yes\" : \"No\") << '\\n';\n  }\n  return 0;\n}\n```\n\n",
        "postTime": 1678890998,
        "uid": 724052,
        "name": "luogu_wsy0704",
        "ccfLevel": 5,
        "title": "AT_abc235_e MST + 1 \u9898\u89e3"
    },
    {
        "content": "### \u9898\u76ee\u94fe\u63a5\n[MST + 1](https://www.luogu.com.cn/problem/AT_abc235_e)\n\n### \u601d\u8def\n\u8fd9\u91cc\u4ecb\u7ecd\u4e24\u79cd\u601d\u8def:  \n\n\u57fa\u672c\u601d\u8def  \n\n\u9996\u5148\u5148\u6c42\u51fa\u539f\u56fe\u7684 MST (Minimum Spanning Tree);  \n\u518d\u8003\u8651 $q$ \u6b21\u8be2\u95ee\uff0c\u4e00\u6761\u8fb9\u80fd\u4e0d\u80fd\u6210\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u65b0\u8fb9\u3002  \n**\u8981\u8003\u8651\u5230**\uff1a  \n\u5f53\u589e\u52a0\u8be2\u95ee\u7684\u8fb9\u65f6\uff0c\u5b83\u4f1a\u4e0e\u539f\u6811\u8fb9\u5f62\u6210\u4e00\u4e2a\u73af\uff0c\u6b64\u65f6\u5c31\u8981\u8003\u8651\u5220\u53bb\u4e00\u6761\u8fb9\uff0c\u56e0\u4e3a\u8981\u6c42 MST ,\u6240\u4ee5\u8981\u5220\u53bb\u73af\u4e0a\u6700\u5927\u7684\u4e00\u6761\u8fb9\uff0c\u5c31\u8981\u5224\u65ad\u8be2\u95ee\u7684\u8fb9\u662f\u5426\u662f\u6700\u5927\u7684\uff0c\u662f\u5219\u4e0d\u80fd\u6210\u4e3a\u6811\u8fb9\uff0c\u5426\u5219\u53ef\u4ee5, \u8be2\u95ee\u4e4b\u95f4\u662f\u72ec\u7acb\u7684,\u6240\u4ee5\u4e0d\u7528\u4fee\u6539\u76f4\u63a5\u7d2f\u52a0\u7b54\u6848\u3002\u8be2\u95ee\u8def\u5f84\u4e0a\u7684\u6700\u5927\u8fb9\u53ef\u4ee5\u7528 LCA + \u500d\u589e \uff1b  \n\u8fd9\u91cc\u5c31\u4e0d\u7ec6\u8bb2\u8fd9\u4e00\u90e8\u5206\uff0c\u53ef\u4ee5\u5bf9\u7740\u4ee3\u7801\u7406\u89e3\u3002\n\n\u5f88\u5de7\u7684\u65b9\u6cd5  \n\n\u53ef\u4e0d\u53ef\u4ee5\u5728\u5efa\u6811\u7684\u7684\u8fc7\u7a0b\u4e2d\u5c31\u5224\u65ad\u8fb9\u53ef\u4e0d\u53ef\u4ee5\u6210\u4e3a\u65b0\u6811\u8fb9\uff1f  \n\u7b54\u6848\u80af\u5b9a\u662f\u53ef\u4ee5\u3002  \n\u628a $M+Q$ \u6761\u8fb9\u5168\u90e8\u5b58\u4e0b\u6765\uff0c\u5e94\u4e3a\u65e2\u6709\u539f\u56fe\u8fb9\u53c8\u6709\u8be2\u95ee\u7684\u8fb9\uff0c\u6240\u4ee5\u8981\u5b58\u4e0b\u5e8f\u53f7\u4ee5\u4fbf\u5224\u65ad\u3002  \n\u7b97\u6cd5\u7684\u91cd\u70b9\u5c31\u5728 Kruskal \u4e2d \uff0c\u5bf9 $M+Q$ \u6761\u8fb9\u8fdb\u884c\u6b63\u5e38\u7684 MST \uff0c\u5f53\u5728\u8fc7\u7a0b\u4e2d\u6709\u6761\u8be2\u95ee\u7684\u8fb9\u65f6-----**\u7f16\u53f7\u5927\u4e8e $M$**, \u5b83\u5728\u8be2\u95ee\u65f6\u53ef\u4ee5\u6210\u4e3a\u6811\u8fb9\uff0c\u56e0\u4e3a\u8be2\u95ee\u95f4\u72ec\u7acb\uff0c\u6240\u4ee5\u4e5f\u662f\u7d2f\u52a0\u7b54\u6848\u4f46\u4e0d\u52a0\u5165\u6811\u4e2d\u3002  \n\u4e24\u79cd\u65b9\u6cd5\u7684\u4ee3\u7801\u90fd\u7c98\u4e00\u4e0b\u3002\n\n### \u4ee3\u7801\n\n[\u65b9\u6cd5\u4e00](https://www.luogu.com.cn/paste/2l6kbabh)\n\n[\u65b9\u6cd5\u4e8c](https://www.luogu.com.cn/paste/62iqp0za)",
        "postTime": 1667879367,
        "uid": 723509,
        "name": "mzw2006",
        "ccfLevel": 0,
        "title": "AT_abc235_eMST+1\u9898\u89e3"
    },
    {
        "content": "# abc 235 e\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $n$ \u4e2a\u70b9\uff0c$m$ \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u6bcf\u6761\u8fb9\u6709\u6743\u503c $c_i$\uff0c\u5404\u4e0d\u76f8\u540c\u3002\n\n\u6709 $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u51fa\u4e00\u6761\u8fb9\uff1a$x_i, y_i, w_i$\n\n\u8868\u793a\u4e24\u7aef\u70b9\u4e3a $x_i$ \u548c $y_i$ \uff0c\u6743\u503c\u4e3a $w_i$ \n\n\u95ee\uff1a\u52a0\u5165\u8fd9\u6761\u8fb9\u4e4b\u540e\uff0c\u8fd9\u6761\u8fb9\u662f\u5426\u4f1a\u5728\u65b0\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff1f\n\n## \u601d\u8def\n\n### \u79bb\u7ebf\n\n\u56e0\u4e3a\u4f60\u9700\u8981\u67e5\u8be2\u8fd9\u6761\u8fb9\u662f\u5426\u5728\u65b0\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\uff0c\u6240\u4ee5\u6709\u8fd9\u4e48\u4e00\u79cd\u505a\u6cd5\uff1a\n\n1. \u5c06\u539f\u672c\u7684 $m$ \u6761\u8fb9\u548c\u67e5\u8be2\u7684 $q$ \u6761\u8fb9\u4e00\u8d77\u6309\u7167\u6743\u503c\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\u3002\n\n2. \u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5982\u679c\u5f53\u524d\u8fb9\u662f\u67e5\u8be2\u8fb9\uff0c\u5c31\u67e5\u8be2\u4e24\u4e2a\u70b9\u73b0\u5728\u662f\u5426\u8fde\u901a\uff0c\u5982\u679c\u662f\u539f\u6765\u7684\u8fb9\uff0c\u5c31\u76f4\u63a5\u6309\u7167\u6700\u5c0f\u751f\u6210\u6811\u7684\u505a\u6cd5\u5199\u3002\n\n### \u5728\u7ebf\n\n\u5176\u5b9e\uff0c\u4f60\u8981\u67e5\u8be2\u4e00\u6761\u8fb9\u662f\u5426\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u5c31\u662f\u770b\u8fd9\u6761\u8fb9\u662f\u4e0d\u662f\u5728\u8fd9\u4e24\u4e2a\u70b9\u8054\u901a\u4e4b\u524d\u5c31\u88ab\u679a\u4e3e\u5230\u4e86\u3002\n\n\u4e5f\u5c31\u662f\u6bd4\u8f83\u8fd9\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u7b80\u5355\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u7684\u6700\u5927\u503c\u548c\u8fd9\u6761\u8fb9\u7684\u6743\u503c\u7684\u5927\u5c0f\u5c31\u53ef\u4ee5\u4e86\u3002",
        "postTime": 1679241207,
        "uid": 658291,
        "name": "chengning0909",
        "ccfLevel": 4,
        "title": "abc 235 e"
    },
    {
        "content": "\u9996\u5148\u8dd1\u4e00\u904d\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5e76\u8bb0\u5f55\u4e0b\u6700\u5c0f\u751f\u6210\u6811\u7684\u6bcf\u4e00\u6761\u8fb9\u3002\n\n\u7136\u540e\u7528\u8bb0\u5f55\u4e0b\u6765\u7684\u8fb9\u5efa\u56fe\u3002\n\n\u7531\u4e8e\u6bcf\u4e00\u4e2a\u8be2\u95ee\u72ec\u7acb\uff0c\u6240\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u6761\u7ed9\u51fa\u7684\u8be2\u95ee\u7684\u8fb9\uff0c\u5982\u679c\u4ed6\u80fd\u591f\u6210\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u7684\u6811\u8fb9\uff0c\u5f53\u4e14\u4ec5\u5f53\u4ed6\u7684\u6743\u503c\u5c0f\u4e8e\u539f\u6765\u8fd9\u4e24\u4e2a\u70b9\u7684\u6743\u503c\u3002\u5426\u5219\u5c31\u4e0d\u80fd\u6210\u4e3a\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int N=1e6+10;\nmap<int,vector<int> >mp;\nstruct node{\n  int a,b,c;\n}edge[N];\nvector<pair<int,int> >z[N];\nint fa[N],dep[N],f[N][20],w[N][20];\nvoid dfs(int u,int fa,int s=0){\n  dep[u]=dep[fa]+1;\n  f[u][0]=fa;\n  for(auto &[j,k]:z[u])\n    if(j!=fa){\n      w[j][0]=k;\n      dfs(j,u,k);\n    }\n}\nint lca(int a,int b){\n  if(dep[a]<dep[b])swap(a,b);\n  int delta=dep[a]-dep[b],res=0;\n  for(int i=0;i<20;i++)\n    if(delta&(1<<i))\n      res=max(res,w[a][i]),a=f[a][i];\n  if(a==b)return res;\n  for(int i=19;~i;i--) \n    if(f[a][i]!=f[b][i])\n      res=max({res,w[a][i],w[b][i]}),a=f[a][i],b=f[b][i];\n  return max({res,w[a][0],w[b][0]});\n}\nint find(int x){\n  return x==fa[x]?x:fa[x]=find(fa[x]);\n}\nsigned main(){\n  int n,m,q;\n  cin>>n>>m>>q;\n  for(int i=1;i<=m;i++)\n    cin>>edge[i].a>>edge[i].b>>edge[i].c;\n  for(int i=1;i<=n;i++)fa[i]=i;\n  sort(edge+1,edge+m+1,[&](const node&lhs,const node&rhs){\n    return lhs.c<rhs.c;\n  });\n  // cout<<\"----------------\\n\";\n  for(int i=1;i<=m;i++){\n    int a=edge[i].a,b=edge[i].b,c=edge[i].c;\n    int ta=find(a),tb=find(b);\n    if(ta!=tb){\n      // cout<<a<<' '<<b<<' '<<c<<'\\n';\n      fa[ta]=tb;\n      z[a].push_back({b,c});\n      z[b].push_back({a,c});\n    }\n  }\n  // cout<<\"----------------\\n\";\n  dfs(1,0);\n  for(int i=1;i<20;i++)\n  for(int j=1;j<=n;j++)\n  f[j][i]=f[f[j][i-1]][i-1],w[j][i]=max(w[j][i-1],w[f[j][i-1]][i-1]);\n  while(q--){\n    int x,y,w;\n    cin>>x>>y>>w;\n    int calc=lca(x,y);\n    // cout<<\"calc=\"<<calc<<'\\n';\n    if(calc>w)cout<<\"Yes\\n\";\n    else cout<<\"No\\n\";\n  }\n  return 0;\n}\n```",
        "postTime": 1677711455,
        "uid": 378467,
        "name": "willem248",
        "ccfLevel": 5,
        "title": "ABC235E"
    }
]