[
    {
        "content": "# \u601d\u8def\n\u770b\u6570\u636e\u8303\u56f4\u53ef\u4ee5\u53d1\u73b0\u72b6\u6001\u7684\u6570\u91cf\u6700\u591a\u662f $2^{16}$ \u4e2a\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u6765\u66b4\u529b\u679a\u4e3e\u4fdd\u62a4\u7684\u548c\u6ca1\u6709\u4fdd\u62a4\u7684\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u4fdd\u62a4\u548c\u6ca1\u4fdd\u62a4\u6211\u4eec\u53ef\u4ee5\u6c42\u4e00\u4e0b\u6700\u540e\u53d7\u4fdd\u62a4\u7684\u8fde\u901a\u5757\u662f\u4e0d\u662f\u4e00\uff0c\u5982\u679c\u662f\u7684\u8bdd\u5c31\u8bf4\u660e\u8fd9\u4e2a\u72b6\u6001\u662f\u5408\u6cd5\u7684\u3002\n\n\u6700\u540e\u6211\u4eec\u6c42\u8fde\u901a\u5757\u53ef\u4ee5\u7528\u7206\u641c\u6765\u6c42\uff0c\u4e5f\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6765\u6c42\uff0c\u8fd9\u91cc\u7684\u4ee3\u7801\u7528\u5e76\u67e5\u96c6\u6765\u6c42\uff0c\u6211\u4eec\u53ef\u4ee5\u628a\u6ca1\u6709\u4fdd\u62a4\u7684\u5e76\u5230\u4e00\u4e2a\u96c6\u5408\u91cc\uff0c\u7136\u540e\u5f53\u6210\u7acb\u65f6\uff0c\u8fd9\u4e2a\u72b6\u6001\u6709 $2$ \u4e2a\u96c6\u5408\u3002\n\n# \u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=5;\nint a[maxn][maxn],b[maxn][maxn];\nint f[maxn*maxn],sz[maxn*maxn];\nint dx[]={0,0,1,-1};\nint dy[]={1,-1,0,0};\nvoid I(int n){for(int i=0;i<=n;i++)f[i]=i,sz[i]=1;}\nint F(int x){return x==f[x]?x:f[x]=F(f[x]);}\nvoid U(int x,int y){\n\tx=F(x),y=F(y);\n\tif(x!=y){\n\t\tf[y]=x;\n\t\tsz[x]+=sz[y];\n\t\tsz[y]=0;\n\t}\n}\nsigned main(){\n\tfor(int i=0;i<4;i++){\n\t\tfor(int j=0;j<4;j++){\n\t\t\tcin>>a[i][j];\n\t\t}\n\t}\n\tint ans=0;\n\tfor(int st=0;st<(1<<16);st++){\n\t\tmemset(b,0,sizeof b);\n\t\tfor(int i=0;i<16;i++){\n\t\t\tif(st&(1<<i)){\n\t\t\t\tb[i/4][i%4]=1;\n\t\t\t}\n\t\t}\n\t\tbool flag=0;\n\t\tfor(int i=0;i<4;i++){\n\t\t\tfor(int j=0;j<4;j++){\n\t\t\t\tif(a[i][j]==1&&b[i][j]==0){\n\t\t\t\t\tflag=1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(flag==0){\n\t\t\tI(17);\n\t\t\tfor(int x=0;x<4;x++){\n\t\t\t\tfor(int y=0;y<4;y++){\n\t\t\t\t\tfor(int i=0;i<4;i++){\n\t\t\t\t\t\tint nx=x+dx[i],ny=y+dy[i];\n\t\t\t\t\t\tif(nx<0||nx>=4||ny<0||ny>=4){\n\t\t\t\t\t\t\tif(b[x][y]==0){\n\t\t\t\t\t\t\t\tU(x*4+y,16);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse{\n\t\t\t\t\t\t\tif(b[x][y]==b[nx][ny]){\n\t\t\t\t\t\t\t\tU(x*4+y,nx*4+ny);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tint cnt=0;\n\t\t\tfor(int i=0;i<=16;i++){\n\t\t\t\tif(i==F(i))cnt++;\n\t\t\t}\n\t\t\tif(cnt==2)ans++;\n\t\t}\n\t}\n\tcout<<ans;\n\treturn 0;\n}\n```",
        "postTime": 1680319717,
        "uid": 715244,
        "name": "zhangzhengyan0831",
        "ccfLevel": 0,
        "title": "AT_abc219_e [ABC219E] Moat \u9898\u89e3"
    },
    {
        "content": "\u9996\u5148\u9898\u76ee\u7ed9\u5b9a\u7684\u591a\u8fb9\u5f62\u4e00\u5b9a\u9876\u70b9\u5728\u683c\u70b9\u4e0a\u4e14\u8fb9\u7f18\u4e3a\u76f4\u89d2\uff0c\u5219\u4e00\u5b9a\u662f\u628a $ 16 $ \u4e2a\u683c\u5b50\u5206\u6210\u4e24\u4e2a\u90e8\u5206\uff0c\u88ab\u4fdd\u62a4\u548c\u4e0d\u88ab\u4fdd\u62a4\u3002\n\n\u89c2\u5bdf\u5230 $ n $ \u5f88\u5c0f\uff0c\u679a\u4e3e\u5b50\u96c6\u4e5f\u5b8c\u5168\u53ef\u4ee5\u901a\u8fc7\uff0c\u4e8e\u662f\u53ef\u4ee5\u66b4\u529b\u679a\u4e3e\u6bcf\u4e2a\u683c\u5b50\u5c5e\u4e8e\u54ea\u4e2a\u90e8\u5206\uff0c\u7136\u540e\u4fdd\u8bc1\u6240\u6709\u8f93\u5165\u683c\u5b50\u90fd\u5728\u88ab\u4fdd\u62a4\u7684\u90e8\u5206\u5185\u5373\u53ef\u3002\n\n\u4f46\u8fd9\u6837\u4f1a\u51fa\u73b0\u4e00\u4e2a\u95ee\u9898\uff1a\u53ef\u80fd\u4f1a\u51fa\u73b0\u4e00\u4e2a\u4e0d\u88ab\u4fdd\u62a4\u7684\u683c\u5b50\u5728\u88ab\u4fdd\u62a4\u7684\u5185\u90e8\uff0c\u6216\u8005\u88ab\u4fdd\u62a4\u7684\u683c\u5b50\u88ab\u5206\u5272\u6210\u82e5\u5e72\u5757\uff0c\u663e\u7136\u90fd\u4e0d\u6ee1\u8db3\u9898\u610f\u3002\n\n\u5bf9\u4e8e\u8fd9\u4e2a\u95ee\u9898\uff0c\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u5728\u8fb9\u754c\u52a0\u4e00\u5708 $ 0 $\uff0c\u7136\u540e\u5224\u65ad\u4e24\u4e2a\u90e8\u5206\u662f\u4e0d\u662f\u5168\u90e8\u8fde\u901a\u5373\u53ef\u3002\u56e0\u4e3a\u67d0\u4e9b\u539f\u56e0\u8fd9\u91cc\u7528\u4e86 LCT \u5b9e\u73b0\u7684\u5e76\u67e5\u96c6\uff0c\u6709\u9700\u8981\u7684\u8bdd\u6539\u56de\u666e\u901a\u5e76\u67e5\u96c6\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $ \\mathcal{O}(2^n \\times n) $\uff0c\u5176\u4e2d $ n=16 $ \u4e3a\u8f93\u5165\u5927\u5c0f\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int maxn=1e5+10;\nconst int mod=1e18;\nint q,u,v,c;\nchar op;\nstruct Splay\n{\n    int ch[maxn][2],fa[maxn],siz[maxn],val[maxn],sum[maxn],add[maxn],mul[maxn],rev[maxn];\n    void clear(int x)\n    {\n        ch[x][0]=ch[x][1]=fa[x]=siz[x]=val[x]=sum[x]=add[x]=rev[x]=0;\n        mul[x]=1;\n    }\n    int getch(int x)\n    {\n        return (ch[fa[x]][1]==x);\n    }\n    int isroot(int x)\n    {\n        clear(0);\n        return ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;\n    }\n    void maintain(int x)\n    {\n        clear(0);\n        siz[x]=(siz[ch[x][0]]+1+siz[ch[x][1]])%mod;\n        sum[x]=(sum[ch[x][0]]+val[x]+sum[ch[x][1]])%mod;\n    }\n    void pushdown(int x)\n    {\n        clear(0);\n        if(mul[x]!=1)\n        {\n            if(ch[x][0])\n            mul[ch[x][0]]=(mul[x]*mul[ch[x][0]])%mod,val[ch[x][0]]=(val[ch[x][0]]*mul[x])%mod,sum[ch[x][0]]=(sum[ch[x][0]]*mul[x])%mod,add[ch[x][0]]=(add[ch[x][0]]*mul[x])%mod;\n            if(ch[x][1])\n            mul[ch[x][1]]=(mul[x]*mul[ch[x][1]])%mod,val[ch[x][1]]=(val[ch[x][1]]*mul[x])%mod,sum[ch[x][1]]=(sum[ch[x][1]]*mul[x])%mod,add[ch[x][1]]=(add[ch[x][1]]*mul[x])%mod;\n            mul[x]=1;\n        }\n        if(add[x])\n        {\n            if(ch[x][0])\n            add[ch[x][0]]=(add[ch[x][0]]+add[x])%mod,val[ch[x][0]]=(val[ch[x][0]]+add[x])%mod,sum[ch[x][0]]=(sum[ch[x][0]]+add[x]*siz[ch[x][0]])%mod;\n            if(ch[x][1])\n            add[ch[x][1]]=(add[ch[x][1]]+add[x])%mod,val[ch[x][1]]=(val[ch[x][1]]+add[x])%mod,sum[ch[x][1]]=(sum[ch[x][1]]+add[x]*siz[ch[x][1]])%mod;\n            add[x]=0;\n        }\n        if(rev[x])\n        {\n            if(ch[x][0])\n            rev[ch[x][0]]^=1,swap(ch[ch[x][0]][0],ch[ch[x][0]][1]);\n            if(ch[x][1])\n            rev[ch[x][1]]^=1,swap(ch[ch[x][1]][0],ch[ch[x][1]][1]);\n            rev[x]=0;\n        }\n    }\n    void update(int x)\n    {\n        if(!isroot(x))\n        update(fa[x]);\n        pushdown(x);\n    }\n    void rotate(int x)\n    {\n        int y=fa[x],z=fa[y],chx=getch(x),chy=getch(y);\n        fa[x]=z;\n        if(!isroot(y))\n        ch[z][chy]=x;\n        ch[y][chx]=ch[x][chx^1];\n        fa[ch[x][chx^1]]=y;\n        ch[x][chx^1]=y;\n        fa[y]=x;\n        maintain(y);\n        maintain(x);\n        maintain(z);\n    }\n    void splay(int x)\n    {\n        update(x);\n        for(int f=fa[x];f=fa[x],!isroot(x);rotate(x))\n        if(!isroot(f))\n        rotate(getch(x)==getch(f)?f:x);\n    }\n    void access(int x)\n    {\n        for(int f=0;x;f=x,x=fa[x])\n        splay(x),ch[x][1]=f,maintain(x);\n    }\n    void makeroot(int x)\n    {\n        access(x);\n        splay(x);\n        swap(ch[x][0],ch[x][1]);\n        rev[x]^=1;\n    }\n    int find(int x)\n    {\n        access(x);\n        splay(x);\n        while(ch[x][0])\n        x=ch[x][0];\n        splay(x);\n        return x;\n    }\n    void final_mul(int u,int v,int c)\n    {\n    makeroot(u), access(v), splay(v);\n      val[v] = val[v] * c % mod;\n      sum[v] = sum[v] * c % mod;\n      mul[v] = mul[v] * c % mod;\n    }\n    void final_add(int u,int v,int c)\n    {\n    makeroot(u), access(v), splay(v);\n      val[v] = (val[v] + c) % mod;\n      sum[v] = (sum[v] + siz[v] * c % mod) % mod;\n      add[v] = (add[v] + c) % mod;\n    }\n    int query1(int u,int v)\n    {\n    makeroot(u), access(v), splay(v);\n    return sum[v];\n    }\n    void link(int u,int v)\n    {\n    if (find(u) != find(v)) \n    makeroot(u), fa[u] = v;\n    }\n    void cut(int u,int v)\n    {\n    makeroot(u);\n      access(v);\n      splay(v);\n      if (ch[v][0] == u && !ch[u][1]) \n      ch[v][0] = fa[u] = 0;\n    }\n    bool query2(int u,int v)\n    {\n    return find(u) == find(v);\n    }\n}st;\nint find(int x)\n{\nreturn st.find(x);\n}\nvoid merge(int u,int v)\n{\nst.link(u,v);\n}\nvoid clean(int n)\n{\nfor(int i=1;i<=n;i++)\nst.clear(i),st.maintain(i),st.splay(i);\n}//main\nint a[40],final;\nint encode(int i,int j)\n{\nreturn i*6+j+1;\n}\nint chose[40];\nint x[6]={0,-1,1,0,0},y[6]={0,0,0,-1,1};\nbool inrange(int x,int l,int r)\n{\nreturn l<=x&&x<=r;\n}\nsigned main()\n{\n    int now=0;\n\tfor(int i=1;i<=4;i++)\n    for(int j=1;j<=4;j++)\n    {\n\t\tint x;\n        cin>>x;\n        now=(now<<1)+x;\n\t}\nfor(int sub=0;sub<(1<<16);sub++)\nif((sub&now)==now)\n{\nfor(int j=0;j<16;j++)\n{\n\tint x=j/4,y=j%4;\n\tif((sub>>j)&1)\n\tchose[encode(x+1,y+1)]=1;\n\telse \n    chose[encode(x+1,y+1)]=0;\n}\nint n=6;\nclean(50);\nfor(int i=0;i<6;i++)\n\tfor(int j=0;j<6;j++)\n    {\n\t\tif(i+1<6&&chose[encode(i,j)]==chose[encode(i+1,j)]) \n        merge(encode(i,j),encode(i+1,j));\n\t\tif(j+1<6&&chose[encode(i,j)]==chose[encode(i,j+1)]) \n        merge(encode(i,j),encode(i,j+1));\n\t}\nbool ans=1;\nfor(int c=0;c<=1;c++)\n{\nint lst=-1;\nbool ok=1;\nfor(int i=0;i<n;i++)\nfor(int j=0;j<n;j++)\nif(chose[encode(i,j)]==c)\n{\nif(lst==-1)\nlst=st.find(encode(i,j));\nelse if(lst!=st.find(encode(i,j)))\nok=0;\n}\nif(ok==0)\nans=0;\n}\nfinal+=ans;\n}\ncout<<final;\n}\n```\n",
        "postTime": 1672134460,
        "uid": 714821,
        "name": "loser_seele",
        "ccfLevel": 4,
        "title": "ABC219E\u9898\u89e3"
    }
]