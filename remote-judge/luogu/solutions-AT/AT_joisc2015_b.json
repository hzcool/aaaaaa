[
    {
        "content": "## \u9898\u76ee\u7b80\u8ff0\uff1a\n\n\u5b9a\u4e49\u4e00\u4e2a $0$ \u9636\u5e8f\u5217\u4e3a\u201cJ\uff0cO\uff0cI\u201d\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5b57\u6bcd\u3002\u5b9a\u4e49k\u9636\u5e8f\u5217\u4e3a $4^{k-1}$ \u4e2a\u2018J\u2019\uff0c $4^{k-1}$ \u4e2a\u2018O\u2019\uff0c $4^{k-1}$ \u4e2a\u2018I\u2019\u5728\u6700\u540e\u63a5\u4e0a $(k-1)$ \u9636\u5e8f\u5217\u3002   \n\n\u5982\uff1a$1$ \u9636\u5e8f\u5217\u53ef\u4ee5\u662f\uff1a\u2018JOII\u2019\uff1b$2$ \u9636\u5e8f\u5217\u53ef\u4ee5\u662f\uff1a\u2018JJJJOOOOIIIIJOII\u2019\u3002   \n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $4^{k-1}$ \u7684\u73af\u72b6\u5b57\u7b26\u4e32\uff0c\u6c42\u6700\u5c11\u4fee\u6539\u591a\u5c11\u6b21\u53ef\u4ee5\u4f7f\u8be5\u5e8f\u5217\u53d8\u4e3a\u4e0a\u8ff0k\u9636\u5e8f\u5217\u3002\n\n## \u601d\u8def\uff1a\n\n\u7c7b\u4f3c\u4e8e\u6a21\u62df\u7684\u505a\u6cd5\u3002\n\n\u9996\u5148\u4f1a\u60f3\u5230\u7eaf\u66b4\u529b\u7684\u505a\u6cd5\uff1a\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5f00\u5934\u4f4d\u7f6e\uff0c\u66b4\u529b\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u4f18\u5316\u66b4\u529b\u7edf\u8ba1\u7b54\u6848\u7684\u90e8\u5206\uff1a\n\n\u9884\u5904\u7406\u51fa\u7ed9\u51fa\u7684\u5b57\u7b26\u4e32\u7684\u2018J\u2019\uff0c\u2018O\u2019\uff0c\u2018I\u2019 \u7684\u6570\u91cf\u524d\u7f00\u548c\u3002\n\n\u679a\u4e3e\u6bcf\u4e2a\u4f4d\u7f6e\uff0c\u628a\u8be5\u4f4d\u7f6e\u8ba4\u4e3a\u6210\u5e8f\u5217\u7684\u5f00\u5934\uff0c\u5229\u7528\u524d\u7f00\u548c\u5feb\u901f\u8ba1\u7b97\u51fa\u9700\u8981\u4fee\u6539\u7684\u6570\u91cf\u3002\u590d\u6742\u5ea6\u4e3a $\\text{O}{(k\\times 4^{k})}$\u3002\n\n## \u4ee3\u7801\u4ee5\u53ca\u4ee3\u7801\u89e3\u91ca\uff1a\n\n* \u53d8\u91cf\uff1a \n\n$qj$ \u4e3a\u2018J\u2019\u7684\u524d\u7f00\u548c\uff0c $qo$ \u4e3a\u2018O\u2019\u7684\u524d\u7f00\u548c\uff0c $qi$ \u4e3a\u2018I\u2019\u7684\u524d\u7f00\u548c\uff0c $n4$ \u7528\u6765\u5b58\u50a8 $4$ \u7684 $k$ \u6b21\u5e42\u3002\n\n$l$ \u4e3a\u4e00\u4e32 \u2018JJJJJJ\u2026\u2026\u2019 \u6216\u8005 \u2018OOOOOOO\u2026\u2026\u2019 \u6216\u8005 \u2018IIIIIII\u2026\u2026\u2019 \u7684\u5de6\u7aef\u70b9\uff0c $r$ \u4e3a\u53f3\u7aef\u70b9\u3002\n\n* \u51fd\u6570\uff1a\n\n smf\u51fd\u6570\uff1a\u7531\u4e8e\u6211\u7684\u524d\u7f00\u548c\u4ece0\u5f00\u59cb\u8bb0\u5f55\u3002\u90a3\u4e48\u533a\u95f4\u4e3a $[ 0 , r ]$ \u7684\u65f6\u5019\uff0c\u4f5c\u5dee\u4f1a\u51fa\u73b0\uff1a $l-1=0-1=-1$ \u3002\u4e3a\u4e86\u9632\u6b62\u51fa\u9519\uff0c\u7279\u5224\u8be5\u60c5\u51b5\u3002\n\n* \u5bf9\u4e8e $l$ \u4e0e $r$ \u7684\u5904\u7406\uff1a\n\n \u53ef\u4ee5\u9009\u62e9\u4e8c\u500d\u5b57\u7b26\u4e32\u6216\u8005\u8ba1\u7b97\u5bf9\u5e94\u4f4d\u7f6e\u6765\u5f97\u5230\u6b63\u786e\u7b54\u6848\u3002\u8fd9\u91cc\u6211\u9009\u62e9\u4e86\u540e\u8005\u3002\n\n\u5b8c\u6574\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e6+105;\nint k,qj[N],qo[N],qi[N];\nstring c,s;\nint n4[11]={1,4,16,64,256,1024,4096,16384,65536,262144,1048576};\ninline int smf(int x,int cnt){\n\tif(cnt==1){\n        if(x==-1) return 0;\n        else return qj[x];\n    }\n\telse if(cnt==2){\n        if(x==-1) return 0;\n        else return qo[x];\n    }   \n\telse if(cnt==3){\n        if(x==-1) return 0;\n        else return qi[x];\n    }     \n}\nint main(){\n    cin>>k;cin>>c;\n    s=c;s=s+c;\n    if(s[0]=='J') qj[0]=1;\n    else if(s[0]=='O') qo[0]=1;\n    else if(s[0]=='I') qi[0]=1;\n    for(int i=1;i<n4[k];i++){\n        if(s[i]=='J') qj[i]=qj[i-1]+1,qo[i]=qo[i-1],qi[i]=qi[i-1];\n        else if(s[i]=='O') qo[i]=qo[i-1]+1,qj[i]=qj[i-1],qi[i]=qi[i-1];\n        else if(s[i]=='I') qi[i]=qi[i-1]+1,qo[i]=qo[i-1],qj[i]=qj[i-1];\n    }\n    int ans=N;\n    int len;\n    for(int i=0;i<n4[k];i++){\n        int res=0,pos=i;int l=pos;int r;\n        for(int j=k;j>=1;j--){       \n            len=n4[j-1];r=l+len-1;           \n            for(int p=1;p<=3;p++){\n                int val=0;               \n                if(r>=n4[k] && l<n4[k])\t\t\t\n                    val+=( smf(n4[k]-1,p)-smf(l-1,p)) + (smf(r-n4[k],p) );           \t\n                else if(l>=n4[k] && r>=n4[k])\n                \t val+=( smf(r-n4[k],p) - smf(l-n4[k]-1,p) );\t\t\t\t                 \n                else val+=( smf(r,p)-smf(l-1,p) );               \t\t\t\t\t\t\t\t\t  \n                res+=(len-val);   \n\t\t\t\tl+=len;r=l+len-1; \n            }       \t\t\t  \n        }\n        ans=min(ans,res);\n    }\n    printf(\"%d\\n\",ans);\n\treturn 0;\n}\n\n\n\n```",
        "postTime": 1631957549,
        "uid": 392707,
        "name": "Nickle",
        "ccfLevel": 0,
        "title": "AT1250 \u6109\u5feb\u306a\u30ed\u30b4\u30c7\u30b6\u30a4\u30f3"
    },
    {
        "content": "# \u6109\u5feb\u306a\u30ed\u30b4\u30c7\u30b6\u30a4\u30f3\n\n\u63d0\u4ea4\u5730\u5740\uff1a[\u6d1b\u8c37 AT1250](https://www.luogu.com.cn/problem/AT1250)\uff0c[\nAtCoder AT1250](https://atcoder.jp/contests/joisc2015/tasks/joisc2015_b)\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa $K$ \u4e0e\u957f\u5ea6\u4e3a $4^K$ \u7684\u5b57\u7b26\u4e32\uff0c\u73b0\u8981\u66ff\u6362\u4e00\u4e9b\u5b57\u7b26\uff0c\u4f7f\u5176\u4ece\u73af\u4e0a\u67d0\u4f4d\u7f6e\u5f00\u59cb\u987a\u65f6\u9488\u8bfb\u53d6\u8fd9\u4e2a\u5b57\u7b26\u73af\uff0c\u80fd\u5f97\u5230\u4e00\u4e2a $K$ \u7ea7 JOI \u5e8f\u5217\uff0c\u8981\u6c42\u6700\u5c0f\u5316\u66ff\u6362\u5b57\u7b26\u6570\u3002\n\n$K + 1$ \u9636 JOI \u5e8f\u5217\u5206\u4e3a\u56db\u6bb5\uff1a\n\n- \u524d $4^K$ \u4e2a\u5b57\u7b26\u5168\u4e3a `J`\u3002\n- \u7136\u540e $4^K$ \u4e2a\u5b57\u7b26\u5168\u4e3a `O`\u3002\n- \u7136\u540e $4^K$ \u4e2a\u5b57\u7b26\u5168\u4e3a `I`\u3002\n- \u6700\u540e $4^K$ \u4e2a\u5b57\u7b26\u4e3a $K$ \u9636 JOI \u5e8f\u5217\u3002\n\n## \u5206\u6790\n\n\u770b\u6570\u636e\u8303\u56f4\uff0c$k \\le 10$\uff0c\u5f53 $k = 10$ \u65f6 $2^k = 1024$\uff0c\u6211\u4eec\u8003\u8651\u66b4\u529b\u679a\u4e3e\u8d77\u59cb\u70b9\uff0c\u7136\u540e\u524d $\\frac{3}{4}$ \u548c\u540e $\\frac{1}{4}$ \u5206\u5f00\u5904\u7406\uff0c\u524d\u9762\u90e8\u4efd\u53ef\u4ee5\u524d\u7f00\u548c\u9884\u5904\u7406\uff0c$O(1)$ \u67e5\u8be2\uff0c\u540e\u9762\u90e8\u5206\u9012\u5f52\u67e5\u8be2\u3002\n\n\u7531\u4e8e\u5b57\u7b26\u4e32\u662f\u4e2a\u73af\uff0c\u65ad\u73af\u6210\u94fe\u76f4\u63a5\u590d\u5236\u4e00\u500d\uff0c\u8bb0\u5f97\u5f00\u4e24\u500d\u7a7a\u95f4\u3002\n\n\u590d\u6742\u5ea6\u662f $O(4^K \\times K)$\u3002\n\n## $\\rm \\color{green}code$\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <climits>\nusing namespace std;\nconst int maxn = (1 << 20) + 5;\nint k, n;\nchar s[maxn << 1];\nint prej[maxn << 1], preo[maxn << 1], prei[maxn << 1];\nint ans = INT_MAX, res;\nauto query(int pre[], int l, int r) {\n    return pre[r] - pre[l - 1];\n};\nvoid work(int l, int r) {\n    if (l == r) return;\n    int len = (r - l + 1) >> 2;\n    res += len - query(prej, l, l + len - 1);\n    res += len - query(preo, l + len, l + len * 2 - 1);\n    res += len - query(prei, l + len * 2, l + len * 3 - 1);\n    work(l + len * 3, r);\n}\nint main() {\n    scanf(\"%d%s\", &k, s + 1);\n    n = 1 << (k << 1);\n    strncpy(s + 1 + n, s + 1, n), s[n + n + 1] = '\\0';\n    for (int i = 1, lim = n << 1; i <= lim; ++i) {\n        prej[i] = prej[i - 1] + (s[i] == 'J');\n        preo[i] = preo[i - 1] + (s[i] == 'O');\n        prei[i] = prei[i - 1] + (s[i] == 'I');\n    }\n    for (int i = 1; i <= n; ++i) {\n        res = 0;\n        work(i, n + i - 1);\n        ans = min(res, ans);\n    }\n    printf(\"%d\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1631947961,
        "uid": 129562,
        "name": "XYY1411",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011\u6109\u5feb\u306a\u30ed\u30b4\u30c7\u30b6\u30a4\u30f3"
    },
    {
        "content": "```\nT2\u6109\u5feb\u7684logo\u8bbe\u8ba1\u9898\u89e3\n\u7b97\u6cd5\u4e00\uff1a\n\u6211\u4eec\u5f88\u5bb9\u6613\u53d1\u73b0\uff0c\u5b9e\u9645\u4e0a\u4e00\u4e2a\u5408\u6cd5\u7684\u5b57\u7b26\u4e32\u5927\u591a\u6570\u5b57\u7b26\u90fd\u662f\u56fa\u5b9a\u597d\u4e86\u7684\uff0c\u800c\u53ea\u6709\u4e00\u4e2a\u5b57\u7b26\u662f\u4efb\u610f\u7684\uff1b\n\u90a3\u4e48\u5904\u7406\u51fa\u5408\u6cd5\u7684\u5b57\u7b26\u4e32\uff0c\u7136\u540e\u679a\u4e3e\u73af\u4e0a\u6bcf\u4e00\u4e2a\u53ef\u80fd\u5f00\u59cb\u8bfb\u7684\u4f4d\u7f6e\uff0c\u66b4\u529b\u8ba1\u7b97\u4e0d\u5339\u914d\u7684\u4e2a\u6570\uff0c\u53d6\u6700\u5c0f\u503c\u4e3a\u7b54\u6848\u5373\u53ef\uff1b\n\u65f6\u95f4\u590d\u6742\u5ea6O((4^n)^2)\uff1b\n\u7b97\u6cd5\u4e8c\uff1a\n\u8003\u8651\u4f18\u5316\u7b97\u6cd5\u4e00\uff0c\u6211\u4eec\u6bcf\u4e00\u6b21\u505a\u4e00\u6b21\u5339\u914d\u7684\u4ee3\u4ef7\u592a\u5927\u4e86\uff1b\n\u56e0\u4e3a\u9898\u4e2d\u7684\u5408\u6cd5\u4e32\u6709\u5f88\u957f\u4e00\u6bb5\u7684\u8fde\u7eed\u76f8\u540c\u5b57\u7b26\uff0c\u90a3\u4e48\u7ecf\u8fc7\u4e00\u6b21\u53f3\u79fb\u4e4b\u540e\uff0c\u6709\u4e9b\u5730\u65b9\u5339\u914d\u7684\u5b57\u6bcd\u662f\u76f8\u540c\u7684\uff0c\u4e0d\u7528\u91cd\u590d\u8ba1\u7b97\uff1b\n\u800c\u5fc5\u987b\u8981\u8ba1\u7b97\u7684\u662f\u6bcf\u4e00\u6bb5\u2019J\u2019\uff0c\u2019O\u2019\uff0c\u2019I\u2019\u7684\u9996\u4f4d\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u7684\u4e2a\u6570\u53ea\u6709n\u7684\u7ea7\u522b\uff0c\u76f4\u63a5\u66b4\u529b\u5904\u7406\u5c31\u53ef\u4ee5\u4e86\uff1b\n\u65f6\u95f4\u590d\u6742\u5ea6O(4^n+(4^n)*n)=O(n*4^n)\uff1b\n```",
        "postTime": 1524963101,
        "uid": 50092,
        "name": "da32s1da",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 AT1250 \u3010\u6109\u5feb\u306a\u30ed\u30b4\u30c7\u30b6\u30a4\u30f3\u3011"
    },
    {
        "content": "\u5f53\u6211\u4eec\u770b\u5230\u9898\u76ee\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5c31\u4e0d\u96be\u53d1\u73b0\u8fd9\u9053\u9898\u53ef\u4ee5\u8fdb\u884c\u66b4\u529b\u5904\u7406\u3002\u5f53\u6211\u4eec $O(4^k)$ \u679a\u4e3e\u6bcf\u4e00\u4e2a\u5b57\u7b26\u4f5c\u4e3a\u5f00\u5934\uff0c\u7136\u540e\u518d\u5faa\u73af $k$ \u6b21\u66b4\u529b\u8ba1\u7b97\uff0c\u5c31\u53ef\u4ee5\u5f97\u5230\u6b63\u786e\u7b54\u6848\u3002\n\n\u5177\u4f53\u505a\u6cd5\u5c31\u662f\u5148**\u7834\u73af\u6210\u94fe**\uff0c\u628a\u4e00\u4e2a\u73af\u62c6\u6210\u4e00\u4e2a $4^k\\times 2$ \u7684\u6570\u7ec4\u3002\u7136\u540e\u518d\u679a\u4e3e\u6bcf\u4e00\u4e2a\u5f00\u5934\uff0c\u8fd9\u91cc\u6211\u4f7f\u7528\u7684\u662f\u9012\u5f52\uff0c\u6211\u4eec\u53ef\u4ee5\u6253\u4e00\u4e2a $4^k$ \u7684\u8868\uff0c\u7136\u540e\u7528\u524d\u7f00\u548c\u8ba1\u7b97\u5f53\u524d\u9700\u8981\u4fee\u6539\u7684\u5b57\u7b26\u6570\u91cf\uff0c\u8fdb\u884c\u7d2f\u52a0\uff0c\u7136\u540e\u9012\u5f52 $k-1$ \u65f6\u7684\u7b54\u6848\u3002\n\n\u4ee3\u7801\u4e5f\u662f\u975e\u5e38\u7b80\u77ed\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int MAXN=3e6+5;\nint n;\nint sum1[MAXN],sum2[MAXN],sum3[MAXN];\nchar s[MAXN];\nint db[15]={0,1,4,16,64,256,1024,4096,16384,65536,262144,1048576};\nint find(int x,int y)\n{\n\tif(!y)\treturn 0;\n\treturn abs(db[y]-sum1[x+db[y]-1]+sum1[x-1])+abs(db[y]-sum2[x+db[y]*2-1]+sum2[x+db[y]-1])+abs(db[y]-sum3[x+db[y]*3-1]+sum3[x+db[y]*2-1])+find(x+db[y]*3,y-1);\n}\nint main()\n{\n\tcin>>n>>(s+1);\n\tint len=strlen(s+1);\n\tfor(int i=1;i<=len;i++)\ts[i+len]=s[i];\n\tfor(int i=1;i<=len*2;i++)\tsum1[i]=sum1[i-1]+(s[i]=='J'),sum2[i]=sum2[i-1]+(s[i]=='O'),sum3[i]=sum3[i-1]+(s[i]=='I');\n\tint res=1e9;\n\tfor(int i=1;i<=len;i++)\tres=min(res,find(i,n));\n\tcout<<res<<endl;\n\treturn 0;\n}\n```",
        "postTime": 1677245613,
        "uid": 439177,
        "name": "Super_Sheep",
        "ccfLevel": 0,
        "title": "AT_joisc2015_b\u9898\u89e3"
    }
]