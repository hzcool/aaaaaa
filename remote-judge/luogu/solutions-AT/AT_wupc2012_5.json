[
    {
        "content": "\u8fd9\u9053\u9898\u662f\u4e00\u9053\u601d\u7ef4\u9898\u3002\u8bb8\u591a\u4eba~~\u5305\u62ec\u6211~~\uff0c\u770b\u5230\u8fd9\u9053\u9898\uff0c\u7b2c\u4e00\u6b21\u5c31\u60f3\u5230\u4e86\u66b4\u529b\uff0c\u7528bfs\u7d2f\u52a0\uff0c\u4f46\u8fd9\u79cd\u65b9\u6cd5\u6700\u540e\u7684\u7ed3\u679c\u662f\u60e8\u4e0d\u5fcd\u7779\u7684\uff1a$T~fly$\n\n# \u8fdb\u5165\u6b63\u9898\n\u8fd9\u4e00\u9898bfs\u7edd\u5bf9\u8981\u8d85\u65f6\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u70b9$v$\u5230\u7ec8\u70b9$n-1$\u7684\u671f\u671b\u503c\u3002\u8fd9\u4e2a\u671f\u671b\u503c\u5c31\u662f\u70b9$v$\u5230\u7ec8\u70b9\u7684\u8ddd\u79bb\uff0c\u6c42\u6cd5\u5f88\u7b80\u5355\uff0c\u53ea\u9700\u4ece\u7ec8\u70b9\u5f00\u59cb\u6267\u884c\u6700\u77ed\u8def\u3002\u671f\u671b\u503c\u6c42\u51fa\u6765\u540e\uff0c\u6211\u4eec\u4ece\u8d77\u70b9\u5f00\u59cb\u904d\u5386\uff0c\u7528$h$\u8bb0\u5f55\u5df2\u7ecf\u8d70\u8fc7\u7684\u65f6\u95f4\uff0c$f$\u8bb0\u5f55\u671f\u671b\u5230\u8fbe\u7ec8\u70b9\u7684\u65f6\u95f4\uff0c\u5e76\u7528\u5c0f\u6839\u5806\u7ef4\u62a4$f$\uff0c\u5f53$f~mod~4==0~or~f~mod~7==0$\u65f6\uff0c\u8f93\u51fa$f$\u7684\u503c\u3002\n\n## \u5177\u4f53\u770b\u6211\u521a\u597d$100$\u884c\u7684$code:$\n```cpp\n#include <cstring>\n#include <cstdio>\n#include <bitset>\n#include <queue>\nusing namespace std;\n\ninline int read()\n{\n    int x=0,f=1;char c=getchar();\n    while (c<'0' || c>'9'){if (c=='-')f=-1;c=getchar();}\n    while (c>='0'&&c<='9'){x=(x<<1)+(x<<3)+c-48;c=getchar();}\n    return x*f;\n}\n\nconst int MAXN=10005;\nconst int MAXM=200005;\nint n,m,id;\n\nstruct node\n{\n    int dot;long long h,f;\n    \n    bool operator < (const node tmp) const\n    {\n        return f>tmp.f;\n    }\n};\n\nstruct edge\n{\n    int v,w,nx;\n}set[MAXM];\nint head[MAXN];long long dis[MAXN];\nbitset<MAXN> vis;\n\ninline void Addedge(int u,int v,int w)\n{\n    id++;set[id].v=v;set[id].w=w;set[id].nx=head[u];\n    head[u]=id;\n}\n\ninline void init()\n{\n    int u,v,w;\n    n=read();m=read();\n    memset(head,-1,sizeof(head));\n    for (int i=1;i<=m;i++)\n    {\n        u=read();v=read();w=read();\n        Addedge(u,v,w);Addedge(v,u,w);\t\t\t\t//\u53cc\u5411\u8fb9\n    }\n}\n\ninline void dijkstra()\t\t\t\t\t\t\t\t//dijkstra\u6c42\u671f\u671b\u503c\n{\n    priority_queue<pair<long long,int>,vector<pair<long long,int> >,greater<pair<long long,int> > > Q;\n    memset(dis,0x3f,sizeof(dis));\n    dis[n-1]=0;Q.push(make_pair(0,n-1));\n    int u,v;\n    while (!Q.empty())\n    {\n        u=Q.top().second;Q.pop();vis.reset(u);\n        for (int k=head[u];k>0;k=set[k].nx)\n        {\n            v=set[k].v;\n            if (dis[u]+set[k].w<dis[v])\n            {\n                dis[v]=dis[u]+set[k].w;\n                if (!vis[v])\n                {\n                    vis.set(v);\n                    Q.push(make_pair(dis[v],v));\n                }\n            }\n        }\n    }\n}\n\ninline long long get_ans()\t\t\t\t\t\t\t//\u6c42\u89e3\u7b54\u6848\n{\n    priority_queue<node> Q;\n    Q.push((node){0,0,dis[0]});\n    int u,v;long long h,f;\n    while (!Q.empty())\n    {\n        u=Q.top().dot;h=Q.top().h;f=Q.top().f;Q.pop();\n        if ((f%4)==0||(f%7)==0) return f;\n        if (u==n-1) continue;\t\t\t\t\t\t//\u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u5f53\u5230\u8fbe\u7ec8\u70b9\u540e\uff0c\u4e0d\u80fd\u7ee7\u7eed\u884c\u8d70\n        for (int k=head[u];k>0;k=set[k].nx)\n            Q.push((node){set[k].v,h+set[k].w,h+set[k].w+dis[set[k].v]});\n    }\n}\n\nint main()\n{\n    init();\n    dijkstra();\n    printf(\"%lld\\n\",get_ans());\n    return 0;\n}\n```\n\u6211\u7684\u7a0b\u5e8f\u8fd8\u662f\u5f88\u5feb\u7684\u5728Atcoder\u4e0a\u6682\u65f6\u6392\u7b2c\u4e8c\u3002\u563b\u563b  \n$Please~give~a~like.$",
        "postTime": 1561986003,
        "uid": 141348,
        "name": "\u26a1LZSY01_XZY\u26a1",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT170 \u3010\u4f1a\u5834\u3078\u306e\u9053\u3011"
    }
]