[
    {
        "content": "\u5728\u535a\u5ba2\u56ed\u98df\u7528\u66f4\u4f73\uff1a[https://www.cnblogs.com/PinkRabbit/p/AGC014.html](https://www.cnblogs.com/PinkRabbit/p/AGC014.html)\u3002\n\n\u8003\u8651\u4e00\u4e2a\u53f6\u5b50\uff0c\u5148\u624b\u628a\u8fd9\u4e2a\u53f6\u5b50\u8fde\u63a5\u7684\u90a3\u4e2a\u70b9\u67d3\u767d\uff0c\u5219\u540e\u624b\u5fc5\u987b\u67d3\u9ed1\u90a3\u4e2a\u53f6\u5b50\uff0c\u5426\u5219\u4e0b\u4e00\u6b65\u5148\u624b\u5373\u53ef\u628a\u53f6\u5b50\u67d3\u767d\u8d62\u5f97\u6e38\u620f\u3002\n\n\u8003\u8651\u5982\u679c\u6709\u4e00\u4e2a\u70b9\u8fde\u63a5\u4e86\u4e24\u4e2a\u53f6\u5b50\uff0c\u90a3\u4e48\u5148\u624b\u5148\u628a\u5b83\u67d3\u767d\uff0c\u540e\u624b\u5c31\u56e0\u4e3a\u65e0\u6cd5\u987e\u53ca\u4e24\u4e2a\u53f6\u5b50\u800c\u8f93\u6389\u6e38\u620f\u3002\n\n\u5047\u8bbe\u5df2\u7ecf\u4e0d\u5b58\u5728\u8fd9\u79cd\u60c5\u51b5\uff0c\u8003\u8651\u8fde\u7eed\u7684\u4e09\u4e2a\u70b9 $a, b, c$\uff0c\u8003\u8651\u4e00\u4e2a\u65f6\u523b $a, c$ \u5468\u56f4\u7684\u9664\u4e86 $b$ \u4e4b\u5916\u7684\u70b9\u5168\u90e8\u67d3\u767d\uff0c\u6b64\u65f6\u5148\u624b\u5c06 $b$ \u67d3\u767d\u3002\n\n\u90a3\u4e48\u540c\u4e0a\uff0c\u540e\u624b\u5c06\u4f1a\u8f93\u6389\u6e38\u620f\u3002\u6211\u4eec\u6b64\u65f6\u8003\u8651\u4ee5 $b$ \u4e3a\u6839\u65f6 $a, c$ \u7684\u5b50\u6811\uff0c\u5982\u679c\u9664\u4e86 $a, c$ \u672c\u8eab\u5916\u5747\u6709\u5076\u6570\u4e2a\u70b9\uff0c\u53ef\u4ee5\u8bc1\u660e\u540e\u624b\u5fc5\u8d25\u3002\n\n\u8fd9\u662f\u56e0\u4e3a\u5148\u624b\u53ef\u4ee5\u6bcf\u6b21\u627e\u5230 $a$ \u6216 $c$ \u5b50\u6811\u4e2d\u6df1\u5ea6\u6700\u5927\u7684\u53f6\u5b50\u8282\u70b9\uff0c\u628a\u5b83\u7684\u53cc\u4eb2\u7ed3\u70b9\u67d3\u767d\uff0c\u903c\u8feb\u540e\u624b\u67d3\u9ed1\u90a3\u4e2a\u53f6\u5b50\u3002\n\n\u6b64\u65f6\u5b8c\u5168\u7b49\u4ef7\u4e8e\u628a\u8fd9\u4e24\u4e2a\u88ab\u67d3\u8272\u7684\u70b9\u4ece\u6811\u4e2d\u5220\u53bb\uff0c\u7528\u6570\u5b66\u5f52\u7eb3\u6cd5\u53ef\u77e5\u6700\u7ec8\u4f1a\u5220\u6210 $a, c$ \u65e0\u5b69\u5b50\u8282\u70b9\u7684\u60c5\u51b5\uff0c\u5c06 $b$ \u67d3\u767d\u8d62\u5f97\u6e38\u620f\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff1a\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u8282\u70b9\uff0c\u4ee5\u5b83\u4e3a\u6839\u65f6\u5b58\u5728\u81f3\u5c11\u4e24\u4e2a\u5b50\u6811\u65b9\u5411\u4e0a\u7684\u70b9\u6570\u4e3a\u5947\u6570\u5219\u5148\u624b\u5fc5\u80dc\u3002\n\n\u663e\u7136\u5982\u679c $N$ \u4e3a\u5947\u6570\uff0c\u4efb\u53d6\u4e00\u4e2a\u8fde\u63a5\u53f6\u5b50\u8282\u70b9\u7684\u70b9\uff0c\u5fc5\u5b58\u5728\u53e6\u4e00\u4e2a\u70b9\u6570\u4e3a\u5947\u6570\u7684\u5b50\u6811\uff0c\u8fd9\u662f\u56e0\u4e3a\u9664\u4e86\u5b83\u548c\u53f6\u5b50\u8fd8\u6709\u5947\u6570\u4e2a\u70b9\u3002\n\n\u6240\u4ee5 $N$ \u4e3a\u5947\u6570\u65f6\u5148\u624b\u5fc5\u80dc\u3002\u5982\u679c $N$ \u4e3a\u5076\u6570\uff1f\u6211\u4eec\u53ef\u4ee5\u505a\u4e00\u6b21 DFS \u6765\u8ba1\u7b97\u662f\u5426\u5b58\u5728\u8fd9\u6837\u7684\u70b9\uff0c\u5982\u679c\u5b58\u5728\u4e5f\u662f\u5148\u624b\u5fc5\u80dc\u3002\n\n\u5982\u679c\u4e0d\u5b58\u5728\u5462\uff1f\u6211\u5e76\u4e0d\u6e05\u695a\u4e3a\u4f55\u4e0d\u5b58\u5728\u65f6\u5148\u624b\u5fc5\u8d25\uff0c\u6b64\u65f6\u6211\u76f4\u63a5\u628a\u4ee3\u7801\u63d0\u4ea4\u4e0a\u53bb\u5c31 AC \u4e86\uff08\u6211\u5f53\u65f6\u5728 virtual participating\uff09\u3002\n\n\u8d5b\u540e\u67e5\u770b\u9898\u89e3\uff0c\u53d1\u73b0\u6211\u7684 DP \u8fc7\u7a0b\uff08\u8bf7\u770b\u4ee3\u7801\uff09\u7adf\u7136\u7b49\u4ef7\u4e8e\u6c42\u6811\u4e0a\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d\uff0c\u5373\u9009\u53d6\u4e00\u534a\u7684\u8fb9\u8986\u76d6\u6240\u6709\u70b9\u3002\n\n\u6b64\u65f6\u601d\u8def\u5c31\u6e05\u6670\u4e86\uff0c\u5982\u679c\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u5148\u624b\u6bcf\u67d3\u767d\u4e00\u4e2a\u70b9\uff0c\u540e\u624b\u5c31\u67d3\u9ed1\u5b83\u7684\u5339\u914d\u70b9\uff0c\u5f88\u663e\u7136\u6bcf\u4e2a\u70b9\u6700\u7ec8\u90fd\u4f1a\u88ab\u67d3\u9ed1\u3002\n\n```cpp\n#include <cstdio>\n#include <vector>\n\nconst int MN = 100005;\n\nint N;\nstd::vector<int> G[MN];\n\nint Ans, siz[MN];\nvoid DFS(int u, int p) {\n\tsiz[u] = 1;\n\tint s = 0;\n\tfor (int v : G[u]) if (v != p) {\n\t\tDFS(v, u);\n\t\ts += siz[v];\n\t\tsiz[u] ^= siz[v]; \n\t}\n\tif (s >= 2) Ans = 1;\n}\n\nint main() {\n\tscanf(\"%d\", &N);\n\tif (N & 1) return puts(\"First\"), 0;\n\tfor (int i = 1, x, y; i < N; ++i) {\n\t\tscanf(\"%d%d\", &x, &y);\n\t\tG[x].push_back(y);\n\t\tG[y].push_back(x);\n\t}\n\tDFS(1, 0);\n\tputs(Ans ? \"First\" : \"Second\");\n\treturn 0;\n}\n```",
        "postTime": 1596369386,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 AT2376 \u3010[AGC014D] Black and White Tree\u3011"
    },
    {
        "content": "\u95ee\u9898\u663e\u7136\u5c31\u662f\u9752\u6728\u4e0d\u80fd\u8ba9\u4efb\u610f\u4e00\u4e2a\u767d\u70b9\u65c1\u8fb9\u6ca1\u6709\u9ed1\u70b9\u3002\n\n\u5982\u679c\u8be5\u6811\u6709\u5b8c\u7f8e\u5339\u914d\uff0c\u90a3\u4e48\u663e\u7136\u662f\u540e\u624b\u8d62\u3002\u56e0\u4e3a\u4e0d\u7ba1\u5148\u624b\u9009\u4ec0\u4e48\uff0c\u540e\u624b\u53ea\u8981\u9009\u5148\u624b\u5bf9\u5e94\u7684\u70b9\u5c31\u53ef\u4ee5\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u6765\u8003\u8651\u6ca1\u6709\u5b8c\u7f8e\u5339\u914d\u7684\u60c5\u51b5\u3002\n\n\u6700\u7279\u6b8a\u7684\u5e94\u8be5\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u56e0\u4e3a\u53ea\u6709\u4e00\u4e2a\u70b9\u4e0e\u5b83\u76f8\u90bb\u3002\u5982\u679c\u53f6\u5b50\u8282\u70b9\u662f\u767d\u70b9\uff0c\u90a3\u4e48\u53f6\u5b50\u8282\u70b9\u7684\u201c\u7236\u4eb2\u201d\u5fc5\u987b\u662f\u9ed1\u70b9\uff1b\u800c\u5982\u679c\u53f6\u5b50\u662f\u9ed1\u70b9\uff0c\u90a3\u4e48\u53f6\u5b50\u8282\u70b9\u7684\u201c\u7236\u4eb2\u201d\u5fc5\u987b\u662f\u767d\u70b9\u3002\u8fd9\u91cc\u7684\u201c\u7236\u4eb2\u201d\u662f\u6307\u5b83\u76f8\u90bb\u7684\u70b9\u3002\n\n\u6211\u4eec\u8003\u8651\u5148\u624b\u5148\u4efb\u610f\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u201c\u7236\u4eb2\u201d\uff0c\u90a3\u540e\u624b\u5fc5\u987b\u8ddf\u7740\u9009\u53f6\u5b50\u3002\u7136\u540e\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e24\u4e2a\u70b9\u5220\u6389\uff0c\u5e76\u4e0d\u4f1a\u5f71\u54cd\u7ed3\u679c\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u6bcf\u6b21\u8fd9\u6837\u5220\u4e0b\u53bb\u3002\u7531\u4e8e\u8fd9\u68f5\u6811\u6ca1\u6709\u5b8c\u7f8e\u5339\u914d\uff0c\u6700\u540e\u80af\u5b9a\u662f\u4e00\u4e9b\u96f6\u6563\u7684\u70b9\u3002\u800c\u6b64\u65f6\u5148\u624b\u9009\u62e9\u5176\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u70b9\u5373\u53ef\u3002\n\n\u6211\u4eec\u8003\u8651\u5982\u4f55\u6c42\u51fa\u662f\u5426\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u76f4\u63a5\u6a21\u62df\u4e0a\u9762\u7684\u6e38\u620f\u8fc7\u7a0b\uff0c\u56e0\u4e3a\u5982\u679c\u5148\u624b\u6309\u8fd9\u4e2a\u7b56\u7565\u6ca1\u6709\u8d62\uff0c\u90a3\u4e48\u80af\u5b9a\u6ca1\u6709\u5b8c\u7f8e\u5339\u914d\u3002\n\n\u6211\u4eec\u4efb\u9009\u4e00\u4e2a\u8282\u70b9\u4e3a\u6839\u8fdb\u884c`dfs`\uff0c\u5c06\u513f\u5b50\u5904\u7406\u5b8c\u540e\u5982\u679c\u8fd9\u4e2a\u70b9\u8fd8\u6ca1\u88ab\u5220\uff0c\u90a3\u4e48\u628a\u5b83\u5c31\u5df2\u7ecf\u53d8\u6210\u53f6\u5b50\u8282\u70b9\u4e86\uff0c\u628a\u5b83\u548c\u5b83\u7236\u4eb2\u4e00\u8d77\u5220\u6389\u3002\n\n```cpp\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 100005;\n\nstruct Edge\n{\n    int to, nxt;\n} e[maxn << 1];\n\nint first[maxn];\n\ninline void add_edge(int from, int to)\n{\n    static int cnt = 0;\n    e[++cnt].nxt = first[from];\n    first[from] = cnt;\n    e[cnt].to = to;\n    e[++cnt].nxt = first[to];\n    first[to] = cnt;\n    e[cnt].to = from;\n}\n\nbool shan[maxn];\nint n;\n\ninline void dfs(int now, int fa)\n{\n    for(int i = first[now]; i; i = e[i].nxt)\n    {\n        register int to = e[i].to;\n        if(to != fa)\n            dfs(to, now);\n    }\n    if(!shan[now])\n    {\n        if(shan[fa])\n        {\n            puts(\"First\");\n            exit(0);\n        }\n        shan[now] = shan[fa] = true;\n    }\n}\n\nint main()\n{\n    shan[0] = true;\n    scanf(\"%d\", &n);\n    for(int i = 1, f, t; i < n; ++i)\n    {\n        scanf(\"%d%d\", &f, &t);\n        add_edge(f, t);\n    }\n    dfs(1, 0);\n    puts(\"Second\");\n    return 0;\n}\n```",
        "postTime": 1554000619,
        "uid": 84088,
        "name": "pufanyi",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT2376 \u3010Black and White Tree\u3011"
    },
    {
        "content": "Black and white \u63a2\u7d22\u6d41\u7a0b\n1. \u5f53\u6709```2```\u4e2a\u53f6\u5b50\u5171\u7528\u540c\u4e00\u4e2a\u7236\u4eb2\u65f6\uff0c\u5148\u624b\u8d62\u3002 \n2. \u9009\u53f6\u5b50\u4e0d\u5982\u9009\u5b83\u7236\u4eb2\u3002\n3. \u60f3path \u7684\u60c5\u5f62\u3002\u5f97\u5230: \u5947\u6570\u5148\u624b\u8d62\uff0c\u5076\u6570\u540e\u624b\u8d62\u3002**\u5148\u624b\u8d62\u65f6\u6709\u4e2a\u8df32\u7684\u7b56\u7565\u3002**\n4. \u60f33-star \u7684\u60c5\u5f62\u3002\u5f97\u5230: \n\n    \u4ece\u4e00\u4e2a\u72b6\u6001\u5982\u679c\u53ef\u4ee5\u5230```2```\u4e2a\u6216\u4ee5\u4e0a\u5148\u624b\u8d62\u5f97\u72b6\u6001\uff0c\u90a3\u4e48\u53ef\u4ee5\u8d62\u3002```\u5947\u5947\u5076\uff0c\u5947\u5947\u5947```\u90fd\u662f\u5148\u624b\u5fc5\u80dc\u3002\u540c\u65f6\uff0c```\u5076\u5076\u5076```\u4e5f\u662f\u5148\u624b\u5fc5\u80dc\u3002\n\n    \u552f\u72ec```\u5947\u5076\u5076```**\u65e0\u6cd5\u83b7\u80dc\u3002 \u5148\u624b\u8d62\u65f6\u6709\u4e2a\u8df32\u7684\u7b56\u7565**\u3002\u731c\u60f3```\u8df32```\u662f\u6700\u4f73\u7b56\u7565\u3002 \n\n    \u5b9a\u4e49:\u5220\u9664\u4e00\u4e2a\u5ea6\u4e3a```1```\u7684\u70b9\u548c\u5b83\u76f8\u90bb\u7684\u5ea6\u4e3a```2```\u7684\u70b9\uff0c\u53eb\u505a\u4e00\u6b21\u201c**\u538b\u7f29**\u201d\u3002\n\n    \u7b80\u5199**\u5148\u624b\u80dc=\u80dc\u3002\u5148\u624b\u8d25=\u8d25**\u3002\u5bb9\u6613\u89c2\u5bdf\u5f97\u5230:\n\n    \u7ed3\u8bba 1:```\u4e0d\u80fd\u538b\u7f29\u7684\u6811\uff0c\u5148\u624b\u80dc\u3002(\u56e0\u4e3a\u5b58\u5728\u8282\u70b9\u67092\u4e2a\u6216\u4ee5\u4e0a\u5ea6\u4e3a 1 \u7684\u90bb\u5c45)```\n\n    \u7ed3\u8bba 2:```\u5982\u679c\u4e00\u68f5\u6811T\u4f5c\u538b\u7f29\u53d8\u6210T\u2019\uff0cT\u2019\u80dc\u5f97\u5230T\u80dc\u3002 ```\n\n    \u731c\u60f3:```\u53cd\u8fc7\u6765\u4e5f\u6210\u7acb\u3002\u5982\u679c\u4e00\u68f5\u6811T\u4f5c\u538b\u7f29\u540e\u53d8\u6210T, T\u2019\u8d25\u5f97\u5230T\u8d25\u3002\u6362\u53e5\u8bf4\uff0cT\u4e0eT\u2019\u80dc\u8d25\u60c5\u51b5\u76f8\u540c(\u7b49\u6548)\u3002(\u82e5\u6210\u7acb\uff0c\u610f\u5473\u7740\u8df32\u662f\u6700\u4f73\u7b56\u7565\u3002) ```\n\n    \u8bc1\u660e\u4e0a\u8ff0\u731c\u60f3\u67092\u4e2a\u65b9\u6cd5: \n\n    <1> copy \u6cd5\n\n    \u5047\u8bbe```T\u2019```\u8d25\u3002\u6211\u4eec\u6765\u8bc1\u660e```T```\u8d25\u3002\n\n    \u9996\u5148\uff0c```T\u2019```\u8d25\u610f\u5473\u7740\u540e\u624bBob\u6709\u4e00\u4e2a\u5fc5\u80dc\u7b56\u7565\u3002 \n\n    \u6839\u636e\u8fd9\u4e2a\u5fc5\u80dc\u7b56\u7565\uff0cBob\u5f88\u5bb9\u6613copy\u51fa\u5728```T```\u4e0a\u7684\u4e00\u4e2a\u5fc5\u80dc\u7b56\u7565: \n    ```\n    \u5f53 Alice \u9009\u4e86\u88ab\u538b\u7f29\u7684\u4e00\u4e2a\u70b9\uff0cBob \u7acb\u5373\u9009\u88ab\u538b\u7f29\u7684\u53e6\u4e00\u4e2a\u70b9\u3002\u5176\u4ed6\u4e0d\u53d8\u3002\n    ```\n\n   <2>**\u8f6c\u8bc1\u8be5\u731c\u60f3\u7684\u5982\u4e0b\u7b49\u4ef7\u7ed3\u8bba**: \n    ```\n    \u7ed3\u8bba3:T\u80dc\u662fT\u65e0\u5b8c\u7f8e\u5339\u914d\u7684\u5145\u8981\u6761\u4ef6\u3002 \n    ```\n\n    \u5148\u8bc1\u7b49\u4ef7\u6027(\u7b80\u5355)\n    \u53cd\u590d\u5e94\u7528\u731c\u60f3\uff0c\u914d\u5408```\u7ed3\u8bba1```\uff0c\u5373\u53ef\u5f97\u5230```\u7ed3\u8bba3```\u3002\u56e0\u6b64\u53ea\u8981\u8bc1\u660e```\u7ed3\u8bba3```\u5c31\u53ef\u4ee5\u5f97\u5230\u731c\u60f3\u3002 \n\n    \u6839\u636e\u538b\u7f29\u7684\u5b9a\u4e49\uff0c```T```\u65e0\u5b8c\u7f8e\u5339\u914d\u662f```T\u2019```\u65e0\u5b8c\u7f8e\u5339\u914d\u7684\u5145\u8981\u6761\u4ef6\u3002\u518d\u6839\u636e```\u7ed3\u8bba3```\uff0c\u5f97```T```\u80dc\u662f```T\u2019```\u80dc\u7684\u5145\u8981\u6761\u4ef6\u3002 \n\n    \u4e0b\u8bc1```\u7ed3\u8bba3```\u7684\u6b63\u786e\u6027(\u7b80\u5355) \n    1. \u6709\u5b8c\u7f8e\u5339\u914d\u65f6\u3002Bob\u663e\u7136\u6709\u4e00\u4e2a\u5fc5\u80dc\u7b56\u7565:```\u5f53Alice\u9009a\uff0cBob \u9009a\u5339\u914d\u7684\u70b9\u3002 ```\n    2. \u65e0\u5b8c\u7f8e\u5339\u914d\u65f6\uff0c\u6211\u4eec\u6765\u6784\u9020Alice\u7684\u4e00\u4e2a\u5fc5\u80dc\u7b56\u7565\u3002 \n\n    \u627e\u5230\u8282\u70b9 ```u```\u3002\u4ed6\u6709\u81f3\u5c11```2 ```\u4e2a\u5b64\u7acb\u7684\u513f\u5b50\u70b9```c1,...,cx,x>=2```\u3002```u```\u7684\u5176\u4ed6\u5b50\u5b59\u5339\u914d\u4e0a\u3002Alice\u4e0d\u65ad\u9009\u5339\u914d\u4e0a\u7684\u70b9\u4e2d\u5ea6\u4e3a```2```\u7684\u90a3\u4e2a\u70b9\u3002\u6700\u7ec8\u5269\u4e0b ```u,c1,..,cx```\u3002\u7136\u540e\u9009```u```\u3002 \n\n**\u6700\u7ec8\u7b97\u6cd5**\uff1a\u8ba1\u7b97\u6811\u7684\u5b8c\u7f8e\u5339\u914d\u6709\u5f88\u591a\u7b97\u6cd5\u3002\u6bd4\u5982\u8bf4\uff0c\u53ef\u4ee5dp\u3002\n```\nf[v]=0,1,2.\n```\n```\n0\u8868\u793at[v]\u7b49\u6548\u4e3a\u7a7a\uff0c1\u8868\u793a\u7b49\u6548\u4e3a1\u4e2a\u70b9\u30022\u8868\u793a\u65e0\u5339\u914d\u3002\u7528DFS\u8ba1\u7b97f\u3002O(n)\u3002 \n```\n\n------------\n**Code**\n\n```cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nconst int maxN = 1e5;\nvector<int> e[maxN];\n\nint dfs(int u, int pre) {\n\tint result = 0;\n\tfor (int i = 0; i < e[u].size(); i++) {\n\t\tif (e[u][i] != pre) {\n            int tmp = dfs(e[u][i], u);\n            if (tmp > 1) {\n                return tmp;\n            }\n            result += tmp;\n        }\n\t}\n\n\treturn result ^ 1;\n}\n\nint main()\n{\n\tint n = 0;\n    cin >> n;\n\n\tfor (int i = 1; i < n; i++) {\n        int u = 0;\n        int v = 0;\n        cin >> u >> v;\n\n        e[u - 1].push_back(v - 1);\n        e[v - 1].push_back(u - 1);\n\t}\n\t\n\tif (dfs(0, 0) >= 1) {\n        cout << \"First\" << endl;\n    } else {\n        cout << \"Second\" << endl;\n    }\n\t\n\treturn 0;\n}\n```\n",
        "postTime": 1641617428,
        "uid": 384366,
        "name": "Gin101",
        "ccfLevel": 5,
        "title": "AT2376\u9898\u89e3"
    },
    {
        "content": "## \u601d\u8def\n\n\u95ee\u9898\u662f\u540e\u624b\u4e0d\u80fd\u8ba9\u4efb\u610f\u4e00\u4e2a\u767d\u70b9\u65c1\u8fb9\u6ca1\u6709\u9ed1\u70b9\u3002\n\n\u5148\u60f3\u5982\u679c\u5728\u94fe\u4e0a\u8981\u600e\u4e48\u505a\uff0c\u5217\u4e3e\u4e00\u4e0b\uff1a\n\n- $ n=1 $ First\n- $ n=2 $ Second\n- $ n=3 $ First\n- $ n=4 $ Second\n\n\u5148\u624b\u67d3\u767d\u7b2c\u4e8c\u4e2a\uff0c\u540e\u624b\u5fc5\u7136\u67d3\u7b2c\u4e00\u4e2a\uff0c\u72b6\u6001\u8f6c\u4e3a $ n-2 $\uff0c\u5224\u65ad\u5947\u5076\u6027\u5c31\u53ef\u4ee5\u4e86\uff08\u522b\u7684\u4e00\u6837\uff09\u3002\n\n\u518d\u653e\u5230\u6811\u4e0a\u60f3\u4e00\u4e0b\uff1a\n\n\u5982\u679c\u8fd9\u68f5\u6811\u6709\u5b8c\u7f8e\u5339\u914d\u7684\u8bdd\uff0c\u5148\u624b\u5fc5\u8f93\u3002\n\u5426\u5219\uff0c\u5148\u624b\u4f1a\u628a\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u7236\u4eb2\u67d3\u767d\uff0c\u540e\u624b\u5c31\u88ab\u8feb\u628a\u8fd9\u4e2a\u53f6\u5b50\u8282\u70b9\u67d3\u9ed1\u3002\u90a3\u4e48\u53c8\u8f6c\u79fb\u5230\u4e86\u4e00\u4e2a\u65b0\u7684\u6811\u4e0a\uff0c\u4e14\u4e00\u6837\u662f\u539f\u6765\u7684\u5148\u624b\u53d6\u7136\u540e\u540e\u624b\u53d6\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u628a\u8fd9\u4e00\u7ec4\u8282\u70b9\u770b\u505a\u7a7a\u8282\u70b9\uff0c\u4e5f\u5c31\u662f 0\uff0c\u5426\u5219\u5c31\u662f 1\u3002\u8fd9\u6837\u4e00\u7ec4\u4e00\u7ec4\u7684\u5220\u6389\uff0c\u53ef\u4ee5\u76f4\u63a5\u6a21\u62df\u4e0a\u9762\u7684\u8fc7\u7a0b\u3002\u5982\u679c\u51fa\u73b0 1\n\n       \t    /  \\\n               1    1 \n               \n\u7684\u8fd9\u79cd\u60c5\u51b5\uff0c\u5148\u624b\u5fc5\u8d62\uff0c\u5c31\u53ef\u4ee5\u63d0\u524d\u7ed3\u675f\u5566\u3002\u4e14\u5982\u679c\u6700\u540e\u7684\u7ed3\u679c $ res\\geq 1 $ \u7684\u8bdd\u4e5f\u662f\u5148\u624b\u5fc5\u8d62\uff0c\u5426\u5219\u540e\u624b\u8d62\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>//\u795d\u5927\u5bb6\u5b66\u4e60\u6109\u5feb\uff01\uff01\uff01\n\nusing namespace std;\n\nconst int maxn=1e5+10;\nvector<int> tree[maxn];\n\nint dfs(int x,int f){\n\tint ret=0;\n\tfor(int i=0;i<tree[x].size();i++){\n\t\tint v=tree[x][i];\n\t\tif(v!=f){\n\t\t\tint r=dfs(v,x);\n\t\t\tif(r>1) return r;\n\t\t\tret+=r;\n\t\t}\n\t}\n\treturn (ret^1);\n}\n\nint main(){\n\t\n\tint n;\n\t\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++){\n\t\tint u,v;\n\t\tscanf(\"%d %d\",&u,&v);\n\t\ttree[u].push_back(v);\n\t\ttree[v].push_back(u);\n\t}\n\t\n\tif(dfs(1,0)>=1) puts(\"First\");\n\telse puts(\"Second\");\n\t\n\treturn 0;\n}\n\n\n```\n",
        "postTime": 1639236660,
        "uid": 234469,
        "name": "hxyqwq",
        "ccfLevel": 6,
        "title": "AT2376 \u9898\u89e3"
    },
    {
        "content": "### \u9898\u76ee\u5730\u5740\uff1a\n[AGC014D](https://agc014.contest.atcoder.jp/tasks/agc014_d)\n\n### \u9898\u610f\uff1a\n\n\u7ed9\u4f60\u4e00\u68f5\u6811\uff0c\u4e24\u4e2a\u4eba\u8f6e\u6d41\u5728\u4e0a\u9762\u67d3\u8272\uff0c\u6bcf\u4e2a\u4eba\u6bcf\u6b21\u4f1a\u628a\u4e00\u4e2a\u8282\u70b9\u67d3\u6210\u9ed1\u8272\u6216\u8005\u767d\u8272\uff0c\u5f53\u6240\u6709\u70b9\u90fd\u88ab\u67d3\u4e86\u8272\u540e\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u767d\u8272\u7684\u8282\u70b9\uff0c\u5b83\u7684\u6240\u6709\u76f8\u90bb\u7684\u8282\u70b9\u5747\u4e3a\u767d\u8272\uff0c\u5219\u5148\u624b\u80dc\uff0c\u5426\u5219\u540e\u624b\u80dc\uff0c\u95ee\u5148\u624b\u5fc5\u80dc\u8fd8\u662f\u540e\u624b\u5fc5\u80dc\u3002\n\n### \u9898\u89e3\uff1a\n\n\u8003\u573a\u4e0a\u60f3\u51fa\u4e86\u4e00\u79cd\u4e71\u641e\u505a\u6cd5\uff1a\n\n\u663e\u7136\u82e5\u6709\u4e00\u4e2a\u8282\u70b9\uff0c\u5b83\u6709\u4e24\u4e2a\u4ee5\u4e0a\u7684\u513f\u5b50\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5148\u624b\u67d3\u8fd9\u4e2a\u70b9\u4e3a\u767d\u8272\u5c31\u5fc5\u80dc\uff0c\u6211\u4eec\u79f0\u8fd9\u79cd\u70b9\u4e3a\u5fc5\u80dc\u8282\u70b9\u3002\n\n\u7136\u540e\u6211\u4eec\u8003\u8651\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\n\n\u82e5\u4e00\u4e2a\u8282\u70b9\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u513f\u5b50\uff0c\u4e14\u8fd9\u4e2a\u513f\u5b50\u8fd8\u662f\u53f6\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5148\u624b\u4e00\u5b9a\u53ef\u4ee5\u5728\u8fd9\u4e2a\u8282\u70b9\u4e0a\u67d3\u4e0a\u767d\u8272\uff0c\u540e\u624b\u5c31\u4e00\u5b9a\u8981\u5728\u53f6\u5b50\u8282\u70b9\u4e0a\u67d3\u9ed1\u8272\u3002\u4e8e\u662f\u8fd9\u4e24\u4e2a\u8282\u70b9\u5c31\u5bf9\u6211\u4eec\u7684\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\u4e86\uff0c\u53ef\u4ee5\u5220\u53bb\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u662f\u767d\u8272\u8282\u70b9\u3002\n\n\u5f53\u6211\u4eec\u628a\u8fd9\u79cd\u70b9\u5168\u90e8\u5220\u6389\u540e\uff0c\u6211\u4eec\u5728\u5269\u4e0b\u7684\u6811\u4e0a\u627e\u662f\u5426\u5b58\u5728\u5fc5\u80dc\u8282\u70b9\uff0c\u82e5\u5b58\u5728\u5219\u5148\u624b\u5fc5\u80dc\uff0c\u82e5\u4e0d\u5b58\u5728\u5219\u540e\u624b\u5fc5\u80dc\u3002\n\n\u6ce8\u610f\u5982\u679c\u5220\u5b8c\u70b9\u540e\u53ea\u5269\u6839\u90a3\u4e5f\u662f\u5148\u624b\u5fc5\u80dc\u3002\n\n \n\n\u5173\u4e8e\u5220\u70b9\u7684\u65b9\u6cd5\uff0c\u6211\u4eec\u53ea\u8981\u627e\u5230size=2\u7684\u8282\u70b9\uff0c\u6253\u4e2a\u6807\u8bb0\u5373\u53ef\u3002\n\n \n\n\u4e0d\u8fc7\u597d\u50cf\u662f\u5b8c\u7f8e\u5339\u914d\u7684\u9898\uff1f\u8dd1\u7f51\u7edc\u6d41\uff1fDinic\u5206\u5c42\u56fe\u98de\u5feb\uff1f\n\n\u4ee3\u7801\uff1a\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\n \n#define MAXN 1000001\n \nint size[MAXN],cnt;\nvector<int> edge[MAXN];\n \nvoid addedge(int u,int v)\n{\n\tedge[u].push_back(v);\n}\n \nvoid dfs1(int now,int father)\n{\n\tsize[now]=1;\n\tfor(int i=0;i<edge[now].size();++i)\n\t{\n\t\tif(edge[now][i]==father)continue;\n\t\tdfs1(edge[now][i],now);\n\t\tif(size[edge[now][i]]==2)size[edge[now][i]]=-1;\n\t\telse size[now]+=size[edge[now][i]];\n\t}\n}\n \nvoid dfs2(int now,int father)\n{\n\t++cnt;\n\tint num=0;\n\tfor(int i=0;i<edge[now].size();++i)\n\t{\n\t\tif(edge[now][i]==father)continue;\n\t\tif(size[edge[now][i]]==1){++num;}\n\t\tif(size[edge[now][i]]!=-1)dfs2(edge[now][i],now);\n\t}\n\tif(num>=2){puts(\"First\");exit(0);}\n}\n \nint main()\n{\n\tint n;\n\tscanf(\"%d\",&n);\t\n\tfor(int i=1;i<n;++i)\n\t{\n\t\tint u,v;\n\t\tscanf(\"%d%d\",&u,&v);\n\t\taddedge(u,v);\n\t\taddedge(v,u);\n\t}\n\tdfs1(1,0);\n\tdfs2(1,0);\n\tif(cnt==1)puts(\"First\");else puts(\"Second\");\n}\n```",
        "postTime": 1534426081,
        "uid": 34886,
        "name": "ezoixx130",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 AT2376 \u3010Black and White Tree\u3011"
    },
    {
        "content": "## \u9898\u89e3\uff1a\n\u9996\u5148\u60f3\u5230\u5982\u679c\u6709\u4e00\u4e2a\u70b9\u7684\u513f\u5b50\u4e2d\u5305\u542b\u4e24\u4e2a\u6216\u4ee5\u4e0a\u4e2a\u53f6\u5b50\u7ed3\u70b9\uff0c\u5148\u624b\u5fc5\u80dc\uff0c\u5426\u5219\u5148\u624b\u5fc5\u8d25\u3002\n\n\u53d1\u73b0\u8fd9\u6837\u4e0d\u884c\uff0c\u5176\u5b9e\u5148\u624b\u53ef\u4ee5\u7275\u5236\u5bf9\u624b\uff0c\u9009\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9\u7684\u7236\u4eb2\uff0c\u90a3\u4e48\u540e\u624b\u5c31\u5fc5\u987b\u4e0b\u5728\u8fd9\u4e2a\u53f6\u5b50\u7ed3\u70b9\u4e0a\u3002\n\n\u8fd9\u76f8\u5f53\u4e8e\u628a\u8fd9\u4e24\u4e2a\u8282\u70b9\u90fd\u5220\u6389\u4e86\uff0c\u4ece\u800c\u53ef\u4ee5\u5c06\u6811\u7684\u5f62\u6001\u53d8\u4e3a\u5fc5\u80dc\u7684\u72b6\u6001\u3002\n\n\u6211\u5b9e\u5728\u662f\u592a\u7b28\u4e86\uff0c\u4ee5\u4e3a\u53ea\u6709\u5728\u4e00\u6761\u94fe\u7684\u60c5\u51b5\u4e0b\u624d\u80fd\u5220\uff0c\u5176\u5b9e\u53ea\u8981\u51d1\u591f\u4e24\u4e2a\u8282\u70b9\u5c31\u80fd\u5220\uff0c\u6700\u540e\u6ca1\u5220\u5b8c\u5c31\u8bf4\u660e\u5148\u624b\u5fc5\u80dc\uff0c\u5426\u5219\u540e\u624b\u5fc5\u80dc\u3002\n\n## CODE\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<cstdlib>\nusing namespace std;\n\nint tot=0,h[100005];\nint n,x,y,siz[100005],f[100005];\nstruct Edge{\n\tint x,next;\n}e[200005];\n\ninline void add_edge(int x,int y){\n\te[++tot].x=y;\n\te[tot].next=h[x],h[x]=tot;\n}\n\nbool dfs(int x,int fa){\n\tsiz[x]=1;\n\tint cnt=0;\n\tfor(int i=h[x];i;i=e[i].next){\n\t\tif(e[i].x==fa)continue;\n\t\tif(dfs(e[i].x,x))return true;\n\t\tif(siz[e[i].x]){\n\t\t\tcnt++,siz[x]=0;\n\t\t\tif(cnt==2)return true;\n\t\t}\n\t}\n\treturn false;\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<n;i++){\n\t\tscanf(\"%d%d\",&x,&y);\n\t\tadd_edge(x,y);\n\t\tadd_edge(y,x);\n\t}\n\tprintf(dfs(1,0)||siz[1]?\"First\":\"Second\");\n}\n```",
        "postTime": 1534421203,
        "uid": 48147,
        "name": "2016gdgzoiLZH",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT2376 \u3010Black and White Tree\u3011"
    },
    {
        "content": "[AT2376 [AGC014D] Black and White Tree ](https://www.luogu.com.cn/problem/AT2376)\n\n$2022:10:11$ \u4fee\u590d\u90e8\u5206 $\\text{Latex}$\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u9898\u76ee\u5176\u5b9e\u8ba9\u6211\u4eec\u6c42\u7684\u5148\u624b\u83b7\u80dc\u6761\u4ef6\u662f\u67d3\u8272\u5b8c\u5168\u540e\u81f3\u5c11\u5b58\u5728\u4e00\u4e2a\u767d\u70b9\u4f7f\u5f97\u5b83\u7684\u5de6\u53f3\u76f8\u90bb\u70b9\u90fd\u662f\u767d\u70b9\u3002\n\n\n\n\u5bf9\u4e8e\u8fd9\u79cd\u9898\u76ee\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4ece\u7b80\u5355\u5230\u7279\u6b8a\u3002\u5148\u4ece\u6837\u4f8b $1$ \u65f6\u7684 $n=3$ \u4e0b\u624b\uff0c\u53d1\u73b0\u6b64\u65f6\u7684\u6811\u5fc5\u4e3a\u4e00\u6761\u94fe\uff0c\u90a3\u4e48\u5f53\u5148\u624b\u4e0b\u4e86\u94fe\u4e2d\u95f4\u7684\u70b9\uff0c\u5373\u5f53\u8fd9\u4e2a\u70b9\u8fde\u7740\u4e24\u4e2a\u76f8\u90bb\u70b9\u65f6\uff0c\u540e\u624b\u53ea\u80fd\u6d82\u9ed1\u5176\u4e2d\u4e00\u4e2a\u70b9\uff0c\u90a3\u5148\u624b\u5fc5\u7136\u80fd\u518d\u4e0b\u4e00\u4e2a\u70b9\u6ee1\u8db3\u83b7\u80dc\u8981\u6c42\u3002\n\n\n\n\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u70b9\u4f7f\u5f97\u5b83\u8fde\u7740\u4e24\u4e2a\u53f6\u5b50\uff0c\u90a3\u4e48\u5148\u624b\u4e0b\u5230\u5b83\u5c31\u5fc5\u80dc\u3002\u56e0\u4e3a\u540e\u624b\u53ea\u80fd\u6765\u5f97\u53ca\u5c06\u5176\u4e2d\u4e00\u4e2a\u70b9\u67d3\u9ed1\uff0c\u90a3\u4e48\u5148\u624b\u5c31\u53ef\u4ee5\u67d3\u8272\u53e6\u4e00\u4e2a\u70b9\u3002\n\n\n\n\u63a5\u4e0b\u6765\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u4e00\u822c\u60c5\u51b5\u3002\u5148\u624b\u6ca1\u6709\u4e24\u4e2a\u53f6\u5b50\u7684\u70b9\u53ef\u4e0b\uff0c\u90a3\u4e48\u4e3a\u4e86\u6700\u4f18\uff0c\u5c31\u4f1a\u4e0b\u6709\u4e00\u4e2a\u53f6\u5b50\u8282\u70b9\u7684\u70b9\u3002\u6b64\u65f6\u540e\u624b\u4e3a\u4e86\u9632\u6b62\u5148\u624b\u8d62\uff0c\u5fc5\u5b9a\u4f1a\u5728\u53f6\u5b50\u8282\u70b9\u67d3\u8272\uff0c\u90a3\u4e48\u8fd9\u4e24\u4e2a\u8282\u70b9\u5c31\u90fd\u53ef\u4ee5\u5220\u6389\u3002\u82e5\u5220\u7684\u65f6\u5019\u51fa\u73b0\u4e86\u8fde\u7740\u4e24\u4e2a\u53f6\u5b50\u7684\u70b9\uff0c\u90a3\u4e48\u5c31\u662f\u5148\u624b\u80dc\u3002\u5426\u5219\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u68f5\u6811\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u7684\u65f6\u5019\uff0c\u540e\u624b\u80dc\u5229\u3002\n\n\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u91c7\u7528 $\\text{dfs}$ \u6765\u6c42\u51fa\u8fd9\u68f5\u6811\u662f\u5426\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\u3002\u6211\u4eec\u4eff\u7167\u5148\u624b\u7684\u7b56\u7565\uff0c\u7136\u540e\u4f9d\u6b21\u5220\u70b9\uff0c\u82e5\u5220\u540e\u5b58\u5728\u4e00\u4e9b\u96f6\u6563\u7684\u70b9\uff0c\u90a3\u4e48\u8bf4\u660e\u6811\u6ca1\u6709\u5b8c\u7f8e\u5339\u914d\uff0c\u5373\u5148\u624b\u5fc5\u80dc\u3002\u82e5\u4e0d\u5b58\u5728\uff0c\u5219\u540e\u624b\u5fc5\u80dc\u3002\n\n\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$ \u3002\n\n\n\nAC Code:\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=1e5+10;\ntypedef long long ll;\nvector<int>e[maxn<<1];\nint vis[maxn];\nint op;\ninline int read()\n{\n\tint x=0,f=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9')\n\t{\n\t\tif(c=='-')\n\t\t\tf=-1;\n\t\tc=getchar();\n\t}\n\twhile(c>='0'&&c<='9')\n\t{\n\t\tx=(x<<3)+(x<<1)+(c^48);\n\t\tc=getchar();\n\t}\n\treturn x*f;\n}\ninline void dfs(int u,int f)\n{\n\tfor(int i=0;i<e[u].size();i++)\n\t{\n\t\tif(e[u][i]==f)\n\t\t\tcontinue;\n\t\tdfs(e[u][i],u);\n\t}\n\tif(vis[u]==0)\n\t{\n\t\tif(vis[f]==1)\n\t\t{\n\t\t\top=1;\n\t\t\treturn; \n\t\t}\n\t\tvis[u]=vis[f]=1;\n\t}\n\treturn;\n}\nint main()\n{\n\tvis[0]=1;\n\tint n;\n\tn=read();\n\tfor(int i=1;i<n;i++)\n\t{\n\t\tint u,v;\n\t\tu=read();v=read();\n\t\te[u].push_back(v);\n\t\te[v].push_back(u); \n\t}\n\tdfs(1,0);\n\tif(op==1)\n\t\tprintf(\"First\");\n\telse\n\t\tprintf(\"Second\");\n\treturn 0;\n}\n```\n\n\n\n\n\n",
        "postTime": 1664891919,
        "uid": 263414,
        "name": "Sktic",
        "ccfLevel": 6,
        "title": "AT2376 [AGC014D] Black and White Tree \u9898\u89e3"
    },
    {
        "content": "\u4e00\u9053\u5f88\u6709\u610f\u601d\u7684\u9898\u76ee\u55f7\u3002\n\n----------\n\n## \u9898\u610f\n\n\u7ed9\u4f60\u4e00\u68f5\u8d77\u521d\u65e0\u8272\u7684\u6811\uff0c\u4e24\u4eba\u8f6e\u6d41\u67d3\u8272\u3002\u5148\u624b\u9009\u62e9\u4e00\u4e2a\u70b9\u67d3\u767d\uff0c\u540e\u624b\u9009\u62e9\u4e00\u4e2a\u70b9\u67d3\u9ed1\u3002\u5982\u679c\u80fd\u591f\u4fdd\u8bc1\u67d3\u8272\u7684\u6700\u7ec8\u7ed3\u679c\u5b58\u5728\u67d0\u4e2a\u767d\u70b9\u7684\u5468\u56f4\u6ca1\u6709\u9ed1\u70b9\uff0c\u90a3\u4e48\u5148\u624b\u80dc\u5229\uff0c\u53cd\u4e4b\u540e\u624b\u80dc\u5229\u3002\n\n## \u5206\u6790\n\n\u5b8c\u7f8e\u5339\u914d\u662f\u6307\u5728\u4e00\u68f5\u6811\u4e2d\uff0c\u7ed3\u70b9\u4e24\u4e24\u5bf9\u5e94\u7684\u5339\u914d\u80fd\u591f\u8986\u76d6\u6240\u6709\u7684\u7ed3\u70b9\u3002\u5982\u679c\u4e00\u68f5\u6811\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u90a3\u4e48\u540e\u624b\u4e00\u5b9a\u4f1a\u8d62\uff0c\u56e0\u4e3a\u65e0\u8bba\u5148\u624b\u9009\u4e86\u54ea\u4e00\u4e2a\u70b9\uff0c\u540e\u624b\u90fd\u53ef\u4ee5\u9009\u62e9\u4ed6\u7684\u5339\u914d\u70b9\u5373\u53ef\u3002\n\n\u90a3\u4e48\u5982\u679c\u6ca1\u6709\u5b8c\u7f8e\u5339\u914d\uff0c\u6211\u4eec\u5c31\u8981\u8003\u8651\u7279\u6b8a\u7ed3\u70b9\u4e86\u3002\u4ece\u53f6\u5b50\u7ed3\u70b9\u51fa\u53d1\uff0c\u56e0\u4e3a\u53f6\u5b50\u7ed3\u70b9\u80fd\u591f\u5bf9\u5e94\u7684\u7ed3\u70b9\u6709\u4e14\u4ec5\u6709\u5b83\u7684\u76f4\u63a5\u7236\u4eb2\u3002\u82e5\u4ed6\u662f\u767d\u8272\uff0c\u5219\u4e3a\u4e86\u8ba9\u540e\u624b\u8d62\u4ed6\u7684\u7236\u4eb2\u4e00\u5b9a\u662f\u9ed1\u8272\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\n\n\u663e\u7136\u5728\u4e00\u68f5\u7ed3\u6784\u786e\u5b9a\u800c\u5f62\u6001\u4e0d\u786e\u5b9a\u7684\u6811\uff0c\u6211\u4eec\u53ea\u80fd\u8ba4\u4e3a\u5ea6\u4e3a $1$ \u7684\u7ed3\u70b9\u662f\u53f6\u5b50\u7ed3\u70b9\uff0c\u4e14\u552f\u4e00\u4e0e\u5176\u76f8\u8fde\u7684\u7ed3\u70b9\u662f\u5b83\u7684\u76f4\u63a5\u7236\u4eb2\u3002\u5148\u624b\u53bb\u67d3\u767d\u4e00\u4e2a\u53f6\u5b50\u7684\u76f4\u63a5\u7236\u4eb2\uff0c\u8fd9\u6837\u540e\u624b\u5fc5\u5b9a\u8981\u53bb\u67d3\u9ed1\u8fd9\u4e2a\u53f6\u5b50\uff0c\u90a3\u8fd9\u4e24\u4e2a\u70b9\u5c31\u53ef\u4ee5\u6254\u6389\u4e86\uff0c\u8fd9\u5e76\u4e0d\u4f1a\u5e72\u6270\u5230\u7b54\u6848\u7684\u8ba1\u7b97\u3002\n\n\u56e0\u6b64\u5982\u6b64\u5220\u9664\u8bb8\u591a\u7ed3\u70b9\u4e4b\u540e\uff0c\u53ea\u5269\u4e0b\u4e86\u4e00\u4e9b\u4e92\u4e0d\u8fde\u901a\u7684\u70b9\uff0c\u8fd9\u65f6\u5019\u5148\u624b\u9009\u62e9\u5176\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u70b9\u5c31\u53ef\u4ee5\u83b7\u5f97\u6e38\u620f\u7684\u80dc\u5229\u3002\n\n## \u4ee3\u7801\n\n\u5b9e\u9645\u4e0a\u6211\u4eec\u5b9e\u73b0\u662f\u5bb9\u6613\u7684\u3002\n\n\u9996\u5148\u8bfb\u5165\u5e76\u4e14\u4f7f\u7528\u90bb\u63a5\u8868\u5b58\u8fb9\uff08\u5b9e\u9645\u4e0a\u662f\u94fe\u5f0f\u524d\u5411\u661f\uff09\uff0c\u63a5\u7740\u6211\u4eec\u968f\u610f\u9009\u4e00\u4e2a\u7ed3\u70b9\uff08\u4e0d\u59a8\u9009\u62e9 $1$ \u7ed3\u70b9\uff09\u8fdb\u884c\u6df1\u641c\u3002\u641c\u5230\u53f6\u5b50\u7ed3\u70b9\u4e4b\u540e\u5982\u679c\u5b58\u5728\u53f6\u5b50\u7ed3\u70b9\u88ab\u5220\u9664\u800c\u7236\u4eb2\u7ed3\u70b9\u672a\u88ab\u5220\u9664\uff0c\u5219\u5148\u624b\u80dc\u5229\u3002\u5426\u5219\u6211\u4eec\u5c31\u628a\u8fd9\u4e24\u4e2a\u70b9\u4e00\u8d77\u5220\u9664\u8fdb\u884c\u4e0b\u4e00\u8f6e\u64cd\u4f5c\u3002\n\n\u6ce8\u610f\u8fd9\u662f\u68f5\u6811\uff0c\u8fde\u7684\u662f\u65e0\u5411\u8fb9\u3002\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define N 100005\nusing namespace std;\nstruct Edge{int v,nxt;}e[N*2];\nint head[N],cnt,n;\nvoid add(int u,int v){\n\te[++cnt].v=v;\n\te[cnt].nxt=head[u];\n\thead[u]=cnt;\n}bool del[N];\nvoid dfs(int now,int fa){\n    for(int i=head[now];i;i=e[i].nxt)\n        if(e[i].v!=fa)dfs(e[i].v,now);\n    if(!del[now]){\n        if(del[fa]){\n            puts(\"First\");\n            exit(0);\n        }del[now]=1;del[fa]=1;\n    }\n}int main(){\n    del[0]=1;\n    cin>>n;\n    for(int i=1;i<n;i++){\n    \tint x,y;\n    \tcin>>x>>y;\n    \tadd(x,y);add(y,x);\n\t}dfs(1,0);\n    puts(\"Second\");\n    return 0;\n}\n```",
        "postTime": 1626859833,
        "uid": 212283,
        "name": "Aw\u987f\u987f",
        "ccfLevel": 5,
        "title": "\u3010\u9898\u89e3\u3011AT2376 [AGC014D] Black and White Tree"
    },
    {
        "content": "**\u6bcf\u6b21\u627e\u5230\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u628a\u5b83\u4eec\u7684\u7236\u4eb2\u67d3\u767d\uff0c\u81ea\u5df1\u67d3\u9ed1\u3002\u8fd9\u4e2a\u65f6\u5019\u67d3\u5b8c\u7684\u53f6\u5b50\u8282\u70b9\u53ca\u5176\u7236\u4eb2\u8282\u70b9\u5bf9\u6811\u7684\u5176\u4ed6\u90e8\u5206\u5df2\u65e0\u5f71\u54cd** ,\u53ef\u4ee5\u76f4\u63a5\u5220\u6389\u3002\n\n\u90a3\u4e48\u53ea\u9700\u8981\u5224\u65ad\u6811\u7684\u5176\u4ed6\u90e8\u5206\u662f\u5426\u6709\u5148\u624b\u5fc5\u80dc\u7b56\u7565\u5373\u53ef\u3002\u7528\u9012\u5f52\u904d\u5386\u3002\n\n\u8fb9\u754c\u6761\u4ef6\uff1a\u82e5\u6811\u4e3a\u5355\u4e00\u8282\u70b9\u5148\u624b\u5fc5\u80dc\u3002\n\n\u4ee3\u7801\uff1a\n```cpp\n#include<iostream>\n#include<cstdio>\nusing namespace std;\nconst int N=1e5+5;\nstruct Edge{\n    int v,nxt;\n}e[N<<1];\nint n,flag[N],cnt,head[N];\nvoid add(int x,int y){\n    e[++cnt].v=y;\n    e[cnt].nxt=head[x];\n    head[x]=cnt;\n}\nbool dfs(int x,int fa){\n    flag[x]=1;\n    int tot=0;\n    for(int i=head[x];i;i=e[i].nxt){\n        int v=e[i].v;\n        if(v==fa) continue;\n        if(dfs(v,x)) return true;\n        if(flag[v]){\n            tot++;flag[x]=0;\n            if(tot==2)return true;\n        }\n    }\n    return false;\n}\nint main(){\n    scanf(\"%d\",&n);\n    int x,y;\n    for(int i=1;i<n;i++){\n        scanf(\"%d%d\",&x,&y);\n        add(x,y);\n        add(y,x);\n    }\n    printf(dfs(1,0)||flag[1]?\"First\":\"Second\");\n    return 0;\n}\n```\n",
        "postTime": 1602742029,
        "uid": 111081,
        "name": "Mistletoes",
        "ccfLevel": 0,
        "title": "[AGC014D] Black and White Tree\uff08\u6811\u5f62DP\uff0c\u535a\u5f08\uff09"
    },
    {
        "content": "### \u601d\u8def\uff1a\u8d2a\u5fc3\n\n\u6bcf\u6b21\u627e\u5230\u6240\u6709\u53f6\u5b50\u8282\u70b9\uff0c\u628a\u5b83\u4eec\u7684\u7236\u4eb2\u67d3\u767d\uff0c\u81ea\u5df1\u67d3\u9ed1\u3002\u5982\u679c\u4e00\u4e2a\u70b9\u88ab\u67d3\u767d\u4e86\u4e24\u6b21\uff0c\u90a3\u4e48\u5148\u624b\u80dc\u5229\u3002\u67d3\u5b8c\u4e4b\u540e\u628a\u67d3\u4e86\u8272\u7684\u70b9\u53bb\u6389\uff0c\u539f\u6811\u4f1a\u53d8\u6210\u68ee\u6797\u3002\u8fd9\u65f6\u5982\u679c\u67d0\u68f5\u6811size=1\uff0c\u90a3\u4e48\u5148\u624b\u80dc\u5229\u3002\u82e5\u6240\u6709\u70b9\u67d3\u5b8c\u5148\u624b\u672a\u80dc\uff0c\u540e\u624b\u80dc\u3002 \n\n\u6211\u662f\u7528\u4e00\u79cd\u7c7b\u4f3c\u62d3\u6251\u7684bfs\u65b9\u6cd5\u505a\u7684\uff0c\u5199\u8d77\u6765\u6709\u70b9\u6076\u5fc3\u3002\u3002  \n### \u4ee3\u7801\uff1a\n```cpp\n#include <bits/stdc++.h>\n//#define inf 0x3f3f3f3f3f3f3f3f\n#define inf 0x3f3f3f3f\n#define debug(...) fprintf(stderr, __VA_ARGS__)\n#define inv(x) Power(x, mod - 2)\n#define fi first\n#define se second\n#define MP make_pair\n#define PB push_back\n#define N 100005\n\nusing namespace std;\ntypedef pair<int,int> Pair;\ntypedef long long ll;\n\nconst long double Pi = 3.14159265358979323846l;\nconst int mod = 1e9 + 7;\ninline int add(int x, int y) { return (x += y) - (x >= mod ? mod : 0); }\ninline void inc(int &x, int y) { (x += y) -= (x >= mod ? mod : 0); }\ninline int mul(int x, int y) { return 1ll * x * y % mod; }\ninline int Power(int x, int y) {\n\tint res = 1;\n\twhile (y) {\n\t\tif (y & 1) res = mul(res, x);\n\t\tx = mul(x, x), y >>= 1;\n\t} return res;\n}\n\ntemplate <class T> inline T\tinput() {\n\tT x; char ch; while (!isdigit(ch = getchar()));\n\tfor (x = ch ^ 48; isdigit(ch = getchar()); x = x * 10 + (ch ^ 48));\n\treturn x;\n}\n\ntemplate <class T> inline void chkmin(T &x, T &y) { x = x < y ? x : y; }\ntemplate <class T> inline void chkmax(T &x, T &y) { x = x > y ? x : y; }\n\nstruct {\n\tinline operator int () { return input<int>(); }\n\tinline operator long long () { return input<long long>(); }\n\ttemplate <class T> inline void operator () (T &x) { x = *this; }\n\ttemplate<class T, class ...A> inline void operator () (T &x, A &...a)\n\t{ x = *this; this -> operator ()(a...); }\n} read;\n\nint n, tot;\nbool vis[N];\nint cnt[N], du[N];\nvector<int> T[N];\nqueue<int> que, tmp;\n\ninline void AddEdge(int x, int y) {\n\tT[x].push_back(y);\n\tT[y].push_back(x);\n\t++du[x], ++du[y];\n}\n\nvoid Win() {\n\tputs(\"First\");\n\texit(0);\n}\n\nint main() {\n\tread(n), tot = n;\n\tfor (int i = 1; i < n; ++i) AddEdge(read, read);\n\n\tfor (int i = 1; i <= n; ++i) if (du[i] == 1) que.push(i);\n\n\twhile (tot) {\n\t\tfor (int i = 1, sz = que.size(); i <= sz; ++i)\n\t\t\tvis[que.front()] = true, que.push(que.front()), que.pop();\n\n\t\twhile (!que.empty()) {\n\t\t\tint u = que.front(); que.pop();\n\t\t\tvis[u] = true, --tot;\n\t\t\tfor (int v : T[u])\n\t\t\t\tif (!vis[v]) {\n\t\t\t\t\ttmp.push(v);\n\t\t\t\t\t++cnt[v];\n\t\t\t\t}\n\t\t}\n\n\t\tfor (int i = 1, sz = tmp.size(); i <= sz; ++i)\n\t\t\tvis[tmp.front()] = true, tmp.push(tmp.front()), tmp.pop();\n\n\t\twhile (!tmp.empty()) {\n\t\t\tint u = tmp.front(); tmp.pop(), --tot;\n\t\t\tif (cnt[u] > 1) Win();\n\t\t\tfor (int v : T[u])\n\t\t\t\tif (!vis[v]) {\n\t\t\t\t\tif (!--du[v]) Win();\n\t\t\t\t\tif (du[v] == 1) que.push(v);\n\t\t\t\t}\n\t\t}\n\t}\n\n\tputs(\"Second\");\n\treturn 0;\n}\n",
        "postTime": 1576244595,
        "uid": 35090,
        "name": "tuliwei",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT2376 \u3010Black and White Tree\u3011"
    }
]