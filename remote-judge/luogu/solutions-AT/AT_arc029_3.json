[
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a  \n\u9ad8\u6865\u541b\u5728\u6e38\u620f\u91cc\u8fd0\u8425\u7740\u81ea\u5df1\u7684\u56fd\u5ea6\u3002\n\u4ed6\u7684\u56fd\u5ea6\u6709N\u4e2a\u57ce\u5e02\u548cM\u6761\u9053\u8def\u3002\u6bcf\u6761\u9053\u8def\u8fde\u7ed3\u77402\u4e2a\u4e0d\u540c\u7684\u57ce\u5e02\uff0c\u9014\u4e2d\u6ca1\u6709\u5176\u4ed6\u7684\u57ce\u5e02\u3002\u53e6\u5916\uff0c\u65e0\u8bba\u54ea2\u4e2a\u57ce\u5e02\uff0c\u76f4\u63a5\u8fde\u63a5\u8fd9\u4e9b\u57ce\u5e02\u7684\u9053\u8def\u90fd\u67091\u6761\u3002\n\u6700\u521d\uff0c\u6ca1\u6709\u94fa\u8bbe\u4efb\u4f55\u9053\u8def\uff0c\u5e76\u4e14\u4efb\u4f55\u57ce\u5e02\u90fd\u6ca1\u6709\u8bbe\u7f6e\u4ea4\u6613\u6240\u3002\n\u9ad8\u6865\u4e3a\u4e86\u56fd\u5ea6\u7684\u53d1\u5c55\uff0c\u51b3\u5b9a\u94fa\u8bbe\u9053\u8def\u548c\u5efa\u9020\u4ea4\u6613\u6240\u3002\n\u6240\u6709\u7684\u57ce\u5e02\uff0c\u53ea\u8981\u6ee1\u8db3\u4ee5\u4e0b\u4efb\u4e00\u6761\u4ef6\uff0c\u56fd\u5bb6\u5c31\u79f0\u4e4b\u4e3a\u201c\u826f\u597d\u72b6\u6001\u201d\uff1a\n- \u90a3\u4e2a\u57ce\u5e02\u8bbe\u6709\u4ea4\u6613\u6240\u3002\n- \u90a3\u4e2a\u57ce\u5e02\u867d\u7136\u6ca1\u6709\u8bbe\u7f6e\u4ea4\u6613\u6240\uff0c\u4f46\u662f\u901a\u8fc7\u4ece\u90a3\u4e2a\u57ce\u5e02\u94fa\u8bbe\u7684\u9053\u8def\u53ef\u4ee5\u79fb\u52a8\u5230\u8bbe\u7f6e\u4ea4\u6613\u6240\u7684\u5176\u4ed6\u57ce\u5e02\u3002  \n\n\u57ce\u5e02\u7684\u7f16\u53f7\u4ece1\u5230N\uff0c\u8857\u9053\u7684\u7f16\u53f7\u4e3a1\u5230M\u3002\u5728\u57ce\u5e02i\u8bbe\u7f6e\u4ea4\u6613\u6240\u9700\u8981Ci\u679a\u91d1\u5e01\uff0c\u94fa\u8bbe\u9053\u8defi\u9700\u8981Ri\u679a\u91d1\u5e01\u3002\n\u56e0\u4e3a\u6ca1\u5e26\u592a\u591a\u91d1\u5e01\uff0c\u6240\u4ee5\u9ad8\u6865\u541b\u60f3\u5c3d\u53ef\u80fd\u51cf\u5c11\u628a\u56fd\u5bb6\u53d8\u6210\u201c\u826f\u597d\u72b6\u6001\u201d\u6240\u5fc5\u8981\u7684\u91d1\u5e01\u7684\u679a\u6570\u3002\n\u5199\u4e00\u4e2a\u7a0b\u5e8f\uff0c\u8f93\u51fa\u5fc5\u8981\u7684\u91d1\u5e01\u679a\u6570\u7684\u6700\u5c0f\u503c\u3002  \n\n\u5206\u6790\uff1a  \n\u8fd9\u9053\u9898\u5c31\u7528\u4e00\u4e2a\u4f18\u5148\u961f\u5217\u7ef4\u62a4\u4e00\u4e0b\u4e24\u4e2a\u57ce\u5e02\u4e4b\u95f4\u9053\u8def\u548c\u518d\u5efa\u9020\u4e00\u4e2a\u4ea4\u6613\u6240\u7684pair\uff0c\u7136\u540e\u6309\u7167\u9898\u610f\u505a\u5373\u53ef.  \n\u8be6\u7ec6\u64cd\u4f5c\u89c1\u4ee3\u7801 \u2193\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\ntypedef pair<int,int>pa;\nconst int INF=1234567890;\nstruct edge{int to,weight;};\nint main() {\n    int N,M;scanf(\"%d%d\",&N,&M);\n    vector<vector<edge> >cost(N+1, vector<edge>(0));\n    for(int i=1;i<=N;i++) {int c;scanf(\"%d\",&c);cost[0].push_back({i,c});}\n    for(int i=1;i<=M;i++) {\n        int a,b,r;scanf(\"%d%d%d\",&a,&b,&r);\n        cost[a].push_back({b,r}),cost[b].push_back({a,r});}\n    priority_queue<pa, vector<pa>, greater<pa> > mincost;\n    vector<bool>used(N+1,false);\n    used[0]=0;mincost.push(pa(0,0));\n    ll ans=0;\n    while(!mincost.empty()) {\n        pa v=mincost.top();mincost.pop();\n        if(used[v.second])continue;\n        used[v.second]=1;ans+=v.first;\n        for(edge e:cost[v.second]) mincost.push(pa(e.weight, e.to));\n    }\n    printf(\"%lld\",ans);\n    return 0;\n}\n\n```\n",
        "postTime": 1552555349,
        "uid": 127191,
        "name": "Doveqise",
        "ccfLevel": 6,
        "title": "AT947 \u9ad8\u6a4b\u541b\u3068\u56fd\u5bb6 \u9898\u89e3"
    }
]