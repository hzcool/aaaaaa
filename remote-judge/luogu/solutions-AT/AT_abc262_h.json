[
    {
        "content": "[\u9898\u610f](https://www.luogu.com.cn/problem/AT_abc262_h)\uff1a\n\n\u7ed9\u5b9a $m$ \u4e2a\u9650\u5236 $(l_i,r_i,p_i)$ \u53ca $n,k$\uff0c\u6c42\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u957f\u5ea6\u4e3a $n$ \u7684\u4e0d\u540c\u5e8f\u5217 $a=(a_1,a_2,\\cdots,a_n)$ \u7684\u6570\u76ee\u3002\n\n1. $\\forall i \\in[1,n],0\\leq a_i\\leq k$\n\n2. $\\forall i \\in[1,m],\\max \\limits_{j\\in[l_i, r_i]}a_j=p_i$\n\n\u540c [P4229](https://www.luogu.com.cn/problem/P4229)\uff0c\u4f46\u6570\u636e\u66f4\u5f3a\uff0c\u76ee\u6d4b\u53ea\u5141\u8bb8 $O(m\\log m)$ \u6216\u7c7b\u4f3c\u590d\u6742\u5ea6\u901a\u8fc7\u3002\n\n----\n\n\u8003\u8651\u5c06\u6761\u4ef6 2 \u4e2d\u6bcf\u4e2a\u9650\u5236\u62c6\u5206\u4e3a\uff1a\n\n- $\\exists j\\in[l_i,r_i],a_j=p_i$\n- $\\forall j\\in[l_i,r_i],a_j\\le p_i$\n\n\u5373\u4efb\u610f\u4f4d\u7f6e $j$ \u7684\u53d6\u503c\u6700\u591a\u4e0d\u80fd\u8d85\u8fc7\u8986\u76d6\u5b83\u7684\u5404\u4e2a\u9650\u5236\u4e2d $p$ \u7684\u6700\u5c0f\u503c $c_j=\\min_{i\\in[1,m],j\\in[l_i,r_i]}p_i$\uff0c\u540c\u65f6\u5bf9\u4e8e\u6bcf\u4e2a\u9650\u5236\uff0c\u81f3\u5c11\u6709\u4e00\u4e2a\u4f4d\u7f6e\u53d6\u5230 $p_i$\uff1b\u56e0\u6b64\uff0c\u53d6\u5230 $p_i$ \u7684\u4f4d\u7f6e $j$ \u4e00\u5b9a\u6ee1\u8db3 $p_i=a_j$\u3002\n\n\u5bf9\u4f4d\u7f6e\u79bb\u6563\u5316\u540e\uff0c\u5229\u7528\u7ebf\u6bb5\u6811\u53ca\u6807\u8bb0\u6c38\u4e45\u5316\u8fdb\u884c\u7b80\u5355\u7684\u533a\u95f4\u53d6 $\\min$ \u64cd\u4f5c\uff0c\u5219\u6700\u540e\u5bf9\u4e8e\u9650\u5236 $i$\uff0c $c_j=p_i$ \u7684\u4f4d\u7f6e $j$ \u624d\u6709\u53ef\u80fd\u53d6\u503c $[0,p_i]$\uff0c\u800c\u8be5\u9650\u5236\u8986\u76d6\u7684\u5176\u5b83\u663e\u7136\u53ea\u80fd\u53d6\u5230 $[0,q]$\uff0c\u4e14\u4e00\u5b9a\u6709 $q<p$\uff0c\u6545 $a_j\\le p_i$\uff0c\u5373\u8fd9\u4e9b\u4f4d\u7f6e\u5e76\u4e0d\u5f71\u54cd\u8be5\u9650\u5236\u7684\u6ee1\u8db3\u6027\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9 $p$ \u79bb\u6563\u5316\uff0c\u628a\u8986\u76d6\u540e\u7ed3\u679c\u4e3a $x$ \u7684\u90e8\u5206\u5355\u72ec\u53d6\u51fa\u5e76\u8fdb\u884c DP\uff0c\u6c42\u51fa\u6ee1\u8db3 $p_i=x$ \u7684\u6240\u6709\u9650\u5236\u7684\u65b9\u6848\u6570\u3002\u6240\u6709 $x$ \u7684\u65b9\u6848\u6570\u4e4b\u79ef\u5373\u4e3a\u7b54\u6848\u3002\n\n\u6b64\u5904\u7ec6\u8282\uff1a\n\n1. \u5982\u679c\u6709 $d$ \u4e2a\u4f4d\u7f6e\u4e0d\u88ab\u4efb\u4f55\u9650\u5236\u8986\u76d6\uff0c\u8fd9\u4e9b\u4f4d\u7f6e\u65b9\u6848\u6570\u4e3a $(k+1)^d$\u3002\n2. \u5982\u679c\u4e00\u4e2a\u9650\u5236 $i$ \u6ee1\u8db3 $\\forall j\\in[l_i,r_i],c_j < p_i$\uff0c\u5219\u603b\u65b9\u6848\u6570\u4e3a $0$\u3002\u7ebf\u6bb5\u6811\u7ef4\u62a4 $c_j$ \u533a\u95f4\u6700\u5927\u503c\u5373\u53ef\u3002\n\n---\n\u5c06\u6240\u6709 $c_j=x$ \u7684\u4f4d\u7f6e\u53ca $l,r$ \u79bb\u6563\u5316\u540e\u4f5c\u4e3a\u4e00\u4e2a\u5e8f\u5217 $a'=(a'_1,a'_2,\\cdots.a'_t)$ \u96c6\u4e2d\u8003\u8651\u3002\u6ce8\u610f\u6709\u4e9b\u4f4d\u7f6e\u79bb\u6563\u5316\u540e\u662f\u4e00\u4e2a\u957f\u5ea6\u5927\u4e8e $1$ \u7684\u8fde\u7eed\u6bb5\uff0c\u8bbe\u5176\u957f\u5ea6\u4e3a $v_i$\u3002\n\n\u73b0\u5728\u8003\u8651\u5982\u4f55\u5728 $O(t\\log t)$ \u65f6\u95f4\u5185\u89e3\u51b3\u4ee5\u4e0b DP \u95ee\u9898\uff1a\n\n> \u7ed9\u5b9a $m$ \u4e2a\u9650\u5236 $(l'_i,r'_i)$ \u53ca $x$\uff0c\u6c42\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u5e8f\u5217\u4e2a\u6570\uff1a\n\n- $\\forall i \\in[1,t],\\max \\limits_{j\\in[l'_i, r'_i]}a'_j=x$\n\n\u4e0d\u59a8\u8bbe $f_{i}$ \u4e3a\u5206\u914d\u524d $i$ \u4f4d\u7684\u65b9\u6848\u6570\uff0c$g_{i,j}$ \u4e3a\u5206\u914d\u524d $i$ \u4f4d\uff0c\u4f7f\u5f97\u6ee1\u8db3 $a'_k=x$ \u7684\u6700\u5927\u7684 $k$ \u7b49\u4e8e $j$ \u7684\u65b9\u6848\u6570\u3002\n\n\u663e\u7136\u5982\u679c\u7b2c $i$ \u4f4d\u5e76\u975e\u5fc5\u987b\u53d6 $x$\uff0c$\\forall j \\in [1,i],g_{i,j}=x^{v_i}g_{i-1,j}$\u3002\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u533a\u95f4\u4e58\u5b8c\u6210\u3002\n\n\u5982\u679c\u7b2c $i$ \u4f4d\u53d6 $x$\uff0c\u5373 $g_{i,i} = ((x+1)^{v_i} - x^{v_i})f_{i-1}$\u3002\n\n\u5982\u679c\u4e0d\u53d6\uff0c\u8003\u8651\u82e5\u5b58\u5728\u90e8\u5206\u533a\u95f4\u6700\u540e\u4e00\u4e2a\u8986\u76d6\u7684\u4f4d\u7f6e\u4e3a $i$\uff0c\u90a3\u4e48\u8bbe\u8fd9\u4e9b\u533a\u95f4\u5de6\u7aef\u70b9\u7684\u6700\u5927\u503c\u4e3a $h_i$\uff0c\u5219 $[h_i,i]$ \u81f3\u5c11\u9700\u53d6\u4e00\u4e2a $x$\u3002\u6240\u4ee5 $\\forall j \\in [1,h_i-1],g_{i,j} = 0$\u3002\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u63a8\u5e73\u5373\u53ef\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c$f_i=g_{i,i}+x^{v_i}\\sum^{i-1}_{j=h_i}g_{i,j}$\u3002\u533a\u95f4\u548c\u4e5f\u53ef\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\n\n\u6b64\u5904\u7ec6\u8282\uff1a\n\n1. \u9700\u53d6\u6a21\uff0c\u8ba1\u7b97\u53ef\u80fd\u51fa\u73b0\u8d1f\u6570\u3002\n2. \u79bb\u6563\u5316\u540e\u5e8f\u5217\u76f8\u90bb\u4e24\u9879\u5728\u539f\u5e8f\u5217\u4e0d\u4e00\u5b9a\u8fde\u7eed\u3002\n\n\u76ee\u6807\uff1a$f_t$\u3002\u7b54\u6848\uff1a$(k+1)^d\\prod_{x\\in p}f_t$\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log m)$\uff0c\u7a7a\u95f4\u7ebf\u6027\u3002\n\n---\n\n```cpp\n#include <bits/stdc++.h>\n#define maxm 400005\n#define inf 0x3f3f3f3f\n#define ad(i, j) i = (i % mod + j % mod + mod) % mod\n#define mu(i, j) i = (i * j) % mod\n#define ls(p) (p << 1)\n#define rs(p) ((p << 1) + 1)\nusing namespace std;\n\nconst int mod = 998244353;\nint n, m, k, num, nx, nf, b[maxm], bx[maxm];\nint c[maxm];\nstruct Query {\n    int l, r, x;\n} a[maxm];\nvector<int> q[maxm], v[maxm];\ninline bool cmp(int i, int j) { return a[i].r == a[j].r ? a[i].l > a[j].l : a[i].r < a[j].r; }\nlong long ans, f[maxm], g[maxm];\n// Basic\ninline int len(int x) { return (x & 1) ? (b[(x >> 1) + 1] - b[x >> 1] - 1) : 1; }\ninline int qpow(int x, int p) {\n    if (!p) return 1;\n    long long tx = qpow(x, p >> 1);\n    return (p & 1) ? (tx * tx % mod * x % mod) : (tx * tx % mod);\n}\n// BIT\nnamespace Seg {\nstruct SegTree {\n    long long sum, mul, cov;\n} t[maxm * 4];\nvoid build(int p, int l, int r) {\n    t[p] = {g[l], 1, -1};\n    if (l < r) {\n        int mid = (l + r) >> 1;\n        build(ls(p), l, mid), build(rs(p), mid + 1, r);\n        t[p].sum = (t[ls(p)].sum + t[rs(p)].sum) % mod;\n    }\n}\ninline void spread(int p) {\n    if (~t[p].cov) {\n        t[ls(p)].sum = t[ls(p)].cov = t[rs(p)].sum = t[rs(p)].cov = t[p].cov;\n        t[ls(p)].mul = t[rs(p)].mul = 1;\n        t[p].cov = -1;\n    }\n    if (t[p].mul > 1) {\n        mu(t[ls(p)].sum, t[p].mul), mu(t[rs(p)].sum, t[p].mul);\n        mu(t[ls(p)].mul, t[p].mul), mu(t[rs(p)].mul, t[p].mul);\n        t[p].mul = 1;\n    }\n}\nvoid change(int p, int pl, int pr, int l, int r, int x, int tg = 0) {\n    if (l > r) return;\n    if (pl >= l && pr <= r) {\n        if (tg) t[p].mul = 1, t[p].sum = t[p].cov = x;\n        else mu(t[p].mul, x), mu(t[p].sum, x);\n    } else {\n        spread(p);\n        int mid = (pl + pr) >> 1;\n        if (l <= mid) change(ls(p), pl, mid, l, r, x, tg);\n        if (r > mid) change(rs(p), mid + 1, pr, l, r, x, tg);\n        t[p].sum = (t[ls(p)].sum + t[rs(p)].sum) % mod;\n    }\n}\nlong long ask(int p, int pl, int pr, int l, int r) {\n    if (l > r) return 0;\n    else if (pl >= l && pr <= r) return t[p].sum;\n    spread(p);\n    int mid = (pl + pr) >> 1;\n    long long ans = 0;\n    if (l <= mid) ad(ans, ask(ls(p), pl, mid, l, r));\n    if (r > mid) ad(ans, ask(rs(p), mid + 1, pr, l, r));\n    return ans;\n}\n};\nnamespace Mn {\nint ma[maxm * 4], tg[maxm * 4];\ninline void init() { memset(tg, 0x3f, sizeof(tg)); }\nvoid cover(int p, int pl, int pr, int l, int r, int x) {\n    if (pl >= l && pr <= r) tg[p] = min(tg[p], x);\n    else {\n        int mid = (pl + pr) >> 1;\n        if (l <= mid) cover(ls(p), pl, mid, l, r, x);\n        if (r > mid) cover(rs(p), mid + 1, pr, l, r, x);\n    }\n}\nvoid dfs(int p, int l, int r, int x) {\n    int mid = (l + r) >> 1;\n    x = min(x, tg[p]);\n    if (l == r) c[l] = x, ma[p] = len(l) ? x : 0;\n    else dfs(ls(p), l, mid, x), dfs(rs(p), mid + 1, r, x), ma[p] = max(ma[ls(p)], ma[rs(p)]);\n}\nint ask(int p, int pl, int pr, int l, int r) {\n    if (pl >= l && pr <= r) return ma[p];\n    int mid = (pl + pr) >> 1, ans = 0;\n    if (l <= mid) ans = max(ans, ask(ls(p), pl, mid, l, r));\n    if (r > mid) ans = max(ans, ask(rs(p), mid + 1, pr, l, r));\n    return ans;\n}\n};\nsigned main() {\n    ans = 1, num = nx = 0;\n    scanf(\"%d%d%d\", &n, &k, &m), ++k;\n    for (int i = 1; i <= m; ++i) {\n        scanf(\"%d%d%d\", &a[i].l, &a[i].r, &a[i].x), ++a[i].x;\n        b[++num] = a[i].l, b[++num] = a[i].r, bx[++nx] = a[i].x;\n    }\n    sort(b + 1, b + 1 + num), num = unique(b + 1, b + 1 + num) - b - 1;\n    sort(bx + 1, bx + 1 + nx), nx = unique(bx + 1, bx + 1 + nx) - bx - 1;\n    b[num + 1] = n + 1, n = num * 2 + 1;\n    Mn::init();\n    for (int i = 1; i <= m; ++i) {\n        a[i].l = (lower_bound(b + 1, b + 1 + num, a[i].l) - b) << 1;\n        a[i].r = (lower_bound(b + 1, b + 1 + num, a[i].r) - b) << 1;\n        a[i].x = lower_bound(bx + 1, bx + 1 + nx, a[i].x) - bx;\n        q[a[i].x].push_back(i);\n        Mn::cover(1, 1, n, a[i].l, a[i].r, a[i].x);\n    }\n    Mn::dfs(1, 1, n, inf);\n    // 3 m log m\n    for (int i = 1; i <= m; ++i)\n        if (Mn::ask(1, 1, n, a[i].l, a[i].r) < a[i].x) {\n            puts(\"0\");\n            return 0;\n        }\n    for (int i = 1; i <= n; ++i)\n        if (c[i] < inf && len(i)) v[c[i]].push_back(i);\n        else if (len(i)) mu(ans, qpow(k, len(i)));\n    for (int x = 1; x <= nx; ++x) {\n        nf = v[x].size();\n        for (int i = 1; i <= nf; ++i) f[i] = g[i] = 0;\n        sort(q[x].begin(), q[x].end(), cmp);\n        Seg::build(1, 1, nf);\n        int p = -1;\n        f[0] = 1;\n        for (int i = 1; i <= nf; ++i) {\n            int ln = len(v[x][i - 1]);\n            long long t = f[i - 1] * ((qpow(bx[x], ln) - qpow(bx[x] - 1, ln) + mod) % mod) % mod;\n            int nxt = i < nf ? v[x][i] : inf, l = 0;\n            while (p < int(q[x].size() - 1) && a[q[x][p + 1]].r < nxt) ++p, l = max(l, a[q[x][p]].l);\n            if (l) {\n                auto lp = lower_bound(v[x].begin(), v[x].end(), l);\n                l = lp - v[x].begin() + 1;\n            }\n            if (!l) f[i] = f[i - 1] * qpow(bx[x], ln) % mod;\n            else {\n                f[i] = (t + Seg::ask(1, 1, nf, l, i - 1) * qpow(bx[x] - 1, ln) % mod) % mod;\n                Seg::change(1, 1, nf, 1, l - 1, 0, 1);\n            \n            }\n            Seg::change(1, 1, nf, i, i, t, 1);\n            Seg::change(1, 1, nf, 1, i - 1, qpow(bx[x] - 1, ln));\n        }\n        mu(ans, f[nf]);\n    }\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1673000748,
        "uid": 62440,
        "name": "MuelsyseU",
        "ccfLevel": 0,
        "title": "ABC262Ex Max Limited Sequence \u9898\u89e3"
    },
    {
        "content": "\u67d0\u4f4d\u6b4c\u59ec\u7684\u6545\u4e8b\u3002\n\n\u9996\u5148\u5047\u8bbe $mx_i$ \u8868\u793a\u7b2c $i$ \u4e2a\u4f4d\u7f6e\u6700\u5927\u80fd\u53d6\u5230\u591a\u5c11\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u6216\u7ebf\u6bb5\u6811\u7ef4\u62a4\u51fa $mx$\u3002\u73b0\u5728\u6709\u4e00\u4e2a\u5173\u952e\u6027\u8d28\uff1a\u4e0d\u540c\u7684 $mx$ \u4e4b\u95f4\u72ec\u7acb\u3002\n\n\u8003\u8651\u4e00\u4e2a\u533a\u95f4 $[l,r]$ \u4ee5\u53ca\u9650\u5236 $w$\uff0c\u9996\u5148\u80af\u5b9a\u6709\u8fd9\u4e2a\u533a\u95f4\u5185\u6240\u6709\u4f4d\u7f6e\u7684 $mx_i\\le w$\uff0c\u82e5 $mx_i<w$\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4f4d\u7f6e\u4e00\u5b9a\u53d6\u4e0d\u5230 $w$\uff0c\u4e5f\u5c31\u662f\u6761\u4ef6\u53d8\u6210\u4e86\u5728\u8fd9\u4e2a\u533a\u95f4\u5185\u6ee1\u8db3 $mx_i=w$ \u7684\u70b9\u5fc5\u987b\u81f3\u5c11\u4e00\u4e2a\u6ee1\u8db3 $a_i=w$\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u679a\u4e3e\u6bcf\u4e2a $mx$ \u7684\u503c\uff0c\u62ce\u51fa\u6240\u6709 $mx$ \u76f8\u7b49\u7684\u4f4d\u7f6e\u548c\u5bf9\u5e94\u7684\u533a\u95f4\u9650\u5236\u7b97\u7b54\u6848\uff0c\u6700\u540e\u518d\u4e58\u8d77\u6765\u5373\u53ef\u3002\uff08\u6ca1\u6709\u88ab\u4efb\u4f55\u533a\u95f4\u8986\u76d6\u7684\u9700\u8981\u5355\u72ec\u8ba8\u8bba\uff09\n\n\u95ee\u9898\u8f6c\u5316\u6210\uff1a\u6709\u82e5\u5e72\u4e2a\u70b9\u548c\u82e5\u5e72\u4e2a\u533a\u95f4\uff0c\u8981\u6c42\u8fd9\u4e9b\u70b9\u6ee1\u8db3 $a_i\\le mx$\uff0c\u4e14\u6bcf\u4e2a\u533a\u95f4\u5185\u81f3\u5c11\u6709\u4e00\u4e2a\u70b9\u7684 $a_i=mx$\uff0c\u6c42\u65b9\u6848\u6570\u3002\n\n\u6ce8\u610f\u5230\u5305\u542b\u5176\u4ed6\u533a\u95f4\u7684\u533a\u95f4\u662f\u6ca1\u7528\u7684\uff0c\u628a\u5b83\u4eec\u6254\u6389\u540e\u5269\u4e0b\u7684\u533a\u95f4\u6392\u5e8f\u4e00\u5b9a\u6ee1\u8db3\u968f\u7740\u5de6\u7aef\u70b9\u589e\u52a0\u53f3\u7aef\u70b9\u4e5f\u589e\u52a0\u3002\u8003\u8651 $dp_i$ \u8868\u793a\u76ee\u524d\u505a\u5230\u7b2c $i$ \u4e2a\u70b9\uff0c\u8981\u6c42\u7b2c $i$ \u4e2a\u70b9\u5fc5\u987b\u6ee1\u8db3 $a_i=mx$\uff0c\u5e76\u4e14 $i$ \u4e4b\u524d\u7684\u533a\u95f4\u90fd\u6ee1\u8db3\u9650\u5236\u7684\u65b9\u6848\u6570\u3002\u8003\u8651 $dp_i$ \u53ef\u4ee5\u4ece $dp_k$ \u8f6c\u79fb\u8fc7\u6765\u7684\u6761\u4ef6\u662f\u627e\u5230 $i$ \u524d\u9762\u6700\u540e\u4e00\u4e2a\u4e0e $i$ \u65e0\u4ea4\u7684\u533a\u95f4\uff0c$k$ \u4e0d\u80fd\u5c0f\u4e8e\u8fd9\u4e2a\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u3002\u4e5f\u5c31\u662f $k$ \u662f\u4e00\u6bb5\u533a\u95f4\uff0c\u53ef\u4ee5\u7b97\u51fa\u6765\u3002\n\n\u8f6c\u79fb\u7684\u65f6\u5019\u628a\u5f0f\u5b50\u5217\u51fa\u6765\uff0c\u5927\u6982\u5f62\u5982\uff1a\n\n$$dp_i=\\sum_kdp_k\\times mx^{i-k-1}$$\n\n$mx$ \u6709\u9006\u5143\u7684\u8bdd\u5c31\u53ef\u4ee5\u524d\u7f00\u548c\u4f18\u5316\uff0c\u7279\u5224 $mx=0$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u5bf9\u6570\uff0c\u74f6\u9888\u5728\u4e8e\u4e00\u5f00\u59cb\u7684\u5e76\u67e5\u96c6\u548c\u5feb\u901f\u5e42\u3002\u4ee3\u7801\u5199\u7684\u6709\u70b9\u4e11\uff0c\u800c\u4e14\u662f\u6309\u7167 \u67d0\u4f4d\u6b4c\u59ec\u7684\u6545\u4e8b \u6539\u7684\uff0c\u6240\u4ee5\u8fd8\u628a\u4e0b\u6807\u79bb\u6563\u5316\u4e86\uff0c\u66f4\u96be\u5199\u3002",
        "postTime": 1677591557,
        "uid": 151475,
        "name": "Little09",
        "ccfLevel": 8,
        "title": "AT_abc262_h [ABC262Ex] Max Limited Sequence \u9898\u89e3"
    }
]