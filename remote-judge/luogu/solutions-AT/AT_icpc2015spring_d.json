[
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n> \u7ed9\u51fa\u4e00\u68f5 $n$ \u4e2a\u8282\u70b9\u7684\u6811\uff0c\u8fb9\u6709\u8fb9\u6743\uff0c\u8282\u70b9\u662f\u96c6\u5408\u3002\u4e00\u5f00\u59cb\u6bcf\u4e2a\u96c6\u5408\u91cc\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a\u5143\u7d20\uff0c\u5143\u7d20\u4e4b\u95f4\u4e92\u4e0d\u76f8\u540c\u3002\u6bcf\u6b21\u64cd\u4f5c\u9009\u62e9\u5143\u7d20 $s$ \u548c\u8282\u70b9 $t$\uff0c\u4ee3\u4ef7\u4e3a \u79bb $t$ \u6700\u8fd1\u7684\u4e14\u5305\u542b\u5143\u7d20 $s$ \u7684\u8282\u70b9 $x$ \u5230 $t$ \u7684\u8ddd\u79bb \u4e58\u4e0a \u5143\u7d20 $s$ \u7684\u6743\u503c\u3002\u6bcf\u6b21\u64cd\u4f5c\u540e\uff0c$\\{x \\rightarrow t\\}$ \u8def\u5f84\u4e0a\u70b9\u7684\u96c6\u5408\u52a0\u5165\u5143\u7d20 $s$\u3002\n>\n> \u6700\u5927\u5316 $m$ \u6b21\u64cd\u4f5c\u7684\u4ee3\u4ef7\u548c\u3002\n>\n> $1\\le n \\le 2000,1\\le m \\le 10^9$\n\n## \u601d\u8def\n\n\u89c2\u5bdf\u5230\u6bcf\u4e2a\u5143\u7d20\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u5206\u5f00\u5904\u7406 $n$ \u6b21\u3002\u5904\u7406\u70b9 $x$ \u7684\u5143\u7d20\u65f6\u4ee5 $x$ \u4e3a\u6839\u3002\n\n\u8fdb\u4e00\u6b65\u53d1\u73b0\uff0c\u5bf9\u4e8e\u540c\u4e00\u4e2a\u5143\u7d20 $s$\uff0c\u4e00\u6761\u8fb9\u53ea\u53ef\u80fd\u5bf9\u7b54\u6848\u8d21\u732e\u4e00\u6b21\u3002\u56e0\u4e3a\u64cd\u4f5c\u8def\u5f84\u4e0a\u4e0d\u53ef\u80fd\u6709\u7b2c\u4e8c\u4e2a\u70b9\u542b\u6709\u5143\u7d20 $s$\uff0c\u5426\u5219\u5c31\u4e0d\u662f\u6700\u77ed\u8def\u5f84\u3002\n\n\u6240\u4ee5\u6bcf\u6b21\u8d2a\u5fc3\u7684\u9009\u53d6\u6700\u957f\u7684\u94fe\uff08\u8d77\u70b9\u5fc5\u987b\u4e3a\u6839\uff09\uff0c\u8d21\u732e\u5373\u4e3a\u8def\u5f84\u4e0a\u672a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u7684\u8fb9\u7684\u957f\u5ea6\u4e4b\u548c\u3002\n\n- \u8be5\u8fc7\u7a0b\u7684\u4e00\u822c\u7ef4\u62a4\u65b9\u6cd5\n\n\u200b\t    \u56e0\u4e3a\u6bcf\u6b21\u9009\u53d6\u7684\u94fe\u4e00\u5b9a\u662f\u4ece\u53f6\u5b50\u5230\u6839\u7684\uff0c\u6240\u4ee5\u4ea7\u751f\u8d21\u732e\u7684\u8fb9\u4e5f\u4e00\u5b9a\u662f\u94fe\u4e0a\u7684\u4e00\u6bb5\u540e\u7f00\u3002\u6240\u4ee5\u53ea\u9700\u8981\u66b4\u529b\u8dd1\u540e\u7f00\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u5e76\u505a\u5b50\u6811\u4fee\u6539\u3001\u52a8\u6001\u7ef4\u62a4\u6700\u5927\u503c\u5373\u53ef\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2\\log n)$\u3002\n\n- \u6211\u7684\u8d5b\u65f6\u7ef4\u62a4\u65b9\u6cd5\n\n  \u8003\u573a\u4e0a\u6ca1\u6709\u60f3\u5230\u76f4\u63a5\u4e00\u4e2a\u4e00\u4e2a\u70b9\u66b4\u529b\u53bb\u4fee\u6539\u7684\u65b9\u6cd5\uff0c\u72af\u5927\u8ff7\u7cca\u3002\n\n  \u5982\u679c\u6bcf\u53d6\u4e00\u6761\u94fe\u5c31\u66f4\u65b0\u6240\u6709\u94fe\u7684\u8d21\u732e\uff0c\u90a3\u4e48\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n^3\\log n)$ \u7684\uff0c\u663e\u7136\u4e0d\u80fd\u901a\u8fc7\u6b64\u9898\u3002\n\n  \u8003\u8651\u7528\u7c7b\u4f3c\u4e8eDijstra\u7684\u65b9\u6cd5\u7ef4\u62a4\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u628a\u6240\u6709\u7684\u94fe\u90fd\u4e22\u8fdb\u5927\u6839\u5806\u91cc\uff0c\u6bcf\u6761\u94fe\u5728\u5806\u4e2d\u7528\u4e24\u4e2a\u6570\u6765\u8868\u793a\uff0c\u5bf9\u7b54\u6848\u7684\u8d21\u732e $v$ \u548c\u8be5\u8d21\u732e\u66f4\u65b0\u7684\u65f6\u95f4 $t$\u3002\u6bcf\u6b21\u4ece\u5806\u9876\u62ff\u51fa\u5143\u7d20\u65f6\uff0c\u5982\u679c\u5806\u9876\u5143\u7d20\u7684 $t$ \u5c0f\u4e8e\u5f53\u524d\u7684\u65f6\u95f4\u6233\uff0c\u90a3\u4e48\u5c31\u66f4\u65b0\u8be5\u5143\u7d20\u7684 $v$ \u5e76\u91cd\u65b0\u4e22\u8fdb\u5806\u91cc\uff0c\u5426\u5219\u66f4\u65b0\u8d21\u732e\uff0c\u65f6\u95f4 $+1$\u3002\n\n  \u5206\u6790\u4e00\u4e0b\u8fd9\u6837\u505a\u4e3a\u4ec0\u4e48\u4f1a\u53d8\u5feb\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u7684\u74f6\u9888\u5728\u4e8e\u6bcf\u6761\u94fe\u591a\u6b21\u8fdb\u51fa\u5806\u3002\u6bcf\u4e00\u6b21\u8fdb\u51fa\uff0c\u610f\u5473\u7740\u4e00\u6761\u94fe\u7684\u8d21\u732e\u4ece\u5168\u5c40\u6700\u5927\u964d\u5230\u975e\u5168\u5c40\u6700\u5927\uff0c\u5e76\u4e14\u8fd9\u4e2a\u4e0b\u964d\u662f\u7531\u4e00\u6761\u8d21\u732e\u66f4\u5927\u7684\u94fe\u9020\u6210\u7684\uff08\u8fd9\u6761\u94fe\u66f4\u5148\u51fa\u6808\uff09\u3002\u624b\u819c\u4e00\u4e0b\u53d1\u73b0\u8fd9\u6837\u8fdb\u51fa\u6808\u7684\u6b21\u6570\u975e\u5e38\u5c11\uff0c\u611f\u89c9\u5747\u644a\u4e0b\u6765\u662f\u5bf9\u7684\uff0c\u4f46\u4e0d\u4f1a\u8bc1\u3002\n\n## \u4ee3\u7801\n\n\u4ee5\u4e0b\u662f\u8d5b\u65f6\u7684\u4ee3\u7801\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define ll long long\n#define il inline\nusing namespace std;\nconst int maxn=2010;\nconst int N=maxn<<2; \nil int read(){\n\tint x=0;\n\tchar c=getchar();\n\tfor(;!(c>='0'&&c<='9');c=getchar());\n\tfor(;c>='0'&&c<='9';c=getchar())\n\t\tx=(x<<1)+(x<<3)+c-'0';\n\treturn x; \n}\nstruct Imf{\n\tint x,d,t;\n\til bool operator <(Imf a)const{return d<a.d;}\n\til bool operator >(Imf a)const{return d>a.d;}\n};\nstruct edge{\n\tint v,w,to;\n}e[maxn<<1];\nint head[maxn],ecnt;\nvoid addedge(int u,int v,int w){\n\te[++ecnt].v=v,e[ecnt].w=w,e[ecnt].to=head[u],head[u]=ecnt;\n}\nint Date[N],lz[N];\npriority_queue<Imf,vector<Imf>,less<Imf> >q;\nint sz[maxn],dfn[maxn],top[maxn],zson[maxn],dep[maxn],fa[maxn],DFN[maxn];\nll w[maxn*maxn];\nint idx,n,m,rt,cn;\nint pre[maxn],s[maxn];\nvoid dfs1(int fath,int x,int lw=0){\n\tsz[x]=1,zson[x]=0,pre[x]=pre[fath]+lw;\n\tfa[x]=fath,dep[x]=dep[fath]+1;\n\tfor(int i=head[x];i;i=e[i].to)\n\t\tif(e[i].v^fa[x]){\n\t\t\tdfs1(x,e[i].v,e[i].w),sz[x]+=sz[e[i].v];\n\t\t\tif(sz[zson[x]]<sz[e[i].v]) zson[x]=e[i].v;\n\t\t}\n}\nvoid dfs2(int x){\n\tdfn[x]=++idx,DFN[idx]=x;\n\tif(zson[fa[x]]^x) top[x]=x;\n\telse top[x]=top[fa[x]];\n\tif(zson[x]) dfs2(zson[x]);\n\tfor(int i=head[x];i;i=e[i].to)\n\t\tif(e[i].v!=fa[x]&&e[i].v!=zson[x]) dfs2(e[i].v);\n}\nvoid pushdown(int i){\n\tif(lz[i]) Date[i<<1]=Date[i<<1|1]=lz[i<<1]=lz[i<<1|1]=1;\n}\nvoid build(int i,int l,int r){\n\tDate[i]=lz[i]=0;\n\tif(l==r||l>r) return ;\n\tint mid=l+r>>1;\n\tbuild(i<<1,l,mid),build(i<<1|1,mid+1,r);\n}\nvoid Modify(int i,int l,int r,int L,int R){\n//\tif(i==1) printf(\"Mod : %d,%d\\n\",L,R);\n\tif(rt==2)\n\t\trt++,rt--;\n\tif(l>=L&&r<=R){\n\t\tDate[i]=1,lz[i]=1;\n\t\treturn ;\n\t}pushdown(i);\n\tint mid=l+r>>1;\n\tif(mid>=L) Modify(i<<1,l,mid,L,R);\n\tif(mid<R) Modify(i<<1|1,mid+1,r,L,R);\n\tDate[i]=(Date[i<<1]|Date[i<<1|1]); \n}\nint Query(int i,int l,int r,int L,int R){\n//\tif(i==1) printf(\"Que : %d,%d\\n\",L,R);\n\tif(l>R||r<L) return -1;\n\tif(!Date[i]) return -1;\n\tif(l==r) return l; \n\tpushdown(i);\n\tint mid=l+r>>1,v;\n\tif(~(v=Query(i<<1|1,mid+1,r,L,R))) return v;\n\treturn Query(i<<1,l,mid,L,R);\n}\nint dis(int x){\n\tint s,X=x;\n\twhile(x){\n\t\tif(~(s=Query(1,1,n,dfn[top[x]],dfn[x]))) return pre[X]-pre[DFN[s]];\n\t\tx=fa[top[x]];\n\t}return pre[X];\n}\nvoid change(int x){\n\twhile(x) \n\t\tModify(1,1,n,dfn[top[x]],dfn[x]),x=fa[top[x]];\n}\nsigned main(){\n\tint x,y,z,sum=0;\n\tn=read(),m=read();\n\tfor(int i=1;i<n;i++){\n\t\tx=read(),y=read(),z=read();\n\t\taddedge(x,y,z),addedge(y,x,z);\n\t}\n\tfor(int i=1;i<=n;i++) s[i]=read();\n\tfor(int Rt=1;Rt<=n;Rt++){\n\t\trt=Rt,idx=0,build(1,1,n);\n\t\tdfs1(0,rt),dfs2(rt);\n\t\tfor(int i=1;i<=n;i++)\n\t\t\tif(!zson[i]) q.push(Imf{i,pre[i],0});\n\t\tImf t;int ti=0;\n\t\tif(rt==2)\n\t\t\trt++,rt--;\n\t\twhile(!q.empty()){\n\t\t\tt=q.top(),q.pop();\n\t\t\tif(t.t<ti){\n\t\t\t\tt.d=dis(t.x),t.t=ti;\n\t\t\t\tq.push(t);continue;\n\t\t\t}w[++cn]=1ll*t.d*s[rt],change(t.x),ti++;\n//\t\t\tprintf(\"%d : %d,%d[%lld]\\n\",rt,t.x,t.d,1ll*t.d*s[rt]);\n\t\t}\n\t}sort(w+1,w+1+cn,greater<ll>());\n\tll ans=0;\n\tfor(int i=1,en=min(m,cn);i<=en;i++) ans+=w[i];\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1669869846,
        "uid": 288716,
        "name": "lzqy_",
        "ccfLevel": 7,
        "title": "AT_icpc2015spring_d Content Delivery \u9898\u89e3"
    }
]