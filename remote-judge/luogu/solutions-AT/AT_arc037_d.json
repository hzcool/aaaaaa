[
    {
        "content": "\u8bbe\u7b2c $i$ \u4e2a\u7684\u7b54\u6848\u662f $\\mathit{ans}_i$\uff0c\u5982\u679c\u4e00\u4e2a\u56de\u8def\u4e0d\u662f\u5728\u4e00\u4e2a $(i-1)$ \u5c42\u4e09\u89d2\u5f62\u7684\u5185\u90e8\uff0c\u90a3\u4e48\u5fc5\u7136\u540c\u65f6\u7ecf\u8fc7\u4e86\u8fd9\u4e09\u4e2a\u5c0f\u4e09\u89d2\u5f62\u3002\u4e8e\u662f\u8bb0 $h_i$ \u8868\u793a\u4ece\u7b2c $i$ \u5c42\u4e09\u89d2\u5f62\u4e00\u4e2a\u9876\u70b9\u8fdb\u5165\uff0c\u53e6\u4e00\u4e2a\u9876\u70b9\u79bb\u5f00\u7684\u65b9\u6848\u6570\uff0c\u5219 $\\mathit{ans}_i=3\\mathit{ans}_{i-1}+h_{i-1}^3$\u3002\u95ee\u9898\u8f6c\u5316\u6210\u8ba1\u7b97 $h_i$\u3002  \n\u4ee5\u5de6\u4e0b\u89d2\u8fdb\u5165\uff0c\u53f3\u4e0b\u89d2\u79bb\u5f00\u4e3a\u4f8b\u3002\u5982\u679c\u4e0d\u7ecf\u8fc7\u4e0a\u9762\u90a3\u4e2a\u5c0f\u4e09\u89d2\u5f62\uff0c\u65b9\u6848\u6570\u662f $h_{i-1}^2$\uff1b\u5426\u5219\uff0c\u65b9\u6848\u6570\u5c31\u662f\u7ecf\u8fc7\u5de6\u4e0b\u89d2\u3001\u4e0a\u65b9\u3001\u53f3\u4e0b\u89d2\u4e09\u4e2a\u4e09\u89d2\u5f62\u65b9\u6848\u6570\u7684\u4e58\u79ef\u3002\u4f46\u662f\u6709\u4e00\u4e2a\u95ee\u9898\uff1a\u5e95\u8fb9\u4e2d\u70b9\u53ea\u80fd\u7ecf\u8fc7\u4e00\u6b21\u3002\u56e0\u6b64\u8fd8\u8981\u8bbe $f_i$ \u548c $g_i$ \u5206\u522b\u8868\u793a\u4ece\u4e00\u4e2a\u9876\u70b9\u8fdb\u5165\uff0c\u4e00\u4e2a\u9876\u70b9\u79bb\u5f00\uff0c\u7ecf\u8fc7/\u4e0d\u7ecf\u8fc7\u5269\u4e0b\u90a3\u4e2a\u9876\u70b9\u7684\u65b9\u6848\u6570\uff0c\u8ba1\u7b97\u7684\u65f6\u5019\u51cf\u53bb\u4e24\u8fb9\u90fd\u7ecf\u8fc7\u5e95\u8fb9\u4e2d\u70b9\u7684\u65b9\u6848\u6570\u3002\u5373\n$$ \\begin{aligned}f_i&=f_{i-1}(h_{i-1}^2-f_{i-1}^2)\\\\g_i&=h_{i-1}^2+g_{i-1}(h_{i-1}^2-f_{i-1}^2)\\\\h_i&=f_i+g_i\\end{aligned} $$\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n\u4ee3\u7801\u4e2d\u7701\u53bb\u4e86\u8ba1\u7b97 $g$ \u7684\u8fc7\u7a0b\uff0c`g[i]` \u5c31\u662f $h_i$\u3002\n```cpp\n#include <atcoder/modint>\n#include <iostream>\nusing mint = atcoder::modint1000000007;\ntemplate <typename T>\nvoid checkmax(T &x, T y) {\n  if (x < y) x = y;\n}\ntemplate <typename T>\nvoid checkmin(T &x, T y) {\n  if (x > y) x = y;\n}\nint n;\nmint f[100001], g[100001], ans[100001];\nint main(int argc, char const *argv[]) {\n  std::ios_base::sync_with_stdio(false);\n  std::cin.tie(nullptr), std::cout.tie(nullptr);\n  std::cin >> n;\n  f[0] = 1, g[0] = 2, ans[0] = 1;\n  for (int i = 1; i <= n; i++) {\n    f[i] = f[i - 1] * (g[i - 1] * g[i - 1] - f[i - 1] * f[i - 1]);\n    g[i] = g[i - 1] * g[i - 1] +\n           g[i - 1] * (g[i - 1] * g[i - 1] - f[i - 1] * f[i - 1]);\n    ans[i] = ans[i - 1] * mint::raw(3) + g[i - 1] * g[i - 1] * g[i - 1];\n  }\n  std::cout << ans[n].val() << '\\n';\n  return 0;\n}\n```",
        "postTime": 1639043799,
        "uid": 68273,
        "name": "xyf007",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT1308 \u3010Chaotic Polygons\u3011"
    }
]