[
    {
        "content": "##  AT_abc277_c [ABC277C] Ladder Takahashi \u984c\u89e3\n\n### \u9898\u9762\n\n\u7ed9\u5b9a\u4e00\u5f20\u56fe\uff0c\u6c42\u4ece $1$ \u5f00\u59cb\u904d\u5386\u5230\u7684\u6700\u5927\u503c\u3002\n\n### \u89e3\u6790\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u6837\u4f8b $1$ \u753b\u6210\u4e00\u5f20\u56fe\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/6m1bf5dd.png)\n\n\u770b\u5230\u4e86\u5417\uff1f\u95ee\u9898\u4e00\u4e0b\u5b50\u5c31\u8f6c\u53d8\u6210\u4e86\u4ece\u7ed3\u70b9 $1$ \u5f00\u59cb\u80fd\u591f\u5230\u8fbe\u7684\u6700\u5927\u7684\u9876\u70b9\u3002\n\n\u8003\u8651\u4f7f\u7528\u6df1\u5ea6\u4f18\u5148\u641c\u7d22\uff0c\u5373 dfs\u3002\n\n- \u5148\u5b58\u56fe\uff0c\u4f7f\u7528 `std::vector` \u90bb\u63a5\u8868\uff1a\n\n```cpp\nfor(int i = 1; i <= n; i++){\n\tstd::cin >> u >> v;\n    vec[u].push_back(v);\n    vec[v].push_back(u);\n    // \u56e0\u4e3a\u7535\u68af\u662f\u53cc\u5411\u7684\uff0c\u6240\u4ee5\u662f\u4e2a\u65e0\u5411\u56fe\n}\n```\n\n- \u5b9a\u4e49\u51fd\u6570 `dfs`\uff0c\u4ece `vec[1]` \u4e2d\u5f00\u59cb\u904d\u5386\uff0c\u7528 `vis` \u6570\u7ec4\u786e\u5b9a\u4e00\u4e2a\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5982\u679c\u8d70\u5230\u6700\u540e\uff0c\u66f4\u65b0\u7b54\u6848\uff1a\n\n```cpp\ninline int dfs(int x){\n\tif(vec[1].empty) return -1;\n    else{\n    \tfor(int i = 1; i <= n; i++)\n        \t// \u904d\u5386\u64cd\u4f5c\n            // \u8bb0\u5f97\u6807\u8bb0\u54e6\n    }\n    return ans;\n}\n```\n\n",
        "postTime": 1668347404,
        "uid": 408019,
        "name": "Shan_Creeper",
        "ccfLevel": 0,
        "title": "AT_abc277_c [ABC277C] Ladder Takahashi \u984c\u89e3"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u6709\u4e00\u680b\u697c\u548c $n$ \u4e2a\u68af\u5b50\uff0c\u7b2c $i$ \u4e2a\u68af\u5b50\u8fde\u63a5\u7b2c $a_i$ \u5c42\u697c\u548c\u7b2c $b_i$ \u5c42\u697c\u3002\u53ef\u4ee5\u901a\u8fc7\u68af\u5b50 $i$ \u4ece $a_i$ \u5230 $b_i$ \u6216\u8005\u4ece $b_i$ \u5230 $a_i$\uff0c\u95ee\u5728\u53ea\u722c\u68af\u5b50\u7684\u60c5\u51b5\u4e0b\u4ece\u7b2c\u4e00\u5c42\u697c\u5f00\u59cb\u6700\u591a\u5230\u7b2c\u51e0\u5c42\u697c\u3002\n\n## \u601d\u8def\n\n\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u68af\u5b50\u770b\u6210\u8fb9\uff0c\u628a\u6bcf\u4e00\u5c42\u697c\u770b\u6210\u70b9\uff0c\u4e8e\u662f\u95ee\u9898\u5c31\u53d8\u6210\u4e86\uff1a\u7ed9\u51fa $n$ \u6761\u53cc\u5411\u8fb9\uff0c\u95ee\u8282\u70b9 $1$ \u80fd\u5230\u8fbe\u7684\u7f16\u53f7\u6700\u5927\u7684\u70b9\u662f\u4ec0\u4e48\u3002\n\n\u90a3\u5c31\u5f88\u597d\u505a\u4e86\uff1a\u5efa\u5b8c\u56fe\uff0c\u4ece\u8282\u70b9 $1$ \u5f00\u59cb\u5e7f\u641c\uff0c\u6700\u540e\u626b\u4e00\u904d\u80fd\u5230\u8fbe\u7684\u8282\u70b9\uff0c\u627e\u5230\u7f16\u53f7\u6700\u5927\u7684\u70b9\u8f93\u51fa\u3002\n\n\u7f16\u53f7\u8303\u56f4\u8fbe\u5230\u4e86 $10^9$ \u600e\u4e48\u529e\uff1f\u6211\u4eec\u7528 `map`\u6620\u5c04\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\u3002\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\nmap<int, int> id, val;\nint idd;\nstruct T {\n\tint to, nxt;\n} e[N];\nint head[N], hop, n, m, ans;\nbool vis[N];\nvoid addd(int to, int nxt) {\n\te[++hop].to = nxt;\n\te[hop].nxt = head[to];\n\thead[to] = hop;\n}\nqueue<int> q;\nsigned main() {\n\tn = read();\n\tfor (int i = 1; i <= n; i++) {\n\t\tint to = read(), nxt = read();\n\t\tif (!id.count(to)) id[to] = ++idd, val[idd] = to;\n\t\tif (!id.count(nxt)) id[nxt] = ++idd, val[idd] = nxt;\n\t\taddd(id[to], id[nxt]);\n\t\taddd(id[nxt], id[to]);\n\t}\n\tif (!id.count(1)) return puts(\"1\"), Strelitzia_H;\n\tq.push(id[1]);\n\twhile (!q.empty()) {\n\t\tint u = q.front();\n\t\tq.pop();\n\t\tif (vis[u]) continue;\n\t\tvis[u] = 1;\n\t\tfor (int i = head[u]; i; i = e[i].nxt)\n\t\t\tif (!vis[e[i].to]) q.push(e[i].to);\n\t}\n\tfor (int i = 1; i <= idd; i++) {\n\t\tif (vis[i]) ans = max(ans, val[i]);\n\t}\n\tprintf(\"%lld\", ans);\n\treturn Strelitzia_H;\n}\n```",
        "postTime": 1668303891,
        "uid": 676638,
        "name": "Strelitzia_",
        "ccfLevel": 4,
        "title": "ABC277C \u9898\u89e3"
    },
    {
        "content": "### \u601d\u8def\n\n\u8003\u8651\u56fe\u4e2d\u7ed9\u4f60\u6240\u9700\u8981\u6c42\u5f97\u4e1c\u897f\u3002\n\n\u7ed9\u4f60\u4e00\u4e9b\u8fb9\uff0c\u6c42\u53ef\u4ee5\u5230\u8fbe\u7684\u70b9\u7684\u6700\u5927\u7f16\u53f7\u3002\n\n\u53d1\u73b0\u662f\u65e0\u5411\u8fb9\u3002\n\n\u5373\u6240\u6709\u4e0e $1$ \u6240\u76f8\u8fde\u7684\u70b9\u5168\u90e8\u90fd\u53ef\u4ee5\u5230\u8fbe\u3002\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u76f4\u63a5\u5229\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u8054\u901a\u6027\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6bcf\u6b21\u7528\u5e76\u67e5\u96c6\u5408\u5e76\u65f6\uff0c\u90fd\u5c06\u5c0f\u7f16\u53f7\u5408\u5e76\u5230\u5927\u7f16\u53f7\u4e0a\u3002\n\n\u4f46\u53d1\u73b0\u8fd9\u9898\u503c\u57df\u592a\u5927\u4e86\uff0c\u79bb\u6563\u5316\u4e00\u4e0b\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u8bb0\u5f97\u628a $1$ \u52a0\u5165\u79bb\u6563\u5316\u6570\u7ec4\u3002\n\n### Code\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n \nconst int N = 1000010;\n \nint n, m, a[N], b[N], c[N], fa[N];\n \ninline int read()\n{\n    int asd = 0 , qwe = 1; char zxc;\n    while(!isdigit(zxc = getchar())) if(zxc == '-') qwe = -1;\n    while(isdigit(zxc)) asd = asd * 10 + zxc - '0' , zxc = getchar();\n    return asd * qwe;\n}\n \ninline int gf(int x)\n{\n    return (fa[x] == x ? x : fa[x] = gf(fa[x]));\n}\n \ninline void merge(int x , int y)\n{\n    x = gf(x), y = gf(y);\n    if(x == y) return;\n    if(x > y) swap(x, y);\n    fa[x] = y;\n}\n \nint main()\n{\n    n = read() , c[++m] = 1;\n    for (int i = 1; i <= n;i++)\n    {\n        a[i] = read(), b[i] = read();\n        c[++m] = a[i], c[++m] = b[i];\n    }\n    sort(c + 1, c + m + 1);\n    m = unique(c + 1, c + m + 1) - c - 1;\n    for (int i = 1; i <= n;i++)\n        a[i] = lower_bound(c + 1, c + m + 1, a[i]) - c,\n        b[i] = lower_bound(c + 1, c + m + 1, b[i]) - c;\n    iota(fa + 1, fa + m + 1, 1);\n    for (int i = 1; i <= n; i++)\n        merge(a[i], b[i]);\n    cout << c[gf(1)] << endl;\n    return 0;\n}\n```",
        "postTime": 1668406240,
        "uid": 320933,
        "name": "Mfeitveer",
        "ccfLevel": 0,
        "title": "AT_abc277_c [ABC277C] Ladder Takahashi \u9898\u89e3"
    },
    {
        "content": "# \u9898\u610f\n\n\u6709\u4e00\u680b $10^9$ \u5c42\u7684\u5927\u697c\uff0c\u6709 $N$ \u4e2a\u68af\u5b50\u3002\n\n\u5728\u5927\u697c\u7b2c $1$ \u5c42\u7684\u9ad8\u6865\u53cd\u590d\u4f7f\u7528\u68af\u5b50\uff08$0$ \u6b21\u4e5f\u53ef\u4ee5\uff09\uff0c\u60f3\u5c3d\u91cf\u722c\u5230\u66f4\u9ad8\u7684\u697c\u5c42\u3002\n\n\u68af\u5b50\u7f16\u53f7\u4e3a $1 \\sim N$\uff0c\u7b2c $i$ \u4e2a\u68af\u5b50\u8fde\u63a5 $a_i$ \u5c42\u548c $b_i$ \u5c42\u3002\u5229\u7528\u68af\u5b50 $i$\uff0c\u53ef\u4ee5\u4ece $a_i$ \u5c42\u722c\u5230 $b_i$ \u5c42\uff0c\u4e5f\u53ef\u4ee5\u4ece $b_i$ \u5c42\u722c\u5230\u7b2c $a_i$ \u5c42\u3002\n\n\u867d\u7136\u53ef\u4ee5\u53cc\u5411\u79fb\u52a8\u5230\u4e0d\u540c\u7684\u697c\u5c42\uff0c\u4f46\u662f\u4e0d\u80fd\u5728\u5176\u4ed6\u697c\u5c42\u4e4b\u95f4\u79fb\u52a8\u3002\n\n\u53e6\u5916\uff0c\u9ad8\u6865\u867d\u7136\u53ef\u4ee5\u5728\u540c\u4e00\u5c42\u81ea\u7531\u79fb\u52a8\uff0c\u4f46\u662f\u4e0d\u80fd\u7528\u68af\u5b50\u4ee5\u5916\u7684\u65b9\u6cd5\u79fb\u52a8\u5230\u5176\u4ed6\u697c\u5c42\u3002\n\n\u8bf7\u4f60\u6c42\u51fa\u9ad8\u6865\u80fd\u5230\u8fbe\u7684\u6700\u9ad8\u697c\u5c42\u3002\n\n\u6570\u636e\u8303\u56f4 $ 1\\ \\leq\\ N\\ \\leq\\ 2\\ \\times\\ 10^5 $\uff0c$ 1\\ \\leq\\ a_i,\\ b_i\\ \\leq\\ 10^9 $\u3002\n\n# \u601d\u8def\n\n\u7531\u4e8e\u8fd9\u9053\u9898\u697c\u5c42\u6781\u591a\uff0c\u4f7f\u7528\u5e76\u67e5\u96c6\u7b49\u4e00\u4e9b\u7b97\u6cd5\u5728\u521d\u59cb\u5316\u7684\u65f6\u5019\u5c31\u53ef\u80fd\u8d85\u65f6\uff0c\u4f46\u662f\u68af\u5b50\u7ec4\u6570\u4e0d\u591a\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u7528\u94fe\u5f0f\u524d\u5411\u661f\u5efa\u56fe\u8dd1 dfs\u3002\n\n\u628a\u6bcf\u4e2a\u697c\u5c42\u770b\u4f5c\u4e00\u4e2a\u7ed3\u70b9\uff0c\u5176\u7f16\u53f7\u4e3a\u697c\u5c42\u6570\u3002\u628a\u8fde\u63a5\u7b2c $a_i$ \u5c42\u548c\u7b2c $b_i$ \u5c42\u7684\u68af\u5b50\u770b\u4f5c\u4ece $a_i$ \u8fde\u5230 $b_i$ \u7684\u53cc\u5411\u8fb9\uff0c\u4ece $1$ \u53f7\u7ed3\u70b9\u5f00\u59cb\u8fdb\u884c dfs\uff0c\u540c\u65f6\u8bb0\u5f55\u5230\u8fbe\u7ed3\u70b9\u7684\u7f16\u53f7\u6700\u5927\u503c\uff0c\u5c31\u662f\u6700\u7ec8\u7ed3\u679c\u3002\n\n\u7531\u4e8e\u6570\u636e\u8303\u56f4\u6781\u5927\uff0c\u5f00 $10^9$ \u7684\u4e00\u7ef4\u6570\u7ec4\u7a7a\u95f4\u4f1a\u7206\u70b8\uff0c\u6240\u4ee5\u7528 map \u6620\u5c04 `head` \u548c `vis` \u6570\u7ec4\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(N \\log{N})$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n# \u4ee3\u7801\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<map>\nconst int N=400005,M=1005;\nusing namespace std;\nstruct E{\n    int nxt,to;\n}edge[N];\nmap<int,int> head;\nint num_edge;\nvoid add(int from,int to){\n    num_edge++;\n    edge[num_edge].nxt=head[from];\n    edge[num_edge].to=to;\n    head[from]=num_edge;\n}//\u94fe\u5f0f\u524d\u5411\u661f \nint n,ans=1;\nmap<int,bool> vis;\nvoid dfs(int x){\n\tans=max(ans,x);//\u8bb0\u5f55\u7b54\u6848 \n\tfor(int i=head[x];i;i=edge[i].nxt){\n\t\tint j=edge[i].to;\n\t\tif(!vis[j]){ vis[j]=1; dfs(j);}\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1,a,b;i<=n;i++){\n\t\tscanf(\"%d %d\",&a,&b);\n\t\tadd(a,b);add(b,a);\n\t}\n\tdfs(1);\n\tprintf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1668330321,
        "uid": 352603,
        "name": "takeoff37808",
        "ccfLevel": 5,
        "title": "[ABC277C] Ladder Takahashi"
    },
    {
        "content": "## \u9898\u610f\n\n\u4e00\u4e2a\u5efa\u7b51\u6709 $10^9$ \u5c42\u697c\uff0c\u9ad8\u6865\u6709 $n$ \u4e2a\u68af\u5b50\uff0c\u4ed6\u6700\u521d\u5728 $1$ \u697c\u3002\n\n\u7b2c $i$ \u4e2a\u68af\u5b50\u8fde\u63a5 \u7b2c $u_i$ \u5c42\u697c\u548c\u7b2c $v_i$ \u5c42\u697c\uff0c**\u6ce8\u610f\u662f\u53cc\u5411\u7684**\u3002\n\n\u8bf7\u95ee\u9ad8\u6865\u6700\u9ad8\u80fd\u5230\u51e0\u5c42\u697c\u3002\n\n## \u89e3\u6cd5\n\n\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a BFS\uff0c\u4f46\u662f\u697c\u5c42\u6709 $10^9$\uff0c\u5b58\u4e0d\u4e0b\uff0c\u518d\u770b $n$\uff0c\u6bcf\u4e2a\u68af\u5b50\u8fde\u63a5 $2$ \u4e2a\u70b9\uff0c\u6700\u591a\u6709 $2n$ \u4e2a\u70b9\uff0c\u53ef\u4ee5\u79bb\u6563\u5316\u540e\u518d\u6765 BFS\u3002\n\n\u6ce8\u610f\u79bb\u6563\u5316\u65f6\u8981\u63d0\u524d\u5b58\u5165\u4e00\u4e2a $1$\uff0c\u56e0\u4e3a\u6709\u53ef\u80fd\u6ca1\u6709\u68af\u5b50\u8fde\u63a5\u4e00\u697c\uff0c\u9ad8\u6865\u65e0\u6cd5\u79fb\u52a8\n\n## Code\n\n```cpp\n#include<bits/stdc++.h>\n#define LL long long\n#define Fcin\\\n\tios :: sync_with_stdio(0);\\\n\tcin.tie(0); cout.tie(0)\nusing namespace std;\nconst LL N = 2e5 + 10;\nLL n, ans = 1, input[N][5], len = 0;\nstruct Tmp{\n\tLL x, k;\n\tbool operator < (const Tmp& b){\n\t\treturn x < b.x;\n\t}\n}tmp[N * 4];\nvector<LL> g[N * 10];\nset<LL> vis;\nmap<LL, LL> mp1, mp2;\nint main(){\n\tFcin;\n\tcin >> n;\n\tLL v, w;\n\t\n\t// \u79bb\u6563\u5316\n\tmp1[1] = 1;\n\tmp2[1] = 1;\n\tfor (LL i = 1; i <= n; i ++){\n\t\tcin >> input[i][1] >> input[i][2];\n\t\ttmp[++ len].x = input[i][1];\n\t\ttmp[len].k = input[i][1];\n\t\ttmp[++ len].x = input[i][2];\n\t\ttmp[len].k = input[i][2];\n\t}\n\t\n\tsort(tmp + 1, tmp + 1 + len);\n\tfor (LL i = 1; i <= len; i ++){\n\t\tif (!mp1.count(tmp[i].k)){\n\t\t\tmp1[tmp[i].k] = i + 1;\n\t\t\tmp2[i + 1] = tmp[i].k;\n\t\t}\n\t}\n\t\n\t//\u5b58\u68af\u5b50\n\tfor (LL i = 1; i <= n; i ++){\n\t\tv = mp1[input[i][1]], w = mp1[input[i][2]];\n\t\tg[v].emplace_back(w);\n\t\tg[w].emplace_back(v);\n\t}\n\t\n\t// BFS\n\tqueue<LL> q;\n\tq.push(1);\n\tvis.insert(1);\n\twhile (!q.empty()){\n\t\tLL now = q.front(); q.pop();\n\t\tans = max(ans, now);\n\t\tfor (LL to : g[now]){\n\t\t\tif (!vis.count(to)){\n\t\t\t\tvis.insert(to);\n\t\t\t\tq.push(to);\n\t\t\t}\n\t\t}\n\t}\n\tcout << mp2[ans];\n\t\t\n\treturn 0;\n}\n```\n",
        "postTime": 1668311579,
        "uid": 431658,
        "name": "LaDeX",
        "ccfLevel": 0,
        "title": "[ABC277C] Ladder Takahashi \u9898\u89e3"
    },
    {
        "content": "\u611f\u89c9\u6211\u505a\u590d\u6742\u4e86\u3002\n\n## \u601d\u8def\n\n$a_i$ \u4e0e $b_i$ \u5f88\u5927\uff0c\u6240\u4ee5\u79bb\u6563\u5316\u3002\n\n\u79bb\u6563\u5316\u540e\u8fde\u63a5\u4e00\u6761\u53cc\u5411\u8fb9\u3002\n\n\u7136\u540e\u4ece $1$ \u5f00\u59cb dfs\u3002dfs \u65f6\u8bb0\u5f55\u6700\u5927\u70b9\u503c\u5373\u53ef\u3002\n\n## \u4ee3\u7801\n\n\u7701\u53bb\u4e86\u5927\u6bb5\u7684\u7f3a\u7701\u6e90\u3002\n\n```cpp\nconst int N = 2e5 + 5;\nstruct Edge {int now, nxt, real_now;} e[N << 1];\nint head[N], cur;\nvoid add(int u, int v, int real_now) //\u94fe\u5f0f\u524d\u5411\u661f\uff0c\u540c\u65f6\u8bb0\u5f55\u4e00\u4e0b\"\u771f\u6b63\u7684\u70b9\"\u3002\n{\n\te[++cur].now = v;\n\te[cur].nxt = head[u];\n\te[cur].real_now = real_now;\n\thead[u] = cur;\n}\nint u[N], v[N];\nbool vis[N << 1];\nint tt[N << 1], tot;\nint ans = 1;\nvoid dfs(int u) //\u5927\u529b dfs \u5373\u53ef\n{\n\tvis[u] = true;\n\tfor (int i = head[u]; i; i = e[i].nxt)\n\t{\n\t\tint v = e[i].now;\n\t\tif (vis[v]) continue;\n\t\tans = max(ans, e[i].real_now);\n\t\tdfs(v);\n\t}\n}\nvoid solve()\n{\n\tint n;\n\tscanf(\"%d\", &n);\n\ttt[++tot] = 1;\n\tfor (int i = 1; i <= n; i++) scanf(\"%d%d\", &u[i], &v[i]), tt[++tot] = u[i], tt[++tot] = v[i];\n\tsort(tt + 1, tt + tot + 1);\n\tint m = unique(tt + 1, tt + tot + 1) - tt; //\u79bb\u6563\u5316\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tint tu = lower_bound(tt + 1, tt + m + 1, u[i]) - tt;\n\t\tint tv = lower_bound(tt + 1, tt + m + 1, v[i]) - tt;\n\t\tadd(tu, tv, v[i]), add(tv, tu, u[i]);\n\t}\n\tdfs(1);\n\tcout << ans << '\\n';\n}\n```",
        "postTime": 1668305393,
        "uid": 687698,
        "name": "_dijkstra_",
        "ccfLevel": 0,
        "title": "ABC277C  \u9898\u89e3"
    },
    {
        "content": "\n\u9898\u610f\u9898\u9762\u7ed9\u7684\u5f88\u6b63\u786e\u7684\uff0c\u6211\u5c31\u4e0d\u8bf4\u975e\u4eba\u7684\u8bdd\u4e86\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5982\u679c\u6211\u4eec\u628a\u4e24\u4e2a\u70b9 $(x,y)$ \u8fde\u8d77\u6765\u7684\u8bdd\uff0c\u90a3\u4e48\u4e0e x \u76f8\u8fde\u7684\u6240\u6709\u697c\u5c42\u90fd\u80fd\u5230\u8fbe y ,\u800c\u4e0e y \u76f8\u8fde\u7684\u6240\u6709\u697c\u5c42\u90fd\u80fd\u8fbe\u5230 x \u5c42\u3002\n\n\u6545\u60f3\u5230\u5e76\u67e5\u96c6\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u628a\u9898\u76ee\u53d8\u4e3a\u4e86\uff1a\u627e\u5230 1 \u6240\u5728\u8fde\u901a\u5757\u4e2d\u6700\u5927\u7684\u503c\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7528 map \u8fdb\u884c\u79bb\u6563\u5316\uff0c\u7136\u540e\u5408\u5e76\u7684\u65f6\u5019\u76f4\u63a5\u8ba9\u503c\u5c0f\u7684\u7236\u4eb2\u4e3a\u503c\u5927\u7684\uff0c\u4fdd\u8bc1\u7236\u4eb2\u6c38\u8fdc\u662f\u5927\u4e8e\u7b49\u4e8e\u4ed6\u7684\u6240\u6709\u513f\u5b50\u7684\uff0c\u56e0\u6b64\u6211\u4eec\u67e5\u627e\u7684\u65f6\u5019\u53ea\u7528\u67e5 1 \u6240\u5728\u8fde\u901a\u5757\u7684\u7236\u4eb2\u5c31\u884c\u4e86\u3002\n\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\n\nconst int N=4e5+10;\nint fa[N<<1];\nint a[N];\nmap<int,int>mp;\nint cnt=0;\nint n;\n\ninline int fnd(int u){\n\treturn u==fa[u]?u:fa[u]=fnd(fa[u]);\n}\n\n\nsigned main(){\n\tcin>>n;\n\tfor(int i=1;i<=(n<<1);++i)fa[i]=i;\n\tmp[1]=++cnt;\n\ta[cnt]=1;\n\tfor(int i=1;i<=n;++i){\n\t\tint x,y;\n\t\tcin>>x>>y;\n\t\tif(!mp[x])mp[x]=++cnt,a[cnt]=x;\n\t\tif(!mp[y])mp[y]=++cnt,a[cnt]=y;\n\t\tint fx=fnd(mp[x]),fy=fnd(mp[y]);\n\t\tif(a[fx]>a[fy]) fa[fy]=fx;\n\t\telse fa[fx]=fy;\n\t}\n\tcout<<a[fnd(1)]<<endl;\n\treturn(0-0);\n}\n```\n\n\n",
        "postTime": 1668424887,
        "uid": 388414,
        "name": "comcopy",
        "ccfLevel": 0,
        "title": "AT_abc277_c \u9898\u89e3"
    },
    {
        "content": "# [ABC277C] Ladder Takahashi\n\u770b\u5230\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u5173\u7cfb\uff0c\u8003\u8651\u56fe\u8bba\u3002\u5e94\u5f53\u5efa\u7acb\u7684\u662f**\u65e0\u5411\u56fe**\u3002\n\n\u8003\u8651\u5230\u503c\u57df\u662f $10^9$\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528 ```map```\u3002\u5bf9\u5efa\u7acb\u7684\u56fe\u8fdb\u884c\u7206\u641c\uff0c\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u7684\u6700\u5927\u6570\u503c\u5c31\u662f\u7b54\u6848\n```cpp\n#include<bits/stdc++.h>\n#include<ext/pb_ds/detail/standard_policies.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\n#include<ext/pb_ds/assoc_container.hpp>\n#define int long long\n#define mem(a,b) memset(a,b,sizeof(a))\n#define pb push_back\n#define clr clear\n#define fi first\n#define se second\n#define mx3(a,b,c) ((a>b?a:b)>c?(a>b?a:b):c)\n#define mn3(a,b,c) ((a<b?a:b)<c?(a<b?a:b):c)\n#define infll 0x3f3f3f3f3f3f3f3f\n#define inf 0x3f3f3f3f\n#define ook order_of_key\n#define ins insert\n#define oset tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update>\n#define pii pair<int,int>\n#define pqueue priority_queue\n#define F(i,a,b) for(int i=a;i<=(b);i++)\n#define F2(i,a,b) for(int i=a;i<(b);i++)\n#define dF(i,a,b) for(int i=a;i>=(b);i--)\n#define ls (o<<1)\n#define rs (o<<1|1)\n#define lowbit(x) (x&(-x))\n#define wh(i) while(i--)\nusing namespace std;\nusing namespace __gnu_pbds;\ninline int read(){\n\tregister int x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-') f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9') x=(x<<3)+(x<<1)+(c^48),c=getchar();\n\treturn x*f;\n}\ninline void print(int x){\n\tif(!x) return;\n\tif(x<0) putchar('-'),x=-x;\n\tprint(x/10);\n\tputchar(x%10+'0');\n}\nconst int mod=998244353,maxn=214514;\nmap<int,bool>vis;\nmap<int,vector<int>>a;\nint ans=1;\nvoid dfs(int x){\n\tif(vis[x]) return;\n\tvis[x]=1;\n\tans=max(ans,x);\n\tfor(auto i:a[x]) dfs(i);\n}\nsigned main(){\n\tint lzm=read();\n\twh(lzm){\n\t\tint x=read(),y=read();\n\t\ta[x].push_back(y);\n\t\ta[y].push_back(x);\n\t}\n\tdfs(1);\n\tprint(ans);\n}\n```",
        "postTime": 1668341420,
        "uid": 605313,
        "name": "Nullptr_qwq",
        "ccfLevel": 0,
        "title": "[ABC277C] Ladder Takahashi"
    }
]