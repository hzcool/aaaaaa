[
    {
        "content": "\u6807\u7b7e: \u5b57\u7b26\u4e32.\n\n\u8bb0 $k$ \u6b21\u64cd\u4f5c\u540e\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\u4e3a $s'$ (\u5373\u7b54\u6848).\n\n\u8bbe $s$ \u521d\u59cb\u6700\u5c0f\u7684\u5b57\u7b26\u4e3a $c$ , \u90a3\u4e48\u6211\u4eec\u663e\u7136\u5e0c\u671b $s'$ \u5f00\u5934\u7684 $c$ \u5c3d\u91cf\u591a.\n\n\u5047\u8bbe $c$ \u4e0d\u5728\u672b\u5c3e, \u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u6b21\u64cd\u4f5c\u5c06\u4efb\u610f\u4e00\u6bb5 $c$ \u79fb\u52a8\u5230\u672b\u5c3e, \u4e4b\u540e\u6bcf\u6b21\u64cd\u4f5c\u90fd\u53ef\u4ee5\u4f7f\u8fd9\u6bb5 $c$ \u500d\u957f. \u663e\u7136\u8fd9\u6bb5 $c$ \u8d8a\u957f\u8d8a\u597d. \n\n\u9664\u6b64\u4e4b\u5916, \u6211\u4eec\u5e0c\u671b $s'$ \u9664\u53bb\u5f00\u5934\u7684 $c$ \u7684\u90e8\u5206 $s''$ \u5b57\u5178\u5e8f\u5c3d\u91cf\u5c0f, \u8003\u8651\u8fd9\u4e2a\u90e8\u5206\u662f\u600e\u4e48\u6765\u7684: \u8bbe $t$ \u4e3a\u7b2c\u4e00\u6b21\u64cd\u4f5c\u62fc\u63a5\u6210\u7684\u5b57\u7b26\u4e32(**\u4e0d\u662f**\u622a\u53d6\u540e\u7684), \u5047\u8bbe\u6211\u4eec\u622a\u53d6\u7684\u53f3\u7aef\u4e3a $r(r\\geqslant n)$ , \u4ee5 $r$ \u4e3a\u7ed3\u5c3e\u7684\u6781\u957f $c$ \u6bb5\u5de6\u7aef\u70b9\u4e3a $l$ , \u4e0d\u96be\u53d1\u73b0 $s''=t_{l-1}t_{l-2}t_{l-3}...$ , \u6211\u4eec\u53ea\u8981\u628a $t$ \u7ffb\u8f6c\u540e\u627e\u5230\u6700\u5c0f\u7684\u540e\u7f00\u5373\u53ef, \u8fd9\u4e2a\u6570\u636e\u8303\u56f4\u600e\u4e48\u66b4\u529b\u90fd\u53ef\u4ee5. \u53e6\u5916, \u5982\u679c\u6211\u4eec\u5728 $t$ \u4e0a\u627e\u6700\u957f $c$ \u6bb5,  \u5c31\u4e0d\u7528\u5173\u5fc3 $c$ \u662f\u5426\u5728\u672b\u5c3e\u4e86. \n\n\u6ce8\u610f\u7279\u5224\u4e00\u4e0b $k=1$ \u7684\u60c5\u51b5.\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n^2)$ .\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nint read();\nint n, k;\nchar s[10004], res[10004], c = 'z';\nint l[10004], len, mx, vis;\n\nvoid cpy(int p) {\n    for (int i = 1; i <= n; ++i) res[i] = s[p + i - 1];\n}\n\nvoid check(int p) {\n    if (!vis) cpy(p), vis = 1;\n    for (int i = 1; i <= n; ++i) {\n        if (res[i] < s[p + i - 1]) return;\n        if (res[i] > s[p + i - 1]) return cpy(p);\n    }\n}\n\nint main() {\n    scanf(\"%d%d%s\", &n, &k, s + 1);\n    for (int i = 1; i <= n; ++i) c = min(c, s[(n << 1) + 1 - i] = s[i]);\n    if (k >= 15) {\n        for (int i = 1; i <= n; ++i) putchar(c);\n        return 0;\n    }\n    if (k == 1) {\n        for (int i = 1; i <= n + 1; ++i) check(i);\n        for (int i = 1; i <= n; ++i) putchar(res[i]);\n        return 0;\n    }\n    for (int i = 1; i <= n + n; ++i)\n        (s[i] == c) ? mx = max(mx, l[i] = l[i - 1] + 1) : 0;\n\n    if ((len = mx << k - 1) >= n) {\n        for (int i = 1; i <= n; ++i) putchar(c);\n        return 0;\n    }\n    for (int i = 1; i <= n + mx; ++i)\n        if (l[i] == mx) check(i - l[i] + 1);\n    for (int i = 1; i <= len; ++i) putchar(c);\n    for (int i = len + 1; i <= n; ++i) putchar(res[i - len + mx]);\n    return 0;\n}\n```\n\n",
        "postTime": 1582979451,
        "uid": 51237,
        "name": "Kinandra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT5162 \u3010[AGC037E] Reversing and Concatenating\u3011"
    },
    {
        "content": "\u8bbe\u6574\u4e2a\u4e32\u91cc\u6700\u5c0f\u7684\u5b57\u6bcd\u4e3a `a`\u3002\u6211\u4eec\u8003\u8651\u8fd9\u4e2a\u4e32\u91cc `a` \u7684\u8fde\u7eed\u6bb5\uff1a\n- \u82e5\u4e00\u4e2a `a` \u8fde\u7eed\u6bb5\u5728\u672b\u5c3e\uff0c\u53ef\u4ee5\u4f7f\u5f97\u4e00\u6b21\u64cd\u4f5c\u540e\u7684\u4e32\u6709\u4e00\u4e2a\u957f\u5ea6\u4e3a\u5b83\u4e24\u500d\u7684 `a` \u6bb5\uff1b\n- \u5bf9\u4e8e\u4e0d\u5728\u672b\u5c3e\u7684 `a` \u6bb5\uff0c\u53ef\u4ee5\u4f7f\u5f97\u4e00\u6b21\u64cd\u4f5c\u540e\u7684\u4e32\u6709\u4e00\u4e2a\u4e0e\u5b83\u7b49\u957f\u7684 `a` \u6bb5\u3002\n\n\u5f53\u7136\uff0c\u6240\u6709\u8fd9\u4e9b\u6bb5\u7684\u957f\u5ea6\u4e0d\u80fd\u5927\u4e8e $n$\u3002\n\n\u90a3\u4e48\u7531\u6b64\uff0c\u82e5 $k>1$\uff0c\u6211\u4eec\u53ef\u4ee5\u8ba1\u7b97\u51fa\u4e00\u6b21\u64cd\u4f5c\u540e\u80fd\u5f97\u5230\u7684\u6700\u957f `a` \u6bb5\u957f\u5ea6\uff0c\u5e76\u4e14\u628a\u8fd9\u4e2a\u6bb5\u653e\u5728\u5f97\u5230\u7684\u4e32\u7684\u672b\u5c3e\u3002\u4e4b\u540e\u6bcf\u6b21\u64cd\u4f5c\uff0c\u6211\u4eec\u4f7f\u5f97\u8fd9\u4e2a\u6bb5\u7684\u957f\u5ea6\u52a0\u500d\uff0c\u5e76\u540c\u6837\u628a\u5b83\u653e\u5728\u672b\u5c3e\uff0c\u4f46\u5728\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u628a\u5b83\u653e\u5728\u5f00\u5934\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u653e\u5728\u7ed3\u679c\u4e32\u5f00\u5934\u7684\u8fd9\u4e2a `a` \u6bb5\u4e00\u5b9a\u662f\u6211\u4eec\u80fd\u591f\u5f97\u5230\u7684\u6700\u957f `a` \u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u76ee\u6807\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u4e32\u4e00\u5b9a\u4e5f\u5728\u5f00\u5934\u6709\u8fd9\u4e48\u591a `a` \u4e32\uff0c\u5e76\u4e14\u4e5f\u4e00\u5b9a\u53ef\u4ee5\u7531\u4e0a\u8ff0\u8fd9\u79cd\u5f62\u5f0f\u7684\u4e00\u7cfb\u5217\u64cd\u4f5c\u5f97\u5230\u3002\u6211\u4eec\u63a5\u4e0b\u6765\u9700\u8981\u8003\u8651\u8ba9\u540e\u9762\u7684\u4e32\u7684\u5b57\u5178\u5e8f\u5c3d\u91cf\u5c0f\u3002\n\n\u8bbe $A$ \u8868\u793a\u4e00\u4e2a\u6781\u957f\u7684 `a` \u6bb5\u3002\u90a3\u4e48\uff0c\u4e00\u4e2a\u5f62\u5982 $BA$ \u7684\u4e32\u4e00\u6b21\u64cd\u4f5c\u540e\u4f1a\u5f97\u5230\u7684\u662f $BA^2$ \u7684\u4e00\u4e2a\u540e\u7f00\uff08\u5982\u679c\u8fd9\u4e0d\u662f\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\uff09\u3002\u53ef\u4ee5\u5f97\u5230\uff0c\u5982\u679c\u7b2c\u4e00\u6b21\u64cd\u4f5c\u540e\u5f97\u5230\u7684\u4e32\u662f $BA$\uff0c\u90a3\u4e48\u6700\u540e\u7684\u4e32\u662f $A^{2^{k-1}}B_R$ \u7684\u4e00\u4e2a\u524d\u7f00\u3002\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u4f7f\u5f97 $B_R$ \u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\n\n\u63a5\u4e0b\u6765\u662f\u6211\u89c9\u5f97\u8fd9\u9053\u4e0d\u7b97\u56f0\u96be\u7684\u9898\u771f\u6b63\u6709\u610f\u601d\u7684\u5730\u65b9\uff1a\u7531\u4e8e $SS_R$ \u662f\u56de\u6587\u4e32\uff0c\u90a3\u4e48\u82e5 $BA$ \u5728\u5176\u4e2d\u51fa\u73b0\uff0c\u5219 $AB_R$ \u4e5f\u5728\u5176\u4e2d\u51fa\u73b0\u3002\u53c8\u7531\u4e8e $A$ \u662f $SS_R$ \u4e2d\u6700\u957f\u7684 `a` \u6bb5\uff0c\u6240\u4ee5 $AB_R$ \u5c31\u662f $SS_R$ \u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u957f\u5ea6\u4e3a $n$ \u7684\u5b50\u4e32\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5f97\u5230\u4e86\u6574\u4e2a\u7b97\u6cd5\u7684\u53e6\u4e00\u79cd\u63cf\u8ff0\uff08\u6ce8\u610f\u5230\u5728\u4e00\u6bb5\u4ee5\u524d\u6211\u4eec\u5df2\u7ecf\u5f97\u5230\u4e86\u7b97\u6cd5\u7684\u4e00\u79cd\u63cf\u8ff0\uff0c\u914d\u5408\u4e00\u4e9b\u7279\u5224\u5df2\u7ecf\u53ef\u4ee5\u901a\u8fc7\u6b64\u9898\uff09\uff1a\u627e\u5230 $SS_R$ \u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u957f\u5ea6\u4e3a $n$ \u7684\u5b50\u4e32\uff0c\u7136\u540e\u5c06\u5176\u5f00\u5934\u7684\u540c\u79cd\u5b57\u7b26\u7684\u8fde\u7eed\u6bb5 $2^{k-1}$ \u500d\u957f\u3002\u800c\u8fd9\u6837\u6b63\u597d\u4e5f\u5b8c\u7f8e\u5951\u5408\u4e86 $k=1$ \u7684\u60c5\u51b5\uff01\u770b\u5230\u4e86\u5417\uff0c\u6211\u4eec\u6700\u7ec8\u5bfc\u51fa\u4e86\u4e00\u4e2a\u975e\u5e38\u7b80\u6d01\u7684\u7b97\u6cd5\uff0c\u5305\u542b\u4e86\u6240\u6709\u7279\u6b8a\u60c5\u51b5\uff0c\u5e76\u4e14\u751a\u81f3\u4e0d\u9700\u8981\u663e\u5f0f\u627e\u51fa\u6574\u4e2a\u4e32\u5185\u6700\u5c0f\u7684\u5b57\u7b26\u3002\n\n\u5269\u4e0b\u7684\u53ea\u6709\u5982\u4f55\u627e\u5230\u8fd9\u4e2a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5b50\u4e32\u2014\u2014\u5f53\u7136\u662f $O(n^2)$ \u66b4\u529b\u5373\u53ef\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ninline int readint(){\n\tint x=0;\n\tbool f=0;\n\tchar c=getchar();\n\twhile(!isdigit(c)&&c!='-') c=getchar();\n\tif(c=='-'){\n\t\tf=1;\n\t\tc=getchar();\n\t}\n\twhile(isdigit(c)){\n\t\tx=x*10+c-'0';\n\t\tc=getchar();\n\t}\n\treturn f?-x:x;\n}\nconst int maxn=5e3+5;\nint n,k;\nchar s[maxn],t[maxn];\nchar get(int x){\n\treturn x<=n?s[x]:s[n*2-x+1];\n}\nint main(){\n\t#ifdef LOCAL\n\tfreopen(\"in.txt\",\"r\",stdin);\n\tfreopen(\"out.txt\",\"w\",stdout);\n\t#endif\n\tn=readint();\n\tk=readint();\n\tscanf(\"%s\",s+1);\n\tfor(int i=1;i<=n;i++) t[i]=s[i];\n\tfor(int i=2;i<=n+1;i++){\n\t\tbool flag=0;\n\t\tfor(int j=1;j<=n;j++) if(get(i+j-1)!=t[j]){\n\t\t\tflag=get(i+j-1)<t[j];\n\t\t\tbreak;\n\t\t}\n\t\tif(flag) for(int j=1;j<=n;j++) t[j]=get(i+j-1);\n\t}\n\tint x=1;\n\twhile(x<n&&t[x+1]==t[1]) x++;\n\tint y=k<15?min(x<<(k-1),n):n;\n\tfor(int i=1;i<=y;i++) printf(\"%c\",t[1]);\n\tfor(int i=1;i<=n-y;i++) printf(\"%c\",t[x+i]);\n\t#ifdef LOCAL\n\tfprintf(stderr,\"%d\\n\",(int)clock());\n\t#endif\n\treturn 0;\n}\n```\n\uff08\u5176\u5b9e\u672c\u6765\u60f3\u5199\u4e2a\u6bd4\u8f83\u7406\u6027\u7684\u4e25\u8c28\u8bc1\u660e\u7684\uff0c\u4f46\u662f\u6700\u540e\u5199\u51fa\u6765\u5c31\u6bd4\u8f83\u5947\u602a\uff1f",
        "postTime": 1638797500,
        "uid": 174045,
        "name": "FZzzz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT5162 \u3010[AGC037E] Reversing and Concatenating\u3011"
    },
    {
        "content": "\u9996\u5148\u8fd9\u4e2a $k$ \u770b\u7740\uff0c\u5f88\u5413\u4eba\u9515\uff01\n\n\u6211\u4eec\u8003\u8651\uff0c\u65e2\u7136\u662f\u8981\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u90a3\u6211\u4eec\u5148\u8003\u8651 $s$ \u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u6700\u5c0f\u3002\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u6240\u6709\u4e0d\u662f\u6700\u5c0f\u7684\u5b57\u7b26\u5168\u90e8\u5f52\u4e3a\u4e00\u7c7b\uff0c\u6362\u800c\u8a00\u4e4b\uff0c\u5b57\u7b26\u4e32\u73b0\u5728\u53ea\u5269\u4e0b\u4e86\u96f6\u548c\u4e00\u3002\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u7b2c $k$ \u6b21\u64cd\u4f5c\u540e\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u4e32\uff0c\u5b9e\u9645\u4e0a\u5bf9\u5e94\u5230\u5c31\u662f\u7b2c $k$ \u6b21\u500d\u957f\u540e\u6700\u957f\u7684\u8fde\u96f6\u6bb5\uff08\u548c\u5b83\u62d6\u7740\u7684\u4e00\u5806\u5b57\u7b26\uff09\u3002\u6211\u4eec\u89c2\u5bdf\u8fd9\u4e2a\u8fde\u96f6\uff0c\u5982\u679c\u6ca1\u6709\u8de8\u8d8a\u4fe9\u7b2c $k-1$ \u6b21\u64cd\u4f5c\u540e\u4e32\u7684\u5206\u754c\uff0c\u90a3\u8fde\u96f6\u6570\u91cf\u4e00\u5b9a\u4e0d\u591a\u4e8e\u7b2c $k-1$ \u6b21\u64cd\u4f5c\u540e\u4e32\u91cc\u7684\u8fde\u96f6\u6570\u91cf\uff0c\u8fdb\u800c\u4e5f\u4e0d\u591a\u4e8e\u7b2c $k-1$ \u6b21\u500d\u957f\u540e\u4e32\u91cc\u7684\u6700\u957f\u8fde\u96f6\u957f\u5ea6\uff08\u8fc7 $n$ \u81ea\u52a8\u622a\u65ad\uff09\u3002\u800c\u5982\u679c\u8de8\u8d8a\u4e86\u8fd9\u4e2a\u5206\u754c\uff0c\u5219\u81f3\u591a\u4f7f\u8fde\u96f6\u957f\u5ea6\u7ffb\u500d\uff08\u7406\u60f3\u72b6\u6001\uff0c\u8fde\u96f6\u6b63\u597d\u5728\u6700\u672b\u5c3e\uff09\u3002\u6211\u4eec\u5b9e\u9645\u4e0a\u53d1\u73b0\uff0c\u4e5f\u53ea\u6709\u6309\u7167\u5982\u6b64\u64cd\u4f5c\uff0c\u6700\u540e\u5f97\u5230\u7684\u8fde\u96f6\u624d\u4f1a\u662f\u6700\u957f\u7684\u3002\u53ea\u6709\u7b2c\u4e00\u6b21\u64cd\u4f5c\u9700\u8981\u4e8c\u62e9\u4e00\u4e0b\u2014\u2014\u6311\u4e00\u4e2a\u8fde\u96f6\u6bb5\u585e\u5230\u672b\u5c3e\uff0c\u6216\u8005\u76f4\u63a5\u628a\u672b\u5c3e\u7684\u8fde\u96f6\u6bb5\u500d\u957f\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u6709\u57fa\u672c\u601d\u8def\u4e86\uff0c\u7136\u540e\u5927\u773c\u89c2\u5bdf\u4e00\u4e0b\u53d1\u73b0\u8fd9\u4e2a $n$ \u5176\u5b9e\u5f88\u5c0f\uff0c\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u76f4\u63a5\u91c7\u7528\u6700\u66b4\u529b\u7684\u65b9\u5f0f\uff1a\u679a\u4e3e\u7b2c\u4e00\u6b65\uff0c\u7136\u540e\u6309\u7167\u4e0a\u9762\u7684\u56fa\u5b9a\u7b56\u7565\u5927\u529b\u6a21\u62df\u3002\u6ce8\u610f\u5230\u4e00\u6b21\u6a21\u62df\u4e2d\u5f53\u8fde\u96f6\u5df2\u7ecf\u5145\u6ee1\u4e86\u6574\u4e2a\u4e32\u5c31\u53ef\u4ee5\u76f4\u63a5\u622a\u65ad\u4e86\u3002\u5982\u6b64\u4e00\u6765\u6bcf\u4e2a\u5b57\u7b26\u4e5f\u662f\u81f3\u591a\u88ab\u8e22\u51fa\u53bb\u4e00\u6b21\uff0c\u4e00\u8f6e\u6a21\u62df\u662f\u7ebf\u6027\u7684\uff0c\u603b\u590d\u6742\u5ea6\u4e5f\u5c31\u662f\u5e73\u65b9\u7684\u3002\n\n\u4ee3\u7801\u5de8\u5927\u597d\u5199\u3002\u7531\u4e8e\u9700\u8981\u652f\u6301\u8fd9\u4e2a\u5b57\u7b26\u4e32\u957f\u5f97\u50cf\u4e2a\u961f\u5217\uff0c\u800c\u4e14\u4e0d\u5e0c\u671b\u50cf\u6807\u51c6\u5e93\u961f\u5217\u90a3\u6837\u53ea\u63d0\u4f9b\u5c11\u5f97\u53ef\u601c\u7684\u63a5\u53e3\uff0c\u8fd9\u91cc\u4f7f\u7528\u4e86 deque \u5b9e\u73b0\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef deque<char> str;\nint n, k;\nstr calc(str s) {\n  int cnt = 0;\n  for (auto it = s.rbegin(); it != s.rend(); ++cnt, ++it)\n    if (*it != *s.rbegin()) break;\n  for (int i = 0; i < k && cnt < n; ++i, cnt <<= 1)\n    for (int j = 0; j < min(cnt, n - cnt); ++j) {\n      s.pop_front();\n      s.push_back(s.back());\n    }\n  return reverse(s.begin(), s.end()), s;\n}\nsigned main() {\n  cin.tie(nullptr)->sync_with_stdio(false);\n  string s;\n  cin >> n >> k >> s, --k;\n  str tmp(s.begin(), s.end()), ans = calc(tmp);\n  for (int i = 1; i <= n; ++i) {\n    tmp.pop_front();\n    tmp.push_back(s[n - i]);\n    ans = min(ans, calc(tmp));\n  }\n  return cout << string(ans.begin(), ans.end()) << endl, 0;\n}\n```",
        "postTime": 1678198728,
        "uid": 250637,
        "name": "UnyieldingTrilobite",
        "ccfLevel": 9,
        "title": "\u590d\u5065\u9898"
    },
    {
        "content": "\u96be\u5f97\u6bd4\u8f83\u7b80\u5355\u7684 AGC \u9898\u3002\u9996\u5148\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e $k\\ge \\lceil\\log n\\rceil+1$ \u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ea\u7528\u627e\u5230 $S$ \u4e2d\u6700\u5c0f\u7684\u5b57\u7b26\u8f93\u51fa $n$ \u6b21\u5373\u53ef\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ea\u7528\u8003\u8651 $k<\\lceil\\log n\\rceil+1$ \u7684\u60c5\u51b5\u3002\n\n\u4e3a\u4e86\u8ba9\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6700\u540e\u5f00\u5934\u6700\u5c0f\u5b57\u7b26\u7684\u6570\u91cf\u5c31\u8981\u5c3d\u91cf\u591a\u3002\u9996\u5148\u6211\u4eec\u627e\u5230\u539f\u4e32\u4e2d\u6bcf\u4e2a\u6781\u5927\u7684\u6700\u5c0f\u5b57\u7b26\u7ec4\u6210\u7684\u8fde\u7eed\u6bb5\uff0c\u8bbe\u5b83\u7684\u957f\u5ea6\u4e3a $l$\uff0c\u90a3\u4e48\u5728\u6700\u540e\u7684\u4e32\u4e2d\uff0c\u5982\u679c\u8fd9\u4e2a\u6781\u957f\u8fde\u7eed\u6bb5\u7684\u53f3\u7aef\u70b9\u4e3a $n$\uff0c\u90a3\u4e48\u5f00\u5934\u6700\u5c0f\u5b57\u7b26\u6570\u91cf\u5373\u4e3a $l\\times 2^k$\uff0c\u5426\u5219\u4e3a $l\\times 2^{k-1}$\u3002\u5bf9\u4e8e\u6700\u540e\u6570\u91cf\u66f4\u5927\u7684\uff0c\u76f4\u63a5\u8986\u76d6\u7b54\u6848\u5373\u53ef\uff0c\u5426\u5219\u6211\u4eec\u9700\u8981\u6bd4\u8f83\u540e\u9762\u90e8\u5206\u7684\u5b57\u5178\u5e8f\u3002\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u53f3\u7aef\u70b9\u4e3a $n$ \u7684\u60c5\u51b5\uff0c\u540e\u9762\u7684\u90e8\u5206\u76f8\u5f53\u4e8e\u4ece\u5de6\u7aef\u70b9\u4e0d\u65ad\u5f80\u524d\u8df3\uff0c\u5c06\u626b\u5230\u7684\u5b57\u7b26\u4f9d\u6b21\u8fde\u63a5\u5f62\u6210\u7684\u4e32\uff1b\u800c\u5bf9\u4e8e\u53f3\u7aef\u70b9\u4e0d\u4e3a $n$ \u7684\u60c5\u51b5\uff0c\u540e\u9762\u7684\u90e8\u5206\u76f8\u5f53\u4e8e\u4ece\u53f3\u7aef\u70b9\u8df3\u5230 $n$ \u518d\u8df3\u56de\u53bb\uff0c\u5c06\u626b\u5230\u7684\u5b57\u7b26\u4f9d\u6b21\u8fde\u63a5\u5f62\u6210\u7684\u4e32\u3002\uff08\u53ef\u4ee5\u753b\u56fe\u611f\u6027\u7406\u89e3\uff09\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n^2)$\u3002\n\nCode:\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cassert>\nusing namespace std ;\nconst int MAXN = 5e3 + 10 ;\nint n , K , lg[MAXN] ;\nchar s[MAXN * 2] , t[MAXN] , ans[MAXN] ;\nint main () {\n\tscanf (\"%d%d\" , &n , &K) ;\n\tfor (int i = 2 ; i <= n ; i++) lg[i] = lg[i >> 1] + 1 ;\n\tscanf (\"%s\" , s + 1) ; char ch = 'z' ;\n\tfor (int i = 1 ; i <= n ; i++)\n\t\tif (s[i] < ch) ch = s[i] ;\n\tif (K > lg[n] + 1 || (K == lg[n] + 1 && lg[n] != lg[n - 1])) {\n\t\tfor (int i = 1 ; i <= n ; i++) putchar (ch) ;\n\t\treturn 0 ;\n\t}\n\tfor (int i = 1 ; i <= n ; i++) s[2 * n - i + 1] = s[i] ;\n\tif (K == 1) {\n\t\tbool flag = 0 ;\n\t\tfor (int i = 1 ; i <= n + 1 ; i++) {\n\t\t\tif (s[i] != ch) continue ;\n\t\t\tfor (int j = i ; j <= i + n - 1 ; j++) t[j - i + 1] = s[j] ;\n\t\t\tif (!flag) {\n\t\t\t\tflag = 1 ;\n\t\t\t\tfor (int j = 1 ; j <= n ; j++) ans[j] = t[j] ;\n\t\t\t\tcontinue ;\n\t\t\t}\n\t\t\tbool ff = 0 ;\n\t\t\tfor (int j = 1 ; j <= n ; j++)\n\t\t\t\tif (t[j] < ans[j]) {ff = 1 ; break ;}\n\t\t\t\telse if (t[j] > ans[j]) break ;\n\t\t\tif (ff) for (int j = 1 ; j <= n ; j++) ans[j] = t[j] ;\n\t\t}\n\t\tfor (int i = 1 ; i <= n ; i++) putchar (ans[i]) ;\n\t\treturn 0 ;\n\t}\n\tint mx = 0 ;\n\tfor (int i = 1 , p = 0 ; i <= n ; i = p + 1) {\n\t\tif (s[i] != ch) {p = i ; continue ;}\n\t\tfor (p = i ; p <= n && s[p] == ch ; p++) ;\n\t\tp-- ;\n\t\tint tmp = p - i + 1 ;\n\t\t//printf (\"%d %d:%d\\n\" , i , p , tmp) ;\n\t\tif (p == n) tmp *= 2 ;\n\t\tif (tmp * (1 << (K - 1)) >= n) {\n\t\t\tfor (int j = 1 ; j <= n ; j++) putchar (ch) ;\n\t\t\treturn 0 ;\n\t\t}\n\t\tif (tmp > mx) {\n\t\t\tmx = tmp ; int nx = tmp * (1 << (K - 1)) + 1 ;\n\t\t\tfor (int j = 1 ; j < nx ; j++) ans[j] = ch ;\n\t\t\tint k = p + 1 ; bool f1 = 0 ;\n\t\t\tif (p == n) k = i - 1 , f1 = 1 ;\n\t\t\tfor (int j = nx ; j <= n ; j++) {\n\t\t\t\tans[j] = s[k] ;\n\t\t\t\tif (f1) k-- ;\n\t\t\t\telse {\n\t\t\t\t\tk++ ;\n\t\t\t\t\tif (k == n + 1) k-- , f1 = 1 ;\n\t\t\t\t}\n\t\t\t}\n\t\t\t\t\n\t\t}\n\t\telse if (tmp == mx) {\n\t\t\tint nx = tmp * (1 << (K - 1)) + 1 ;\n\t\t\tfor (int j = 1 ; j < nx ; j++) t[j] = ch ;\n\t\t\tint k = p + 1 ; bool f1 = 0 ;\n\t\t\tif (p == n) k = i - 1 , f1 = 1 ;\n\t\t\tfor (int j = nx ; j <= n ; j++) {\n\t\t\t\tt[j] = s[k] ;\n\t\t\t\tif (f1) k-- ;\n\t\t\t\telse {\n\t\t\t\t\tk++ ;\n\t\t\t\t\tif (k == n + 1) k-- , f1 = 1 ;\n\t\t\t\t}\n\t\t\t}\n\t\t\tbool ff = 0 ;\n\t\t\tfor (int j = 1 ; j <= n ; j++)\n\t\t\t\tif (t[j] < ans[j]) {ff = 1 ; break ;}\n\t\t\t\telse if (t[j] > ans[j]) break ;\n\t\t\tif (ff) for (int j = 1 ; j <= n ; j++) ans[j] = t[j] ; \n\t\t}\n\t}\n\tfor (int i = 1 ; i <= n ; i++) putchar (ans[i]) ;\n\treturn 0 ;\n}\n```",
        "postTime": 1662854269,
        "uid": 122641,
        "name": "GIFBMP",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT5162 \u3010[AGC037E] Reversing and Concatenating\u3011"
    },
    {
        "content": "\u9996\u5148\u60f3\u5230\u53ea\u8fdb\u884c\u4e00\u6b65\u8fd9\u6837\u7684\u64cd\u4f5c\uff0c\u663e\u7136\u662f\u8981\u628a\u6700\u5c0f\u7684\u90a3\u4e2a\u5728\u4e00\u8d77\u6700\u957f\u7684\u53d6\u8d70\uff0c\u82e5\u6709\u76f8\u540c\u957f\u5ea6\uff0c\u90a3\u4e48\u540e\u9762\u7684\u5b57\u5178\u5e8f\u8981\u5c3d\u53ef\u80fd\u7684\u5c0f\u3002\n\n\u90a3\u4e48\u8981\u8fdb\u884c\u66f4\u591a\u7684\u6b65\u9aa4\u600e\u4e48\u505a\u5462\uff0c\u663e\u7136\u6bcf\u6b21\u628a\u6700\u5c0f\u7684\u653e\u5728\u5934\u4e0a\u662f\u4e0d\u5408\u7406\u7684\uff0c\u56e0\u4e3a\u53ea\u6709\u5c3e\u90e8\u7684\u4f1a\u88ab\u590d\u5236\uff0c\u800c\u4e00\u6b21\u64cd\u4f5c\u53ef\u4ee5\u628a\u4efb\u610f\u4e00\u6bb5\u6254\u5230\u961f\u5c3e\u6216\u653e\u5230\u5f00\u5934\uff0c\u6240\u4ee5\u9664\u4e86\u5f00\u5934\u53ef\u7ed3\u5c3e\uff0c\u8ba9\u6700\u5c0f\u7684\u5b57\u6bcd\u7ec4\u6210\u7684\u4e00\u6bb5\u653e\u5728\u6700\u672b\u5c3e\u80af\u5b9a\u662f\u6700\u4f18\u7684\u3002\n\n\u4f46\u5982\u679c\u5b58\u5728\u540c\u6837\u7684\u51e0\u7ec4\u7684\u600e\u4e48\u529e\u5462\uff0c\u6a21\u62df\u51e0\u4e2a\u5c0f\u7684\u6570\u636e\u89c2\u5bdf\u5c31\u4f1a\u53d1\u73b0\uff0c\u590d\u5236\u540e\u524d\u9762\u7684\u4e00\u6bb5\u5c31\u4f1a\u53cd\u8fc7\u6765\u62fc\u5728\u6700\u5c0f\u7684\u90a3\u6bb5\u590d\u5236\u5b8c\u7684\u540e\u9762\uff0c\u800c\u8fd9\u4e00\u6bb5\u662f\u6c38\u8fdc\u4e0d\u4f1a\u53d8\u7684\u3002\n\n\u6bd4\u5982 $\\textsf{twtwa}\\rightarrow  \\textsf{t\\underline{wtwaa}wtwt}\\rightarrow \\textsf{wt\\underline{waaaa}wtw} \\rightarrow \\textsf{aaaaw}$\n\n\u867d\u7136\u6700\u540e\u7ed3\u679c\u4e2d\u524d\u9762\u7684 `a` \u7684\u6570\u91cf\u589e\u52a0\u4e86\uff0c\u4f46\u6700\u540e\u4e00\u76f4\u662f $\\textsf{wtwt}$ \u540e\u9762\u51cf\u5c11\u6389\u4e86\u4e00\u4e9b\uff0c\u6240\u4ee5\u82e5\u5f00\u59cb\u65f6\u6700\u5c0f\u7684\u5b57\u6bcd\u7ec4\u6210\u7684\u4e00\u5757 **\u524d\u9762\u4e00\u6bb5\u5012\u8fc7\u6765** \u7684\u5b57\u5178\u5e8f\u662f\u6700\u5c0f\u7684\uff0c\u53d8\u6362\u540e\u80af\u5b9a\u4e5f\u662f\u6700\u5c0f\u7684\u3002\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u6709\u4e86\u4ee5\u4e0b\u505a\u6cd5\uff1a\n\n1. \u4f7f\u7528\u4e00\u6b65\u5c06\u6700\u5c0f\u7684\u5b57\u6bcd\u7ec4\u6210\u7684\u6700\u957f\u7684\u5757\uff08\u76f8\u540c\u7684\u53d6\u524d\u9762\u4e00\u6bb5\u5012\u8fc7\u6765\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\uff09\u79fb\u5230\u6700\u540e\u3002\n2. \u6309\u9898\u76ee\u8981\u6c42\u8fdb\u884c\u53d8\u6362\uff0c\u540c\u65f6\u4fdd\u8bc1\u6700\u5c0f\u7684\u5b57\u6bcd\u7ec4\u6210\u7684\u4e00\u5757\u5728\u6700\u540e\u3002\n3. \u4f7f\u7528\u6700\u540e\u4e00\u6b65\u5c06\u6700\u5c0f\u7684\u5b57\u6bcd\u7ec4\u6210\u7684\u79fb\u52a8\u5230\u5b57\u7b26\u4e32\u6700\u524d\u9762\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5f00\u59cb\u65f6\u53d6\u7684\u524d\u9762\u4e00\u6bb5\u5b57\u5178\u5e8f\u6700\u5c0f\u662f\u8981\u5728\u590d\u5236\u540e\u7684\u610f\u4e49\u4e0b\u590d\u5236\u51fa\u6765\u7684\u90e8\u5206\u524d\u9762\u4e00\u6bb5\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u56e0\u4e3a\u90a3\u624d\u662f\u6211\u4eec\u5b9e\u9645\u4e0a\u53d6\u7684\uff0c\u7531\u4e8e\u590d\u5236\u610f\u4e49\u4e0b\u624d\u662f\u6211\u4eec\u771f\u6b63\u53d6\u7684\uff0c\u6240\u4ee5\u8fd8\u8981\u5224\u65ad\u6700\u540e\u7684\u51e0\u4e2a\u5b57\u7b26\u590d\u5236\u4ee5\u540e\u6210\u4e3a\u6700\u957f\u7684\u6700\u5c0f\u5b57\u6bcd\u7ec4\u6210\u7684\u4e00\u5757\u7684\u60c5\u51b5\uff08\u56e0\u4e3a\u8fd9\u4e2a\u8c03\u4e86\u5f88\u4e45\uff09\u3002\n\n\u5728\u7b2c\u4e8c\u6b65\u6a21\u62df\u65f6\u5982\u679c\u6700\u5c0f\u5b57\u6bcd\u7ec4\u6210\u7684\u90a3\u5757\u957f\u5ea6\u5df2\u7ecf\u5927\u4e8e $n$, \u5c31\u4e0d\u7528\u7ee7\u7eed\u4e86\u3002\u8fd9\u6761\u6027\u8d28\u4fdd\u8bc1\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(n \\log_2 n)$ \u7684\u3002\uff08\u4f46\u7b2c\u4e00\u6b65\u5904\u7406\u9700\u8981 $n^2$\uff09\n\n$k=1$ \u7684\u65f6\u5019\u8981\u8fdb\u884c\u7279\u5224\uff0c\u56e0\u4e3a\u6ca1\u6709\u673a\u4f1a\u8ba9\u6211\u4eec\u6267\u884c\u524d\u4e24\u6b65\u4e86\u3002\n\n\u4ee3\u7801\n\n```cpp\n#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstdio>\nint n, k;\nstd::string s;\nint main() {\n\tstd::cin >> n >> k;\n\tstd::cin >> s;\n\tchar min = 'z';\n\tfor(int i = 0; i < n; i++) min = std::min(min, s[i]);\n\tint maxj = 0, maxs = 0;\n\tstd::string minpre;\n\tfor(int i = 0; i < n; i++) minpre += 'z'+1;\n\tfor(int i = n-1; i >= 0; i--) \n\t\tif(s[i] == min) {\n\t\t\tint cnt = 0, j = i;\n\t\t\tfor( ; j >= 0 && s[j] == min; cnt++, j--) ;\n\t\t\tstd::string tmp1 = s.substr(j+1, n-1-j-1+1);\n\t\t\tstd::string tmp2 = s.substr(n-j-1, n-n+j+1+1);\n\t\t\tstd::reverse(tmp2.begin(), tmp2.end());\n\t\t\tstd::string twt = tmp1 + tmp2;\n\t\t\tif(cnt > maxs || cnt == maxs && twt < minpre) \n\t\t\t\tmaxs = cnt, maxj = j, minpre = twt;\n\t\t}\t\n\tint j = n-1, cnt = 0;\n\tfor( ; j >= 0 && s[j] == min; j--, cnt++) ;\n\tstd::string tm = s.substr(n-j-1, j+1) + s.substr(j+1, n-j-1);\n\tstd::reverse(tm.begin(), tm.end());\n\tif(cnt*2 > maxs || cnt*2 == maxs && tm < minpre) maxs = cnt, maxj = j, minpre = tm;\n\tmaxj ++;\n\tstd::string t;\n\tt = s;\n\tstd::reverse(t.begin(), t.end());\n\ts = s + t;\n\tif(k == 1) {\n\t\ts = s.substr(maxj, n);\n\t\tstd::cout << s;\n\t\treturn 0;\n\t}\n\tif(maxj + maxs != n) {\n\t\ts = s.substr(n-maxj, n);\n\t\tk -= 1;\n\t}\n\tfor(int i = 1; i < k; i++) {\n\t\tt = s;\n\t\tstd::reverse(t.begin(), t.end());\n\t\ts = s + t;\n\t\ts = s.substr(maxs, n);\n\t\tmaxs <<= 1;\n\t\tif(maxs >= n) break; \n\t}\n\tif(maxs > n) maxs = n;\n\tt = s;\n\tstd::reverse(t.begin(), t.end());\n\ts = s + t;\n\ts = s.substr(n-maxs, n);\n\tstd::cout << s;\n\treturn 0;\n}\n```",
        "postTime": 1618553647,
        "uid": 40318,
        "name": "Acfboy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 [AGC037E] Reversing and Concatenating"
    },
    {
        "content": "### AGC 037E\n#### Solution\n\u9996\u5148\u4e3a\u4e86\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u8ba9\u6700\u5c0f\u7684\u5b57\u6bcd\u63a5\u5728\u6700\u524d\u9762\uff0c\u8bb0\u5f00\u5934\u7684\u8fde\u7eed\u6700\u5c0f\u5b57\u6bcd\u4e2a\u6570\u4e3a$len$\n\n\u5982\u679c$s[n]$\u662f\u6700\u5c0f\u5b57\u6bcd\uff0c\u4e14\u4ee5$s[n]$\u4e3a\u7ed3\u5c3e\u7684\u8fde\u7eed\u7684\u6700\u5c0f\u5b57\u6bcd\u957f\u5ea6\u4e3a$L$\uff0c\u90a3\u4e48$len$\u8981\u548c$L\\times 2^k$\u53d6\u8f83\u5927\u503c\n\n\u5982\u679c$s[i](i\\neq n)$\u662f\u6700\u5c0f\u5b57\u6bcd\uff0c\u4e14\u5305\u542b$s[i]$\u7684\u8fde\u7eed\u7684\u6700\u5c0f\u5b57\u6bcd\u957f\u5ea6\u4e3a$L$\uff0c\u90a3\u4e48$len$\u8981\u548c$L\\times 2^{k\u22121}$\u53d6\u8f83\u5927\u503c\n\n\u7136\u540e\u53d6\u8fd9\u5176\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5373\u53ef\uff0c\u590d\u6742\u5ea6$\\mathcal O(n^2)$\n#### Code\n```cpp\nint n,K;\nchar minn = 'z';\nchar s[MAXN],t[MAXN],ans[MAXN];\n\nbool cmp(char *a,char *b){\n    for(int i = 1;i <= n;i++){\n        if(a[i] != b[i])\n            return a[i] < b[i];\n    }\n    return false;\n}\n\nvoid Solve(char *s,int k){\n    int pos = n,len = 0;\n    while(pos && s[pos] == minn){\n        pos -= 1;\n        len += 1;\n    }\n    while(k && len < n){\n        len <<= 1;\n        k -= 1;\n    }\n    if(len >= n){\n        for(int i = 1;i <= n;i++)\n            putchar(minn);\n        exit(0);\n    }\n    for(int i = 1;i <= len;i++)\n        t[i] = minn;\n    for(int i = len + 1;i <= n;i++)\n        t[i] = s[pos--];\n    if(cmp(t,ans)){\n        for(int i = 1;i <= n;i++)\n            ans[i] = t[i];\n    }\n}\n\nint main(){\n    scanf(\"%d%d%s\",&n,&K,s + 1);\n    for(int i = 1;i <= n;i++){\n        minn = min(minn,s[i]);\n        ans[i] = 'z';\n        s[(n << 1) - i + 1] = s[i];\n    }\n    if(s[n] == minn)\n        Solve(s,K);\n    for(int i = n;i <= (n << 1);i++){\n        if(s[i] == minn)\n            Solve(s + i - n,K - 1);\n    }\n    for(int i = 1;i <= n;i++)\n        putchar(ans[i]);\n    return 0;\n}\n```",
        "postTime": 1608021517,
        "uid": 108894,
        "name": "\u5173\u6000\u4ed6\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT5162 \u3010[AGC037E] Reversing and Concatenating\u3011"
    },
    {
        "content": "[$\\Large\\color{#FFBBFF}\\textit{Tian-Xing's blog}$](https://Tian-Xing.github.io)\n\n------------\n\n# Description\n\n[\u4f20\u9001\u95e8](https://atcoder.jp/contests/agc037/tasks/agc037_e)\n\n------------\n\n# Solution\n\n\u8981\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u90a3\u4e48\u628a\u539f\u5b57\u7b26\u4e32\u4e2d\u6700\u5c0f\u7684\u79fb\u5230\u5f00\u5934\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\n\n\u540c\u65f6\u4e3a\u4e86\u4f7f\u5b57\u5178\u5e8f\u5c3d\u91cf\u5c0f\uff0c\u6211\u4eec\u8981\u4f7f\u5b57\u7b26\u4e32\u4e2d\u5f00\u5934\u6700\u5c0f\u7684\u5b57\u7b26\u4e32\u7684\u6570\u91cf\u5c3d\u53ef\u80fd\u7684\u591a\u4e14\u8fde\u7eed\uff0c\u7531\u4e8e\u662f\u628a\u5b57\u7b26\u4e32\u7684\u53cd\u4e32\u653e\u5230\u5b57\u7b26\u540e\u9762\uff0c\u90a3\u6211\u4eec\u5148\u628a\u6700\u5c0f\u7684\u5b57\u7b26\u79fb\u52a8\u5230\u5b57\u7b26\u4e32\u7ed3\u5c3e\uff0c\u7136\u540e\u622a\u53d6\u82e5\u5e72\u6bb5\u6700\u5c0f\u5b57\u7b26\u548c\u524d\u9762\u7684\u4e00\u4e9b\u5b57\u7b26\uff0c\u6211\u4eec\u4f1a\u5f97\u5230\u7ed3\u5c3e\u662f\u82e5\u5e72\u6700\u5c0f\u5b57\u7b26\u7684\u65b0\u4e32\uff0c\u8fd9\u6837\u53cd\u590d\u64cd\u4f5c\uff0c\u76f4\u5230\u6700\u540e\u4e00\u6b21\u64cd\u4f5c\u65f6\u622a\u53d6\u5f00\u5934\u662f\u82e5\u5e72\u6700\u5c0f\u5b57\u7b26\u7684\u5b57\u7b26\u4e32\u4e00\u5b9a\u662f\u6700\u4f18\u7684\u3002\n\n\u628a\u6700\u5c0f\u7684\u5b57\u7b26\u79fb\u52a8\u5230\u7ed3\u5c3e\u4fdd\u8bc1\u4e86\u5f00\u5934\u5b57\u7b26\u6700\u5c0f\uff0c\u6b63\u4e32\u548c\u53cd\u4e32\u63a5\u8d77\u6765\u6700\u540e\u4e00\u6bb5\u4f1a\u52a0\u500d\u4fdd\u8bc1\u4e86\u8fde\u7eed\u7684\u6700\u5c0f\u5b57\u7b26\u6570\u91cf\u6700\u591a\u3002\n\n\u8fd9\u6837\u6211\u4eec\u9664\u7b2c\u4e00\u6b21\u5916\u6bcf\u6b21\u64cd\u4f5c\u90fd\u80fd\u4f7f\u5f97\u5b57\u7b26\u4e32\u4e2d\u6700\u5c0f\u7684\u5b57\u7b26\u7684\u4e2a\u6570\u7ffb\u500d\uff0c\u90a3\u4e48\u8fc7\u4e0d\u4e86\u591a\u4e45\u6574\u4e2a\u5b57\u7b26\u4e32\u5c31\u5168\u53d8\u6210\u4e86\u6700\u5c0f\u5b57\u7b26\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u66b4\u529b\u6a21\u62df\u6574\u4e2a\u8fc7\u7a0b\uff0c\u5177\u4f53\u7684\u627e\u5230\u539f\u4e32\u4e2d\u8fde\u7eed\u6700\u5c0f\u5b57\u7b26\u6700\u591a\u7684\u4e00\u4e2a\u5b50\u4e32\u7528\u4e00\u6b21\u64cd\u4f5c\u79fb\u52a8\u5230\u7ed3\u5c3e\uff0c\u7136\u540e\u6bcf\u6b21\u64cd\u4f5c\u52a0\u500d\uff0c\u6ce8\u610f\u5230\u5982\u679c\u6700\u540e\u4e0d\u662f\u6574\u4e2a\u4e32\u90fd\u662f\u6700\u5c0f\u5b57\u7b26\uff0c\u540e\u9762\u4f1a\u5269\u4e0b\u539f\u4e32\u7684\u4e00\u4e9b\u4e1c\u897f\uff0c\u5176\u5b9e\u6bcf\u6b21\u53ef\u4ee5\u66b4\u529b\u628a\u8fd9\u4e9b\u4e1c\u897f\u63d0\u51fa\u6765\u6bd4\u8f83\uff0c\u4f46\u662f\u4e5f\u53ef\u4ee5\u5728\u6700\u5f00\u59cb\u628a\u53cd\u4e32\u63a5\u5230\u539f\u4e32\u540e\u9762\u627e\u5230\u6700\u5c0f\u7684\u4f4d\u7f6e\uff0c\u4ee3\u7801\u91cf\u5927\u5e45\u5ea6\u51cf\u5c11\u3002\n\n------------\n\n# Code\n\n```cpp\n/*\n    _______                       ________                        _______\n   / _____ \\                     / ______ \\                      / _____ \\\n  / /     \\_\\  _     __     _   / /      \\ \\   _     __     _   / /     \\_\\\n | |          | |   |  |   | | | |        | | | |   |  |   | | | |\n | |          | |   |  |   | | | |     __ | | | |   |  |   | | | |\n | |       __ \\  \\  |  |  /  / | |     \\ \\| | \\  \\  |  |  /  / | |       __\n  \\ \\_____/ /  \\  \\/ /\\ \\/  /   \\ \\_____\\  /   \\  \\/ /\\ \\/  /   \\ \\_____/ /\n   \\_______/    \\___/  \\___/     \\______/\\__\\   \\___/  \\___/     \\_______/\n*/\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n\nusing namespace std;\n\nconst int N = 5000;\n\nint n, k;\n\nchar st[N * 2 + 50];\n\nint Cmp(int a, int b)\n{\n\tfor (int i = 1; i <= n; i++)\n\t{\n\t\tif (st[a - i + 1] < st[b - i + 1]) return 1;\n\t\tif (st[a - i + 1] > st[b - i + 1]) return 2;\n\t}\n\treturn 0;\n}\n\nint main()\n{\n\tscanf(\"%d%d\", &n, &k);\n\tscanf(\"%s\", st + 1);\n\tfor (int i = 1; i <= n; i++) st[n * 2 - i + 1] = st[i];\n\tint pos = n;\n\tfor (int i = n + 1; i <= n * 2; i++) if (Cmp(i, pos) == 1) pos = i;\n\tk--;\n\tint len = 1;\n\twhile (st[pos - len] == st[pos] && len + 1 <= n) len++;\n\tint tmp = len;\n\tint ned = 0;\n\twhile (len < n && ned + 1 <= k) len *= 2, ned++;\n\tif (len >= n) for (int i = 1; i <= n; i++) putchar(st[pos]);\n\telse\n\t{\n\t\tfor (int i = 1; i <= len; i++) putchar(st[pos]);\n\t\tfor (int i = 1; i <= n - len; i++) putchar(st[pos - tmp + 1 - i]);\t\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1605092648,
        "uid": 73983,
        "name": "Infiltrator",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT5162 \u3010[AGC037E] Reversing and Concatenating\u3011"
    },
    {
        "content": "# [AGC037E] Reversing and Concatenating\n\n\u96be\u5f97\u7684\u6bd4\u8f83\u7b80\u5355\u7684 AGC \u7684 E \u9898\u3002\n\n\u4e3a\u4e86\u8ba9\u6700\u540e\u6240\u5f97\u7684 $S$ \u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u540c\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0\u5728\u8fc7\u7a0b\u4e2d\u5e76\u6ca1\u6709\u52a0\u5165\u4efb\u4f55\u5b57\u7b26\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u8981\u627e\u5230\u4e00\u79cd\u65b9\u6848\uff0c\u8ba9\u539f\u6765\u7684 $S$ \u4e2d\uff0c\u6700\u5c0f\u7684\u90a3\u4e2a\u5b57\u6bcd\u5c3d\u53ef\u80fd\u957f\u5730\u4f4d\u4e8e\u5f00\u5934\u3002\n\n\u6211\u4eec\u6765\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u6b21\u64cd\u4f5c\uff0c\u6211\u4eec\u4f1a\u600e\u4e48\u5904\u7406\uff0c\u4f7f\u5f97\u7559\u7ed9\u4e0b\u4e00\u6b21\u64cd\u4f5c\u7684\u5b57\u7b26\u4e32 $S$ \u6700\u4f18\u3002\n\n\u5f88\u660e\u663e\uff0c\u6211\u4eec\u4f1a\u627e\u5230\u5176\u4e2d\u6700\u5c0f\u7684\u540c\u65f6\u4e5f\u662f\u6700\u957f\u7684\u8fde\u7eed\u5b57\u7b26 $c$\uff0c\u4e0d\u59a8\u8bbe\u957f\u5ea6\u4e3a $len$\uff0c\u7136\u540e\u4ee5\u6b64\u4e3a\u6211\u4eec\u622a\u51fa\u6765\u7684\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\uff0c\u8fd9\u6837\u518d\u8fdb\u884c\u4e00\u6b21\u7ffb\u8f6c\uff0c\u5c31\u80fd\u6709 $2 \\times len$ \u4e2a $c$ \u5728 $S$ \u4e2d\u95f4\u3002\u5f88\u660e\u663e\u8fd9\u6837\u505a\uff0c\u4e0b\u4e00\u6b21\u5c31\u662f\u6709 $4 \\times len$ \u4e2a $c$\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6700\u4f18\u89e3\uff0c\u81f3\u5c11\u6709 $len\\times 2^{k-1}$ \u4e2a $c$ \u4f4d\u4e8e\u539f\u5b57\u7b26\u4e32\u7684\u5f00\u5934\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u5148\u7ed9\u6700\u540e\u7684\u5b57\u7b26\u4e32\u8f93\u51fa $len \\times 2^{k-1}$ \u4e2a $c$\u3002\u5982\u679c $N \\leq len \\times 2^{k-1}$ \u90a3\u4e48\u5c31\u505a\u5b8c\u4e86\u3002\u4f46\u662f\u82e5 $N>len \\times 2^{k-1}$\uff0c\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u5e94\u5f53\u627e\u5230\u539f\u6765\u7684 $S$ \u62fc\u4e0a\u7ffb\u8f6c\u7684 $S$ \u540e\uff0c\u5176\u4e2d\u7684\u6700\u5c0f\u7684\u957f\u5ea6\u4e3a $N$ \u7684\u5b50\u4e32\uff0c\u5728\u8f93\u51fa $2^{k-1}$ \u4e2a $c$ \u540e\u518d\u628a\u5b50\u4e32\u63a5\u4e0b\u53bb\u8f93\u51fa\u5373\u53ef\u3002\n\n\u800c\u56e0\u4e3a\u67e5\u627e\u6700\u5c0f\u5b50\u4e32\u7684\u66b4\u529b\u662f $O(n^2)$ \u7684\uff08\u66b4\u529b\u5339\u914d\uff09\uff0c\u6240\u4ee5\u53ef\u4ee5\u5927\u529b\u51fa\u5947\u8ff9\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\n#include <cmath>\n#include <cctype>\n#include <queue>\n#include <vector>\n\nusing namespace std;\n\ninline int read()\n{\n\tint x=0,f=1;char ch=getchar();\n\twhile (!isdigit(ch)){if (ch=='-') f=-1;ch=getchar();}\n\twhile (isdigit(ch)){x=x*10+ch-48;ch=getchar();}\n\treturn x*f;\n}\n\nint n,k;\n\nchar s[10050],ans[10050];\n\nint main()\n{\n\tn=read(),k=read();\n\tcin >> (s+1);\n\tfor (int i=1;i<=n;i++)\n\t\ts[n*2-i+1]=s[i];\n\tfor (int i=1;i<=n;i++)\n\t\tans[i]=s[i];\n\tfor (int i=1;i<=n;i++)\n\t{\n\t\tbool flag=true;\n\t\tfor (int j=i;j<=n+i-1 && flag;j++)\n\t\t{\n\t\t\tif (ans[j-i+1]<s[j])\n\t\t\t\tflag=false;\n\t\t\telse if (ans[j-i+1]>s[j])\n\t\t\t\tbreak;\n\t\t}\n\t\tif (flag)\n\t\t{\n\t\t\tfor (int j=i;j<=n+i-1;j++)\n\t\t\t\tans[j-i+1]=s[j];\n\t\t}\n\t}\n\tint len=1;\n\twhile (len<=n && ans[len]==ans[1])\n\t\tlen++;\n\tlen--;\n\tif (k>15 || len*(1<<(k-1))>=n)\n\t{\n\t\tfor (int i=1;i<=n;i++)\n\t\t\tcout << ans[1];\n\t}\n\telse\n\t{\n\t\tint res=n-(len*(1<<(k-1)));\n\t\tfor (int i=1;i<=n-res;i++)\n\t\t\tcout << ans[1];\n\t\tfor (int i=1;i<=res;i++)\n\t\t\tcout << ans[i+len];\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1590923954,
        "uid": 8457,
        "name": "chen_zhe",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 AT5162 \u3010[AGC037E] Reversing and Concatenating\u3011"
    }
]