[
    {
        "content": "[\u5148\u5ba3\u4f20\u4e00\u4e0b\u535a\u5ba2\uff08\u9003](https://waautomaton.tk/2018/08/12/loj-2759-%E9%A2%98%E8%A7%A3/)\n\n#### \u9898\u89e3\n\n&emsp;&emsp;\u9996\u5148\u6709\u4e00\u4e2a\u7ed3\u8bba\uff1a\u4e00\u5b9a\u5b58\u5728\u4e00\u4e2a\u6700\u4f18\u89e3\u4f7f\u5f97\u5bf9\u4e8e\u4efb\u610f\u53ef\u5728X\u65f6\u95f4\u5185\u5230\u8fbe\u7684\u70b9\uff0c\u4ece\u8d77\u70b9\u5230\u8fd9\u4e2a\u70b9\u7684\u8def\u7a0b\u4e2d\u4e0d\u5411\u4e0a\u722c\uff1b\u5bf9\u4e8e\u5927\u4e8eX\u65f6\u95f4\u7684\u90e8\u5206\uff0c\u4e00\u5b9a\u4e0d\u5411\u4e0b\u722c\u3002  \n&emsp;&emsp;\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u77e5\u9053\u5230\u67d0\u4e00\u4e2a\u70b9\u7684\u6700\u77ed\u65f6\u95f4\uff0c\u5373\u53ef\u786e\u5b9a\u5230\u8fd9\u4e2a\u70b9\u65f6\u98de\u5929\u9f20\u5728\u6811\u4e0a\u7684\u9ad8\u5ea6\uff0c\u8fd9\u4e2a\u9ad8\u5ea6\u662f\u552f\u4e00\u7684\uff08\u5728\u6ee1\u8db3\u4e0a\u9762\u7684\u7ed3\u8bba\u7684\u60c5\u51b5\u4e0b\uff09\uff0c\u5e76\u4e14\u8fd9\u4e2a\u72b6\u6001\u6709\u4e00\u4e2a\u4f18\u79c0\u7684\u6027\u8d28\u2014\u2014\u82e5s\u5230t\u7684\u6700\u77ed\u8def\u7ecf\u8fc7\u4e86k\uff0c\u5219\u5176\u4e2ds\u5230k\u7684\u8def\u5f84\u4e00\u5b9a\u662fs\u5230k\u7684\u6700\u77ed\u8def\u5f84\u3002\u53c8\u56e0\u4e3a\u6574\u4e2a\u8fc7\u7a0b\u201c\u8fb9\u6743\u201d\u90fd\u662f\u975e\u8d1f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528dijkstra\u7b97\u6cd5\u6c42\u51fa\u6700\u77ed\u8def\uff08\u5373\u6700\u4f18\u89e3\uff09\u3002\u82e5\u4f7f\u7528stl\u7684\u4f18\u5148\u961f\u5217\u603b\u590d\u6742\u5ea6$O((n+m)logm)$  \n&emsp;&emsp;\u6ce8\u610f\u5230\u8fd9\u91cc\u6211\u4eec\u7684\u5b9e\u9645\u201c\u8fb9\u6743\u201d\u4f9d\u8d56\u4e8e\u7aef\u70b9\u7684\u6700\u77ed\u8def\u7684\u503c\uff0c\u56e0\u6b64\u8fb9\u6743\u5b9e\u9645\u4e0a\u662f\u5728\u505adij\u65f6\u52a8\u6001\u8ba1\u7b97\u7684\u3002  \n\n#### \u53c2\u8003\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\ntypedef unsigned long long ULL;\n\ntemplate <size_t _I_Buffer_Size = 1 << 23, size_t _O_Buffer_Size = 1 << 23>\nstruct IO_Tp\n{\n    //\u8fd9\u662f\u8bfb\u5165\u4f18\u5316\u677f\u5b50\uff0c\u4e3a\u4e86\u9605\u8bfb\u4f53\u9a8c\u6b64\u90e8\u5206\u5185\u5bb9\u7701\u7565\u3002\n};\n IO_Tp<> IO;\nconst int maxn = 100000;\nconst int maxm = 300000;\nstruct Edge\n{\n    int to, next, w;\n} e[2 * maxm + 10];\nint head[maxn + 10];\nvoid addEdge(int a, int b, int w)\n{\n    static int c = 0;\n    e[++c] = (Edge){ b, head[a], w };\n    head[a] = c;\n\te[++c]=(Edge){a,head[b],w};\n\thead[b]=c;\n}\nint a[maxn + 10];\nint n, m, beg;\nstruct Data\n{\n    int p;\n    LL dis;\n    Data(int p, LL dis)\n        : p(p)\n        , dis(dis)\n    {\n    }\n};\nbool operator<(const Data &a, const Data &b)\n{\n    return a.dis > b.dis;\n}\nLL dis[maxn + 10];\nconst LL inf = LLONG_MAX / 10;\nvoid dijkstra(int s, int t)\n{\n    priority_queue<Data> q;\n    fill(dis + 1, dis + 1 + n, inf);\n    q.push(Data(s, 0));\n    dis[s] = 0;\n    while (!q.empty()) {\n        Data now = q.top();\n        q.pop();\n        if (now.dis != dis[now.p])\n            continue;\n        int u = now.p;\n        for (int i = head[u]; i != 0; i = e[i].next) {\n            LL ndis;\n            int v = e[i].to;\n\t\t\tif (a[u]<e[i].w) continue;\n            if (dis[u] < beg) {\n                LL h = beg - dis[u];\n                if (h - e[i].w > a[v]) {\n                    ndis = beg - a[v];\n                } else if (h - e[i].w >= 0) {\n                    ndis = dis[u] + e[i].w;\n                } else {\n                    ndis = dis[u] + e[i].w + (e[i].w - h);\n                }\n            } else {\n                ndis = dis[u] + 2 * e[i].w;\n            }\n            if (ndis < dis[v]) {\n                dis[v] = ndis;\n                q.push(Data(v, ndis));\n            }\n        }\n    }\n}\nint main()\n{\n    iopen();\n    IO >> n >> m >> beg;\n    for (int i = 1; i <= n; ++i) {\n        IO >> a[i];\n    }\n    for (int i = 1; i <= m; ++i) {\n        int a, b, w;\n        IO >> a >> b >> w;\n        addEdge(a, b, w);\n    }\n    dijkstra(1, n);\n    if (dis[n] == inf) {\n        puts(\"-1\");\n    } else {\n        LL d = dis[n];\n        LL ans;\n        if (d < beg) {\n            LL h = beg - d;\n            ans = d + (a[n] - h);\n        } else {\n            ans = d + a[n];\n        }\n        IO << ans << '\\n';\n    }\n    return 0;\n}\n\n\n```",
        "postTime": 1542795622,
        "uid": 39219,
        "name": "WAAutoMaton",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT925 \u3010\u30d5\u30af\u30ed\u30e2\u30e2\u30f3\u30ac \uff08Sugar Glider\uff09\u3011"
    }
]