[
    {
        "content": "\u6570\u636e\u8303\u56f4\u4e2d\u5730\u677f\u7684\u5bbd\u5ea6 $H \\leq 6$ \uff0c\u8fd9\u63d0\u793a\u6211\u4eec\u53ef\u4ee5\u72b6\u6001\u538b\u7f29\u3002\u800c $W \\le 10^{12}$ \uff0c\u8fd9\u4e2a\u6570\u636e\u8303\u56f4\u663e\u7136\u4e0d\u80fd\u7ebf\u6027\u9012\u63a8\uff0c\u8fd9\u63d0\u793a\u6211\u4eec\u8981\u7528\u77e9\u9635\u5feb\u901f\u5e42\u52a0\u901fDP\u3002\u4e8e\u662f\u601d\u8def\u5c31\u5f88\u660e\u663e\u4e86\u3002\n\n# \u72b6\u6001\u538b\u7f29\n\n\u5148\u8003\u8651\u72b6\u6001\u538b\u7f29\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5217\uff0c\u4e00\u5171\u6709 $H$ \u4e2a\u683c\u3002\u6bcf\u4e00\u4e2a\u683c\u90fd\u53ef\u4ee5\u9009\u62e9\u7528\u5730\u7816\u94fa\uff0c\u8fd8\u662f\u6682\u65f6\u4e0d\u94fa\u3002\u6ce8\u610f\u8fd9\u91cc\u9009\u62e9\u6682\u65f6\u4e0d\u94fa\u662f\u53ef\u884c\u7684\uff0c\u56e0\u4e3a\u4e0b\u4e00\u5217\u53ef\u4ee5\u7528\u4e00\u4e2a\u957f\u65b9\u5f62\u7684\u5730\u7816\u6a2a\u7740\u94fa\u628a\u8fd9\u91cc\u7684\u7a7a\u4f4d\u8865\u4e0a\u3002\u8fd9\u6837\u6211\u4eec\u7528\u6570\u5b57 $1$ \u8868\u793a\u94fa\uff0c\u7528\u6570\u5b57 $0$ \u8868\u793a\u4e0d\u94fa\uff0c\u6bcf\u4e00\u5217\u7684\u72b6\u6001\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a $H$ \u4f4d\u4e8c\u8fdb\u5236\u6570\u5b57\u8868\u793a\u3002\n\n\u5f53\u7136\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001\uff0c\u53ef\u80fd\u6709\u591a\u91cd\u4e0d\u540c\u7684\u94fa\u6cd5\u3002\u6bd4\u5982 `110` \u8fd9\u4e2a\u72b6\u6001\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ad6\u7740\u7684\u957f\u65b9\u5f62\u94fa\uff0c\u7136\u540e\u7a7a\u4e00\u683c\u3002\u4e5f\u53ef\u4ee5\u7528\u4e24\u4e2a\u6b63\u65b9\u5f62\u94fa\uff0c\u7136\u540e\u7a7a\u4e00\u683c\u3002\u56e0\u6b64\uff0c\u5bf9\u4e8e\u6bcf\u79cd\u72b6\u6001\uff0c\u6211\u4eec\u8fd8\u9700\u8981\u8bb0\u5f55\u8fd9\u79cd\u72b6\u6001\u53ef\u4ee5\u6709\u591a\u5c11\u79cd\u94fa\u6cd5\u3002\u8fd9\u91cc\u6bd4\u8f83\u7b80\u5355\u7684\u65b9\u5f0f\u5c31\u662f\u76f4\u63a5 `dfs` \u679a\u4e3e\u7edf\u8ba1\u3002\n\n\u8fd9\u4e2a `dfs` \u4ee3\u7801\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u4ee3\u7801\u793a\u4f8b\u5982\u4e0b\uff1a\n\n```cpp\n//\u9996\u5148dfs\u679a\u4e3e\u72b6\u6001\u4ee5\u53ca\u6bcf\u4e2a\u72b6\u6001\u7684\u65b9\u6848\u6570\nvoid dfs(ll step, ll last, ll status) {\n    //step\u8868\u793a\u76ee\u524d\u5728\u679a\u4e3e\u72b6\u6001\u7684\u7b2c\u51e0\u4f4d\uff0clast\u8868\u793a\u4e0a\u4e00\u4e2a\u72b6\u6001\u662f\u4e0d\u662f\u7ad6\u77401*2\u7684\n    if (step == h) {\n        if (last == 0) {\n            //\u5230\u8d70\u591a\u4e00\u6b65\u4ee5\u540e\uff0clast\u5fc5\u987b\u662f0\uff0c\u5426\u5219\u5c31\u591a\u4f38\u51fa\u6765\u4e00\u5757\u4e86\n            cnt[status]++;\n        }\n    } else {\n        if (last == 1) {\n            //\u8fd9\u91cc\u88ab\u4e0a\u4e00\u5757\u8986\u76d6\u4e86\n            dfs(step + 1, 0, status << 1 | 1);//\u53f3\u8fb9\u76f4\u63a5\u8865\u4e00\u4e2a1\uff0c\u7136\u540e\u7ee7\u7eed\n        } else {\n            dfs(step + 1, 0, status << 1);//\u8fd9\u91cc\u4e0d\u653e\n            dfs(step + 1, 0, status << 1 | 1);//\u653e\u4e00\u4e2a1*1\u7684\n            dfs(step + 1, 1, status << 1 | 1);//\u653e\u4e00\u4e2a2*1\u7684\n        }\n    }\n}\n```\n\n# \u72b6\u6001\u8f6c\u79fb\u77e9\u9635\n\n\u5047\u8bbe\u76ee\u524d\u6211\u4eec\u8003\u8651\u5230\u524d $i-1$ \u5217\uff0c\u5176\u4e2d\u524d $i-2$ \u5217\u5fc5\u987b\u90fd\u5168\u90e8\u94fa\u6ee1\uff0c\u7b2c $i-1$ \u5217\u53d6\u5230\u72b6\u6001 $s$ \u3002\u5e76\u4e14\u4ee4 $ss = 2^H$ \uff0c\u90a3\u4e48\u5f53\u524d\u8fd9\u4e00\u5217\u6709 $ss$ \u79cd\u72b6\u6001\uff0c\u6211\u4eec\u5982\u679c\u77e5\u9053\u6bcf\u79cd\u72b6\u6001\u7684\u53d6\u503c\uff0c\u5c31\u53ef\u4ee5\u7528\u4e00\u4e2a\u957f\u5ea6\u4e3a $ss$ \u7684\u884c\u5411\u91cf $X$ \u5206\u522b\u8868\u793a\u72b6\u6001 $0,1,2,...,ss-1$\u7684\u65b9\u6848\u6570\u3002\n\n\u5982\u679c\u5df2\u77e5\u524d $i-1$ \u5217\u6bcf\u79cd\u72b6\u6001\u7684\u65b9\u6848\u6570\uff0c\u5982\u4f55\u6c42\u524d $i$ \u5217\u7684\u884c\u5411\u91cf\u5462\uff1f\u6211\u4eec\u60f3\u9884\u5904\u7406\u51fa\u6765\u4e00\u4e2a\u72b6\u6001\u8f6c\u79fb\u77e9\u9635 $A$ \uff0c\u5176\u4e2d $A_{xy}$ \u8868\u793a\u5728\u524d\u4e00\u884c\u4e2d\u53d6\u72b6\u6001 $x$ \uff0c\u4e0b\u4e00\u884c\u4e2d\u53d6\u72b6\u6001 $y$ \uff0c\u65b9\u6848\u6570\u8f6c\u79fb\u8fc7\u6765\u8981\u4e58\u7684\u7cfb\u6570\u3002\u5982\u679c\u524d\u4e00\u884c $x$ \u4e2d\u72b6\u6001\u4e0d\u80fd\u8f6c\u79fb\u5230\u4e0b\u4e00\u884c\u7684\u72b6\u6001 $y$\uff08\u8fd9\u79cd\u60c5\u51b5\u662f $x$ \u4e2d\u662f $0$ \u7684\u4f4d\u7f6e\uff0c $y$ \u4e2d\u4e5f\u662f $0$ \uff0c\u4e5f\u5c31\u662f\u8bf4\u7b2c $i$ \u5217\u4e0d\u80fd\u6a2a\u7740\u653e\u4e00\u4e2a\u957f\u65b9\u5f62\u53bb\u8865\u524d\u4e00\u5217\u7684\u7a7a\uff0c\u8fd9\u6837\u6700\u540e\u7ed3\u679c\u91cc\u5c31\u6709\u7a7a\u4f4d\u7f6e\u4e86\uff0c\u8fd9\u6837\u662f\u4e0d\u5408\u6cd5\u7684\uff09\uff0c\u8fd9\u65f6\u5019\u7cfb\u6570\u5c31\u662f$0$\u3002\n\n\u6839\u636e\u521a\u624d\u62ec\u53f7\u91cc\u7684\u5206\u6790\uff0cx\u4e2d\u7a7a\u683c\u7684\u4f4d\u7f6e\uff0cy\u4e2d\u5fc5\u987b\u94fa\u3002\u4f46\u662f\u8fd9\u91cc\u8981\u6c42y\u8981\u6a2a\u7740\u94fa\u957f\u65b9\u5f62\uff0c\u4e5f\u5c31\u662f\u5176\u5b9ey\u7684\u65b9\u6848\u6570\u7b49\u4ef7\u4e8e\u8fd9\u91cc\u4e5f\u4e0d\u94fa\u7684\u60c5\u51b5\u3002\u56e0\u4e3a\u4e00\u4e2a\u6a2a\u7740\u7684\u957f\u65b9\u5f62\u5728\u6211\u4eec\u4e00\u5f00\u59cb\u9884\u5904\u7406\u7684\u65f6\u5019\u662f\u4e0d\u8003\u8651\u7684\u3002\u6240\u4ee5\u7cfb\u6570\u5176\u5b9e\u5c31\u662f\u5728y\u4e2d\u628a\u6240\u6709x\u662f0\u7684\u4f4d\u7f6e\u4e5f\u4fee\u6539\u4e3a0\u7684\u72b6\u6001\u7684\u521d\u59cb\u65b9\u6848\u6570\u3002\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u628aA\u77e9\u9635\u8ba1\u7b97\u51fa\u6765\u3002\n\n\u4e00\u65e6A\u77e9\u9635\u8ba1\u7b97\u51fa\u6765\uff0c\u53ea\u8981\u7528$X \\times A$\u5c31\u53ef\u4ee5\u5f97\u5230\u4e0b\u4e00\u5217\u7684\u72b6\u6001\u4e86\uff0c\u8fd9\u6837\u6700\u7ec8\u7ed3\u679c\u5176\u5b9e\u5c31\u662f\u521d\u59cb\u884c\u5411\u91cf $X$ \u4e58\u4ee5 $A$ \u7684 $n-1$ \u6b21\u5e42\u3002\u8fd9\u6837\u7528\u77e9\u9635\u5feb\u901f\u5e42\u628a $A$ \u7684 $n-1$ \u6b21\u5e42\u6c42\u51fa\u6765\uff0c\u6700\u540e\u76f4\u63a5\u7528\u521d\u59cb\u884c\u5411\u91cf\u4e58\u8fd9\u4e2a\u77e9\u9635\u7684\u6700\u540e\u4e00\u5217\uff0c\u8ba1\u7b97\u51fa\u6700\u540e\u72b6\u6001\u4e3a $ss-1$ \u7684\u65b9\u6848\u6570\u5373\u4e3a\u7b54\u6848\u3002\n\n# \u4ee3\u7801\n```cpp\n#include <iostream>\n#include <cstring>\n#include <cstdio>\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\ntypedef long long ll;\nconst ll MAXN = (1 << 6) + 5;\nconst ll MOD = 998244353;\n\nstruct Matrix {\n    ll n, m, d[105][105];//n\u8868\u793a\u884c\uff0cm\u8868\u793a\u5217\n\n    //\u77e9\u9635\u6e05\u96f6\n    void clear() {\n        memset(d, 0, sizeof(d));\n    }\n\n    //\u751f\u6210\u5355\u4f4d\u77e9\u9635\uff0c\u4ec5\u9650\u65b9\u9635n\u548cm\u76f8\u7b49\u7684\u65f6\u5019\n    void identity() {\n        clear();\n        for (int i = 0; i < n; ++i) {\n            d[i][i] = 1;\n        }\n    }\n\n    Matrix(ll n, ll m) : n(n), m(m) {}\n};\n\nMatrix mul(const Matrix &a, const Matrix &b) {\n    Matrix c(a.n, b.m);\n    c.clear();\n    for (int k = 0; k < a.m; ++k) {//k\u672c\u6765\u5e94\u8be5\u662f\u6700\u5185\u5c42\u5faa\u73af\uff0c\u62ff\u5230\u5916\u9762\u4e5f\u53ef\u4ee5\u4f18\u5316\u4e00\u4e9b\u65f6\u95f4\n        for (int i = 0; i < a.n; ++i) {\n            for (int j = 0; j < b.m; ++j) {\n                c.d[i][j] += (a.d[i][k] * b.d[k][j]) % MOD;\n                c.d[i][j] %= MOD;\n            }\n        }\n    }\n    return c;\n}\n\nMatrix pow(Matrix &a, ll p) {\n    Matrix result(a.n, a.n);\n    result.identity();\n    Matrix base = a;\n    while (p) {\n        if (p & 1) {\n            result = mul(result, base);\n        }\n        base = mul(base, base);\n        p >>= 1;\n    }\n    return result;\n}\n\n//\u5bf9\u4e8e\u6bcf\u4e00\u5217\uff0c\u94fa\u75281\u8868\u793a\uff0c\u4e0d\u94fa\u75280\u8868\u793a\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u72b6\u6001\u538b\u7f29\u6210\u4e8c\u8fdb\u5236\nll cnt[MAXN];//\u6bcf\u4e2a\u72b6\u6001\u7684\u65b9\u6848\u6570\nll h, w;//\u8f93\u5165\u7684h\u548cw\nll ss;//\u6700\u5927\u65b9\u6848\u6570\n\n//\u9996\u5148dfs\u679a\u4e3e\u72b6\u6001\u4ee5\u53ca\u6bcf\u4e2a\u72b6\u6001\u7684\u65b9\u6848\u6570\nvoid dfs(ll step, ll last, ll status) {\n    //step\u8868\u793a\u76ee\u524d\u5728\u679a\u4e3e\u72b6\u6001\u7684\u7b2c\u51e0\u4f4d\uff0clast\u8868\u793a\u4e0a\u4e00\u4e2a\u72b6\u6001\u662f\u4e0d\u662f\u7ad6\u77401*2\u7684\n    if (step == h) {\n        if (last == 0) {\n            //\u5230\u8d70\u591a\u4e00\u6b65\u4ee5\u540e\uff0clast\u5fc5\u987b\u662f0\uff0c\u5426\u5219\u5c31\u591a\u4f38\u51fa\u6765\u4e00\u5757\u4e86\n            cnt[status]++;\n        }\n    } else {\n        if (last == 1) {\n            //\u8fd9\u91cc\u88ab\u4e0a\u4e00\u5757\u8986\u76d6\u4e86\n            dfs(step + 1, 0, status << 1 | 1);//\u53f3\u8fb9\u76f4\u63a5\u8865\u4e00\u4e2a1\uff0c\u7136\u540e\u7ee7\u7eed\n        } else {\n            dfs(step + 1, 0, status << 1);//\u8fd9\u91cc\u4e0d\u653e\n            dfs(step + 1, 0, status << 1 | 1);//\u653e\u4e00\u4e2a1*1\u7684\n            dfs(step + 1, 1, status << 1 | 1);//\u653e\u4e00\u4e2a2*1\u7684\n        }\n    }\n}\n\n//\u521d\u59cb\u5316\u8f6c\u79fb\u77e9\u9635\n//\u5047\u8bbe\u4e00\u4e2a\u884c\u5411\u91cf\u8868\u793a\u53ea\u8003\u8651\u524di-1\u5217\uff0c\u524di-2\u5217\u5168\u94fa\u6ee1\uff0c\u5e76\u4e14\u7b2ci-1\u5217\u5206\u522b\u53d6\u72b6\u60010\u5230ss-1\u7684\u65b9\u6848\u6570\n//\u7528\u8fd9\u4e2a\u884c\u5411\u91cf*\u8f6c\u79fb\u77e9\u9635\uff0c\u5373\u53ef\u5f97\u5230\u53ea\u8003\u8651\u524di\u5217\uff0c\u524di-1\u5217\u5168\u94fa\u6ee1\uff0c\u5e76\u4e14\u7b2ci\u5217\u5206\u522b\u53d6\u72b6\u60010\u5230ss-1\u7684\u65b9\u6848\u6570\u7684\u884c\u5411\u91cf\nMatrix init() {\n    Matrix r(ss, ss);\n    for (int i = 0; i < ss; ++i) {\n        ll mask = i ^ ((1 << h) - 1);//\u4e0eh\u4e2a1\u5f02\u6216\uff0c\u627e\u5230i\u5f53\u4e2d\u6240\u6709\u662f0\u7684\u4f4d\u7f6e\n        for (int j = 0; j < ss; ++j) {\n            //\u5bf9\u4e8ei\u5f53\u4e2d\u6240\u6709\u662f0\u7684\u4f4d\u7f6e\uff0cj\u5f53\u4e2d\u5fc5\u987b\u90fd\u662f1\uff0c\u8fd9\u6837\u7528\u4e00\u4e2a\u6a2a\u7740\u76841*2\u7684\u628a\u524d\u4e00\u884c\u6b20\u76840\u8865\u4e0a\n            if ((mask & j) == mask) {\n                //\u8fd9\u65f6\u5019\u76f8\u5f53\u4e8ej\u4e2d\u8fd9\u4e9b1\u5df2\u7ecf\u88ab\u5360\u7528\u4e86\uff0c\u65b9\u6848\u6570\u548c\u628a\u8fd9\u4e9b1\u6263\u6389\u662f\u4e00\u6837\u7684\n                r.d[i][j] = cnt[i & j];\n            }\n        }\n    }\n    return r;\n}\n\nint main() {\n    cin >> h >> w;\n    ss = 1 << h;\n    dfs(0, 0, 0);\n    Matrix t = init();//\u521d\u59cb\u5316\u4e00\u4e2a\u8f6c\u79fb\u77e9\u9635\uff0ct[x][y]\u8868\u793a\u4ece\u72b6\u6001x\u8f6c\u79fb\u5230\u72b6\u6001y\u9700\u8981\u4e58\u7684\u7cfb\u6570\n    t = pow(t, w - 1);\n    //\u6700\u540e\u7ed3\u679c\u662fss-1\u72b6\u6001\u7684\u5408\u6cd5\uff0c\u7b49\u4e8e\u521d\u59cb\u884c\u5411\u91cf\u4e58t\u77e9\u9635\u7684k-1\u6b21\u5e42\u7684\u6700\u540e\u4e00\u5217\n    ll ans = 0;\n    for (int i = 0; i < ss; ++i) {\n        ans = (ans + cnt[i] * t.d[i][ss - 1] % MOD) % MOD;\n    }\n    cout << ans << endl;\n    return 0;\n}\n```\n",
        "postTime": 1674007532,
        "uid": 43206,
        "name": "\u6ce5\u571f\u7b28\u7b28",
        "ccfLevel": 0,
        "title": "ABC204F Hanjo 2\u9898\u89e3"
    }
]