[
    {
        "content": "~~\u770b\u4e86\u5927\u4f6c\u7684\u9898\u89e3\uff0c\u5e76\u6ca1\u6709\u5b8c\u5168\u660e\u767d\uff0c\u7136\u540e\u5c31\u81ea\u5df1\u7422\u78e8\u6700\u52a3\u89e3\u7684 biku \u662f\u5c51~~\n\n\u6211\u4eec\u9996\u5148\u60f3\u5230\u4e86 $O\\left(n^2 \\alpha\\left(n\\right)\\right)$ \u7684\u66b4\u529b\uff1a\n\n\u53d1\u73b0\u4e24\u4e2a\u7269\u54c1 $i,j$\uff0c\u4e00\u65e6 $j$ \u6bd4 $i$ \u8fdb\u5f97\u665a\uff0c\u51fa\u5f97\u4e5f\u665a\uff0c\u90a3\u5c31\u4e0d\u80fd\u628a $j$ \u653e\u5728 $i$ \u4e0a\u9762\uff0c\u4e5f\u5c31\u662f $i,j$ \u8981\u5206\u522b\u88c5\u5728\u4e24\u4e2a\u96c6\u88c5\u7bb1\u4e2d\uff0c\u6b64\u65f6 $a_j < a_i < b_j < b_i$\u3002\n\n\u8fd9\u6837\u4e00\u4e9b\u7269\u54c1\u4e4b\u95f4\u5c31\u6784\u6210\u4e86\u77db\u76fe\u5173\u7cfb\uff0c\u8fd9\u6837\u7684\u7269\u54c1\u4e4b\u4e2d\uff0c\u4e00\u65e6\u6709\u4e00\u4e2a\u7269\u54c1\u786e\u5b9a\u4e86\u4f4d\u7f6e\uff0c\u5176\u4ed6\u7684\u7269\u54c1\u7684\u4f4d\u7f6e\u4e5f\u5c31\u786e\u5b9a\u4e86\u3002\n\n\u4e8e\u662f\u6211\u4eec\u628a\u7269\u54c1\u5206\u7ec4\uff0c\u6bcf\u4e00\u7ec4\u7269\u54c1\u4e0d\u5bf9\u5916\u4ea7\u751f\u5f71\u54cd\uff08\u6ca1\u6709\u7ec4\u5916\u7684\u77db\u76fe\uff09\uff0c\u82e5\u7ec4\u6570\u4e3a $cnt$\uff0c\u5219\u7b54\u6848\u4e3a $2^{cnt}$\u3002\n\n\u90a3\u5982\u4f55\u5224\u65ad\u65e0\u89e3\u5462\uff1f\n\n\u5f88\u663e\u7136\uff0c\u82e5\u4e09\u4e2a\u7269\u54c1 $i,j,k$ \u4e4b\u95f4\uff0c$i$ \u4e0e $j$ \u6709\u77db\u76fe\uff0c$k$ \u540c\u65f6\u4e0e $i,j$ \u6709\u77db\u76fe\uff0c\u90a3\u5c31\u65e0\u89e3\u4e86\u3002\u56e0\u4e3a $i,j$ \u80af\u5b9a\u5404\u5360\u4e00\u4e2a\u96c6\u88c5\u7bb1\uff0c\u5269\u4e0b\u7684 $k$ \u5c31\u6ca1\u6709\u5730\u65b9\u53bb\u4e86\u3002\n\n\u53ef\u4ee5\u5c1d\u8bd5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff1a\u4e00\u65e6 $i,j$ \u6709\u77db\u76fe\uff0c\u5408\u5e76 $(i+n,j)$\uff0c$(i,j+n)$\uff0c\u8868\u793a $i,j$ \u4e0d\u80fd\u5728\u540c\u4e00\u5806\u3002\u6700\u540e\u5224\u65ad $i$ \u548c $i+n$ \u662f\u5426\u5728\u540c\u4e00\u5806\uff0c\u5982\u679c\u662f\u5219\u8868\u660e $i$ \u4e24\u4e2a\u96c6\u88c5\u7bb1\u90fd\u4e0d\u80fd\u653e\uff0c\u56de\u5230\u4e86\u521a\u624d\u8ba8\u8bba\u7684\u7269\u54c1 $k$ \u7684\u60c5\u51b5\u4e86\u3002\u4e0d\u7136\uff0c\u7edf\u8ba1\u6700\u540e\u7ef4\u62a4\u7684\u5e76\u67e5\u96c6\u5f62\u6210\u7684\u5806\u6570 $cnt$\uff0c$ans = 2^{cnt}$\u3002\n\n\u6211\u4eec\u4e0d\u6ee1\u8db3\u4e8e\u66b4\u529b\u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u5f00\u59cb\u601d\u8003\u4f18\u5316\uff1a\n\n\u5f88\u663e\u7136\u5982\u679c\u6211\u4eec\u5148\u5bf9\u6bcf\u4e2a\u7269\u54c1\u4ee5 $a_i$ \u4e3a\u7ef4\u5ea6\u6392\u5e8f\uff0c\u90a3\u4e48\u518d\u627e\u4e0e\u7269\u54c1 $i$ \u77db\u76fe\u7684\u7269\u54c1\u65f6\uff0c\u53ea\u9700\u5728 $i$ \u4e4b\u524d\u7684\u7269\u54c1\u4e2d\u5bfb\u627e\u6ee1\u8db3 $b_j \\in (a_i,b_i)$ \u7684\u7269\u54c1 $j$ \u5373\u53ef\u3002\n\n\u8fd9\u4e0d\u5c31\u662f\u533a\u95f4\u4fee\u6539\u561b\uff0c\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff01\u5728\u533a\u95f4 $(a_i,b_i)$ \u6253\u4e00\u4e2a $tag = i+n$\uff0c\u8868\u793a\u8fd9\u4e2a\u533a\u95f4\u7684\u5143\u7d20\u9700\u8981\u4e0e $i+n$ \u5408\u5e76\u4e0d\u5c31\u597d\u4e86\u3002\n\n\u4f46\u662f\u9ebb\u70e6\u4e0d\u5c0f\u2026\u2026\n\n1. \u5982\u4f55\u5408\u5e76 $tag$\n\n\u5982\u679c\u6211\u4eec\u5355\u7eaf\u7684\u53ea\u662f\u628a $tag$ \u5f80\u4e0b\u63a8\uff0c\u6216\u662f\u7b80\u5355\u7684\u7528 $vector$ \u8bb0\u5f55\u7684\u8bdd\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\u4e0d\u4f1a\u6709\u4ec0\u4e48\u6539\u53d8\u7684\uff0c\u53ea\u6709 $tag$ \u6709\u53ef\u5408\u5e76\u6027\u7684\u65f6\u5019\u624d\u53ef\u505a\u5230\u5355\u6b21\u4fee\u6539 $\\log n$\u3002\n\n\u5176\u5b9e\u60f3\u6cd5\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u628a\u4e4b\u524d\u7684 $tag$ \u4e0e\u73b0\u5728\u7684 $tag'$ \u5728\u5e76\u67e5\u96c6\u4e0a\u5408\u5e76\u4e00\u4e0b\u5c31\u597d\u4e86\uff0c\u7136\u540e\u968f\u4fbf\u7559\u4e00\u4e2a\u5728\u8fd9\u91cc\u5c31\u884c\u3002\n\n2. \u7a7a\u4f4d\u95ee\u9898\n\n\u5176\u5b9e\u7ebf\u6bb5\u6811\u4e0a\u5f88\u591a\u5730\u65b9\u662f\u6ca1\u6709\u586b\u6ee1\u7684\uff0c\u5982\u679c\u4f60\u5728\u4e00\u4e2a\u6ca1\u6709\u6570\u7684\u533a\u95f4\u505a $tag$ \u5408\u5e76\uff0c\u4f1a\u5047\u6389\u3002\n\n\u60f3\u6cd5\u4e5f\u4e0d\u662f\u5f88\u96be\uff0c\u52a8\u6001\u5f00\u70b9\u5c31\u597d\u4e86\uff0c\u8fd9\u6837\u6211\u4eec\u5c31\u77e5\u9053\u4e86\u54ea\u4e9b\u5730\u65b9\u4ec0\u4e48\u4e1c\u897f\u4e5f\u6ca1\u6709\uff0c\u5728\u8fd9\u79cd\u5730\u65b9\u4e0d\u53bb\u52a0 $tag$ \u5c31\u597d\u4e86\u3002\n\n\u5176\u5b9e\u4e5f\u4e0d\u662f\u5f88\u9ebb\u70e6\uff0c\u81f3\u5c11\u601d\u8def\u6bd4\u8f83\u597d\u60f3\u3002\n\n```cpp\n#include <iostream>\n#include <algorithm>\nconst int N = 2e6+10;\nint n, q;\nint ab(int _x) {\n\treturn _x > n ? _x-n : _x+n;\n}\ntemplate<const int element_tot>\nclass DSU {\n\tprivate : \n\t\tint anc[element_tot];\n\t\tint size[element_tot];\n\t\tint help_x, help_y;\n\tpublic : \n\t\tvoid init(int initial_size) {\n\t\t\tfor(register int i = 1;i <= initial_size;++i) {\n\t\t\t\tanc[i] = i;\n\t\t\t\tsize[i] = 1;\n\t\t\t}\n\t\t}\n\t\tint get_anc(int site) {\n\t\t\tif(anc[site] != site) \n\t\t\t\tanc[site] = get_anc(anc[site]);\n\t\t\treturn anc[site];\n\t\t}\n\t\tvoid merge(int site_x,int site_y) {\n\t\t\t// std :: cout << \"merge >> \" << site_x << \" \" << site_y << std :: endl;\n\t\t\thelp_x = get_anc(site_x);\n\t\t\thelp_y = get_anc(site_y);\n\t\t\tif(size[help_x] > size[help_y]) \n\t\t\t\tanc[help_y] = help_x;\n\t\t\telse \n\t\t\t\tanc[help_x] = help_y;\n\t\t}\n\t\tbool same_belong(int site_x,int site_y) {\n\t\t\treturn get_anc(site_x,site_y);\n\t\t}\n};\nDSU<N<<1> dsu;\ntemplate<const int seg_tot>\nclass SEGMENT_TREE {\n\tprivate : \n\t\tstruct SEG {\n\t\t\tint lid, rid;\n\t\t\tint tag;\n\t\t} seg[seg_tot<<2];\n\t\tint current_size;\n\t\tint root;\n\tpublic : \n\t\t#define tag(id) seg[id].tag\n\t\t#define lid(id) seg[id].lid\n\t\t#define rid(id) seg[id].rid\n\t\tvoid download(int id) {\n\t\t\tif(!tag(id)) \n\t\t\t\treturn;\n\t\t\tif(lid(id)) {\n\t\t\t\tif(tag(lid(id))) {\n\t\t\t\t\t// std :: cerr << \"D :: let >> \" << tag(id) << \" \" << tag(lid(id)) << std :: endl;\n\t\t\t\t\tdsu.merge(tag(lid(id)),tag(id));\n\t\t\t\t\tdsu.merge(ab(tag(lid(id))),ab(tag(id)));\n\t\t\t\t} else \n\t\t\t\t\ttag(lid(id)) = tag(id);\n\t\t\t}\n\t\t\tif(rid(id)) {\n\t\t\t\tif(tag(rid(id))) {\n\t\t\t\t\t// std :: cerr << \"D :: let >> \" << tag(id) << \" \" << tag(rid(id)) << std :: endl;\n\t\t\t\t\tdsu.merge(tag(rid(id)),tag(id));\n\t\t\t\t\tdsu.merge(ab(tag(rid(id))),ab(tag(id)));\n\t\t\t\t} else \n\t\t\t\t\ttag(rid(id)) = tag(id);\n\t\t\t}\n\t\t\ttag(id) = 0;\n\t\t}\n\t\tvoid insert(int &id,int L,int R,int pos,int val) {\n\t\t\tif(!id) \n\t\t\t\tid = ++current_size;\n\t\t\t// std :: cerr << \"insert >> \" << id << \" \" << L << \" \" << R << \" \" << pos << \" \" << val << std :: endl;\n\t\t\tif(L == pos&&R == pos) {\n\t\t\t\ttag(id) = val;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint mid = (L+R)>>1;\n\t\t\tdownload(id);\n\t\t\tif(pos <= mid) \n\t\t\t\tinsert(lid(id),L,mid,pos,val);\n\t\t\telse \n\t\t\t\tinsert(rid(id),mid+1,R,pos,val);\n\t\t}\n\t\tvoid modify(int id,int L,int R,int l,int r,int val) {\n\t\t\t// std :: cerr << \"modify >> \" << id << \" \" << L << \" \" << R << \" \" << l << \" \" << r << \" \" << val << std :: endl;\n\t\t\tif(r < l) \n\t\t\t\treturn;\n\t\t\tif(!id) \n\t\t\t\treturn;\n\t\t\tif(L >= l&&R <= r) {\n\t\t\t\tif(tag(id)) {\n\t\t\t\t\t// std :: cerr << \"M :: let >> \" << val << \" \" << tag(id) << std :: endl;\n\t\t\t\t\tdsu.merge(tag(id),val);\n\t\t\t\t\tdsu.merge(ab(tag(id)),ab(val));\n\t\t\t\t} else \n\t\t\t\t\ttag(id) = val;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tint mid = (L+R)>>1;\n\t\t\tdownload(id);\n\t\t\tif(r <= mid) \n\t\t\t\tmodify(lid(id),L,mid,l,r,val);\n\t\t\telse if(l > mid) \n\t\t\t\tmodify(rid(id),mid+1,R,l,r,val);\n\t\t\telse {\n\t\t\t\tmodify(lid(id),L,mid,l,r,val);\n\t\t\t\tmodify(rid(id),mid+1,R,l,r,val);\n\t\t\t}\n\t\t}\n\t\tvoid dfs(int id,int L,int R) {\n\t\t\t// std :: cerr << \"dfs :: \" << id << \" \" << L << \" \" << R << std :: endl;\n\t\t\tif(!id) \n\t\t\t\treturn;\n\t\t\tif(L == R) \n\t\t\t\treturn;\n\t\t\tdownload(id);\n\t\t\tint mid = (L+R)>>1;\n\t\t\tdfs(lid(id),L,mid);\n\t\t\tdfs(rid(id),mid+1,R);\n\t\t}\n\t\tint& the_root() {\n\t\t\treturn root;\n\t\t}\n};\nSEGMENT_TREE<N<<1> smt;\nconst unsigned long long moyn = 1000000007;\nunsigned long long quick_pow(unsigned long long _a,unsigned long long _n,unsigned long long _p = moyn) {\n\tunsigned long long _res = 1LL;\n\twhile(_n) {\n\t\tif(_n&1) \n\t\t\t_res = _res*_a%_p;\n\t\t_a = _a*_a%_p;\n\t\t_n >>= 1;\n\t}\n\treturn _res;\n}\nstd :: pair<int,int> obt[N];\nbool visit[N<<1];\nint dsu_cnt;\nint main() {\n\t// freopen(\"02-01.in\",\"r\",stdin);\n\t// freopen(\"test.out\",\"w\",stdout);\n\tscanf(\"%d\",&n);\n\tfor(register int i = 1;i <= n;++i) \n\t\tscanf(\"%d %d\",&obt[i].first,&obt[i].second);\n\tstd :: sort(obt+1,obt+n+1);\n\tdsu.init(n<<1);\n\tfor(register int i = 1;i <= n;++i) {\n\t\tsmt.modify(smt.the_root(),1,n<<1,obt[i].first+1,obt[i].second-1,i+n);\n\t\tsmt.insert(smt.the_root(),1,n<<1,obt[i].second,i);\n\t}\n\tsmt.dfs(1,1,n<<1);\n\tfor(register int i = 1, anc_i, anc_n;i <= n;++i) {\n\t\tanc_i = dsu.get_anc(i);\n\t\tanc_n = dsu.get_anc(i+n);\n\t\tif(anc_i == anc_n) {\n\t\t\tprintf(\"0\\n\");\n\t\t\treturn 0;\n\t\t}\n\t\tif(anc_i == i&&anc_n == i+n) \n\t\t\t++dsu_cnt;\n\t}\n\t// std :: cerr << \"to the end\" << std :: endl;\n\t// printf(\"%d\\n\",dsu_cnt);\n\tprintf(\"%llu\\n\",quick_pow(2LL,dsu_cnt));\n\treturn 0;\n}\n```",
        "postTime": 1663768135,
        "uid": 663579,
        "name": "bikuhiku",
        "ccfLevel": 0,
        "title": "AT2534 \u9898\u89e3"
    },
    {
        "content": "#  \u6e2f\u53e3\u8bbe\u65bd\n[\u5ba3\u4f20\u535a\u5ba2(\u5c0f\u58f0bb)](https://www.cnblogs.com/kiritokazuto/p/16719796.html#5104700)\n\n\u53ef\u80fd\u662f\u6211\u89c1\u7684\u9898\u592a\u5c11\uff0c\u771f\u6ca1\u770b\u51fa\u6765\u8fd9\u4e2a\u9898\u662f\u4e2a\u4e8c\u5206\u56fe\u5339\u914d\u548c\u5e76\u67e5\u96c6\u4f18\u5316\u5efa\u56fe\n \u9996\u5148\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u4ec0\u4e48\u6837\u7684\u533a\u95f4\u662f\u4e0d\u5408\u6cd5\u7684\uff0c\u5047\u5982\u6709\u4e24\u4e2a\u96c6\u88c5\u7bb1\uff0c\u4ed6\u4eec\u5206\u522b\u662f $[l_1,r_1]$\uff0c$[l_2,r_2]$\u3002\n \n\u5982\u679c $l_1 \\le l_2 \\le r_1 \\le r_2$ \u663e\u7136\u4e24\u4e2a\u7bb1\u5b50\u4e0d\u53ef\u80fd\u540c\u65f6\u653e\u5728\u4e00\u4e2a\u6808\u91cc\uff0c\u6211\u60f3\u51fa\u51fa\u4e0d\u53bb\uff0c\u663e\u7136\u4e0d\u884c\uff0c\u5176\u4ed6\u60c5\u51b5\u53ef\u4ee5\u8bc1\u660e\u90fd\u53ef\u4ee5\u3002\n     \n\u6240\u4ee5\u6211\u4eec\u5bf9\u4e8e\u4e0d\u5408\u6cd5\u7684\u533a\u95f4\u8fde\u4e00\u6761\u8fb9\uff0c\u6700\u540e\u8dd1\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u5982\u679c\u6709 $ans$ \u4e2a\u4e8c\u5206\u56fe\uff0c\u8bc1\u660e\u4ed6\u4eec\u662f\u65f6\u95f4\u4e0a\u4e92\u76f8\u72ec\u7acb\u7684\uff0c\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u4efb\u610f\u7ec4\u5408\uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u7b54\u6848\u5c31\u662f $2^ {ans}$\u3002\n     \n\u8003\u8651\u5982\u4f55\u5efa\u56fe\n\n\u9996\u5148\u6ce8\u610f\u6211\u7684\u5e76\u67e5\u96c6\u548c\u5efa\u56fe\u662f\u72ec\u7acb\u7684\uff0c\u4e00\u4e2a\u662f\u7ef4\u62a4\u518d\u6808\u91cc\u7684\u8fde\u8fb9\u5173\u7cfb ($1$ $\\sim$ $2\\times n$)\uff0c\u4e00\u4e2a\u662f\u5728\u539f\u56fe\u4e0a\u771f\u6b63\u5efa\u56fe ($1$ $ \\sim $ $n$)\uff0c\u6240\u4ee5\u6211\u8fde\u8fb9\u5b9e\u9645\u4e0a\u5c31\u662f\u6bcf\u6b21\u53ea\u8fde\u4e00\u6761\uff0c\u5176\u4f59\u5197\u6742\u7684\u90fd\u901a\u8fc7\u5e76\u67e5\u96c6\u8def\u5f84\u538b\u7f29\u5408\u5e76\u4e86\uff0c\u4f18\u5316\u5c31\u4f18\u5316\u5728\u4e86\u8fd9\u91cc\u3002\n        \n\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u4e00\u4e2a\u5047\u7684\u6808\uff0c\u91cc\u8fb9\u5b58\u653e\u5de6\u7aef\u70b9\uff0c\u5f53\u6211\u626b\u5230\u4e00\u4e2a\u5de6\u7aef\u70b9\u5bf9\u5e94\u7684\u53f3\u7aef\u70b9\u65f6\uff0c\u663e\u7136\u6211\u4ece\u6211\u5de6\u7aef\u70b9\u7684\u4e0b\u4e00\u4e2a\u5de6\u7aef\u70b9\u5230\u6808\u9876\u90fd\u548c\u6211\u73b0\u5728\u7684\u533a\u95f4\u5e94\u8be5\u8fde\u8fb9\u3002\n\n\u90a3\u4e48\u6211\u5982\u679c\u66b4\u529b\u8fde\uff0c\u6700\u7ec8\u662f $n ^ {2}$ \u7684\u663e\u7136\u8dd1\u4e0d\u8fc7\u53bb\u3002\n\n\u6211\u4eec\u89c2\u5bdf\u53ef\u4ee5\u53d1\u73b0\uff0c\u5176\u5b9e\u90a3\u4e00\u5768\u5de6\u7aef\u70b9\u53ef\u4ee5\u770b\u6210\u662f\u540c\u4e00\u6027\u8d28\u7684\u70b9\uff0c\u6211\u53ea\u9700\u8981\u8fde\u63a5\u4e00\u4e2a\u5c31\u53ef\u4ee5\u4e86(\u56e0\u4e3a\u6211\u5728\u626b\u5230\u4e4b\u540e\u7684\u5de6\u7aef\u70b9\u5bf9\u5e94\u7684\u53f3\u7aef\u70b9\u65f6\u53c8\u4f1a\u548c\u4e0b\u4e00\u4e2a\u8fde\u8fb9\uff0c\u6700\u7ec8\u53ef\u4ee5\u8fbe\u5230\u5168\u90e8\u8054\u901a\u7684\u6548\u679c\uff0c\u56e0\u4e3a\u6211\u662f\u8dd1 ``dfs`` \u67d3\u8272\uff0c\u53ea\u8981\u80fd\u67d3\u4e0a\u8272\u5c31\u884c\uff0c\u6ca1\u5fc5\u8981\u8fde\u90a3\u4e48\u591a\u8fb9)\uff0c\u6211\u8fd9\u91cc\u8fde\u63a5\u7684\u662f $(l + 1)$ \u7684\u90a3\u4e2a\u70b9\uff0c\u5373\u662f\u6211\u4e0b\u4e00\u4e2a\u5de6\u7aef\u70b9\uff0c\u4f46\u662f\u6211\u8981\u540c\u65f6\u8fdb\u884c\u5e76\u67e5\u96c6\u7684\u8def\u5f84\u538b\u7f29\uff0c\u6240\u4ee5\u5176\u5b9e\u4f1a\u8df3\u5230\u6211\u5e76\u67e5\u96c6\u7684\u7956\u5b97\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u518d\u8fde\u5b8c\u4e00\u6761\u8fb9\u4e4b\u540e\uff0c\u5e94\u8be5\u76f4\u63a5\u8c03\u5230\u4e0b\u4e00\u4e2a\u6027\u8d28\u4e0d\u540c\u7684\u4f4d\u7f6e\uff0c\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7ef4\u62a4\u4e00\u4e2a\u94fe\u8868\uff0c\u8868\u793a\u4e0b\u4e00\u4e2a\u53ef\u4ee5\u8fde\u63a5\u7684\u4e0d\u540c\u6027\u8d28\u7684\u4f4d\u7f6e\uff0c\u76f4\u63a5\u8df3\u5c31\u884c\u3002\n\n\u6ce8\u610f\u5f53\u6211\u4eec\u626b\u5230\u5bf9\u5e94\u7684\u53f3\u7aef\u70b9\u65f6\u5e94\u5c06\u4ed6\u7684\u5de6\u7aef\u70b9\u5220\u9664\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u4e4b\u540e\u7684\u6765\u8bf4\u5b83\u5df2\u7ecf\u4e0d\u5b58\u5728\u4e86\uff0c\u5177\u4f53\u5b9e\u73b0\u5c31\u662f\u5c06\u4ed6 ``nxt`` \u8bbe\u7f6e\u4e3a\u6211\u7684\u6808\u9876\uff0c\u76f4\u63a5\u8df3\u8d70\u3002\n\n\u8fd9\u91cc\u518d\u8bb2\u4e00\u4e2a\u5f88\u591a\u4eba\u7591\u60d1\u7684\u95ee\u9898\uff0c\u6211\u5bf9\u4e8e\u5305\u542b\u7684\u4f1a\u76f4\u63a5\u8df3\u8fc7\u7684\uff0c\u4e0d\u4f1a\u8fde\u8fb9\uff0c \u53ef\u4ee5\u7ed3\u5408\u4ed6\u4eba\u4ee3\u7801\u7406\u89e3\u4e00\u4e0b\uff0c\u6211\u5c31\u4e0d\u6302\u4e86\u3002\n        \n\u4f8b\u5982\n        \n        \n![](https://cdn.luogu.com.cn/upload/image_hosting/yqjchak8.png)\n\n\n\n\u6211\u4eec\u626b\u5230 $1,2,3$\uff0c\u90fd\u662f\u5de6\u7aef\u70b9\uff0c\u653e\u5230\u6808\u91cc\uff0c\u73b0\u5728 ``top`` \u662f $3$\u3002\n\n\u5f53\u6211\u626b\u5230 $4$ \u65f6\uff0c\u5b83\u5bf9\u5e94\u4e86 $2$\uff0c\u90a3\u4e48\u5e94\u8be5\u662f $2, 3$ \u8fde\u63a5\uff0c\u6ca1\u95ee\u9898\u3002\n\n\u73b0\u5728 $2$ \u5230 $4$ \u8fd9\u4e2a\u533a\u95f4\u5df2\u7ecf\u7ed3\u675f\u4e86\uff0c\u90a3\u4e48\u5b83\u7684 ``fa`` \u6210\u4e3a\u4e86 $tot + 1$ \u5373\u662f $4$(\u73b0\u5728\u6ca1\u6709\u8fd9\u4e2a\u70b9(\u7b2c\u56db\u4e2a\u5de6\u7aef\u70b9\uff0c\u4e0d\u662f\u65f6\u95f4 $4$))\u3002\n\n\u5f53\u6211\u626b\u5230 $5$ \u7684\u65f6\u5019\u5b83\u5bf9\u4e8e $2$ \u4f1a\u76f4\u63a5\u8fde\u63a5\u5230 $2$ \u5e76\u67e5\u96c6\u91cc\u7684\u7956\u5b97\uff0c\u4e5f\u5c31\u662f ``tot + 1``\uff0c\u662f\u7a7a\uff0c\u6240\u4ee5\u5b83\u53ea\u4f1a\u548c $3$ \u8fde\u8fb9\u3002\n\n\u4e4b\u540e\u81ea\u5df1\u6a21\u5c31\u884c\u3002\n\n\n",
        "postTime": 1663918169,
        "uid": 277777,
        "name": "kiritokazuto",
        "ccfLevel": 0,
        "title": "\u6e2f\u53e3\u8bbe\u65bd"
    },
    {
        "content": "\u8003\u8bd5\u7684\u65f6\u5019\u5e76\u67e5\u96c6\u5199\u6302\u4e86\u3002\u3002\u3002\u8fd8\u5c45\u7136\u6ca1\u6709\u67e5\u51fa\u6765\u3002\u3002\u3002\u6302\u621020\u5206\u3002\u3002\n\u803b\u8fb1\u554a\u3002\u3002\u3002\n\n\u7136\u540e\u662f\u9898\u89e3\u3002\u3002\u3002\n\n\u9996\u5148\u6bd4\u8f83\u597d\u60f3\u7684\u662f\u8f6c\u5316\u6210\u7ebf\u6bb5\u8986\u76d6\u7684\u95ee\u9898\u3002\u3002\u5982\u679c\u6709\u4e24\u4e2a\u7ebf\u6bb5\u76f8\u4ea4\uff0c\u6211\u4eec\u5c31\u5728\u56fe\u4e0a\u628a\u8fd9\u4e24\u4e2a\u7ebf\u6bb5\u4ee3\u8868\u7684\u70b9\u8fde\u8fb9\u3002\u3002\u3002\n\n\u7136\u540e\u8003\u8651\u600e\u4e48\u5224\u65e0\u89e3\uff0c\u6709\u5947\u73af\u5c31\u65e0\u89e3\u4e86\u3002\u3002\u90a3\u5c31\u9ed1\u767d\u67d3\u8272\u5224\u4e00\u4e0b\u561b\uff0c\u641e\u4e2a\u5e76\u67e5\u96c6\u5c31\u884c\u4e86\u3002\n\n\u7136\u540e\u662f\u6709\u89e3\u7684\u60c5\u51b5\u3002\u3002\u5bb9\u6613\u53d1\u73b0\u53ea\u8981\u641e\u51fa\u6709\u591a\u5c11\u8054\u901a\u5757\uff0c\u7136\u540e2\u7684\u51e0\u6b21\u65b9\u5c31\u53ef\u4ee5\u4e86\u3002\u3002\n\n\u4f46\u662f\u70b9\u5f88\u591a\uff0c\u8fb9\u6570\u4e5f\u5f88\u591a\uff0c\u76f4\u63a5\u8fde\u8fb9\u4f1aT\n\n\u8003\u8651\u600e\u4e48\u7ef4\u62a4\u7ebf\u6bb5\u76f8\u4ea4\u3002\u3002\u3002\u4e00\u4e2a\u6bd4\u8f83\u7b80\u5355\u7684\u60f3\u6cd5\u662f\u7528\u4e00\u4e2a\u6808\uff0c\uff08\u5047\u88c5\u652f\u6301\u5728\u6808\u7684\u4e2d\u95f4\u4f4d\u7f6e\u5f39\u6808\uff09\uff0c\u4ece\u5de6\u5411\u53f3\u626b\u63cf\uff0c\u9047\u5230\u5de6\u7aef\u70b9\u5c31\u538b\u8fdb\u6808\u91cc\uff0c\u9047\u5230\u53f3\u7aef\u70b9\u65f6\u3002\u3002\u3002\u53d1\u73b0\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u4e4b\u95f4\u4f1a\u6709\u4e00\u4e9b\u4e0e\u4e4b\u76f8\u4ea4\u7684\u7ebf\u6bb5\uff0c\u5904\u7406\u597d\u53ea\u540e\u628a\u4e4b\u524d\u538b\u8fdb\u6808\u91cc\u7684\u5de6\u7aef\u70b9\u5f39\u6389\u3002\u3002\u3002\n\n\u53d1\u73b0\u8fd9\u6837\u5f88\u4e0d\u79d1\u5b66\u3002\u3002\u5728\u6808\u4e2d\u95f4\u5f39\u6808\u5c31\u5f88\u5fae\u5999\u4e86\u3002\u3002\u3002\n\u600e\u4e48\u7ef4\u62a4\u8fd9\u4e2a\u5462\u3002\u3002\u6211\u4eec\u7528\u4e00\u4e2a\u5e76\u67e5\u96c6\uff0c\u8868\u793anxt(i)\u8868\u793a\u4ecei\u5f00\u59cb\uff08\u5305\u62eci\uff09\u7684\u4e0b\u4e00\u4e2a\u672a\u88ab\u5f39\u6808\u7684\u4f4d\u7f6e\u3002\u3002\u3002\u8fd9\u6837\u5c31\u80fd\u65b9\u4fbf\u7684\u5f39\u6808\u4e86\u3002\u3002\n\n\u4f46\u662f\u4f1a\u53d1\u73b0\u76f8\u4ea4\u7684\u6b21\u6570\u4e5f\u5f88\u591a\u3002\u3002\u3002\u6211\u4eec\u53d1\u73b0\u9ed1\u767d\u67d3\u8272\u7684\u65f6\u5019\uff0c\u88ab\u540c\u4e00\u7ebf\u6bb5\u6240\u4ea4\u7684\u7ebf\u6bb5\u989c\u8272\u8981\u4e48\u4e00\u6837\u8981\u4e48\u65e0\u89e3\uff0c\u4e8e\u662f\u6211\u4eec\u5728\u6808\u5185\u5728\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4jump(i)\u8868\u793a\u4e0b\u4e00\u4e2a\u4e0e\u5f53\u524d\u4f4d\u7f6e\u989c\u8272\u53ef\u80fd\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002\u3002\u3002\n\n\u7136\u540e\u5c31\u80fd\u8fc7\u4e86\u3002\u3002\u3002\n\n\u4ee3\u7801\n\n```cpp\n#pragma GCC optimize(\"-O2\")\n#include<iostream>\n#include<cstdio>\n#include<cstring>\n#include<vector>\n#include<queue>\n#include<cmath>\n#include<algorithm>\n#include<map>\n#include<bitset>\n#include<ctime>\n#include<cstdlib> \n#define LL long long\n#define DB long double\n#define pa pair<LL,int>\n#define ctz __builtin_ctz\nusing namespace std;\n\ninline int read(){\n    int x=0,f=1;char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n    while(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\ninline void Out(LL x){\n    if(x>9) Out(x/10);\n    putchar(x%10+'0'); \n}\nLL qpow(LL x,LL y,LL P){\n    LL re=1;\n    while(y){\n        if(y&1) re=re*x%P;\n        x=x*x%P;y>>=1;\t\n    } \n    return re;\n}\nconst LL mod=1e9+7;\nconst int N=2e6+10;\nint w[N];\nint n;\n\nint top=0;\nint q[N];\nint pos[N];\nint fa[N],nxt[N],jp[N];\nint findfa(int x){\n\treturn fa[x]==x?x:fa[x]=findfa(fa[x]);\n}\nint NXT(int x){\n\treturn nxt[x]==x?x:nxt[x]=NXT(nxt[x]);\n}\nint add(int x,int y){\n\tint u=findfa(x),v=findfa(y);\n\tint uu=findfa(x+n),vv=findfa(y+n);\n\tif(u==v||uu==vv) return 0;\n\tif(u>vv) swap(u,vv);\n\tfa[vv]=u;\n\tif(v>uu) swap(v,uu);\n\tfa[uu]=v;\n\treturn 1;\n}\nint main(){\n//\tfreopen(\"down.in\",\"r\",stdin);\n//\tfreopen(\"down.out\",\"w\",stdout);\n\tscanf(\"%d\",&n);\n\tint l,r;\n\tfor(int i=1;i<=n;++i){\n\t\tl=read();r=read();\n\t\tw[l]=i;w[r]=i;\n\t\tfa[i]=i;\n\t\tfa[i+n]=i+n;\n\t}\n\tfor(int i=1;i<=n+n;++i){\n\t\tnxt[i]=i;\n\t\tjp[i]=i+1;\n\t}\n\tint x,y,z,t,flag;\n\tLL js=0;\n\tfor(int i=1;i<=n+n;++i){\n\t\t//if(i%10000==0) cout<<js<<endl;\n\t\tx=w[i];\n\t\tif(!pos[x]){\n\t\t\t++top;\n\t\t\tpos[x]=top;\n\t\t\tq[top]=x;\n\t\t}\n\t\telse{\n\t\t\ty=pos[x];z=y+1;z=NXT(z);\n\t\t\twhile(z<=top){\n\t\t\t\tflag=add(x,q[z]);\n\t\t\t\t//++js;\n\t\t\t\tif(!flag) {\n\t\t\t\t\tputs(\"0\");return 0;\n\t\t\t\t}\n\t\t\t\tt=jp[z];\n\t\t\t\tjp[z]=top+1;\n\t\t\t\tz=t;\n\t\t\t\tz=NXT(z);\n\t\t\t}\n\t\t\tnxt[y]=y+1;\n\t\t}\n\t}\n\tLL ans=0;\n\tfor(int i=1;i<=n+n;++i) if(findfa(i)==i) ++ans;\n\tans>>=1;\n\tans=qpow((LL)2,ans,mod);\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n/*\n10\n100 8 8\n\n*/\n```",
        "postTime": 1544941246,
        "uid": 46755,
        "name": "Iscream2001",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT2534 \u3010\u6e2f\u6e7e\u8a2d\u5099 (Port Facility)\u3011"
    },
    {
        "content": "# JOISC2017B \u9898\u89e3\n\n\n\n## \u9898\u76ee\u5927\u610f\n\n> \u6709 $n$ \u4e2a\u7269\u54c1\u548c\u4e24\u4e2a\u6808\uff08\u540e\u8fdb\u5148\u51fa\uff09\uff0c\u6bcf\u4e2a\u7269\u54c1\u53ef\u80fd\u8fdb\u5165\u5176\u4e2d\u67d0\u4e2a\u6808\uff0c\u73b0\u5df2\u77e5 $n$ \u4e2a\u7269\u54c1\u7684\u8fdb\u51fa\u6808\u987a\u5e8f\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u5b89\u6392\u7269\u54c1\u5165\u6808\u51fa\u6808\u7684\u65b9\u5f0f\u6ee1\u8db3\u987a\u5e8f\u8981\u6c42\u3002\n>\n> \u6570\u636e\u8303\u56f4\uff1a$n\\le 1\\times 10^6$\u3002\n\n\n\n## \u601d\u8def\u5206\u6790\n\n\u5047\u5982\u6211\u4eec\u628a\u6bcf\u4e2a\u6808\u7684\u5165\u6808\u51fa\u6808\u65f6\u95f4\u770b\u6210\u4e00\u4e2a\u7ebf\u6bb5\u7684\u8bdd\uff0c\u90a3\u4e48\u540c\u4e00\u4e2a\u6808\u4e2d\u7684\u7ebf\u6bb5\u8981\u4e48\u4e0d\u76f8\u4ea4\u8981\u4e48\u5305\u542b\uff0c\u56e0\u6b64\u4e0d\u80fd\u5728\u540c\u4e00\u4e2a\u6808\u4e2d\u7684\u7269\u54c1\u53ef\u4ee5\u5199\u6210\u82e5\u5e72\u7ec4\u5173\u4e8e $(l,r)$ \u7684\u4e8c\u7ef4\u504f\u5e8f\u5173\u7cfb\u3002\n\n\u5047\u5982\u6211\u4eec\u628a\u4e0d\u80fd\u5728\u540c\u4e00\u4e2a\u6808\u4e2d\u7684\u7269\u54c1\u76f8\u8fde\uff0c\u90a3\u4e48\u8fd9\u5c31\u662f\u4e00\u4e2a\u7edf\u8ba1 2-SAT \u89e3\u6570\u7684\u95ee\u9898\uff0c\u82e5\u539f\u56fe\u662f\u4e8c\u5206\u56fe\u5219\u7b54\u6848\u4e3a $2^b$\uff0c$b$ \u4e3a\u8fde\u901a\u5757\u4e2a\u6570\uff0c\u5426\u5219\u7b54\u6848\u4e3a $0$\u3002\n\n\u6ce8\u610f\u5230\u9898\u76ee\u4e2d\u7684\u4e8c\u7ef4\u504f\u5e8f\u9650\u5236\u5173\u7cfb\u53ef\u4ee5\u7528\u4e3b\u5e2d\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u7136\u540e\u7528\u6269\u57df\u5e76\u67e5\u96c6\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u4e0b\u9762\u7b80\u5355\u8bb2\u4e00\u4e0b\u5982\u4f55\u5b9e\u73b0\u89e3\u9898\u76ee\u4e2d\u7684 2-SAT\uff1a\n\n- \u9996\u5148\u5efa\u51fa\u4e3b\u5e2d\u6811\uff0c\u628a\u6bcf\u4e2a\u7ebf\u6bb5\u6302\u5230\u5bf9\u5e94\u7684\u4e3b\u5e2d\u6811\u7684\u53f6\u5b50\u8282\u70b9\u4e0a\uff0c\u5e76\u628a\u8fd9\u4e24\u4e2a\u8282\u70b9\u8bbe\u4e3a\u540c\u8272\u3002\n- \u5bf9\u4e8e\u6bcf\u4e2a\u4e8c\u7ef4\u504f\u5e8f\u9650\u5236\uff0c\u4ece\u5bf9\u5e94\u7ebf\u6bb5\u8282\u70b9\u8fde\u5230\u4e3b\u5e2d\u6811\u67d0\u4e2a\u533a\u95f4\u8282\u70b9\u4e0a\uff0c\u5e76\u628a\u8fd9\u4e24\u4e2a\u8282\u70b9\u8bbe\u4e3a\u5f02\u8272\u3002\n- \u628a\u6240\u6709\u88ab\u8fde\u8fb9\u7684\u4e3b\u5e2d\u6811\u533a\u95f4\u8282\u70b9\u53d6\u51fa\uff0c\u5c06\u8fd9\u4e9b\u8282\u70b9\u7684\u5b50\u6811\u5168\u90e8\u8bbe\u4e3a\u540c\u8272\u3002\n\n\u524d\u4e24\u6b65\u5e76\u67e5\u96c6\u5c31\u53ef\u4ee5\u76f4\u63a5\u505a\uff0c\u800c\u7b2c\u4e09\u6b65\u9700\u8981\u79bb\u7ebf\u51fa\u6240\u6709\u8282\u70b9\u518d BFS \u4e00\u904d\u4ee5\u4fdd\u8bc1\u590d\u6742\u5ea6\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n\\alpha(n\\log n))$\uff0c\u6ce8\u610f\u5b9e\u73b0\u5e38\u6570\u3002\n\n\n\n## \u4ee3\u7801\u5448\u73b0\n\n```cpp\n#include<bits/stdc++.h>\n#pragma GCC optimize(\"Ofast\")\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1<<21],*p1=buf,*p2=buf;\ninline int read(){\n\tint x=0; char ch=getchar();\n\twhile(!isdigit(ch)) ch=getchar();\n\twhile(isdigit(ch)) x=x*10+ch-'0',ch=getchar();\n\treturn x;\n}\nusing namespace std;\nconst int MAXN=1e6+1,MAXV=MAXN*24,MOD=1e9+7;\nint n,siz;\nstruct Node {\n\tint ls,rs;\n}\ttree[MAXV];\nint tar[MAXN]; \ninline void Append(int id,int u,int l,int r,int src,int &des) {\n\ttree[des=++siz]=tree[src];\n\tif(l==r) { tar[id]=des; return ; }\n\tint mid=(l+r)>>1;\n\tif(u<=mid) Append(id,u,l,mid,tree[src].ls,tree[des].ls);\n\telse Append(id,u,mid+1,r,tree[src].rs,tree[des].rs);\n}\nvector <int> sec[MAXN];\ninline void Link(int u,int ul,int ur,int l,int r,int pos) {\n\tif(ul>ur||!pos) return ;\n\tif(ul<=l&&r<=ur) { sec[u].push_back(pos); return ; }\n\tint mid=(l+r)>>1;\n\tif(ul<=mid) Link(u,ul,ur,l,mid,tree[pos].ls);\n\tif(mid<ur) Link(u,ul,ur,mid+1,r,tree[pos].rs);\n}\nstruct Interval {\n\tint l,r;\n}\ta[MAXN];\nint root[MAXN],dsu[MAXV<<1],rnk[MAXV<<1];\ninline int find(int x) {\n\tint u=x,fa;\n\twhile(dsu[u]!=u) u=dsu[u];\n\twhile(x!=u) fa=dsu[x],dsu[x]=u,x=fa;\n\treturn u;\n}\ninline void merge(int u,int v) {\n\tu=find(u),v=find(v);\n\tif(u==v) return ;\n\tif(rnk[u]<rnk[v]) swap(u,v);\n\tdsu[v]=u,rnk[u]+=(rnk[u]==rnk[v]);\n}\nbool vis[MAXV],inq[MAXV<<1];\nsigned main() {\n\tsiz=n=read();\n\tvector <int> rp;\n\tfor(int i=1;i<=n;++i) a[i].l=read(),a[i].r=read(),rp.push_back(a[i].r);\n\tsort(a+1,a+n+1,[&](Interval u,Interval v) { return u.l<v.l; });\n\tsort(rp.begin(),rp.end());\n\tfor(int i=1;i<=n;++i) {\n\t\tint lid=lower_bound(rp.begin(),rp.end(),a[i].l)-rp.begin()+1;\n\t\tint rid=lower_bound(rp.begin(),rp.end(),a[i].r)-rp.begin()+1;\n\t\tLink(i,lid,rid-1,1,n,root[i-1]);\n\t\tAppend(i,rid,1,n,root[i-1],root[i]);\n\t}\n\tiota(dsu+1,dsu+siz*2+1,1);\n\tfill(rnk+1,rnk+siz*2+1,1);\n\tauto equal=[&](int u,int v) {\n\t\tmerge(u,v),merge(u+siz,v+siz);\n\t\tif(find(u)==find(u+siz)||find(v)==find(v+siz)) puts(\"0\"),exit(0);\n\t};\n\tauto diff=[&](int u,int v) {\n\t\tmerge(u,v+siz),merge(u+siz,v);\n\t\tif(find(u)==find(u+siz)||find(v)==find(v+siz)) puts(\"0\"),exit(0);\n\t};\n\tqueue <int> Q;\n\tfor(int i=1;i<=n;++i) {\n\t\tdiff(tar[i],i);\n\t\tfor(int u:sec[i]) equal(i,u),Q.push(u),vis[u]=true;\n\t}\n\twhile(!Q.empty()) {\n\t\tint u=Q.front(); Q.pop();\n\t\tif(u<=n) continue;\n\t\tfor(int v:{tree[u].ls,tree[u].rs}) if(v) {\n\t\t\tequal(u,v);\n\t\t\tif(!vis[v]) Q.push(v),vis[v]=true;\n\t\t}\n\t}\n\tint ans=1;\n\tfor(int i=1,i0,i1;i<=n;++i) {\n\t\ti0=find(i),i1=find(i+siz);\n\t\tif(i0==i1) {\n\t\t\tputs(\"0\");\n\t\t\treturn 0;\n\t\t} else if(!inq[i0]&&!inq[i1]) {\n\t\t\tans=ans*2%MOD;\n\t\t\tinq[i0]=inq[i1]=true;\n\t\t}\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1683813294,
        "uid": 539618,
        "name": "DaiRuiChen007",
        "ccfLevel": 6,
        "title": "JOISC2017B \u9898\u89e3"
    },
    {
        "content": "## \u89e3\u6790\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u6709\u4ea4\u53c9\u7684\u533a\u95f4\u6240\u5c5e\u7684\u96c6\u88c5\u7bb1\u662f\u4e0d\u80fd\u653e\u5728\u540c\u4e00\u4e2a\u6808\u7684\uff1b\u56e0\u6b64\u5bf9\u6240\u6709\u6709\u4ea4\u53c9\u7684\u533a\u95f4\u8fde\u8fb9\uff0c\u5c31\u80fd\u5f97\u5230\u4e00\u5f20\u56fe\uff0c\u5e76\u4e14\u6211\u4eec\u8981\u5728\u4e0a\u9762\u505a $2-$ \u67d3\u8272\n\n\u9996\u5148\u8981\u60f3\u5230\u80fd $2-$ \u67d3\u8272 \u7684\u56fe\u4e00\u5b9a\u662f\u4e00\u4e2a**\u4e8c\u5206\u56fe**\n\n\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u5efa\u56fe\u540e\u786e\u8ba4\u5404\u8fde\u901a\u5757\u662f\u5426\u5168\u662f\u4e8c\u5206\u56fe\u3002\u5982\u679c\u6709\u4e00\u4e2a\u8fde\u901a\u5757\u4e0d\u662f\u4e8c\u5206\u56fe\u5c31\u8fdd\u6cd5\uff0c\u5426\u5219\u7b54\u6848\u5c31\u662f $2^C$\uff0c\u5176\u4e2d $C$ \u662f\u8fde\u901a\u5757\u4e2a\u6570\n\n### \u6734\u7d20\u5efa\u56fe\n\n\u53ef\u4ee5\u8003\u8651\u7528\u4ee5\u4e0b\u7684\u65b9\u5f0f\uff1a\n\n\u5148\u5c06\u5de6\u7aef\u70b9\u548c\u53f3\u7aef\u70b9\u6309\u4f4d\u7f6e\u5b58\u5230\u4e00\u4e2a\u6570\u7ec4\u91cc\uff0c\u5f97\u5230\u4e00\u4e2a\u7531\u8d27\u7bb1\u7f16\u53f7\u7ec4\u6210\u7684\u5e8f\u5217\uff1b\u5176\u4e2d\u6bcf\u4e2a\u6570\u5b57\u7b2c\u4e00\u6b21\u51fa\u73b0\u662f\u5176\u5165\u6808\u70b9\uff08\u5de6\u7aef\u70b9\uff09\uff0c\u7b2c\u4e8c\u6b21\u51fa\u73b0\u662f\u5176\u51fa\u6808\u70b9\uff08\u53f3\u7aef\u70b9\uff09\n\n\u6211\u4eec\u89c4\u5b9a\u5bf9\u4e8e\u7c7b\u4f3c `A_B_A_B` \u7684\u4ea4\u53c9\u533a\u95f4\uff0c\u53ea\u5728 `A` \u65f6\u4e0e `B` \u8fde\u8fb9\n\n\u8fd9\u6837\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u533a\u95f4 $[a_l, a_r]$\uff0c\u6211\u4eec\u53ea\u9700\u627e\u5230 $[a_l, a_r]$ \u5185\u6240\u6709\u53f3\u7aef\u70b9\u5927\u4e8e $a_r$ \u7684\u5de6\u7aef\u70b9 $b$\uff0c\u5e76\u5c06 $a$ \u4e0e $b$ \u8fde\u8fb9\u5373\u53ef\n\n\u53ef\u4ee5\u8003\u8651\u7528\u4e00\u4e2a\u987a\u5e8f\u8868\u7ef4\u62a4\u5de6\u7aef\u70b9\u3002\u6309\u987a\u5e8f\u904d\u5386\u5e8f\u5217\uff0c\u5f53\u9047\u5230\u5de6\u7aef\u70b9\u65f6\uff0c\u5c06\u5176\u4ece\u8868\u672b\u5c3e\u52a0\u5165\uff1b\u5f53\u9047\u5230\u53f3\u7aef\u70b9\u65f6\uff0c\u8bbe\u8be5\u53f3\u7aef\u70b9\u6240\u5c5e\u7684\u7f16\u53f7\u4e3a $a$\uff0c\u6211\u4eec\u5c06\u8868\u5185 $a_l$ \u201c\u53f3\u4fa7\u201d \u7684\u6240\u6709\u5143\u7d20\u4e0e $a$ \u8fde\u8fb9\uff0c\u5e76\u4e14\u5220\u9664 $a_l$\u3002\u53ef\u4ee5\u77e5\u9053\u8fd9\u6837\u8fde\u8fb9\u662f\u4e0d\u591a\u4e0d\u5c11\u7684\n\n\u4f46\u8fb9\u6570\u662f $n^2$ \u7684\uff0c\u4f1a\u6302\n\n### \u5efa\u56fe\u4f18\u5316\n\n\u9996\u5148\u6ce8\u610f\u5230\uff0c\u5728\u4e00\u5f20\u975e\u4e8c\u5206\u56fe\u4e2d\u5220\u53bb\u4e00\u4e9b\u8fb9\uff0c\u53ef\u80fd\u4f7f\u5b83\u4ecd\u4e0d\u4e3a\u4e8c\u5206\u56fe\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u53ea\u8981\u4fdd\u7559\u56fe\u4e2d\u7684\u4e00\u4e2a\u5947\u73af\u5373\u53ef\u3002\u8fd9\u662f\u6211\u4eec\u4f18\u5316\u5efa\u56fe\u7684\u7406\u8bba\n\n\u8003\u8651\u6211\u4eec\u5efa\u56fe\u7684\u8fc7\u7a0b\uff1a\n\n![1](https://cdn.luogu.com.cn/upload/image_hosting/ar46k1o0.png)\n\n\uff08\u56fe\u7247 [\u6765\u81ea](https://yhx-12243.github.io/OI-transit/records/uoj356%3Bloj2391%3Bac2534.html)\uff09\n\n\u8003\u8651 $[\\alpha, \\beta]$ \u7684\u8fd9\u6bb5\u533a\u95f4\uff08\u4e8b\u5b9e\u4e0a\u6211\u4eec\u6bcf\u6b21\u8fde\u8fb9\u90fd\u662f\u5411\u4e00\u6bb5\u533a\u95f4\u7684\u5de6\u7aef\u70b9\u8fde\uff0c\u4e0d\u8fc7**\u4e0d\u5305\u542b\u5df2\u88ab\u5220\u9664\u7684\u5de6\u7aef\u70b9**\uff09\u3002\u5728\u6211\u4eec\u5411\u5176\u7b2c\u4e00\u6b21\u8fde\u8fb9\u65f6\uff0c\u5c31\u5df2\u7ecf\u9650\u5b9a\u4e86\u8fd9\u4e9b\u5de6\u7aef\u70b9\u7684\u989c\u8272\u76f8\u540c\uff1b\u56e0\u6b64\u5728\u7b2c\u4e8c\u6b21\u5411\u8fd9\u6bb5\u533a\u95f4\uff08\u7684\u4e00\u90e8\u5206\uff09\u8fde\u8fb9\u65f6\uff0c\u53ea\u9700\u8fde\u5176\u4e2d\u7684\u4e00\u4e2a\u70b9\uff08\u4f8b\u5982\u56fe\u4e2d $\\alpha$\uff09\u5c31\u884c\u4e86\n\n&nbsp;\n\n\u4e00\u79cd\u76f4\u63a5\u7684\u601d\u8def\u662f\u5c06\u8fd9\u6bb5\u533a\u95f4\uff08\u53c2\u8003\u56fe\u4e2d\u7eff\u8272\u533a\u95f4\uff09\u4e2d\u7684\u5143\u7d20\u5168\u90e8\u5220\u53bb\uff0c\u53ea\u8d2a\u5fc3\u5730\u7559\u4e0b \u201c\u4e0b\u6807\u201d \u6700\u5927\u7684\u90a3\u4e2a\uff08\u53c2\u8003\u56fe\u4e2d $\\beta$\uff09\u3002\u4f46\u6ce8\u610f\u5230 $\\beta$ \u8fd9\u4e2a\u4ee3\u8868\u7ed3\u70b9**\u662f\u6709\u53ef\u80fd\u88ab\u5220\u53bb\u7684**\n\n\u6bd4\u8f83\u7c97\u66b4\u7684\u89e3\u51b3\u65b9\u6848\u662f\uff0c\u76f4\u63a5\u7528\u4e00\u4e2a\u53ef\u5e76\u5806\u7ef4\u62a4\u540c\u8272\u533a\u5757\u7684\u5143\u7d20\uff0c\u5806\u9876\u4e3a\u4e0b\u6807\u6700\u5927\u7684\u7ed3\u70b9\uff1b\u518d\u4ee5\u5806\u9876\u7684\u5143\u7d20\u7684\u4e0b\u6807\u4f5c\u4e3a\u5728\u5e73\u8861\u6811\u4e2d\u7684 key \u503c\uff0c\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u8fd9\u4e9b\u5806\n\n\u6bcf\u6b21\u52a0\u5165\u5de6\u7aef\u70b9\u65f6\uff0c\u5c31\u5c06\u8fd9\u4e2a\u5de6\u7aef\u70b9\u4f5c\u4e3a\u4e00\u4e2a\u5806\u63d2\u5165\u5e73\u8861\u6811\uff1b\u6bcf\u6b21\u904d\u5386\u5230\u53f3\u7aef\u70b9 $a_r$ \u65f6\uff0c\u5c31\u5c06\u8fde\u8fb9\u7684\u5806\u90fd\u5408\u5e76\uff0c\u5e76\u5c06 $a_l$ \u6240\u5728\u7684\u5806\u4ece\u5e73\u8861\u6811\u5f39\u51fa\uff0c\u5e76\u5c06 $a_l$ \u4ece\u5806\u4e2d\u5220\u9664\uff0c\u7ef4\u62a4\u5806\u9876\uff0c\u518d\u5c06\u5806\u653e\u56de\u5e73\u8861\u6811\n\n\u82e5\u8fde\u8fb9\u6b21\u6570\u4e3a $n$\uff0c\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u662f $O(n\\log n)$ \u7684\n\n&nbsp;\n\n\u8fd8\u6709\u4e00\u79cd\u601d\u8def\u662f\u5c06\u540c\u8272\u7684\u5143\u7d20\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u5e76\u5728\u5e76\u67e5\u96c6\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u6307\u9488\uff0c\u7528\u6765\u8df3\u8fc7\u8fd9\u6574\u4e2a\u540c\u8272\u533a\u5757\n\n\u4f46\u53d1\u73b0\u56e0\u4e3a\u8868\u4e2d\u7684\u5143\u7d20\u53ef\u80fd\u4f1a\u88ab\u5220\u9664\uff0c\u6bcf\u4e2a\u540c\u8272\u533a\u5757\u7ef4\u62a4\u7684\u6307\u9488\u6709\u53ef\u80fd\u4f1a\u5931\u6548\u3002\u56e0\u6b64\u8003\u8651\u4e0d\u663e\u5f0f\u5730\u5220\u9664\u5143\u7d20\uff0c\u800c\u662f\u540c\u6837\u5229\u7528\u5e76\u67e5\u96c6\u8df3\u8fc7**\u88ab\u5220\u9664\u5143\u7d20\u7684\u533a\u5757**\uff08\u8fde\u7eed\u7684\u88ab\u5220\u9664\u7684\u5143\u7d20\uff09\n\n\u5177\u4f53\u6765\u8bf4\uff0c\u6bcf\u6b21\u52a0\u5165\u5de6\u7aef\u70b9\u65f6\uff0c\u76f4\u63a5\u5c06\u8fd9\u4e2a\u5de6\u7aef\u70b9\u52a0\u5165\u987a\u5e8f\u8868\uff1b\u6bcf\u6b21\u904d\u5386\u5230\u53f3\u7aef\u70b9 $a_r$ \u65f6\uff0c\u5c31\u5c06 $a_l$ \u53f3\u4fa7\u7684\u540c\u8272\u533a\u5757\uff08\u6ce8\u610f $a_l$ \u53ef\u80fd**\u6070\u597d\u5728\u67d0\u4e2a\u533a\u5757\u7684\u4e2d\u95f4**\u90e8\u5206\uff0c\u4f46\u5bf9\u4e8e\u6211\u4eec\u8981\u505a\u7684\u64cd\u4f5c\u6ca1\u6709\u592a\u5927\u5f71\u54cd\uff09\u90fd\u548c $a$ \u8fde\u8fb9\uff0c\u8fde\u8fb9\u65f6\u5229\u7528\u4e24\u4e2a\u5e76\u67e5\u96c6\u8df3\u8fc7\u4e0d\u9700\u8981\u91cd\u590d\u8fde\u8fb9\u548c\u5df2\u88ab\u5220\u9664\u7684\u5143\u7d20\uff0c\u5e76\u5408\u5e76\u9014\u4e2d\u7684\u540c\u8272\u533a\u5757\uff0c\u6700\u540e\u518d\u5c06 $a_l$ \u5728\u7ef4\u62a4\u5220\u9664\u5143\u7d20\u7684\u533a\u5757\u7684\u5e76\u67e5\u96c6\u4e2d\u5c1d\u8bd5\u4e0e $a_l$ \u5de6/\u53f3\u7684\u5143\u7d20\u5408\u5e76\uff08\u9700\u8981\u5de6/\u53f3\u7684\u5143\u7d20\u4e5f\u5df2\u88ab\u5220\u9664\uff09\n\n\u82e5\u8fde\u8fb9\u6b21\u6570\u4e3a $n$\uff0c\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u662f $O(n)$ \u7684\n\n&nbsp;\n\n\u6700\u540e\u518d\u5206\u6790\u4e0b\u8fde\u8fb9\u7684\u590d\u6742\u5ea6\n\n\u5bf9\u4e8e\u6bcf\u4e2a $a$\uff08\u8d27\u7bb1\uff09\u5728\u53f3\u7aef\u70b9 $a_r$ \u5904\u7684\u8fde\u8fb9\uff0c\u9664\u4e86\u8fde\u7684\u7b2c\u4e00\u6761\u8fb9\u5916\uff0c\u6b64\u540e\u6bcf\u4e00\u6b21\u8fde\u8fb9\u90fd\u4f1a**\u5408\u5e76\u540c\u8272\u533a\u95f4**\u3002\u5176\u4e2d\u4e0d\u5408\u5e76\u533a\u95f4\u7684\u8fde\u8fb9\u6700\u591a\u53ea\u6709 $n$ \u6b21\uff1b\u5408\u5e76\u533a\u95f4\u7684\u8fde\u8fb9\u6b21\u6570\u53ef\u4ee5\u53c2\u8003\u7ebf\u6bb5\u6811\u7684\u8fb9\u60c5\u51b5\uff0c\u81f3\u591a\u4e5f\u662f $n$ \u6b21\u3002\u4e8e\u662f\u603b\u7684\u8fde\u8fb9\u6b21\u6570\u5c31\u662f $O(n)$\uff08\u7c97\u7565\u9884\u4f30\u4e00\u4e0b\u5e94\u8be5\u662f\u7ea6 $3n$ \u6761\u65e0\u5411\u8fb9\uff0c\u4e0d\u8fc7\u6309\u6570\u636e\u7684\u8fd0\u884c\u60c5\u51b5\u6765\u770b\u8c8c\u4f3c\u662f\u4e0d\u5230 $2n$ \u6761\u65e0\u5411\u8fb9\u7684\uff09\n\n### \u51e0\u53e5\u95f2\u626f\n\n\u53e6\u5916\u4e24\u7bc7\u9898\u89e3\uff08\u6211\u53d1\u8fd9\u7bc7\u9898\u89e3\u65f6\uff09\u5e76\u6ca1\u6709\u7ef4\u62a4\u540c\u8272\u533a\u5757\u7684\u5e76\u67e5\u96c6\uff0c\u800c\u662f\u5728\u8868\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u4e0a\u50a8\u5b58\u4e00\u4e2a \u201c\u4e0b\u4e00\u4e2a\u53ef\u80fd\u8fde\u8fb9\u201d \u7684\u5143\u7d20\u4f4d\u7f6e\u7684\u6307\u9488\u3002\u8c8c\u4f3c**\u6709\u6548\u6307\u9488**\u603b\u662f\u50a8\u5b58\u5728\u6bcf\u4e2a\u540c\u8272\u533a\u5757\u6700\u5de6\u7684\u6709\u6548\u5143\u7d20\u4e0a\uff08\u503c\u5f97\u4e00\u63d0\u7684\u662f\uff0c\u5728\u6bcf\u4e2a\u5c0f\u533a\u95f4\u88ab\u5408\u5e76\u6210\u5927\u533a\u95f4\u65f6\uff0c\u6bcf\u4e2a\u5c0f\u533a\u95f4\u7684\u6307\u9488\u8fd8\u4f1a\u88ab\u6700\u540e\u66f4\u65b0\u4e00\u6b21\uff0c\u66f4\u65b0\u6210\u5927\u533a\u95f4\u5e94\u6709\u7684\u6307\u9488\uff09\n\n\u5f53\u67d0\u540c\u8272\u533a\u5757\u6700\u5de6\u7684\u5143\u7d20\u88ab\u5220\u9664\u65f6\uff0c\u5408\u5e76\u533a\u5757\u7684\u64cd\u4f5c\u8c8c\u4f3c\u6070\u597d\u4f1a\u5c06\u65b0\u7684\u533a\u5757\u6700\u5de6\u7684\u6709\u6548\u5143\u7d20\u7684\u6307\u9488\u66f4\u65b0\u3002\u4f46\u5f53\u67d0\u540c\u8272\u533a\u5757\u4ece\u4e2d\u95f4\u88ab\u8bbf\u95ee\u65f6\uff0c\u5408\u5e76\u533a\u5757\u7684\u64cd\u4f5c\u5c31\u4f1a\u628a\u65b0\u7684\u6709\u6548\u6307\u9488\u5b58\u4e8e\u533a\u5757\u4e2d\u95f4\u7684\u67d0\u4e2a\u5143\u7d20\u4e0a\uff0c\u5bfc\u81f4\u6700\u5de6\u7684\u5143\u7d20\u7684\u6307\u9488\u8fc7\u65f6\uff1b\u4e8e\u662f\u5728\u4e0b\u6b21\u8fde\u8fb9\u65f6\uff0c\u5c31\u6709\u53ef\u80fd\u591a\u8fde\u8fb9\n\n\u53c2\u8003 hack\uff1a\n\n```\nHack:\n[1]. \u5220\u533a\u95f4\u6700\u5de6\u5143\u7d20\uff1a\n7\n7 1 2 3 1 4 5 6 4 7 2 3 5 6\n[2]. \u4ece\u4e2d\u95f4\u622a\u65ad\u533a\u95f4\uff08hack \u6210\u529f\uff09\uff1a\n7\n7 2 3 1 4 2 5 6 1 7 3 4 5 6\n```\n\n\u793a\u610f\u56fe\uff1a\n\n![hack](https://cdn.luogu.com.cn/upload/image_hosting/3syen29w.png)\n\n\uff08\u8bb2\u5f97\u53ef\u80fd\u6709\u4e9b\u62bd\u8c61\uff09\n\n\u4e0d\u8fc7\u5c1a\u4e0d\u6e05\u695a\u8fd9\u4e2a\u95ee\u9898\u5bf9\u7a0b\u5e8f\u6548\u7387\u7684\u5f71\u54cd\u5927\u4e0d\u5927X\n\n## CODE\n\n\u8fd9\u91cc\u662f\u5e76\u67e5\u96c6\u7248\u672c\n\n```cpp\n#include <cstdio>\n#include <iostream>\nusing std::max;\n\nconst int MAXN =1e6+50, M =1e9+7;\n\n/*------------------------------Math------------------------------*/\n\nint Pow(int x, int k){\n\tint ans =1;\n\tfor(; k; x =1ll*x*x%M, k >>=1)\n\t\tif(k&1)\n\t\t\tans =1ll*ans*x%M;\n\treturn ans;\n}\n\n/*------------------------------Map------------------------------*/\n\nint n;\nint first[MAXN], tote;\nstruct edge{\n\tint net, to;\n}e[4*MAXN];/*\u677e\u4e00\u70b9\u7684\u754c\u5e94\u8be5\u662f (2*MAXN+MAXN)*2 */\n\ninline void addedge(int u, int v){\n\t++tote;\n\te[tote].net =first[u], first[u] =tote;\n\te[tote].to =v;\n\t++tote;\n\te[tote].net =first[v], first[v] =tote;\n\te[tote].to =u;\n}\n\nbool vis[MAXN], color[MAXN];\n\nbool dfs(const int &u){\n\tvis[u] =1;\n\tfor(int l =first[u]; l; l =e[l].net){\n\t\tif(!vis[e[l].to]){\n\t\t\tcolor[e[l].to] =!color[u];\n\t\t\tif(!dfs(e[l].to))\n\t\t\t\treturn 0;\n\t\t}\n\t\telse/*\u5982\u679c\u9047\u5230\u7684\u662f\u7236\u4eb2\u4e00\u5b9a\u4e0d\u4f1a\u77db\u76fe*/\n\t\t\tif(color[e[l].to] != (!color[u]))\n\t\t\t\treturn 0;\n\t}\n\treturn 1;\n}\n\nint work_Graph(){\n\tint ret =0;\n\tfor(int u =1; u <= n; ++u)\n\t\tif(!vis[u]){\n\t\t\tif(!dfs(u))\n\t\t\t\treturn -1;\n\t\t\telse\n\t\t\t\t++ret;\n\t\t}\n\treturn ret;\n}\n\n/*------------------------------Disjoint Set------------------------------*/\n\nstruct set{\n\tint f[MAXN], pointer[MAXN], rank[MAXN];\n\t\n\tint find_root(const int &u){\n\t\tif(f[u] == u)\n\t\t\treturn u;\n\t\telse\n\t\t\treturn find_root(f[u]);\n\t}\n\tinline void merge(int u, int v){\n\t\tu =find_root(u), v =find_root(v);\n\t\tif(rank[u] < rank[u])\n\t\t\tu ^=v ^=u ^=v;\n\t\tf[v] =u;\n\t\tpointer[u] =max(pointer[u], pointer[v]);\n\t\t++rank[u];\n\t}\n\tinline int get_pointer(const int &u){\n\t\treturn pointer[find_root(u)];\n\t}\n}set_erase, set_color;\n\n/*------------------------------=------------------------------*/\n\nint array[MAXN], tot;\nbool is_deleted[MAXN];\n\n/*------------------------------Main------------------------------*/\n\ninline int read(){\n\tint x =0; char c =getchar();\n\twhile(c < '0' || c > '9') c =getchar();\n\twhile(c >= '0' && c <= '9') x = (x<<3) + (x<<1) + (48^c), c =getchar();\n\treturn x;\n}\n\nint pos[MAXN];/*\u5de6\u7aef\u70b9\u5728\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e*/\nint a[MAXN<<1];\n\nint main(){\n\tn =read();\n\tfor(int i =1; i <= n; ++i){\n\t\tint l =read(), r =read();\n\t\ta[l] =a[r] =i;\n\t}\n\t/*A_B_A_B\uff0c\u89c4\u5b9a\u8fd9\u6837\u7684\u4ea4\u53c9\u533a\u95f4\u53ea\u7531 A \u8fde\u8fb9*/\n\tfor(int i =1; i <= n*2; ++i){\n\t\tint nw =a[i];\n\t\tif(pos[nw] == 0){\n\t\t\t++tot;\n\t\t\tarray[tot] =nw, pos[nw] =tot;\n\t\t\tset_erase.f[tot] =tot, set_erase.pointer[tot] =tot;/*\u4e0b\u4e00\u4e2a\u672a\u88ab\u5220\u9664\u5143\u7d20\u7684\u4f4d\u7f6e*/\n\t\t\tset_color.f[tot] =tot, set_color.pointer[tot] =tot+1;/*\u4e0b\u4e00\u4e2a\u533a\u5757\u7684\u4f4d\u7f6e*/\n\t\t}\n\t\telse{\n\t\t\tis_deleted[pos[nw]] =1;\n\t\t\t++set_erase.pointer[pos[nw]];\n\t\t\tif(pos[nw]-1 >= 1 && is_deleted[pos[nw]-1])\n\t\t\t\tset_erase.merge(pos[nw], pos[nw]-1);\n\t\t\tif(pos[nw]+1 <= tot && is_deleted[pos[nw]+1])\n\t\t\t\tset_erase.merge(pos[nw], pos[nw]+1);\n\t\t\tfor(int j =set_erase.get_pointer(pos[nw]), j_next; j <= tot; j =j_next){\n\t\t\t\taddedge(array[j], nw);\n\t\t\t//\tj_next =set_erase.get_pointer(set_color.get_pointer(j));\n\t\t\t\tj_next =set_color.get_pointer(j);\n\t\t\t\tif(j_next <= tot)\n\t\t\t\t\tj_next =set_erase.get_pointer(j_next);\n\t\t\t\tif(j_next <= tot)\n\t\t\t\t\tset_color.merge(j, j_next);\n\t\t\t}\n\t\t}\n\t}\n\tint r =work_Graph();\n\tif(r == -1)\n\t\tputs(\"0\");\n\telse\n\t\tprintf(\"%d\\n\", Pow(2, r));\n}\n```",
        "postTime": 1602115987,
        "uid": 105254,
        "name": "Piwry",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT2534 \u3010\u6e2f\u6e7e\u8a2d\u5099 (Port Facility)\u3011"
    },
    {
        "content": "\u6211\u4eec\u5148\u8003\u8651\u4e24\u79cd\u6570\u7684\u60c5\u51b5\uff0c\u4e0d\u96be\u53d1\u73b0\u53ea\u6709$1212$\u8fd9\u79cd\u60c5\u51b5\u610f\u5473\u7740$1$\u548c$2$\u4e0d\u80fd\u653e\u5728\u540c\u4e00\u6e2f\u53e3\uff0c$1122$\uff0c$1221$\u8fd9\u4e24\u79cd\u662f\u4e0d\u9700\u8981\u8003\u8651\u7684\n\n\u7136\u540e\u6211\u4eec\u628a\u8fd9\u79cd\u76f8\u4ea4\u4e14\u4e0d\u5305\u6db5\u7684\u533a\u95f4\u8fde\u8fb9\uff0c\u5c31\u6210\u4e86\u591a\u4e2a\u56e2\uff0c\u5224\u65ad\u6bcf\u4e2a\u56e2\u662f\u5426\u6210\u7acb\u53ea\u9700\u8981dfs\u4e8c\u5206\u56fe\u67d3\u8272\u5373\u53ef\u3002\u56e0\u4e3a\u6bcf\u4e2a\u56e2\u90fd\u4e92\u4e0d\u5f71\u54cd\uff0c\u6240\u4ee5\u7b54\u6848\u5c31\u662f$2^N$\uff08$N$\u4e3a\u56e2\u6570\uff09\n\n\u8fd9\u6837$O(N^2)$\u7684\u505a\u6cd5\u5c31\u51fa\u6765\u4e86\uff0c\u5bf9\u6bcf\u4e00\u4e2a\u7f16\u53f7$i$\uff0c\u4ece\u5de6\u8fb9$L_i$\u5411\u53f3\u8fb9$R_i$\u679a\u4e3e\uff0c\u5bf9\u6240\u6709\u53ea\u6709\u5de6\u7aef\u70b9\u5728\u533a\u95f4\u5185\u7684\u70b9\u8fde\u8fb9\u3002\u518d\u8dd1\u4e00\u904d\u4e8c\u5206\u56fe\u67d3\u8272\n\n\u4e0d\u8fc7\u8fd9\u6837\u662f\u8fc7\u4e0d\u4e86$1e6$\u7684\uff0c\u6211\u4eec\u8003\u8651\u4f18\u5316\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u6bcf\u4e00\u6b21\u8fde\u8fb9\u90fd\u662f\u5bf9\u4e00\u6bb5\u533a\u95f4\u5185\u5927\u90e8\u5206\u70b9\u8fde\u8fb9\uff0c\u7ed9\u8fd9\u4e9b\u70b9\u67d3\u6210\u540c\u4e00\u79cd\u989c\u8272\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/zorcn9l2.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u8fd9\u6837\u4f1a\u4f7f\u5f97\u4e00\u4e9b\u533a\u95f4\u88ab\u5927\u91cf\u67d3\u8272\uff0c\u800c\u4e14\u8fd8\u662f\u67d3\u6210\u540c\u4e00\u79cd\u989c\u8272\uff0c\u8fd9\u6837\u7684\u64cd\u4f5c\u5341\u5206\u4e0d\u5408\u7406\uff0c\u6211\u4eec\u53ea\u9700\u8981\u67d3\u4e00\u6b21\u5c31\u591f\u4e86\n\n\u5bf9\u67d3\u6210\u540c\u4e00\u989c\u8272\u7684\u533a\u95f4\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u8fd9\u6837\u5c31\u53ea\u4f1a\u67d3\u4e00\u6b21\u4e86\uff08\u6709\u70b9\u50cf[P4473 [\u56fd\u5bb6\u96c6\u8bad\u961f]\u98de\u98de\u4fa0](https://www.luogu.com.cn/problem/P4473)\u7684\u5e76\u67e5\u96c6\u4f18\u5316\u505a\u6cd5\uff09\n\n\u5efa\u597d\u56fe\u540edfs\u4e8c\u5206\u56fe\u67d3\u8272\u5c31\u597d\u4e86\n\n## code\n```\n#include<bits/stdc++.h>\n#define maxn 4000005\n#define ll long long\nusing namespace std;\nconst ll TT=1e9+7;\nint n,a[maxn],b[maxn],N,tot,lnk[maxn],nxt[maxn],Nxt[maxn],pos[maxn],son[maxn],ans,fa[maxn],cnt[maxn];\ninline int read(){\n\tint ret=0;char ch=getchar();\n\twhile (ch<'0'||ch>'9') ch=getchar();\n\twhile (ch<='9'&&ch>='0') ret=ret*10+ch-'0',ch=getchar();\n\treturn ret;\n}\ninline int Getfa(int x){return fa[x]==x? x:fa[x]=Getfa(fa[x]);}\ninline void add(int x,int y){nxt[++tot]=lnk[x];lnk[x]=tot;son[tot]=y;}\ninline void dfs(int x){\n\tfor (int i=lnk[x];i;i=nxt[i]){\n\t\tif (cnt[son[i]]==cnt[x]){printf(\"0\");exit(0);}\n\t\telse if (cnt[son[i]]) continue;\n\t\tcnt[son[i]]=cnt[x]^1;dfs(son[i]);\n\t}\n}\nint main(){\n\tn=read();\n\tfor (int i=1;i<=n;i++) a[read()]=a[read()]=i;\n\tn<<=1;\n\tfor (int i=1;i<=n;i++) fa[i]=i,Nxt[i]=i;\n\tfor (int i=1;i<=n;i++){\n\t\tif (!pos[a[i]]){b[pos[a[i]]=++N]=a[i];continue;}\n\t\tfor (int j=fa[pos[a[i]]]=Getfa(pos[a[i]]+1),k;j<=N;j=k){\n\t\t\tadd(b[j],a[i]);add(a[i],b[j]);\n\t\t\tk=Getfa(Nxt[j]+1);Nxt[j]=N;\n\t\t}\n\t}\n\tfor (int i=1;i<=n>>1;i++) if (!cnt[i]) cnt[i]=2,ans++,dfs(i);\n\tll Ans=1;\n\tfor (int i=1;i<=ans;i++) Ans=Ans*2%TT;\n\tprintf(\"%lld\",Ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1601901901,
        "uid": 108047,
        "name": "LlLlCc",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT2534 \u3010\u6e2f\u6e7e\u8a2d\u5099 (Port Facility)\u3011"
    },
    {
        "content": "\u539f\u9898\u53ef\u4ee5\u8f6c\u5316\u6210\u6bcf\u4e2a\u7ebf\u6bb5\u5bf9\u4e0e\u81ea\u5df1\u6709\u4ea4\u96c6\u4e14\u4e0d\u88ab\u81ea\u5df1\u5305\u542b\u4e14\u4e0d\u5305\u542b\u81ea\u5df1\u7684\u7ebf\u6bb5\u5efa\u8fb9\uff0c\u5982\u679c\u5efa\u51fa\u6765\u7684\u56fe\u662f\u4e8c\u5206\u56fe\uff0c\u90a3\u4e48\u7b54\u6848\u5c31\u662f\u8fde\u901a\u5757\u6570\u91cf\uff0c\u5426\u5219\u7b54\u6848\u5c31\u662f $0$\u3002\n\n\u8fd9\u4e2a\u8f6c\u5316\u4e0d\u96be\uff0c\u96be\u5728\u5efa\u8fb9\u3002\u66b4\u529b\u5efa\u8fb9\u663e\u7136\u8fb9\u6570\u592a\u591a\u4e86\uff0c\u6240\u4ee5\u8003\u8651\u4f18\u5316\u5efa\u56fe\u3002\u8fd9\u91cc\u63d0\u4f9b\u4e00\u79cd\u6ca1\u6709\u601d\u7ef4\u96be\u5ea6\u4f46\u662f\u6709\u70b9\u96be\u7801\u7684\u505a\u6cd5\uff1a\u53ef\u6301\u4e45\u5316\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u8fb9\u3002\n\n\u6211\u4eec\u5148\u6309\u53f3\u7aef\u70b9\u5bf9\u7ebf\u6bb5\u6392\u5e8f\uff0c\u7136\u540e\u5bf9\u6bcf\u4e00\u4e2a\u65f6\u523b\u5efa\u4e00\u9897\u7ebf\u6bb5\u6811\u3002\u5047\u8bbe\u5f53\u524d\u65f6\u523b\u4e3a $x$\uff0c\u90a3\u4e48 $rt_x$ \u8fd9\u68f5\u6811\u91cc\u9700\u8981\u5305\u542b\u6240\u6709\u5de6\u7aef\u70b9\u5c0f\u4e8e\u7b49\u4e8e $x$ \u7684\u7ebf\u6bb5\u7684\u7f16\u53f7\uff0c\u663e\u7136\u8fd9\u4e2a\u53ef\u4ee5\u626b\u4e00\u904d $2\\times n$ \u4e2a\u65f6\u523b\uff0c\u6bcf\u627e\u5230\u4e00\u4e2a\u5de6\u7aef\u70b9\u5c31\u5c06\u6811\u4e2d\u5f53\u524d\u70b9\u7684\u6807\u8bb0\u8bbe\u4e3a $1$ \u5373\u53ef\u3002\u6ce8\u610f\u5728\u5efa\u521d\u59cb\u6811\u65f6\uff0c\u4e3a\u4e86\u4fdd\u8bc1\u6240\u6709\u53f6\u5b50\u8282\u70b9\u540c\u8272\u540c\u6df1\u5ea6\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u5927\u4e8e\u7b49\u4e8e $n$ \u7684 $2$ \u7684\u6b21\u5e42\uff0c\u4fdd\u8bc1\u7ebf\u6bb5\u6811\u662f\u4e00\u9897\u6ee1\u4e8c\u53c9\u6811\uff0c\u8fd9\u6837\u6240\u6709\u7684\u53f6\u5b50\u8282\u70b9\u81ea\u7136\u5c31\u5728\u540c\u4e00\u6df1\u5ea6\uff0c\u6709\u540c\u4e00\u989c\u8272\u4e86\u3002\n\n\u8003\u8651\u8fde\u8fb9\uff0c\u8bbe\u5f53\u524d\u7ebf\u6bb5\u4e3a $i$\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5bf9\u6240\u6709 $l_j<l_i<r_j<r_i$\uff0c\u7684\u7ebf\u6bb5\u5efa\u8fb9\uff0c\u4e8e\u662f\u6211\u4eec\u5c31\u5728 $rt_{l_i-1}$ \u91cc\u627e\u5230\u8be2\u95ee\u7684\u533a\u95f4\uff0c\u5411\u4e0b\u66b4\u529b\u5efa\u8fb9\uff0c\u6ce8\u610f\u53ea\u7ed9\u5df2\u7ecf\u6709\u70b9\u7684\u533a\u95f4\u5efa\u8fb9\uff0c\u4e0d\u7136\u7684\u8bdd\u4f1a\u8bef\u8fde\u5230\u6ca1\u6709\u4efb\u4f55\u70b9\u7684\u5386\u53f2\u8282\u70b9\u5bfc\u81f4\u4e0d\u8be5\u8fde\u7684\u70b9\u88ab\u8fde\u4e0a\u4e86\u3002\u5728\u6811\u4e2d\u627e\u533a\u95f4\u7684\u65f6\u5019\u9700\u8981\u6ce8\u610f\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u4fdd\u6301\u4e8c\u5206\u56fe\u7684\u6027\u8d28\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u80fd\u5bf9\u548c\u53f6\u5b50\u8282\u70b9\u4e00\u4e2a\u989c\u8272\u7684\u70b9\u5efa\u8fb9\uff0c\u5982\u679c\u5f53\u524d\u533a\u95f4\u88ab\u5927\u533a\u95f4\u8986\u76d6\u4e86\u4f46\u662f\u548c\u53f6\u5b50\u8282\u70b9\u4e0d\u662f\u4e00\u4e2a\u989c\u8272\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8981\u5c06\u5176\u5f3a\u884c\u62c6\u6210\u4e24\u4e2a\u533a\u95f4\u5230\u4e0b\u4e00\u5c42\u53bb\u5efa\u8fb9\u3002\u5efa\u8fb9\u4e0d\u7528\u771f\u7684\u5efa\uff0c\u53ea\u9700\u8981\u4f7f\u7528\u5e76\u67e5\u96c6\u5224\u4e8c\u5206\u56fe\u5373\u53ef\uff0c\u987a\u4fbf\u7ef4\u62a4\u8fde\u901a\u6027\u3002\n\n\u65f6\u7a7a\u590d\u6742\u5ea6\uff1a\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u662f $\\Theta(n\\log n \\times\\alpha'(n\\log n))$\uff0c\u7a7a\u95f4\u590d\u6742\u5ea6\u662f $\\Theta(n\\log n+n)$\uff0c\u65f6\u95f4\u5f88\u5145\u8db3\uff0c\u4f46\u662f\u7a7a\u95f4\u6709\u70b9\u7d27\uff0c\u4f46\u597d\u5728\u662f 1024MB\uff0c\u6ce8\u610f\u4e00\u70b9\u522b\u5f00\u592a\u5927\u5373\u53ef\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n//Linkwish's code\n#include<bits/stdc++.h>\n#define fi first\n#define se second\n#define si static inline\nusing namespace std;\ntypedef const int ci;\ntypedef long long ll;\ntypedef __int128 li;\ntypedef pair<int,int> pii;\nconst int iinf=INT_MAX;\nconst ll linf=LLONG_MAX;\nusing namespace std;\nci N=(1<<20)+5,M=23*(1<<20)+5;\nnamespace Base{\n\tint n,tag[N<<1],p[N];\n\tbool got[N<<1];\n\tstruct T{\n\t\tint l,r;\n\t\tinline bool operator < (const T an){return r<an.r;}\n\t}a[N];\n}\nusing namespace Base;\nnamespace Dsu{\n\ttemplate<ci SZ> struct dsu{\n\t\tint fa[SZ+5],sz[SZ+5];\n\t\tinline dsu(){for(int i=1;i<=SZ;i++)fa[i]=i,sz[i]=1;}\n\t\tint getf(int x){return x==fa[x]?x:fa[x]=getf(fa[x]);}\n\t\tvoid merge(int x,int y){\n\t\t\tx=getf(x),y=getf(y);\n\t\t\tif(x==y)return ;\n\t\t\tif(sz[x]<sz[y])swap(x,y);\n\t\t\tfa[y]=x,sz[x]+=sz[y];\n\t\t}\n\t};\n\tdsu<(N+M)<<1> d2;\n\tci lim=N+M-5;\n\tsi void add(ci x,ci y){\n\t\td2.merge(x,y+lim);\n\t\td2.merge(x+lim,y);\n\t\tif(d2.getf(x)==d2.getf(x+lim)||d2.getf(y)==d2.getf(y+lim)){\n\t\t\tcout<<\"0\\n\";\n\t\t\texit(0);\n\t\t}\n\t}\n}\nusing namespace Dsu;\nnamespace Segment_tree{\n#define ls(x) t[x].ls\n#define rs(x) t[x].rs\n\tstruct node{\n\t\tint ls,rs,pos,sz;\n\t\tbool ins,flag;\n\t}t[M];\n\tint rt[N<<1],cnt,amt;\n\tvector<int> res;\n\tvoid build(int &x,int l,int r){\n\t\tx=++cnt;\n\t\tif(l==r){\n\t\t\tt[x].flag=1;\n\t\t\tt[x].pos=l;\n\t\t\treturn ;\n\t\t}\n\t\tt[x].pos=++amt;\n\t\tint mid=(l+r)>>1;\n\t\tbuild(ls(x),l,mid);\n\t\tbuild(rs(x),mid+1,r);\n\t\tt[x].flag=t[ls(x)].flag^1;\n\t}\n\tvoid insert(int &x,ci pre,int l,int r,ci goal){\n\t\tx=++cnt;\n\t\tt[x]=t[pre];\n\t\tif(l==r){\n\t\t\tt[x].ins=1;\n\t\t\tt[x].sz++;\n\t\t\treturn ;\n\t\t}\n\t\tt[x].pos=++amt;\n\t\tint mid=(l+r)>>1;\n\t\tif(goal<=mid)insert(ls(x),ls(pre),l,mid,goal);\n\t\telse insert(rs(x),rs(pre),mid+1,r,goal);\n\t\tt[x].sz=t[ls(x)].sz+t[rs(x)].sz;\n\t}\n\tvoid link_down(int x,int l,int r){\n\t\tif(l==r)return ;\n\t\tint mid=(l+r)>>1;\n\t\tt[x].ins=1;\n\t\tif(t[ls(x)].sz){\n\t\t\tadd(t[x].pos,t[ls(x)].pos);\n\t\t\tif(!t[ls(x)].ins)link_down(ls(x),l,mid);\n\t\t}\n\t\tif(t[rs(x)].sz){\n\t\t\tadd(t[x].pos,t[rs(x)].pos);\n\t\t\tif(!t[rs(x)].ins)link_down(rs(x),mid+1,r);\n\t\t}\n\t}\n\tvoid ask(int x,int l,int r,int L,int R){\n\t\tif(l==r&&!t[x].ins)return ;\n\t\tif(l>=L&&r<=R&&t[x].flag){\n\t\t\tif(t[x].sz)res.push_back(t[x].pos);\n\t\t\tif(!t[x].ins)link_down(x,l,r);\n\t\t\treturn ;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tif(L<=mid)ask(ls(x),l,mid,L,R);\n\t\tif(R>mid)ask(rs(x),mid+1,r,L,R);\n\t}\n}\nusing namespace Segment_tree;\nsigned main(){\n\tios::sync_with_stdio(0);\n\tcin.tie(0),cout.tie(0);\n\tcin>>n;\n\tamt=n;\n\tfor(int i=1;i<=n;i++)cin>>a[i].l>>a[i].r;\n\tsort(a+1,a+1+n);\n\tint up=1;\n\twhile(up<n)up<<=1;\n\tfor(int i=1;i<=n;i++){\n\t\tp[i]=a[i].r;\n\t\ttag[a[i].l]=tag[a[i].r]=i;\n\t}\n\tbuild(rt[0],1,up);\n\tfor(int i=1,x,l,r;i<=n*2;i++){\n\t\tx=tag[i],rt[i]=rt[i-1];\n\t\tif(got[x]){\n\t\t\tl=lower_bound(p+1,p+1+n,a[x].l)-p;\n\t\t\tr=lower_bound(p+1,p+1+n,a[x].r)-p-1;\n\t\t\tif(r>=l){\n\t\t\t\tres.clear();\n\t\t\t\task(rt[a[x].l-1],1,up,l,r);\n\t\t\t\tfor(int j:res)add(x,j);\n\t\t\t}\n\t\t\tgot[x]=0;\n\t\t}\n\t\telse{\n\t\t\tgot[x]=1;\n\t\t\tinsert(rt[i],rt[i-1],1,up,x);\n\t\t}\n\t}\n\tunordered_map<int,bool> vis;\n\tint ans=1,mod=1e9+7;\n\tfor(int i=1;i<=amt;i++)d2.merge(i,i+lim);\n\tfor(int i=1,x;i<=n;i++){\n\t\tx=d2.getf(i);\n\t\tif(!vis[x])ans=ans*2%mod,vis[x]=1;\n\t}\n\tcout<<ans<<endl;\n\treturn 0;\n}\n```\n",
        "postTime": 1677587927,
        "uid": 408180,
        "name": "LinkWish",
        "ccfLevel": 7,
        "title": "AT_joisc2017_b \u9898\u89e3"
    }
]