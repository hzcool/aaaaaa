[
    {
        "content": "### \u75af\u72c2\u5410\u69fd\n\n\u5927\u5bb6\u597d\uff0c\u6211\u662f\u840c\u65b0\uff0c\u8fd9\u905350\u884c\u4e0d\u5230\u7684\u9898\u6211\u8c03\u4e864\u5c0f\u65f6\u3002(\u256f\u2035\u25a1\u2032)\u256f\ufe35\u253b\u2501\u253b\n\n\u4e00\u5f00\u59cb\u5199\u4e8c\u5206\uff0c\u8fb9\u754c\u6076\u5fc3\u4e86\u6211\u4e09\u5c0f\u65f6\uff0c\u7ec8\u4e0d\u6210\uff0c\u9042\u653e\u5f03\n\n\u540e\u6765\u53d1\u73b0\u76f4\u63a5\u7ef4\u62a4\u8df3\u8dc3\u6307\u9488\u53ef\u4ee5\u7701\u6389\u4e00\u4e2alog\uff0c\u4e00\u5c0f\u65f6\u540e\u518d\u6b21\u5f03\u7597\n\n\u518d\u540e\u6765OYJason\u8fc7\u6765\u770b\u4e86\u4e00\u773c\uff0c\u53d1\u73b0\u6211\u7684\u8df3\u8dc3\u6307\u9488\u5b8c\u5168\u6ca1\u6709\u610f\u4e49\uff0c\u76f4\u63a5\u53f3\u7aef\u70b9+1\u6216\u5de6\u7aef\u70b9-1\u5c31\u884c\u4e86\uff0c\u4e8e\u662f\u4ee3\u7801\u5220\u53bb\u4e86\u82e5\u5e72\u884c\uff0c\u77ac\u95f4AC\n\n### \u9898\u89e3\n\n\u6bcf\u6b21\u8df3\u8dc3\u4f1a\u8ba9v\u51cf\u534a\uff0c\u56e0\u6b64\u6700\u591a\u8df3\u8dc3log v\u6b21\u3002\u90a3\u53ef\u4ee5\u770b\u4f5c\u4e00\u68f5log v\u5c42\u7684\u5bb9\u5668\uff0c\u6bcf\u5c42\u6709\u82e5\u5e72\u6761\u7ebf\u6bb5\u3002\u5bf9\u4e8e\u7b2ci\u5c42\u7684\u4e00\u6761\u7ebf\u6bb5\uff0c\u5b83\u6240\u8986\u76d6\u7684\u70b9\u5c31\u662f\u6309\u8df3\u8dc3i-1\u6b21\u540e\u7684\u9a7c\u5cf0\u5927\u5c0f\u6765\u7b97\uff0c\u80fd\u76f4\u63a5\u5230\u8fbe\u7684\u7eff\u6d32\n\n\u90a3\u95ee\u9898\u5c31\u53d8\u6210\u4e86\uff1a\u5728\u6bcf\u5c42\u9009\u4e00\u4e2a\u7ebf\u6bb5\uff0c\u5c06\u6574\u4e2a\u533a\u95f4\u5b8c\u5168\u8986\u76d6\u3002\u5176\u4e2d\u7b2c\u4e00\u5c42\u9009\u62e9\u7684\u7ebf\u6bb5\u662f\u94a6\u5b9a\u7684\uff08\u56e0\u4e3a\u8981\u5bf9\u6bcf\u4e2a\u51fa\u53d1\u70b9\u6c42\u662f\u5426\u6709\u89e3\uff09\n\n\u56e0\u4e3a\u5c42\u6570\u662flog v\u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u72b6\u538bdp\u3002\u72b6\u6001s\u7684\u7b2ci\u4f4d\u4e3a1\uff0c\u8868\u793a\u7b2ci\u5c42\u5df2\u7ecf\u9009\u4e86\u4e00\u4e2a\u7ebf\u6bb5\u3002\u6211\u4eec\u8981dp\u51fa\u4e24\u4e2a\u4e1c\u897f\uff1aexL\\[s\\]\u8868\u793a\u72b6\u6001s\u4e0b\uff0c\u4ece\u5de6\u5230\u53f3\u80fd\u5b8c\u5168\u8986\u76d6\u7684\u6700\u53f3\u8fb9\u4f4d\u7f6e\uff1bexR\\[s\\]\u8868\u793a\u72b6\u6001s\u4e0b\uff0c\u4ece\u53f3\u5230\u5de6\u80fd\u5b8c\u5168\u8986\u76d6\u7684\u6700\u5de6\u8fb9\u4f4d\u7f6e\n\n\u7136\u540e\u4e3a\u4e86\u65b9\u4fbfdp\uff0c\u6211\u4eec\u5904\u7406\u51fa\u6bcf\u4e00\u5c42\u7684\u6240\u6709\u7ebf\u6bb5\uff0c\u8bb0L\\[d\\]\\[x\\]\u8868\u793a\u7b2cd\u5c42\u4e2d\uff0cx\u6240\u5728\u7ebf\u6bb5\u7684\u5de6\u7aef\u70b9\u3002R\\[d\\]\\[x\\]\u540c\u7406\n\n\u8f6c\u79fb\uff1a$exL_s=\\max\\limits_{t\\in s}(R[t][exL_{\\complement_st}+1]),\\quad ;exR_s=\\max\\limits_{t\\in s}(L[t][exR_{\\complement_st}-1])$\n\n\u7136\u540e\u679a\u4e3e\u7b2c\u4e00\u5c42\u7684\u6240\u6709\u7ebf\u6bb5\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u7ebf\u6bb5\uff0c\u5728\u6240\u6709\u72b6\u6001\u91cc\u627e\uff0c\u770b\u6709\u6ca1\u6709\u90a3\u4e2a\u72b6\u6001\u6240\u5bf9\u5e94\u7684exL\uff0c\u52a0\u4e0a\u5b83\u7684\u8865\u96c6\u5bf9\u5e94\u7684exR\uff0c\u5728\u52a0\u4e0a\u8fd9\u4e2a\u7ebf\u6bb5\uff0c\u80fd\u628a\u533a\u95f4\u5b8c\u5168\u8986\u76d6\u3002\u5982\u679c\u53ef\u4ee5\uff0c\u90a3\u8fd9\u4e2a\u7ebf\u6bb5\u91cc\u7684\u6240\u6709\u4f4d\u7f6e\u90fd\u662fPossible\n\n\u90a3\u679a\u4e3e\u7ebf\u6bb5\u53c8\u679a\u4e3e\u72b6\u6001\uff0c\u590d\u6742\u5ea6\u4f1a\u4e0d\u4f1a\u7206\u70b8\u5462\uff1f\u4e0d\u4f1a\u3002\u663e\u7136\u7684\uff0c\u82e5\u7b2c\u4e00\u5c42\u7ebf\u6bb5\u591a\u4e8elog v\u4e2a\uff0c\u90a3\u4e0d\u53ef\u80fd\u6709\u89e3\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u76f4\u63a5\u5168\u90e8\u8f93\u51faImpossible\u5373\u53ef\n\n\u72b6\u6001\u603b\u6570\u662fO(v)\u7684\uff0c\u6240\u4ee5\u603b\u7684\u590d\u6742\u5ea6\u662fO((n+v) log v)\n\n```cpp\n#include<bits/stdc++.h>\n#define FR first\n#define SE second\nusing namespace std;\n\nconst int S=(1<<20)+5;\nchar buf[S],*H,*T;\ninline char Get()\n{\n    if(H==T) T=(H=buf)+fread(buf,1,S,stdin);\n    if(H==T) return -1;return *H++;\n}\ninline int read()\n{\n    int x=0,fg=1;char c=Get();\n    while(!isdigit(c)&&c!='-') c=Get();\n    if(c=='-') fg=-1,c=Get();\n    while(isdigit(c)) x=x*10+c-'0',c=Get();\n    return x*fg;\n}\n\ntypedef pair<int,int> pii;\nconst int INF=0x3f3f3f3f;\nconst int N=200010;\nint n,V,X[N],dep=0;\nint L[20][N],R[20][N];\nint exL[N<<4],exR[N<<4];\npii seg[N];\nbool ans[N];\n\nint main()\n{\n    n=read();V=read();\n    for(int i=1;i<=n;i++) X[i]=read();\n    X[0]=-INF-V-1;X[n+1]=INF+V+1;\n    for(int v=V;v>=0;v>>=1,dep++)\n    {\n        R[dep][n+1]=n+1;\n        for(int i=1;i<=n;i++) L[dep][i]=(X[i]-X[i-1]<=v)?L[dep][i-1]:i;\n        for(int i=n;i>=1;i--) R[dep][i]=(X[i+1]-X[i]<=v)?R[dep][i+1]:i;\n        if(v==0){dep++;break;}\n    }\n    for(int i=1;i<=n;i++) seg[i]=pii(L[0][i],R[0][i]);\n    int cnt=unique(seg+1,seg+1+n)-(seg+1);\n    for(int i=0;i<(1<<dep);i++) exR[i]=n+1;\n    for(int s=0;s<(1<<dep);s+=2)\n        for(int i=0;i<dep;i++)\n        {\n            if(!(s&(1<<i))) continue;\n            exL[s]=max(exL[s],R[i][exL[s^(1<<i)]+1]);\n            exR[s]=min(exR[s],L[i][exR[s^(1<<i)]-1]);\n        }\n    if(cnt>dep) goto output;\n    for(int i=1;i<=cnt;i++)\n        for(int s=0;s<(1<<dep);s+=2)\n            if(exL[s]>=seg[i].FR-1&&exR[(1<<dep)-1-s-1]<=seg[i].SE+1)\n            {\n                for(int j=seg[i].FR;j<=seg[i].SE;j++) ans[j]=1;\n                break;\n            }\n    output: for(int i=1;i<=n;i++) puts(ans[i]?\"Possible\":\"Impossible\");\n    return 0;\n}\n```\n\n",
        "postTime": 1539782570,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 AT2365 \u3010Camel and Oases\u3011"
    },
    {
        "content": "[\u9898\u9762\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/AT2365)\n\n\u7b2c\u4e00\u7bc7\u9ed2\u9898\u9898\u89e3\uff0c\u5e0c\u671b\u80fd\u591f\u7528\u6e05\u6670\u660e\u4e86\u7684\u8bed\u8a00\u6765\u8bb2\u8fd9\u9053~~\u6bd2\u7624~~\u9ed2\u9898\n## 1.\u89e3\u6cd5\u63a2\u7d22\n#### 1.1 \u65f6\u95f4\u590d\u6742\u5ea6\n\u7531$2e5$\u53ef\u77e5\u590d\u6742\u5ea6\u7ea6\u4e3a$O(n)$\u6216$O(nlogn)$\n#### 1.2 \u521d\u6b65\u66b4\u529b\n\u5982\u679c\u6211\u4eec\u8fdb\u884c\u66b4\u529b\u7684\u8bdd\uff0c\u6211\u4eec\u4f1a\u53d1\u73b0V\u7684\u53d8\u5316\u662f$V,V/2,V/4,...,2,1,0$\n\n\u4e5f\u5c31\u662f\u53ef\u4ee5\u8df3\u8dc3$logV$\u6b21\n\n\u800c\u4e14\uff0c\u5728\u6bcf\u4e2a\u70b9\uff0c\u5982\u679c\u4e0d\u8fdb\u884c\u8df3\u8dc3\uff0c\u76f8\u5e94\u6c34\u91cf\u53ef\u4ee5\u8d70\u7684\u8ddd\u79bb\u662f\u56fa\u5b9a\u7684\u4e14\u8fde\u7eed\u7684\n\n\u90a3\u4e48\u53ef\u4ee5\u5c1d\u8bd5\u9884\u5904\u7406\u5728\u6bcf\u4e2a\u70b9\uff0c\u4ee5\u76f8\u5e94\u7684\u6c34\u91cf\u53ef\u4ee5\u8d70\u5230\u7684\u6700\u5de6\u548c\u6700\u53f3\n\n\uff08\u53ef\u4ee5\u7ed3\u5408\u6837\u4f8b\u7406\u89e3\uff09\n#### 1.3 \u63a8\u7406\u601d\u8003\n\u90a3\u4e48\u6211\u4eec\u77e5\u9053\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u8d70\u7684\u8303\u56f4\u662f\u5426\u6709\u7528\u5462\uff1f\n\n\u9996\u5148\u6211\u4eec\u7684\u76ee\u6807\uff0c\u662f\u77e5\u9053\u5728\u4e00\u4e2a\u70b9\u662f\u5426\u53ef\u4ee5\u904d\u5386\u6240\u6709\u70b9\n\n\u4e5f\u5c31\u662f\u4ece\u4e00\u4e2a\u70b9\uff0c\u4f7f\u7528\u82e5\u5e72\u4e2aV\uff0c\u5411\u5de6\u4e0e\u5411\u53f3\u8d70\uff0c\u662f\u5426\u53ef\u4ee5\u5230\u8fbe1\u53f7\u70b9\u4e0en\u53f7\u70b9\n\n\u90a3\u4e48\u5e94\u4e0d\u5e94\u8be5\u5f3a\u5236\u53ea\u80fd\u591f\u8fde\u7eed\u8d70\u5462\uff1f\n\n\u8bbe\u60f3\u5728\u4e00\u4e2a\u70b9\uff0c\u5982\u679c\u5411\u5de6\u8fde\u7eed\u7528\u4e86$V,V/2,V/4,V/8$\u7684\u6c34\uff0c\u65b9\u6848\u4f1a\u6700\u4f18\u5417\uff1f\n\n\u663e\u7136\u4e0d\u4f1a\n\n\u90a3\u4e48\u5728\u4e0a\u9762\u7684\u4f8b\u5b50\u4e2d\uff0c\u8df3\u8dc3\u4e00\u76f4\u662f\u5411\u5de6\u7684\n\n\u90a3\u6211\u4eec\u662f\u4e0d\u662f\u4e5f\u53ef\u4ee5\u5411\u5de6\uff0c\u5411\u53f3\uff0c\u5411\u5de6\uff0c\u5411\u53f3\u2026\u2026\n\n\u53ea\u8981\u6700\u7ec8\u4e0d\u91cd\u590d\u5730\u4f7f\u7528\u4e86\u82e5\u5e72\u4e2a\u8fde\u7eed\u7684$V,V/2,V/4,V/8,...$\u5373\u6ee1\u8db3\u6211\u4eec\u7684\u8981\u6c42\n\n\u53ef\u662f\u6211\u4eec\u53c8\u5982\u4f55\u77e5\u9053\u5411\u5de6\u4e0e\u5411\u53f3\u8df3\u7528\u4e86\u54ea\u4e00\u4e9bV\u5462\uff1f\n\n\u8003\u8651V\u7684\u8303\u56f4\uff0c\u80fd\u4e0d\u80fd\u591f\u628aV\u8bb0\u5f55\u4e0b\u6765\n\n\u53ef\u4ee5\uff01\uff01\uff01\n\n\u90a3\u5c31\u72b6\u538b\u6ca1\u8dd1\u4e86\n\n\u90a3\u53c8\u56de\u5230\u539f\u6765\u7684\u95ee\u9898\uff1a\u5e94\u4e0d\u5e94\u8be5\u5f3a\u5236\u53ea\u80fd\u591f\u8fde\u7eed\u8d70\u5462\uff1f\n\n\u5982\u679c\u8fde\u7eed\u8d70\uff0c\u5e76\u4e0d\u80fd\u8d70\u52301\u6216n\u53f7\u70b9\uff0c\u90a3\u8df3\u8dc3\u8d77\u6765\u8d70\uff0c\u4e5f\u4e0d\u53ef\u80fd\u8fbe\u5230\u8981\u6c42\n\n\u6240\u4ee5\u5224\u65ad\u5c31\u53d8\u6210\u4e86\u8fd9\u6837\uff1a\n\n- \u4ece\u4e00\u4e2a\u70b9\uff0c\u4f7f\u7528\u82e5\u5e72\u4e2aV\uff0c\u5411\u5de6\u4e0e\u5411\u53f3\u8fde\u7eed\u8d70\uff0c\u662f\u5426\u53ef\u4ee5\u5230\u8fbe1\u53f7\u70b9\u4e0en\u53f7\u70b9\n\n\u6362\u4e2a\u89d2\u5ea6\uff0c\u6211\u4eec\u8981\u6c42\u6bcf\u4e2a\u70b9\u52301\u4e0en\uff0c\u590d\u6742\u5ea6\u4e0d\u5c0f\n\n\u90a3\u662f\u4e0d\u662f\u53ef\u4ee5\u76f4\u63a5\u57281\u4e0en\u8ba1\u7b97\u5373\u53ef\n\n\u4e5f\u5c31\u662f\u6c42\u4ece1\u53f7\u70b9\u4e0en\u53f7\u70b9\uff0c\u5411\u5de6\u6216\u5411\u53f3\u8fde\u7eed\u8df3\uff0c\u4f7f\u7528\u82e5\u5e72\u4e2aV\uff0c\u80fd\u591f\u5230\u8fbe\u7684\u6700\u53f3\u548c\u6700\u5de6\u7684\u8ddd\u79bb\n\n\u8fd0\u7528\u4e0a\u8ff0\u601d\u8def\uff0c\u4f7f\u7528\u72b6\u538b\u662f\u4e00\u4e2a\u597d\u9009\u62e9\uff0c\u4e14\u590d\u6742\u5ea6\u4e0d\u4f1a\u8fc7\u9ad8\n\n\u90a3\u4e48\u6700\u540e\u5982\u4f55\u5229\u7528\u5df2\u77e5\u6c42\u51fa\u7b54\u6848\uff1f\n\n\u5982\u679c1\u53ef\u4ee5\u5230\u8fbei\uff0cn\u53ef\u4ee5\u5230\u8fbej\uff0c\u4e14$i>=j$\uff0c\u6211\u4eec\u662f\u4e0d\u662f\u5c31\u53ef\u4ee5\u5224\u65adj\u5230i\u8fd9\u4e2a\u533a\u95f4\u662f\u53ef\u884c\u7684\uff1f\n\n\u5982\u56fe\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/4ozjdkls.png)\n\n\u5728\u8fd9\u91cc\u7559\u4e00\u4e2a\u70b9\uff1a\u63a7\u5236V\u5728\u4e24\u4e2a\u7ebf\u6bb5\u7684\u4ea4\u96c6\u5904\u4f7f\u7528\n\n#### 1.4 \u6574\u7406\u601d\u8def\n\u6211\u4eec\u89e3\u9898\u7684\u987a\u5e8f\u662f\u4ec0\u4e48\u5462\uff1f\n\n- \u6c42\u51fa\u6240\u6709\u7684V\n\n- \u4f7f\u7528\u9012\u63a8\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u5728\u6bcf\u4e00\u4e2aV\u65f6\u6240\u80fd\u591f\u8d70\u7684\u8303\u56f4\n\n- \u4f7f\u7528\u72b6\u538b+dp\uff0c\u6c42\u51fa\u5728\u70b91\u4e0e\u70b9n\u6240\u80fd\u591f\u5411\u5de6\u4e0e\u5411\u53f3\u8d70\u6700\u8fdc\u7684\u8ddd\u79bb\n\n- \u5224\u65ad\u4ea4\u96c6\uff0c\u6c42\u51fa\u6bcf\u4e2a\u70b9\u662f\u5426\u80fd\u591f\u904d\u5386\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5f97\u5230\u7b54\u6848\n\n\u90a3\u4e48\u6c42\u89e3\u7684\u90e8\u5206\u5c31\u7ed3\u675f\u4e86\uff0c\u63a5\u4e0b\u6765\u662f\u6bcf\u4e00\u4e2a\u90e8\u5206\u7684\u4ee3\u7801\u5b9e\u73b0\u4e86\n\n## 2.\u4ee3\u7801\u7247\u6bb5\uff08\u8be6\u7ec6\u6ce8\u91ca\uff09\n#### 2.1 \u6c42\u51fa\u6240\u6709\u7684V\n```cpp\n//\u4e00\u884c\u641e\u5b9aqwq\nint V=m;while(V){V>>=1;v[cnt++]=V;}v[cnt]=m;\n//\u6ce8\u610f\u8fd9\u91cc\u8981\u4fdd\u8bc1\u6700\u540e\u4e00\u4e2aV\u662f\u6700\u5927\u7684V\uff0c\u624d\u80fd\u591f\u4e3a1.3\u7559\u4e0b\u7684\u95ee\u9898\u7684\u89e3\u51b3\u63d0\u4f9b\u6761\u4ef6\n```\n#### 2.2 \u6c42\u51fa\u6bcf\u4e2a\u70b9\u5728\u6bcf\u4e00\u4e2aV\u65f6\u6240\u80fd\u591f\u8d70\u7684\u8303\u56f4\n```cpp\n\tfor(int i=0;i<=cnt;i++)\n\t{\n\t\tl[i][1]=1;//\u5411\u5de6\uff0c\u9884\u5904\u7406\u662f\u663e\u7136\u7684\n\t\tr[i][n]=n;//\u5411\u53f3\n\t\tfor(int j=2;j<=n;j++) l[i][j]=(a[j]-a[j-1]<=v[i])?l[i][j-1]:j;//\u5982\u679c\u6211\u4eec\u80fd\u591f\u8d70\u5230\u5de6\u8fb9\u7684\u70b9\uff0c\u90a3\u5c31\u53ef\u4ee5\u8d70\u5230\u5de6\u8fb9\u7684\u70b9\u6240\u80fd\u591f\u8d70\u5230\u7684\u6700\u5de6\uff0c\u5411\u53f3\u540c\u7406\n\t\tfor(int j=n-1;j>=1;j--) r[i][j]=(a[j+1]-a[j]<=v[i])?r[i][j+1]:j;\n\t}\n```\n#### 2.3 \u6c42\u51fa\u5728\u70b91\u4e0e\u70b9n\u6240\u80fd\u591f\u5411\u5de6\u4e0e\u5411\u53f3\u8d70\u6700\u8fdc\u7684\u8ddd\u79bb\n```cpp\n\tfor(int i=0;i<(1<<cnt);i++) R[i]=n+1;//\u4e3a\u4e86\u53d6min\uff0c\u5148\u8d4b\u521d\u503c\n\tfor(int i=0;i<(1<<cnt);i++)\n\t\tfor(int j=0;j<=cnt;j++)\n\t\t\tif(((1<<j)&i)==0)//\u72b6\u538b\u5e38\u89c4\u64cd\u4f5c\n\t\t\t\tL[(1<<j)|i]=max(L[(1<<j)|i],r[j][L[i]+1]),\n\t\t\t\tR[(1<<j)|i]=min(R[(1<<j)|i],l[j][R[i]-1]);//\u7531\u4e8e\u6211\u4eec\u8981\u6c42\u8fde\u7eed\u8d70\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5728\u73b0\u5728\u7684\u6781\u9650\u5411\u5de6\u6216\u53f3\u8df3\u4e00\u6b65\uff0c\u7136\u540e\u518d\u8d70\u5373\u53ef\n```\n#### 2.4 \u5f97\u5230\u7b54\u6848\n```cpp\n\tfor(int i=1;i<=n;i++)//\u8fd9\u91cci\u662f\u8df3\u8dc3\u7684\uff0c\u6240\u4ee5\u968f\u673a\u4e0b\u662f\u8d70\u4e0d\u6ee1\u7684\n\t{\n\t\tbool flag=0;\n\t\tfor(int j=0;j<(1<<cnt);j++)\n\t\t{\n\t\t\tint ss=((1<<cnt)-1)^j;//\u6c42\u8865\u96c6\uff0c\u56e0\u4e3a\u6211\u4eec\u57281\u70b9\u7528\u7684V\u548c\u5728n\u70b9\u7528\u7684V\u4e0d\u5e94\u8be5\u91cd\u590d\uff0c\u90a3\u4e24\u4e2a\u96c6\u5408\u7684\u5e76\u96c6\u5c31\u662fV\u7684\u5168\u96c6\uff0c\u4ea4\u96c6\u4e3a\u7a7a\n            \t\t//\u6ce8\u610f\u6211\u4eec\u53ef\u80fd\u4e0d\u9700\u8981\u7528\u67d0\u4e00\u4e2aV\uff0c\u8fd9\u4e2a\u65f6\u5019\u4f60\u662f\u53ef\u4ee5\u6d6a\u8d39\u5b83\u7684\uff0c\u6bd4\u5982\u8df3\u4e24\u6b21\u7b49\n\t\t\tif(L[j]>=i-1&&R[ss]<=r[cnt][i]+1){flag=1;break;}//\u5982\u679c\u7ebf\u6bb5\u4ea4\u96c6\u6ee1\u8db3\u8981\u6c42\uff0c\u6ce8\u610f\u8fd9\u91cc\u6211\u4eec\u662f\u4fdd\u8bc1\u7b2c\u4e00\u6b65\u4eceV\u5f00\u59cb\u8df3\uff0c\u5f53\u7136\u5982\u679c\u4f60\u4e0d\u8981\u4e5f\u53ef\u4ee5\u6d6a\u8d39\u6389\uff0c\u603b\u4e4b\u4e00\u70b9V\u4e0d\u80fd\u591f\u5728\u522b\u7684\u5730\u65b9\u51fa\u73b0\n\t\t}\n\t\tfor(int j=i;j<=r[cnt][i];j++) ans[j]=flag;\n\t\ti=r[cnt][i];\n\t}\n```\n## 3.\u4ee3\u7801\u65f6\u95f4\uff08\u65e0\u6ce8\u91ca\u7248\uff09\n\u65f6\u95f4\u590d\u6742\u5ea6\u7ea6\u4e3a$O(VlogV)$\n```cpp\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nconst int N=2e5+5;\nint n,m,a[N],l[25][N],r[25][N],v[25],cnt=0,L[1<<25],R[1<<25],ans[N];\nint main()\n{\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tint V=m;\n\twhile(V){V>>=1;v[cnt++]=V;}v[cnt]=m;\n\tfor(int i=0;i<=cnt;i++)\n\t{\n\t\tl[i][1]=1;\n\t\tr[i][n]=n;\n\t\tfor(int j=2;j<=n;j++) l[i][j]=(a[j]-a[j-1]<=v[i])?l[i][j-1]:j;\n\t\tfor(int j=n-1;j>=1;j--) r[i][j]=(a[j+1]-a[j]<=v[i])?r[i][j+1]:j;\n\t}\n\tfor(int i=0;i<(1<<cnt);i++) R[i]=n+1;\n\tfor(int i=0;i<(1<<cnt);i++)\n\t\tfor(int j=0;j<=cnt;j++)\n\t\t\tif(((1<<j)&i)==0)\n\t\t\t\tL[(1<<j)|i]=max(L[(1<<j)|i],r[j][L[i]+1]),\n\t\t\t\tR[(1<<j)|i]=min(R[(1<<j)|i],l[j][R[i]-1]);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tbool flag=0;\n\t\tfor(int j=0;j<(1<<cnt);j++)\n\t\t{\n\t\t\tint ss=((1<<cnt)-1)^j;\n\t\t\tif(L[j]>=i-1&&R[ss]<=r[cnt][i]+1){flag=1;break;}\n\t\t}\n\t\tfor(int j=i;j<=r[cnt][i];j++) ans[j]=flag;\n\t\ti=r[cnt][i];\n\t}\n\tfor(int i=1;i<=n;i++) puts(ans[i]==0?\"Impossible\":\"Possible\");\n\treturn 0;\n}\n```\n**\u5b8c\u7ed3\u6492\u82b1\uff01\uff01\uff01**",
        "postTime": 1596193763,
        "uid": 144523,
        "name": "JohnJoeZhu",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT2365 \u3010[AGC012E] Camel and Oases\u3011"
    },
    {
        "content": "\u8fd9\u9898\u662f\u771f\u7684\u4ed9 \u6211\u7b2c\u4e00\u53cd\u5e94\u662f\u62c6\u70b9\u5206\u5c42\u56fe \u7136\u540e\u53d1\u73b0\u56fe\u5efa\u7acb\u4e0d\u4e0b \u7136\u540e\u53d1\u73b0\u5b83\u7684\u8054\u901a\u5206\u652f\u5f88\u6709\u6027\u8d28 \u7136\u540e\u5c31\u53ef\u4ee5\u505a\u4e86\u3002\n\n\u6211\u4eec\u89c2\u5bdf\u5230\u6700\u6734\u7d20\u7684\u505a\u6cd5\u662f\u6bcf\u4e2a\u70b9\u62c6 $\\log$ \u5c42\uff0c\u7b2c $i$ \u5c42\u7684 $p$ \u70b9\u8868\u793a\u6211\u5728 $p$ \u5904\uff0c\u7136\u540e\u5df2\u7ecf\u8df3\u8dc3\u4e86 $i$ \u4e0b\uff0c\u80fd\u4e00\u6b21\u5230\u8fbe\u8fde\u8fb9\u3002\u4f46\u662f\u8fd9\u6837\u8fb9\u6570\u5df2\u7ecf\u8d77\u98de\u4e86\uff0c\u6211\u4eec\u4e0d\u80fd\u8fd9\u4e48\u505a\u3002 \n\n\u6211\u4eec\u5148\u628a\u6bcf\u4e00\u5c42\u5355\u72ec\u8003\u8651\u5176\u8fde\u901a\u5206\u652f \u90a3\u4e48\u6bcf\u4e00\u5c42\u53ef\u4ee5\u5206\u4e3a\u82e5\u5e72\u4e2a\u533a\u95f4 \u6bcf\u4e2a\u533a\u95f4\u662f\u4e92\u76f8\u8054\u901a\u7684 \u8fd9\u4e2a\u975e\u5e38\u5bb9\u6613\u9884\u5904\u7406\u51fa\u6765 \u7136\u540e\u5c42\u4e0e\u5c42\u4e4b\u95f4\u662f\u53ef\u4ee5\u4e71\u8df3\u7684\u3002\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u5c31\u53d8\u6210\u4e86\uff1a\u6709 $k=\\log n$ \u5c42\uff0c\u6bcf\u5c42\u4f60\u5f97\u9009\u4e2a\u7ebf\u6bb5\uff0c\u7b2c\u4e00\u5c42\u56fa\u5b9a\uff0c\u8981\u6c42\u8986\u76d6\u3002\n\n\u90a3\u6211\u4eec\u8dd1\u4e2a\u72b6\u538b\u662f\u4e0d\u662f\u5c31\u5b8c\u4e86\uff0c\u7ef4\u62a4\u9009\u5c42\u72b6\u6001\u4e3a $S$ \u60c5\u51b5\u4e0b\uff0c\u7ebf\u6bb5\u5e76\u96c6\u4e3a\u524d\u7f00\u65f6\u7684\u6700\u5927\u53f3\u7aef\u70b9\u548c\u7ebf\u6bb5\u5e76\u96c6\u4e3a\u540e\u7f00\u65f6\u7684\u6700\u5c0f\u5de6\u7aef\u70b9\uff0c\u8fd9\u4e2a\u8f6c\u79fb\u663e\u7136\u53ef\u4ee5\u5728\u533a\u95f4\u4e0a\u8dd1\u4e8c\u5206\u6765\u89e3\u51b3\uff0c\u590d\u6742\u5ea6\u662f $O(2^kk\\log n)=O(n\\log^2 n)$\u3002\n\n\u6c42\u7b54\u6848\u76f4\u63a5\u679a\u4e3e\u5b50\u96c6\uff0c\u590d\u6742\u5ea6\u662f $O(2^k)=O(n)$ \u7684\u3002\n\n\u4f46\u662f\u67e5\u8be2 $n$ \u6b21\uff0c\u590d\u6742\u5ea6\u53c8\u53d8\u6210\u4e86 $O(n^2)$\uff0c\u600e\u4e48\u529e\uff1f\n\n\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5c31\u9700\u8981\u89c2\u5bdf\u6027\u8d28\u3002\u9996\u5148\uff0c\u6211\u4eec\u53d1\u73b0\u7b2c\u4e00\u5c42\u5728\u540c\u4e00\u7ebf\u6bb5\u4e0a\u7684\u70b9\u7b54\u6848\u4e00\u81f4\uff0c\u53ef\u4ee5\u7701\u53bb\uff1b\u5176\u6b21\uff0c\u6211\u4eec\u53d1\u73b0\u5bf9\u4efb\u610f\u7ebf\u6bb5\u6211\u4eec\u90fd\u53ef\u4ee5\u627e\u5230\u7b2c\u4e00\u5c42\u4e2d\u5bf9\u5e94\u7684\u7ebf\u6bb5\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5bf9\u5e94\u6210 $k$ \u4e2a\u533a\u95f4\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u7ed3\u8bba\uff1a\u7b2c\u4e00\u5c42\u5982\u679c\u533a\u95f4\u4e2a\u6570\u5927\u4e8e $k$\uff0c\u7b54\u6848\u4e00\u5b9a\u90fd\u662f Impossible\uff01\n\n\u6240\u4ee5\u6211\u4eec\u5c31\u628a\u590d\u6742\u5ea6\u4f18\u5316\u5230\u4e86 $O(nk)=O(n\\log n)$\uff0c\u540c\u65f6 dp \u590d\u6742\u5ea6\u4e5f\u53d8\u6210\u4e86 $O(n\\log n\\log\\log n)$\uff08\u56e0\u4e3a\u90a3\u4e2a\u4e8c\u5206\u5bf9\u7ebf\u6bb5\u505a\uff0c\u4e2a\u6570\u4e3a $O(\\log n)$\uff09\u3002\n\nP.S. \u9884\u5904\u7406\u4e00\u624b\u53ef\u4ee5\u628a\u6700\u540e\u8fd9\u4e2a $\\log\\log$ \u7ed9\u7701\u6389\uff0c\u4e0d\u8fc7\u6211\u61d2\u4e86\u3002\n\n\u4ee3\u7801\u4e0d\u653e\u4e86\u3002",
        "postTime": 1647879494,
        "uid": 121027,
        "name": "Spasmodic",
        "ccfLevel": 7,
        "title": "\u795e\u4ed9\u9898"
    },
    {
        "content": "\u597d\u50cf\u505a\u9ebb\u70e6\u4e86...\n\n\u9996\u5148\u6bcf\u6b21\u7684 $V$ \u90fd\u9664\u4ee5\u4e86 $2$\uff0c\u610f\u5473\u7740\u9012\u5f52\u5904\u7406\u6700\u591a\u53ea\u6709 $O(\\log v)$ \u5c42\uff0c\u5bf9\u4e8e\u6bcf\u5c42\u4e92\u8fbe\u7684\u70b9\u6211\u4eec\u53ef\u4ee5\u7f29\u5728\u4e00\u8d77\uff0c\u95ee\u9898\u53d8\u6210\uff0c\u7ed9\u5b9a $\\log v$ \u5c42\u7ebf\u6bb5\uff0c\u6bcf\u5c42\u53ef\u80fd\u6709\u591a\u4e2a\u7ebf\u6bb5\uff0c\u7136\u540e\u6bcf\u5c42\u4f60\u53ef\u4ee5\u9009\u4e00\u4e2a\uff0c\u95ee\u662f\u5426\u80fd\u591f\u94fa\u6ee1 $1,n$ \n\n\u7136\u540e\u4f60\u6392\u4e2a\u5e8f\uff0c\u72b6\u538b$dp$\u5373\u53ef\uff0c\u5c31\u662f\u4ece\u53f3\u5f80\u5de6\u8d70\uff0c\u4ee4 $f[S]$ \u8868\u793a\u4f7f\u7528\u4e86\u72b6\u6001 $S$ \u65f6\uff0c\u53f3\u7aef\u70b9\u6700\u8fdc\u53ef\u4ee5\u5ef6\u957f\u81f3\u90a3\u91cc\u3002\n\n\u7136\u540e\u7531\u4e8e\u6700\u4e0a\u9762\u90a3\u4e00\u5c42\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u8fd9\u610f\u5473\u7740\u6211\u4eec\u9700\u8981\u5f3a\u5236\u9650\u5b9a\u6700\u4e0a\u9762\u7684\u7ebf\u6bb5\u662f\u8c01\uff0c\u6211\u4eec\u989d\u5916\u8bb0\u4e00\u4e2a\u7ef4\u5ea6\u8868\u793a\u6700\u4e0a\u9762\u90a3\u4e00\u5c42\u9009\u62e9\u4e86 $j$ \u5373\u53ef\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u5e94\u4ed8\u67e5\u8be2\u4e86\u3002\n\n\u7136\u540e\u7531\u4e8e\u6700\u4e0a\u9762\u4e00\u5c42\u7684\u7ebf\u6bb5\u6570\u4e0d\u80fd\u6bd4 $O(\\log V)$ \u5927\uff0c\u5426\u5219\u80af\u5b9a\u65e0\u89e3\uff0c\u6240\u4ee5\u7279\u5224\u4e00\u4e0b\u5373\u53ef...\u4e0d\u8fc7\u6211\u7684\u590d\u6742\u5ea6\u662f$O(V\\log^2 V)$ \u7684\uff0c\u8c8c\u4f3c\u53ef\u4ee5\u901a\u8fc7\uff0c\u5927\u6982 $\\rm 500ms$ \u5de6\u53f3\u3002\n\n$Code:$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std ;\n#define rep( i, s, t ) for( register int i = s; i <= t; ++ i )\n#define re register\nint gi() {\n\tchar cc = getchar() ; int cn = 0, flus = 1 ;\n\twhile( cc < '0' || cc > '9' ) {  if( cc == '-' ) flus = - flus ; cc = getchar() ; }\n\twhile( cc >= '0' && cc <= '9' )  cn = cn * 10 + cc - '0', cc = getchar() ;\n\treturn cn * flus ;\n}\nconst int N = 2e5 + 5 ; \nconst int M = 15 + 5 ; \nint n, m, w[M], cnt, a[N], st[N], top, Go[M][N], dp[1 << M][M], W[N] ; \nsigned main()\n{\n\tn = gi(), m = gi() ; rep( i, 1, n ) a[i] = gi() ; \n\twhile( m ) w[++ cnt] = m, m = m / 2 ; \n\tw[++ cnt] = 0 ; int r = 1 ; \n\tfor( re int k = 1; k <= cnt; ++ k ) {\n\t\tr = 1 ; int befr = 0 ; \n\t\tfor( re int i = 1; i <= n; ++ i ) {\n\t\t\tr = max( r, i ) ; \n\t\t\twhile( r < n && a[r + 1] - a[max( i, r )] <= w[k] ) ++ r ;  \n\t\t\tGo[k][i] = r ;\n\t\t\tif( ( k == 1 ) && ( r != befr ) ) st[++ top] = r, W[r] = top, befr = r ;\n\t\t}\n\t}\n\tif( top > cnt ) { rep( i, 1, n ) puts(\"Impossible\") ; exit(0) ; }\n\tint maxn = ( 1 << cnt ) - 1 ; dp[0][0] = 0 ;\n\trep( i, 1, cnt ) Go[i][n + 1] = n ;\n\tfor( re int i = 0; i < maxn; ++ i ) rep( t, 0, top )\n\t\tfor( re int j = 1; j <= cnt; ++ j ) {\n\t\t\tint k = ( 1 << ( j - 1 ) ) ;\n\t\t\tif( ( i & k ) ) continue ;  \n\t\t\tif( j == 1 && t == 0 )\n\t\t\t\tdp[i ^ k][W[Go[j][dp[i][t] + 1]]] = max( dp[i ^ k][W[Go[j][dp[i][t] + 1]]], Go[j][dp[i][t] + 1] ) ;\n\t\t\telse if( j != 1 ) dp[i ^ k][t] = max( dp[i ^ k][t], Go[j][dp[i][t] + 1] ) ;\n\t\t}\n\trep( i, 1, n ) {\n\t\tif( dp[maxn][W[Go[1][i]]] >= n ) puts(\"Possible\") ;\n\t\telse puts(\"Impossible\") ;\n\t}\n\treturn 0 ;\n}\n```",
        "postTime": 1582101633,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 AT2365 \u3010[AGC012E] Camel and Oases\u3011"
    },
    {
        "content": "\u795e\u4ed9\u9898\u54c7~\n\n\u9996\u5148\u6709\u4e24\u4e2a observation\uff1a\n\n- \u81f3\u591a\u8df3\u8dc3 $\\log n$ \u6b21\u3002\n- \u4ece\u4e00\u4e2a\u70b9\u8d70\u8def\u80fd\u591f\u5230\u8fbe\u7684\u6240\u6709\u70b9\u5f62\u6210\u4e00\u4e2a\u8fde\u7eed\u533a\u95f4\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u79cd\u53ef\u80fd\u7684 $v$\uff0c\u5c06\u8fd9\u4e9b\u8fde\u7eed\u533a\u95f4\u5904\u7406\u51fa\u6765\u3002\u95ee\u9898\u53d8\u4e3a\uff1a\n\n\u73b0\u5728\u6709 $\\log n$ \u5c42\uff0c\u6bcf\u5c42\u90fd\u6709\u82e5\u5e72\u7ebf\u6bb5\uff0c\u4ece\u6bcf\u4e00\u5c42\u53d6\u51fa $\\leq 1$ \u4e2a\u7ebf\u6bb5\uff0c\u5f3a\u5236\u7b2c\u4e00\u5c42\u9009\u7684\u7ebf\u6bb5\uff0c\u95ee\u80fd\u5426\u8986\u76d6\u6240\u6709\u70b9\u3002\n\n\u73b0\u5728\u53ef\u4ee5\u72b6\u538b DP\u3002\u8bbe $f_i$ \u4ee3\u8868\u9009\u7ebf\u6bb5\u7684\u5c42\u7684\u72b6\u6001\u4e3a $i$ \u65f6\u80fd\u591f\u8986\u76d6\u7684\u6700\u957f\u524d\u7f00\u7684\u53f3\u7aef\u70b9\uff0c$g_i$ \u4ee3\u8868\u80fd\u591f\u8986\u76d6\u7684\u6700\u957f\u540e\u7f00\u7684\u5de6\u7aef\u70b9\u3002\n\n\u8f6c\u79fb $f$ \u7684\u65f6\u5019\uff0c\u52a0\u5165\u5f53\u524d\u5c42\u7684\u7ebf\u6bb5\uff0c\u7531\u4e8e\u8981\u63a5\u4e0a\u539f\u6765\u90a3\u4e2a\u524d\u7f00\uff0c\u6240\u4ee5\u9009\u5f53\u524d\u5c42\u6700\u5c0f\u7684\u4e00\u4e2a $>f_i$ \u7684\u53f3\u7aef\u70b9\u3002\n\n\u540c\u7406\uff0c\u8f6c\u79fb $g$ \u7684\u65f6\u5019\uff0c\u9009\u6700\u5927\u7684\u4e00\u4e2a $<g_i$ \u7684\u5de6\u7aef\u70b9\u3002\n\n\u8fd9\u6837\u8bbe\u5c42\u6570\u4e3a $m$\uff0c\u8fd9\u90e8\u5206 DP \u7684\u590d\u6742\u5ea6\u5c31\u662f $O(2^mm\\log n)=O(n\\log^2n)$\u3002\n\n\u6c42\u7b54\u6848\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u679a\u4e3e\u5b50\u96c6\uff0c\u770b\u80fd\u4e0d\u80fd\u63a5\u4e0a\u3002\n\n\u4f46\u662f\u8fd9\u6837\u505a\u7684\u590d\u6742\u5ea6\u662f $O(n2^m)=O(n^2)$ \u7684\uff0c\u4e0d\u80fd\u63a5\u53d7\u3002\n\n\u4e0d\u5fc5\u62c5\u5fc3\uff0c\u56e0\u4e3a\u6211\u4eec\u8fd8\u6709\u7b2c\u4e09\u4e2a observation\uff1a\n\n- \u663e\u7136\u56e0\u4e3a\u6bcf\u4e00\u5c42 $v$ \u90fd\u4f1a\u51cf\u5c0f\uff0c\u6240\u4ee5\u7ebf\u6bb5\u957f\u5ea6\u4e00\u5b9a\u4e5f\u53ea\u4f1a\u51cf\u5c0f\u3002\n- \u56e0\u6b64\uff0c\u5982\u679c\u539f\u95ee\u9898\u6709\u89e3\uff0c\u90a3\u4e48\u6240\u6709\u7ebf\u6bb5\u90fd\u5728\u7b2c\u4e00\u5c42\u9009\u4e00\u5b9a\u8fd8\u662f\u6709\u89e3\u3002\n- \u4f46\u662f\uff0c\u6211\u4eec\u6700\u591a\u53ea\u80fd\u9009 $\\log v$ \u4e2a\u7ebf\u6bb5\u3002\n- **\u6240\u4ee5\uff0c\u5982\u679c\u7b2c\u4e00\u5c42\u6709\u8d85\u8fc7 $\\log v$ \u4e2a\u7ebf\u6bb5\uff0c\u5219\u5fc5\u7136 $[1,n]$ \u4e2d\u6240\u6709\u70b9\u90fd\u65e0\u89e3\u3002**\n\n\u6240\u4ee5\u5224\u6389\u8fd9\u79cd\u60c5\u51b5\uff0c\u590d\u6742\u5ea6\u5c31\u4e0b\u964d\u5230\u4e86 $O(n\\log^2n)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nchar buf[1 << 21], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tregister char c = getchar();\n\tregister int x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = (x << 3) + (x << 1) + c - 48;\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\ninline int Abs(const int& x) {return (x > 0 ? x : -x);}\ninline int Max(const int& x, const int& y) {return (x > y ? x : y);}\ninline int Min(const int& x, const int& y) {return (x < y ? x : y);}\n\nint n, v, a[200005], dpl[1 << 20], dpr[1 << 20];\nvector <int> vl, segl[25], segr[25];\n\ninline void Read() {\n\tn = qread(); v = qread();\n\tfor (int i = 1;i <= n;i++) a[i] = qread();\n}\n\ninline void Prefix() {\n\tint tmp = v;\n\twhile (tmp) {\n\t\tfor (int i = 1;i <= n;i++) {\n\t\t\tint l = i;\n\t\t\twhile (i < n && a[i + 1] - a[i] <= tmp) i++;\n\t\t\tsegl[vl.size()].push_back(l);\n\t\t\tsegr[vl.size()].push_back(i);\n\t\t}\n\t\tvl.push_back(tmp);\n\t\ttmp >>= 1;\n\t}\n\tfor (int i = 1;i <= n;i++) {\n\t\tint l = i;\n\t\twhile (i < n && a[i + 1] - a[i] <= tmp) i++;\n\t\tsegl[vl.size()].push_back(l);\n\t\tsegr[vl.size()].push_back(i);\n\t}\n\tvl.push_back(tmp);\n\t// printf(\"%d\\n\", vl.size());\n}\n\ninline int LinkL(int lv, int len) {\n\tint idx = upper_bound(segr[lv].begin(), segr[lv].end(), len) - segr[lv].begin();\n\treturn segr[lv][idx];\n}\n\ninline int LinkR(int lv, int len) {\n\tif (len == 1) return 1;\n\tint idx = lower_bound(segl[lv].begin(), segl[lv].end(), len) - segl[lv].begin() - 1;\n\treturn segl[lv][idx];\n}\n\ninline void Solve() {\n\tif (segl[0].size() > vl.size()) {\n\t\tfor (int i = 1;i <= n;i++) puts(\"Impossible\");\n\t\treturn;\n\t}\n\tmemset(dpr, 0x3f, sizeof(dpr));\n\tfor (int i = 0;i < (1 << vl.size());i++) {\n\t\tfor (int j = 1;j < vl.size();j++) {\n\t\t\tif ((i >> j) & 1) continue;\n\t\t\tdpl[i | (1 << j)] = max(dpl[i | (1 << j)], LinkL(j, dpl[i]));\n\t\t\tdpr[i | (1 << j)] = min(dpr[i | (1 << j)], LinkR(j, dpr[i]));\n\t\t}\n\t}\n\t// for (int i = 0;i < (1 << vl.size());i++) printf(\"%d \", dpl[i]);\n\t// puts(\"\");\n\t// for (int i = 0;i < (1 << vl.size());i++) printf(\"%d \", dpr[i]);\n\t// puts(\"\");\n\tint all = (1 << vl.size()) - 1;\n\tfor (int i = 0;i < segl[0].size();i++) {\n\t\tint l = segl[0][i], r = segr[0][i];\n\t\t// printf(\"l=%d r=%d\\n\", l, r);\n\t\tbool flag = 0;\n\t\tfor (int j = 0;j < (1 << vl.size());j++) {\n\t\t\tif (dpl[j] >= dpr[all ^ j] || (dpl[j] >= l - 1 && dpr[all ^ j] <= r + 1)) {\n\t\t\t\tflag = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (l == 1 && dpr[all ^ j] <= r + 1) {flag = 1; break;}\n\t\t\tif (r == n && dpl[j] >= l - 1) {flag = 1; break;}\n\t\t}\n\t\tfor (int j = l;j <= r;j++) puts((flag ? \"Possible\" : \"Impossible\"));\n\t}\n}\n\nint main() {\n\tRead();\n\tPrefix();\n\tSolve();\n\t#ifndef ONLINE_JUDGE\n\twhile (1);\n\t#endif\n\treturn 0;\n}\n```",
        "postTime": 1607066773,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 AT2365 \u3010[AGC012E] Camel and Oases\u3011"
    }
]