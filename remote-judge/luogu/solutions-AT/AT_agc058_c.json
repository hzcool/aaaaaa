[
    {
        "content": "## \u524d\u8a00\n\n\u8d5b\u65f6\u6ca1\u505a\u51fa\u6765\uff0c\u8d5b\u540e\u628a\u9898\u8865\u4e86\u3002\u679c\u7136\u662f maroonrk \u51fa\u7684\uff0c\u540d\u4e0d\u865a\u4f20\u554a\u2026\u2026\u771f\u7684\u5f88\u597d\u7684\u4e00\u9053\u9898\u76ee\u3002\n\n## \u89e3\u6cd5\n\n\u9898\u76ee\u4e2d\u7684\u5706\u5468\u6709\u4ee5\u4e0b\u51e0\u4e2a\u6027\u8d28\uff1a\n\n- \u5706\u5468\u4e0a\u5982\u679c\u6709\u76f8\u90bb\u7684\u7b49\u503c\uff0c\u6211\u4eec\u53ef\u4ee5\u53bb\u6389\u4e00\u4e2a\u800c\u4e0d\u6539\u53d8\u7b54\u6848\uff08\u8fd9\u4e2a\u5f88\u597d\u8bc1\u660e\uff09\uff1b\n- \u5982\u679c $1$ \u548c $2$ \u76f8\u90bb\uff0c\u90a3\u4e48\u64e6\u53bb $1$ \u4e0d\u5f71\u54cd\u7b54\u6848\uff1b\u540c\u6837\u7684\u9053\u7406\uff0c\u5982\u679c $3$ \u548c $4$ \u76f8\u90bb\uff0c\u64e6\u53bb $4$ \u4e0d\u5f71\u54cd\u7b54\u6848\u3002\n\n\u6211\u4eec\u5b9a\u4e49\u201c\u89c4\u8303\u5316\u201d\u4e3a\u5c3d\u53ef\u80fd\u5730\u591a\u6267\u884c\u4ee5\u4e0a\u64cd\u4f5c\u7684\u8fc7\u7a0b\u3002\n\n\u4efb\u4f55\u6ee1\u8db3\u8981\u6c42\u7684\u6811\u4e5f\u90fd\u5177\u6709\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\u7684\u8fb9\uff1a\n\n- \u8fb9\u8fde\u63a5\u7684\u4e24\u4e2a\u70b9\u5728\u5706\u5468\u4e0a\u76f8\u90bb\uff1b\n- \u5176\u4e2d\u4e00\u4e2a\u70b9\u662f\u6811\u7684\u53f6\u5b50\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u6765\u5f62\u6210\u6ee1\u8db3\u6761\u4ef6\u7684\u6811\uff1a\n\n- \u9009\u62e9\u4e24\u4e2a\u76f8\u90bb\u4e14\u53ef\u8fde\u63a5\u7684\u70b9\u5e76\u8fde\u63a5\u5b83\u4eec\uff1b\n- \u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u53f6\u5b50\uff0c\u5c06\u5b83\u4ece\u5706\u5468\u4e0a\u64e6\u9664\u3002\n\n\u90a3\u4e48\uff0c\u8be5\u5982\u4f55\u5229\u7528\u4e0a\u8ff0\u64cd\u4f5c\u6765\u7b80\u5316\u9898\u76ee\u5462\uff1f\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u201c\u89c4\u8303\u5316\u201d\u540e\u7684\u5706\u5468\u4e0a\uff0c\u6211\u4eec\u53ea\u6709\u53ef\u80fd\u8fde\u63a5\u7f16\u53f7\u4e3a $2$ \u548c $3$ \u7684\u70b9\u3002\u5047\u8bbe\u6211\u4eec\u5c06 $2$ \u5f53\u4f5c\u90a3\u7247\u88ab\u64e6\u6389\u7684\u53f6\u5b50\uff1a\n\n- \u5982\u679c\u5706\u5468\u4e0a\u6709\u8fd9\u6837\u7684\u4e00\u6bb5\u201c\u5f27\u201d\uff1a$\\cdots,4,2,3,\\cdots$\uff0c\u64e6\u9664\u4e86 $2$ \u4e4b\u540e $3$ \u548c $4$ \u76f8\u90bb\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u201c\u89c4\u8303\u5316\u201d\u64e6\u9664\uff0c\u95f4\u63a5\u5730\u76f8\u5f53\u4e8e\u64e6\u9664\u4e86\u4e00\u5bf9 $2$ \u548c $4$\uff1b\n- \u5982\u679c\u5706\u5468\u4e0a\u6709\u8fd9\u6837\u7684\uff1a $\\cdots,3,2,3,\\cdots$\uff0c\u90a3\u4e48\u6309\u7167\u4e0a\u9762\u7684\u601d\u8def $2$ \u548c $3$ \u4e5f\u5c06\u88ab\u64e6\u9664\uff1b\n- \u2026\u2026\n\n\u8003\u8651\u4ee5\u4e0b\u4e00\u7cfb\u5217\u64cd\u4f5c\uff1a\u5728\u201c\u89c4\u8303\u5316\u201d\u72b6\u6001\u4e0b\u6267\u884c\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u7136\u540e\u518d\u6b21\u201c\u89c4\u8303\u5316\u201d\u2026\u2026\n\n\u5982\u679c\u6211\u4eec\u4e5f\u8003\u8651\u628a $3$ \u5f53\u4f5c\u53f6\u5b50\uff08\u64e6\u9664 $3$\uff09\uff0c\u8fd9\u4e00\u7cfb\u5217\u64cd\u4f5c\u6bcf\u6b21\u53ef\u4ee5\u64e6\u9664\u4e00\u5bf9 $(2,3),(1,3)$ \u6216 $(1,4)$\u3002\n\n\u5982\u679c\u53ef\u4ee5\u91cd\u590d\u4e0a\u9762\u7684\u64cd\u4f5c\uff0c\u4e14\u6700\u7ec8\u53ea\u6709 $2$ \u548c $3$ \u5728\u5706\u5468\u4e0a\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6784\u9020\u51fa\u6ee1\u8db3\u6761\u4ef6\u7684\u6811\u3002\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u53ef\u4ee5\u63a8\u51fa\u4ee5\u4e0b\u5fc5\u8981\u6761\u4ef6\uff1a\n\n- \u8bbe\u5706\u73af\u4e0a $i$ \u7684\u6570\u91cf\u4e3a $C_i$\uff0c\u5219 $C_2>C_4$ \u4e14 $C_3>C_1$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0c\u5b9e\u9645\u4e0a\u5b83\u4e5f\u662f\u5145\u5206\u6761\u4ef6\u3002\u56e0\u4e3a\u5982\u679c\u6709\u9876\u70b9 $1$ \u6216 $4$ \u5728\u5706\u4e0a\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u64e6\u9664\u4e00\u5bf9 $(1,3)$ \u6216 $(2,4)$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u5728 $O(n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5185\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n## \u5b9e\u73b0\n\n\u6ce8\u610f\u5230\uff0c\u6211\u7684\u4ee3\u7801\u4e2d\u6709\u4e00\u4e2a $f$ \u6570\u7ec4\uff0c\u5176\u4e2d $f=\\{2,2,3,3\\}$\u3002\u4f46\u662f\u56e0\u4e3a\u6211\u5728\u5b9e\u73b0\u4e2d\u4e3a\u65b9\u4fbf\u5904\u7406\uff0c\u5c06\u6240\u6709\u8f93\u5165\u7684\u6570\u51cf\u53bb\u4e86 $1$\uff0c\u6240\u4ee5\u4ee3\u7801\u4e2d $f=\\{1,1,2,2\\}$\u3002\n\n\u5b83\u7684\u4f5c\u7528\u662f\u4ec0\u4e48\u5462\uff1f\u5224\u65ad\u76f8\u90bb\u7684\u4e24\u4e2a\u70b9\u80fd\u5426\u8fdb\u884c\u89c4\u8303\u5316\u64cd\u4f5c\uff01\u6211\u4eec\u6ce8\u610f\u5230\uff0c\u5982\u679c\u4e24\u4e2a\u70b9\u7f16\u53f7\u4e3a $i,j$\uff0c$f_i=f_j$ \u7684\u5fc5\u8981\u6761\u4ef6\u4e3a $i=j$ \u6216 $|i-j|=1$\u3002\n\n\u6240\u4ee5\uff0c\u5982\u679c $f_i=f_j$\uff0c\u5047\u8bbe $f_i=i$\uff0c\u5c31\u4ee3\u8868 $i=2$ \u6216 $i=3$\uff0c\u4e0d\u7ba1 $j$ \u662f\u4ec0\u4e48\uff0c\u64e6\u6389 $j$ \u90fd\u662f\u201c\u89c4\u8303\u5316\u201d\u8fc7\u7a0b\u4e2d\u7684\u5408\u6cd5\u64cd\u4f5c\u3002\n\n\u6700\u540e\u518d\u7528 `std::map` \u6765\u7edf\u8ba1\u6bcf\u4e2a\u6570\u51fa\u73b0\u7684\u6570\u91cf\uff0c\u6bd4\u8f83\u540e\u8f93\u51fa\u5373\u53ef\u3002\n\n\u653e\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    ios::sync_with_stdio(false);\n    int t,f[4]={1,1,2,2}; cin>>t;\n    while(t--){\n        int n; cin>>n;\n        vector<int> a;\n        for(int i=0;i<n;i++){\n            int x; cin>>x;\n            if(x--;i&&f[x]==f[a.back()]){\n                if(f[x]==x)a.back()=x;\n            }\n            else a.push_back(x);\n        }\n        if(f[a[0]]==f[a.back()]){\n            if(f[a[0]]==a.back())a[0]=a.back();\n            a.pop_back();\n        }\n        map<int,int> m; for(auto &i:a)m[i]++;\n        cout<<(m[2]>m[0]&&m[1]>m[3]?\"Yes\":\"No\")<<endl;\n    }\n    return 0;\n}\n```\n\n\u7801\u5b57\u4e0d\u6613\uff0c\u5982\u679c\u4f60\u89c9\u5f97\u6211\u5199\u7684\u597d\u7684\u8bdd\uff0c\u8bf7\u7ed9\u6211\u4e00\u4e2a\u8d5e\uff0c\u8c22\u8c22\uff01",
        "postTime": 1660823522,
        "uid": 556366,
        "name": "zyc212303",
        "ccfLevel": 5,
        "title": "[AGC058C] Planar Tree \u9898\u89e3"
    },
    {
        "content": "\u6821\u5185\u8d5b\u540e\u8bb2\u9898\u5206\u5230\u8fd9\u9634\u95f4\u73a9\u610f\u4e86\u3002\u3002\u3002\n\n[$Link$](https://www.luogu.com.cn/problem/AT_agc058_c)\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u73af\uff0c\u73af\u4e0a\u6709 $n$ \u4e2a\u70b9\uff0c\u6bcf\u4e2a\u70b9\u6709\u70b9\u6743 $a_i$\uff0c\u4fdd\u8bc1 $1\\leq a_i\\leq 4$ \u4e14\u6bcf\u79cd\u6743\u503c\u90fd\u81f3\u5c11\u51fa\u73b0\u4e00\u6b21\uff0c\u82e5\u4e24\u4e2a\u70b9\u70b9\u6743\u76f8\u5dee $1$ \u5219\u53ef\u4ee5\u76f4\u63a5\u8fde\u8fb9\uff0c\u95ee\u5728\u8fb9\u4e0d\u76f8\u4ea4\u7684\u524d\u63d0\u4e0b\u662f\u5426\u5b58\u5728\u751f\u6210\u6811\u3002\n\n$T$ \u7ec4\u8be2\u95ee\u3002\n\n$1\\leq T\\leq 75000,\\sum n\\leq 3\\times 10^5$\u3002\n\n## \u9898\u76ee\u5206\u6790\n\n\u6211\u4eec\u5148\u4ece\u73af\u4e0a\u76f8\u90bb\u4e24\u9879\u5f00\u59cb\u8003\u8651\u3002\n\n\u6700\u6734\u7d20\u7684\uff0c\u5047\u8bbe\u76f8\u90bb\u4e24\u9879\u76f8\u7b49\u4f1a\u600e\u6837\uff1f\u56e0\u4e3a\u4fdd\u8bc1\u6240\u6709\u6743\u503c\u5747\u81f3\u5c11\u51fa\u73b0\u4e00\u6b21\uff0c\u6240\u4ee5\u8fd9\u4e24\u4e2a\u70b9\u4e00\u5b9a\u80fd\u901a\u8fc7\u4e00\u4e2a\u4e2d\u95f4\u70b9\u95f4\u63a5\u8fde\u8d77\u6765\u3002\n\n\u4f46\u7531\u4e8e\u4e24\u70b9\u76f8\u90bb\uff0c\u6240\u4ee5\u4e0d\u7ba1\u600e\u4e48\u8fde\u8fd9\u4e09\u4e2a\u70b9\u90fd\u4f1a\u5f62\u6210\u4e00\u4e2a\u4e09\u89d2\uff0c\u5373\u8fb9\u6ca1\u6709\u76f8\u4ea4\uff0c\u6240\u4ee5\u53ef\u4ee5\u5220\u6389\u5176\u4e2d\u4e00\u4e2a\u70b9\uff08\u6ce8\uff0c\u5220\u6389\u6307\u5728\u5f53\u524d\u5269\u4f59\u8282\u70b9\u7684\u751f\u6210\u6811\u4f5c\u4e3a\u53f6\u5b50\u8282\u70b9\uff0c\u663e\u7136\u53f6\u5b50\u8282\u70b9\u540e\u7eed\u65e0\u8d21\u732e\uff0c\u7b49\u4ef7\u4e8e\u5220\u6389\uff0c\u800c\u5220\u9664\u8fde\u9501\u7684\u7236\u5b50\u5173\u7cfb\uff0c\u53ef\u4ee5\u89c6\u4f5c\u6574\u4f53\u751f\u6210\u6811\u7684\u7236\u5b50\u5173\u7cfb\uff09\u3002\n\n\u4f46\u662f\u5220\u6389\u4f1a\u5c11\u4e00\u6761\u8fb9\uff0c\u90a3\u5982\u679c\u6709\u5176\u4ed6\u8fb9\u7ecf\u8fc7\u4e86\u8fd9\u6761\u8fb9\u600e\u4e48\u529e\u5462\uff1f\u56e0\u4e3a\u88ab\u5220\u7684\u70b9\u548c\u539f\u672c\u7684\u70b9\u76f8\u90bb\uff0c\u6240\u4ee5\u4efb\u610f\u4e00\u6761\u7ecf\u8fc7\u5176\u4e2d\u4e00\u4e2a\u8fb9\u7684\u5176\u4ed6\u8fb9\uff0c\u90fd\u4f1a\u7ecf\u8fc7\u53e6\u5916\u4e00\u6761\uff0c\u6240\u4ee5\u8fd9\u4e24\u6761\u8fb9\u4e2d\u7684\u4e00\u6761\u53ef\u4ee5\u76f4\u63a5\u5ffd\u7565\u6389\u3002\n\n\u73b0\u5728\u8003\u8651\u7b2c\u4e8c\u79cd\u60c5\u51b5\uff0c\u76f8\u90bb\u4e24\u9879\u80fd\u591f\u76f4\u63a5\u8fde\u8fb9\uff0c\u8fd9\u65f6\u5c31\u8981\u5206\u7c7b\u8ba8\u8bba\u4e86\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u7531\u4e8e $1$ \u53ea\u80fd\u76f4\u63a5\u5339\u914d $2$\uff0c\u6216\u8005\u901a\u8fc7\u4e00\u6b21\u95f4\u63a5\u5339\u914d $1$\uff0c$2$ \u80fd\u76f4\u63a5\u5339\u914d $1,3$\uff0c\u4e00\u6b21\u95f4\u63a5 $2$\uff0c\u800c\u4e14\u7531\u4e8e\u4e24\u8005\u76f8\u90bb\uff0c\u6240\u4ee5\u4e00\u6b21\u95f4\u63a5\u5339\u914d\u548c\u76f4\u63a5\u5339\u914d\u6240\u4ea4\u7684\u8fb9\u4f9d\u65e7\u7b49\u4ef7\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5c06 $1$ \u5411 $2$ \u8fde\u7136\u540e\u5220\u6389\uff0c\u56e0\u4e3a $2$ \u6240\u80fd\u5339\u914d\u7684\u8303\u56f4\u66f4\u52a0\u5e7f\u6cdb\u3002\n\n\u540c\u7406 $(3,4)$ \u53ef\u4ee5\u5220\u6389 $4$\u3002\n\n\u90a3\u4e48\u73b0\u5728\u5269\u4f59\u8282\u70b9\u53ea\u4f1a\u8fde\u63a5 $2,3$\uff0c\u82e5\u5220\u6389\u4e24\u8005\u5176\u4e2d\u4e00\u4e2a\u5f62\u6210\u4e86\u65b0\u7684\u6ee1\u8db3\u4e0a\u9762\u4e24\u79cd\u7684\u60c5\u51b5\uff0c\u5219\u63a5\u7740\u8fdb\u884c\u4e0a\u9762\u7684\u64cd\u4f5c\u5373\u53ef\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u91cd\u590d\u53bb\u505a\u4e0d\u597d\u505a\uff0c\u539f\u672c\u6211\u4eec\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u80fd\u8bb0\u5f55\u5934\u548c\u5c3e\u7684\u4fe1\u606f\u7684\u7ed3\u6784\u5373\u53ef\uff0c\u73b0\u5728\u8981\u7ef4\u62a4\u6bcf\u4e2a\u4f4d\u7f6e\uff08\u53ef\u80fd\u53ef\u4ee5\u94fe\u8868\u76f4\u63a5\u66b4\u529b\uff09\uff0c\u90a3\u6211\u4eec\u8bd5\u7740\u8003\u8651\u4f18\u5316\u8fd9\u4e00\u6b65\u3002\n\n\u8003\u8651\u6211\u4eec\u6bcf\u6b21\u8fde\u63a5 $2,3$ \u4f1a\u5220\u6389\u54ea\u4e9b\u70b9\u5bf9\u3002\n\n\u4ee4 $g(a,b,c)$ \u8868\u793a\u4e09\u4e2a\u76f8\u90bb\u9879\uff0c$b,c$ \u5206\u522b\u662f $2$ \u6216\u8005 $3$\uff0c\u5176\u5b83\u4e0d\u7b26\u5408\u6761\u4ef6\u7684\u60c5\u51b5\u53ef\u4ee5\u8c03\u8f6c\u987a\u5e8f\u53d8\u6210\u8fd9\u79cd\uff0c\u6613\u8bc1\uff08\u6307\u628a\u56fe\u753b\u51fa\u6765\uff09\u53ef\u4ee5\u5220\u9664 $(a,b)$ \u8fd9\u4e2a\u70b9\u5bf9\uff0c\u56e0\u4e3a\u76f8\u90bb\u6240\u4ee5\u4e0d\u9700\u8981\u8003\u8651\u5176\u4ed6\u8fb9\u8fde\u5bfc\u81f4\u76f8\u4ea4\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u5c06\u6240\u6709\u7684\u60c5\u51b5\u5217\u51fa\u6765\u3002\n\n$(4,2,3),(3,2,3),(1,3,2),(2,3,2)$\uff0c\u53d1\u73b0\u80fd\u591f\u5220\u9664\u7684\u70b9\u5bf9\u53ea\u6709 $(4,2),(1,3),(2,3)$\uff0c\u4e0d\u96be\u53d1\u73b0\u60f3\u8981\u5220\u6389 $1$ \u5fc5\u987b\u8981\u6709\u4e00\u4e2a $3$\uff0c\u5220\u6389 $4$ \u540c\u7406\uff0c\u6240\u4ee5\u6700\u540e\u53ea\u4f1a\u5269\u4f59\u82e5\u5e72 $2,3$\uff0c\u6211\u4eec\u53ef\u4ee5\u5220\u6389\u82e5\u5e72\u70b9\u5bf9\uff0c\u4f7f\u5f97 $2,3$ \u5176\u4e2d\u4e00\u4e2a\u53ea\u5269\u6700\u540e\u4e00\u4e2a\uff0c\u5c06\u53e6\u5916\u4e00\u4e2a\u5168\u90e8\u8fde\u8fc7\u53bb\u5373\u53ef\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u4fdd\u8bc1\u5220\u9664\u6389\u6700\u524d\u9762\u4e24\u79cd\u60c5\u51b5\u4e4b\u540e\uff0c\u6ee1\u8db3 $2$ \u6b21\u6570\u5927\u4e8e $4$\uff0c$3$ \u6b21\u6570\u5927\u4e8e $1$ \u5373\u53ef\uff0c\u6ce8\u610f\u4e0d\u80fd\u76f8\u7b49\uff0c\u8981\u7559\u7740\u6700\u540e\u5339\u914d\u5269\u4f59\u7684\u3002\n\n## Code\n\n\u6ce8\u610f\u4e00\u4e0b\u662f\u73af\uff0c\u6240\u4ee5\u6700\u540e\u8981\u5904\u7406\u5934\u5c3e\u7684\u5173\u7cfb\uff0c\u5177\u4f53\u5199\u53ef\u4ee5\u76f4\u63a5\u5206\u8ba8\uff0c\u4f46\u662f\u5f88\u4e11\u964b\uff0c\u6240\u4ee5\u9009\u62e9\u4e86\u7528\u5176\u5b83\u9898\u89e3\u7684\u5199\u6cd5\u7ef4\u62a4\u4e00\u4e2a\u6570\u7ec4 $f={2,2,3,3}$ \u65b9\u4fbf\u5206\u8ba8\u3002\n\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <cstdio>\n#include <cstring>\n#include <cmath>\n#include <queue>\nusing namespace std;\nint read(){\n\tint x=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){x=x*10+ch-'0';ch=getchar();}\n\treturn x*f;\n}\nconst int N = 3e5+5; \nint f[5] = {0,2,2,3,3};\nint cnt[5];\nint top,num[N],n,x;\nint main(){\n\tint t = read();\n\twhile(t--){\n\t\tn = read();\n\t\ttop = 0;\n\t\tnum[++top] = read();\n\t\tfor(int i=2;i<=n;i++){\n\t\t\tx = read();\n\t\t\tif(f[num[top]]!=f[x]){\n\t\t\t\tnum[++top] = x;\n\t\t\t}else if(f[x]==x){\n\t\t\t\tnum[top] = x;\n\t\t\t}\n\t\t}\n\t\tif(f[num[top]]==f[num[1]]){\n\t\t\tif(num[top]==f[num[top]]){\n\t\t\t\tnum[1] = num[top];\n\t\t\t}\n\t\t\ttop--;\n\t\t}\n\t\tcnt[1] = cnt[2] = cnt[3] = cnt[4] = 0;\n\t\tfor(int i=1;i<=top;i++){\n\t\t\tcnt[num[i]]++;\n\t\t}\n\t\tif(cnt[3]>cnt[1]&&cnt[2]>cnt[4]){\n\t\t\tcout<<\"Yes\\n\";\n\t\t}else{\n\t\t\tcout<<\"No\\n\";\n\t\t}\n\t}\n\treturn 0;\n}\n\n```\n\n\u53ef\u80fd\u6709\u54ea\u91cc\u7406\u89e3\u9519\u4e86\u6216\u8005\u8bb2\u7684\u6709\u95ee\u9898\uff0c\u6b22\u8fce\u6307\u51fa\u3002",
        "postTime": 1678067709,
        "uid": 369399,
        "name": "yizhiming",
        "ccfLevel": 0,
        "title": "\u9898\u89e3\u3010[AGC058C] Planar Tree\u3011"
    },
    {
        "content": "\u4e3a\u6bdb\u8fd9\u4e48\u96be\u7406\u89e3\u554a\uff1f\u8fd9\u5c31\u662f AGC \u5417\uff1f\n\n---\n\n\u5148\u628a\u76f8\u90bb\u7684\u540c\u8272\u5408\u5e76\uff0c\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u3002\n\n2 \u80fd\u5339\u914d 1 2 3\uff0c1 \u5374\u53ea\u80fd\u5339\u914d 1 2\uff0c\u6240\u4ee5 1 2 \u5982\u679c\u76f8\u90bb\u53ef\u4ee5\u76f4\u63a5\u628a\u5b83\u4fe9\u5408\u5e76\u6210\u4e00\u4e2a 2\uff0c\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\uff0c\u548c\u4e0a\u9762\u7c7b\u4f3c\u3002\n\n\u73b0\u5728\u73af\u4e2d\u4e00\u5b9a\u662f $\\leq 2$ \u7684\u548c $\\geq 3$ \u7684\u4ea4\u66ff\u51fa\u73b0\u3002\u5982\u679c\u53ea\u5269\u4e0b 2 \u548c 3 \u90a3\u4e48\u76f4\u63a5\u8fde\u8d77\u6765\u5c31\u597d\u4e86\u3002\u73b0\u5728\u5e76\u4e0d\u662f\u53ea\u6709 2 \u548c 3 \u7684\u8bf7\u51b5\u3002\n\n\u8de8\u8fc7\u5076\u6570\u4e2a\u70b9\u4e5f\u5c31\u662f\u76f4\u63a5\u8fde 2 3 \u53ef\u4ee5\u9e3d\u5230\u8fde\uff0c\u5bf9\u5176\u4ed6\u7684\u5e76\u6ca1\u6709\u4ec0\u4e48\u5f71\u54cd\u3002\n\n\u7136\u540e\u8003\u8651\u5982\u679c\u8de8\u8fc7\u4e86 $\\geq 3$ \u4e2a\u70b9\uff0c\u90a3\u4e48\u5b83\u5185\u90e8\u4e00\u5b9a\u9700\u8981\u6709\u4e00\u4e2a\u6070\u597d\u8de8\u8fc7\u4e00\u4e2a\u70b9\u7684\uff0c\u5426\u5219\u5b83\u5185\u90e8\u662f 2 3 2 3 \u4ea4\u66ff\u90a3\u4e48\u53ef\u4ee5\u8c03\u6574\u4f7f\u5f97\u5176\u8de8\u8fc7 $\\leq 1$ \u4e2a\u70b9\u3002\n\n\u90a3\u4e48\u73b0\u5728\u8003\u8651\u4e0d\u65ad\u5220\u6389\u8de8\u8fc7\u6070\u597d\u4e00\u4e2a\u70b9\u7684\uff0c\u90a3\u4e48\u73b0\u5728\u5c31\u53ea\u5269\u4e0b\u8fd9\u51e0\u79cd\u60c5\u51b5\uff1a\n\n`3 2 3`\uff0c\u8fde 3 3\uff0c\u8fde 2 3\uff0c\u7136\u540e\u8fd9\u4e00\u6bb5\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a 3 \u4e86\u3002\n\n`2 3 2`\uff0c\u8fde 2 2\uff0c\u8fde 3  2\uff0c\u7136\u540e\u8fd9\u4e00\u6bb5\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a 2 \u4e86\u3002\n\n`1 3 2`\uff0c\u8fde 1 2\uff0c\u8fde 3 2\uff0c\u7136\u540e\u8fd9\u4e00\u6bb5\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a 2 \u4e86\uff083 \u5df2\u7ecf\u88ab\u5835\u8d77\u6765\u4e86\uff0c\u800c  2 \u76f8\u6bd4 1 \u80fd\u591f\u8fde\u7684\u70b9\u66f4\u591a\uff09\u3002\n\n`4 2 3`\uff0c\u8fde 4 3\uff0c\u8fde 2 3\uff0c\u7136\u540e\u8fd9\u4e00\u6bb5\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a 3 \u4e86\uff08\u539f\u56e0\u540c\u7406\uff09\u3002\n\n\u8fd9\u6837\u5c31\u80fd\u53d1\u73b0\uff0c\u8981\u5e72\u788e\u4e00\u4e2a 4 \u5fc5\u987b\u8981\u5e9f\u6389\u4e00\u4e2a 2\uff0c\u8981\u5e72\u788e\u4e00\u4e2a 1 \u5fc5\u987b\u5e9f\u6389\u4e00\u4e2a 3\uff0c\u7136\u540e\u5e72\u788e 4 \u8fd8\u5fc5\u987b\u501f\u4e00\u4e2a\u4e0d\u88ab\u5e9f\u6389\u7684 3\uff0c\u5e72\u788e 1 \u4e5f\u8981\u501f\u4e00\u4e2a\u4e0d\u88ab\u5e9f\u6389\u7684 2\uff0c\u4ece\u800c\u5bfc\u51fa\u5b58\u5728\u5408\u6cd5\u65b9\u6848\u7684\u5fc5\u8981\u6761\u4ef6\uff1a\u518d\u8fdb\u884c\u540c\u8272\uff0c\u4ee5\u53ca 1 2\uff0c3 4 \u7684\u5408\u5e76\u4e4b\u540e\uff0c\u5404\u4e2a\u6570\u7684\u51fa\u73b0\u6b21\u6570 $num$ \u8981\u6ee1\u8db3 $num_2>num_4$ \u4e14 $num_3>num_1$\uff0e\n\n\u7136\u540e\u8bc1\u660e\u5b83\u7684\u5145\u5206\u6027\uff1a\n\n\u5982\u679c 1,4 \u90fd\u51fa\u73b0\uff0c\u5148\u628a\u73af\u4e2d\u7684\u6240\u6709 1 \u548c 4 \u90fd\u6807\u8bb0\u51fa\u6765\uff0c\u7136\u540e\u5c06\u88ab\u4e24\u4e2a 1 \u5939\u7740\u7684 3 \u4ee5\u53ca\u88ab\u4e24\u4e2a 4 \u5939\u7740\u7684 2 \u6807\u8bb0\u3002\u8bbe $cnt_x$ \u4e3a $x$ \u88ab\u6807\u8bb0\u7684\u6b21\u6570\uff0c\u7531\u4e8e\u6709 $cnt_3<cnt_1$\uff0c$cnt_2<cnt_4$\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709\u6ca1\u6709\u88ab\u6807\u8bb0\u7684 3\uff0c\u8003\u8651\u8fd9\u4e2a 3 \u7684\u4e24\u8fb9\u5df2\u7ecf\u4e0d\u4f1a\u51fa\u73b0 1 3 1 \u7684\u60c5\u51b5\uff08\u5426\u5219\u5b83\u5c31\u4f1a\u88ab\u6807\u8bb0\uff09\uff0c\u540c\u7406\u4e0d\u4f1a\u51fa\u73b0 4 2 4\uff0c\u6240\u4ee5\u6ca1\u6807\u8bb0\u7684 3 \u65c1\u8fb9\u81f3\u5c11\u6709\u4e00\u4e2a 2\uff0c2 \u65c1\u8fb9\u81f3\u5c11\u6709\u4e00\u4e2a 3\uff0e\u7136\u540e\u8003\u8651\u5269\u4f59\u7684\u6ca1\u88ab\u6807\u8bb0\u7684 2 3 2 3 2 3 ... \u6781\u957f\u6bb5\uff0c\u4e00\u5b9a\u5b58\u5728\u8fd9\u6837\u6bb5\uff0c\u5e76\u4e14\u957f\u5ea6\u4e00\u5b9a $\\geq 2$\uff08\u5982\u679c $=1$ \u7684\u8bdd\uff0c\u8bf4\u660e\u4e0d\u6ee1\u8db3\u4e0a\u9762\u8bf4\u7684\u65c1\u8fb9\u81f3\u5c11\u6709\u4e00\u4e2a 2/3 \u7684\u60c5\u51b5\uff09\uff0c\u800c\u8003\u8651\u8fd9\u4e2a\u6781\u957f\u6bb5\u7684\u4e00\u5934\u4e00\u5b9a\u662f 2 3 \u6216\u8005 3 2\uff0c\u5b83\u540e\u9762\u65e0\u8bba\u8ddf 1 \u8fd8\u662f 4 \u90fd\u51fa\u73b0\u4e86\u4e00\u6b21\u53ef\u4ee5\u5339\u914d\u7684\u5c0f\u533a\u95f4\u3002\n\n\u5982\u679c\u53ea\u6709 1 \u51fa\u73b0\uff0c4 \u4e0d\u51fa\u73b0\uff0c\u90a3\u4e48\u5408\u6cd5\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u6784\u9020\uff0c\u968f\u4fbf\u9009\u4e00\u4e2a 2 \u8ba9\u5b83\u548c\u6240\u6709\u7684 1 \u548c 3 \u8fde\u8d77\u6765\uff0c\u518d\u8ba9\u5176\u4f59 2 \u683c\u5b50\u548c\u81ea\u5df1\u7684\u65c1\u8fb9\u8fde\u8fb9\u3002\n\n```cpp\n#include<cstdio>\n#include<vector>\n#include<queue>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#include<ctime>\n#include<random>\n#include<assert.h>\n#define pb emplace_back\n#define mp make_pair\n#define fi first\n#define se second\n#define dbg(x) cerr<<\"In Line \"<< __LINE__<<\" the \"<<#x<<\" = \"<<x<<'\\n';\n#define dpi(x,y) cerr<<\"In Line \"<<__LINE__<<\" the \"<<#x<<\" = \"<<x<<\" ; \"<<\"the \"<<#y<<\" = \"<<y<<'\\n';\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int>pii;\ntypedef pair<ll,int>pli;\ntypedef pair<ll,ll>pll;\ntypedef pair<int,ll>pil;\ntypedef vector<int>vi;\ntypedef vector<ll>vll;\ntypedef vector<pii>vpii;\ntypedef vector<pil>vpil;\ntemplate<typename T>T cmax(T &x, T y){return x=x>y?x:y;}\ntemplate<typename T>T cmin(T &x, T y){return x=x<y?x:y;}\ntemplate<typename T>\nT &read(T &r){\n\tr=0;bool w=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')w=ch=='-'?1:0,ch=getchar();\n\twhile(ch>='0'&&ch<='9')r=r*10+(ch^48),ch=getchar();\n\treturn r=w?-r:r;\n}\ntemplate<typename T1,typename... T2>\nvoid read(T1 &x,T2& ...y){read(x);read(y...);}\nconst int mod=998244353;\ninline void cadd(int &x,int y){x=(x+y>=mod)?(x+y-mod):(x+y);}\ninline void cdel(int &x,int y){x=(x-y<0)?(x-y+mod):(x-y);}\ninline int add(int x,int y){return (x+y>=mod)?(x+y-mod):(x+y);}\ninline int del(int x,int y){return (x-y<0)?(x-y+mod):(x-y);}\nconst int N=300010;\nint n,a[N],m;\nvoid solve(){\n\tread(n);m=0;\n\tfor(int i=1;i<=n;i++){\n\t\tint x;read(x);\n\t\twhile(m){\n\t\t\tif(x==a[m])--m;\n\t\t\telse if((x==1&&a[m]==2)||(x==2&&a[m]==1)){\n\t\t\t\tx=2;\n\t\t\t\t--m;\n\t\t\t}\n\t\t\telse if((x==3&&a[m]==4)||(x==4&&a[m]==3)){\n\t\t\t\tx=3;\n\t\t\t\t--m;\n\t\t\t}\n\t\t\telse break;\n\t\t}\n\t\ta[++m]=x;\n\t}\n\tint x=a[1];\n\twhile(m>1){\n\t\tif(x==a[m])--m;\n\t\telse if((x==1&&a[m]==2)||(x==2&&a[m]==1)){\n\t\t\tx=2;\n\t\t\t--m;\n\t\t}\n\t\telse if((x==3&&a[m]==4)||(x==4&&a[m]==3)){\n\t\t\tx=3;\n\t\t\t--m;\n\t\t}\n\t\telse break;\n\t}\n\ta[1]=x;\n\tint c[5];c[1]=c[2]=c[3]=c[4]=0;\n\tfor(int i=1;i<=m;i++)c[a[i]]++;\n\tif((!c[1]&&!c[4]) || (c[2]>c[4]&&c[3]>c[1]))\n\t\tputs(\"Yes\");\n\telse\n\t\tputs(\"No\");\n}\nsigned main(){\n\t#ifdef do_while_true\n//\t\tassert(freopen(\"data.in\",\"r\",stdin));\n//\t\tassert(freopen(\"data.out\",\"w\",stdout));\n\t#endif\n\tint T;read(T);while(T--)solve();\n    #ifdef do_while_true\n\t\tcerr<<'\\n'<<\"Time:\"<<1.0*clock()/CLOCKS_PER_SEC*1000<<\" ms\"<<'\\n';\n\t#endif\n\treturn 0;\n}\n```",
        "postTime": 1667613773,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u300c\u9898\u89e3\u300dAGC058C Planar Tree"
    }
]