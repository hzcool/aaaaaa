[
    {
        "content": "\u9898\u76ee\u5927\u610f\uff1a  \n\u9ad8\u6865\u6536\u5230\u4e86\u59b9\u59b9\u4f5c\u4e3a\u751f\u65e5\u793c\u7269\u7684\u6728\u5236\u73a9\u5177\u3002\n\u6728\u5236\u73a9\u5177\u7531N\u4e2a\u7403\u548cN-1\u4e2a\u8282\u6784\u6210\u3002\u6bcf\u4e2a\u7403\u7684\u7f16\u53f7\u4e3a1\u5230N \uff0c\u5404\u8282\u7684\u7f16\u53f7\u4e3a1\u5230N-1\u3002  \nN-1\u4e2a\u8282\u8fde\u63a5\u7740\u4e0d\u540c\u76842\u4e2a\u7403\uff0c\u8fd9\u4e9b\u5168\u90e8\u4ece\u53f7\u7801\u5927\u7684\u7403\u671d\u5411\u53f7\u7801\u5c0f\u7684\u7403\u3002\u53e6\u5916\uff0c\u74031\u4ee5\u5916\u7684\u4efb\u4f55\u7403\u90fd\u6709\u4ece\u7403\u5411\u53f7\u7801\u5c0f\u7684\u5176\u4ed6\u7403\u65b9\u5411\u79fb\u52a8\u7684\u8282\u70b9\uff0c\u6bcf\u4e2a\u7403\u90fd\u6b63\u597d\u53ef\u4ee5\u5b58\u50a81\u4e2a\u6574\u6570\u3002\u6700\u521d\uff0c\u7403i (1\u2264i\u2264N)\u4e2d\u5b58\u50a8\u6574\u6570si\u3002  \n\u9ad8\u6865\u548c\u59b9\u59b9\u4e00\u8d77\u4f7f\u7528\u624b\u8fb9\u7684M\u4e2a\u6574\u6570\u73a9\u5177\u505a\u6e38\u620f\uff0c\u6e38\u620f\u7684\u76ee\u7684\u5728\u4e8e\uff0c\u6728\u5236\u73a9\u5177\u7684\u5404\u4e2a\u7403\u6240\u5b58\u50a8\u7684\u6574\u6570\u603b\u548c\u5c3d\u53ef\u80fd\u53d8\u5927\u3002  \n\u9ad8\u6865\u541b\u8fdb\u884cM\u56de\u4ee5\u4e0b\u7684\u6b65\u9aa4\u3002  \n\u53d6\u51fa1\u4e2a\u6574\u6570i(1\u2264i\u2264M)\uff0c\u53d6\u51fa\u7684\u6574\u6570\u662fti\u3002  \n\u8fdb\u884c\u4ee5\u4e0b\u4efb\u4e00\u64cd\u4f5c\u3002  \n- \u5bf9\u6728\u5236\u73a9\u5177\u4ec0\u4e48\u90fd\u4e0d\u505a\uff0c\u6254\u6389\u6574\u6570ti\u3002\n- \u4ece\u6728\u5236\u73a9\u5177\u7684\u7403\u4e2d\u9009\u62e91\uff0c\u653e\u7f6e\u6574\u6570ti\u3002  \n\n\u5f53\u6574\u6570j\u88ab\u653e\u7f6e\u65f6\uff0c\u8fdb\u884c\u4ee5\u4e0b\u52a8\u4f5c\u3002\n- j = 1\u65f6\uff0c\u74031\u820d\u5f03\u539f\u6765\u4fdd\u5b58\u7684\u6574\u6570\uff0c\u4fdd\u5b58\u74031\u6240\u653e\u7f6e\u7684\u6574\u6570\u3002\n- j\u22652\u7684\u65f6\u5019\uff0c\u7403j\u628a\u539f\u6765\u5b58\u50a8\u7684\u6574\u6570\u653e\u5230\u6210\u4e3a\u4ece\u7403j\u51fa\u53bb\u7684\u8282\u76ee\u7684\u5730\u7684\u7403\u4e0a\uff0c\u5b58\u50a8\u5728\u7403j\u4e2d\u7684\u6574\u6570\u3002\n\n\u5728\u6728\u5236\u73a9\u5177\u7684\u53d8\u5316\u505c\u6b62\u4e4b\u524d\uff0c\u9ad8\u6865\u541b\u548c\u59b9\u59b9\u4e0d\u80fd\u79fb\u52a8\u5230\u4e0b\u4e00\u6b65\u3002\n\u6c42\u51fa\u6700\u7ec8\u6728\u8d28\u73a9\u5177\u7684\u5404\u7403\u5b58\u50a8\u7684\u6574\u6570\u7684\u603b\u548c\u7684\u6700\u5927\u503c\u3002  \n\n\u5206\u6790\uff1a  \n\u8fd9\u9053\u9898\u4e00\u9053\u5178\u578bDFS&&DP\uff0cvector\u5b58\u9898\u4e2d\u6811\uff0c\u6392\u4e00\u904d\u5e8f\u7136\u540eDFS\u63a5\u7740DP\u5373\u53ef\u3002  \n\u6709\u95ee\u9898\u770b\u4ee3\u7801\u2193\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst ll INF = 1LL << 58;\nll N, S[5000], M, T[5000];\nvector<int>tree[5000];\nll dp[5001][5001],sz[5001];\nvoid dfs(int idx){\n  dp[idx][0]=0,dp[idx][1]=S[idx];sz[idx]=1;\n  for(auto &to:tree[idx]){dfs(to);\n    for(int i=sz[idx];i>0;i--) for(int j=sz[to];j>=0;j--) \n        dp[idx][i+j]=min(dp[idx][i+j],dp[idx][i]+dp[to][j]);\n    sz[idx] += sz[to];}\n  return;\n}\nint main(){\n      ll all=0;scanf(\"%lld\",&N);\n      for(int i=0;i<N;i++){scanf(\"%lld\",&S[i]);all+=S[i];}\n      for(int i=1;i<N;i++){\n            int a,b;scanf(\"%d%d\",&a,&b);\n            tree[a-1].push_back(b-1);}\n      scanf(\"%lld\",&M);for(int i=0;i<M;i++)scanf(\"%lld\",&T[i]);\n      sort(T,T+M,greater<>());\n      fill_n(*dp,5001*5001,INF);\n      dfs(0);ll ans=0,latte=0;int lim=min(N,M);\n      for(int i = 0;i<=lim;i++) {\n            ans=max(ans,all+latte-dp[0][i]);latte+=T[i];}\n      printf(\"%lld\\n\",ans);\n      return 0;\n}\n\n```\n",
        "postTime": 1552566058,
        "uid": 127191,
        "name": "Doveqise",
        "ccfLevel": 6,
        "title": "AT948 \u9ad8\u6a4b\u541b\u3068\u6728\u306e\u304a\u3082\u3061\u3083 \u9898\u89e3"
    }
]