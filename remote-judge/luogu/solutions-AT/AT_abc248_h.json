[
    {
        "content": "\u8fd9\u662f\u4e2a\u7b80\u5355\u9898\u554a\u3002\n\n\u8003\u8651\u5230 $\\max(p_l,...,p_r)-\\min(p_{l},...,p_r)-r+l\\geqslant 0$\uff0c\u6240\u4ee5\u53ea\u6709\u5f53\u8fd9\u4e2a\u503c\u4e3a $0\\sim k$ \u65f6\u624d\u6ee1\u8db3\u6761\u4ef6\uff0c\u8fd9\u53ea\u6709 $4$ \u4e2a\u503c\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\u626b\u63cf\u7ebf\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $r$\uff0c\u7ef4\u62a4\u6bcf\u4e2a\u5de6\u533a\u95f4\u7684\u8fd9\u4e2a\u503c\uff0c\u5e76\u7ef4\u62a4\u533a\u95f4\u524d $4$ \u5c0f\u503c\u548c\u51fa\u73b0\u6b21\u6570\u3002\u8003\u8651\u5355\u8c03\u6808\uff0c\u8fd9\u4e2a\u503c\u7684\u7ef4\u62a4\u5c31\u53ef\u4ee5\u8f6c\u5316\u4e3a\u82e5\u5e72\u6b21\u533a\u95f4\u52a0\u4e86\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\nconst int maxn=2e5+10;\nconst int mod=1e9+7;\n#define inf 1e9\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n\treturn x*f;\n}\n#define ll long long\nll ans;\nstruct node{\n\tint Mn[5],C[5],laz;\n\tnode(){\n\t\tMn[1]=Mn[2]=Mn[3]=Mn[4]=inf;\n\t\tlaz=C[1]=C[2]=C[3]=C[4]=0;\n\t}\n}tr[maxn<<2],ept;\nint Mn[10],C[10];\ninline node merge(node x,node y){\n\tint top=0;node z;\n\tfor(int i=1;i<=4;i++)\n\t\tMn[++top]=x.Mn[i],Mn[++top]=y.Mn[i];\n\tsort(Mn+1,Mn+1+top);\n\ttop=unique(Mn+1,Mn+1+top)-Mn-1;\n\tfor(int i=1;i<=top;i++)C[i]=0;\n\tfor(int i=1;i<=4;i++){\n\t\tC[lower_bound(Mn+1,Mn+1+top,x.Mn[i])-Mn]+=x.C[i];\n\t\tC[lower_bound(Mn+1,Mn+1+top,y.Mn[i])-Mn]+=y.C[i];\n\t}for(int i=1;i<=4;i++)z.Mn[i]=Mn[i],z.C[i]=C[i];\n\treturn z;\n}\nint n,m,k,P[maxn];\nint S1[maxn],t1,S2[maxn],t2;\ninline void pushup(int h,int z){\n\ttr[h].laz+=z;\n\tfor(int i=1;i<=4;i++)tr[h].Mn[i]+=z;\n}\ninline void pushdown(int h){\n\tif(!tr[h].laz)return;\n\tpushup(h<<1,tr[h].laz);\n\tpushup(h<<1|1,tr[h].laz);\n\ttr[h].laz=0;\n}\ninline void Modify(int h,int l,int r,int x){\n\tif(l==r){tr[h].Mn[1]=0,tr[h].C[1]=1;return;}\n\tint mid=(l+r)>>1;pushdown(h);\n\tif(mid>=x)Modify(h<<1,l,mid,x);\n\telse Modify(h<<1|1,mid+1,r,x);\n\ttr[h]=merge(tr[h<<1],tr[h<<1|1]);\n}\ninline void modify(int h,int l,int r,int x,int y,int z){\n\tif(l>y||r<x)return;\n\tif(l>=x&&r<=y)return void(pushup(h,z));\n\tint mid=(l+r)>>1;pushdown(h);\n\tmodify(h<<1,l,mid,x,y,z);\n\tmodify(h<<1|1,mid+1,r,x,y,z);\n\ttr[h]=merge(tr[h<<1],tr[h<<1|1]);\n}\ninline node query(int h,int l,int r,int x,int y){\n\tif(l>y||r<x)return ept;\n\tif(l>=x&&r<=y)return tr[h];\n\tint mid=(l+r)>>1;pushdown(h);\n\treturn merge(query(h<<1,l,mid,x,y),query(h<<1|1,mid+1,r,x,y));\n}\nint main(){\n\tn=read(),k=read();\n\tfor(int i=1;i<=n;i++)P[i]=read();\n\tfor(int i=1;i<=n;i++){\n\t\twhile(t1&&P[S1[t1]]>P[i])\n\t\t\tmodify(1,1,n,S1[t1-1]+1,S1[t1],P[S1[t1]]),--t1;\n\t\tS1[++t1]=i;modify(1,1,n,S1[t1-1]+1,i,-P[i]);\n\t\twhile(t2&&P[S2[t2]]<P[i])\n\t\t\tmodify(1,1,n,S2[t2-1]+1,S2[t2],-P[S2[t2]]),--t2;\n\t\tS2[++t2]=i;modify(1,1,n,S2[t2-1]+1,i,P[i]);\n\t\tmodify(1,1,n,1,i,-1);Modify(1,1,n,i);\n\t\tnode res=query(1,1,n,1,i);\n\t\tfor(int j=1;j<=4;j++)\n\t\t\tif(res.Mn[j]<=k)ans+=res.C[j];\n\t}printf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n\n\u6df1\u6df1\u5730\u611f\u52a8\u81ea\u5df1\u7684\u5f31\u5c0f\u3002",
        "postTime": 1677593050,
        "uid": 140876,
        "name": "syzf2222",
        "ccfLevel": 9,
        "title": "ABC248Ex Beautiful Subsequences"
    },
    {
        "content": "#  [[ABC248Ex] Beautiful Subsequences](https://www.luogu.com.cn/problem/AT_abc248_h) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.tsawke.com?t=ABC248Ex)\n\n## \u9898\u9762\n\n\u7ed9\u5b9a\u6392\u5217 $ P_n $ \u548c\u6574\u6570 $ k $\uff0c\u6c42\u6ee1\u8db3\u5982\u4e0b\u6761\u4ef6\u7684\u70b9\u5bf9 $ (l, r) $ \u6570\u91cf\u3002\n\n* $ 1 \\le l \\le r \\le n $\u3002\n* $ \\max_{i = l}^rP_i - \\min_{i = l}^rP_i \\le r - l + k $\u3002\n\n## Solution\n\n\u9996\u5148\u4e3a\u4e86\u65b9\u4fbf\u6211\u4eec\u4ee4 $ mx = \\max_{i = l}^rP_i, mn = \\min_{i = l}^rP_i $\uff0c\u539f\u5f0f\u8f6c\u5316\u4e3a $ mx - mn \\le r - l + k $\uff0c\u53d1\u73b0 $ k \\in [0, 3] $\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5c06\u4e0d\u7b49\u5f0f\u8f6c\u5316\u4e3a\u7b49\u5f0f\uff0c\u679a\u4e3e $ k $\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $ k $\uff0c\u5408\u6cd5\u65b9\u6848\u6ee1\u8db3 $ mx - mn = r - l + k $\u3002\u4e8e\u662f\u539f\u5f0f\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5bf9\u4e8e\u6bcf\u4e2a $ r \\in [1, n] $\uff0c\u6c42\u6ee1\u8db3 $ l \\in [1, r], k \\in [0, K], l + mx - mn = r + k $ \u7684\u4e2a\u6570\uff0c\u6b64\u65f6 $ l, r, k $ \u5747\u4e3a\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u6c42\u51fa\u6b64\u65f6\u7684\u533a\u95f4 $ \\max, \\min $\uff0c\u5373\u53ef\u786e\u5b9a\u662f\u5426\u5408\u6cd5\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5bf9\u4e8e\u679a\u4e3e\u7684 $ r $\uff0c\u8981\u627e\u5176\u5de6\u4fa7\u6240\u6709\u70b9\u7684 $ l + mx - mn $ \u7684\u503c\u4e0e $ r + k $ \u76f8\u7b49\u7684\u4e2a\u6570\u3002\n\n\u4e8e\u662f\u5230\u6b64\u95ee\u9898\u53ef\u8f6c\u5316\u4e3a\uff0c\u6c42\u533a\u95f4\u6700\u5927\u503c\u6700\u5c0f\u503c\uff0c\u7136\u540e\u518d\u6c42\u533a\u95f4\u7b49\u4e8e $ r $ \u7684\u6570\u91cf\u3002\u5bf9\u4e8e\u6c42\u533a\u95f4\u6700\u5927\u503c\u6700\u5c0f\u503c\uff0c\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u53d1\u73b0\u6c42\u7684\u662f\u5bf9\u4e8e\u6bcf\u4e2a $ r $ \u7684\u6240\u6709\u540e\u7f00\u6700\u5927\u6700\u5c0f\u503c\uff0c\u8fd9\u4e2a\u4e1c\u897f\u7528\u5355\u8c03\u6808\u7ef4\u62a4\u5373\u53ef\u3002\u5177\u4f53\u5730\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u7684\u503c\uff0c\u663e\u7136\u5176\u53ea\u6709\u53ef\u80fd\u66f4\u65b0\u5b83\u524d\u9762\u7684\u70b9\u7684\u6700\u503c\uff0c\u5176\u81ea\u5df1\u5728\u7b2c\u4e00\u6b21\u63d2\u5165\u7684\u65f6\u5019\u540e\u7f00\u7684\u533a\u95f4\u4e3a $ [i, i] $\uff0c\u6700\u503c\u663e\u7136\u5747\u4e3a $ a_i $\uff0c\u4f46\u662f\u8fd9\u4e2a\u65f6\u5019\u6211\u4eec\u5374\u4e0d\u9700\u8981\u66f4\u65b0\u6700\u503c\uff0c\u56e0\u4e3a\u6211\u4eec\u8981\u7684\u503c\u662f $ mx - mn $\uff0c\u65e2\u7136\u6700\u503c\u76f8\u540c\u90a3\u4e48\u8fd9\u4e2a\u4e1c\u897f\u4e3a $ 0 $\uff0c\u6240\u4ee5\u53ef\u4ee5\u5ffd\u7565\u3002\u7136\u540e\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u7684\u503c\uff0c\u8981\u53bb\u5c1d\u8bd5\u66f4\u65b0\u524d\u9762\u503c\u7684\u6700\u503c\uff0c\u5982\u5bf9\u4e8e\u6700\u5927\u503c\u9700\u8981\u7ef4\u62a4\u5355\u8c03\u9012\u51cf\u7684\u6808\uff0c\u5373\u6808\u9876\u6700\u5c0f\uff0c\u5982\u679c\u65b0\u7684\u503c\u66f4\u5c0f\u76f4\u63a5\u4e22\u5230\u6808\u4e0a\uff0c\u5426\u5219\u66f4\u65b0\u6808\u9876\u548c\u6b21\u6808\u9876\u4e4b\u95f4\u533a\u95f4\u7684\u6700\u5927\u503c\u3002\u628a\u8fd9\u4e9b\u7ef4\u62a4\u5b8c\u4e4b\u540e\u76f4\u63a5\u6c42\u6240\u6709\u503c\u4e3a $ r $ \u7684\u70b9\u5373\u53ef\u3002\n\n\u7136\u540e\u8003\u8651\u5982\u4f55\u7ef4\u62a4\u533a\u95f4\u7b49\u4e8e $ r + k $ \u7684\u4e2a\u6570\uff0c\u6709\u4e00\u4e2a\u6bd4\u8f83\u597d\u60f3\u7684\u5c31\u662f\u7ef4\u62a4\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u90fd\u7ef4\u62a4\u4e00\u4e2a `basic_string < pair < int, int > >`\uff0c\u5b58\u50a8\u5bf9\u5e94\u503c\u6709\u591a\u5c11\u4e2a\uff0c\u5408\u5e76\u7684\u65f6\u5019\u76f4\u63a5\u628a\u4e24\u4e2a\u52a0\u8d77\u6765\u5373\u53ef\uff0c\u7136\u540e\u53bb\u4e2a\u91cd\u3002\u540c\u65f6\u6b64\u65f6\u67e5\u8be2\u7684\u65f6\u5019\u53ef\u4ee5\u4e0d\u7528\u679a\u4e3e $ k $\uff0c\u76f4\u63a5\u627e $ r + k $ \u5927\u4e8e\u7b49\u4e8e\u5bf9\u5e94\u503c\u5373\u53ef\u3002\u4ee5\u6b64\u6211\u4eec\u4fbf\u53ef\u5f88\u76f4\u89c2\u5730\u5199\u51fa\u5982\u4e0b\u5b9e\u73b0\uff0c\u4f46\u662f\u8fd9\u4e2a\u662f\u9519\u8bef\u7684\u3002\n\n### Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW(arr) void* Edge::operator new(size_t){static Edge* P = arr; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\n#define MAXN (150000)\n\ntemplate< typename T = int >\ninline T read(void);\n\nint N, K;\nint val[MAXN];\n\nstruct MyPair{\n    int first, second;\n    friend const bool operator < (const MyPair &a, const MyPair &b){\n        return a.first == b.first ? a.second < b.second : a.first < b.first;\n    }\n};\n\nstruct Node{\n    basic_string < MyPair/*val, cnt*/ > vals;\n    int lz;\n    Node operator = (const Node &b){\n        this->vals = b.vals;\n        this->lz = b.lz;\n        return *this;\n    }\n    friend const Node operator + (const Node &a, const Node &b){\n        Node ret{a.vals + b.vals, 0};\n        sort(ret.vals.begin(), ret.vals.end());\n        for(auto it = ret.vals.begin(); next(it) != ret.vals.end();)\n            if(it->first == next(it)->first)next(it)->second += it->second, it = ret.vals.erase(it);\n            else advance(it, 1);\n        return ret;\n    }\n    friend Node operator += (Node &a, const int &val){\n        for(auto &nod : a.vals)nod.first += val;\n        a.lz += val;\n        return a;\n    }\n};\nclass SegTree{\nprivate:\n    Node tr[MAXN << 2];\n    #define LS (p << 1)\n    #define RS (LS | 1)\n    #define MID ((gl + gr) >> 1)\npublic:\n    void Pushup(int p){tr[p] = tr[LS] + tr[RS];}\n    void Pushdown(int p){\n        if(!tr[p].lz)return;\n        tr[LS].lz = tr[RS].lz = tr[p].lz;\n        tr[LS] += tr[p].lz, tr[RS] += tr[p].lz;\n        tr[p].lz = 0;\n    }\n    void Build(int p = 1, int gl = 1, int gr = N){\n        if(gl == gr)return tr[p].vals += {gl = gr, 1}, void();\n        Build(LS, gl, MID), Build(RS, MID + 1, gr);\n        Pushup(p);\n    }\n    void Modify(int l, int r, int val, int p = 1, int gl = 1, int gr = N){\n        if(l <= gl && gr <= r)return tr[p] += val, void();\n        Pushdown(p);\n        if(l <= MID)Modify(l, r, val, LS, gl, MID);\n        if(r >= MID + 1)Modify(l, r, val, RS, MID + 1, gr);\n        Pushup(p);\n    }\n    Node Query(int l, int r, int p = 1, int gl = 1, int gr = N){\n        if(l <= gl && gr <= r)return tr[p];\n        Pushdown(p);\n        if(l > MID)return Query(l, r, RS, MID + 1, gr);\n        if(r < MID + 1)return Query(l, r, LS, gl, MID);\n        return Query(l, r, LS, gl, MID) + Query(l, r, RS, MID + 1, gr);\n    }\n}st;\nll Cal(int R){\n    ll ret(0);\n    auto vals = st.Query(1, R).vals;\n    //r + k >= l + max - min\n    for(auto nod : vals)if(R + K >= nod.first)ret += nod.second;\n    return ret;\n}\n\nint mx[MAXN]/*Query Min*/, mn[MAXN]/*Query Max*/;\nint mxp(0), mnp(0);\n\nint main(){\n    N = read(), K = read();\n    for(int i = 1; i <= N; ++i)val[i] = read();\n    st.Build();\n    ll ans(0);\n    for(int R = 1; R <= N; ++R){\n        while(mxp && val[R] > val[mx[mxp]])st.Modify(mx[mxp - 1] + 1, mx[mxp], val[R] - val[mx[mxp]]), --mxp;\n        while(mnp && val[R] < val[mn[mnp]])st.Modify(mn[mnp - 1] + 1, mn[mnp], val[mn[mnp]] - val[R]), --mnp;\n        mx[++mxp] = mn[++mnp] = R;\n        ans += Cal(R);\n        // printf(\"R = %d, Cal = %lld\\n\", R, Cal(R));\n    }printf(\"%lld\\n\", ans);\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n\u4e0d\u8fc7\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u7b80\u5355\u5206\u6790\u4ee5\u4e0b\u590d\u6742\u5ea6\u5c31\u4f1a\u53d1\u73b0\uff0c\u6bcf\u6b21\u5408\u5e76\u548c\u4fee\u6539\u4e4b\u540e\u7684 `Pushup` \u90fd\u4f1a\u4f7f\u5176\u91cd\u6784\u7136\u540e\u8017\u8d39\u5927\u91cf\u65f6\u95f4\uff0c\u6240\u4ee5\u6700\u540e\u590d\u6742\u5ea6\u662f $ O(\\texttt{\u7384\u5b66}) $ \u7684\uff0c\u63d0\u4ea4\u540e\u5c31\u4f1a\u53d1\u73b0 AT \u4e0a\u53ea\u80fd\u8fc7\u5341\u591a\u4e2a\u70b9\u3002\u3002\u611f\u89c9\u590d\u6742\u5ea6\u76f4\u63a5\u9000\u5316\u5230\u66b4\u529b\u4e86\u3002\n\n\u7136\u540e\u5bf9\u4e8e `basic_string < pair < int, int > >` \u8fd8\u6709\u4e2a\u5f88\u4e25\u91cd\u7684\u95ee\u9898\uff0c\u5bf9\u4e8e\u4e00\u822c\u7684 C++14 \u53ca\u4ee5\u4e0b\u90fd\u4e0d\u4f1a\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u4f46\u662f\u5728 C++17 \u4e4b\u540e\uff0c\u56e0\u4e3a `basic_string.h` \u4e2d\u6709\u5982\u4e0b\u8bed\u6bb5\uff1a\n\n```cpp\n#if __cplusplus >= 201703L\n# include <string_view>\n#endif\n```\n\n\u7136\u800c\u5f15\u5165\u7684\u8fd9\u4e2a\u5934\u6587\u4ef6\u4e2d\u8fd8\u5b58\u5728\u5982\u4e0b\u8bed\u53e5\uff1a\n\n```cpp\nstatic_assert(is_trivial_v<_CharT> && is_standard_layout_v<_CharT>);\n```\n\n\u6b64\u65f6\u6211\u4eec\u53d1\u73b0\uff0c\u8fd9\u4e1c\u897f\u4f1a CE\uff01\u6d4b\u8bd5\u540e\u53d1\u73b0\u5982\u4e0b\u8bed\u6bb5\u4f1a\u8f93\u51fa $ 0 $\uff1a\n\n```cpp\ncout << is_trivial < pair< int, int > >::value << endl;\n```\n\n\u4f17\u6240\u5468\u77e5 `is_trivial` \u4e00\u822c\u5c31\u662f\u7528\u4e8e\u5224\u65ad\u7c7b\u578b\u7684\u6784\u9020\u51fd\u6570\u662f\u5426\u4e3a\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u800c `pair` \u7684\u6784\u9020\u51fd\u6570\u4f3c\u4e4e\u662f\u7528\u521d\u59cb\u5316\u5217\u8868\u5199\u7684\uff0c\u53ef\u80fd\u662f\u56e0\u4e3a\u8fd9\u4e2a\u539f\u56e0\uff0c\u5c31\u4f1a\u5bfc\u81f4\u5176\u65e0\u6cd5\u901a\u8fc7\u8fd9\u4e2a `assert`\uff0c\u4e8e\u662f\u5c31\u5bc4\u4e86\u3002\u7136\u800c AT \u4e0a\u9ed8\u8ba4\u7684\u4e0d\u77e5\u9053\u662f C++17 \u8fd8\u662f 20 \u6216\u8005\u66f4\u9ad8\uff0c\u6240\u4ee5\u65e0\u6cd5\u8fc7\u7f16\u3002\u8fd9\u4e2a\u6216\u8bb8\u53ef\u4ee5\u901a\u8fc7\u4e00\u4e9b\u9ad8\u5999\u7684\u65b9\u5f0f\u89e3\u51b3\uff0c~~\u4f46\u662f\u6211\u4e0d\u4f1a~~\uff0c\u4e8e\u662f\u8003\u8651\u81ea\u5b9a\u4e49\u4e00\u4e2a\u7ed3\u6784\u4f53\u5b9e\u73b0\u8ddf `pair` \u4e00\u6837\u4f46\u662f\u4f7f\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u5373\u53ef\u3002\n\n\u6240\u4ee5\u8bdd\u8bf4\u56de\u6765\uff0c\u8fd9\u4e2a\u505a\u6cd5\u672c\u8eab\u5c31\u662f\u9519\u8bef\u7684\uff0c\u4e8e\u662f\u73b0\u5728\u6211\u4eec\u8003\u8651\u6b63\u89e3\uff1a\n\n\u601d\u8003\u4ec0\u4e48\u4e1c\u897f\u6bd4\u8f83\u597d\u7ef4\u62a4\u533a\u95f4\u6700\u503c\u548c\u533a\u95f4\u7b49\u4e8e $ x $ \u7684\u6570\u91cf\uff0c\u4e0d\u96be\u60f3\u5230\u5206\u5757\uff0c\u7ef4\u62a4\u7684\u65b9\u5f0f\u548c\u4e0a\u9762\u8bf4\u7684\u5dee\u4e0d\u591a\uff0c\u53ea\u662f\u7528\u5206\u5757\u66ff\u6362\u7ebf\u6bb5\u6811\u5373\u53ef\uff0c\u8fd9\u4e2a\u4e1c\u897f\u7684\u590d\u6742\u5ea6\u5c31\u662f $ O(k n \\sqrt{n}) $\uff0c\u53ef\u4ee5\u901a\u8fc7\uff0c\u4f3c\u4e4e\u4e5f\u662f\u5b98\u65b9\u6b63\u89e3\uff0c\u4f46\u662f~~\u6211\u4e0d\u592a\u559c\u6b22\u5206\u5757~~\u8fd9\u4e2a\u590d\u6742\u5ea6\u4e0d\u591f\u4f18\u79c0\uff0c\u6240\u4ee5\u8fd9\u91cc\u5c31\u4e0d\u7ed9\u4ee3\u7801\u5b9e\u73b0\u4e86\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e9b\u66f4\u4f18\u79c0\u7684\u505a\u6cd5\u3002\n\n\u8003\u8651\u5206\u6cbb\uff0c\u601d\u8def\u6765\u81ea\u673a\u623f\u5927\u4f6c @sssmzy\uff0c\u53d1\u73b0\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4\uff0c\u5982\u679c\u6211\u4eec\u4ee4 $ l \\in [L, mid], r \\in [mid + 1, R] $ \u662f\u53ef\u4ee5\u5feb\u901f\u7ef4\u62a4\u7b54\u6848\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u9700\u8981\u4ee5\u6b64\u4e3a\u57fa\u7840\uff0c\u8ba1\u7b97\u5b8c\u7b54\u6848\u540e\u5206\u522b\u4e8c\u5206\u4e0b\u53bb\u5373\u53ef\u3002\n\n\u5177\u4f53\u5730\uff0c\u5bf9\u4e8e\u7ef4\u62a4\u7b54\u6848\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53d1\u73b0\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u4f4d\u7f6e\u65e0\u6cd5\u786e\u5b9a\uff0c\u6240\u4ee5\u8003\u8651\u679a\u4e3e\u6700\u5927\u503c\u5728\u5de6\u4fa7\u6216\u53f3\u4fa7\uff0c\u4ee5\u5de6\u4fa7\u4e3a\u4f8b\u5b50\uff0c\u6211\u4eec\u6309\u7167\u7c7b\u4f3c\u732b\u6811\u7684\u601d\u60f3\uff0c\u4ece $ mid $ \u5411\u4e24\u4fa7\u7ef4\u62a4\u540e/\u524d\u7f00\u6700\u503c\uff0c\u4e0d\u96be\u60f3\u5230\uff0c\u4ee5\u524d\u7f00\u6700\u5927\u503c\u4e3a\u4f8b\uff0c\u663e\u7136\u6269\u5c55\u65f6\u6700\u5927\u503c\u662f\u5355\u8c03\u4e0d\u964d\u7684\uff0c\u6700\u5c0f\u503c\u540c\u7406\uff0c\u7136\u800c\u6211\u4eec\u9700\u8981\u8ba9\u6700\u5927\u503c\u53d6\u5728\u5de6\u4fa7\uff0c\u90a3\u4e48\u663e\u7136\u5b58\u5728\u4e00\u4e2a\u5206\u5272\u70b9 $ sp1 $\uff0c\u5728\u5176\u5de6\u7684\u53f3\u4fa7\u70b9\u662f\u5408\u6cd5\u7684\uff0c\u540c\u65f6\u4e5f\u5b58\u5728\u4e00\u4e2a\u5206\u5272\u70b9 $ sp2 $\uff0c\u6ee1\u8db3\u5728\u5176\u5de6\u7684\u70b9\u6700\u5c0f\u503c\u53d6\u5de6\u4fa7\uff0c\u5176\u53f3\u7684\u53d6\u53f3\u4fa7\uff0c\u7136\u540e\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u662f\u5355\u8c03\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u53cc\uff08\u4e09\uff09\u6307\u9488\uff0c\u679a\u4e3e $ l $\uff0c\u8003\u8651 $ sp1, sp2 $\uff0c\u540c\u65f6\u7ef4\u62a4\u6876\u8bb0\u5f55\u6240\u6709\u53ef\u80fd\u7684\u5408\u6cd5\u7684\u503c\u7684\u6570\u91cf\u3002\u7136\u540e\u8ba8\u8bba $ r $ \u4f4d\u7f6e\u4e0e\u5206\u5272\u70b9\u7684\u5173\u7cfb\uff0c\u5982\u679c\u5728 $ [mid + 1, \\min(sp1, sp2)] $ \u90a3\u4e48\u663e\u7136\u6b64\u65f6\u6700\u5927\u6700\u5c0f\u503c\u90fd\u5728\u5de6\u4fa7\uff0c\u4e5f\u5c31\u662f\u6b64\u65f6\u786e\u5b9a $ k $ \u4e4b\u540e\u76f4\u63a5\u5c31\u6709 $ r = l + mx - mn - k $\uff0c\u5224\u65ad $ \\texttt{RHS} $ \u662f\u5426\u5728\u8303\u56f4\u5185\u5373\u53ef\u3002\u5426\u5219\u5728 $ (sp1, sp2] $ \u4e4b\u95f4\u7684\u8bdd\uff0c\u6700\u5927\u503c\u5728\u5de6\u4fa7\u548c $ l $ \u76f8\u5173\uff0c\u6700\u5c0f\u503c\u5728\u53f3\u4fa7\u548c $ r $ \u76f8\u5173\uff0c\u6b64\u65f6\u6709 $ r - mn = l + mx - k $\uff0c\u540c\u6837\u5c06\u5bf9\u5e94 $ \\texttt{RHS} $ \u7684\u6876\u52a0\u4e0a\u5373\u53ef\u3002\u7136\u540e\u518d\u8003\u8651 $ mx $ \u518d\u53f3\u4fa7\u540c\u7406\u7b97\u4e00\u904d\u5373\u53ef\uff0c\u6ce8\u610f\u6b64\u65f6\u56e0\u4e3a\u7d22\u5f15\u53ef\u80fd\u4e3a\u8d1f\uff0c\u6240\u4ee5\u9700\u8981\u52a0\u4e2a $ n $ \u8f6c\u6b63\u3002\n\n\u5f53\u524d\u533a\u95f4\u7b97\u5b8c\u4e4b\u540e\u4e8c\u5206\u4e0b\u53bb\u5206\u522b\u6c42\u89e3\u5373\u53ef\uff0c\u8fd9\u6837\u6700\u7ec8\u590d\u6742\u5ea6 $ O(k n \\log n) $\uff0c\u8dd1\u5f97\u98de\u5feb\u3002\n\n## Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW(arr) void* Edge::operator new(size_t){static Edge* P = arr; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\n#define MAXN (150000)\n\ntemplate < typename T = int >\ninline T read(void);\n\nint N, K;\nint a[MAXN];\nll ans(0);\nint mx[MAXN], mn[MAXN];\nint buc[MAXN << 1];\n\nvoid Divide(int gl = 1, int gr = N){\n    if(gl == gr)return ++ans, void();\n    int MID = (gl + gr) >> 1;\n    mx[MID] = mn[MID] = a[MID], mx[MID + 1] = mn[MID + 1] = a[MID + 1];\n    for(int i = MID - 1; i >= gl; --i)mx[i] = max(mx[i + 1], a[i]), mn[i] = min(mn[i + 1], a[i]);\n    for(int i = MID + 2; i <= gr; ++i)mx[i] = max(mx[i - 1], a[i]), mn[i] = min(mn[i - 1], a[i]);\n    int sp1(MID), sp2(MID);\n    for(int l = MID; l >= gl; --l){\n        while(sp1 + 1 <= gr && mx[sp1 + 1] <= mx[l])++sp1, buc[sp1 + mn[sp1]]++;\n        while(sp2 + 1 <= gr && mn[sp2 + 1] >= mn[l])++sp2, buc[sp2 + mn[sp2]]--;\n        for(int k = 0; k <= K; ++k){\n            int r = l + mx[l] - mn[l] - k;\n            int idx = l + mx[l] - k;\n            if(MID + 1 <= r && r <= min(sp1, sp2))++ans;\n            if(sp2 < sp1 && idx > 0)ans += buc[idx];\n        }\n    }for(int i = MID + 1; i <= gr; ++i)buc[i + mn[i]] = 0;\n    sp1 = MID + 1, sp2 = MID + 1;\n    for(int r = MID + 1; r <= gr; ++r){\n        while(sp1 - 1 >= gl && mx[sp1 - 1] <= mx[r])--sp1, buc[sp1 - mn[sp1] + N]++;\n        while(sp2 - 1 >= gl && mn[sp2 - 1] >= mn[r])--sp2, buc[sp2 - mn[sp2] + N]--;\n        for(int k = 0; k <= K; ++k){\n            int l = r - mx[r] + mn[r] + k;\n            int idx = r - mx[r] + k + N;\n            if(max(sp1, sp2) <= l  && l <= MID)++ans;\n            if(sp1 < sp2 && idx > 0)ans += buc[idx];\n        }\n    }for(int i = gl; i <= MID; ++i)buc[i - mn[i] + N] = 0;\n    Divide(gl, MID), Divide(MID + 1, gr);\n}\n\nint main(){\n    N = read(), K = read();\n    for(int i = 1; i <= N; ++i)a[i] = read();\n    Divide();\n    printf(\"%lld\\n\", ans);\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n## UPD\n\nupdate-2022_11_22 \u521d\u7a3f",
        "postTime": 1669098216,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "[ABC248Ex] Beautiful Subsequences \u9898\u89e3"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u4e2a $O(N\\log ^2N)$ \u7684\u505a\u6cd5\uff0c\u4e0d\u4f9d\u8d56\u4e8e $0\\le K\\le 3$ \u8fd9\u4e00\u9650\u5236\u3002\n\n\u8003\u8651\u5206\u6cbb\uff0c\u5bf9\u4e8e\u300c$[l,r]$ \u6709\u591a\u5c11\u4e2a\u5b50\u533a\u95f4\u7b26\u5408\u6761\u4ef6\u300d\u8fd9\u4e00\u95ee\u9898\uff0c\u53d6 $m=\\lfloor\\frac{l+r}{2}\\rfloor$\uff0c\u7b97\u51fa\u8de8\u8fc7 $m$ \u7684\u533a\u95f4\u4e2a\u6570\uff0c\u628a\u88ab $[l,m],[m+1,r]$ \u5305\u542b\u7684\u533a\u95f4\u770b\u6210\u5b50\u95ee\u9898\u5206\u6cbb\u4e0b\u53bb\u3002\n\n\u8bbe $a_i,b_i,c_i,d_i$ \u8868\u793a\u5de6\u53f3\u4e24\u4fa7\u8ddd\u79bb\u4e3a $i$ \u7684\u6700\u5927\u503c\u4e0e\u6700\u5c0f\u503c\uff0c\u90a3\u4e48\u6761\u4ef6\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\n$$\n\\max(a_i,c_j)-\\min(b_i,d_j)\\le i+j+K-1\n$$\n\n\u679a\u4e3e $i$\uff0c\u94a6\u5b9a $a_i\\ge c_j$ \u5373 $\\max(a_i,c_j)=a_i$\uff0c\u5206\u4e24\u79cd\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n- \u82e5 $b_i\\le d_j$\uff0c\u5219\u8981\u6c42 $a_i-b_i-i-K+1\\le j$\n- \u82e5 $b_i>d_j$\uff0c\u5219\u8981\u6c42 $a_i-i-K+1\\le j+d_j$\n\n**\u6ce8\u610f\u5230 $a,c$ \u5747\u5355\u8c03\u9012\u589e\uff0c$b,d$ \u5747\u5355\u8c03\u9012\u51cf**\uff0c\u56e0\u6b64 $a_i,b_i$ \u90a3\u4e24\u7ef4\u7684\u7ea6\u675f\u90fd\u53ef\u4ee5\u8868\u793a\u6210\u300c$j$ \u5728\u67d0\u4e2a\u533a\u95f4\u5185\u300d\u8fd9\u6837\u7684\u7ea6\u675f\u3002\u8fd9\u6837\u5c31\u53ea\u6709\u4e24\u7ef4\u6570\u70b9\u4e86\uff0c\u53ef\u4ee5\u505a\u5230 $O(N\\log N)$\u3002\u603b\u590d\u6742\u5ea6 $O(N\\log ^2N)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\n#define int long long\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\tfor(;(c<'0'||c>'9');c=getchar()){if(c=='-')f=-1;}\n\tfor(;(c>='0'&&c<='9');c=getchar())x=x*10+(c&15);\n\treturn x*f;\n}\n\nconst int mod=1e9+7;\nint ksm(int x,int y,int p=mod){\n\tint ans=1;\n\tfor(int i=y;i;i>>=1,x=1ll*x*x%p)if(i&1)ans=1ll*ans*x%p;\n\treturn ans%p;\n}\nint inv(int x,int p=mod){return ksm(x,p-2,p)%p;}\nint randint(int l,int r){return rand()*rand()%(r-l+1)+l;}\n\nconst int N=2e5+5;\n\nint n,K,p[N];\nvector<int>A,B,C,D;\nvector<vector<int> >Add,Del;\n\nstruct BIT{\n\tint c[N];\n\tint lowbit(int x){return x&(-x);}\n\tvoid add(int x,int k){for(int i=x;i<=n;i+=lowbit(i))c[i]+=k;}\n\tint sum(int x,int res=0){for(int i=x;i;i-=lowbit(i))res+=c[i];return res;}\n}T;\n\n#define ll long long\n\nstruct Lsh{\n\tvector<int>lsh;\n\tvoid clr(){lsh.clear();}\n\tvoid ins(int x){lsh.emplace_back(x);}\n\tvoid work(){\n\t\tsort(lsh.begin(),lsh.end());\n\t\tlsh.resize(unique(lsh.begin(),lsh.end())-lsh.begin());\n\t}\n\tint getv(int x){\n\t\treturn lower_bound(lsh.begin(),lsh.end(),x)-lsh.begin()+1;\n\t}\n}Yoimiya;\n\nll calc(){\n\tAdd.clear(),Del.clear(),Yoimiya.clr();\n\tAdd.resize(C.size()),Del.resize(D.size());\n\t\n\tll res=0;\n\tint L=A.size()-1,R=C.size()-1;\n\tfor(int i=1;i<=L;i++){\n\t\tint p=upper_bound(C.begin(),C.end(),A[i])-C.begin()-1;\n\t\tint q=0,nl=1,nr=R;\n\t\twhile(nl<=nr){\n\t\t\tint mid=(nl+nr)>>1;\n\t\t\tif(D[mid]>=B[i])q=mid,nl=mid+1;\n\t\t\telse nr=mid-1;\n\t\t}\n\t\t\n\t\tres+=max(0ll,min(p,q)-max(A[i]-B[i]-i-K+1,1ll)+1),q++;\n\t\tif(q<=p){\n\t\t\tint val=-(A[i]-i-K+1);\n\t\t\tYoimiya.ins(val);\n\t\t\tDel[q-1].emplace_back(val),Add[p].emplace_back(val);\n\t\t}\n\t}\n\tfor(int i=1;i<=R;i++)Yoimiya.ins(-(i+D[i]));\n\tYoimiya.work();\n\tfor(int i=1;i<=R;i++){\n\t\tint w=Yoimiya.getv(-(i+D[i]));T.add(w,1);\n\t\tfor(int x:Add[i])res+=T.sum(Yoimiya.getv(x));\n\t\tfor(int x:Del[i])res-=T.sum(Yoimiya.getv(x));\n\t}\n\tfor(int i=1;i<=R;i++)T.add(Yoimiya.getv(-(i+D[i])),-1);\n\t\n\treturn res;\n}\n\nll ans=0;\nvoid solve(int l,int r){\n\tif(l==r){ans++;return ;}\n\tint mid=(l+r)>>1;\n\tA.resize(mid-l+2),B.resize(mid-l+2),C.resize(r-mid+1),D.resize(r-mid+1);\n\tA[0]=C[0]=0,B[0]=D[0]=n+1;\n\tfor(int i=mid,mx=0,mn=n+1;i>=l;i--)mx=max(mx,p[i]),mn=min(mn,p[i]),A[mid-i+1]=mx,B[mid-i+1]=mn;\n\tfor(int i=mid+1,mx=0,mn=n+1;i<=r;i++)mx=max(mx,p[i]),mn=min(mn,p[i]),C[i-mid]=mx,D[i-mid]=mn;\n\tans+=calc(),swap(A,C),swap(B,D),ans+=calc();\n\tsolve(l,mid),solve(mid+1,r);\n}\n\nsigned main(void){\n\n#ifdef YUNQIAN\n\tfreopen(\"in.in\",\"r\",stdin);\n#endif\n\n\tn=read(),K=read();\n\tfor(int i=1;i<=n;i++)p[i]=read();\n\tsolve(1,n);\n\tcout<<ans<<endl;\n\n\treturn 0;\n}\n```",
        "postTime": 1683193153,
        "uid": 307453,
        "name": "\u4e91\u6d45\u77e5\u5904",
        "ccfLevel": 6,
        "title": "Beautiful Subsequences"
    },
    {
        "content": "![](https://cdn.luogu.com.cn/upload/image_hosting/rft7d5d2.png)\n\n\u7136\u800c\u8fd9\u4e2a\u7ecf\u5178\u505a\u6cd5\u662f\u5206\u6cbb\uff0c\u6211\u4e0d\u592a\u4f1a\u505a\uff0c\u4f46\u8fd9\u786e\u5b9e\u662f\u4e00\u9053\u7ecf\u5178\u9898\u3002\n\n\u8003\u8651\u626b\u63cf\u7ebf\uff0c\u5bf9\u4ece\u5de6\u5230\u53f3\u6bcf\u4e2a\u70b9 $r$\uff0c\u7edf\u8ba1\u4ee5 $r$ \u4f5c\u4e3a\u53f3\u7aef\u70b9\u7684\u533a\u95f4\u4e2a\u6570\u3002\n\n\u7531\u4e8e $r$ \u7aef\u70b9\u56fa\u5b9a\uff0c$S(l)=\\max\\limits_{i=l}^r{P_i}-\\min\\limits_{i=l}^r{P_i}-r+l\\ge 0$\uff0c\u6240\u4ee5\u53ea\u9700\u8981\u7edf\u8ba1 $S(l)$ \u5728 $[0,k]$ \u533a\u95f4\u5904\u7684 $l$ \u7684\u4e2a\u6570\uff0c\u4e8e\u662f\u53ea\u9700\u8981\u7ef4\u62a4\u524d $k+1$ \u5c0f\u503c\u5373\u53ef\u3002\u7531\u4e8e $k$ \u6bd4\u8f83\u5c0f\uff0c\u53ef\u4ee5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u524d $k+1$ \u5c0f\u503c\u3002\n\n\u8003\u8651\u79fb\u52a8\u7aef\u70b9 $r$ \u5bf9 $S(l)$ \u7684\u8d21\u732e\uff0c\u8fd9\u662f\u4e2a\u7ecf\u5178\u95ee\u9898\uff0c\u53ef\u4ee5\u7528\u4e24\u4e2a\u5206\u522b\u7ef4\u62a4\u4e86\u6700\u5927\u503c\u548c\u6700\u5c0f\u503c\u7684\u5355\u8c03\u6808\u505a\u3002\u6bcf\u6b21\u7684\u8d21\u732e\u5c31\u62c6\u6210\u82e5\u5e72\u6bb5\u533a\u95f4\uff0c\u8fdb\u884c\u533a\u95f4\u4fee\u6539\u5373\u53ef\u3002\n\n\u590d\u6742\u5ea6 $O(nk\\log k\\log n)$\uff0c\u7cbe\u7ec6\u5b9e\u73b0\u53ef\u4ee5 $O(nk\\log n)$\u3002",
        "postTime": 1679922299,
        "uid": 306573,
        "name": "Ender32k",
        "ccfLevel": 0,
        "title": "ABC248Ex Beautiful Subsequences"
    }
]