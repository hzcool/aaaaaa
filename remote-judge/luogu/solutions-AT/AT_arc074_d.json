[
    {
        "content": "\u9898\u76ee\u8981\u6c42\u6700\u5c11\u9700\u8981\u5c06\u591a\u5c11\u4e2a ```o``` \u6539\u6210 ```.``` \uff0c\u53ef\u4ee5\u4f7f\u8fd9\u4e2a\u4eba\u65e0\u6cd5\u4ece ```S``` \u5230\u8fbe ```T``` \u3002\u5f88\u5bb9\u6613\u60f3\u5230\u6700\u5c0f\u5272\u3002\n\n\u7531\u6700\u5c0f\u5272\u7b49\u4e8e\u6700\u5927\u6d41\u53ef\u4ee5\u60f3\u5230\u4e00\u4e2a\u7279\u522b naive \u7684\u60f3\u6cd5\uff1a```S``` \u53ea\u8fde\u51fa\u8fb9\uff0c```T``` \u53ea\u8fde\u5165\u8fb9\uff0c\u5176\u5b83\u70b9\u5411\u5176\u80fd\u5230\u8fbe\u7684\u70b9\u8fde\u8fb9\uff0c\u7136\u540e\u8dd1\u7f51\u7edc\u6d41\u3002\n\n\u56e0\u4e3a\u70b9\u4e0e\u70b9\u4e4b\u95f4\u8fde\u7684\u8fb9\u53ea\u662f\u4e3a\u4e86\u8fde\u901a\u4e24\u4e2a\u70b9\uff0c\u6240\u4ee5\u8fb9\u6743\u662f $+\\infty$ \u3002\u6bd4\u8f83\u56f0\u96be\u7684\u662f\u5982\u4f55\u901a\u8fc7\u8fb9\u6743\u7684\u9650\u5236\u5b9e\u73b0\u6bcf\u4e2a\u70b9\u53ea\u5272\u4e00\u6b21\u3002\n\n\u5bf9\u4e8e\u8fd9\u79cd\u9650\u5236\u70b9\u6743\u7684\u7f51\u7edc\u6d41\uff0c\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u662f\u628a\u4e00\u4e2a\u70b9\u62c6\u6210\u4e00\u4e2a\u5165\u70b9\u548c\u4e00\u4e2a\u51fa\u70b9\uff0c\u5e76\u4e14\u5728\u5165\u70b9\u548c\u51fa\u70b9\u4e4b\u95f4\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a\u70b9\u6743\u7684\u8fb9\u3002\u6240\u6709\u4ee5\u8be5\u70b9\u4e3a\u7ec8\u70b9\u7684\u8fb9\u5168\u90e8\u8fde\u5230\u5b83\u7684\u5165\u70b9\uff0c\u53cd\u4e4b\u5219\u8fde\u5230\u5b83\u7684\u51fa\u70b9\u3002\n\n\u8fd9\u6837\u8fde\u597d\u540e\u5c31\u53ef\u4ee5\u8dd1\u7f51\u7edc\u6d41\u4e86\uff0c\u4f46\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\uff0c\u5176\u5728\u6bcf\u4e00\u884c\u5185\u6700\u591a\u6709 $n$ \u4e2a\u53ef\u5230\u8fbe\u70b9\uff0c\u5217\u4e5f\u662f\u5982\u6b64\uff0c\u4e00\u5171\u6709 $n^2$ \u4e2a\u70b9\uff0c\u6700\u591a\u6709 $n^3$ \u6761\u8fb9\uff0c\u611f\u89c9 $10^6$ \u4e0d\u592a\u53ef\u8fc7\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u5bf9\u4e8e\u540c\u4e00\u884c\u6216\u8005\u540c\u4e00\u5217\u7684\u70b9\uff0c\u90fd\u662f\u4e92\u76f8\u53ef\u8fbe\uff0c\u90a3\u4e48\u5176\u5b9e\u4e0d\u9700\u8981\u4e24\u4e24\u8fde\u8fb9\uff0c\u53ea\u9700\u8981\u5bf9\u4e8e\u6bcf\u884c\u548c\u5217\u5efa\u4e00\u4e2a\u8f85\u52a9\u8282\u70b9\u4f5c\u4e3a\u4e2d\u8f6c\uff0c\u5373\u53ef\u628a\u8fb9\u6570\u964d\u5230 $n^2$ \u7ea7\u522b\u3002\n\n\u6700\u540e\u7684\u6700\u5927\u6d41\u5c31\u662f\u6240\u6c42\u7b54\u6848\uff0c\u81f3\u4e8e\u5224\u65ad\u53ef\u884c\u6027\uff0c\u53ef\u4ee5\u4e00\u5f00\u59cb\u5c31\u770b ```S``` \u548c ```T``` \u5728\u4e0d\u5728\u540c\u4e00\u884c\u6216\u540c\u4e00\u5217\u5185\uff0c\u4e5f\u53ef\u4ee5\u770b\u8dd1\u5b8c\u7f51\u7edc\u6d41\u540e\u662f\u4e0d\u662f\u5272\u4e86 $+\\infty$ \u8fb9\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <bits/stdc++.h>\n#define RI register int\ntypedef long long LL;\n\n#define FILEIO(name) freopen(name\".in\", \"r\", stdin), freopen(name\".out\", \"w\", stdout);\n\nusing namespace std;\n\nchar buf[1000000], *p1 = buf, *p2 = buf;\ninline char gc() {\n  if (p1 == p2) p2 = (p1 = buf) + fread(buf, 1, 1000000, stdin);\n  return p1 == p2 ? EOF : *(p1++);\n}\ntemplate <class T> inline void read(T &n) {\n  n = 0; RI ch = gc(), f;\n  while ((ch < '0' || ch > '9') && ch != '-') ch = gc();\n  f = (ch == '-' ? ch = gc(), -1 : 1);\n  while (ch >= '0' && ch <= '9') n = n * 10 + (ch ^ 48), ch = gc();\n  n *= f;\n}\n\nint const MAXN = 105, INF = 0x7f7f7f7f;\nstruct Edges { int to, next, dis; } e[MAXN * MAXN * MAXN];\nint head[MAXN * MAXN * MAXN], tot = 1;\nint In[MAXN][MAXN], Out[MAXN][MAXN], cnt, S, T, Row[MAXN], Line[MAXN];\nint dep[MAXN * MAXN * MAXN], cur[MAXN * MAXN * MAXN];\nchar s[MAXN][MAXN];\nqueue <int> q;\n\ninline void addedge(int from, int to, int dis) {\n  e[++tot] = (Edges){to, head[from], dis};\n  head[from] = tot;\n  e[++tot] = (Edges){from, head[to], 0};\n  head[to] = tot;\n}\n\nbool Bfs() {\n  memset(dep, 0, sizeof(dep));\n  dep[S] = 1;\n  q.push(S);\n  while (!q.empty()) {\n    int t = q.front(); q.pop();\n    for (RI i = head[t]; i; i = e[i].next)\n      if (!dep[e[i].to] && e[i].dis)\n        dep[e[i].to] = dep[t] + 1, q.push(e[i].to);\n  }\n  if (!dep[T]) return 0;\n  for (RI i = 1; i <= cnt; ++i) cur[i] = head[i];\n  return 1;\n}\n\nint Dfs(int now, int res) {\n  if (now == T || !res) return res;\n  int sum = 0;\n  for (RI i = cur[now]; i; i = e[i].next) {\n    cur[now] = i;\n    if (dep[e[i].to] == dep[now] + 1) {\n      int d = Dfs(e[i].to, min(res, e[i].dis));\n      if (d) {\n        sum += d;\n        res -= d;\n        e[i].dis -= d;\n        e[i ^ 1].dis += d;\n      }\n    }\n  }\n  return sum;\n}\n\nint Dinic() {\n  int Maxflow = 0;\n  while (Bfs())\n    Maxflow += Dfs(S, INF);\n  return Maxflow;\n}\n\nint main() {\n  \n#ifdef LOCAL\n  FILEIO(\"a\");\n#endif\n\n  int n, m; scanf(\"%d %d\", &n, &m);\n  for (RI i = 1; i <= n; ++i)\n    scanf(\"%s\", s[i] + 1);\n  for (RI i = 1; i <= n; ++i) Row[i] = ++cnt;\n  for (RI i = 1; i <= m; ++i) Line[i] = ++cnt;\n  for (RI i = 1; i <= n; ++i)\n    for (RI j = 1; j <= m; ++j) {\n      if (s[i][j] == 'o') {\n        In[i][j] = ++cnt, Out[i][j] = ++cnt;\n        addedge(Out[i][j], Row[i], INF);\n        addedge(Out[i][j], Line[j], INF);\n        addedge(Row[i], In[i][j], INF);\n        addedge(Line[j], In[i][j], INF);\n        addedge(In[i][j], Out[i][j], 1);\n      }\n      if (s[i][j] == 'S') {\n        S = ++cnt;\n        addedge(S, Row[i], INF);\n        addedge(S, Line[j], INF);  \n      }\n      if (s[i][j] == 'T') {\n        T = ++cnt;\n        addedge(Row[i], T, INF);\n        addedge(Line[j], T, INF);\n      }\n    }\n  int Maxflow = Dinic();\n  if (Maxflow > n * m) puts(\"-1\");\n  else printf(\"%d\\n\", Maxflow);\n\n  return 0;\n}\n\n// created by Daniel yuan\n\n```",
        "postTime": 1577968796,
        "uid": 71955,
        "name": "Daniel_yuan",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT2568 \u3010Lotus Leaves\u3011"
    },
    {
        "content": "## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u51fa\u4e00\u4e2a $n \\times m$ \u7684\u6c60\u5858\uff0c\u4e0a\u9762\u6709\u4e00\u4e9b\u8377\u53f6\uff0c\u6709\u4e00\u4e2a\u9752\u86d9\u4ece $'S'$ \u8377\u53f6\u51fa\u53d1\uff0c\u6bcf\u6b21\u53ea\u80fd\u8df3\u5230\u540c\u884c\u540c\u5217\u7684\u8377\u53f6\uff0c\u73b0\u5728\u4f60\u53ef\u4ee5\u79fb\u9664\u4e00\u4e9b\u8377\u53f6\uff0c\u6c42\u6700\u5c11\u8981\u79fb\u9664\u591a\u5c11\u8377\u53f6\u53ef\u4ee5\u662f\u9752\u86d9\u65e0\u6cd5\u5230\u8fbe $'T'$ \u8377\u53f6\u3002\n\n$1\\leq n,m \\leq 100$\n\n## \u89e3\u6cd5\n\u7ed3\u5408\u6570\u636e\u8303\u56f4\uff0c\u4e0d\u96be\u60f3\u5230\u53ef\u4ee5\u4f7f\u7528\u6700\u5c0f\u5272\u3002\n\n\u95ee\u9898\u5728\u4e8e\u5982\u4f55\u5efa\u56fe\uff0c\u6734\u7d20\u7684\u60f3\u6cd5\u662f\u628a\u4e00\u4e2a\u8377\u53f6\u62c6\u6210\u4e24\u4e2a\u70b9\uff0c\u8fde\u4e00\u6761\u6743\u503c\u4e3a1\u7684\u8fb9\uff0c\u82e5\u4e24\u4e2a\u8377\u53f6\u5728\u540c\u4e00\u884c\u6216\u540c\u4e00\u5217\uff0c\u5c31\u8fde\u4e00\u6761\u6743\u503c\u4e3a $inf$ \u7684\u8fb9\uff0c\u4f46\u8fd9\u6837\u8fb9\u6570\u6700\u591a\u4f1a\u5361\u5230 $O(n^3)$ \u7ea7\u522b\uff0c\u65e0\u6cd5\u901a\u8fc7\u672c\u9898\u3002\n\n\u8003\u8651\u7f51\u683c\u56fe\u4e2d\u7f51\u7edc\u6d41\u5efa\u6a21\u7684\u4e00\u4e2a\u7ecf\u5178\u7684trick\uff0c\u5c31\u662f\u628a\u7f51\u683c\u56fe\u5f53\u6210\u4e8c\u5206\u56fe\uff0c\u5de6\u8fb9\u6709 $n$ \u4e2a\u8282\u70b9\uff0c\u4ee3\u8868\u6bcf\u4e00\u884c\uff0c\u53f3\u8fb9\u6709 $m$ \u4e2a\u8282\u70b9\uff0c\u4ee3\u8868\u6bcf\u4e00\u5217\u3002\n\n1. \u5982\u679c $(i,j)$ \u662f\u8377\u53f6\uff0c\u5c31\u628a $L_i$ \u5230 $R_j$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a1\u7684\u8fb9( $L_i$ \u4e3a\u4e8c\u5206\u56fe\u5de6\u8fb9\u7684\u7b2c $i$ \u4e2a\u8282\u70b9\uff0c$R_j$ \u4e3a\u4e8c\u5206\u56fe\u53f3\u8fb9\u7684\u7b2c $j$ \u4e2a\u8282\u70b9)\uff0c\u4ee3\u8868\u7740\u7b2c $i$ \u884c\u53ef\u4ee5\u901a\u8fc7\u6b64\u8377\u53f6\u5230\u8fbe\u7b2c $j$ \u5217\u3002\n\n2. \u5982\u679c $(i,j)$ \u662f $'S'$\uff0c$S$ \u5411 $L_i$ \u548c $R_j$ \u5206\u522b\u8fde\u4e00\u6761 $inf$ \u7684\u8fb9\u3002\n\n3. \u5982\u679c $(i,j)$ \u662f $'T'$\uff0c$L_i$ \u548c $R_j$ \u5206\u522b\u5411 $T$ \u8fde\u4e00\u6761 $inf$ \u7684\u8fb9\u3002\n\n\u7136\u540e\u8dd1\u6700\u5c0f\u5272\u5c31\u884c\u4e86\u3002\n\n## \u4ee3\u7801\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream> \nusing namespace std;\nconst int N=205,inf=N*N;\nint n,m,h[N],tot=1,S,T;\nchar ch[N][N];\nstruct edge{\n\tint v,w,nxt;\n}e[N*N];\nvoid add(int u,int v,int w){\n\te[++tot]=(edge){v,w,h[u]};\n\th[u]=tot;\n}\nint lev[N],q[N],l,r;\nbool bfs(){\n\tmemset(lev,-1,sizeof(lev));l=1;r=0;\n\tlev[S]=0;q[++r]=S;\n\twhile(l<=r){\n\t\tint u=q[l++];\n\t\tfor(int i=h[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].v;\n\t\t\tif(lev[v]==-1&&e[i].w){\n\t\t\t\tlev[v]=lev[u]+1;\n\t\t\t\tq[++r]=v;\n\t\t\t}\n\t\t}\n\t}\n\treturn lev[T]!=-1;\n} \nint dfs(int u,int upf){\n\tif(u==T)return upf;\n\tint rst=upf;\n\tfor(int i=h[u];i;i=e[i].nxt){\n\t\tint v=e[i].v,w=e[i].w;\n\t\tif(lev[v]==lev[u]+1&&w){\n\t\t\tint now=dfs(v,min(rst,w));\n\t\t\trst-=now;\n\t\t\te[i].w-=now;\n\t\t\te[i^1].w+=now;\n\t\t\tif(!rst)break;\n\t\t}\n\t}\n\treturn upf-rst;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);T=n+m+1;\n\tfor(int i=1;i<=n;i++){\n\t\tscanf(\"%s\",ch[i]+1);\n\t\tfor(int j=1;j<=m;j++){\n\t\t\tif(ch[i][j]=='o'){\n\t\t\t\tadd(i,j+n,1);\n\t\t\t\tadd(j+n,i,1); \n\t\t\t}\n\t\t\tif(ch[i][j]=='S'){\n\t\t\t\tadd(S,i,inf);add(i,S,0);\n\t\t\t\tadd(S,j+n,inf);add(j+n,S,0);\n\t\t\t}\n\t\t\tif(ch[i][j]=='T'){\n\t\t\t\tadd(i,T,inf);add(T,i,0);\n\t\t\t\tadd(j+n,T,inf);add(T,j+n,0);\n\t\t\t}\n\t\t}\n\t}\n\tint ans=0; \n\twhile(bfs()){\n\t\tans+=dfs(S,inf);\n\t}\n\tif(ans>=inf)printf(\"-1\");\n\telse printf(\"%d\",ans);\n}\n\n```",
        "postTime": 1635341274,
        "uid": 264851,
        "name": "19ty02",
        "ccfLevel": 7,
        "title": "ARC074D \u9898\u89e3"
    },
    {
        "content": "\u5982\u679c\u7f51\u683c\u53ea\u662f $4$ \u8054\u901a\u7684\u8bdd\uff0c\u4f3c\u4e4e\u5c31\u662f\u6700\u5c0f\u5272\u677f\u5b50\u4e86\uff08\u5f53\u7136\u4e5f\u6709\u4e0d\u7528\u6700\u5c0f\u5272\u7684\u505a\u6cd5\uff09\u3002\n\n\u7136\u540e\u8003\u8651\u4e00\u884c\u4e00\u5217\u76f8\u4e92\u8fde\u901a\u600e\u4e48\u505a\uff0c\u6709\u4e00\u4e2a\u5957\u8def\u53eb\u7f51\u683c\u56fe\u8f6c\u4e8c\u5206\u56fe\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5c06\u4e00\u884c\u6216\u4e00\u5217\u770b\u6210\u8054\u901a\u7684\u6574\u4f53\uff0c\u6240\u4ee5\u5efa\u4e00\u4e2a\u4e8c\u5206\u56fe\uff0c\u5de6\u8fb9\u8868\u793a $1$ \u5230 $n$ \u884c\uff0c\u53f3\u8fb9\u8868\u793a $1$ \u5230 $m$ \u5217\u3002\n\n- \u5982\u679c $(i,j)$ \u4e3a\u7a7a\u5730\uff0c\u8bf4\u660e\u8fd9\u4e2a\u70b9\u53ef\u4ee5\u8fde\u63a5\u7b2c $i$ \u884c\u548c\u7b2c $j$ \u5217\uff0c\u7ed9 $(l_i,r_j)$ \u8fde\u4e0a\u8fb9\u3002\n- \u5982\u679c $(i,j)$ \u4e3a\u969c\u788d\uff0c\u8bf4\u660e\u901a\u8fc7\u8fd9\u4e2a\u70b9\u4e0d\u80fd\u8fde\u63a5 $l_i,r_j$\uff0c\u90a3\u5c31\u4e0d\u8fde\u8fb9\u5373\u53ef\u3002\n- \u5982\u679c $(i,j)$ \u4e3a\u8d77\u70b9\uff0c\u5219\u5c06\u6e90\u70b9\u8fde\u63a5 $l_i,r_j$ \u5373\u53ef\u3002\n- \u5982\u679c $(i,j)$ \u4e3a\u7ec8\u70b9\uff0c\u5219\u5c06 $l_i,r_j$ \u8fde\u63a5\u5230\u6c47\u70b9\u5373\u53ef\u3002\n\n\u4e24\u4e2a\u70b9\u4e4b\u95f4\u6709\u8fde\u8fb9\u65f6\u53ef\u4ee5\u770b\u4f5c\u8054\u901a\uff0c\u90a3\u4e48\u4e0d\u96be\u770b\u51fa\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u539f\u56fe\u7684\u6700\u5c0f\u5272\u3002\n\n\u8dd1\u6700\u5927\u6d41\u5373\u53ef\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define int long long\nnamespace mystd {\n\tinline int read() {\n\t    char c = getchar();\n\t    int x = 0, f = 1;\n\t    while (c < '0' || c > '9') f = (c == '-') ? -1 : f, c = getchar();\n\t    while (c >= '0' && c <= '9') x = (x << 1) + (x << 3) + c - '0', c = getchar();\n\t    return x * f;\n\t}\n\tinline void write(int x) {\n\t    if (x < 0) x = ~(x - 1), putchar('-');\n\t    if (x > 9) write(x / 10);\n\t    putchar(x % 10 + '0');\n\t}\n}\nusing namespace std;\nusing namespace mystd;\n\nconst int maxn = 110;\nconst int inf = 1e18;\nstruct edge { int to, nxt, w; } e[maxn * maxn << 3];\nint n, m, s, t, tot = 1, ans, head[maxn << 1], dep[maxn << 1];\nchar c[maxn][maxn];\n\nvoid add_edge(int u, int v, int w) { e[++tot] = (edge) { v, head[u], w }, head[u] = tot; }\nvoid add_flow(int u, int v, int w) { add_edge(u, v, w), add_edge(v, u, w); }\n\nbool bfs() {\n\tmemset(dep, 0, sizeof(dep));\n\tdep[s] = 1;\n\tqueue<int> q;\n\tq.push(s);\n\twhile (!q.empty()) {\n\t\tint u = q.front(); q.pop();\n\t\tfor (int i = head[u]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].to;\n\t\t\tif (e[i].w && !dep[v]) dep[v] = dep[u] + 1, q.push(v);\n\t\t}\n\t}\n\treturn dep[t];\n}\n\nint dfs(int u, int in) {\n\tif (u == t) return in;\n\tint out = 0;\n\tfor (int i = head[u]; i && in; i = e[i].nxt) {\n\t\tint v = e[i].to;\n\t\tif (dep[v] == dep[u] + 1 && e[i].w) {\n\t\t\tint res = dfs(v, min(in, e[i].w));\n\t\t\te[i].w -= res;\n\t\t\te[i ^ 1].w += res;\n\t\t\tin -= res;\n\t\t\tout += res;\n\t\t}\n\t}\n\tif (!out) dep[u] = 0;\n\treturn out;\n}\n\nsigned main() {\n\tn = read(), m = read();\n\tfor (int i = 1; i <= n; i++) scanf(\"%s\", c[i] + 1);\n\ts = 0, t = n + m + 1;\n\tfor (int i = 1; i <= n; i++) {\n\t\tfor (int j = 1; j <= m; j++) {\n\t\t\tif (c[i][j] == 'S') add_flow(s, i, inf), add_flow(s, n + j, inf);\n\t\t\telse if (c[i][j] == 'T') add_flow(i, t, inf), add_flow(n + j, t, inf);\n\t\t\telse if (c[i][j] == 'o') add_flow(i, n + j, 1), add_flow(n + j, i, 1);\n\t\t}\n\t}\n\twhile (bfs()) ans += dfs(s, 1e18);\n\twrite(ans >= 1e18 ? -1 : ans / 2);\n\treturn 0;\n}\n\n```",
        "postTime": 1665408148,
        "uid": 306573,
        "name": "Ender32k",
        "ccfLevel": 0,
        "title": "ARC074D Lotus Leaves \u9898\u89e3"
    }
]