[
    {
        "content": "## \u601d\u8def\n\n\u9119\u4eba\u5199\u7684\u7b2c\u4e00\u7bc7\u7f51\u7edc\u6d41\u9898\u89e3\uff0c\u6709\u9519\u8bef\u8bf7\u6307\u51fa qwq\u3002  \n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u9009\u624b $i$\uff0c\u9996\u5148\u6211\u4eec\u76ee\u524d\u5df2\u7ecf\u77e5\u9053\u4e86 $m$ \u573a\u6bd4\u8d5b\u7684\u80dc\u8d1f\u60c5\u51b5\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u8d2a\u5fc3\u7684\u601d\u8def\u8ba9 $i$ \u8d62\u5f97\u5269\u4e0b\u7684\u6240\u6709\u4ed6\u8fd8\u6ca1\u6253\u7684\u6bd4\u8d5b\uff0c\u6b63\u786e\u6027\u663e\u7136\uff0c\u8fd9\u6837\u4e0d\u4f1a\u589e\u52a0\u522b\u4eba\u7684\u5206\u6570\u3002\u90a3\u4e48 $i$ \u8d62\u7684\u6761\u4ef6\u662f\u5176\u4ed6\u4eba\u7684\u5206\u6570\u90fd\u4e0d\u80fd\u6bd4\u4ed6\u9ad8\uff0c\u8bbe $i$ \u8f93\u4e86 $x$ \u573a\uff0c\u5219\u4ed6\u80fd\u5f97\u5230\u7684\u5206\u6570\u6700\u5927\u503c $mx_i $ \u5c31\u662f $ n - 1 - x$\u3002  \n\u8fd9\u4e00\u9898\u7684\u9650\u5236\u5f88\u591a\uff0c\u5982\u679c\u6211\u4eec\u5355\u7eaf\u8d2a\u5fc3\u8ba9\u5c11\u7684\u8d62\u80af\u5b9a\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u8ba9\u522b\u4eba\u8d62\u4f1a\u589e\u52a0\u53e6\u5916\u7684\u4eba\u7684\u5206\u6570\uff0c\u8fd9\u65f6\u5019\u8003\u8651\u4f7f\u7528\u7f51\u7edc\u6d41\u3002  \n\u5bf9\u4e8e\u6e90\u70b9 $S$\uff0c\u6211\u4eec\u628a\u5b83\u548c\u6bcf\u4e00\u4e2a\u6bd4\u8d5b\u8fde\u8d77\u6765\uff0c\u8fd9\u6761\u8fb9\u7684\u5bb9\u91cf\u4e3a $1$\uff0c\u8868\u793a\u8fd9\u573a\u6bd4\u8d5b\u80fd\u591f\u5f97\u5230\u4e00\u70b9\u5206\u6570\uff0c\u968f\u540e\u628a\u8fd9\u573a\u6bd4\u8d5b\u548c\u53c2\u52a0\u8fd9\u573a\u6bd4\u8d5b\u7684\u4e24\u4e2a\u961f\u5458\u5206\u522b\u8fde\u4e00\u6761\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u8fd9\u573a\u6bd4\u8d5b\u56e0\u4e3a\u548c\u6e90\u70b9\u4e4b\u95f4\u7684\u8fb9\u5bb9\u91cf\u4e3a $1$\uff0c\u6240\u4ee5\u4ed6\u53ea\u80fd\u5f97\u5230 $1$ \u70b9\u5206\u6570\uff0c\u800c\u6bd4\u8d5b\u548c\u4e24\u4e2a\u961f\u5458\u95f4\u7684\u8fb9\u7684\u5bb9\u91cf\u4e3a $1$\uff0c\u8868\u793a\u8fd9\u573a\u6bd4\u8d5b\u53ef\u4ee5\u4e3a\u4e24\u4e2a\u961f\u5458\u4e2d\u7684\u4e00\u4e2a\u63d0\u4f9b\u4e00\u70b9\u5206\u6570\uff0c\u63a5\u7740\u6211\u4eec\u628a\u6240\u6709\u7684\u961f\u5458\u548c\u6c47\u70b9 $T$ \u8fde\u63a5\uff0c\u9664\u4e86\u961f\u5458 $i$ \u8fde\u63a5 $T$ \u7684\u8fb9\u7684\u5bb9\u91cf\u4e3a $mx_i$ \u4ee5\u5916\uff0c\u5176\u4f59\u7684\u961f\u5458\u7684\u8fb9\u7684\u5bb9\u91cf\u4e3a $mx_i - 1$\uff0c\u8868\u793a\u5176\u4f59\u7684\u961f\u5458\u7684\u5206\u6570\u90fd\u4e0d\u80fd\u6bd4 $i$ \u9ad8\uff0c\u6700\u540e\u6211\u4eec\u4ece\u6c47\u70b9\u548c\u6bcf\u4e2a\u961f\u5458\u4e4b\u95f4\u8fde\u63a5\u4e00\u6761\u8fb9\uff0c\u5bb9\u91cf\u4e3a\u8be5\u961f\u5458\u8d62\u7684\u6b21\u6570\uff0c\u961f\u5458 $i$ \u76f8\u5e94\u8fb9\u7684\u5bb9\u91cf\u5e94\u4e3a $mx_i$\uff0c\u8868\u793a\u73a9\u5bb6\u521d\u59cb\u7684\u5206\u6570\u3002  \n\u5efa\u56fe\u7684\u6b65\u9aa4\u5c31\u5b8c\u6210\u4e86\uff0c\u63a5\u4e0b\u6765\u4f7f\u7528 Dinic \u7b97\u6cd5\u8ba1\u7b97\u6700\u5927\u6d41\u5373\u53ef\uff0c\u5982\u679c\u6700\u5927\u6d41\u8fbe\u4e0d\u5230 $n \\times (n - 1) / 2$ \u5373\u6240\u6709\u6bd4\u8d5b\u7684\u6570\u91cf\uff0c\u8bf4\u660e\u6709\u7684\u73a9\u5bb6\u8d62\u5f97\u6b21\u6570\u5fc5\u5927\u4e8e $i$ \u5bfc\u81f4\u6d41\u91cf\u65e0\u6cd5\u4f20\u51fa\uff0c\u90a3\u4e48 $i$ \u5c31\u5fc5\u8f93\uff0c\u53cd\u4e4b\u53ef\u4ee5\u8d62\u3002\u7ec6\u8282\u5728\u4ee3\u7801\u7684\u6ce8\u91ca\u5185\uff0c\u53ef\u4ee5\u7ec6\u770b\u3002\n\n**\u6ce8\u610f\uff1a`memcpy`, `memset` \u7684\u901f\u5ea6\u53ef\u80fd\u4e0d\u5982 `for` \u5faa\u73af\u3002**\n\n## AC \u4ee3\u7801\n\n```cpp\n#define INF 1e12\n\nstruct edge{\n\tint nxt, v;\n\tll c;\n\t//\u8868\u793a \u4e00\u6761\u8fde\u5f80v\u7684\u8fb9\u7684\u5bb9\u91cf\u4e3ac\n} e[10 * MAXN];\n\nint cnt = 1, siz, then[MAXN], dis[MAXN];\n//cnt, h, e\u7528\u4e8e\u94fe\u5f0f\u524d\u5411\u661f\u5b58\u8fb9\n//dis\u662fDinic\u7b97\u6cd5\u5206\u5c42\u7684\u7ed3\u679c\n\nqueue<int> q;\n\nvoid _add(int u, int v, ll c){e[++cnt]=(edge){then[u], v, c}; then[u]=cnt;}\nvoid add(int u, int v, ll c){_add(u, v, c); _add(v, u, 0);}\n//\u4e3a\u4e86\u589e\u5e7f\u7684\u53cd\u6094\uff0c\u9700\u8981\u52a0\u4e00\u6761\u5bb9\u91cf\u4e3a0\u7684\u53cd\u6094\u8fb9\n\nint S, T, cur[MAXN];\n//S\u662f\u7f51\u7edc\u7684\u6e90\u70b9\uff0cT\u662f\u7f51\u7edc\u7684\u6c47\u70b9\uff0c\u5728\u8fd9\u91ccS\u5411\u6240\u6709\u672a\u5b8c\u6210\u7684\u6bd4\u8d5b\u8fdec=1\u7684\u8fb9\n//\u8fd9\u91cc\u6240\u6709\u672a\u5b8c\u6210\u7684\u6bd4\u8d5b\u5411\u5bf9\u5e94\u4e24\u4f4d\u9009\u624b\u8fdec=1\u7684\u8fb9\n//\u6240\u6709\u9009\u624b\u5411\u6c47\u70b9\u8fdec=INF\u7684\u8fb9\n\n//Dinic\u7b97\u6cd5\u901a\u8fc7BFS\u5bf9\u539f\u56fe\u5206\u5c42\uff0c\u5411\u5c42\u6570\u9ad8\u7684\u65b9\u5411\u589e\u5e7f\u6765\u52a0\u901f\nbool dinic_bfs(){\n\trep(i, 0, siz) dis[i] = -1;\n\tdis[S] = 0; q.push(S);\n\t//\u6b63\u5e38BFS\n\twhile(!q.empty()){\n\t\tint t = q.front(); q.pop();\n\t\tfor(int u = then[t]; u; u = e[u].nxt){\n\t\t\tif(e[u].c > 0 && dis[e[u].v] == -1){\n\t\t\t\tdis[e[u].v] = dis[t] + 1;\n\t\t\t\tq.push(e[u].v);\n\t\t\t}\n\t\t}\n\t}\n\treturn dis[T] != -1;\n\t//\u5982\u679c\u65e0\u6cd5\u8bbf\u95eeT\uff0c\u56fe\u5df2\u7ecf\u4e0d\u8fde\u901a\u4e86\n}\n\nll dinic_dfs(int x, ll flow){\n\tif(x == T) return flow;\n\tll rf = flow;\n\tfor(int u = cur[x]; u; u = e[u].nxt){\n\t\tif(rf <= 0) break;\n\t\t//cout << e[u].v << \" \" << e[u].c << endl;\n\t\tcur[x] = u; //\u5f53\u524d\u5f27\u4f18\u5316\uff0cDinic\u6bcf\u6761\u8fb9\u53ea\u4f1a\u7528\u4e8e\u589e\u5e7f\u4e00\u6b21\n\t\tll rf_x = e[u].c;\n\t\tif(rf_x > 0 && dis[e[u].v] > dis[x]){\n\t\t\tll transfer = dinic_dfs(e[u].v, min(rf_x, rf));\n\t\t\trf -= transfer;\n\t\t\te[u].c -= transfer;\n\t\t\te[u ^ 1].c += transfer;\n\t\t\t//\u6b64\u5904\u5e94\u7ed9\u53cd\u6094\u8fb9\u52a0\u4e0atransfer\uff0c\u65b9\u4fbf\u64a4\u9500\u64cd\u4f5c\n\t\t\t//\u8b66\u949f\u6572\u70c2\uff01\uff01\uff01cnt\u5fc5\u987b\u521d\u59cb\u5316\u4e3a1\u624d\u80fd\u8fd9\u4e48\u5199\n\t\t}\n\t}\n\treturn flow - rf;\n}\n\nll dinic(){\n\tll ans = 0;\n\twhile(dinic_bfs()){\n\t\trep(i, 0, siz) cur[i] = then[i];\n\t\tans += dinic_dfs(S, INF);\n\t}\n\treturn ans;\n}\n\nint n, m, W[MAXN], mx[MAXN];\n//W\u8bb0\u5f55\u80dc\u573a\u6570\u91cf mx\u8bb0\u5f55\u6700\u5927\u53ef\u4ee5\u8d62\u7684\u573a\u6b21\u7684\u6570\u91cf\nbitset<60> vis[60];\n\nsigned main() {\n\tread(n, m);\n\trep(i, 1, n) mx[i] = n - 1;\n\t//\u521d\u59cb\u6700\u5927\u90fd\u662fn-1\n\tsiz = n * n + 2 * n;\n\tS = 0; T = siz;\n\trep(i, 1, m){\n\t\tint x, y;\n\t\tread(x, y);\n\t\tW[x]++; mx[y]--;\n\t\t//x\u80dc\u573a+1\uff0cy\u6700\u59277\u53ef\u8d62-1\uff08\u8f93\u4e86\u4e00\u573a\uff09\n\t\tvis[min(x, y)][max(x, y)] = 1;\n\t\t//\u6807\u8bb0\u8fd9\u4fe9\u4eba\u6bd4\u8d5b\u8fc7\u4e86\n\t}\n\trep(x, 1, n){\n\t\tint id = n; cnt = 1;\n\t\trep(i, 0, siz) then[i] = 0;\n\t\trep(i, 1, n){\n\t\t\tif(i == x) continue;\n\t\t\trep(j, i + 1, n){\n\t\t\t\tif(j != x && (!vis[i][j])){\n\t\t\t\t\tid++;\n\t\t\t\t\tadd(S, id, 1);\n\t\t\t\t\tadd(id, i, 1);\n\t\t\t\t\tadd(id, j, 1);//\u5efa\u8fb9\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\trep(i, 1, n){\n\t\t\tif(i != x) add(S, i, W[i]);\n\t\t\telse add(S, i, mx[x]);\n\t\t\tif(i != x) add(i, T, max(mx[x] - 1, 0));\n\t\t\telse add(i, T, mx[x]);\n\t\t}\n\t\t//cout << \"de:\" << i << \" \" << mx[i] << endl;\n\t\tif(dinic() == n * (n - 1) / 2){\n\t\t\tprint(x);\n\t\t}\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1684652015,
        "uid": 381949,
        "name": "Anschluss_zeit",
        "ccfLevel": 4,
        "title": "AT_abc241_g \u9898\u89e3"
    },
    {
        "content": "[\u9605\u8bfb\u4f53\u9a8c\u53ef\u7231\u634f](https://rainlycoris.github.io/#/post/28)\n\n## \u5206\u6790\n\n\u679a\u4e3e\u7b2c\u4e00\u540d\uff0c\u5047\u8bbe\u4ee5\u540e\u7684\u6bd4\u8d5b\u8be5\u540d\u73a9\u5bb6\u90fd\u83b7\u80dc\uff0c\u7136\u540e\u5224\u5b9a\u662f\u5426\u5408\u6cd5\u3002\n\n\u6570\u636e\u8303\u56f4\u5f88\u7f51\u7edc\u6d41\uff0c\u8003\u8651\u6700\u5927\u6d41\uff0c\u6d41\u91cf\u4ee3\u8868\u5f97\u5206\uff0c\u7136\u540e\u662f\u5efa\u56fe\uff1a\n- \u6e90\u70b9\u548c\u6bcf\u573a\u6bd4\u8d5b\u8fde\u5bb9\u91cf\u4e3a $1$ \u7684\u8fb9\n- \u6bd4\u8d5b\u5982\u679c\u6709\u80dc\u8d1f\u5c31\u5411\u80dc\u8005\u8fde\u8fb9\uff0c\u5426\u5219\u5c31\u5411\u53c2\u4e0e\u6bd4\u8d5b\u7684\u4e24\u4e2a\u4eba\u8fde\u8fb9\n- \u8bbe\u7b2c\u4e00\u540d\u7684\u5f97\u5206\u4e3a $w$\uff0c\u7b2c\u4e00\u540d\u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a $w$ \u7684\u8fb9\uff0c\u5176\u4f59\u7684\u4eba\u5f97\u5206\u4e0d\u80fd\u8d85\u8fc7\u7b2c\u4e00\u540d\uff0c\u6240\u4ee5\u5176\u4f59\u7684\u4eba\u5411\u6c47\u70b9\u8fde\u5bb9\u91cf\u4e3a $w-1$ \u7684\u8fb9\n\n\u7531\u4e8e\u603b\u573a\u6b21\u4e3a $\\frac{n(n+1)}{2}$\uff0c\u5982\u679c\u6700\u5927\u6d41\u4e3a $\\frac{n(n+1)}{2}$ \u5c31\u8bf4\u660e\u6bcf\u573a\u6bd4\u8d5b\u90fd\u5206\u51fa\u4e86\u80dc\u8d1f\uff0c\u8fd9\u79cd\u60c5\u51b5\u5408\u6cd5\u3002\n\n## \u4ee3\u7801\n\n```cpp\nconst int N = 3000,M = 10000;\nint h[N],ne[M],e[M],w[M],idx;\nint win[N][N];\nint n,m,S,T;\n\nvoid add(int a,int b,int c){\n    w[idx] = c,e[idx] = b,ne[idx] = h[a],h[a] = idx++;\n    w[idx] = 0,e[idx] = a,ne[idx] = h[b],h[b] = idx++;\n}\n\nnamespace Dinic{\n    int q[N],d[N],cur[N];\n\n    bool bfs(){\n        int hh = 0,tt = -1;\n        memset(d,-1,sizeof(d));\n        d[S] = 0,cur[S] = h[S];\n        q[++tt] = S;\n        while(hh<=tt){\n            int u = q[hh++];\n            for(int k=h[u];~k;k=ne[k]){\n                int v = e[k];\n                if(d[v]==-1&&w[k]){\n                    d[v] = d[u]+1;\n                    cur[v] = h[v];\n                    if(v==T)\n                        return true;\n                    q[++tt] = v;\n                }\n            }\n        }\n        return false;\n    }\n\n    int find(int u,int lim){\n        if(u==T)\n            return lim;\n        int flow = 0;\n        for(int k=cur[u];~k&&flow<lim;k=ne[k]){\n            cur[u] = k;\n            int v = e[k];\n            if(d[v]==d[u]+1&&w[k]){\n                int t = find(v,min(w[k],lim-flow));\n                if(!t)\n                    d[v] = -1;\n                w[k] -= t;\n                w[k^1] += t;\n                flow += t;\n            }\n        }\n        return flow;\n    }\n\n    int dinic(){\n        int r = 0,flow;\n        while(bfs())\n            if((flow=find(S,1e9)))\n                r += flow;\n        return r;\n    }\n}\n\nsigned main(){\n    n = in(),m = in();\n    for(int k=1;k<=m;k++){\n        int a = in(),b = in();\n        win[a][b] = 1;\n        win[b][a] = 2;\n    }\n    S = 0,T = n+n*(n-1)/2+1;\n    for(int k=1;k<=n;k++){\n        memset(h,-1,sizeof(h));\n        idx = 0;\n        int cnt = n,wnt = 0;\n        for(int j=1;j<=n;j++)\n            for(int i=j+1;i<=n;i++){\n                add(S,++cnt,1);\n                if(win[i][j]){\n                    if(win[j][i]==1){\n                        if(j==k)\n                            wnt++;\n                        add(S,j,1);\n                    }\n                    else{\n                        if(i==k)\n                            wnt++;\n                        add(S,i,1);\n                    }\n                }\n                else{\n                    if(j==k||i==k){\n                        add(cnt,k,1);\n                        wnt++;\n                    }\n                    else{\n                        add(cnt,j,1);\n                        add(cnt,i,1);\n                    }\n                }\n            }\n        for(int j=1;j<=n;j++)\n            if(j==k)\n                add(j,T,wnt);\n            else\n                add(j,T,wnt-1);\n        if(Dinic::dinic()==n*(n-1)/2)\n            out(k,' ');\n    }\n    return 0;\n}\n```",
        "postTime": 1684915374,
        "uid": 407214,
        "name": "liudonglin",
        "ccfLevel": 7,
        "title": "AT_abc241_g \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u679a\u4e3e\u6bcf\u4e00\u4e2a\u73a9\u5bb6\u5224\u65ad\u662f\u5426\u53ef\u80fd\u6ee1\u8db3\u83b7\u80dc\u3002\n\n\u5047\u8bbe\u73b0\u5728\u6211\u4eec\u8bd5\u56fe\u4f7f\u5f97\u73a9\u5bb6 $ x $ \u6700\u7ec8\u83b7\u80dc\uff0c\u90a3\u4e48\u5bf9\u4e8e\u5269\u4e0b\u7684\u6709 $ x $ \u53c2\u4e0e\u7684\u6bd4\u8d5b\uff0c\u6211\u4eec\u53ef\u4ee5\u8d2a\u5fc3\u8ba9 $ x $ \u5168\u90e8\u83b7\u80dc\uff0c\u56e0\u4e3a $ x $ \u83b7\u5f97\u8fd9\u4e9b\u6bd4\u8d5b\u7684\u80dc\u5229\u4e0d\u4f1a\u4f7f\u5f97\u5176\u4ed6\u73a9\u5bb6\u5206\u6570\u589e\u52a0\u3002\n\n\u8003\u8651\u5728\u5df2\u7ecf\u77e5\u6653\u7ed3\u679c\u7684 $ M $ \u573a\u6bd4\u8d5b\u4e2d $ x $ \u6709 $ cnt $ \u573a\u843d\u8d25\u3002\u90a3\u4e48\u6700\u540e $ x $ \u7684\u5f97\u5206\u5e94\u4e3a $ n-1-cnt $\uff0c\u800c\u5176\u4ed6\u4eba\u7684\u5f97\u5206\u5e94\u5c0f\u4e8e $ n-1-cnt $\u3002\n\n\u9650\u5236\u6761\u4ef6\u5f88\u591a\uff0c\u8003\u8651\u4f7f\u7528\u7f51\u7edc\u6d41\uff0c\u6bcf\u4e2a\u6d41\u91cf\u8868\u793a\u4e00\u4e2a\u5f97\u5206\u3002\u7531\u6e90\u70b9\u5411\u6bcf\u4e2a\u70b9\u8fde\u524d $ M $ \u573a\u6bd4\u8d5b\u7684\u5f97\u5206\u6570\u7684\u5bb9\u91cf\u7684\u8fb9\u3002\n\n\u540c\u65f6\u5bf9\u6bcf\u4e00\u573a\u672a\u5f97\u5230\u7ed3\u679c\u7684\u6bd4\u8d5b\u6784\u5efa\u865a\u70b9\uff0c\u7531\u6e90\u70b9\u5411\u5176\u8fde\u6d41\u91cf\u4e3a $ 1 $ \u7684\u8fb9\uff0c\u5411\u6bd4\u8d5b\u53cc\u65b9 $ i,j $ \u5404\u8fde\u4e00\u6761\u6d41\u91cf\u4e3a $ 1 $ \u7684\u8fb9\uff0c\u5373\u8be5\u6bd4\u8d5b\u53ef\u4ee5\u7ed9 $ i $ \u6216 $ j $ \u4e00\u4e2a\u5f97\u5206\u7684\u8d21\u732e\u3002\u7531\u6bcf\u4e2a\u73a9\u5bb6\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u8868\u793a\u73a9\u5bb6\u7684\u6700\u5927\u5f97\u5206\u9650\u5236\u3002\n\n\u56e0\u4e3a\u6bcf\u4e2a\u6d41\u91cf\u5bf9\u5e94\u4e00\u4e2a\u5f97\u5206\uff0c\u800c\u603b\u5171\u6709 $ \\frac{N(N-1)}{2} $ \u573a\u6bd4\u8d5b\u3002\u6240\u4ee5\u6700\u5927\u6d41\u5e94\u4e5f\u4e3a $ \\frac{N(N-1)}{2} $\u3002\u82e5\u6700\u5927\u6d41\u5c0f\u4e8e\u8be5\u503c\uff0c\u8bf4\u660e\u82e5\u4f7f $ x $ \u6700\u7ec8\u80dc\u5229\u7684\u65b9\u6848\u4e0d\u5b58\u5728\u3002\n\n\n\n\u5176\u5b83\u7ec6\u8282\u53c2\u8003\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\ntypedef long long ll;\nusing namespace std;\nconst int N=1000005;\nconst int M=4000005;\nnamespace Chain_F{\n\tint h[N],cnt=1;\n\tstruct Edge{int next,to;ll v;}e[M];\n\tvoid cr(int c,int d,ll w){e[++cnt]=(Edge){h[c],d,w};h[c]=cnt;}\n\tvoid AddEdge(int c,int d,ll w){cr(c,d,w),cr(d,c,0);}\n\tvoid ress(int s){cnt=1; for(int i=0;i<=s;i++) h[i]=0;}\n}\nusing namespace Chain_F;\nnamespace Dinic{\n\tll dis[N];\n\tint siz,s,t,cur[N];\n\tqueue<int> q;\n\tvoid reset(int sz,int S,int T){siz=sz,s=S,t=T;}\n\tvoid bfs()\n\t{\n\t\tfor(int i=0;i<=siz;i++) dis[i]=-1;\n\t\tdis[s]=0; q.push(s);\n\t\twhile(!q.empty())\n\t\t{\n\t\t\tint r=q.front(); q.pop();\n\t\t\tfor(int i=h[r];i;i=e[i].next)\n\t\t\t{\n\t\t\t\tint y=e[i].to;\n\t\t\t\tif(e[i].v==0 || dis[y]!=-1) continue;\n\t\t\t\tdis[y]=dis[r]+1;\n\t\t\t\tq.push(y);\n\t \t\t}\n\t\t}\n\t}\n\tll dfs(int r,ll minn)\n\t{\n\t\tif(r==t) return minn;\n\t\tfor(int i=cur[r];i;cur[r]=i,i=e[i].next)\n\t\t{\n\t\t\tint y=e[i].to;\n\t\t\tll flow=e[i].v;\n\t\t\tif(flow==0 || dis[y]<=dis[r]) continue;\n\t\t\tll d=dfs(y,min(flow,minn));\n\t\t\tif(d>0)\n\t\t\t{\n\t\t\t\te[i].v-=d,e[i^1].v+=d;\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\tll maxflow()\n\t{\n\t\tll Ans=0,upd;\n\t\twhile(bfs(),true)\n\t\t{\n\t\t\tif(dis[t]==-1) return Ans;\n\t\t\tfor(int i=0;i<=siz;i++) cur[i]=h[i];\n\t\t\twhile((upd=dfs(s,LLONG_MAX))>0) Ans+=upd;\n\t\t}\n\t}\n}\nint n,m,sign,maxx[N],w[N];\nmap<pair<int,int>,bool> p;\nvoid ck(int x)\n{\n\tsign=n;\n\tress(Dinic::siz);\n\tint s=0,t=n*n+n+n;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(i==x) continue;\n\t\tfor(int j=i+1;j<=n;j++)\n\t\t{\n\t\t\tif(j==x) continue;\n\t\t\tif(p[make_pair(i,j)]) continue;\n\t\t\t++sign;\n\t\t\tAddEdge(s,sign,1);\n\t\t\tAddEdge(sign,i,1),AddEdge(sign,j,1);\n\t\t}\n\t}\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tif(i!=x) AddEdge(s,i,w[i]);\n\t\telse AddEdge(s,i,maxx[x]);\n\t\tif(i!=x) AddEdge(i,t,max(0,maxx[x]-1));\n\t\telse AddEdge(i,t,maxx[x]);\n\t}\n\tDinic::reset(t,s,t);\n\tif(Dinic::maxflow()==n*(n-1)/2) printf(\"%d \",x);\n}\nint main()\n{\n\tscanf(\"%d %d\",&n,&m);\n\tfor(int i=1;i<=n;i++) maxx[i]=n-1;\n\tfor(int i=1,x,y;i<=m;i++) scanf(\"%d %d\",&x,&y),w[x]++,maxx[y]--,p[make_pair(min(x,y),max(x,y))]=true;\n\tfor(int i=1;i<=n;i++) ck(i);\n}\n```\n\n\n",
        "postTime": 1675774716,
        "uid": 432127,
        "name": "Avocadooo",
        "ccfLevel": 0,
        "title": "ABC241G-\u9898\u89e3"
    }
]