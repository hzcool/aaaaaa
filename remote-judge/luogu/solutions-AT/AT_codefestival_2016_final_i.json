[
    {
        "content": "### \u9898\u610f\n\u6709\u4e00\u4e2a $H\\times W$ \u7684\u77e9\u9635 $a$\uff0c\u53ef\u4ee5\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u9009\u62e9\u4e00\u884c\u6216\u4e00\u5217\u7ffb\u8f6c\uff0c\u6c42\u6700\u540e\u80fd\u591f\u751f\u6210\u7684\u672c\u8d28\u4e0d\u540c\u7684\u77e9\u9635\u6709\u591a\u5c11\u79cd\u3002$H,W\\le 200,$ \u77e9\u9635\u5185\u7684\u5143\u7d20\u5747\u4e3a\u5c0f\u5199\u5b57\u6bcd\u3002\n### \u89e3\u6cd5\n\u8003\u8651\u67d0\u4e2a $a_{i,j}$ \u53ea\u4f1a\u53d8\u5230 $a_{H-i+1,j},a_{i,W-j+1},a_{H-i+1,W-j+1}$ \u7684\u4f4d\u7f6e\u3002\uff08\u5bf9\u4e8e $H,W$ \u4e3a\u5947\u6570\u7684\u60c5\u51b5\uff0c\u53ef\u4ee5\u76f4\u63a5\u4e58\u4e0a\u4e2d\u95f4\u80fd\u5426\u53d8\u5316\u7684\u65b9\u6848\u6570\uff0c\u5219\u5176\u4ed6\u5143\u7d20\u90fd\u6709\u56db\u79cd\u53ef\u80fd\u51fa\u73b0\u7684\u4f4d\u7f6e\uff09\u6240\u4ee5\u8fd9\u56db\u4e2a\u5143\u7d20\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u56db\u5143\u7ec4\u6574\u4f53\u5904\u7406\u3002\u8bbe\u56db\u4e2a\u4f4d\u7f6e\u7684\u6570\u5206\u522b\u4e3a $a,b,c,d$\uff0c\u5219\u53ef\u4ee5\u901a\u8fc7\u4e0b\u9762\u7684\u65b9\u5f0f\u4f7f\u5f97\u53ea\u6709 $a,b,c,d$ \u4e4b\u95f4\u7684\u987a\u5e8f\u8fdb\u884c\u53d8\u5316\uff08\u7bad\u5934\u8868\u793a\u884c/\u5217\u5185\u5176\u4ed6\u5143\u7d20\u7684\u987a\u5e8f\uff09\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/cwelaeok.png)\n\n\u540c\u7406\u5176\u4ed6\u4efb\u610f\u4e09\u4e2a\u5143\u7d20\u4e5f\u53ef\u4ee5\u6309\u7167\u8fd9\u6837\u7684\u65b9\u5f0f\u53d8\u5316\uff0c\u6253\u8868\u53ef\u4ee5\u53d1\u73b0\u8fd9\u4e9b\u5143\u7d20\u51fa\u73b0\u7684\u987a\u5e8f\u6709 $12$ \u79cd\u3002\u540c\u65f6\u53ef\u4ee5\u53d1\u73b0\u5c06\u540c\u5728\u4e00\u884c/\u4e00\u5217\u7684\u5143\u7d20\u8c03\u6362\u4f4d\u7f6e\u53ef\u5f97\u6240\u6709 $4!$ \u79cd\u65b9\u5f0f\u4e2d\u53e6\u5916 $12$ \u79cd\u51fa\u73b0\u65b9\u5f0f\uff0c\u610f\u5473\u7740\u67d0\u884c\u88ab\u7ffb\u8f6c\u5c06\u5bfc\u81f4\u8be5\u884c\u4e0a\u82e5\u5e72\u4e2a\u56db\u5143\u7ec4\u80fd\u591f\u53d8\u6362\u7684\u4f4d\u7f6e\u540c\u65f6\u53d8\u5316\u3002\u6ce8\u610f\u5982\u679c\u67d0\u4e2a\u56db\u5143\u7ec4\u5185\u90e8\u51fa\u73b0\u4e86\u76f8\u540c\u7684\u6570\uff0c\u5219\u5b83\u4eec\u4e00\u5b9a\u53ef\u4ee5\u5728\u67d0\u6b21\u53d8\u5316\u540e\u51fa\u73b0\u5728\u540c\u4e00\u884c\uff0c\u5b83\u4eec\u5728\u88ab\u7ffb\u8f6c\u67d0\u884c/\u67d0\u5217\u540e\u80fd\u591f\u53d8\u6362\u51fa\u7684\u987a\u5e8f\u4e00\u6837\uff0c\u53ef\u4ee5\u628a\u5bf9\u5e94\u7684\u8d21\u732e\u5148\u4e58\u4e0a\uff1b\u5426\u5219\u5728\u7ffb\u8f6c\u67d0\u884c/\u67d0\u5217\u540e\u5bf9\u5e94\u80fd\u591f\u53d8\u6362\u51fa\u7684\u987a\u5e8f\u4f1a\u53d8\u5316\u3002\n\n\u8003\u8651\u5c06\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u770b\u6210\u70b9\uff0c\u7136\u540e\u5bf9\u4e8e\u67d0\u4e2a\u5185\u90e8\u5143\u7d20\u4e92\u4e0d\u76f8\u540c\u7684\u56db\u5143\u7ec4 $\\{a_{i,j},a_{H-i+1,j},a_{i,W-j+1},a_{H-i+1,W-j+1}\\}(2i\\le H,2j\\le W)$\uff0c\u5728\u7b2c $i$ \u884c\u548c\u7b2c $j$ \u5217\u4e4b\u95f4\u8fde\u8fb9\u3002\u5728\u7ffb\u8f6c\u67d0\u884c/\u67d0\u5217\u4e4b\u540e\u5bf9\u5e94\u51fa\u8fb9\u7684\u56db\u5143\u7ec4\u72b6\u6001\u4e5f\u4f1a\u6539\u53d8\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u4e8e\u67d0\u4e2a\u8fde\u901a\u5757 $S$ \u6c42\u51fa\u67d0\u68f5\u751f\u6210\u6811\uff0c\u7136\u540e\u5bf9\u4e8e\u6811\u4e0a\u7684\u8fb9\u7684 $2^{|S|-1}$ \u79cd\u72b6\u6001\uff0c\u81ea\u9876\u5411\u4e0b\u786e\u5b9a\u67d0\u884c/\u67d0\u5217\u662f\u5426\u7ffb\u8f6c\uff08\u53ef\u4ee5\u786e\u5b9a\u4e24\u79cd\u7b49\u6548\u7684\u65b9\u5f0f\uff09\uff0c\u8fdb\u4e00\u6b65\u786e\u5b9a\u5176\u4ed6\u6240\u6709\u8fb9\u7684\u72b6\u6001\uff08\u53ea\u4f1a\u6709\u4e00\u79cd\uff09\uff1b\u6240\u4ee5\u8be5\u8fde\u901a\u5757\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u4e3a $2^{|S|-1}$\u3002\u5e76\u67e5\u96c6\u7ef4\u62a4\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(HW)$\u3002\n### \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int maxn=210;\nconst int maxt=maxn<<1;\nconst int md=1000000007; \nint n,m,i,j,k,p,w,a,b,ans=1,c[4];\nint fa[maxt],siz[maxt];\nchar s[maxn][maxn];\nint Find(int x){\n\tif(x==fa[x]) return x;\n\treturn fa[x]=Find(fa[x]);\n}\ninline void Merge(int x,int y){\n\tx=Find(x); y=Find(y);\n\tif(x==y) return;\n\tif(siz[x]>siz[y]) swap(x,y);\n\tfa[x]=y; siz[y]+=siz[x]; siz[x]=1;\n}\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n\tfor(i=1;i<=n;++i) scanf(\"%s\",s[i]+1);\n\ta=(n>>1)+1; b=(m>>1)+1;\n\tif(n&1){\n\t\tfor(i=1;s[a][i]==s[a][m-i+1]&&i<=m;++i);\n\t\tif(i<=m) ans<<=1;\n\t}\n\tif(m&1){\n\t\tfor(i=1;s[i][b]==s[n-i+1][b]&&i<=n;++i);\n\t\tif(i<=n) ans<<=1;\n\t}\n\tfor(i=1,j=a+b-2;i<=j;++i) fa[i]=i,siz[i]=1;\n\tfor(i=1;i<a;++i){\n\t\tfor(j=1;j<b;++j){\n\t\t\tchar t[4]={s[i][j],s[i][m-j+1],\n\t\t\t\t\t   s[n-i+1][j],s[n-i+1][m-j+1]};\n\t\t\tsort(t,t+4); w=24;\n\t\t\tfor(k=c[p=0]=1;k<4;++k)\n\t\t\t\tw/=(++c[p+=(t[k]!=t[k-1])]);\n\t\t\tif(p==3) Merge(i,a+j-1),w=12;\n\t\t\tans=(1LL*ans*w)%md;\n\t\t\tmemset(c,0,(p+1)<<2);\n\t\t}\n\t}\n\tfor(i=1,j=a+b-2;i<=j;++i)\n\t\tfor(w=siz[i];--w;ans-=((ans<<=1)>=md)*md); \n\tprintf(\"%d\\n\",ans);\n}\n```",
        "postTime": 1674569133,
        "uid": 546086,
        "name": "Francais_Drake",
        "ccfLevel": 7,
        "title": "AT_codefestival_2016_final_i Reverse Grid \u9898\u89e3"
    },
    {
        "content": "\u9996\u5148\u53ef\u4ee5\u628a\u7ffb\u8f6c\u770b\u6210\u67d0\u79cd\u7f6e\u6362\u3002~~\u4e8e\u662f\u4e8b\u5b9e\u4e0a\u672c\u9898\u5c31\u662f\u7ed9\u5b9a\u77e9\u9635\u5728\u7f6e\u6362\u7fa4\u64cd\u4f5c\u4e0b\u7684\u8f68\u9053\u5927\u5c0f\u6c42\u89e3~~\u3002\n\n\u4f46\u662f\u4e8b\u5b9e\u4e0a\u4e0d\u9700\u8981\u4f7f\u7528\u8f68\u9053\u4e4b\u7c7b\u9ad8\u6df1\u7684\u7fa4\u8bba\u6280\u5de7\u3002\u5177\u4f53\u800c\u8a00\uff0c\u89c2\u5bdf\u5230\u67d0\u4e2a\u683c\u5b50\u4e2d\u7684\u5143\u7d20\u4ec5\u53ef\u80fd\u51fa\u73b0\u5728\u56db\u4e2a\u4f4d\u7f6e\u4e2d\uff0c\u5217\u51fa\u56db\u4e2a\u4f4d\u7f6e\u5982\u4e0b\u56fe\uff1a\n\n```\n  .  .\n  .  .\n..A..B..\n  .  .\n  .  .\n..C..D..\n  .  .\n  .  .\n```\n\n\u5373\u56fe\u4e2d\u7684 `ABCD` \u56db\u4e2a\u4f4d\u7f6e\uff0c\u5b83\u4eec\u5728\u77e9\u9635\u4e2d\u7684\u4f4d\u7f6e\u662f\u5bf9\u79f0\u7684\u3002\n\n\u7136\u540e\u63a5\u7740\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\u5148\u7ffb\u8f6c `AC`\uff0c\u518d\u7ffb\u8f6c `CD`\uff0c\u518d\u7ffb\u8f6c `AC`\uff0c\u518d\u7ffb\u8f6c `CD` \u540e\uff0c\u9664\u4e86 `ACD` \u4e09\u4e2a\u5143\u7d20\u4ee5\u5916\u5176\u5b83\u6240\u6709\u5143\u7d20\u7684\u4f4d\u7f6e\u90fd\u6ca1\u53d8\uff0c\u800c\u8fd9\u4e09\u4e2a\u5143\u7d20\u5faa\u73af\u4e86\u4e00\u4f4d\u3002\n\n\u9664\u4e86 `ACD` \u95f4\u53ef\u4ee5\u8fd9\u4e48\u505a\u4ee5\u5916\uff0c`ABC`\uff0c`ABD`\uff0c`BCD` \u90fd\u53ef\u4ee5\u88ab\u5b9e\u73b0\u3002\u4e8e\u662f\u628a\u8fd9\u4e9b\u64cd\u4f5c\u7ed3\u5408\u8d77\u6765\u5199\u4e00\u4e2a\u7a0b\u5e8f\u9a8c\u8bc1\u4e00\u4e0b\uff0c\u53d1\u73b0\u8fd9\u56db\u79cd\u64cd\u4f5c\u603b\u5171\u53ef\u4ee5\u7ec4\u5408\u51fa $12$ \u79cd\u4e0d\u540c\u7684\u64cd\u4f5c\u3002\n\n\u56db\u4e2a\u5143\u7d20\u7684\u6392\u5217\u603b\u5171\u6709 $24$ \u79cd\u3002\u800c\u6211\u4eec\u53d1\u73b0\uff0c\u53ea\u8981 `ABCD` \u4e2d\u4efb\u4e24\u4e2a\u5143\u7d20\u88ab\u4ea4\u6362\uff0c\u518d\u7ed3\u5408\u4e0a\u8ff0\u56db\u79cd\u64cd\u4f5c\uff0c\u90fd\u53ef\u4ee5\u5f97\u5230\u5269\u4e0b $12$ \u79cd\u64cd\u4f5c\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u53ef\u4ee5\u7ffb\u8f6c\u4e00\u884c\u6216\u4e00\u5217\u4f7f\u5f97\u5176\u4e2d\u6240\u6709\u56db\u5143\u7ec4\u7684\u7f6e\u6362\u7531\u539f\u672c\u7684 $12$ \u79cd\u53d8\u6210\u53e6 $12$ \u79cd\u3002\u8fd9\u610f\u5473\u7740\u6211\u4eec\u5982\u679c\u628a\u6bcf\u4e2a\u56db\u5143\u7ec4\u7684\u72b6\u6001\u7528\u4e00\u4e2a `bit` \u6765\u8868\u793a\uff0c\u5219\u6bcf\u4e2a\u56db\u5143\u7ec4\u7ffb\u8f6c\u4e0e\u5426\u7684\u72b6\u6001\u5373\u53ef\u7528\u4e00\u4e2a $O(nm)$ \u7684\u4e8c\u8fdb\u5236\u6570\u6765\u8868\u793a\u3002\u7ffb\u8f6c\u6bcf\u884c\u6bcf\u5217\u7684\u64cd\u4f5c\u5c31\u5bf9\u5e94\u4e86\u5f02\u6216\u5173\u7cfb\u3002\n\n\u8fd9\u5f88\u660e\u663e\u662f\u4e00\u4e2a\u7ebf\u6027\u57fa\u95ee\u9898\u3002\u53ef\u4ee5\u76f4\u63a5\u89e3\u51fa\u6240\u6709\u7ffb\u8f6c\u64cd\u4f5c\u5bf9\u5e94\u4e8c\u8fdb\u5236\u6570\u6784\u6210\u7684\u96c6\u5408\u7684\u79e9\u6765\u89e3\u51b3\u95ee\u9898\u3002\u4f46\u662f\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6709\u65f6\u6b63 $12$ \u79cd\u548c\u53cd $12$ \u79cd\u64cd\u4f5c\u662f\u7b49\u6548\u7684\u3002\u5177\u4f53\u800c\u8a00\uff0c\u9664\u975e `ABCD` \u56db\u4e2a\u5143\u7d20\u90fd\u4e0d\u540c\uff0c\u5426\u5219\u6b63\u53cd\u64cd\u4f5c\u662f\u7b49\u6548\u7684\u3002\u4e8e\u662f\uff0c\u5bf9\u4e8e\u5b58\u5728\u76f8\u540c\u5143\u7d20\u7684\u4f4d\u7f6e\uff0c\u76f4\u63a5\u628a\u5b83\u5bf9\u5e94\u7684\u4f4d\u4ece\u4e8c\u8fdb\u5236\u6570\u4e2d\u5220\u53bb\u5373\u53ef\u3002\n\n\u8fd8\u6709\u5c31\u662f\u5f53 $n,m$ \u4e3a\u5947\u6570\u65f6\uff0c\u6b63\u4e2d\u592e\u7684\u90a3\u4e00\u884c/\u5217\u7684\u56db\u5143\u7ec4\u9000\u5316\u4e86\u3002\u8fd9\u65f6\u5c31\u76f4\u63a5\u66b4\u529b\u9a8c\u8bc1\u4e00\u4e0b\u7ffb\u8f6c\u64cd\u4f5c\u4f1a\u4e0d\u4f1a\u6539\u53d8\u77e9\u9635\u5373\u53ef\u3002\n\n\u7ebf\u6027\u57fa\u7684\u79e9\u6c42\u89e3\u53ef\u4ee5\u7528 `bitset` \u4f18\u5316\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int mod=1e9+7;\nint n,m,res=1;\nstruct perm{\n\tint a[4];\n\tperm(){memset(a,0,sizeof(a));}\n\tint&operator[](const int&x){return a[x];}\n\tfriend perm operator*(perm&u,perm&v){\n\t\tperm w;\n\t\tfor(int i=0;i<4;i++)w[i]=v[u[i]];\n\t\treturn w;\n\t}\n\tfriend bool operator<(const perm&u,const perm&v){\n\t\tfor(int i=0;i<4;i++)if(u.a[i]!=v.a[i])return u.a[i]<v.a[i];\n\t\treturn false; \n\t}\n};\nset<perm>s;\nchar g[210][210];\nbool sp[110][110];\nbitset<10100>bs[210];\nint main(){\n\tperm p;\n\tp[0]=1,p[1]=2,p[2]=0,p[3]=3;s.insert(p);\n\tp[0]=2,p[2]=3,p[3]=0,p[1]=1;s.insert(p);\n\tp[0]=1,p[1]=3,p[3]=0,p[2]=2;s.insert(p);\n\tp[0]=0,p[1]=2,p[2]=3,p[3]=1;s.insert(p);\n\tp[0]=0,p[1]=1,p[2]=2,p[3]=3;s.insert(p);\n\tfor(int i=0;i<s.size();i++){\n\t\tset<perm>t=s;\n\t\tfor(auto x:t)for(auto y:t)s.insert(x*y);\n\t}\n//\tfor(auto x:s)printf(\"%d %d %d %d\\n\",x[0],x[1],x[2],x[3]);\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)scanf(\"%s\",g[i]+1);\n\tfor(int i=1;i<=(n>>1);i++)for(int j=1;j<=(m>>1);j++){\n\t\tint I=(n+1)-i,J=(m+1)-j;\n\t\tset<perm>t;\n\t\tperm p;p[0]=g[i][j],p[1]=g[i][J],p[2]=g[I][j],p[3]=g[I][J];\n\t\tfor(auto x:s)t.insert(x*p); \n\t\tres=1ll*res*t.size()%mod;\n\t\tbool ok=true;\n\t\tfor(int u=0;u<4;u++)for(int v=u+1;v<4;v++)if(p[u]==p[v])ok=false;\n\t\tsp[i-1][j-1]=ok;\n\t}\n\tif(n&1){\n\t\tbool ok=false;\n\t\tfor(int i=1;i<=m;i++)if(g[(n+1)>>1][i]!=g[(n+1)>>1][m-i+1])ok=true;\n\t\tif(ok)(res<<=1)%=mod;\n\t}\n\tif(m&1){\n\t\tbool ok=false;\n\t\tfor(int i=1;i<=n;i++)if(g[i][(m+1)>>1]!=g[n-i+1][(m+1)>>1])ok=true;\n\t\tif(ok)(res<<=1)%=mod;\n\t}\n\tn>>=1,m>>=1;\n//\tfor(int i=0;i<n;i++){for(int j=0;j<m;j++)printf(\"%d\",sp[i][j]);puts(\"\");}\n\tfor(int i=0;i<n;i++)for(int j=0;j<m;j++)if(sp[i][j])bs[i].set(i*m+j),bs[n+j].set(i*m+j);\n\tfor(int i=0,j=0;i<n*m;i++){\n\t\tif(!bs[j].test(i))for(int k=j+1;k<n+m;k++)if(bs[k].test(i)){swap(bs[j],bs[k]);break;}\n\t\tif(!bs[j].test(i))continue;\n\t\t(res<<=1)%=mod;\n\t\tfor(int k=j+1;k<n+m;k++)if(bs[k].test(i))bs[k]^=bs[j];\n\t\tj++;\n\t}\n\tprintf(\"%d\\n\",res);\n\treturn 0;\n} \n```\n\n\n\n",
        "postTime": 1640692136,
        "uid": 123369,
        "name": "xtx1092515503",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT2136\u3010Reverse Grid\u3011"
    }
]