[
    {
        "content": "\u8003\u8651\u52a8\u6001\u89c4\u5212\u3002$f_{i,0}$ \u8868\u793a Takahashi \u5728 $i$ \u70b9\u5148\u624b\u65f6\u7684\u5f97\u5206\uff0c$f_{i,1}$ \u8868\u793a Aoki \u5148\u624b\u7684\u5f97\u5206\u3002\u663e\u7136\u6709\n\n$$\n\\begin{aligned}\nf_{i,0}=\\min_{i\\to j}f_{j,1}+w(i,j)\\\\\nf_{i,1}=\\max_{i\\to j}f_{j,0}+w(i,j)\n\\end{aligned}\n$$\n\n\u5982\u679c\u8fd9\u4e2a\u6709\u5411\u56fe\u662f\u4e2a DAG\uff0c\u90a3\u5c31\u975e\u5e38\u597d\u89e3\u51b3\u3002\u73b0\u5728\u8fd9\u4e2a\u56fe\u6709\u73af\u4e86\uff0c\u5904\u7406\u52a8\u6001\u89c4\u5212\u8f6c\u79fb\u987a\u5e8f\u7684\u95ee\u9898\u5c31\u4f1a\u6bd4\u8f83\u68d8\u624b\u3002\n\n\u6709\u4e00\u79cd\u60f3\u6cd5\u662f\u5728\u73af\u4e2d\u76f4\u63a5\u8f93\u51fa `INFINITY`\u3002\u4f46\u662f\u6837\u4f8b\u4e09\u5c31\u5426\u5b9a\u4e86\u8fd9\u4e2a\u60f3\u6cd5\u3002\u5c1d\u8bd5\u53bb\u6539\u8fdb\u5b83\uff1a\n\n- \u5bf9\u4e8e $f_{i,0}$\uff1a\u5982\u679c\u5b58\u5728\u4e00\u4e2a\u51fa\u70b9 $j$ \u6ee1\u8db3 $f_{j,1}$ \u6709\u503c\uff0c\u90fd\u53ef\u4ee5\u88ab\u66f4\u65b0\u3002\n\n- \u5bf9\u4e8e $f_{i,1}$\uff1a\u53ea\u6709\u5b83\u7684\u6240\u6709\u51fa\u70b9 $j$ \u5747\u6ee1\u8db3 $f_{j,0}$ \u6709\u503c\uff0c\u624d\u53ef\u4ee5\u53bb\u66f4\u65b0\u5b83\u3002\n\n\u6211\u4eec\u7528\u7c7b\u4f3c Dijkstra \u7684\u65b9\u6cd5\u53bb\u505a\u8f6c\u79fb\uff1a\u7ef4\u62a4\u4e00\u4e2a\u4f18\u5148\u961f\u5217\uff0c\u6bcf\u5f53\u5f97\u5230\u4e00\u4e2a $f_{x,k}$ \u65f6\uff0c\u5c31\u5728\u53cd\u5411\u56fe\u4e2d\u677e\u5f1b $f_{y,1-k}$\uff08\u5b58\u5728\u8fb9 $x\\to y$\uff09\u3002\u518d\u5957\u7528\u4e0a\u9762\u7684\u66f4\u65b0\u89c4\u5219\u5f80\u4f18\u5148\u961f\u5217\u4e2d\u52a0\u70b9\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m\\log n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define For(i,a,b) for(int i=(a);i<=(b);++i)\n#define Rof(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\ntypedef pair<int,int> Pair;\nconst int Maxn=2e5;\nconst ll inf=1e18;\n\ninline int read()\n{\n    char ch=getchar();\n    int f=1,x=0;\n    while(ch>'9' || ch<'0')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;\n}\n\nint n,m,s,oud[Maxn+5][2];\nint vis[Maxn+5][2]; ll f[Maxn+5][2];\nvector<Pair> v[Maxn+5],w[Maxn+5];\nstruct Node{int x,y; ll z;};\nbool operator<(Node a,Node b) {return a.z>b.z;}\npriority_queue<Node> q;\n\ninline void bfs()\n{\n    while(!q.empty())\n    {\n        Node k=q.top(); q.pop();\n        int x=k.x,t=k.y;\n        if(vis[x][t]) continue;\n        vis[x][t]=1;\n        for(auto i:w[x])\n        {\n            int y=i.first,z=i.second; oud[y][t^1]--;\n            if(t==1) f[y][0]=min(f[y][0],f[x][1]+z);\n            if(t==0) f[y][1]=max(f[y][1],f[x][0]+z);\n            if(!oud[y][t^1]) q.push((Node){y,t^1,f[y][t^1]});\n            else if(t==1) q.push((Node){y,0,f[y][0]});\n        }\n    }\n}\n\nint main()\n{\n    n=read(),m=read(),s=read();\n    For(i,1,m)\n    {\n        int a=read(),b=read(),c=read();\n        v[a].push_back(make_pair(b,c));\n        w[b].push_back(make_pair(a,c));\n        oud[a][0]++,oud[a][1]++;\n    }\n    For(i,1,n) f[i][0]=inf;\n    For(i,1,n)\n        if(!oud[i][0])\n        {\n            f[i][0]=f[i][1]=0;\n            q.push((Node){i,0,0});\n            q.push((Node){i,1,0});\n        }\n    bfs();\n    if(!vis[s][0]) printf(\"INFINITY\\n\");\n    else printf(\"%lld\\n\",f[s][0]);\n    return 0;\n}\n```",
        "postTime": 1666683628,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 [ABC261Ex] Game on Graph"
    }
]