[
    {
        "content": "## O(1)\u7b97\u6cd5\uff0c\u4e0d\u7528DP\u3001\u4e0d\u7528\u5faa\u73af\uff0c\u751a\u81f3\u53d8\u91cf\u90fd\u53ea\u9700\u8981\u4e24\u4e2a\uff01\n\n\n### **\u5148\u4e0a\u601d\u8def\uff1a**\n\n####  _\u6211\u4eec\u4e00\u4f4d\u4e00\u4f4d\u7684\u770b\u3002_ \n\n\u9996\u5148\uff0c\u4e2a\u4f4d\u7684$1$\u6709\u51e0\u4e2a\uff1f \u90a3\u5c31\u662f$n/10+1$,\u8fd9\u4e2a\u5f88\u5bb9\u6613\uff1b\n\n\u63a5\u7740\uff0c\u5341\u4f4d\u7684$1$\u6709\u51e0\u4e2a\uff1f\u8fd9\u65f6\uff0c\u53ef\u80fd\u6709\u670b\u53cb\u5c31\u4f1a\u8bf4\u4e86\uff08\u5305\u62ec\u6211\uff09\uff0c\u90a3\u4e0d\u5c31\u662f$n/100+1$\u561b\u3002\u4e14\u6162\uff0c\u9664\u4e86$10$\u3001$100$\u3001$1000$\u8fd9\u4e9b\u4ee5\u5916\uff0c\u8fd8\u6709$11$\u3001$12$\u3001$13......$\u6240\u4ee5\uff0c\u6b63\u786e\u7684\u5f0f\u5b50\u5e94\u8be5\u662f$(n/10+1)*10$\u3002\n\n\u90a3\u767e\u4f4d\u5462\uff1f\u5c31\u662f$(n/1000+1)*100$\u3002\n\n\u4ee5\u6b64\u7c7b\u63a8$......$\n\n\n------------\n\n\n### \u6ce8\u610f\uff1a\n\n- \u8fd9\u4e2a\u4ee3\u7801\u5f88\u5bb9\u6613\u88ab\u5361\u6389\uff0c\u6bd4\u5982\u6570\u636e$12$\uff0c\u8fd9\u4e2a\u7a0b\u5e8f\u7b97\u51fa\u6765\u7684\u5c31\u662f$12$\uff1b\u4e3a\u4ec0\u4e48\u4f1a\u8fd9\u6837\u5462\uff1f\n\n  \u56e0\u4e3a$1$~$12$\u4e2d\uff0c$13,14,15,16,17,18,19$\u4e2d\u5341\u4f4d\u76841\u90fd\u4e0d\u80fd\u7b97\u5165\u603b\u6570\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u8fd8\u8981\u7279\u5224\u4e00\u4e0b\u8fd9\u79cd\u60c5\u51b5\u3002\n  \n\n------------\n\n\n\u4e07\u4e8b\u4ff1\u5907\uff0c\u4e0a\u4ee3\u7801\uff1a\n```\n#include <bits/stdc++.h>\nusing namespace std;\nlong long min(long long a,long long b)\n//\u624b\u5199min\uff08\u53ef\u4ee5\u7701\u7565\uff09\n{\n  if(a>b) return b;\n  else return a;\n}\nint main()\n{\n  int n,ans=0;\n  cin>>n;\n  //\u5f00\u59cb\u8ba1\u7b97~\n  if(n>=1)\n  {\n    ans+=(n/10+1)*1;\n    if(n%10<2-1)//\u4e0a\u6587\u6240\u8bf4\u7684\u7279\u5224\n      ans-=min(1,2-n%10-1);\n  }\n  if(n>=10)\n  {\n    ans+=(n/100+1)*10;\n    if(n%100<20-1)\n      ans-=min(10,20-n%100-1);\n      //\u8fd9\u91cc\u7528min\uff0c\u662f\u4e3a\u4e86\u9632\u6b62\u51fa\u73b0\u51cf\u53bb\u7684\u6570\u8fc7\u5927\uff08\u6bd4\u5982\n      100\uff0c\u53ef\u4ee5\u81ea\u5df1\u8bd5\u4e00\u8bd5\uff09\uff1b\n  }\n  if(n>=100)\n  {\n    ans+=(n/1000+1)*100;\n    if(n%1000<200-1)\n      ans-=min(100,200-n%1000-1);\n  }\n  if(n>=1000)\n  {\n    ans+=(n/10000+1)*1000;\n    if(n%10000<2000-1)\n      ans-=min(1000,2000-n%10000-1);\n  }\n  if(n>=10000)\n  {\n    ans+=(n/100000+1)*10000;\n    if(n%100000<20000-1)\n      ans-=min(10000,20000-n%100000-1);\n  }\n  if(n>=100000)\n  {\n    ans+=(n/1000000+1)*100000;\n    if(n%1000000<200000-1)\n      ans-=min(100000,200000-n%1000000-1);\n  }\n  if(n>=1000000)\n  {\n    ans+=(n/10000000+1)*1000000;\n    if(n%10000000<2000000-1)\n      ans-=min(1000000,2000000-n%10000000-1);\n  }\n  if(n>=10000000)\n  {\n    ans+=(n/100000000+1)*10000000;\n    if(n%100000000<20000000-1)\n      ans-=min(10000000,20000000-n%100000000-1);\n  }\n  if(n>=100000000)\n  {\n    ans+=(n/1000000000+1)*100000000;\n    if(n%1000000000<200000000-1)\n      ans-=min(100000000,200000000-n%1000000000-1);\n  }\n  if(n>=1000000000)\n  {\n    ans+=(n/10000000000+1)*1000000000;\n    if(n%10000000000<2000000000-1)\n      ans-=min(1000000000,2000000000-n%10000000000-1);\n  }\n  cout<<ans<<endl;\n  return 0;\n}\n\n```\n\n\u4eb2\u6d4bAC\uff0c\u6240\u6709\u6570\u636e$1ms$\u8fc7\u3002\n\n\u5199\u9898\u89e3\u4e0d\u6613\uff0c\u89c9\u5f97\u597d\u7684\uff0c\u7ed9\u4e2a\u8d5e\u518d\u8d70\u5457~",
        "postTime": 1585095823,
        "uid": 288716,
        "name": "lzqy_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT1483 \u30101\u3011"
    },
    {
        "content": "\u8fd9\u9898\u6570\u636e\u6709\u70b9\u6bd2\u554a\uff0c\u6570\u636e\u5f88\u5927\uff0c\u5f00\u5c40TLE11\uff0c\n$ O(nlog_{10}n) $\u4f1a\u8d85\u65f6\uff0c\u7528$ O(log_{10}n) $\u5373\u53ef\u3002\n\n\n```cpp\n#include <cstdio>\nint main()\n{\n    unsigned long long h,m=10,ans=0;//\u4e0d\u89e3\u91ca\u7684\u5b9a\u4e49\uff0c\u56e0\u4e3a\u6570\u636e\u5927\uff0c\u7528unsigned long long\u3002\n    scanf(\"%lld\",&h);//\u4e0d\u89e3\u91ca\u7684\u8bfb\u5165\u3002\n    while(h/m>0)//\u6765\u4e00\u4e2a\u5faa\u73af\u3002\n    {\n        ans+=(h-h%m)/10+(h%m>=1*m/10?(h%m<(1+1)*m/10?h%m-1*m/10+1:m/10):0);//\u770b\u4e0d\u61c2\u7684\u53bb\u4e86\u89e3\u4e00\u4e0b\u4e09\u76ee\u8fd0\u7b97\u7b26\uff0c\u628a\u8fd9\u53e5\u8bdd\u62c6\u5f00\u5c31\u884c\u3002\n        m*=10;\n    }\n    ans+=(h%m>=1*m/10?(h%m<(1+1)*m/10?h%m-1*m/10+1:m/10):0);//\u540c\u4e0a\uff0c\u5c31\u662f\u6709\u70b9\u957f\uff0c\u521d\u5b66\u8005\u6709\u70b9\u8010\u5fc3\u3002\n    printf(\"%lld\\n\",ans);//AT\u7684\u4e60\u60ef\uff0c\u6362\u884c\uff0c\u6362\u884c\uff0c\u6362\u884c\u3002\u5927\u4f6cYangWill\u5c31\u56e0\u4e3a\u8fd9\u4e2a\u7206\u96f6\u3002\n    return 0;\n}\n```\nP.S.\u5c3d\u91cf\u7528scanf\u548cprintf\uff0ccin\u548ccout\u9762\u5bf9\u5927\u6570\u636e\u5f88\u6162\uff0c\u7279\u6162\uff0c\u4e0d\u89e3\u91ca\u7684\u6162\u3002\n\n\u8fd9\u4e2a\u9898\u5bf9\u4e8e\u521d\u5b66\u8005\u6765\u770b\u6709\u4e00\u5b9a\u96be\u5ea6\uff0c\u4f46\u503c\u5f97\u601d\u8003\u53bb\u505a\uff0c\u633a\u8003\u9a8c\u601d\u8003\u80fd\u529b\u3002",
        "postTime": 1523796295,
        "uid": 79019,
        "name": "\u521d\u97f3Miku",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT1483 \u30101\u3011"
    },
    {
        "content": "\u672c\u849f\u84bb\u521a\u5b66\u6570\u4f4dDP\uff0c\u8bf7\u5927\u5bb6\u591a\u591a\u6307\u6559\u3002\uff08\u6211\u53ea\u4f1a\u4e00\u79cd\u5199\u6cd5\uff09\n\n\u672c\u9898\u662f\u6570\u4f4dDP\u7684\u6a21\u677f\u3002\n\n\u601d\u8def\uff1a\u5148\u628a\u6570\u7ed9\u62c6\u4e86\uff0c\u7528DFS\u641c\u7d22\u5404\u4e2a\u6570\u4f4d\uff0c\u628a1\u7684\u4e2a\u6570\u7d2f\u52a0\uff0c\u5728\u6700\u540e\u8fd4\u56de1\u7684\u4e2a\u6570\u3002\u5728\u8fd4\u56de\u65f6\u7d2f\u52a01\u7684\u4e2a\u6570\u5373\u53ef\u3002\n\n~~\u9898\u76ee\u5f88\u6c34\uff0c\u6570\u636e\u4e0d\u5927~~\n\n\n------------\n\n\n```cpp\n#include<iostream>\n#include<cstring>\nusing namespace std;\nint a[101],t[10][100];\nint dfs(int k,int sum,int ok)\n/*k\u4e3a\u6570\u4f4d\uff0csum\u4e3a1\u7684\u4e2a\u6570\uff0cok\u4e3a\u8981\u4e0d\u8981\u641c\u52309*/\n{\n\tif(k==0)return sum;//\u8fd4\u56de1\u7684\u4e2a\u6570\n\tint end=ok?a[k]:9;//\u770b\u770b\u8981\u4e0d\u8981\u641c\u52309\n\tint s=0;//\u4ece0\u5f00\u59cb\u7d2f\u52a0\n\tif(!ok&&t[sum][k]!=0)return t[sum][k];//\u8bb0\u5fc6\u5316\n\tfor(int i=0;i<=end;i++)\n\t{\n\t\ts+=dfs(k-1,sum+(i==1),ok&&i==end);//\u7d2f\u52a0\n\t}\n\tt[sum][k]=s;//\u8bb0\u5fc6\u5316\n\treturn s;//\u8fd4\u56de\u7d2f\u52a01\u7684\u4e2a\u6570\n}\nint chai(int n)\n{\n\t//if(n==0)return 0;\n\tmemset(a,0,sizeof(a));\n\tmemset(t,0,sizeof(t));//\u53ef\u4ee5\u628a\u8fd9\u4e24\u884c\u5199\u5728main\u51fd\u6570\u4e2d\n\tint i=0;\n\twhile(n!=0)//\u62c6\n\t{\n\t\ti++;\n\t\ta[i]=n%10;//\u5b58\u5728a[i]\u91cc\n\t\tn/=10;\n\t}\n\treturn dfs(i,0,1);//\u641c\n}\nint main()\n{\n\tint n,m;\n\tcin>>n;//\u8f93\u5165\u4e0d\u89e3\u91ca\n\tcout<<chai(n)<<endl;//\u4e00\u5b9a\u8981\u6362\u884c\uff01\u6211\u66fe\u56e0\u6b64\u72060\n\treturn 0;\n}\n```",
        "postTime": 1552226241,
        "uid": 89445,
        "name": "\u9648\u664b\u884d",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT1483 \u30101\u3011"
    },
    {
        "content": "\u5e76\u6ca1\u6709\u4eba\u5206\u6bb5\u6253\u8868\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate<class T>void write(T x){\n\tif(x<0)putchar('-'),x=-x;\n\tif(x>=10)write(x/10);\n\tputchar(x%10+48);\n}\n#define B 2000000\nint n;\nint ans;\nint h[1000000000/B+1]={0,2200000,3400000,4600000,5800000,7000001,11200001,14400001,17600001,20800001,24000000,26200000,27400000,28600000,29800000,31000000,33200000,34400000,35600000,36800000,38000000,40200000,41400000,42600000,43800000,45000000,47200000,48400000,49600000,50800000,52000000,54200000,55400000,56600000,57800000,59000000,61200000,62400000,63600000,64800000,66000000,68200000,69400000,70600000,71800000,73000000,75200000,76400000,77600000,78800000,80000001,84200001,87400001,90600001,93800001,97000002,103200002,108400002,113600002,118800002,124000001,128200001,131400001,134600001,137800001,141000001,145200001,148400001,151600001,154800001,158000001,162200001,165400001,168600001,171800001,175000001,179200001,182400001,185600001,188800001,192000001,196200001,199400001,202600001,205800001,209000001,213200001,216400001,219600001,222800001,226000001,230200001,233400001,236600001,239800001,243000001,247200001,250400001,253600001,256800001,260000000,262200000,263400000,264600000,265800000,267000001,271200001,274400001,277600001,280800001,284000000,286200000,287400000,288600000,289800000,291000000,293200000,294400000,295600000,296800000,298000000,300200000,301400000,302600000,303800000,305000000,307200000,308400000,309600000,310800000,312000000,314200000,315400000,316600000,317800000,319000000,321200000,322400000,323600000,324800000,326000000,328200000,329400000,330600000,331800000,333000000,335200000,336400000,337600000,338800000,340000000,342200000,343400000,344600000,345800000,347000001,351200001,354400001,357600001,360800001,364000000,366200000,367400000,368600000,369800000,371000000,373200000,374400000,375600000,376800000,378000000,380200000,381400000,382600000,383800000,385000000,387200000,388400000,389600000,390800000,392000000,394200000,395400000,396600000,397800000,399000000,401200000,402400000,403600000,404800000,406000000,408200000,409400000,410600000,411800000,413000000,415200000,416400000,417600000,418800000,420000000,422200000,423400000,424600000,425800000,427000001,431200001,434400001,437600001,440800001,444000000,446200000,447400000,448600000,449800000,451000000,453200000,454400000,455600000,456800000,458000000,460200000,461400000,462600000,463800000,465000000,467200000,468400000,469600000,470800000,472000000,474200000,475400000,476600000,477800000,479000000,481200000,482400000,483600000,484800000,486000000,488200000,489400000,490600000,491800000,493000000,495200000,496400000,497600000,498800000,500000000,502200000,503400000,504600000,505800000,507000001,511200001,514400001,517600001,520800001,524000000,526200000,527400000,528600000,529800000,531000000,533200000,534400000,535600000,536800000,538000000,540200000,541400000,542600000,543800000,545000000,547200000,548400000,549600000,550800000,552000000,554200000,555400000,556600000,557800000,559000000,561200000,562400000,563600000,564800000,566000000,568200000,569400000,570600000,571800000,573000000,575200000,576400000,577600000,578800000,580000000,582200000,583400000,584600000,585800000,587000001,591200001,594400001,597600001,600800001,604000000,606200000,607400000,608600000,609800000,611000000,613200000,614400000,615600000,616800000,618000000,620200000,621400000,622600000,623800000,625000000,627200000,628400000,629600000,630800000,632000000,634200000,635400000,636600000,637800000,639000000,641200000,642400000,643600000,644800000,646000000,648200000,649400000,650600000,651800000,653000000,655200000,656400000,657600000,658800000,660000000,662200000,663400000,664600000,665800000,667000001,671200001,674400001,677600001,680800001,684000000,686200000,687400000,688600000,689800000,691000000,693200000,694400000,695600000,696800000,698000000,700200000,701400000,702600000,703800000,705000000,707200000,708400000,709600000,710800000,712000000,714200000,715400000,716600000,717800000,719000000,721200000,722400000,723600000,724800000,726000000,728200000,729400000,730600000,731800000,733000000,735200000,736400000,737600000,738800000,740000000,742200000,743400000,744600000,745800000,747000001,751200001,754400001,757600001,760800001,764000000,766200000,767400000,768600000,769800000,771000000,773200000,774400000,775600000,776800000,778000000,780200000,781400000,782600000,783800000,785000000,787200000,788400000,789600000,790800000,792000000,794200000,795400000,796600000,797800000,799000000,801200000,802400000,803600000,804800000,806000000,808200000,809400000,810600000,811800000,813000000,815200000,816400000,817600000,818800000,820000000,822200000,823400000,824600000,825800000,827000001,831200001,834400001,837600001,840800001,844000000,846200000,847400000,848600000,849800000,851000000,853200000,854400000,855600000,856800000,858000000,860200000,861400000,862600000,863800000,865000000,867200000,868400000,869600000,870800000,872000000,874200000,875400000,876600000,877800000,879000000,881200000,882400000,883600000,884800000,886000000,888200000,889400000,890600000,891800000,893000000,895200000,896400000,897600000,898800000,900000001};\nint calc(int x){\n\tint ret=0;\n\twhile(x){\n\t\tret+=x%10==1;\n\t\tx/=10;\n\t}\n\treturn ret;\n}\nsigned main(){/*\n\tfreopen(\"testdata.in\",\"w\",stdout);\n\tfor(register int i=0;i<=1e9;i++){\n\t\tans+=calc(i);\n\t\tif(i%B==0)write(ans),putchar(',');\n\t}*/\n\tcin>>n;\n\tans=h[n/B];\n\tfor(int i=n/B*B+1;i<=n;i++)ans+=calc(i);\n\twrite(ans),putchar('\\n');\n}\n\n```\n### Tips\n\u9762\u5bf9$1e9$\u7684\u6c34\u6570\u636e\uff0c\u53ef\u4ee5\u8003\u8651\u5206\u6bb5\u6253\u8868\u3002\n\n~~\u5783\u573e\u65e5\u672c\u9898\u8fd8\u8981\u7ed3\u5c3e\u6362\u884c\uff0c\u5bb3\u6211$WA$\u4e24\u6b21\uff0c\u5dee\u8bc4~~",
        "postTime": 1604715846,
        "uid": 100325,
        "name": "peterwuyihong",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT1483 \u30101\u3011"
    },
    {
        "content": "# \u533a\u95f4\u6253\u8868\u80fd\u8fc7\n\n\u8003\u8651\u5230\u8f93\u5165\u6bd4\u8f83\u5355\u4e00\uff0c\u8003\u8651\u6253\u8868\u3002\n\n\u4f46\u56e0\u4e3a $n$ \u6bd4\u8f83\u5927\uff0c\u4e0d\u80fd\u6253\u51fa\u5168\u90e8\u7684\u8868\uff0c\u8003\u8651\u533a\u95f4\u6253\u8868\u3002\n\n\u5148\u66b4\u529b\u6c42\u89e3\uff0c\u7136\u540e\u6bcf\u9694\u4e00\u6bb5\u5c31\u8f93\u51fa\u4e00\u6b21\u7ed3\u679c\uff0c\u8fd9\u5c31\u662f\u533a\u95f4\u6253\u8868\u3002\n\n\u603b\u7684\u6765\u8bf4\uff0c\u533a\u95f4\u6253\u8868\u53ef\u4ee5\u9a97\u5206\uff0cAC\uff0c\u751a\u81f3\u62ff\u5230\u6700\u4f18\u89e3\u3002\n\n\u6253\u8868\u7a0b\u5e8f\uff1a\n```cpp\n#include<iostream>\n#include<cstdio> \nusing namespace std;\nint ans=0;\nvoid check(int x){\n\twhile(x){\n\t\tif(x%10==1)\n\t\t\tans++;\n\t\tx/=10;\n\t}\n}\nint main(){\n\tfreopen(\"dabiao.out\",\"w\",stdout);\n\tfor(int i=1;i<=1e9;i++){\n\t\tcheck(i);\n\t\tif(i%1000000==0)\n\t\t\tcout<<ans<<\",\";\n\t}\n\treturn 0;\n}\n\n```\n# \u6253\u8868\u7ed3\u679c\uff1a\n```cpp\n600001,2200000,2800000,3400000,4000000,4600000,5200000,5800000,6400000,7000001,8600002,11200001,12800001,14400001,16000001,17600001,19200001,20800001,22400001,24000000,24600001,26200000,26800000,27400000,28000000,28600000,29200000,29800000,30400000,31000000,31600001,33200000,33800000,34400000,35000000,35600000,36200000,36800000,37400000,38000000,38600001,40200000,40800000,41400000,42000000,42600000,43200000,43800000,44400000,45000000,45600001,47200000,47800000,48400000,49000000,49600000,50200000,50800000,51400000,52000000,52600001,54200000,54800000,55400000,56000000,56600000,57200000,57800000,58400000,59000000,59600001,61200000,61800000,62400000,63000000,63600000,64200000,64800000,65400000,66000000,66600001,68200000,68800000,69400000,70000000,70600000,71200000,71800000,72400000,73000000,73600001,75200000,75800000,76400000,77000000,77600000,78200000,78800000,79400000,80000001,81600002,84200001,85800001,87400001,89000001,90600001,92200001,93800001,95400001,97000002,99600003,103200002,105800002,108400002,111000002,113600002,116200002,118800002,121400002,124000001,125600002,128200001,129800001,131400001,133000001,134600001,136200001,137800001,139400001,141000001,142600002,145200001,146800001,148400001,150000001,151600001,153200001,154800001,156400001,158000001,159600002,162200001,163800001,165400001,167000001,168600001,170200001,171800001,173400001,175000001,176600002,179200001,180800001,182400001,184000001,185600001,187200001,188800001,190400001,192000001,193600002,196200001,197800001,199400001,201000001,202600001,204200001,205800001,207400001,209000001,210600002,213200001,214800001,216400001,218000001,219600001,221200001,222800001,224400001,226000001,227600002,230200001,231800001,233400001,235000001,236600001,238200001,239800001,241400001,243000001,244600002,247200001,248800001,250400001,252000001,253600001,255200001,256800001,258400001,260000000,260600001,262200000,262800000,263400000,264000000,264600000,265200000,265800000,266400000,267000001,268600002,271200001,272800001,274400001,276000001,277600001,279200001,280800001,282400001,284000000,284600001,286200000,286800000,287400000,288000000,288600000,289200000,289800000,290400000,291000000,291600001,293200000,293800000,294400000,295000000,295600000,296200000,296800000,297400000,298000000,298600001,300200000,300800000,301400000,302000000,302600000,303200000,303800000,304400000,305000000,305600001,307200000,307800000,308400000,309000000,309600000,310200000,310800000,311400000,312000000,312600001,314200000,314800000,315400000,316000000,316600000,317200000,317800000,318400000,319000000,319600001,321200000,321800000,322400000,323000000,323600000,324200000,324800000,325400000,326000000,326600001,328200000,328800000,329400000,330000000,330600000,331200000,331800000,332400000,333000000,333600001,335200000,335800000,336400000,337000000,337600000,338200000,338800000,339400000,340000000,340600001,342200000,342800000,343400000,344000000,344600000,345200000,345800000,346400000,347000001,348600002,351200001,352800001,354400001,356000001,357600001,359200001,360800001,362400001,364000000,364600001,366200000,366800000,367400000,368000000,368600000,369200000,369800000,370400000,371000000,371600001,373200000,373800000,374400000,375000000,375600000,376200000,376800000,377400000,378000000,378600001,380200000,380800000,381400000,382000000,382600000,383200000,383800000,384400000,385000000,385600001,387200000,387800000,388400000,389000000,389600000,390200000,390800000,391400000,392000000,392600001,394200000,394800000,395400000,396000000,396600000,397200000,397800000,398400000,399000000,399600001,401200000,401800000,402400000,403000000,403600000,404200000,404800000,405400000,406000000,406600001,408200000,408800000,409400000,410000000,410600000,411200000,411800000,412400000,413000000,413600001,415200000,415800000,416400000,417000000,417600000,418200000,418800000,419400000,420000000,420600001,422200000,422800000,423400000,424000000,424600000,425200000,425800000,426400000,427000001,428600002,431200001,432800001,434400001,436000001,437600001,439200001,440800001,442400001,444000000,444600001,446200000,446800000,447400000,448000000,448600000,449200000,449800000,450400000,451000000,451600001,453200000,453800000,454400000,455000000,455600000,456200000,456800000,457400000,458000000,458600001,460200000,460800000,461400000,462000000,462600000,463200000,463800000,464400000,465000000,465600001,467200000,467800000,468400000,469000000,469600000,470200000,470800000,471400000,472000000,472600001,474200000,474800000,475400000,476000000,476600000,477200000,477800000,478400000,479000000,479600001,481200000,481800000,482400000,483000000,483600000,484200000,484800000,485400000,486000000,486600001,488200000,488800000,489400000,490000000,490600000,491200000,491800000,492400000,493000000,493600001,495200000,495800000,496400000,497000000,497600000,498200000,498800000,499400000,500000000,500600001,502200000,502800000,503400000,504000000,504600000,505200000,505800000,506400000,507000001,508600002,511200001,512800001,514400001,516000001,517600001,519200001,520800001,522400001,524000000,524600001,526200000,526800000,527400000,528000000,528600000,529200000,529800000,530400000,531000000,531600001,533200000,533800000,534400000,535000000,535600000,536200000,536800000,537400000,538000000,538600001,540200000,540800000,541400000,542000000,542600000,543200000,543800000,544400000,545000000,545600001,547200000,547800000,548400000,549000000,549600000,550200000,550800000,551400000,552000000,552600001,554200000,554800000,555400000,556000000,556600000,557200000,557800000,558400000,559000000,559600001,561200000,561800000,562400000,563000000,563600000,564200000,564800000,565400000,566000000,566600001,568200000,568800000,569400000,570000000,570600000,571200000,571800000,572400000,573000000,573600001,575200000,575800000,576400000,577000000,577600000,578200000,578800000,579400000,580000000,580600001,582200000,582800000,583400000,584000000,584600000,585200000,585800000,586400000,587000001,588600002,591200001,592800001,594400001,596000001,597600001,599200001,600800001,602400001,604000000,604600001,606200000,606800000,607400000,608000000,608600000,609200000,609800000,610400000,611000000,611600001,613200000,613800000,614400000,615000000,615600000,616200000,616800000,617400000,618000000,618600001,620200000,620800000,621400000,622000000,622600000,623200000,623800000,624400000,625000000,625600001,627200000,627800000,628400000,629000000,629600000,630200000,630800000,631400000,632000000,632600001,634200000,634800000,635400000,636000000,636600000,637200000,637800000,638400000,639000000,639600001,641200000,641800000,642400000,643000000,643600000,644200000,644800000,645400000,646000000,646600001,648200000,648800000,649400000,650000000,650600000,651200000,651800000,652400000,653000000,653600001,655200000,655800000,656400000,657000000,657600000,658200000,658800000,659400000,660000000,660600001,662200000,662800000,663400000,664000000,664600000,665200000,665800000,666400000,667000001,668600002,671200001,672800001,674400001,676000001,677600001,679200001,680800001,682400001,684000000,684600001,686200000,686800000,687400000,688000000,688600000,689200000,689800000,690400000,691000000,691600001,693200000,693800000,694400000,695000000,695600000,696200000,696800000,697400000,698000000,698600001,700200000,700800000,701400000,702000000,702600000,703200000,703800000,704400000,705000000,705600001,707200000,707800000,708400000,709000000,709600000,710200000,710800000,711400000,712000000,712600001,714200000,714800000,715400000,716000000,716600000,717200000,717800000,718400000,719000000,719600001,721200000,721800000,722400000,723000000,723600000,724200000,724800000,725400000,726000000,726600001,728200000,728800000,729400000,730000000,730600000,731200000,731800000,732400000,733000000,733600001,735200000,735800000,736400000,737000000,737600000,738200000,738800000,739400000,740000000,740600001,742200000,742800000,743400000,744000000,744600000,745200000,745800000,746400000,747000001,748600002,751200001,752800001,754400001,756000001,757600001,759200001,760800001,762400001,764000000,764600001,766200000,766800000,767400000,768000000,768600000,769200000,769800000,770400000,771000000,771600001,773200000,773800000,774400000,775000000,775600000,776200000,776800000,777400000,778000000,778600001,780200000,780800000,781400000,782000000,782600000,783200000,783800000,784400000,785000000,785600001,787200000,787800000,788400000,789000000,789600000,790200000,790800000,791400000,792000000,792600001,794200000,794800000,795400000,796000000,796600000,797200000,797800000,798400000,799000000,799600001,801200000,801800000,802400000,803000000,803600000,804200000,804800000,805400000,806000000,806600001,808200000,808800000,809400000,810000000,810600000,811200000,811800000,812400000,813000000,813600001,815200000,815800000,816400000,817000000,817600000,818200000,818800000,819400000,820000000,820600001,822200000,822800000,823400000,824000000,824600000,825200000,825800000,826400000,827000001,828600002,831200001,832800001,834400001,836000001,837600001,839200001,840800001,842400001,844000000,844600001,846200000,846800000,847400000,848000000,848600000,849200000,849800000,850400000,851000000,851600001,853200000,853800000,854400000,855000000,855600000,856200000,856800000,857400000,858000000,858600001,860200000,860800000,861400000,862000000,862600000,863200000,863800000,864400000,865000000,865600001,867200000,867800000,868400000,869000000,869600000,870200000,870800000,871400000,872000000,872600001,874200000,874800000,875400000,876000000,876600000,877200000,877800000,878400000,879000000,879600001,881200000,881800000,882400000,883000000,883600000,884200000,884800000,885400000,886000000,886600001,888200000,888800000,889400000,890000000,890600000,891200000,891800000,892400000,893000000,893600001,895200000,895800000,896400000,897000000,897600000,898200000,898800000,899400000,900000001,\n```\n# \u6700\u7ec8\u7a0b\u5e8f\uff1a\n```cpp\n#include<iostream>\n#include<cstdio> \nusing namespace std;\n\nint n,ans=0;\nvoid check(int x){\n\twhile(x){\n\t\tif(x%10==1)\n\t\t\tans++;\n\t\tx/=10;\n\t}\n}\nint a[]={0,600001,2200000,2800000,3400000,4000000,4600000,5200000,5800000,6400000,7000001,8600002,11200001,12800001,14400001,16000001,17600001,19200001,20800001,22400001,24000000,24600001,26200000,26800000,27400000,28000000,28600000,29200000,29800000,30400000,31000000,31600001,33200000,33800000,34400000,35000000,35600000,36200000,36800000,37400000,38000000,38600001,40200000,40800000,41400000,42000000,42600000,43200000,43800000,44400000,45000000,45600001,47200000,47800000,48400000,49000000,49600000,50200000,50800000,51400000,52000000,52600001,54200000,54800000,55400000,56000000,56600000,57200000,57800000,58400000,59000000,59600001,61200000,61800000,62400000,63000000,63600000,64200000,64800000,65400000,66000000,66600001,68200000,68800000,69400000,70000000,70600000,71200000,71800000,72400000,73000000,73600001,75200000,75800000,76400000,77000000,77600000,78200000,78800000,79400000,80000001,81600002,84200001,85800001,87400001,89000001,90600001,92200001,93800001,95400001,97000002,99600003,103200002,105800002,108400002,111000002,113600002,116200002,118800002,121400002,124000001,125600002,128200001,129800001,131400001,133000001,134600001,136200001,137800001,139400001,141000001,142600002,145200001,146800001,148400001,150000001,151600001,153200001,154800001,156400001,158000001,159600002,162200001,163800001,165400001,167000001,168600001,170200001,171800001,173400001,175000001,176600002,179200001,180800001,182400001,184000001,185600001,187200001,188800001,190400001,192000001,193600002,196200001,197800001,199400001,201000001,202600001,204200001,205800001,207400001,209000001,210600002,213200001,214800001,216400001,218000001,219600001,221200001,222800001,224400001,226000001,227600002,230200001,231800001,233400001,235000001,236600001,238200001,239800001,241400001,243000001,244600002,247200001,248800001,250400001,252000001,253600001,255200001,256800001,258400001,260000000,260600001,262200000,262800000,263400000,264000000,264600000,265200000,265800000,266400000,267000001,268600002,271200001,272800001,274400001,276000001,277600001,279200001,280800001,282400001,284000000,284600001,286200000,286800000,287400000,288000000,288600000,289200000,289800000,290400000,291000000,291600001,293200000,293800000,294400000,295000000,295600000,296200000,296800000,297400000,298000000,298600001,300200000,300800000,301400000,302000000,302600000,303200000,303800000,304400000,305000000,305600001,307200000,307800000,308400000,309000000,309600000,310200000,310800000,311400000,312000000,312600001,314200000,314800000,315400000,316000000,316600000,317200000,317800000,318400000,319000000,319600001,321200000,321800000,322400000,323000000,323600000,324200000,324800000,325400000,326000000,326600001,328200000,328800000,329400000,330000000,330600000,331200000,331800000,332400000,333000000,333600001,335200000,335800000,336400000,337000000,337600000,338200000,338800000,339400000,340000000,340600001,342200000,342800000,343400000,344000000,344600000,345200000,345800000,346400000,347000001,348600002,351200001,352800001,354400001,356000001,357600001,359200001,360800001,362400001,364000000,364600001,366200000,366800000,367400000,368000000,368600000,369200000,369800000,370400000,371000000,371600001,373200000,373800000,374400000,375000000,375600000,376200000,376800000,377400000,378000000,378600001,380200000,380800000,381400000,382000000,382600000,383200000,383800000,384400000,385000000,385600001,387200000,387800000,388400000,389000000,389600000,390200000,390800000,391400000,392000000,392600001,394200000,394800000,395400000,396000000,396600000,397200000,397800000,398400000,399000000,399600001,401200000,401800000,402400000,403000000,403600000,404200000,404800000,405400000,406000000,406600001,408200000,408800000,409400000,410000000,410600000,411200000,411800000,412400000,413000000,413600001,415200000,415800000,416400000,417000000,417600000,418200000,418800000,419400000,420000000,420600001,422200000,422800000,423400000,424000000,424600000,425200000,425800000,426400000,427000001,428600002,431200001,432800001,434400001,436000001,437600001,439200001,440800001,442400001,444000000,444600001,446200000,446800000,447400000,448000000,448600000,449200000,449800000,450400000,451000000,451600001,453200000,453800000,454400000,455000000,455600000,456200000,456800000,457400000,458000000,458600001,460200000,460800000,461400000,462000000,462600000,463200000,463800000,464400000,465000000,465600001,467200000,467800000,468400000,469000000,469600000,470200000,470800000,471400000,472000000,472600001,474200000,474800000,475400000,476000000,476600000,477200000,477800000,478400000,479000000,479600001,481200000,481800000,482400000,483000000,483600000,484200000,484800000,485400000,486000000,486600001,488200000,488800000,489400000,490000000,490600000,491200000,491800000,492400000,493000000,493600001,495200000,495800000,496400000,497000000,497600000,498200000,498800000,499400000,500000000,500600001,502200000,502800000,503400000,504000000,504600000,505200000,505800000,506400000,507000001,508600002,511200001,512800001,514400001,516000001,517600001,519200001,520800001,522400001,524000000,524600001,526200000,526800000,527400000,528000000,528600000,529200000,529800000,530400000,531000000,531600001,533200000,533800000,534400000,535000000,535600000,536200000,536800000,537400000,538000000,538600001,540200000,540800000,541400000,542000000,542600000,543200000,543800000,544400000,545000000,545600001,547200000,547800000,548400000,549000000,549600000,550200000,550800000,551400000,552000000,552600001,554200000,554800000,555400000,556000000,556600000,557200000,557800000,558400000,559000000,559600001,561200000,561800000,562400000,563000000,563600000,564200000,564800000,565400000,566000000,566600001,568200000,568800000,569400000,570000000,570600000,571200000,571800000,572400000,573000000,573600001,575200000,575800000,576400000,577000000,577600000,578200000,578800000,579400000,580000000,580600001,582200000,582800000,583400000,584000000,584600000,585200000,585800000,586400000,587000001,588600002,591200001,592800001,594400001,596000001,597600001,599200001,600800001,602400001,604000000,604600001,606200000,606800000,607400000,608000000,608600000,609200000,609800000,610400000,611000000,611600001,613200000,613800000,614400000,615000000,615600000,616200000,616800000,617400000,618000000,618600001,620200000,620800000,621400000,622000000,622600000,623200000,623800000,624400000,625000000,625600001,627200000,627800000,628400000,629000000,629600000,630200000,630800000,631400000,632000000,632600001,634200000,634800000,635400000,636000000,636600000,637200000,637800000,638400000,639000000,639600001,641200000,641800000,642400000,643000000,643600000,644200000,644800000,645400000,646000000,646600001,648200000,648800000,649400000,650000000,650600000,651200000,651800000,652400000,653000000,653600001,655200000,655800000,656400000,657000000,657600000,658200000,658800000,659400000,660000000,660600001,662200000,662800000,663400000,664000000,664600000,665200000,665800000,666400000,667000001,668600002,671200001,672800001,674400001,676000001,677600001,679200001,680800001,682400001,684000000,684600001,686200000,686800000,687400000,688000000,688600000,689200000,689800000,690400000,691000000,691600001,693200000,693800000,694400000,695000000,695600000,696200000,696800000,697400000,698000000,698600001,700200000,700800000,701400000,702000000,702600000,703200000,703800000,704400000,705000000,705600001,707200000,707800000,708400000,709000000,709600000,710200000,710800000,711400000,712000000,712600001,714200000,714800000,715400000,716000000,716600000,717200000,717800000,718400000,719000000,719600001,721200000,721800000,722400000,723000000,723600000,724200000,724800000,725400000,726000000,726600001,728200000,728800000,729400000,730000000,730600000,731200000,731800000,732400000,733000000,733600001,735200000,735800000,736400000,737000000,737600000,738200000,738800000,739400000,740000000,740600001,742200000,742800000,743400000,744000000,744600000,745200000,745800000,746400000,747000001,748600002,751200001,752800001,754400001,756000001,757600001,759200001,760800001,762400001,764000000,764600001,766200000,766800000,767400000,768000000,768600000,769200000,769800000,770400000,771000000,771600001,773200000,773800000,774400000,775000000,775600000,776200000,776800000,777400000,778000000,778600001,780200000,780800000,781400000,782000000,782600000,783200000,783800000,784400000,785000000,785600001,787200000,787800000,788400000,789000000,789600000,790200000,790800000,791400000,792000000,792600001,794200000,794800000,795400000,796000000,796600000,797200000,797800000,798400000,799000000,799600001,801200000,801800000,802400000,803000000,803600000,804200000,804800000,805400000,806000000,806600001,808200000,808800000,809400000,810000000,810600000,811200000,811800000,812400000,813000000,813600001,815200000,815800000,816400000,817000000,817600000,818200000,818800000,819400000,820000000,820600001,822200000,822800000,823400000,824000000,824600000,825200000,825800000,826400000,827000001,828600002,831200001,832800001,834400001,836000001,837600001,839200001,840800001,842400001,844000000,844600001,846200000,846800000,847400000,848000000,848600000,849200000,849800000,850400000,851000000,851600001,853200000,853800000,854400000,855000000,855600000,856200000,856800000,857400000,858000000,858600001,860200000,860800000,861400000,862000000,862600000,863200000,863800000,864400000,865000000,865600001,867200000,867800000,868400000,869000000,869600000,870200000,870800000,871400000,872000000,872600001,874200000,874800000,875400000,876000000,876600000,877200000,877800000,878400000,879000000,879600001,881200000,881800000,882400000,883000000,883600000,884200000,884800000,885400000,886000000,886600001,888200000,888800000,889400000,890000000,890600000,891200000,891800000,892400000,893000000,893600001,895200000,895800000,896400000,897000000,897600000,898200000,898800000,899400000,900000001};\nint main(){\n\tcin>>n;\n\tans=a[n/1000000];\n\tfor(int i=(n/1000000)*1000000+1;i<=n;i++)\n\t\tcheck(i);\n\tcout<<ans;\n\treturn 0;\n}\n\n```\n\u8fd9\u4e2a\u4f60\u603b\u4e0d\u80fd\u590d\u5236\u7c98\u8d34\u4e86\u5427\uff08\u5168\u5199\u5728\u540c\u4e00\u884c\uff09",
        "postTime": 1621726249,
        "uid": 248400,
        "name": "Inaba_Meguru",
        "ccfLevel": 7,
        "title": "AT1483 1 \u9898\u89e3 (\u5371)"
    },
    {
        "content": "\u8fd9\u9898\u662f\u4e00\u9053\u6570\u4f4dDP\u3002\n\n---\n**1. \u72b6\u6001\u8868\u793a:** \u6211\u4eec\u8bbe$f[i][j][k]$\u8868\u793a\u6240\u6709**\u6570\u4f4d\u4e3ai\u4f4d**$\\;$\u4e14$\\;$**\u6700\u9ad8\u4f4d\u4e3aj**$\\;$\u51fa\u73b0\u6570\u5b57**k\u7684\u6b21\u6570**,\uff08\u5982$f[2][1][1]=11$,\u56e0\u4e3a10~19\u95f4\u51fa\u73b0\u4e8611\u6b211\uff09\u3002\uff08\u5176\u5b9e\u8fd9\u9898\u4e0d\u75283\u7ef4\uff0c\u4f46\u4e3a\u4e86\u66f4\u597d\u4eab\u7528[~~\u591a\u500d\u7ecf\u9a8c~~](https://www.luogu.com.cn/paste/zyszoonf)\uff0c\u6240\u4ee5...\uff09\n \n**2.\u72b6\u6001\u8f6c\u79fb\uff1a** \u5148\u7ed9\u4e9b\u67ff\u5b50\n\n\uff081\uff09\n$$\n\\sum_{i=0}^{i=9}{f[1][i][i]=1}\n$$\n\uff082\uff09\n$$\n f[i][j][k] += \\sum_{j=0}^{j=9}{f[i - 1][j][k]}\n $$\n\uff083\uff09\n$$\n \\sum_{j=0}^{j=9} {f[i][j][j] += pow(10,i-1)}\n$$\n\n- \u9996\u5148\u5bf9\u4e8e1\u4f4d\u6570\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8d4b\u503c\uff0c$f[1][0][0] = f[1][1][1] =f[1][2][2]...f[1][9][9] = 1$\n\n- \u5176\u4ed6\u4e0d\u662f1\u4f4d\u6570\u7684\uff0c\u5219\u662f\u4e0a\u9762\u7684\u67ff\u5b502\u3002\n\u6bd4\u5982$f[3][1][1]$**\u8868\u793a\u7684**(\u662f\u6240\u67093\u4f4d\u6570\u4e14\u6700\u9ad8\u4f4d\u4e3a1\u7684\u6570\u4e2d\u51fa\u73b0\u6570\u5b571\u7684\u6b21\u6570)**\u5c31\u662f100\u5230199\u4e2d\u51fa\u73b0\u6570\u5b571\u7684\u6b21\u6570**\uff0c\u5982\u679c\u53bb\u6389\u6700\u9ad8\u4f4d\u76841\uff0c\u90a3\u5269\u4e0b\u7684\u6570\u5c31\u662f0\u523099\uff0c\u4e5f\u5c31\u662f\u6240\u6709\u4e24\u4f4d\u6570\u548c\u4e00\u4f4d\u6570\uff0c\u7531\u4e8e\u6211\u4eec\u662f\u4ece1\u4f4d\u6570\u5f00\u59cb\u679a\u4e3e\u8f6c\u79fb\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u5df2\u7ecf\u6709\u4e86$f[2][0...9][1]$\u8fd9\u53ea\u662f$f[3][1][1]$\u7684\u4e00\u90e8\u5206\uff08\u540e\u9762\u4e24\u4f4d\u6570\u7684\u90e8\u5206\uff09\uff0c\u8fd8\u6709\u4e00\u90e8\u5206\u5c31\u662f\u6700\u9ad8\u4f4d1\uff0c\u6240\u4ee5100-199\u8fd9\u4e9b\u6570\u6bcf\u4e2a\u6570\u90fd\u5bf9$f[3][1][1]$\u67091\u7684\u8d21\u732e\uff0c\u6240\u4ee5$f[3][1][1]+=pow(10,2)$,**\u8fd9\u5c31\u662f\u67ff\u5b503**\u3002\n\n```cpp\nfor (int i = 0; i <= 9; i++)//\u67ff\u5b501\n\tf[1][i][i] = 1; //\u663e\u7136\uff01\nfor (int i = 2; i <= 9; i++)//\u679a\u4e3e\u5f53\u524d\u4f4d\u6570\n{\n\tfor (int j = 0; j <= 9; j++)//\u679a\u4e3e\u6700\u9ad8\u4f4d\n\t{\n      for (int k = 0; k <= 9; k++)\n\t\t\tfor (int l = 0; l <= 9; l++)//\u679a\u4e3e\u4e0a1\u4f4d\u6570\u7684\u6700\u9ad8\u4f4d\n\t\t\tf[i][j][k] += f[i - 1][l][k];//\u67ff\u5b502\n\t\tf[i][j][j] += pow (10, i -1);//\u67ff\u5b503\n\t}\n}\n```\n\n**3.\u8ba1\u7b97\u7b54\u6848\uff1a** \u7531\u4e8e$f[i][j][k]$\u4e2d\u7684\u53ea\u662f\u4e00\u6bb5\u4e00\u6bb5\u7684\uff0c\u6240\u4ee5\u5728\u8ba1\u7b97\u7b54\u6848\u65f6\u4e5f\u8981\u5206\u6bb5\u6c42:\n\n- **\u4e3e\u4e2a\u6817\u5b50: n=433 \u662f\uff0c\u7b97\u51fa\u73b01\u7684\u6b21\u6570\uff1a**\n\n- **\u7b2c\u4e00\u6bb5\uff1a** $1-99$\n\t\n   \u6211\u4eec\u6709$1-9,f[2][1][1](10-19),f[2][2][1](20-29)...f[2][9][1](90-99)$\n   \n- **\u7b2c\u4e8c\u6bb5\uff1a** $100-399$ \n\n   \u6211\u4eec\u6709$f[3][1][1](100-199),f[3][2][1](200-299)$\n   \n- **\u7b2c\u4e09\u6bb5**: $400-433$\n\n   \u8fd9\u65f6\u6211\u4eec\u6700\u9ad8\u4f4d\u53ea\u80fd\u662f4\u4e86\uff0c\u6240\u4ee5\u53ea\u8981\u679a\u4e3e\u540e\u4e24\u4f4d\u5c31\u884c\u4e86\uff0c\u4f46**\u5982\u679c\u6700\u9ad8\u4f4d\u662f1**\u7684\u8bdd\u90a3\u4e48**\u7b2c\u4e09\u6bb5\u7684\u6240\u6709\u6570\u5bf9\u7b54\u6848\u90fd\u591a\u67091\u7684\u8d21\u732e**\uff0c**\u8fd9\u65f6\u8981\u52a0\u4e0apow(10,3-1)**\uff0c\u5206\u5f00\u679a\u4e3e\u5219\u4e3a$f[2][0][1](400-409),f[2][1][1](410-429)$\uff0c\u6700\u540e\u53ea\u5269$430-433$\u4e86\uff0c\u4e5f\u5c31\u662f$f[1][1][0]f[1][1][1](431),f[1][2][1](432),f[1][3][1](434)$\n```cpp\n#include <bits/stdc++.h> \n#define int long long//\u8981\u5f00longlong\uff0c\u6570\u636e\u6709\u95ee\u9898\nusing namespace std;\nconst int MAXN = 1e2;\nint n, f[MAXN][22][22];\nvoid init ()\n{\n\tfor (int i = 0; i <= 9; i++)//\u67ff\u5b501\n\t\tf[1][i][i] = 1; //\u663e\u7136\uff01\n\tfor (int i = 2; i <= 9; i++)//\u679a\u4e3e\u5f53\u524d\u4f4d\u6570\n\t{\n\t\tfor (int j = 0; j <= 9; j++)//\u679a\u4e3e\u6700\u9ad8\u4f4d\n\t\t{\n\t      for (int k = 0; k <= 9; k++)\n\t\t\t\tfor (int l = 0; l <= 9; l++)//\u679a\u4e3e\u4e0a1\u4f4d\u6570\u7684\u6700\u9ad8\u4f4d\n\t\t\t\tf[i][j][k] += f[i - 1][l][k];//\u67ff\u5b502\n\t\t\tf[i][j][j] += pow (10, i -1);//\u67ff\u5b503\n\t\t}\n\t}\n}\nint sum (int x, int num)\n{\n\tint a[10] = {}, len = 0, sum = 0;\n\twhile (x)\n\t{\n\t\ta[++len] = x % 10;\n\t\tx /= 10;\n\t}\n\t\n\tfor (int i = 1; i <= len - 1; i++)//\u7b2c\u4e00\u6bb5 (1-9,\u4e0d\u80fd\u662f0\uff0c\u56e0\u4e3a\u4e0d\u80fd\u6709\u524d\u5bfc0)\n\t\tfor (int j = 1; j <= 9; j++)\n\t\t\tsum += f[i][j][num];\n\t\n\tfor (int i = 1; i <= a[len] - 1; i++)//\u7b2c\u4e8c\u6bb5 \n\t\tsum += f[len][i][num];\n\t\t\n\tfor (int i = len - 1; i >= 1; i--)//\u7b2c\u4e09\u6bb5 \n\t{\n\t\tfor (int j = 0; j <= a[i] - 1; j++)//\u53ef\u4ee5\u662f0\uff0c\u4ee5\u4e3a\u524d\u9762\u5df2\u7ecf\u786e\u5b9a\u4e86\u975e0\u6570 \n\t\t\tsum += f[i][j][num];\n\t\t\t\n\t\tfor (int j = len; j > i; j--)//\u4e0d\u8981\u5fd8\u4e86\u8fd9!! \n\t\t\tif (a[j] == 1)\n\t\t\t   sum += a[i] * pow (10, i - 1);\n\t}\n\treturn sum;\n}\nsigned main ()\n{\n\tinit ();\n\tcin >> n;\n\tcout << sum (n + 1, 1) << endl;//n+1\u662f\u56e0\u4e3asum()\u4e2d\u53ea\u7edf\u8ba1\u5230x-1 \n\treturn 0;\n}\n```",
        "postTime": 1619097807,
        "uid": 390254,
        "name": "Z_M__",
        "ccfLevel": 6,
        "title": "AT1483\u9898\u89e3"
    },
    {
        "content": "### [\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/AT1483)\n\uff08\u5982\u679c $\\LaTeX$ \u70b8\u4e86\uff0c\u8bf7\u5230\u535a\u5ba2[\u89c2\u770b](https://www.luogu.com.cn/blog/thats-me/ti-jie-at1483-1)\uff09\n\n$\\Large\\mathscr{Part\\,\\,1\\;\\;}\\text{\u57fa\u672c\u601d\u8def}$\n\n\u8fd9\u9053\u9898\u5176\u5b9e\u662f\u4e00\u9053\u5c0f\u5b66\u5965\u6570\u9898\u3002\u4e3a\u540e\u6587\u53d9\u8ff0\u65b9\u4fbf\uff0c\u6240\u4ee5\u6211\u4eec\u8bbe\u8868\u8fbe\u5f0f $\\operatorname{f}\\ (\\ left \\ ,\\ right\\ )$ \u8868\u793a $[\\ left\\ ,\\ right\\ ]$ \u4e2d\u6570\u5b57 $1$ \u51fa\u73b0\u7684\u4e2a\u6570\u3002\n\n\u6211\u4eec\u9996\u5148\u6765\u63a2\u8ba8 $\\operatorname{f}\\ (\\ 0\\ ,\\ \\underbrace{99 \\dots 99}_{\\text{n\u4e2a9}}\\ )$ \u7684\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u4ece\u6570\u4f4d\u7684\u89d2\u5ea6\u53bb\u63a2\u8ba8\u3002\u5f53\u7b2c $i\\ (1 \\leq i \\leq n)$ \u4f4d\u4e3a $1$ \u4e14\u5176\u5b83 $n-1$ \u4f4d\u4e3a $[0,9]$ \u4e2d\u7684\u6574\u6570\u65f6\uff0c\u8fd9\u4e2a\u6570\u7684\u7b2c $i$ \u4f4d\u4e3a $1$ \u4e14\u8fd9\u4e2a\u6570\u5c0f\u4e8e\u7b49\u4e8e $\\underbrace{99 \\dots 99}_{\\text{n\u4e2a9}}$\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6570\u7684\u4f4d\u6570\u4e00\u5b9a\u5c0f\u4e8e\u7b49\u4e8e $n$\uff08\u9996\u4f4d\u53ef\u4ee5\u4e3a $0$ \uff09\uff0c\u5e76\u4e14 $\\underbrace{99 \\dots 99}_{\\text{n\u4e2a9}}$ \u662f $n$ \u4f4d\u6570\u4e2d\u6700\u5927\u7684\u6570\uff0c\u53c8\u56e0\u4e3a $n$ \u4f4d\u6570\u4ee5\u5185 $1$ \u51fa\u73b0\u65f6\u53ea\u80fd\u5728 $1-n$ \u4f4d\u4e0a\uff0c\u6240\u4ee5\u8fd9\u79cd\u65b9\u6cd5\u4e5f\u4e0d\u4f1a\u6f0f\u3002\u7efc\u4e0a\uff0c$\\operatorname{f}\\ (\\ 0\\ ,\\ \\underbrace{99 \\dots 99}_{\\text{n\u4e2a9}}\\ )=\\sum\\limits_{i=1}^{n}\\prod\\limits_{j=1}^{n}10=n  \\times 10^{n-1}$\uff0c\u5bf9\u7167\u6837\u4f8b $3$ \u9a8c\u8bc1\u7ed3\u679c\u540e\u53d1\u73b0\u662f\u5bf9\u7684\u3002\n\n\u6211\u4eec\u518d\u6765\u63a2\u8ba8\u66f4\u4e00\u822c\u7684\u7684\u8868\u8fbe\u5f0f $\\operatorname{f}\\ (\\ 0\\ ,\\ \\overline{a_n\\underbrace{99 \\dots 99}_{\\text{n-1\u4e2a9}}}\\ )$ \u7684\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u5b83\u62c6\u5206\u6210 $a_n+1$ \u4e2a\u8868\u8fbe\u5f0f\u7684\u548c\uff0c\u5373 $\\operatorname{f}\\ (\\ 0\\ ,\\ \\overline{a_n\\underbrace{99 \\dots 99}_{\\text{n-1\u4e2a9}}}\\ )=\\sum\\limits_{i=0}^{a_n}\\operatorname{f}\\ (\\ \\overline{i\\ \\underbrace{00 \\dots 00}_{\\text{n-1\u4e2a0}}}\\ ,\\ \\overline{i\\ \\underbrace{99 \\dots 99}_{\\text{n-1\u4e2a9}}}\\ )$\u3002\u6ce8\u610f\u5230\u5bf9\u4e8e\u6bcf\u4e2a $i$\uff0c\u5982\u679c $i$ \u4e0d\u4e3a $1$\uff0c\u5219 $\\operatorname{f}\\ (\\ \\overline{i\\ \\underbrace{00 \\dots 00}_{\\text{n-1\u4e2a0}}}\\ ,\\ \\overline{i\\ \\underbrace{99 \\dots 99}_{\\text{n-1\u4e2a9}}}\\ )=\\operatorname{f}\\ (\\ 0\\ ,\\ \\underbrace{99 \\dots 99}_{\\text{n-1\u4e2a9}}\\ )$\uff0c\u53cd\u4e4b\uff0c\u82e5 $i$ \u4e3a $1$\uff0c\u5219 $\\operatorname{f}\\ (\\ \\overline{i\\ \\underbrace{00 \\dots 00}_{\\text{n-1\u4e2a0}}}\\ ,\\ \\overline{i\\ \\underbrace{99 \\dots 99}_{\\text{n-1\u4e2a9}}}\\ )=\\operatorname{f}\\ (\\ 0\\ ,\\ \\underbrace{99 \\dots 99}_{\\text{n-1\u4e2a9}}\\ )+10^{n-1}$\uff0c\u7531\u4e8e\u6211\u4eec\u5df2\u77e5 $\\operatorname{f}\\ (\\ 0\\ ,\\ \\underbrace{99 \\dots 99}_{\\text{n-1\u4e2a9}}\\ )=(n-1) \\times 10^{n-2}$\uff0c\u4e14 $a_n > 0$\uff0c\u6240\u4ee5  $\\operatorname{f}\\ (\\ 0\\ ,\\ \\overline{a_n\\underbrace{99 \\dots 99}_{\\text{n-1\u4e2a9}}}\\ )=(n-1) \\times 10^{n-2} \\times (a_n+1)+10^{n-1}$\u3002\n\n\u6700\u540e\uff0c\u6211\u4eec\u6765\u63a2\u8ba8\u9898\u76ee\uff0c\u5373\u8868\u8fbe\u5f0f $\\operatorname{f}\\ (\\ 0\\ ,\\ \\overline{a_{n}a_{n-1}\\dots a_{2}a_{1}}\\ )$ \u7684\u503c\u3002\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\uff0c\u539f\u5f0f$= \\operatorname{f}\\ (\\ 0\\ ,\\ \\overline{(a_{n}-1)\\underbrace{99 \\dots 99}_{\\text{n-1\u4e2a9}}}\\ )+\\operatorname{f}\\ (\\ \\overline{a_n\\ \\underbrace{00 \\dots 00}_{\\text{n-1\u4e2a0}}}\\ ,\\ \\overline{a_{n}(a_{n-1}-1)\\ \\underbrace{99 \\dots 99}_{\\text{n-2\u4e2a9}}}\\ )+ \\cdots+\\operatorname{f}\\ (\\ \\overline{a_{n}a_{n-1}\\dots a_{4}a_{3}00}\\ ,\\ \\overline{a_{n}a_{n-1}\\dots a_{3}(a_{2}-1)9}\\ )+\\operatorname{f}\\ (\\ \\overline{a_{n}a_{n-1}\\dots a_{3}a_{2}0}\\ ,\\ \\overline{a_{n}a_{n-1}\\dots a_{2}a_{1}}\\ )$\uff0c\u8fd9\u770b\u8d77\u6765\u8ddf\u524d\u6587\u63d0\u53ca\u7684\u5f0f\u5b50\u76f8\u4f3c\uff0c\u4f46\u8981\u6ce8\u610f\u8fd9\u91cc\u7684 $a_i\\ (1\\leq i <n)$ \u662f\u53ef\u4ee5\u4e3a\u96f6\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8ba1\u7b97\u65f6\u9700\u8981\u76f4\u63a5\u8df3\u8fc7\u8fd9\u4e00\u60c5\u51b5\u3002\u5f53 $a_i(1\\leq i \\leq n)$ \u4e3a $1$ \u65f6\uff0c$\\operatorname{f}\\ (\\ \\overline{a_i\\ \\underbrace{00 \\dots 00}_{\\text{i-1\u4e2a0}}}\\ ,\\ \\overline{a_{i}(a_{i-1}-1)\\ \\underbrace{99 \\dots 99}_{\\text{i-2\u4e2a9}}}\\ )=\\operatorname{f}\\ (\\ 0\\ ,\\ \\overline{(a_{i-1}-1)\\ \\underbrace{99 \\dots 99}_{\\text{i-2\u4e2a9}}}\\ )+a_{i-1} \\times 10^{i-2}$\uff0c\u53cd\u4e4b\uff0c\u5373 $a_i>1$ \u65f6\uff0c$\\operatorname{f}\\ (\\ \\overline{a_i\\ \\underbrace{00 \\dots 00}_{\\text{i-1\u4e2a0}}}\\ ,\\ \\overline{a_{i}(a_{i-1}-1)\\ \\underbrace{99 \\dots 99}_{\\text{i-2\u4e2a9}}}\\ )=\\operatorname{f}\\ (\\ 0\\ ,\\ \\overline{(a_{i-1}-1)\\ \\underbrace{99 \\dots 99}_{\\text{i-2\u4e2a9}}}\\ )$\u3002\n\n\u4e0a\u8ff0\u6bcf\u4e2a\u5f0f\u5b50\u5747\u53ef\u76f4\u63a5\u8ba1\u7b97\uff0c\u7ed3\u679c\u5c31\u662f\u6bcf\u4e2a\u5f0f\u5b50\u4e4b\u548c\u3002\n\n\u5176\u5b9e\u8fd9\u4e48\u8bf4\u53ef\u80fd\u6709\u4e9b\u7a7a\u6d1e\u4e86\uff0c\u4e0b\u9762\u6211\u4eec\u5c31\u6765\u4e3e\u4e2a\u6817\u5b50\u3002\n\n\u5047\u8bbe\u9898\u76ee\u4e2d\u7ed9\u7684\u6570\u662f $231056$\uff0c\u5219\u6211\u4eec\u8981\u6c42\u7684\u8868\u8fbe\u5f0f\u5c31\u662f $\\operatorname{f}\\ (\\ 0\\ ,\\ 231056\\ )=\\operatorname{f}\\ (\\ 0\\ ,\\ 199999\\ )+\\operatorname{f}\\ (\\ 200000\\ ,\\ 229999\\ )+\\operatorname{f}\\ (\\ 230000\\ ,\\ 230999\\ )+\\operatorname{f}\\ (\\ 231000\\ ,\\ 231049\\ )+\\operatorname{f}\\ (\\ 231050\\ ,\\ 231056\\ )$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7b97\u51fa\uff0c$\\operatorname{f}\\ (\\ 0\\ ,\\ 199999\\ )=5 \\times 10^4 \\times 2+10^5=200000$\uff0c$\\operatorname{f}\\ (\\ 200000\\ ,\\ 229999\\ )=\\operatorname{f}\\ (\\ 0\\ ,\\ 29999\\ )=4 \\times 10^3 \\times 3+10^4=22000$\uff0c$\\operatorname{f}\\ (\\ 230000\\ ,\\ 230999\\ )=\\operatorname{f}\\ (\\ 0\\ ,\\ 999\\ )=3 \\times 10^2=300$\uff0c$\\operatorname{f}\\ (\\ 231000\\ ,\\ 231049\\ )=\\operatorname{f}\\ (\\ 0\\ ,\\ 49\\ )=1 \\times 10^0 \\times 5+10^1+50=65$\uff0c$\\operatorname{f}\\ (\\ 231050\\ ,\\ 231056\\ )=\\operatorname{f}\\ (\\ 0\\ ,\\ 6\\ )=7+1=8$\u3002\n\n\u6240\u4ee5$\\small\\text{\u539f\u5f0f}$ $=200000+22000+300+65+8=222373$\n\n$\\Large\\mathscr{Part\\,\\,2\\;\\;}\\text{Code}$ $\\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ \\ $ $\\tiny\\sout\\text{Talk is cheap, show me your code.}$\n\n```cpp\n#include <cstdio>\n#include <cstring>\nchar ch[99]; //\u8bfb\u5165\u6570\u636e\uff0c\u4e3a\u4e86\u65b9\u4fbf\u8ba1\u7b97\uff0c\u8fd9\u91cc\u7528\u5b57\u7b26\u6570\u7ec4\nint len,ans,q,pow[10]={1,10,100,1000,10000,100000,1000000,10000000,100000000,1000000000}; //\u8fd9\u91cc\u9884\u5904\u7406\u51fa 10 \u7684 i \u6b21\u65b9\ninline int solve(int x,int n){ //\u8fd9\u91cc\u7684 x \u662f \u9996\u4f4d-1\uff08\u53ef\u80fd\u4e3a\u96f6\uff09\uff0cn \u662f\u672b\u5c3e 9 \u7684\u4e2a\u6570\n\tif(x==0) return n*pow[n-1];\n\treturn n*pow[n-1]*(x+1)+pow[n];\n}\nint main(){\n\tscanf(\"%s\",ch);\n\tlen=strlen(ch);\n\tfor(int i=0; i<len-1; i++){ //\u5faa\u73af\u5230\u5012\u6570\u7b2c\u4e8c\u4f4d\uff0c\u6700\u540e\u4e00\u4f4d\u4ec5\u9700\u5224\u65ad\u662f\u5426\u4e3a\u96f6\n\t\tif(ch[i]=='0') continue; //\u8df3\u8fc7\u4e3a\u96f6\n\t\tans+=solve(ch[i]-'0'-1,len-i-1);\n\t\tif(ch[i]=='1'){ //\u5f53\u8fd9\u4e00\u4f4d\u4e3a\u4e00\u65f6\n\t\t\tsscanf(ch+i+1,\"%d\",&q); //\u628a\u6bd4 i \u4f4d\u5c0f\u7684\u4f4d\u6570\u7ec4\u6210\u7684\u6570\u52a0\u4e0a\n\t\t\tans+=q+1;\n\t\t}\n\t}\n\tif(ch[len-1]>'0') ans++; //\u6700\u540e\u4e00\u4f4d\u5224\u65ad\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\Theta(\\lfloor\\log_{10}n\\rfloor)$\u3002\n\n\u4e8e\u662f\u53c8\u6109\u5feb\u5730[$\\color{green}AC$](https://www.luogu.com.cn/record/32984262)\u4e86\uff01",
        "postTime": 1587359014,
        "uid": 238421,
        "name": "A_Pikachu",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT1483 \u30101\u3011"
    },
    {
        "content": "\u8fd9\u9053\u9898\u66b4\u529b\u80af\u5b9a\u662f\u4e0d\u80fd\u8fc7\u7684 \uff01  \n\u8fd9\u9053\u9898\u5462 \uff0c\u5c31\u662f\u5957\u6570\u4f4d dp \u7684\u677f\u5b50 \uff01  \n\u6570\u4f4d dp \u5176\u5b9e\u5c31\u662f\u901a\u8fc7\u9012\u5f52\u641c\u7d22\u6570\u4f4d \uff0c\u8fd9\u5f53\u7136\u6bd4\u641c\u7d22\u6570\u5b57\u5feb\u7684\u7684\u591a \u3002\u63a5\u7740\u5462 \uff0c\u5c31\u662f\u901a\u8fc7\u8bb0\u5fc6\u5316\u641c\u7d22 \uff0c\u52a0\u5feb\u901f\u5ea6 \u3002\u53ea\u4e0d\u8fc7\u6709\u4e9b\u4e1c\u897f\u5f88\u7ec6\u8282 \u3002  \n\u8fd9\u4e9b\u7ec6\u8282\u5c31\u662f\u5bf9\u4e8e\u8fd9\u4e2a\u6570\u7684\u6700\u9ad8\u4f4d\u5904\u7406 \uff0c\u548c\u8fd9\u4e2a\u8bb0\u5fc6\u5316\u6570\u7ec4\u7684\u72b6\u6001\u5904\u7406 \u3002\u5bf9\u4e8e\u6700\u9ad8\u4f4d\u5904\u7406 \uff0c\u5148\u8bbe\u4e00\u4e2a\u53c2\u6570 $limit$\uff0c\u7b2c\u4e00\u5c42\u9012\u5f52\u80af\u5b9a\u662f\u6700\u9ad8\u4f4d \uff0c\u6240\u4ee5\u4f20\u8fc7\u53bb\u7684\u53c2\u6570\u662f\u4e3a\u771f\u7684 \u3002\u8fd9\u4e2a\u6700\u9ad8\u4f4d\u6807\u8bb0 $limit$ \u7684\u4e3b\u8981\u4f5c\u7528\u5c31\u662f\u627e\u51fa\u5f53\u524d\u6570\u4f4d\u6700\u5927\u80fd\u679a\u4e3e\u5230\u51e0 \uff0c\u5982\u679c\u5f53\u524d\u662f\u6700\u9ad8\u4f4d \uff0c\u90a3\u4e48\u5f53\u524d\u6570\u4f4d\u53ea\u80fd\u679a\u4e3e\u5230\u8fd9\u4e2a\u6570\u5728\u8fd9\u4e2a\u6570\u4f4d\u7684\u6570\u5b57 \uff0c\u5426\u5219 \uff0c\u6700\u5927\u80fd\u679a\u4e3e\u5230 $9$\u3002\u518d\u8bf4\u4e00\u4e0b\u8fd9\u4e2a\u8bb0\u5fc6\u5316\u6570\u7ec4\u7684\u72b6\u6001\u5904\u7406 \uff0c\u8bb0\u5fc6\u5316\u6570\u7ec4\u7684\u72b6\u6001\u7528\u4e0b\u6807\u6765\u8868\u793a \uff0c\u6709\u4e24\u4e2a\u72b6\u6001 \uff0c\u4e00\u4e2a\u662f\u5f53\u524d\u4f4d\u6570 \uff0c\u53e6\u4e00\u4e2a\u662f\u5f53\u524d\u6709\u4e86\u591a\u5c11\u4e2a $1$\u3002\u6bd4\u5982 $dp\\left[pos\\right]\\left[num\\right]$ \u8868\u793a\u7684\u5c31\u662f\u7b2c $pos$ \u4f4d \uff0c\u73b0\u5728\u5df2\u7ecf\u6709\u4e86 $num$ \u4e2a $1$\u3002   \n\u4e0b\u9762\u662f AC \u4ee3\u7801 \u3002\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nll dp[1001][1001],a[1001];\nll dfs(ll pos,bool limit,ll num) {\n\tif(pos==0) return num;\n\tif(!limit&&dp[pos][num]!=-1) return dp[pos][num];//\u76f4\u63a5\u8fd4\u56de\u5df2\u7ecf\u7b97\u8fc7\u4e86\u7684\u7ed3\u679c\n\tll up=limit?a[pos]:9;\n\tll sum=0;\n\tfor(int i=0; i<=up; i++) {\n\t\tif(i==1) {//\u4e24\u79cd\u60c5\u51b5\n\t\t\tsum+=dfs(pos-1,limit&&i==up,num+1);\n\t\t} else {\n\t\t\tsum+=dfs(pos-1,limit&&i==up,num);\n\t\t}\n\t}\n\tdp[pos][num]=sum;//\u8bb0\u5fc6\u5316\n\treturn sum;\n}\nll solve(ll x) {//\u62c6\u6570\n\tint len=0;\n\tmemset(dp,-1,sizeof(dp));\n\twhile(x) {\n\t\ta[++len]=x%10;\n\t\tx/=10;\n\t}\n\treturn dfs(len,true,0);\n}\nint main() {\n\tll n;\n\tscanf(\"%lld\",&n);\n\tprintf(\"%lld\\n\",solve(n));\n\treturn 0;\n}\n```\n\u611f\u8c22\u60a8\u7684\u89c2\u770b \uff01",
        "postTime": 1649943702,
        "uid": 542389,
        "name": "Fcersoka",
        "ccfLevel": 0,
        "title": "AT1483\u9898\u89e3"
    },
    {
        "content": "\u8c8c\u4f3c\u6ca1\u6709\u9012\u63a8\u7684\u9898\u89e3\u3002\n\n\u8865\u4e0a\u4e00\u7bc7\u3002\n\n```cpp\n#include <iostream>\n#include <string>\n#include <vector>\nusing namespace std;\n#define reg register\nconst int kmaxn=25;\ntypedef long long ll;\nll dp[kmaxn][10];//dp(i,j)\u8868\u793a\u5728\u7b2c1-i\u4f4d\uff0c\u7b2ci\u4f4d\u4ee51\u7ed3\u5c3e\uff0c1\u5230(i-1)\u4f4d\u968f\u4fbf\u653e\u65f6\uff0c1\u51fa\u73b0\u7684\u6b21\u6570\nll m[kmaxn];\nint n;\nvoid init()\n{\n    m[0]=dp[1][1]=1;\n    m[1]=10;\n    for(reg int i=2;i<=n;++i)\n    {\n        m[i]=m[i-1]*10;//\u9884\u5904\u7406\u51fa10\u7684i\u6b21\u5e42\n        for(reg int j=0;j<10;++j)\n        {\n            for(reg int k=0;k<10;++k)\n            {\n                dp[i][j]+=dp[i-1][k];//\u4e0d\u7ba1\u8fd9\u4e00\u4f4d\u653e\u4ec0\u4e48\uff0c\u524d\u4e00\u4f4d\u90fd\u968f\u4fbf\u653e\uff0c\u6240\u4ee5dp(i,j)=sigma dp(i,0 to 9);\n            }\n        }\n        dp[i][1]+=m[i-1];//\u5f53\u8fd9\u4e00\u4f4d\u653e1\u65f6\u8d21\u732e\u7684\u7b54\u6848\n    }\n}\nll query(const vector<int>& vec)\n{\n    ll res=0;\n    ll ans=0;\n    for(reg int i=0,j=vec.size();i<j;++i)//\u9884\u5904\u7406\u51fa\u4e0a\u754c\u7684\u6570\u503c\n    {\n        res+=vec[i]*m[i];\n    }\n    for(reg int i=vec.size();i>0;--i)\n    {\n        for(reg int j=0;j<vec[i-1];++j)//\u5f53\u524d\u4f4d\u5c0f\u4e8e\u4e0a\u754c\uff0c\u66f4\u9ad8\u4f4d==\u4e0a\u754c\u65f6\n        {\n            ans+=dp[i][j];\n        }\n        res-=vec[i-1]*m[i-1];\n        if(vec[i-1]==1)//\u5f53\u524d\u4f4d\u4e0a\u754c\u662f\u4e00\u65f6\uff0c\u8fd9\u4e2a1\u4ea7\u751f\u7684\u8d21\u732e\u5c31\u662f\u4f4e\u4f4d\u7684\u6570\u503c\n            ans+=res;\n    }\n    return ans;\n}\ninline void trans(vector<int>& vec,const string& str)//\u5012\u7f6e\u6574\u6570+char\u8f6cint\n{\n    vec.clear();\n    for(reg int i=str.size()-1;i>=0;--i)\n    {\n        vec.push_back(str[i]-'0');\n    }\n}\ninline void add(vector<int>& vec)//\u52a0\u4e2a\u4e00\uff0c\u95ed\u533a\u95f4\u53d8\u5f00\u533a\u95f4\n{\n    int t=1;\n    for(reg int i=0,j=vec.size();i<j;++i)\n    {\n        vec[i]+=t;\n        t=vec[i]/10;\n        vec[i]%=10;\n    }\n    if(t)\n        vec.push_back(t);\n}\nstring l,r;\nvector<int> lv,rv;\nint main()\n{\n    ios::sync_with_stdio(false);\n    cin>>r;\n    n=r.size()+1;\n    init();\n    trans(rv,r);\n    add(rv);\n    cout<<query(rv)<<endl;\n    return 0;\n}\n\u5176\u5b9el\u548clv\u5e76\u6ca1\u6709\u7528\u4e0a\u7684\u8bf4\uff0c\u6bd5\u7adf\u5de6\u8fb9\u754c\u662f1,query(0)\u663e\u7136\u7b49\u4e8e0...\n```\n",
        "postTime": 1553948843,
        "uid": 56184,
        "name": "_\u8679_",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 AT1483 \u30101\u3011"
    },
    {
        "content": "\u5176\u5b9e\u2026\u2026\u8fd9\u9053\u9898\u2026\u2026\u5c31\u662f\u6570\u4f4d DP \u677f\u5b50\u9898\u4e4b\u4e00\uff08\u6c42\u533a\u95f4\u5185\u67d0\u4e00\u6570\u7801\uff08\u6240\u6709\u6570\u7801\uff09\u51fa\u73b0\u7684\u4e2a\u6570\uff0c\u677f\u5b50\u9898\uff1aP2602\u3002\uff09\n\n---\n\n\u597d\uff0c\u5f00\u59cb\u3002\u5b9a\u4e49\u6570\u7ec4 $f_{i,j,k}$ \u4e3a\u524d $i$ \u4f4d\uff0c\u8fd9\u4e00\u4f4d\u586b\u7684 $j$\uff0c$k$ \u51fa\u73b0\u4e86\u51e0\u6b21\u3002\n\n- \u72b6\u6001\u8fb9\u754c\uff1a\u7b2c $1$ \u4f4d\uff0c\u586b\u7684 $i$\uff0c\u90a3\u4e48\u9664\u4e86 $i$ \u586b\u4e86\u4e00\u6b21\u4e4b\u540e\uff0c\u5176\u4ed6\u90fd\u662f $0$\u3002\u56e0\u6b64 $f_{1,i,i}=1$\u3002\n\n- \u72b6\u6001\u8f6c\u79fb\uff1a\u4e0a\u4e00\u4f4d\u586b\u7684\u4ec0\u4e48\u9b3c\u6570\u90fd\u53ef\u4ee5\uff1a$f_{i,j,k} = \\sum^{9}_{t=0} f_{i-1,t,k}$\u3002\u4f46\u662f\uff0c\u6ce8\u610f $f_{i,j,j}$ \u9700\u8981\u7279\u5224\uff0c\u52a0\u4e0a $10^{i-1}$\u3002\u56e0\u4e3a\u5982\u679c\u73b0\u5728\u586b $12$\uff08\u6c42 $f_{2,2,2}$\uff09\uff0c\u586b\u4e86\u4e2a $2$\uff0c\u8f6c\u79fb\u5230 $f_{1,t,2}=1(t=2)$ \u548c $f_{1,t,2}=0(t\\not = 2)$\uff0c\u4f46\u662f\u53ea\u7ba1\u4e86 $2$\uff0c$12,22,32,42,...,92$\uff0c\u4f60\u4e0d\u53bb\u7ba1\u4ed6\u4e86\uff1f\u5f53\u7136\u8981\u52a0\u4e0a\u3002\n\n+ dp \u8fc7\u7a0b\uff1a\u5148\u5206\u89e3\u6570\u4f4d\uff0c\u7528 `vector<int>`\u5b58\u4e0b\u6765\u3002\u5012\u7740\u679a\u4e3e\u3002\u5728\u5f53\u524d\u4f4d\u4ee5\u4e0b\u7684\uff0c\u90fd\u662f\u6574\u5757\u7684\uff0c\u76f4\u63a5\u52a0\u4e0a\u3002\u540c\u65f6\uff0c\u4e4b\u524d\u9ad8\u4f4d\u53ef\u80fd\u4e5f\u6709 $1$\uff0c\u90a3\u4e48\u8fd8\u9700\u8981\u52a0\u4e0a $10^{i-1}$\uff0c\u4f46\u662f\u56e0\u4e3a\u6570\u7ec4\u4e0b\u6807\u4ece $0$ \u5f00\u59cb\uff0c\u5c31\u4e0d\u7528\u51cf\u4e00\u4e86\u3002\u5982\u679c\u5df2\u7ecf\u662f\u6700\u540e\u4e00\u4f4d\uff08$i=0$\uff09\uff0c\u90a3\u4e48\u67e5\u4e00\u4e0b\u81ea\u5df1\u7684\u6570\u4f4d\uff0c\u6709 $1$ \u5c31\u52a0\u4e0a\u3002\u6211\u4eec\u4e4b\u524d\u8ba8\u8bba\u7684\u90fd\u662f $10^{\\lfloor \\log_{10}^{x} \\rfloor}$ \u53ca\u5176\u4ee5\u4e0a\u7684\u3002\u90a3\u4e48\u4e4b\u524d\u7684\u76f4\u63a5\u52a0\u4e0a\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long LL;\nLL f[40][10][10];\nvoid init(){\n\tfor(int i = 0;i <= 9;i ++)f[1][i][i] = 1;//\u72b6\u6001\u8fb9\u754c\n\tfor(int i = 2;i <= 13;i ++){\n\t\tfor(int j = 0;j <= 9;j ++){\n\t\t\tfor(int k = 0;k <= 9;k ++){\n\t\t\t\tfor(int t = 0;t <= 9;t ++){\n\t\t\t\t\tf[i][j][k] += f[i-1][t][k];//\u72b6\u6001\u8f6c\u79fb\n\t\t\t\t}\n\t\t\t}\n\t\t\tf[i][j][j] += pow(10,i-1);//\u7279\u6b8a\u5224\u65ad\n\t\t}\n\t}\n}\nLL dp(LL n,LL k){//1 \u5230 n \u5f53\u4e2d\uff0ck \u51fa\u73b0\u4e86\u591a\u5c11\u6b21\u3002\n\tvector<int> nums;\n\twhile(n) nums.push_back(n%10),n/=10;//\u5206\u89e3\u6570\u4f4d\n\tLL res = 0;//\u7b54\u6848\n\tfor(int i = nums.size()-1;i >= 0;i --){\n\t\tif(nums[i]){\n\t\t\tfor(int j = (i == nums.size()-1);j < nums[i];j ++)res += f[i+1][j][k];//\u6574\u5757\u52a0\u4e0a\n\t\t\tfor(int j = nums.size()-1;j > i;j --){\n\t\t\t\tif(nums[j] == k)res += pow(10,i)*nums[i];//\u904d\u5386\u9ad8\u4f4d\n\t\t\t} \n\t\t}\n\t\tif(i == 0){//\u68c0\u67e5\u81ea\u5df1\n\t\t\tfor(int j = 0;j < nums.size();j ++){\n\t\t\t\tres += nums[j] == k;\n\t\t\t}\n\t\t}\n\t}\n\tfor(int i = nums.size()-1;i >= 1;i --){//\u4e0d\u8db3 10 \u7684\u90a3\u51e0\u6b21\u5e42\uff0c\u76f4\u63a5\u52a0\u4e0a\u3002\n\t\tfor(int j = 1;j <= 9;j ++){\n\t\t\tres += f[i][j][k];\n\t\t}\n\t}\n\treturn res;\n}\nint main(){\n\tinit();\n\tLL l = 1,r;\n\tcin>> r;\n\tcout << dp(r,1) - dp(l-1,1) << endl;\n\treturn 0;\n}\n\n```",
        "postTime": 1646654843,
        "uid": 302394,
        "name": "dingshengyang",
        "ccfLevel": 4,
        "title": "\u6570\u4f4d DP \u5927\u6cd5\u597d\uff01"
    },
    {
        "content": "\u4f3c\u4e4e\u6ca1\u4eba\u5199\u6211\u8fd9\u79cd\u4e11\u964b\u7684\u56db\u7ef4 DP...\n\n\u90a3\u597d\u5427\u6211\u6765\u53d1\u4e00\u7bc7...\n\n## \u601d\u8def\n\n\u8bbe $f[i][sum][high][zero]$ \u4e3a\u641c\u5230\u7b2c $i$ \u4f4d\uff0c\u5f53\u524d\u6709 $sum$ \u4e2a $1$ \uff0c\u662f\u5426\u9876\u5230\u4e0a\u754c\uff0c\u662f\u5426\u4e3a\u524d\u5bfc\u96f6\u3002\n\n\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u662f\u5f88\u7b80\u5355\u7684 DFS \u4e86...\u8fd9\u91cc\u5c31\u4e0d\u89e3\u91ca\u4e86\uff0c\u81ea\u5df1\u770b\u4ee3\u7801\u5427\n\n\n```cpp\n# include <bits/stdc++.h>\n# define int long long\n# define rr register\nconst int N=15;\nint f[N][N][2][2];\nint n;\nint a[N],len;\ninline int read(void){//\u5feb\u901f\u8bfb\u5165\n\tint res,f=1;\n\tchar c;\n\twhile((c=getchar())<'0'||c>'9')\n\t\tif(c=='-')f=-1;\n\tres=c-48;\n\twhile((c=getchar())>='0'&&c<='9')\n\t\tres=res*10+c-48;\n\treturn res*f;\t\t\n}\ninline void make(int x){//\u6570\u4f4d\u5206\u79bb\n\tlen=0;\n\twhile(x){\n\t\ta[++len]=x%10,x/=10;\n\t}\n\treturn;\n}\nint dfs(int i,int sum,bool high,bool zero){//\u8bb0\u5fc6\u5316\u641c\u7d22\u8fc7\u7a0b\n\tif(!i)//\u641c\u5b8c\u4e86\n\t\treturn f[i][sum][high][zero]=sum;\n\tif(~f[i][sum][high][zero])//\u5982\u679c\u5f53\u524d\u72b6\u6001\u5df2\u7ecf\u88ab\u5904\u7406\u8fc7\n\t\treturn f[i][sum][high][zero];\t\n\tint res=0;\t\n\tfor(rr int j=0;j<10;++j){\n\t\tif(high&&j>a[i])//\u4e0a\u754c\u5224\u65ad\n\t\t\tbreak;\n\t\tres+=dfs(i-1,sum+(j==1),high&&j==a[i],zero&&!j);\t\t\n\t}\n\treturn f[i][sum][high][zero]=res;\n}\ninline int work(int x){\n\tmake(x);\n\tmemset(f,-1,sizeof(f));//\u8bb0\u4f4f\u8981 memset\n\treturn dfs(len,0,true,true);\n}\nsigned main(void){\n\tn=read();\n\tprintf(\"%lld\\n\",work(n));\n\treturn 0;\n}\n```",
        "postTime": 1569848981,
        "uid": 108949,
        "name": "Meatherm",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT1483 \u30101\u3011"
    },
    {
        "content": "\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a**\u6570\u4f4dDP**,\u5176\u5b9e\u4e0d\u77e5\u9053\u7684\u540c\u5b66\u53ef\u4ee5Google\u4e00\u4e0b\uff01\n\n\u90a3\u4e48\u4e2a\u4eba\u8ba4\u4e3a\u6570\u4f4ddp\u7684\u590d\u6742\u5ea6\u5c31\u662f\uff1a\u72b6\u6001\u6570 * \u8f6c\u79fb\u590d\u6742\u5ea6\n\nDFS(now, limit, sum)\n\n\u5206\u522b\u8868\u793a\u641c\u7d22\u5230\u4e86\u7b2c\u51e0\u4f4d\uff0c\u662f\u4e0d\u662f\u9876\u5230\u533a\u95f4\u7684\u6781\u9650\uff0c\u76ee\u524d\u4e3a\u6b62\u7684\u51fa\u73b0\u4e861\u7684\u4e2a\u6570\n\n\u56e0\u4e3a\u4e00\u4e2a\u6570\u524d\u9762\u7684\u6570\u5b571\u6b21\u6570\u4e0e\u4e4b\u540e\u7684\u65e0\u5173\uff0c\u6211\u4eec\u53ea\u5173\u5fc3\u662f\u4e0d\u662flimit\uff01\n\u6240\u4ee5\u4e0d\u9700\u8981\u518d\u5f00\u4e00\u7ef4\u6765\u8bb0\u5f55\u4e0a\u4e00\u4f4d\u662f\u4ec0\u4e48\u6570\u5b57\n```cpp\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"inline\")\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define R register\nusing namespace std;\n\nconst int N = 35;\n\nint n, cnt, s[N], dp[N][N];\n\nint DFS(int now, bool limit, int sum)\n{\n\tif(!limit && dp[now][sum] != -1) return dp[now][sum];\n\tif(!now) return sum;\n\tint to = limit ? s[now] : 9, res = 0;\n\tfor(R int i = 0; i <= to; i++)\n\t{\n\t\tres += DFS(now - 1, limit && (i == s[now]), sum + (i == 1));\n\t}\n\tif(!limit) dp[now][sum] = res;\n\treturn res;\n}\n\nint solve(int n)\n{\n\twhile(n) s[++cnt] = n % 10, n /= 10;\t\n\tmemset(dp, -1, sizeof dp);\n\treturn DFS(cnt, 1, 0);\n}\n\nint main()\n{\n\tscanf(\"%d\", &n);\n\tprintf(\"%d\\n\", solve(n));\n\treturn 0;\n} \n```",
        "postTime": 1525604933,
        "uid": 50047,
        "name": "Bartholomew",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT1483 \u30101\u3011"
    }
]