[
    {
        "content": "~~\u597d\u6c34\u4e00 Ex~~  \n\u7528\u6240\u6709\u6a21\u5f0f\u4e32\u5efa\u51fa AC \u81ea\u52a8\u673a\uff0c\u6bcf\u6b21\u4e0e\u539f\u4e32\u5339\u914d\u65f6\uff0c\u6dfb\u52a0\u5339\u914d\u4e0a\u7684\u5b57\u7b26\u4e32\u533a\u95f4 $(l,r)$\uff0c\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\uff1a\u9009\u62e9\u6700\u5c11\u7684\u70b9\uff0c\u8ba9\u6bcf\u4e2a\u533a\u95f4\u4e2d\u90fd\u81f3\u5c11\u5305\u542b\u4e00\u4e2a\u70b9\u3002\u6392\u5e8f\u8d2a\u5fc3\u89e3\u51b3\u3002  \n\u7136\u800c\u8fd9\u6837\u7684\u7b97\u6cd5\u5341\u5206\u4f18\u79c0\uff0c\u6392\u5e8f\u4f1a\u5bfc\u81f4\u8d85\u65f6\u3002\u7531\u4e8e\u6bcf\u6b21\u5339\u914d\u7684\u53f3\u7aef\u70b9\u90fd\u5728\u79fb\u52a8\uff0c\u6240\u4ee5\u53ef\u4ee5\u7701\u53bb\u6392\u5e8f\u3002  \n\u4f46\u662f\u4f18\u5316\u8fc7\u7684\u7b97\u6cd5\u4f9d\u7136\u5341\u5206\u4f18\u79c0\uff0c\u56e0\u4e3a\u533a\u95f4\u4e2a\u6570\u662f $O(n^2)$ \u7684\uff0c\u8fd9\u5bfc\u81f4\u6211\u4eec\u5fc5\u987b\u820d\u5f03\u4e00\u4e9b\u4e0d\u53ef\u80fd\u5339\u914d\u7684\u533a\u95f4\u3002\u5728\u5efa\u81ea\u52a8\u673a\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u8bb0\u5f55\u5339\u914d\u65f6\u7684\u6700\u5c0f\u957f\u5ea6\uff0c\u8fd9\u6837\u5728\u5339\u914d\u539f\u4e32\u65f6\u5c31\u53ef\u4ee5\u76f4\u63a5\u53d6\u5230\u76f8\u540c\u53f3\u7aef\u70b9\u4e0b\u7684\u6700\u5927\u5de6\u7aef\u70b9\uff0c\u4ece\u800c\u907f\u5f00\u65e0\u7528\u533a\u95f4\u3002\u7531\u4e8e\u6bcf\u4e2a\u53f3\u7aef\u70b9\u53ea\u53ef\u80fd\u66f4\u65b0\u6700\u5927\u7684\u5de6\u7aef\u70b9\uff0c\u6240\u4ee5\u533a\u95f4\u4e2a\u6570\u662f $O(|S|)$ \u7684\u3002\u90a3\u4e48\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n# AC \u4ee3\u7801\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\nconst int MAXN = 5e5 + 10;\nconst int inf = 0x3f3f3f3f;\n\nint ch[MAXN][26], fail[MAXN], tot;\n\nint len[MAXN], f[MAXN];\n\ninline \nvoid insert(char *s) {\n    int n = strlen(s), k = 0;\n    for (int i = 0; i < n; i++) {\n        if (!ch[k][s[i] - 'a']) ch[k][s[i] - 'a'] = ++tot;\n        k = ch[k][s[i] - 'a'];\n    }\n    len[k] = n;\n}\n\ninline \nvoid build() {\n    queue<int> q;\n    for (int i = 0; i < 26; i++) {\n        if (ch[0][i]) q.push(ch[0][i]);\n    }\n    f[0] = inf;\n    while (!q.empty()) {\n        int u = q.front(); q.pop();\n        f[u] = len[u] ? min(len[u], f[fail[u]]) : f[fail[u]];\n        for (int i = 0; i < 26; i++) {\n            if (ch[u][i]) fail[ch[u][i]] = ch[fail[u]][i], q.push(ch[u][i]);\n            else ch[u][i] = ch[fail[u]][i];\n        }\n    }\n}\n\nint maxr, ans;\n\ninline \nvoid find(char *s) {\n    int n = strlen(s), k = 0;\n    for (int i = 0; i < n; i++) {\n        k = ch[k][s[i] - 'a'];\n        if (i - f[k] + 2 > maxr) ans++, maxr = i + 1;\n    }\n}\n\nint n, m;\n\nchar s[MAXN], t[MAXN];\n\nint main() {\n    scanf(\"%s%d\", s, &m), n = strlen(s);\n    for (int i = 1; i <= m; i++) scanf(\"%s\", t), insert(t);\n    build(), find(s);\n    printf(\"%d\", ans);\n}\n```",
        "postTime": 1670084139,
        "uid": 406941,
        "name": "Register_int",
        "ccfLevel": 6,
        "title": "ABC268Ex \u9898\u89e3"
    },
    {
        "content": "#  [[ABC268Ex] Taboo](https://www.luogu.com.cn/problem/AT_abc268_h) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.tsawke.com?t=ABC268Ex)\n\n## \u9898\u9762\n\n\u7ed9\u5b9a\u4ec5\u6709\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\u7684\u5b57\u7b26\u4e32 $ S $\uff0c\u53ef\u4ee5\u5bf9\u5176\u8fdb\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u5c06 $ S $ \u4e2d\u67d0\u4e2a\u5b57\u7b26\u66ff\u6362\u4e3a `*`\u3002\u7ed9\u5b9a $ n $ \u4e2a\u4ec5\u6709\u82f1\u6587\u5c0f\u5199\u5b57\u6bcd\u7684\u6a21\u5f0f\u4e32\uff0c\u8981\u6c42\u8fdb\u884c\u64cd\u4f5c\u4f7f\u5f97 $ S $ \u4e2d\u4e0d\u5b58\u5728\u4efb\u610f\u5b50\u4e32\u4e0e\u6a21\u5f0f\u4e32\u76f8\u540c\u3002\u6700\u5c0f\u5316\u64cd\u4f5c\u6b21\u6570\uff0c\u8f93\u51fa\u6700\u5c0f\u503c\u3002\n\n## Solution\n\n\u63d0\u4f9b\u4e00\u4e2a**\u7406\u8bba\u590d\u6742\u5ea6\u6b63\u786e**\u4f46\u56e0\u5e38\u6570\u4ee5\u53ca\u54c8\u5e0c\u539f\u56e0**\u65e0\u6cd5\u901a\u8fc7**\u7684\u505a\u6cd5\uff0c\u540c\u65f6\u7565\u63d0\u6b63\u89e3\u3002\n\n\u9996\u5148\u6211\u4eec\u4e0d\u96be\u60f3\u5230\uff0c\u6211\u4eec\u82e5\u5bf9 $ S $ \u5339\u914d\u6a21\u5f0f\u4e32 $ T $\uff0c\u663e\u7136\u82e5\u5339\u914d\u5230\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u76f4\u63a5\u5c06\u5339\u914d\u5230\u7684\u90e8\u5206\u7684\u6700\u540e\u4e00\u4f4d\u6539\u4e3a `*` \u5373\u53ef\uff0c\u8d2a\u5fc3\u6b63\u786e\u6027\u663e\u7136\uff0c\u82e5\u6539\u524d\u9762\u7684\u53ef\u80fd\u4f1a\u5b58\u5728\u540e\u9762\u518d\u6b21\u5339\u914d\u4f7f\u5f97\u4e0d\u4f18\u3002\n\n\u7136\u540e\u5bf9\u4e8e\u6240\u6709\u5339\u914d\uff0c\u6211\u4eec\u4e5f\u4e0d\u96be\u60f3\u5230\u5904\u7406\u7684\u987a\u5e8f\u53ef\u4ee5\u662f\u5148\u5904\u7406\u957f\u5ea6\u8f83\u5c0f\u7684\u4e32\uff0c\u7136\u540e\u518d\u5904\u7406\u8f83\u957f\u7684\u3002\u6b64\u5904\u7684\u8d2a\u5fc3\u6b63\u786e\u6027\u4ecd\u663e\u7136\uff0c\u56e0\u4e3a\u77ed\u7684\u4e32\u5904\u7406\u65f6\u4e00\u5b9a\u4f1a\u5c3d\u91cf\u5730\u7834\u574f\u957f\u7684\u4e32\uff0c\u603b\u4e4b\u611f\u6027\u7406\u89e3\u4e00\u4e0b\u3002\n\n\u6240\u4ee5\u5c31\u4e0d\u96be\u60f3\u5230\u4e00\u4e2a\u505a\u6cd5\uff0c\u5f00\u4e00\u4e2a `map < int, unordered_set < unsigned long long > >`\uff0c\u5bf9\u6bcf\u4e2a\u957f\u5ea6\u7684\u4e32\u6620\u5c04\u4e00\u4e2a `set` \u5b58\u50a8\u6240\u6709\u8be5\u957f\u5ea6\u7684\u6a21\u5f0f\u4e32\u7684\u54c8\u5e0c\u503c\uff0c\u7136\u540e\u6309\u5e8f\u8dd1\u4e00\u904d\uff0c\u901a\u8fc7\u7ef4\u62a4\u54c8\u5e0c\u6765 $ O(n) $ \u8dd1\u4e00\u904d\u5e76\u5339\u914d\u4e0e\u66ff\u6362\u3002\n\n\u5206\u6790\u4e00\u4e0b\u8fd9\u4e2a\u7684\u590d\u6742\u5ea6\uff0c\u663e\u7136\u6bcf\u79cd\u957f\u5ea6\u90fd\u4f1a\u8dd1\u4e00\u904d $ O(n) $\uff0c\u90a3\u4e48\u5361\u6b64\u505a\u6cd5\u7684\u6784\u9020\u5e94\u4f7f\u957f\u5ea6\u4e3a\u7b49\u5dee\u6570\u5217\uff0c\u800c\u7b49\u5dee\u6570\u5217\u6c42\u548c\u662f $ O(n^2) $ \u7ea7\u522b\u7684\uff0c\u6240\u4ee5\u6700\u591a\u7684\u957f\u5ea6\u79cd\u7c7b\u4e3a $ O(\\sqrt{\\sum T_i}) $\uff0c\u4e5f\u5c31\u662f\u8bf4\u6700\u7ec8\u590d\u6742\u5ea6\u662f\u6839\u53f7\u7ea7\u522b\u7684\u3002\u4e0d\u8fc7\u6b64\u65f6\u6211\u4eec\u4f1a\u53d1\u73b0\u8fd9\u4fe9\u90fd\u662f `5e5` \u7ea7\u522b\u7684\uff0c\u4f3c\u4e4e\u8fc7\u4e0d\u4e86\uff1f\u4f46\u662f\u518d\u770b\u4e00\u773c\u65f6\u9650 $ 4\\texttt{s} $\uff0c\u53c8\u4f3c\u4e4e\u521a\u597d\u80fd\u8fc7\u3002\n\n\u4e0d\u8fc7\u5b9e\u73b0\u4e4b\u540e\u4f1a\u53d1\u73b0\uff0c\u90e8\u5206\u6d4b\u8bd5\u70b9 WA\uff0c\u90e8\u5206 TLE\uff0cTLE \u7684\u90e8\u5206\u5927\u6982\u7528\u4e86 $ 10\\texttt{s} $\uff0c\u82e5\u6539\u4e3a `unsigned int` \u65f6\u95f4\u53ef\u4ee5\u5230 $ 7\\texttt{s} $\uff0c\u4f46\u662f\u540c\u65f6\u4e5f\u5b58\u5728\u95ee\u9898\u5373\u54c8\u5e0c\u78b0\u649e\u3002\u6211\u4eec\u81ea\u7136\u53ef\u53ef\u4ee5\u901a\u8fc7\u624b\u5199\u6302\u94fe\u6216\u53cc\u6a21\u6570\u7b49\u4ee5\u4f7f\u5f97\u6ee1\u8db3\u6b63\u786e\u6027\uff0c\u4f46\u662f\u65f6\u95f4\u4e0a\u7406\u6027\u5206\u6790\u4e00\u4e0b\uff0c\u7b49\u5dee\u6570\u5217\u5b9e\u9645\u662f $ \\dfrac{n^2}{2} $ \u7684\uff0c\u6240\u4ee5\u6b64\u65f6\u8fd8\u6709\u4e2a $ 2 $ \u500d\u5e38\u6570\uff0c\u6240\u4ee5\u65f6\u95f4\u4e24\u500d\u4e4b\u540e\u5bc4\u6389\u4e5f\u5c31\u5f88\u5408\u7406\u4e86\u3002\u5982\u679c\u5361\u7684\u4e0d\u591f\u6b7b\u7684\u8bdd\u7406\u8bba\u4e0a\u8fd8\u662f\u53ef\u4ee5\u6539\u8fc7\u7684\uff0c\u4f46\u662f\u4e5f\u53ea\u662f\u7406\u8bba\u4e0a\uff0c\u6709\u5174\u8da3\u53ef\u4ee5\u5c1d\u8bd5\u4e00\u4e0b\u3002\n\n\u8fd9\u91cc\u6d45\u63d0\u4e00\u4e0b\u6b63\u89e3\uff0c\u8003\u8651\u521a\u624d\u63d0\u5230\u7684\u8d2a\u5fc3\u7b56\u7565\u4e4b\u540e\u5bf9\u4e8e\u5c06\u6240\u6709\u6a21\u5f0f\u4e32\u5339\u914d\u6389\u76f4\u63a5\u5199\u4e00\u4e2a AC\u81ea\u52a8\u673a \u5373\u53ef\uff0c\u5177\u4f53\u5b9e\u73b0\u53ef\u4ee5\u8003\u8651\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7684 `fail` \u5b58\u5728\u6a21\u5f0f\u4e32\u90a3\u4e48\u8be5\u8282\u70b9\u4e5f\u8ba4\u4e3a\u662f\u53ef\u4ee5\u5339\u914d\u7684\uff0c\u4e5f\u5c31\u662f\u6309\u7167\u4e4b\u524d\u7684\u8d2a\u5fc3\uff0c\u4f18\u5148\u53bb\u5339\u914d\u66f4\u77ed\u7684\u4e32\u3002\n\n## Code\n\n### \u7406\u8bba\u590d\u6742\u5ea6\u6b63\u786e\u4f46\u65e0\u6cd5\u901a\u8fc7\u7684\u4ee3\u7801\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW void* Edge::operator new(size_t){static Edge* P = ed; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\n#define BASE (31ll)\n#define S(i) (S.at(i - 1))\n\ntemplate < typename T = int >\ninline T read(void);\n\nint N;\nstring S;\nmap < int, unordered_set < unll > > pat;\nunll pow_base[510000];\nint ans(0);\n\nint main(){\n    // freopen(\"in.txt\", \"r\", stdin);\n    pow_base[0] = 1;\n    for(int i = 1; i <= 501000; ++i)pow_base[i] = pow_base[i - 1] * BASE;\n    ios::sync_with_stdio(false);\n    cin >> S;\n    cin >> N;\n    for(int i = 1; i <= N; ++i){\n        string T;\n        cin >> T;\n        unll hashv(0);\n        for(auto c : T)(hashv *= BASE) += c;\n        pat[(int)T.length()].insert(hashv);\n    }\n    for(auto mp : pat){\n        if(mp.first > (int)S.length())continue;\n        unll cur(0);\n        bool newStr(true);\n        for(int i = 1; i <= mp.first - 1; ++i)(cur *= BASE) += S(i);\n        for(int i = mp.first; i <= (int)S.length(); ++i){\n            if(!newStr)cur -= S(i - mp.first) * pow_base[mp.first - 1];\n            cur *= BASE; cur += S(i); newStr = false;\n            if(mp.second.find(cur) != mp.second.end()){\n                S(i) = '*', cur = 0, newStr = true, ++ans;\n                if(i + mp.first > (int)S.length())break;\n                for(int j = i + 1; j <= i + mp.first - 1; ++j)(cur *= BASE) += S(j);\n                i = i + mp.first - 1;\n            }\n        }\n    }printf(\"%d\\n\", ans);\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n### \u6b63\u89e3\u4ee3\u7801\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW void* Node::operator new(size_t){static Node* P = nd; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\n#define d(c) (c - 'a')\n\ntemplate < typename T = int >\ninline T read(void);\n\nstruct Node{\n    Node* son[26];\n    Node* fail;\n    int cnt;\n    OPNEW;\n}nd[510000];\nROPNEW;\nNode* root;\n\nint N;\nint ans(0);\nstring S;\nbasic_string < Node* > tmp;\n\nvoid Insert(string S){\n    Node* cur = root;\n    for(auto c : S){\n        if(!cur->son[d(c)])cur->son[d(c)] = new Node();\n        cur = cur->son[d(c)];\n    }cur->cnt++;\n}\nvoid Build(void){\n    queue < Node* > cur; cur.push(root);\n    while(!cur.empty()){\n        auto p = cur.front(); cur.pop();\n        for(int i = 0; i <= 25; ++i)\n            if(p->son[i]){\n                cur.push(p->son[i]), tmp += p->son[i];\n                if(p == root)p->son[i]->fail = root;\n                else p->son[i]->fail = p->fail->son[i];\n            }else{\n                if(p == root)p->son[i] = root;\n                else p->son[i] = p->fail->son[i];\n            }\n    }\n}\nvoid SetFail(void){\n    for(auto p : tmp)p->cnt += p->fail->cnt;\n}\nvoid Accept(void){\n    Node* cur = root;\n    for(auto c : S){\n        cur = cur->son[d(c)];\n        if(cur->cnt)++ans, cur = root;\n    }\n}\n\nint main(){\n    root = new Node();\n    cin >> S;\n    N = read();\n    for(int i = 1; i <= N; ++i){string T; cin >> T; Insert(T);}\n    Build(), SetFail(), Accept();\n    printf(\"%d\\n\", ans);\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n## UPD\n\nupdate-2023_01_18 \u521d\u7a3f\n\nupdate-2023_01_23 \u8865\u5145\u4e86\u4e00\u4e9b\u5173\u4e8e\u6b63\u89e3\u7684\u601d\u8def\u4ee5\u53ca\u6b63\u89e3\u7684\u4ee3\u7801",
        "postTime": 1674465561,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "[ABC268Ex] Taboo \u9898\u89e3"
    },
    {
        "content": "# Analysis\n\u5bb9\u6613\u60f3\u5230\u5bf9 $T$ \u5efa\u51fa AC \u81ea\u52a8\u673a\u3002\n\n\u7136\u540e\u5bf9\u6bcf\u4e2a\u7ed3\u70b9\u5904\u7406\u4e00\u4e2a $\\mathtt{mark}$ \u6807\u8bb0\uff0c\u4ee3\u8868\u662f\u5426\u5b58\u5728\u4e00\u4e2a\u4e32\u662f\u4ece\u6839\u5230\u6b64\u70b9\u7684\u8def\u5f84\u4e0a\u6240\u5f62\u6210\u7684\u5b57\u7b26\u4e32\u7684\u4e00\u4e2a\u540e\u7f00\u3002\n\n\u6709\u4e00\u4e2a\u663e\u7136\u7684\u8d2a\u5fc3\uff1a\u82e5\u6709\u4e24\u4e32 $T_i, T_j$ \u4e14 $T_i$ \u662f $T_j$ \u7684\u524d\u7f00\uff0c\u6211\u4eec\u5728\u5339\u914d\u4e0a $T_i$ \u7684\u65f6\u5019\u5c31\u52a0\u4e0a\u4e00\u4e2a\u661f\u53f7\u5c31\u80fd\u987a\u4fbf\u89e3\u51b3\u6389 $T_j$\u3002\u6240\u4ee5\u6211\u4eec\u5728\u81ea\u52a8\u673a\u4e0a\u8dd1\u7684\u65f6\u5019\u9700\u8981\u80fd\u52a0\u661f\u53f7\u5c31\u52a0\u661f\u53f7\u3002\n\n\u76f4\u63a5\u62ff $S$ \u4ece\u6839\u5f00\u59cb\u8dd1\u5339\u914d\uff0c\u5982\u679c\u8d70\u5230\u4e86\u4e00\u4e2a $\\mathtt{mark}$ \u503c\u4e3a\u771f\u7684\u8282\u70b9\uff0c\u4ee3\u8868\u6b64\u65f6\u9700\u8981\u5c06\u6b64\u4f4d\u53d8\u6210\u661f\u53f7\uff0c\u81ea\u7136\uff0c\u518d\u5f80\u4e0b\u8d70\u6240\u6709\u7684\u4e32\u90fd\u4f1a\u88ab\u8fd9\u4e00\u4e2a\u661f\u53f7\u89e3\u51b3\u6389\uff0c\u90a3\u4e48\u5c31\u56de\u5230\u6839\u91cd\u65b0\u8d70\uff0c\u5e76\u5c06\u7b54\u6848\u52a0\u4e00\u3002\n\n# CODE\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define rep(i,a,b) for (int i=(a); i<(b); i++)\n#define per(i,a,b) for (int i=(b)-1; i>=(a); i--)\n#define pb push_back\n#define eb emplace_back\n#define mp make_pair\n#define all(x) (x).begin(), (x).end()\n#define fi first\n#define se second\n#define SZ(x) ((int)(x).size())\ntypedef vector<int> VI;\ntypedef basic_string<int> BI;\ntypedef long long ll;\ntypedef pair<int, int> PII;\ntypedef double db;\nmt19937 mrand(random_device{}());\nconst ll mod=1000000007;\nint rnd(int x) {return mrand() % x;}\nll powmod(ll b, ll e, ll md=mod) {ll a=1; b %= md; assert(e>=0); for (;e;e>>=1, b=b*b%md) if(e&1) {a=a*b%md;} return a;}\nll gcd(ll a, ll b) {return b?gcd(b,a%b):a;}\n// head\n\nconst int M = 26, N = 501000;\nstruct node {\n    node *son[M], *go[M], *fail;\n    int mark;\n}pool[N], *cur = pool, *root;\n\nnode *newnode() {\n    return cur++;\n}\n\nint t;\nnode *q[N];\n\nvoid build() {\n    t = 0;\n    q[t++] = root;\n    for (int i = 0; i < t; i++) {\n        node *u = q[i];\n        for (int j = 0; j < M; j++) {\n            if (u->son[j]) {\n                u->go[j] = u->son[j];\n                if (u == root) u->son[j]->fail = root;\n                else u->son[j]->fail = u->fail->go[j];\n                q[t++] = u->son[j];\n            } else {\n                if (u == root) u->go[j] = root;\n                else u->go[j] = u->fail->go[j];\n            }\n        }\n    }\n} // ACAM\n\nchar tt[N], s[N];\n\nint main() {        \n    scanf(\"%s\", s);\n    int n = strlen(s);\n    root = newnode();\n    int _;\n    scanf(\"%d\", &_);\n    rep(i,0,_) {\n        scanf(\"%s\", tt);\n        int m = strlen(tt);\n        node *p = root;\n        rep(j,0,m) {\n            int w = tt[j] - 'a';\n            if (!p->son[w]) p->son[w] = newnode();\n            p = p->son[w];\n        }   \n        p->mark=1;\n    } \n    build();\n    rep(i,1,t) q[i]->mark |= q[i]->fail->mark; \n    //\u5efa\u81ea\u52a8\u673a\n    \n    node *p = root;\n    int ans = 0;\n    rep(i,0,n) {\n        int w = s[i] - 'a';\n        p = p->go[w];\n        if (p->mark) ans++, p = root;\n    } // \u8dd1\u5339\u914d\n    printf(\"%d\\n\", ans);\n}   \n```",
        "postTime": 1671757386,
        "uid": 551375,
        "name": "junxis",
        "ccfLevel": 5,
        "title": "[ABC268Ex] Taboo"
    },
    {
        "content": "# ABC268 Ex - Taboo\n\n\u9996\u5148\uff0c\u4e00\u4e2a\u5b57\u7b26\u4e32\u5408\u6cd5\u7684\u5fc5\u8981\u6761\u4ef6\u662f\u5176\u6240\u6709\u5b50\u4e32\u90fd\u5408\u6cd5\uff0c\u4e0d\u96be\u60f3\u5230\u5229\u7528\u6b64\u7279\u6027\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002\n\n\u8bbe $f_i$ \u4e3a\u4f7f\u524d\u7f00 $i$ \u5408\u6cd5\u7684\u6700\u5c0f\u82b1\u8d39\uff0c\u679a\u4e3e\u672b\u5c3e\u7684\u4e00\u6bb5\u6700\u957f\u5408\u6cd5\u540e\u7f00\uff0c\u4e0d\u96be\u6709\u8f6c\u79fb\uff1a\n$$\nf_i=\\min_{\\substack{1\\le j \\le i\\\\(j,i]\\text{ is legal}}} f_{j-1}+1\n$$\n\u610f\u601d\u662f\u628a $j$ \u53d8\u4e3a `*`\u3002\u4ece\u8fd9\u4e2a dp \u5f0f\u5b50\u53ef\u4ee5\u770b\u51fa $f$ \u5e94\u8be5\u662f\u4e00\u4e2a\u5355\u8c03\u51fd\u6570\uff0c\u56e0\u4e3a\u53ef\u8f6c\u79fb\u7684 $j$ \u662f\u6709\u5355\u8c03\u6027\u7684\u3002\u8fb9\u754c\u4e3a $f_0=-1$\u3002\n\n\u4e0a\u9762\u8fd9\u4e00\u6bb5\u7684 $(j, i] \\text{ is legal}$ \u6bd4\u8f83\u62bd\u8c61\uff0c\u610f\u601d\u662f\u5b50\u4e32 $(j, i]$ \u5408\u6cd5\uff0c\u5373\u5176\u4e2d\u6ca1\u6709\u51fa\u73b0\u8fc7 $T_i$\u3002\n\n\u7531\u4e8e\u662f\u591a\u6a21\u5f0f\u4e32\uff0c\u4e0d\u96be\u60f3\u5230\u7528 AC \u81ea\u52a8\u673a\u89e3\u51b3\u3002\u6839\u636e\u6b64\u610f\u4e49\uff0c\u53ef\u4ee5\u5f97\u5230\u4e00\u4e2a\u66f4\u62bd\u8c61\u7684\u5b9a\u4e49\u5982\u4e0b\uff1a\n\n- \u7a7a\u4e32\u662f\u5408\u6cd5\u7684\uff1b\n- \u4e00\u4e2a\u975e\u7a7a\u4e32\u5408\u6cd5\u5f53\u4e14\u4ec5\u5f53\u5176\u5728 AC \u81ea\u52a8\u673a\u4e0a\u8f6c\u79fb\u65f6\u6ca1\u6709\u7ecf\u8fc7\u4efb\u4f55\u4e00\u4e2a**\u7ec8\u6b62\u8282\u70b9**\uff1b\n- AC \u81ea\u52a8\u673a\u4e0a\u7684\u4e00\u4e2a\u72b6\u6001\u88ab\u79f0\u4e3a**\u7ec8\u6b62\u8282\u70b9**\u5f53\u4e14\u4ec5\u5f53\u8be5\u72b6\u6001\u4e3a\u67d0\u4e2a $T_i$ \u7684\u7ed3\u675f\u72b6\u6001\u6216\u5176 fail \u6811\u4e0a\u7684\u7956\u5148\u4e3a**\u7ec8\u6b62\u8282\u70b9**\u3002\n\n\u7136\u540e\u624b\u6a21\u4e00\u4e0b\u6837\u4f8b\uff1a\n\n```plain\nstr: aaaaaaaaa\nf:   011223344\n```\n\n\u6a21\u62df\u7684\u8fc7\u7a0b\u4e2d\u7a81\u7136\u88ab\u542f\u53d1\u8d2a\u5fc3\u4e86\u3002\n\n\u56e0\u4e3a $f$ \u7684\u5355\u8c03\u6027\uff0cdp \u80af\u5b9a\u662f\u9009\u62e9\u4e00\u6bb5\u6781\u957f\u533a\u95f4 $(j, i]$\uff0c\u7136\u540e\u4ece $f_{j-1}$ \u8f6c\u79fb\u8fc7\u6765\u3002\n\n\u4f46\u662f\u8fd9\u6837\u9006\u7740\u8003\u8651\u76f8\u5f53\u96be\u8f6c\u79fb\uff0c\u590d\u6742\u5ea6\u662f $O(n^2)$ \u7684\u3002\n\n\u4e0d\u59a8\u6b63\u7740\u8003\u8651\uff1a\u4e00\u5f00\u59cb\u4ece AC \u81ea\u52a8\u673a\u7684\u539f\u70b9\u5f00\u59cb\u884c\u8d70\uff0c\u8bbe\u9047\u5230\u7684\u4e0b\u4e00\u4e2a\u5b57\u7b26\u4e3a $s_i$\u3002\u5148\u8d70\u5411\u76ee\u6807\u8282\u70b9\uff0c\u5982\u679c\u76ee\u6807\u8282\u70b9\u4e3a**\u7ec8\u6b62\u8282\u70b9**\uff0c\u5219\u628a $s_i$ \u4fee\u6539\u4e3a `*`\uff0c\u56de\u5230 AC \u81ea\u52a8\u673a\u7684\u539f\u70b9\u3002\n\n\u8003\u8651\u8bc1\u660e\u8d2a\u5fc3\u7684\u6b63\u786e\u6027\uff1a\u5982\u679c\u76ee\u6807\u8282\u70b9\u4e3a**\u7ec8\u6b62\u8282\u70b9**\uff0c\u6b64\u65f6\u80af\u5b9a\u662f\u8981\u4fee\u6539\u67d0\u4e2a\u5b57\u7b26\u7684\uff0c\u95ee\u9898\u53ea\u662f\u5728\u4e8e\u4fee\u6539\u54ea\u4e2a\u5b57\u7b26\u3002\u5982\u679c\u4fee\u6539\u7684\u662f\u4e0b\u4e00\u4e2a\u5b57\u7b26\uff0c\u5219\u53ef\u4ee5\u4fdd\u8bc1\u4fee\u6539\u540e\u81ea\u5df1\u56de\u5230 AC \u81ea\u52a8\u673a\u7684\u539f\u70b9\uff1b\u5426\u5219\u5047\u8bbe\u4e0b\u4e00\u4e2a\u5b57\u7b26\u662f $s_i$\uff0c\u4fee\u6539\u7684\u5b57\u7b26\u662f $s_j$\uff0c\u5219\u4fee\u6539\u540e\u7684\u72b6\u6001\u4e3a\u5b50\u4e32 $(j, i]$ \u7684\u72b6\u6001\u3002\u5b50\u4e32 $(j, i]$ \u7684\u72b6\u6001\u80af\u5b9a\u4f1a\u6bd4\u539f\u70b9\u6765\u5f97\u66f4\u52a3\uff08**\u66f4\u5bb9\u6613**\u8d70\u5230**\u7ec8\u6b62\u8282\u70b9**\uff09\u3002\n\n\u8fd9\u91cc\u7684**\u66f4\u5bb9\u6613**\u6307\u7684\u662f\uff1a\u5047\u8bbe\u5b58\u5728\u8fd9\u6837\u4e00\u4e2a\u8f93\u5165\u4fe1\u53f7 $S$\uff0c\u4f7f\u5f97\u5f53\u8d77\u59cb\u72b6\u6001\u662f\u539f\u70b9\u65f6\uff0c\u4e2d\u95f4\u4f1a\u7ecf\u8fc7\u67d0\u4e2a**\u7ec8\u6b62\u8282\u70b9**\u3002\u90a3\u4e48\u5bf9\u4e8e\u8d77\u59cb\u72b6\u6001\u4e0d\u4e3a\u539f\u70b9\u7684\u60c5\u51b5\uff0c\u63a5\u53d7\u8f93\u5165\u4fe1\u53f7 $S$ \u540e\uff0c\u4e00\u5b9a\u4e5f\u4f1a\u7ecf\u8fc7\u67d0\u4e2a**\u7ec8\u6b62\u8282\u70b9**\u3002~~\u4e3a\u4ec0\u4e48\uff1f\u5f53\u4f5c\u8bfe\u540e\u601d\u8003\u9898\u4e86~~\n\n\u65f6\u7a7a\u590d\u6742\u5ea6 $O(\\lvert S\\rvert + \\lvert\\Sigma\\rvert\\sum\\lvert T_i\\rvert)$\uff0c$\\lvert\\Sigma\\rvert$ \u4e3a\u5b57\u7b26\u96c6\u5927\u5c0f\uff08\u6b64\u5904\u4e3a $26$\uff09\u3002\n\n## \u4ee3\u7801\n\n```cpp\n// Problem: Ex - Taboo\n// URL: https://atcoder.jp/contests/abc268/tasks/abc268_h\n// Group: AtCoder - UNIQUE VISION Programming Contest 2022 Summer (AtCoder Beginner Contest 268)\n// Time: 2022-12-01 16:21\n// Author: lingfunny\n\n#include <bits/stdc++.h>\nusing LL = long long;\nusing uint = unsigned;\nusing namespace std;\nconst int mxn = 5e5 + 10;\n\nint n, m;\nchar s[mxn], t[mxn];\n\nstruct ACAM {\n\tint ch[26][mxn], tot, mark[mxn], fail[mxn];\n\tACAM() : tot(0) {}\n\tvoid ins(char s[], int n) {\n\t\tint u = 0;\n\t\tfor (int i = 1; i <= n; ++i) {\n\t\t\tint &v = ch[s[i] - 'a'][u];\n\t\t\tif (!v) v = ++tot;\n\t\t\tu = v;\n\t\t}\n\t\tmark[u] = 1;\n\t}\n\tvoid build() {\n\t\tqueue<int> Q;\n\t\tvector<vector<int>> G(tot + 1);\n\t\tfor (int i = 0; i < 26; ++i)\n\t\t\tif (ch[i][0]) Q.emplace(ch[i][0]);\n\t\twhile (Q.size()) {\n\t\t\tint u = Q.front();\n\t\t\tG[fail[u]].emplace_back(u), Q.pop();\n\t\t\tfor (int i = 0; i < 26; ++i)\n\t\t\t\tif (ch[i][u]) Q.emplace(ch[i][u]), fail[ch[i][u]] = ch[i][fail[u]];\n\t\t\t\telse ch[i][u] = ch[i][fail[u]];\n\t\t}\n\t\tfunction<void(int)> dfs = [&](int u) {\n\t\t\tfor (int v : G[u]) mark[v] |= mark[u], dfs(v);\n\t\t};\n\t\tdfs(0);\n\t}\n} A;\n\nsigned main() {\n\tscanf(\"%s\", s + 1);\n\tn = strlen(s + 1);\n\tscanf(\"%d\", &m);\n\tfor (int i = 1; i <= m; ++i) scanf(\"%s\", t + 1), A.ins(t, strlen(t + 1));\n\tA.build();\n\tint cur = 0, ans = 0;\n\tfor (int i = 1; i <= n; ++i) {\n\t\tint v = A.ch[s[i] - 'a'][cur];\n\t\tif (A.mark[v]) ++ans, cur = 0;\n\t\telse cur = v;\n\t}\n\tprintf(\"%d\\n\", ans);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1669883753,
        "uid": 280800,
        "name": "lingfunny",
        "ccfLevel": 7,
        "title": "ABC268 Ex - Taboo \u9898\u89e3"
    }
]