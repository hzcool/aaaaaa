[
    {
        "content": "\u4e00\u79cd\u65b0\u7684\u601d\u8def\u3002 \n\n\u8003\u8651\u6784\u9020\u5e8f\u5217 $Q$ \u4f7f\u5f97 $Q_{P_i}=i$\uff0c\u53d8\u6210\u4ea4\u6362\u76f8\u90bb\u7684\u5dee\u503c\u5927\u4e8e\u7b49\u4e8e $k$ \u7684\u6570\u3002\n\n\u5148\u8003\u8651\u66b4\u529b\u505a\u6cd5\uff0c\u6309\u7167\u5192\u6ce1\u6392\u5e8f\uff0c\u628a\u5927\u7684\u5c3d\u53ef\u80fd\u5f80\u53f3\u632a\u3002  \n\n\u7136\u540e\u628a\u5192\u6ce1\u6392\u5e8f\u6539\u4e3a\u5f52\u5e76\u6392\u5e8f\u3002\u4e00\u4e2a\u53f3\u8fb9\u7684\u6570\u80fd\u6bd4\u5de6\u8fb9\u7684\u6570\u5148\u8fdb\u884c\u5f52\u5e76\u5c31\u8981\u4fdd\u8bc1\u5b83\u52a0 $k$ \u5c0f\u4e8e\u7b49\u4e8e\u5de6\u8fb9\u7684\u6570\u7684\u540e\u7f00\u6700\u5c0f\u503c\u5373\u53ef\u3002\u6bcf\u6b21\u5f52\u5e76\u65f6\u8bb0\u5f55\u5de6\u8fb9\u7684\u540e\u7f00\u6700\u5c0f\u503c\u3002\n\n\u4ee3\u7801\u5982\u4e0b\n\n```cpp\n#include<bits/stdc++.h>\n#define FOR(i,a,b) for(register int i=a;i<=b;i++)\n#define ROF(i,a,b) for(register int i=a;i>=b;i--)\n#define isnum(ch) ('0'<=ch&&ch<='9')\n#define int long long\n#define gc (p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++)\nchar buf[100000],*p1(buf),*p2(buf);\nusing namespace std;\ninline int read()\n{\n\tint s=0,f=1;char _ch=gc;\n\twhile(!isnum(_ch))(_ch=='-')&&(f=-1),_ch=gc;\n\twhile(isnum(_ch))s=s*10+_ch-48,_ch=gc;\n\treturn s*f;\n}\nconst int N=5e5+10;\nint n,k,a[N],id[N];\nint Min[N],b[N];\n#define mid ((l+r)>>1)\nvoid merge(int l,int r){\n\tif(l==r)return;\n\tmerge(l,mid),merge(mid+1,r);\n\tint num=N,now1=l,now2=mid+1,cnt=l;\n\tROF(i,mid,l)num=min(num,a[i]),Min[i]=num;\n\twhile(now1<=mid&&now2<=r){\n\t\tif(Min[now1]>=a[now2]+k)b[cnt++]=a[now2],now2++;\n\t\telse b[cnt++]=a[now1],now1++;\n\t}\n\twhile(now1<=mid)b[cnt++]=a[now1],now1++;\n\twhile(now2<=r)b[cnt++]=a[now2],now2++;\n\tFOR(i,l,r)a[i]=b[i];\n}\nsigned main()\n{\n\tn=read(),k=read();\n\tFOR(i,1,n)a[read()]=i;\n\tmerge(1,n);\n\tFOR(i,1,n)id[a[i]]=i;\n\tFOR(i,1,n)cout<<id[i]<<'\\n';\n\treturn 0;\n}\n```\n\n",
        "postTime": 1633869823,
        "uid": 367687,
        "name": "linghuchong_",
        "ccfLevel": 0,
        "title": "\u6392\u5c71\u5012\u6d77\u6c14\u8d2f\u957f\u8679\u98ce\u4e2d\u6b8b\u70db\u72ec\u6811\u4e00\u5e1c\u53e6\u8f9f\u8e4a\u5f84\u9996\u5c4a\u827e\u7279\u5bc7\u5fb7\u683c\u5170\u8fbe\u6bd4\u8d5b\u6700\u7ec8\u9898\u9898\u89e3"
    },
    {
        "content": "\u5728\u535a\u5ba2\u56ed\u98df\u7528\u66f4\u4f73\uff1a[https://www.cnblogs.com/PinkRabbit/p/AGC001F.html](https://www.cnblogs.com/PinkRabbit/p/AGC001F.html)\u3002\n\n### \u9898\u610f\u7b80\u8ff0\n\n\u6709\u4e00\u4e2a $1 \\sim N$ \u7684\u6392\u5217 $P_1 \\sim P_N$\uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u5982\u4e0b\u64cd\u4f5c\u4efb\u610f\u591a\u6b21\uff1a\n\n- \u9009\u53d6\u4e24\u4e2a\u4e0b\u6807 $i, j$\uff08$1 \\le i < j \\le N$\uff09\uff0c\u8fd8\u9700\u6ee1\u8db3 $j - i \\ge K$ \u4e14 $|P_i - P_j| = 1$\uff0c\u7136\u540e\u4ea4\u6362 $P_i$ \u4e0e $P_j$ \u7684\u503c\u3002\n\n\u8bf7\u95ee\u4f60\u80fd\u5f97\u5230\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\u662f\u4ec0\u4e48\uff1f\u8bf7\u8f93\u51fa\u5b83\u3002\n\n- $1 \\le N \\le 5 \\times {10}^5$\u3002\n\n### \u9898\u89e3\n\n\u5b83\u7ed9\u4e86\u4e2a\u6392\u5217 $P$\uff0c\u7136\u540e $i, j$ \u4e24\u4e2a\u4f4d\u7f6e\u80fd\u4ea4\u6362\u7684\u6761\u4ef6\u662f $|i - j| \\ge K$ \u5e76\u4e14 $|P_i - P_j| = 1$\u3002\n\n\u8fd9\u4e2a\u6761\u4ef6\u770b\u8d77\u6765\u5341\u5206\u7684\u7384\u5999\uff0c\u8003\u8651 $Q$ \u4e3a $P$ \u7684\u9006\u7f6e\u6362\uff0c\u90a3\u4e48\u6b64\u65f6\u5c31\u76f8\u5f53\u4e8e\u5982\u679c $|Q_i - Q_{i + 1}| \\ge K$ \u4f60\u5c31\u53ef\u4ee5\u4ea4\u6362\u4f4d\u7f6e $i$ \u548c $(i + 1)$\u3002\n\n\u770b\u8d77\u6765\u8212\u670d\u591a\u4e86\u3002\u6211\u4eec\u9700\u8981\u6c42\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 $P$\uff0c\u653e\u5230 $Q$ \u4e0a\u5c31\u662f\u8981\u8ba9**\u503c**\u4e3a $1$ \u7684**\u4e0b\u6807**\u5c3d\u91cf\u9760\u524d\uff08$Q_x = 1$ \u7684 $x$ \u5c3d\u91cf\u5c0f\uff09\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u7136\u540e\u518d\u8003\u8651 $Q$ \u4e2d\u7684\u4e24\u4e2a\u503c\uff0c\u5982\u679c\u5b83\u4eec\u7684\u5dee\u5c0f\u4e8e $K$\uff0c\u90a3\u4e48\u5b83\u4eec\u5c31\u6c38\u8fdc\u65e0\u6cd5\u4ea4\u6362\uff0c\u4e5f\u5c31\u662f\u987a\u5e8f\u5c31\u88ab\u5b9a\u6b7b\u4e86\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff1a\u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3 $|u - v| < K$ \u7684 $(u, v)$\uff0c\u5b83\u4eec\u5728 $Q$ \u4e2d\u51fa\u73b0\u7684\u76f8\u5bf9\u4f4d\u7f6e\u88ab\u56fa\u5b9a\u4e86\u3002\n\n\u800c\u5bf9\u4e8e\u4e24\u4e2a\u6392\u5217 $Q, R$\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\u5982\u679c\u6bcf\u4e00\u5bf9 $(u, v)$ \u5728 $Q, R$ \u4e2d\u7684\u76f8\u5bf9\u4f4d\u7f6e\u90fd\u76f8\u540c\u7684\u8bdd\uff0c\u5b83\u4eec\u5c31\u53ef\u4ee5\u4e92\u76f8\u8f6c\u6362\u3002\u9650\u4e8e\u7bc7\u5e45\u4e0d\u8bc1\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\u53ea\u8981\u6c42\u51fa\u6ee1\u8db3\u6240\u6709 $(u, v)$ \u9650\u5236\u7684\u6392\u5217\u5373\u53ef\u3002\u518d\u6b21\u56de\u5230\u521d\u59cb\u6392\u5217 $P$\uff0c\u91cd\u5199\u9650\u5236\u4e3a\uff1a\n\n\u5bf9\u4e8e\u6240\u6709\u6ee1\u8db3 $|i - j| < K$ \u7684\u4e0b\u6807 $(i, j)$\uff0c\u5982\u679c\u521d\u59cb\u65f6 $P_i < P_j$\uff0c\u5219\u6700\u7ec8\u7684\u6392\u5217\u4e5f\u5fc5\u987b\u6709 $P_i < P_j$\uff0c\u53cd\u4e4b\u4ea6\u7136\u3002\n\n\u4f60\u53ef\u4ee5\u56de\u53bb\u89c2\u5bdf\u4e00\u4e0b\u6837\u4f8b\u662f\u5426\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\uff0c\u4e00\u5b9a\u662f\u6ee1\u8db3\u7684\u3002\n\n\u7136\u800c\u6b64\u65f6\u6211\u4eec\u9700\u8981\u8ba9 $P_1$ \u5c3d\u91cf\u5c0f\uff0c\u5728\u6b64\u6761\u4ef6\u4e0b\u8ba9 $P_2$ \u5c3d\u91cf\u5c0f\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u6211\u4eec\u628a\u4e0d\u7b49\u53f7\u5199\u51fa\u6765\u540e\uff0c\u6574\u4e2a\u5e8f\u5217\u5c31\u53d8\u6210\u4e86\u4e2a DAG\uff0c\u6211\u4eec\u8981\u7ed9\u4e88\u6bcf\u4e2a\u70b9\u9002\u5f53\u7684\u62d3\u6251\u7f16\u53f7\uff0c\u8ba9\u62d3\u6251\u7f16\u53f7\u7684\u5b57\u5178\u5e8f\u5c3d\u91cf\u5c0f\u3002\n\n\u8fd9\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\u3002**\u5728\u4e00\u822c\u60c5\u51b5\u4e0b**\uff0c\u5b83\u7684\u89e3\u51b3\u65b9\u6848**\u5e76\u4e0d\u662f**\u90e8\u5206\u9898\u89e3\u6240\u8ff0\u7684\uff1a\u300c\u76f4\u63a5\u62d3\u6251\u6392\u5e8f\uff0c\u4f46\u6bcf\u6b21\u4f18\u5148\u53d6\u7f16\u53f7\u6700\u5c0f\u7684\u70b9\u300d\u3002\n\n**\u800c\u662f**\uff1a\u628a\u6240\u6709\u8fb9\u53cd\u5411\uff0c\u7136\u540e\u62d3\u6251\u6392\u5e8f\uff08\u4e5f\u5c31\u662f\u5012\u7740\u62d3\u6251\u6392\u5e8f\uff09\uff0c\u4f46\u6bcf\u6b21\u4f18\u5148\u53d6\u7f16\u53f7\u6700\u5927\u7684\u70b9\uff0c\u62d3\u6251\u7f16\u53f7\u4e5f\u4ece $N$ \u5f80 $1$ \u7f16\u53f7\u3002\n\n\u8fd9\u4e24\u79cd\u65b9\u6cd5\u662f\u5bf9\u79f0\u7684\uff0c\u4f46\u662f**\u5728\u4e00\u822c\u60c5\u51b5\u4e0b**\u6c42\u5f97\u7684\u4e1c\u897f\u5e76\u4e0d\u76f8\u540c\uff0c\u4e14\u7b2c\u4e8c\u79cd\u624d\u662f\u5bf9\u7684\u3002\n\n\u65e0\u8bba\u5982\u4f55\uff0c\u8fd9\u5f20\u56fe\u7684\u8fb9\u6570\u8fd8\u662f $\\mathcal O (N K)$ \u7684\uff0c\u4e0d\u80fd\u663e\u5f0f\u5efa\u56fe\u505a\u3002\u6211\u4eec\u8003\u8651\u7528\u6570\u636e\u7ed3\u6784\u4f18\u5316\u8fd9\u4e2a\u8fc7\u7a0b\uff1a\n\n\u4efb\u610f\u65f6\u523b\u4e0b\uff0c\u5165\u5ea6\u4e3a $0$ \u7684\u70b9\uff0c\u5373\u662f\u6ee1\u8db3 $P_i$ \u4e3a\u5728 $(i - K, i + K)$ \u4e2d\uff08\u6ce8\u610f\u662f\u5f00\u533a\u95f4\uff09\u7684\u6700\u5927\u503c\u7684 $i$\u3002\n\n\u5220\u9664\u4e00\u4e2a\u70b9 $i$ \u5c31\u76f8\u5f53\u4e8e\u628a $P_i$ \u6539\u6210 $-\\infty$\uff0c\u4e0e\u6b64\u540c\u65f6\u4f1a\u5f71\u54cd\u5230\u5468\u56f4 $(i - K, i + K)$ \u8fd9\u4e2a\u533a\u57df\uff08\u5f00\u533a\u95f4\uff09\u7684\u8fde\u8fb9\u60c5\u51b5\u3002\n\n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u8fd9\u4e2a\u8fc7\u7a0b\uff0c\u521d\u59cb\u65f6\u5148\u67e5\u4e00\u904d\u6bcf\u4e2a\u70b9\u662f\u5426\u5165\u5ea6\u4e3a $0$\uff0c\u5982\u679c\u662f\u5c31\u52a0\u5165\u4e00\u4e2a\u5927\u6839\u5806\u4e2d\u3002\n\n\u7136\u540e\u6bcf\u6b21\u53d6\u51fa\u5806\u9876\uff0c\u5220\u9664\u5b83\u7136\u540e\u5206\u522b\u67e5\u8be2 $(i - K, i)$ \u548c $(i, i + K)$ \u8fd9\u4e24\u4e2a\u533a\u57df\u4e2d\u7684\u6700\u5927\u503c\u7f16\u53f7\uff0c\u68c0\u67e5\u662f\u5426\u5165\u5ea6\u4e3a $0$ \u5165\u5806\u3002\n\n\u6700\u540e\u76f4\u63a5\u8f93\u51fa\u7f16\u53f7\u5373\u53ef\uff0c\u5f88\u6709\u8da3\u7684\u4e00\u9898\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O (N \\log N)$\u3002\n\n**\u6700\u540e**\uff1a\u4e4b\u6240\u4ee5\u524d\u6587\u4e2d\u7b2c\u4e00\u79cd\u300c\u9519\u8bef\u300d\u7684\u65b9\u6cd5\u4e5f\u80fd AC\uff0c\u662f\u56e0\u4e3a\u672c\u9898\u4e2d\u7279\u6b8a\u7684\u8fde\u8fb9\u5f62\u5f0f\uff1a\n\n\u8003\u8651\u7b2c\u4e00\u79cd\u65b9\u6cd5\u7b2c\u4e00\u6b21\u9519\u8bef\u7f16\u53f7\u65f6\uff1a\u5047\u8bbe\u662f\u628a\u672c\u5e94\u7ed9\u4f4d\u7f6e $k$ \u7684\u7f16\u53f7\u7ed9\u4e86\u4f4d\u7f6e $j$\uff0c\u6839\u636e\u7b97\u6cd5\u6d41\u7a0b\uff0c\u6b64\u65f6\u6709 $j < k$\u3002\n\n\u73b0\u5728 $j$ \u7684\u7f16\u53f7\u51cf\u5c0f\u4e86\uff0c\u4f46\u7b54\u6848\u5374\u9519\u4e86\uff0c\u5fc5\u662f\u56e0\u4e3a $k$ \u7684\u7f16\u53f7\u589e\u5927\u76f4\u63a5\u6216\u95f4\u63a5\u5bfc\u81f4\u4e86\u67d0\u4e2a\u4f4d\u7f6e $i$ \u7684\u7f16\u53f7\u4e0d\u5f97\u4e0d\u589e\u5927\u3002\u6b64\u65f6\u6709 $i < j < k$\u3002\n\n\u6ce8\u610f\u5230\u6b64\u65f6 $j$ \u662f\u65e0\u5165\u5ea6\u7684\u4f4d\u7f6e\u4e2d\u6700\u5c0f\u7684\uff0c\u6240\u4ee5\u6bd4 $j$ \u5c0f\u7684\u4f4d\u7f6e\u4e2d\u5982\u679c\u8fd8\u6709\u672a\u6807\u53f7\u7684\uff0c\u4e00\u5b9a\u6709 $j$ \u5411\u5176\u7684\u8fde\u8fb9\uff0c\u8fd9\u662f\u56e0\u4e3a\uff1a\n\n\u4e00\u76f4\u6cbf DAG \u4e2d\u7684\u8fb9\u5f80\u56de\u8d70\uff08\u5220\u9664\u5df2\u7f16\u53f7\u7684\u70b9\uff09\uff0c\u6700\u7ec8\u4f1a\u8d70\u5230\u6ca1\u6709\u5165\u5ea6\u7684\u70b9\uff0c\u5982\u679c\u4e0d\u662f $j$ \u5219\u4e2d\u95f4\u4e00\u5b9a\u8de8\u8fc7 $j$\uff0c\u90a3\u65f6\u76f4\u63a5\u5230 $j$ \u5373\u53ef\u3002\n\n\u6240\u4ee5\u4e00\u5b9a\u6709\uff1a\u6700\u7ec8\u7b54\u6848\u4e2d\uff0c\u6b64\u65f6\u672a\u7f16\u53f7\u7684\uff0c\u6bd4 $j$ \u5c0f\u7684\u4f4d\u7f6e\uff0c\u5176\u7f16\u53f7\u4e00\u5b9a\u5927\u4e8e $j$ \u7684\u7f16\u53f7\u3002\n\n\u6240\u4ee5\u6b64\u65f6\u6211\u4eec\u5982\u679c\u76f4\u63a5\u628a $j$ \u7684\u7f16\u53f7\u63d0\u5230 $k$ \u7684\u7f16\u53f7\u4e4b\u524d\uff0c\u662f\u5b8c\u5168\u4e0d\u5f71\u54cd $j$ \u4e4b\u524d\u7684\u6240\u6709\u70b9\u7684\u7f16\u53f7\u7684\u3002\n\n\u4e0e $i$ \u7684\u6807\u53f7\u4f1a\u589e\u5927\u77db\u76fe\uff0cQ.E.D.\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <queue>\n\nconst int Inf = 0x3f3f3f3f;\nconst int MN = 500005, MS = 1 << 20 | 7;\n\nint N, K, P[MN], Ans[MN];\n\n#define li (i << 1)\n#define ri (li | 1)\n#define mid ((l + r) >> 1)\n#define ls li, l, mid\n#define rs ri, mid + 1, r\nint mxp[MS];\nvoid Build(int i, int l, int r) {\n\tif (l == r) return mxp[i] = l, void();\n\tBuild(ls), Build(rs);\n\tmxp[i] = P[mxp[li]] > P[mxp[ri]] ? mxp[li] : mxp[ri];\n}\nvoid Del(int i, int l, int r, int p) {\n\tif (l == r) return mxp[i] = 0, void();\n\tp <= mid ? Del(ls, p) : Del(rs, p);\n\tmxp[i] = P[mxp[li]] > P[mxp[ri]] ? mxp[li] : mxp[ri];\n}\nint Qur(int i, int l, int r, int a, int b) {\n\tif (r < a || b < l) return 0;\n\tif (a <= l && r <= b) return mxp[i];\n\tint v1 = Qur(ls, a, b), v2 = Qur(rs, a, b);\n\treturn P[v1] > P[v2] ? v1 : v2;\n}\n\nint inq[MN];\nstd::priority_queue<int> pq;\ninline void check(int id) {\n\tif (inq[id]) return ;\n\tif (Qur(1, 1, N, id - K + 1, id + K - 1) == id)\n\t\tpq.push(id), inq[id] = 1;\n}\n\nint main() {\n\tscanf(\"%d%d\", &N, &K);\n\tfor (int i = 1; i <= N; ++i) scanf(\"%d\", &P[i]);\n\tP[0] = -Inf;\n\tBuild(1, 1, N);\n\tfor (int i = 1; i <= N; ++i) check(i);\n\tfor (int i = N; i >= 1; --i) {\n\t\tint u = pq.top(); pq.pop();\n\t\tAns[u] = i;\n\t\tDel(1, 1, N, u);\n\t\tint pos;\n\t\tif ((pos = Qur(1, 1, N, u - K + 1, u - 1))) check(pos);\n\t\tif ((pos = Qur(1, 1, N, u + 1, u + K - 1))) check(pos);\n\t}\n\tfor (int i = 1; i <= N; ++i) printf(\"%d\\n\", Ans[i]);\n\treturn 0;\n}\n```",
        "postTime": 1591477918,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 AT1984 \u3010[AGC001F] Wide Swap\u3011"
    },
    {
        "content": "## F : Wide Swap\n\n### \u7ffb\u8bd1 :\n\n\u7ed9\u51fa\u4e00\u4e2a\u5143\u7d20\u96c6\u5408\u4e3a$\\{1,2,\\dots,N\\}\\ (1\\leq N\\leq 500,000)$\u7684\u6392\u5217P\uff0c\u5f53\u6709$i,j\\ (1\\leq i<j\\leq N)$\u6ee1\u8db3$j-i\\geq K\\  (1\\leq K\\leq N-1)$\u4e14$|P_{i}-P_{j}|= 1$\u65f6\uff0c\u53ef\u4ee5 \u4ea4\u6362$P_{i}$\u548c$P_{j}$\n\n\u6c42\uff1a\u53ef\u80fd\u6392\u5217\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\n\n### \u9898\u89e3 :\n\n\u9996\u5148\uff0c\u89c2\u5bdf\u5230$j-i\\geqslant k$\u975e\u5e38\u96be\u641e\uff0c\u4f46\u662f$|P_{i}-P_{j}|= 1$\u6709\u5f88\u597d\u7684\u6027\u8d28\uff08\u76f8\u90bb\u81ea\u7136\u6570\uff09\uff0c\u8fd9\u542f\u53d1\u6211\u4eec\u60f3\u5230\u4e00\u4e2a\u96be\u4ee5\u60f3\u5230\u7684\u60f3\u6cd5\uff1a\u4ee4$Q_{P_i}=i$ \uff0c\u5373Q\u4e3aP\u7684\u9006\u5e8f\u5217\u3002\n\n\u5219\u539f\u95ee\u9898\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a\n\n- \u7ed9\u51fa\u4e00\u4e2a\u6392\u5217Q\u4e3aP\u7684\u9006\u5e8f\u5217\n\n- \u6bcf\u6b21\u53ef\u4ee5\u4ea4\u6362\u76f8\u90bb\u4e24\u4e2a\u6570\n\n- \u4ea4\u6362\u7684\u4e24\u4e2a\u6570\u7684\u5dee\u7684\u7edd\u5bf9\u503c$\\geqslant k$\n\n- \u8ba9\u6700\u7ec8\u7684\u6392\u5217\u7684\u9006\u5e8f\u5217\u5b57\u5178\u5e8f\u6700\u5c0f\n\n\u9996\u5148\uff0c\u6700\u7ec8\u7684\u6392\u5217\u7684\u9006\u5e8f\u5217\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u7b49\u4ef7\u4e8e\uff0c\u6700\u7ec8\u7684\u6392\u5217\u7684\u53cd\u5e8f\u5e8f\u5217\u5b57\u5178\u5e8f\u6700\u5927\u3002\u611f\u6027\u7406\u89e3\u7684\u8bdd\u5c31\u662f\u5148\u8ba9\u503c\u5927\u7684\u5c3d\u91cf\u5f80\u540e\u653e\uff0c\u8ba9\u503c\u5927\u7684\u4e0d\u62a2\u503c\u5c0f\u7684 \u7684\u4f4d\u7f6e\uff0c\u8fd9\u6837\u503c\u5c0f\u7684\u5c31\u4f1a\u5c3d\u91cf\u5728\u80fd\u8fbe\u5230\u7684\u6700\u524d\u9762\uff0c\u4e5f\u5373\u9006\u5e8f\u5217\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\n\n\u4e3e\u4e2a\u4f8b\u5b50\uff1a\u5047\u5982\u6211\u4eec\u4ece\u540e\u5f80\u524d\u626b\u5230\u8fd9\u4e2a\u4f4d\u7f6e\uff0c\u5047\u5982\u53ef\u4ee5\u586b1 3 4 5\uff0c\u5047\u5982\u586b1\u7684\u8bdd\u4e00\u5b9a\u4e0d\u4f18\uff0c\u56e0\u4e3a1\u4e00\u5b9a\u80fd\u586b\u5728\u8fd9\u524d\u9762\u7684\u4f4d\u7f6e\uff0c\u4ece\u800c\u4f7f\u6700\u7ec8\u7684\u6392\u5217\u7684\u9006\u5e8f\u5217\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c3,4\u540c\u7406\uff0c\u6240\u4ee5\u4e00\u5b9a\u586b5\u6700\u4f18\u3002 \u5047\u5982\u53ea\u80fd\u586b1\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4f4d\u7f6e\u4e00\u5b9a\u8981\u586b1\u3002\n\n\u7136\u540e\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\n\n- \u7ed9\u51fa\u4e00\u4e2a\u6392\u5217R\u4e3aQ\u7684\u53cd\u5e8f\u5e8f\u5217\n\n- \u6bcf\u6b21\u53ef\u4ee5\u4ea4\u6362\u76f8\u90bb\u4e24\u4e2a\u6570\n\n- \u4ea4\u6362\u7684\u4e24\u4e2a\u6570\u7684\u5dee\u7684\u7edd\u5bf9\u503c$\\geqslant k$\n\n- \u8ba9\u6700\u7ec8\u7684\u6392\u5217\u7684\u5b57\u5178\u5e8f\u6700\u5927\n\n\u89c2\u5bdf\u5230\u4e00\u4e2a\u7684\u6027\u8d28\uff1a\u5982\u679c$|R_i-R_j|<k$\uff0c\u90a3\u4e48$R_i,R_j$\u4e4b\u95f4\u7684\u76f8\u5bf9\u987a\u5e8f\u5c31\u4e0d\u4f1a\u53d8\u3002\u8fd9\u662f\u56e0\u4e3a\u6211\u4eec\u6700\u591a\u80fd\u628a\u5b83\u4eec\u4ea4\u6362\u5230\u76f8\u90bb\u4f4d\u7f6e\uff0c\u800c\u4e0d\u80fd\u518d\u4ece\u76f8\u90bb\u4f4d\u7f6e\u518d\u4e92\u76f8\u4ea4\u6362\u4ece\u800c\u4f7f\u76f8\u5bf9\u987a\u5e8f\u66f4\u6539\u3002 \u53cd\u4e4b\uff0c\u5982\u679c$|R_i-R_j|\\geqslant k$\uff0c\u90a3\u4e48$R_i,R_j$\u4e4b\u95f4\u7684\u76f8\u5bf9\u987a\u5e8f\u5c31\u53ef\u80fd\u4f1a\u53d8\uff0c\u53d6\u51b3\u4e8e$i,j$\u4e4b\u95f4\u80fd\u5426\u4e00\u8def\u4ea4\u6362\u8fc7\u6765\u3002\n\n\u90a3\u4e48\u4e00\u4e2a\u6734\u7d20\u7684\u505a\u6cd5\u51fa\u6765\u4e86\uff1a\u679a\u4e3e\u4e24\u4e2a\u4f4d\u7f6e\uff0c\u5047\u5982\u8fd9\u4e24\u4e2a\u4f4d\u7f6e\u7684\u6570\u7684\u7edd\u5bf9\u503c$<k$\uff0c\u5219\u4ece\u524d\u9762\u7684\u4f4d\u7f6e\u5411\u540e\u9762\u7684\u4f4d\u7f6e\u8fde\u8fb9\uff0c\u6700\u7ec8\u8dd1\u4e00\u4e2a\u4ee5\u5f53\u524d\u4f4d\u7f6e\u7684\u6570\u4e3a\u5173\u952e\u5b57\u7684\u62d3\u6251\u6392\u5e8f\u5373\u53ef\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u4e3a$O(n^2)$\n\n\u6211\u4eec\u89c2\u5bdf\u5230\u6709\u5f88\u591a\u8fb9\u662f\u5197\u4f59\u7684\uff0c\u6bd4\u5982$a\\to b,b\\to c,a\\to c$\u4e09\u6761\u8fb9\u4e2d$a\\to c$\u5c31\u662f\u5197\u4f59\u7684\u3002\n\n\u4e0b\u9762\u7ed9\u51fa\u4e00\u4e2a\u4e00\u822c\u6027\u7684\u505a\u6cd5\uff1a\n\n\u5012\u5e8f\u679a\u4e3ei\uff0c\u67e5\u627e$[a_{i+1},a_{i+k-1}]$\u4e2d\u6709\u54ea\u4e9b\u6570\u7684\u4e0b\u6807$>i$\uff0c\u6c42\u51fa\u5b83\u4eec\u4e0b\u6807\u7684\u6700\u5c0f\u503cx\uff0c\u8fde\u8fb9$a_i\\to a_x$\uff0c$[a_{i-k+1},a_{i-1}]$\u540c\u7406\u3002\n\n\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u5728\u4e8e\uff0c\u6700\u5c0f\u503cx\u4e00\u5b9a\u5728\u5176\u4ed6\u503c\u7684\u524d\u9762\uff0c\u5e76\u4e14\u8ddd\u79bb$<k$\uff0c\u90a3\u4e48\u62d3\u6251\u5e8f\u4e2d$a_x$\u4e00\u5b9a\u5728$a_{others}$\u4e4b\u524d\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u4fdd\u8bc1$a_i$\u5728$a_x$\uff0c\u4e4b\u524d\uff0c\u5c31\u53ef\u4ee5\u4fdd\u8bc1$a_i$\u5728$a_{others}$\u4e4b\u524d\uff0c$[a_{i-k+1},a_{i-1}]$\u540c\u7406\n\n\u5bb9\u6613\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u53ea\u9700\u5355\u70b9\u4fee\u6539\uff0c\u533a\u95f4\u6c42min\u3002\u6700\u7ec8\u62d3\u6251\u6392\u5e8f\u7528\u5806\u5373\u53ef\u3002\n\n\u8fd9\u4e2a\u8f6c\u5316\u4e3a\u9006\u5e8f\u5217\u662f\u771f\u5de7\u5999\n\n### \u4ee3\u7801 \uff1a\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=2e6+5;\nint p[N],a[N],b[N];\nstruct node{int l,r,mid,mn;}s[N<<2];\nvoid build(int di,int l,int r)\n{\n    s[di].l=l,s[di].r=r,s[di].mid=l+r>>1,s[di].mn=1e9;\n    if(l==r)return;\n    build(di<<1,l,s[di].mid),build(di<<1|1,s[di].mid+1,r);\n}\nvoid ins(int di,int x,int v)\n{\n    if(s[di].l==s[di].r){s[di].mn=v;return;}\n    if(x<=s[di].mid)ins(di<<1,x,v);\n    else ins(di<<1|1,x,v);\n    s[di].mn=min(s[di<<1].mn,s[di<<1|1].mn);\n}\nint qry(int di,int l,int r)\n{\n    if(l<=s[di].l&&s[di].r<=r)return s[di].mn;\n    else if(r<=s[di].mid)return qry(di<<1,l,r);\n    else if(l>s[di].mid)return qry(di<<1|1,l,r);\n    return min(qry(di<<1,l,r),qry(di<<1|1,l,r));\n}\nstruct edge{int to,nxt;}e[N<<1];\nint head[N],tot=1;\nvoid adde(int x,int y){e[tot]=(edge){y,head[x]};head[x]=tot++;}\npriority_queue<int>q;\nint n,rd[N];\nvoid topo()\n{\n    for(int i=1;i<=n;i++)\n        for(int j=head[i];j;j=e[j].nxt)rd[e[j].to]++;\n    for(int i=1;i<=n;i++)if(!rd[i])q.push(i);\n    int tt=0;\n    while(!q.empty())\n    {\n        int u=q.top();q.pop(),b[++tt]=u;\n        for(int i=head[u];i;i=e[i].nxt)\n            if(!(--rd[e[i].to]))q.push(e[i].to);\n    }\n}\nint main()\n{\n    int k;scanf(\"%d%d\",&n,&k);\n    for(int i=1;i<=n;i++){int x;scanf(\"%d\",&x),a[x]=i;}\n    for(int i=1;i<=n/2;i++)swap(a[i],a[n-i+1]);\n    build(1,1,n);\n    for(int i=n;i>=1;i--)\n    {\n        int x=qry(1,max(1,a[i]-k+1),a[i]);\n        if(x>=1&&x<=n)adde(a[i],a[x]);\n        x=qry(1,a[i],min(n,a[i]+k-1));\n        if(x>=1&&x<=n)adde(a[i],a[x]);\n        ins(1,a[i],i);\n    }\n    topo();\n    for(int i=1;i<=n/2;i++)swap(b[i],b[n-i+1]);\n    for(int i=1;i<=n;i++)p[b[i]]=i;\n    for(int i=1;i<=n;i++)printf(\"%d\\n\",p[i]);\n}\n\n```\n",
        "postTime": 1577966129,
        "uid": 84205,
        "name": "Syzygy12",
        "ccfLevel": 0,
        "title": "AGC001F Wide Swap"
    },
    {
        "content": "# **\u9898\u610f**\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $N$ \uff0c\u6b63\u597d\u5305\u542b $1$ ~ $N$ \u7684\u5e8f\u5217 $P_1 \\cdots P_N$ \uff0c\u4f60\u53ef\u4ee5\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\u4efb\u610f\u6b21\uff1a\n\n- \u9009\u53d6\u4e24\u4e2a\u4e0b\u6807 $i,j$ \uff0c\u5f53\u6ee1\u8db3 $j - i \\geq K$ \u4e14 $|P_i-P_j| = 1$ \u65f6\uff0c\u4f60\u53ef\u4ee5\u4ea4\u6362 $P_i$ \u548c $P_j$ \u7684\u503c\u3002\n\u200b\n\n\u6c42\u6700\u7ec8\u53ef\u80fd\u5f97\u5230\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\u3002\n\n# **\u9898\u76ee\u5206\u6790**\n\n\u5f88\u597d\u7684\u4e00\u9053\u9898\u3002\n\n## **\u9006\u7f6e\u6362**\n\n\u73b0\u5728\u7684\u9898\u9762\u96be\u4ee5\u4e0b\u624b\uff0c\u56e0\u6b64\u4e0d\u59a8\u8bbe $Q$ \u4e3a $P$ \u7684\u9006\u7f6e\u6362\uff0c\u5373 $Q_{Pi} = i$ \uff0c\u4e8e\u662f\u9898\u9762\u8f6c\u5316\u4e3a\u5982\u679c $|Q_i - Q_{i \\pm 1}| \\geq K$ \uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u4ea4\u6362 $i$ \u4e0e $i \\pm 1$ \u8fd9\u4e24\u4e2a\u76f8\u90bb\u7684\u5143\u7d20\u3002\n\n\u6211\u89c9\u5f97\u8fd9\u4e00\u70b9\u7684\u601d\u60f3\u7c7b\u4f3c\u4e8e\u591a\u7ef4\u504f\u5e8f\u7684\u95ee\u9898\uff0c\u524d\u8005\u662f\u7531\u591a\u7ef4\u5411\u4f4e\u7ef4\u7684\u8f6c\u5316\uff0c\u800c\u672c\u9898\u5219\u662f\u5bf9\u5224\u65ad\u6761\u4ef6\u7531\u591a\u5230\u5c11\u7684\u8f6c\u5316\u3002\n\n\u540c\u65f6\uff0c\u8981\u4f7f $P$ \u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u7b49\u4ef7\u4e8e\u8981\u4f7f $Q$ \u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u5728\u6b64\u7ed9\u51fa\u8bc1\u660e\uff1a\n\n\u5047\u8bbe\u5f53\u524d\u8981\u586b\u7684\u6700\u5c0f\u6570\u4e3a $j$ \uff0c\u73b0\u6709\u4f4d\u7f6e $i$ \u4e0e $i'$ \uff0c\u4e14 $i < i'$ \uff0c\u5bf9 $Q_i = j$ \u4e0e $Q_{i'} = j$ \uff0c\u5f53\u8fd8\u539f\u4e3a\u539f\u5e8f $P$ \u65f6\uff0c\u6709 $P_j = i$ \u4e0e $P_j = i'$ \uff0c\u663e\u7136\u524d\u8005\u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e\u540e\u8005\uff0c\u5f97\u8bc1\u3002\n\n## **\u53cd\u5411\u62d3\u6251\u6392\u5e8f**\n\n\u8003\u8651 $Q$ \u4e2d\u7684\u4e24\u4e2a\u503c $Q_i$ \u4e0e $Q_j$ \uff0c\u4e0d\u96be\u53d1\u73b0\u5f53 $|Q_i - Q_j| < K$ \u65f6\uff0c $Q_i$ \u4e0e $Q_j$ \u7684\u76f8\u5bf9\u4f4d\u7f6e\uff08\u5373\u5148\u540e\u987a\u5e8f\uff09\u65e0\u8bba\u5982\u4f55\u64cd\u4f5c\u90fd\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\uff0c\u56e0\u4e3a\u5e8f\u5217 $Q$ \u4e2d\u4ec5\u6709\u76f8\u90bb\u7684\u4e24\u4e2a\u6570\u53ef\u80fd\u53d1\u751f\u4ea4\u6362\uff0c\u6240\u4ee5 $Q_i$ \u4e0e $Q_j$ \u7684\u76f8\u5bf9\u4f4d\u7f6e\u8981\u53d1\u751f\u6539\u53d8\uff0c\u4e24\u8005\u5fc5\u987b\u4ea4\u6362\u4e00\u6b21\uff0c\u5426\u5219\u7684\u8bdd\u5b83\u4eec\u7684\u5173\u7cfb\u5c31\u88ab\u9501\u6b7b\u4e86\uff0c\u4e5f\u5c31\u662f\u4e0a\u8ff0\u8bf4\u7684\u76f8\u5bf9\u4f4d\u7f6e\u56fa\u5b9a\u4e86\u3002\n\n\u56e0\u6b64\u5bf9\u67d0\u4e2a $Q_i (1 \\leq i \\leq N) $ \uff0c\u5bf9\u5176\u540e\u65b9\u7684 $Q_j (i < j \\leq N)$ \uff0c\u6709\uff1a\n- \u5f53 $Q_j \\in [1,Q_i - k] \\bigcup [Q_i + k,n]$ \uff0c\u6211\u4eec\u65e0\u6cd5\u786e\u5b9a\u4e8c\u8005\u7684\u76f8\u5bf9\u4f4d\u7f6e\u5173\u7cfb\n- \u5f53 $Q_j \\in [Q_i - k + 1,Q_i - 1] \\bigcup [Q_i + 1,Q_i + k + 1]$ \uff0c $Q_j$ \u5fc5\u6392\u5728 $Q_i$ \u7684\u540e\u65b9\n\n\u76f8\u5bf9\u4f4d\u7f6e\u65e0\u6cd5\u6539\u53d8\u4e0d\u96be\u60f3\u5230\u5c31\u662f\u62d3\u6251\u6392\u5e8f\uff0c\u800c\u8981\u6c42\u8f83\u5c0f\u7684\u6570\u4e0b\u6807\u5c3d\u53ef\u80fd\u5c0f\u66f4\u662f\u7ecf\u5178\u95ee\u9898\uff0c\u5efa\u53cd\u56fe\u8dd1\u62d3\u6251\u6392\u5e8f\uff1a\n\n[\u2460\u53f7\u4f20\u9001\u95e8](https://acm.dingbacode.com/showproblem.php?pid=4857)\n\n[\u2461\u53f7\u4f20\u9001\u95e8](https://acm.dingbacode.com/showproblem.php?pid=2647)\n\n\n## **\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe**\n\n\u73b0\u5728\u6211\u4eec\u5f97\u5230\u4e86\u4e00\u4e2a\u6734\u7d20\u7684 $O(nk)$ \u7b97\u6cd5\uff1a\u5bf9\u4e8e\u6bcf\u4e2a $Q_i$ \uff0c\u5411\u5176\u540e\u65b9\u6240\u6709 $Q_j \\in [Q_i - k + 1,Q_i - 1] \\bigcup [Q_i + 1,Q_i + k + 1]$ \u8fde\u4e00\u6761\u6709\u5411\u8fb9 $Q_j \\rightarrow Q_i$ \uff08\u6ce8\u610f\u662f\u53cd\u5411\u5efa\u56fe\uff09\uff0c\u7136\u540e\u8dd1\u4e00\u904d\u62d3\u6251\u5e8f\u5c31\u80fd\u51fa\u7b54\u6848\u3002\n\n\u4f46\u5b9e\u9645\u4e0a\uff0c\u7531\u4e8e\u4f20\u9012\u6027\uff08$a\\rightarrow b , b\\rightarrow c \\Rightarrow a \\rightarrow c$\uff09\uff0c\u6211\u4eec\u662f\u6ca1\u6709\u5fc5\u8981\u628a\u8fb9\u8fde\u6ee1\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u4ece\u540e\u5f80\u524d\u679a\u4e3e\uff0c\u5bf9\u4e8e\u5f53\u524d\u4f4d\u7f6e\u7684 $Q_i$ ,\u53ea\u9700\u5206\u522b\u5411\u5728\u4e24\u4e2a\u8303\u56f4\u5185\u6700\u5148\u51fa\u73b0\u7684 $Q_j$ \u4e0e $Q_{j'}$ \u8fde\u4e24\u6761\u8fb9\u5373\u53ef\uff0c\u56e0\u4e3a\u4e24\u8005\u7684\u533a\u95f4\u6709\u91cd\u53e0\uff0c\u6240\u4ee5 $Q_j$ \u4e0e $Q_{j'}$ \u5bf9\u4e4b\u540e $[Q_i - k + 1,Q_i - 1]$ \u4e0e $[Q_i + 1,Q_i + k + 1]$ \u5185\u7684\u70b9\u4e00\u5b9a\u5b58\u5728\u8fde\u8fb9\uff0c\u4ece\u800c\u4f7f\u5f97 $Q_i$ \u95f4\u63a5\u5730\u8fde\u63a5\u4e86\u533a\u95f4\u5185\u6240\u6709\u7b26\u5408\u8981\u6c42\u7684\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(nlogn)$ \u3002\n\n\u6700\u540e\u6ce8\u610f\u4e0d\u8981\u5fd8\u4e86\u8fd8\u539f\u6210\u539f\u5e8f\u5217\u3002\n\n## **AC\u4ee3\u7801**\uff1a\n```\n#include <bits/stdc++.h>\n#define rep(i, x, y) for (register int i = (x); i <= (y); i++)\n#define down(i, x, y) for (register int i = (x); i >= (y); i--)\nconst int inf = 0x3f3f3f3f;\nconst int maxn = 5e5 + 5;\n\nchar buf[1 << 23], *p1 = buf, *p2 = buf, obuf[1 << 23], *O = obuf;\n#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++)\ninline int read()\n{\n    int x = 0, f = 1;\n    char ch = getchar();\n    while (!isdigit(ch))\n    {\n        if (ch == '-')\n            f = -1;\n        ch = getchar();\n    }\n    while (isdigit(ch))\n    {\n        x = x * 10 + ch - '0';\n        ch = getchar();\n    }\n    return x * f;\n}\n\nint n, k;\nint inv[maxn], deg[maxn], ans[maxn];\nstd::vector<int> e[maxn];\nstd::priority_queue<int> q;\n\n#define lson k << 1\n#define rson k << 1 | 1\nstruct node\n{\n    int l, r, min;\n} tree[maxn << 2];\n\ninline void pushup(int k) { tree[k].min = std::min(tree[lson].min, tree[rson].min); }\n\nvoid build(int k, int l, int r)\n{\n    tree[k].l = l, tree[k].r = r;\n    if (l == r)\n    {\n        tree[k].min = inf;\n        return;\n    }\n    int mid = (l + r) >> 1;\n    build(lson, l, mid);\n    build(rson, mid + 1, r);\n    pushup(k);\n}\n\nvoid update(int k, int p, int x)\n{\n    if (tree[k].l == tree[k].r)\n    {\n        tree[k].min = x;\n        return;\n    }\n    int mid = (tree[k].l + tree[k].r) >> 1;\n    p <= mid ? update(lson, p, x) : update(rson, p, x);\n    pushup(k);\n}\n\nint query(int k, int l, int r)\n{\n    if (l > r)\n        return inf;\n    if (l <= tree[k].l && tree[k].r <= r)\n        return tree[k].min;\n    int mid = (tree[k].l + tree[k].r) >> 1;\n    if (r <= mid)\n        return query(lson, l, r);\n    else if (l > mid)\n        return query(rson, l, r);\n    else\n        return std::min(query(lson, l, mid), query(rson, mid + 1, r));\n}\n\nvoid topo()\n{\n    int cnt = n;\n    rep(i, 1, n) if (!deg[i]) q.push(i);\n    while (!q.empty())\n    {\n        int u = q.top();\n        q.pop();\n        inv[cnt--] = u;\n        for (auto v : e[u])\n        {\n            --deg[v];\n            if (!deg[v])\n                q.push(v);\n        }\n    }\n}\n\nint main(int argc, char const *argv[])\n{\n    n = read(), k = read();\n    rep(i, 1, n) inv[read()] = i;\n    build(1, 1, n);\n    down(i, n, 1)\n    {\n        //\u5206\u522b\u627e\u4e24\u4e2a\u8303\u56f4\u5185\u6700\u5148\u51fa\u73b0\u7684\u70b9\n        int pos = query(1, inv[i] + 1, std::min(inv[i] + k - 1, n));\n        if (pos ^ inf)\n            //\u53cd\u5411\u5efa\u56fe\uff0c\u53cd\u5411\u8fde\u8fb9\n            e[inv[pos]].push_back(inv[i]), ++deg[inv[i]];\n        pos = query(1, std::max(1, inv[i] - k + 1), inv[i] - 1);\n        if (pos ^ inf)\n            e[inv[pos]].push_back(inv[i]), ++deg[inv[i]];\n        //\u52a0\u5165\u5f53\u524d\u70b9\u7684\u8d21\u732e\n        update(1, inv[i], i);\n    }\n    topo();\n    //\u8fd8\u539f\u6210\u539f\u5e8f\u5217\n    rep(i, 1, n) ans[inv[i]] = i;\n    rep(i, 1, n) printf(\"%d\\n\", ans[i]);\n    return 0;\n}\n```",
        "postTime": 1635947154,
        "uid": 491258,
        "name": "FoXreign",
        "ccfLevel": 0,
        "title": "ARC001 F \u9898\u89e3"
    },
    {
        "content": "## \u6807\u7b7e\uff1a\n\n\u7ebf\u6bb5\u6811\uff0c\u56fe\u8bba\uff0c\u62d3\u6251\u6392\u5e8f\uff0c\u8f6c\u6362\n\n## \u6765\u6e90\uff1a\n\n$Atcoder \\ 1984$\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u6392\u5217\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4e0b\u6807$i$.\n\n\u4e0e\u4e0b\u6807$j$\u5927\u4e8e\u7b49\u4e8e$i+K$\u4e14$|a_i-a_j|=1$\u8fdb\n\n\u884c\u4ea4\u6362\u3002\u6c42\u4f7f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\u3002\n\n# $solution$\n\n\u6211\u4eec\u53d1\u73b0\u5bf9\u4e8e\u73b0\u5728\u7684\u9898\u9762\uff0c\u5176\u5b9e\u5e76\u4e0d\u662f\u5f88\u597d\u505a\uff0c\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0$|a_i-a_j|=1$\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\n\n\u5bf9\u4e8e\u4e48\u4e00\u4e2a\u6570\uff0c\u628a\u6743\u503c\u770b\u4f5c\u4e0b\u6807\uff0c\u5bf9\u4e8e\u4e0b\u6807\uff0c\u5f53\n\n\u4f5c\u70b9\u6743\u3002\u90a3\u4e48\u73b0\u5728\u7684\u95ee\u9898\u5c31\u8f6c\u6362\u4e3a\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u65b0\u7684\u6392\u5217\uff0c\n\n\u6211\u4eec\u53ef\u4ee5\u4ea4\u6362\u6ee1\u8db3\u6743\u503c\u5728$[b_i+K,n]$\u6216$[1,b_i-K]$\u7684\n\n\u76f8\u90bb\u4e24\u4e2a\u6570\u3002\u4f46\u539f\u95ee\u9898\u662f\u8bf4\u5728\u539f\u6392\u5217\u4e0a\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\n\n\u4e8e\u662f\uff0c\u4f60\u4f1a\u53d1\u73b0\uff0c\u7531\u4e8e\u4f4d\u7f6e\u4e0e\u6743\u503c\u4e00\u4e00\u5bf9\u5e94\u7684\u5173\u7cfb\uff0c\n\n\u6211\u4eec\u5728\u65b0\u6392\u5217\u4e0a\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u5c31\u4f1a\u4f7f\u539f\u6392\u5217\u5b57\u5178\u5e8f\u6700\u5c0f\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5982\u4f55\u4fdd\u8bc1\u65b0\u6392\u5217\u7684\u5b57\u5178\u5e8f\u5462\uff1f\u6211\u4eec\u77e5\u9053\n\n\u53f3\u8fb9\u7684\u6743\u503c\u5728$[b_i+K,n]$\u6216$[1,b_i-K]$\u8303\u56f4\u7684\u6570\u6211\u4eec\n\n\u65e0\u6cd5\u786e\u5b9a\u5b83\u4e0e$i$\u7684\u5148\u540e\u5173\u7cfb\uff0c\u4f46\u662f\u5bf9\u4e8e\u5728$[b_i-K+1,b_i+K-1]$\n\n\u8fd9\u4e2a\u533a\u95f4\u7684\u6570\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u786e\u5b9a\u5b83\u4eec\u4e00\u5b9a\u5c31\u5728$i$\u7684\u540e\u9762\uff0c\n\n\u65e0\u8bba\u600e\u4e48\u4ea4\u6362\u90fd\u65e0\u6cd5\u6539\u53d8\u4ed6\u4eec\u7684\u4f4d\u7f6e\u5173\u7cfb\u3002\n\n\u90a3\u4e48\u521a\u597d\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9$i$\uff0c\u5411\u540e\u9762\u6743\u503c\u5728\n\n$[b_i-K+1,b_i+K-1]$\u7684\u70b9\u8fde\u51fa\u4e00\u6761\u6709\u5411\u8fb9\uff0c\u8868\u793a\n\n\u4ed6\u4eec\u4e4b\u95f4\u7684\u8bbf\u95ee\u987a\u5e8f\u3002\u8fd9\u6837\u6211\u4eec\u5c31\u5f97\u51fa\u4e86\u4e00\u4e2a$O(n^2)$\n\n\u7684\u505a\u6cd5\u4e86\u3002\u8fd9\u4e2a\u663e\u7136\u662f\u4e2a$DAG$,\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u8dd1\n\n\u62d3\u6251\u6392\u5e8f\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u6df1\u5165\u601d\u8003\uff0c\u5c31\u4f1a\u53d1\u73b0\uff0c\u8fd9\u91cc\u6709\u4e00\u4e9b\u8fb9\u662f\u6ca1\u5fc5\u8981\u7684\uff0c\n\n\u6bd4\u5982\u8bf4$a->b->c$\uff0c\u6211\u4eec\u5176\u5b9e\u5df2\u7ecf\u95f4\u63a5\u77e5\u9053$a$\u4e0e$c$\u7684\u5173\u7cfb\n\n\u4e86\uff0c\u6240\u4ee5\uff0c\u6211\u4eec\u6539\u53d8\u8fde\u8fb9\u7b56\u7565\uff0c\u6211\u4eec\u4ece\u540e\u5f80\u524d\u8003\u8651\uff0c\u5bf9\u4e8e\u4f4d\n\n\u7f6e$pos$,\u6211\u4eec\u8fde\u4e24\u6761\u8fb9\uff0c\u4e00\u6761\u5411$[b_i+1,b_i+K-1]$\u4e2d\u4f4d\u7f6e\n\n\u6700\u9760\u524d\u7684,\u4e00\u6761\u5411$[b_i-K+1,b_i-1]$\u4e2d\u4f4d\u7f6e\u6700\u9760\u524d\u7684\uff0c\u8fd9\u6837\n\n\u6211\u4eec\u5176\u5b9e\u5c31\u662f\u95f4\u63a5\u7684\u8ba9$b_i$\u8fde\u5411\u4e86\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\u6700\u9760\u524d\u7684\u70b9\n\n\u7684\u8fde\u5411\u7684\u6743\u503c\u5728$[b_i-K+1,b_i-1]$\u7684\u70b9\uff0c\u4e8e\u662f\u6211\u4eec\u53ea\u8981\n\n\u5bf9\u4e8e\u65b0\u56fe\uff0c\u8dd1\u4e00\u904d\u62d3\u6251\u6392\u5e8f\u5c31\u884c\u3002\n\n\u4eba\u5973\u6027\u5316\uff0c\u4f46\u5e38\u6570\u5927\u7684\u4ee3\u7801\n\n```cpp\n\n#include<bits/stdc++.h>\n\nusing namespace std ;\n\n#define inf 99999999\n#define N 1000007\n#define ls x<<1\n#define rs x<<1|1\n\npriority_queue< int , vector<int> , greater<int> > q ;\n\nint tot , n , m , cnt , k ;\nint nex[2*N] , fire[N] , to[2*N] ;\nint To[N] , Mn[4*N] , in[N] , Ans[N] ;\n\ninline int read()\n{\n    int x = 0 , f = 1 ; char c = getchar();\n    while( c < '0' || c > '9' ) { if( c == '-' ) f = -1; c = getchar() ; }\n    while( c >= '0' && c <= '9' ) x = x * 10 + c - 48 , c = getchar() ;\n    return x * f ;\n}\n\nvoid add(int u , int v){\n    nex[++tot] = fire[u] ;\n    fire[u] = tot ;\n    to[tot] = v ;\n    in[v]++ ;\n    return ;\n}\n\nvoid build(int x , int l , int r){\n    Mn[x] = inf ;\n    if( l == r ) return ;\n    int mid = l + r >> 1 ;\n    build( ls , l , mid ) ; build( rs , mid + 1 , r ) ;\n}\n\nvoid update(int x , int l , int r , int pos , int t ){\n    Mn[x] = min( Mn[x] , t ) ;\n    if( l == r ) return ;\n    int mid = l + r >> 1 ;\n    if( pos <= mid ) update( ls , l , mid , pos , t ) ;\n    else update( rs , mid + 1 , r , pos , t ) ;\n}\n\nint Ask(int x , int l , int r , int ll , int rr){\n    if( ll > rr ) return inf ;\n    if( l > rr || r < ll ) return inf ;\n    if( ll <= l && r <= rr ) return Mn[x] ;\n    int mid = l + r >> 1 ;\n    return min( Ask( ls , l , mid , ll , rr ) , Ask( rs , mid + 1 , r , ll , rr ) ) ;\n}\n\nvoid topo(){\n    for(int i = 1 ; i <= n ; i++ ) if( !in[i] ) q.push( i ) ;\n    while( !q.empty() ){\n        int u = q.top() ; q.pop() ;\n        Ans[u] = ++cnt ;\n        for(int i = fire[u] ; i ; i = nex[i] ){\n            int v = to[i] ;\n            in[v]-- ;\n            if( !in[v] ) q.push( v ) ;\n        }\n    }\n    return ;\n}\n\nint main()\n{\n    scanf(\"%d%d\" , &n , &k ) ;\n    for(int i = 1 ; i <= n ; i++ ) To[read()] = i ;\n    build( 1 , 1 , n ) ;\n    for(int i = n ; i >= 1 ; i-- ){\n        int now = Ask( 1 , 1 , n , To[i] + 1 , min( To[i] + k - 1 , n ) ) ;\n        if( now != inf ) add( To[i] , To[now] ) ;\n        now = Ask( 1 , 1 , n , max( 1 , To[i] - k + 1 ) , To[i] - 1 ) ;\n        if( now != inf ) add( To[i] , To[now] ) ;\n        update( 1 , 1 , n , To[i] , i ) ;\n    }\n    topo() ;\n    for(int i = 1 ; i <= n ; i++ ) printf(\"%d\\n\" , Ans[i] ) ;\n    return 0 ;\n}\n\n```",
        "postTime": 1572883578,
        "uid": 119610,
        "name": "Regimes",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT1984 \u3010Wide Swap\u3011"
    },
    {
        "content": "\u8f6c\u5316\u6210\u9006\u6392\u5217\uff08\u4e0b\u6807\u548c\u503c\u4e92\u6362\uff09\uff0c\u8bbe\u5176\u4e3a $Q$\uff0c\u90a3\u4e48\u64cd\u4f5c\u5c31\u53d8\u6210\u4e86\u5982\u679c $|Q_i-Q_{i-1}|\\geq k$\uff0c\u5219\u53ef\u4ee5\u4ea4\u6362 $Q_i,Q_{i-1}$\uff0c\u4e5f\u5c31\u662f\u5bf9\u4e8e\u4efb\u610f\u7684 $i<j,|Q_i-Q_j|<k$\uff0c$Q_i$ \u59cb\u7ec8\u8981\u5728 $Q_j$ \u524d\u9762\u3002\n\n\u5982\u679c\u94a6\u5b9a\u4e86\u67d0\u4e9b\u5143\u7d20\u4e4b\u95f4\u7684\u76f8\u5bf9\u987a\u5e8f\uff0c\u90a3\u4e48\u4efb\u4f55\u6ee1\u8db3\u8fd9\u4e2a\u76f8\u5bf9\u987a\u5e8f\u7684\u5e8f\u5217\u90fd\u80fd\u901a\u8fc7\u4e0d\u65ad\u4ea4\u6362\u4e24\u4e2a\u76f8\u90bb\u7684\u5143\u7d20\u4e92\u76f8\u5f97\u5230\u3002\n\n\u5047\u8bbe\u8981\u8ba9 $A$ \u53d8\u4e3a $B$\uff0c\u73b0\u5c06 $A$ \u4e2d\u7684\u5143\u7d20\u91cd\u6807\u53f7\u4e3a\u5176\u5728 $B$ \u4e2d\u7684\u4e0b\u6807\uff0c\u5982\u679c\u5176\u4e3a $1\\sim n$ \u7684\u6392\u5217\u90a3\u4e48\u5c31\u5f97\u5230 $B$ \u4e86\u3002\u5f53\u5176\u4e0d\u4e3a $1\\sim n$ \u65f6\uff0c\u4e00\u5b9a\u5b58\u5728\u76f8\u90bb\u7684\u9006\u5e8f\u5bf9\uff0c\u4ea4\u6362\u8fd9\u4e2a\u9006\u5e8f\u5bf9\u5373\u53ef\u3002\u5982\u679c\u4e0d\u5b58\u5728\u9006\u5e8f\u5bf9\uff0c\u8bf4\u660e\u4ea4\u6362\u5f97\u5230\u4e86 $B$\uff0e\u7531\u4e8e\u6211\u4eec\u6bcf\u6b21\u4ea4\u6362\u7684\u662f\u9006\u5e8f\u5bf9\uff0c\u5e76\u4e14 $A$ \u548c $B$ \u7684\u76f8\u5bf9\u987a\u5e8f\u9650\u5236\u76f8\u540c\uff0c\u6240\u4ee5\u4e0d\u4f1a\u5b58\u5728\u65e0\u6cd5\u4ea4\u6362\u7684\u60c5\u51b5\u3002\n\n\u73b0\u5728\u5047\u88c5\u5f97\u5230\u4e86\u8fd9\u4e9b\u9650\u5236\uff0c\u60f3\u8981\u4f7f\u5f97\u539f\u5e8f\u5217\u7684\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u5c31\u9700\u8981\u8ba9\u9006\u6392\u5217\u7684 $1$ \u5c3d\u53ef\u80fd\u9760\u524d\uff0c\u5728\u6b64\u57fa\u7840\u4e0a $2$ \u5c3d\u53ef\u80fd\u9760\u524d\uff0c\u7136\u540e\u662f $3$ \u5c3d\u53ef\u80fd\u9760\u524d......\n\n\u5982\u679c\u53ea\u770b\u8fd9\u4e9b\u9650\u5236\uff0c\u5c31\u662f[\u83dc\u80b4\u5236\u4f5c](https://www.luogu.com.cn/problem/P3243)\u8fd9\u9053\u9898\u4e86\uff0c\u5c06 DAG \u7684\u53cd\u56fe\u5efa\u51fa\u6765\u4e4b\u540e\uff0c\u62d3\u6251\u6392\u5e8f\u65f6\u6bcf\u6b21\u9009\u62e9\u7f16\u53f7\u6700\u5927\u7684\u653e\u5728\u5e8f\u5217\u7684\u6700\u540e\u3002\u4f46\u8fd9\u9053\u9898\u5982\u679c\u6b63\u7740\u5efa\u56fe\u5e76\u4e14\u6bcf\u6b21\u53d6\u7f16\u53f7\u6700\u5c0f\u7684\u653e\u5728\u6700\u524d\u9762\u4e5f\u662f\u5bf9\u7684\uff0c\u5c0f\u7c89\u5154\u5728[\u8fd9\u91cc](https://www.luogu.com.cn/blog/PinkRabbit/solution-at1984)\u7ed9\u4e86\u8bc1\u660e\u6211\u5c31\u4e0d\u53e6\u753b\u86c7\u6dfb\u8db3\u4ec0\u4e48\u4e86\uff08\n\n\u8bc1\u660e\u4e00\u4e0b\u4e3a\u4ec0\u4e48\u5efa\u51fa DAG \u7684\u53cd\u56fe\u7136\u540e\u6bcf\u6b21\u9009\u62e9\u7f16\u53f7\u6700\u5927\u7684\u653e\u5728\u5e8f\u5217\u7684\u6700\u540e\u662f\u5bf9\u7684\uff1a\n\n\u8003\u8651\u5982\u679c\u4e0d\u5c06\u6700\u5927\u7684 $x$ \u653e\u5728\u5e8f\u5217\u7684\u6700\u540e\uff0c\u800c\u662f\u653e\u4e86 $x'$\uff0c\u7531\u4e8e $x$ \u662f\u6ca1\u6709\u5f80\u540e\u79fb\u52a8\u7684\u9650\u5236\u7684\uff0c\u6240\u4ee5\u5c06 $x$ \u79fb\u52a8\u5230\u6700\u540e\uff0c\u8fd9\u6837\u672c\u5728 $x$ \u540e\u4e14 $<x$ \u7684\u7f16\u53f7\u90fd\u5f80\u524d\u79fb\u52a8\u4e86\u4e00\u4e2a\u4f4d\u7f6e\uff08\u81f3\u5c11\u6709\u4e00\u4e2a $x'$ \u4f1a\u5f80\u524d\u79fb\u52a8\u4e00\u4e2a\u4f4d\u7f6e\uff09\uff0c\u6bd4\u539f\u5148\u66f4\u4f18\uff0c\u6240\u4ee5\u4efb\u4f55\u4e00\u79cd\u4e0d\u662f $x$ \u5728\u6700\u540e\u7684\u65b9\u6848\u90fd\u80fd\u5982\u6b64\u8c03\u6574\u6210\u4e00\u4e2a\u66f4\u4f18\u7684\u65b9\u6848\uff0c\u6240\u4ee5 $x$ \u4e00\u5b9a\u5728\u5e8f\u5217\u7684\u6700\u540e\u3002\u5904\u7406\u597d $x$ \u4e4b\u540e\uff0c\u53d8\u6210\u4e86\u4e00\u4e2a\u5b50\u95ee\u9898\u3002\u5f97\u8bc1\u3002\n\n\u5b9e\u73b0\u4e0a\uff0c\u53ef\u4ee5\u7528\u4e00\u4e2a\u7ebf\u6bb5\u6811\u7ef4\u62a4\u539f\u5e8f\u5217\u7684\u533a\u95f4\u8fd8\u672a\u51fa\u961f\u7684\u5143\u7d20\u7684\u6700\u5927\u503c\uff0c\u6765\u4f18\u5316\u627e $0$ \u5ea6\u70b9\u7684\u8fc7\u7a0b\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal{O}(n\\log n)$\uff0e\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#include<queue>\n#define pb emplace_back\n#define mp std::make_pair\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\ntypedef std::pair<int, int> pii;\ntypedef std::vector<int> vi;\nconst ll mod = 998244353;\nll Add(ll x, ll y) { return (x+y>=mod) ? (x+y-mod) : (x+y); }\nll Mul(ll x, ll y) { return x * y % mod; }\nll Mod(ll x) { return x < 0 ? (x + mod) : (x >= mod ? (x-mod) : x); }\nll cadd(ll &x, ll y) { return x = (x+y>=mod) ? (x+y-mod) : (x+y); }\nll cmul(ll &x, ll y) { return x = x * y % mod; }\ntemplate <typename T> T Max(T x, T y) { return x > y ? x : y; }\ntemplate<typename T, typename... T2> T Max(T x, T2 ...y) { return Max(x, y...); }\ntemplate <typename T> T Min(T x, T y) { return x < y ? x : y; }\ntemplate<typename T, typename... T2> T Min(T x, T2 ...y) { return Min(x, y...); }\ntemplate <typename T> T cmax(T &x, T y) { return x = x > y ? x : y; }\ntemplate <typename T> T cmin(T &x, T y) { return x = x < y ? x : y; }\ntemplate <typename T>\nT &read(T &r) {\n\tr = 0; bool w = 0; char ch = getchar();\n\twhile(ch < '0' || ch > '9') w = ch == '-' ? 1 : 0, ch = getchar();\n\twhile(ch >= '0' && ch <= '9') r = r * 10 + (ch ^ 48), ch = getchar();\n\treturn r = w ? -r : r;\n}\ntemplate<typename T1, typename... T2>\nvoid read(T1 &x, T2& ...y) { read(x); read(y...); }\nconst int N = 500100;\nconst int inf = 0x7fffffff;\nint n, k, a[N], b[N], id[N], ct;\n#define ls tree[x].lson\n#define rs tree[x].rson\n#define tl tree[x].l\n#define tr tree[x].r\nint trnt;\nstruct Node {\n\tint lson, rson, l, r, mx;\n}tree[N << 1];\ninline void pushup(int x) { tree[x].mx = Max(tree[ls].mx, tree[rs].mx); }\nint build(int l, int r) {\n\tint x = ++trnt; tl = l; tr = r;\n\tif(l == r) {\n\t\ttree[x].mx = a[l];\n\t\treturn x;\n\t}\n\tint mid = (l + r) >> 1;\n\tls = build(l, mid); rs = build(mid+1, r);\n\tpushup(x);\n\treturn x;\n}\nint qmax(int x, int l, int r) {\n\tif(tl >= l && tr <= r) return tree[x].mx;\n\tint mid = (tl + tr) >> 1, s = -inf;\n\tif(mid >= l) cmax(s, qmax(ls, l, r));\n\tif(mid < r) cmax(s, qmax(rs, l, r));\n\tpushup(x);\n\treturn s;\n}\nvoid modify(int x, int p, int v) {\n\tif(tl == tr) {\n\t\ttree[x].mx = v;\n\t\treturn ;\n\t}\n\tint mid = (tl + tr) >> 1;\n\tif(mid >= p) modify(ls, p, v);\n\telse modify(rs, p, v);\n\tpushup(x);\n}\n#undef ls\n#undef rs\n#undef tl\n#undef tr\nstd::priority_queue<int>q;\nbool check(int i) { return qmax(1, i-k+1, i+k-1) == a[i]; }\nsigned main() {\n\tread(n); read(k);\n\tfor(int i = 1; i <= n; ++i) read(a[i]), id[a[i]] = i;\n\tbuild(1, n);\n\tfor(int i = 1; i <= n; ++i)\n\t\tif(check(i))\n\t\t\tq.push(i);\n\tct = n;\n\twhile(!q.empty()) {\n\t\tint x = q.top(); q.pop();\n\t\tb[ct--] = x;\n\t\tmodify(1, x, -inf);\n\t\tint t = 0;\n\t\tt = qmax(1, x-k+1, x);\n\t\tif(t != -inf && check(id[t]))\n\t\t\tq.push(id[t]);\n\t\tt = qmax(1, x, x+k-1);\n\t\tif(t != -inf && check(id[t]))\n\t\t\tq.push(id[t]);\n\t}\n\tfor(int i = 1; i <= n; ++i) a[b[i]] = i;\n\tfor(int i = 1; i <= n; ++i) printf(\"%d\\n\", a[i]);\n\treturn 0;\n}\n```",
        "postTime": 1636454701,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u300c\u9898\u89e3\u300dAGC 001 F Wide Swap"
    },
    {
        "content": "\u5927\u6982\u662f\u5bf9 [**FrSmT**](https://www.luogu.com.cn/user/367687) \u9898\u89e3\u7684\u8865\u5145\u8bf4\u660e\u3002\n\n## Description\n\n\u7ed9\u51fa\u4e00\u4e2a\u5143\u7d20\u96c6\u5408\u4e3a $\\{1,2,3,...,N\\}$ \u6392\u5217 $P$\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728 $1\\le i\\le j\\le N,j-i\\ge K,|P_i-P_j|=1$ \u65f6\uff0c\u53ef\u4ee5\u4ea4\u6362 $P_i,P_j$\u3002\n\n\u6c42\u53ef\u80fd\u7684\u6392\u5217\u4e2d\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u6392\u5217\u3002\n\n$1\\le N\\le 5\\times 10^5$\n\n## Solution\n\n\u89c2\u5bdf\u9898\u76ee\uff0c\u5f53 $P_j-P_i=1$ \u7684\u65f6\u5019\uff0c\u4ea4\u6362\u540e\u5b57\u5178\u5e8f\u53d8\u5c0f\uff0c\u9006\u5e8f\u5bf9\u51cf $1$\u3002\n\n\u4ee4 $Q_i$ \u8868\u793a $i$ \u5728 $P$ \u4e2d\u7684\u4f4d\u7f6e\uff0c$Q_{p_i}=i$\u3002\n\n\u95ee\u9898\u8f6c\u5316\u4e3a \uff1a\n\n* \u5f53\u4e14\u4ec5\u5f53 $Q_i-Q_{i+1}\\ge K$ \u65f6\u4ea4\u6362 $Q_i,Q_{i+1}$\u3002\n* \u91cd\u590d\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u76f4\u5230\u65e0\u6cd5\u64cd\u4f5c\u3002\n* \u6c42 $Q$\u3002\n\n\u6ce8\u610f\u5230 $K=1$ \u65f6\uff0c\u5c31\u662f\u6392\u5e8f\u3002\u6240\u4ee5\u663e\u7136\u6709\u4e00\u4e2a $O(n^2)$ \u7684\u5192\u6ce1\u6392\u5e8f\u7b97\u6cd5\u3002\n\n\u8003\u8651\u5206\u6cbb\u4f18\u5316\uff0c\u7c7b\u4f3c\u4e8e\u5f52\u5e76\u6392\u5e8f\u3002$Q[l...mid]$ \uff0c$Q[mid+1...r]$ \u4e24\u4e2a\u5b50\u5e8f\u5217\u90fd\u6ee1\u8db3 $Q_i-Q_{i+1}<K$\n\n\u73b0\u5728\u53ea\u9700\u8981\u5728\u53ef\u4ee5\u63a5\u53d7\u7684\u590d\u6742\u5ea6\u5185\u5408\u5e76\u4e24\u4e2a\u5e8f\u5217\u5373\u53ef\u3002\n\n\u8003\u8651\u4e24\u4e2a\u4e0d\u76f8\u90bb\u7684 $Q_i,Q_j,i<j$ \u5982\u679c\u53ef\u4ee5\u8ba9 $Q_j$ \u5230 $Q_i$ \u7684\u4f4d\u7f6e\u4e14\u4f7f\u539f\u5e8f\u5217\u66f4\u4f18\uff0c\u5f53\u4e14\u4ec5\u5f53 $\\min _{l=i}^{j-1} Q_l\\ge Q_j+K$ \n\n\u5927\u6982\u7684\u610f\u601d\u5982\u4e0b\uff08\u6570\u5b57\u8868\u793a\u539f\u6765\u7684\u4e0b\u6807\uff09 :\n\n```\ni i+1 i+2 i+3 ... j-1 j\n```\n\n\u56e0\u4e3a $Q_{j-1}-Q_j\\ge K$ \uff0c\u6240\u4ee5\u53ef\u4ee5\u4ea4\u6362 $Q_{j-1},Q_j$\u3002\n\n\u7136\u540e\u65b0\u7684 $Q_{j-2}-Q_{j-1}\\ge K$ \u3002\u3002\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u53d8\u6210\uff1a\n\n```\nj i i+1 i+2 ... j-2 j-1\n```\n\n \u7ef4\u62a4\u5de6\u533a\u95f4\u7684\u540e\u7f00\u6700\u5c0f\u503c\u3002\u5982\u679c\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\uff0c\u5219\u628a\u53f3\u533a\u95f4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u52a0\u5165\u961f\u5217\uff0c\u6ce8\u610f\u5230\u5de6\u533a\u95f4\u5269\u4e0b\u7684\u5143\u7d20\u96c6\u4f53\u5411\u53f3\u79fb\u4e86\u4e00\u4f4d\uff0c\u6240\u4ee5 $\\min _{l=i}^{j-1} Q_l$ \u8fd8\u662f\u4e0d\u53d8\u7684\u3002\u5426\u5219\u628a\u5de6\u533a\u95f4\u7684\u7b2c\u4e00\u4e2a\u5143\u7d20\u52a0\u5165\u961f\u5217\u3002\n\n### Code\n\n```cpp\n#include<bits/stdc++.h>\n#define rg register\n#define ll long long \n#define maxn 500005\n#define put() putchar('\\n')\nusing namespace std;\ninline void read(int &x){\n    int f=1;x=0;char c=getchar();\n    while (c<'0'||c>'9') {if (c=='-') f=-1;c=getchar();}\n    while (c>='0'&&c<='9') {x=x*10+c-'0';c=getchar();}\n    x*=f;\n}\nint n,K,a[maxn],g[maxn];\nint t[maxn],Min[maxn];\ninline void solve(int l,int r){\n\tif (l==r) return;\n\tint mid=l+r>>1,i,j,k;\n\tsolve(l,mid);\n\tsolve(mid+1,r);\n\tMin[mid]=a[mid];\n\tfor (i=mid-1;i>=l;i--) Min[i]=min(Min[i+1],a[i]);\n\ti=l,j=mid+1,k=l-1;\n\twhile (i<=mid&&j<=r) {\n\t\tif (Min[i]>=a[j]+K) t[++k]=a[j],j++;\n\t\telse t[++k]=a[i],i++;\n\t}\n\twhile (i<=mid) t[++k]=a[i],i++;\n\twhile (j<=r) t[++k]=a[j],j++;\n\tfor (i=l;i<=r;i++) a[i]=t[i];\n}\nsigned main(){\n    rg int i;\n    read(n);read(K);\n    for (i=1;i<=n;i++) read(g[i]),a[g[i]]=i;\n    solve(1,n);\n    for (i=1;i<=n;i++) g[a[i]]=i;\n    for (i=1;i<=n;i++) printf(\"%d\\n\",g[i]);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1636599376,
        "uid": 51569,
        "name": "\u8fdd\u89c4\u7528\u6237\u540dFkZyA0!2",
        "ccfLevel": 0,
        "title": "\u3010\u5206\u6cbb\u8bb0\u5f55\u3011[AGC001F] Wide Swap"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u4e0d\u4e00\u6837\u7684\u5199\u6cd5\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u4ea4\u6362\u7684\u6570\u5728\u5e8f\u5217\u4e2d\u53ef\u80fd\u4e0d\u76f8\u90bb\uff0c\u4f46\u4ed6\u4eec\u7684\u503c\u662f\u76f8\u90bb\u7684\uff0c\u6240\u4ee5\u53ef\u4ee5\u5bf9\u8fd9\u4e2a\u6392\u5217\u6c42\u4e00\u904d\u5b83\u7684\u9006\u6392\u5217\uff0c\u8dd1\u4e00\u904d\u539f\u95ee\u9898\uff0c\u518d\u628a\u5b83\u9006\u56de\u6765\u5373\u53ef\u3002\n\n\u73b0\u5728\u6211\u4eec\u7684\u95ee\u9898\u662f\uff1a\u5bf9\u4e8e\u4e00\u4e2a\u6392\u5217$P$\uff0c\u53ef\u4ee5\u4ea4\u6362\u76f8\u90bb\u4e14\u5dee$>=K$\u7684\u4e24\u9879\uff0c\u6700\u5c0f\u5316\u6392\u5217\u5b57\u5178\u5e8f\u3002\n\n\u5982\u679c\u6211\u4eec\u4ea4\u6362\u7684\u662f\u987a\u5e8f\u5bf9\uff0c\u5c31\u4f1a\u589e\u5927\u5b57\u5178\u5e8f\uff0c\u5e76\u4e14\u5bf9\u4e8e\u51cf\u5c0f\u5b57\u5178\u5e8f\u663e\u7136\u6ca1\u6709\u5e2e\u52a9\uff0c\u56e0\u6b64\u6bcf\u6b21\u9700\u8981\u627e\u5230\u4e00\u4e2a\u6ee1\u8db3\u76f8\u90bb\u4e24\u9879\u5dee$>=K$\u7684\u9006\u5e8f\u5bf9\u4ea4\u6362\u3002\n\n\u66b4\u529b\u662f$O(n^2)$\uff0c\u5982\u4f55\u4f18\u5316\uff1f\u8003\u8651\u6309\u539f\u6392\u5217\u7684\u987a\u5e8f\u9010\u4e2a\u52a0\u6570\uff0c\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u6392\u597d\u5e8f\u7684\u524d\u7f00\uff0c\u540e\u65b9\u6709\u6570\u52a0\u5165\u8fdb\u6765\u65f6\uff0c\u4e0d\u65ad\u4ea4\u6362\u9006\u5e8f\u5bf9\u4f7f\u5b57\u5178\u5e8f\u53d8\u5c0f\u65f6\uff1b\u8fd9\u4e2a\u524d\u7f00\u4e2d\u7684\u5143\u7d20\u7684\u76f8\u5bf9\u987a\u5e8f\u4e0d\u4f1a\u6539\u53d8\u3002\n\n\u6240\u4ee5\u6bcf\u6b21\u53ea\u9700\u8981\u627e\u5230\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u5b83\u540e\u65b9\u7684\u6570\u4e0e\u5f85\u63d2\u5165\u7684\u6570\u7684\u5dee\u5168\u90e8$>=K$\uff0c\u628a\u6570\u63d2\u5165\u5230\u8fd9\u4e2a\u4f4d\u7f6e\u5c31\u597d\u4e86\u3002\n\n\u5e8f\u5217\u4e0a\u4e8c\u5206\u53ca\u52a8\u6001\u63d2\u5165\uff0c$Splay$\u5373\u53ef\u3002\n\n```cpp\n/*************************************************************************\n\t> File Name: AGC001F.cpp\n\t> Author: The-Out-Land\n\t> Mail: 2264454706@qq.com \n\t> Created Time: 2021\u5e7401\u670826\u65e5 \u661f\u671f\u4e8c 16\u65f630\u520608\u79d2\n ************************************************************************/\n\n#include <bits/stdc++.h>\n\n#define enter putchar('\\n')\n#define space putchar(' ')\n#define re register\n#define N 501000\n\nusing namespace std;\n\nconst int inf=0x3f3f3f3f;\n\ninline int max(int x,int y){return (x>y?x:y);}\n\ninline int min(int x,int y){return (x<y?x:y);}\n\ninline int read(){\n\tint x=0;char c=getchar();bool y=1;\n\tfor(;c<'0' || c>'9';c=getchar()) if(c=='-') y=0;\n\tfor(;c>='0' && c<='9';c=getchar()) x=(x<<1)+(x<<3)+c-48;\n\tif(y) return x;\n\treturn -x;\n}\n\nint st[N],top;\n\nint n,K,p[N],q[N];\n\nstruct Splay_Tree{\n\tint mn[N],s[N][2],fa[N],val[N],cnt,rt;\n\tinline void init(){mn[0]=inf;return;}\n\tinline bool isright(int x){return s[fa[x]][1]==x;}\n\tinline void pushup(int x){mn[x]=min(val[x],min(mn[s[x][0]],mn[s[x][1]]));return;}\n\tinline void rotate(int x){\n\t\tint k=isright(x),F=fa[x];\n\t\tif(F!=rt) s[fa[F]][isright(F)]=x;fa[x]=fa[F];fa[F]=x;\n\t\tfa[s[x][k^1]]=F;s[F][k]=s[x][k^1],s[x][k^1]=F;\n\t\tpushup(F);pushup(x);\n\t\treturn;\n\t}\n\tinline void Splay(int x){\n\t\twhile(fa[x]){\n\t\t\tif(fa[fa[x]])\n\t\t\t\trotate(isright(x)==isright(fa[x])?fa[x]:x);\n\t\t\trotate(x);\n\t\t}\n\t\trt=x;\n\t\treturn;\n\t}\n\tinline void insert(int x){\n\t\tif(!cnt){cnt=rt=1;val[1]=x;return;}\n\t\tint now=rt,las=0;\n\t\twhile(now){\n\t\t\tlas=now;\n\t\t\tif(min(val[now],mn[s[now][1]])>=x+K)\tnow=s[now][0];\n\t\t\telse\t\t\t\t\t\t\t\t\tnow=s[now][1],las=-las;\n\t\t}\n\t\t++cnt;fa[cnt]=abs(las);val[cnt]=mn[cnt]=x;s[abs(las)][las<0]=cnt;\n\t\tSplay(cnt);\n\t\treturn;\n\t}\n\tinline void Calc(int x){\n\t\tif(!x) return;if(x<0) x=rt;\n\t\tCalc(s[x][0]);st[++top]=val[x];Calc(s[x][1]);\n\t\treturn;\n\t}\n}tree;\n\ninline void Input(){\n\tn=read(),K=read();\n\ttree.init();\n\tfor(re int i=1;i<=n;++i) q[p[i]=read()]=i;\n\treturn;\n}\n\ninline void solve(){\n\tfor(re int i=1;i<=n;++i) tree.insert(q[i]);//enter;\n\ttree.Calc(-1);\n\tfor(re int i=1;i<=n;++i) p[st[i]]=i;//enter;\n\tfor(re int i=1;i<=n;++i) printf(\"%d\\n\",p[i]);\n\treturn;\n}\n\nint main(){\n\tfreopen(\"data.in\",\"r\",stdin);\n\tfreopen(\"data.out\",\"w\",stdout);\n\tInput();\n\tsolve();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1611653449,
        "uid": 55357,
        "name": "Thaumaturge",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT1984 \u3010[AGC001F] Wide Swap\u3011"
    },
    {
        "content": "\u8bbeA[p[i]]=i\u5373\u67d0\u4e2a\u503c\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5c31\u662f\u6bcf\u6b21\u4ea4\u6362\u76f8\u90bb\u7684\uff0c\u5dee>=K\u7684\u503c\n\n\u6ce8\u610f\u5230\u5982\u679c\u4e24\u4e2a\u503c\uff0c$\u5dee<K$\uff0c\u5219\u76f8\u5bf9\u4f4d\u7f6e\u662f\u4e0d\u4f1a\u6539\u53d8\u7684\n\u5373\u5bf9\u4e8eA\u4e2d\u7684\u6570\u5b57i\uff0c\u6570\u5b57(i-K,i+K)\u4e0ei\u7684\u76f8\u5bf9\u987a\u5e8f\u4e0d\u80fd\u6539\u53d8\n\n\u90a3\u4e48\u5c31\u662f\u8bf4\u6211\u80fd\u5f97\u51fa\u4e00\u4e9b\u987a\u5e8f\u7684\u9650\u5236\u6761\u4ef6\uff0c\u5728\u6ee1\u8db3\u8fd9\u4e9b\u6761\u4ef6\u7684\u60c5\u51b5\u4e0b\u6784\u9020\u4e00\u4e2a\u62d3\u6251\u5e8f\u65b9\u6848\uff0c\u6211\u4eec\u5df2\u7ecf\u83b7\u5f97\u4e86\u4e00\u4e2a $n^2$\u7684\u505a\u6cd5\n\n\u8fd9\u4e2a\u505a\u6cd5\u7684\u4e3b\u8981\u74f6\u9888\u5728\u4e8e\u8fb9\u6570\u8fc7\u591a\uff0c\u8fd9\u4e9b\u8fb9\u6211\u80fd\u7528bitset\u5feb\u901f\u83b7\u5f97\uff0c\u4f46\u8fde\u8fb9\u8fd8\u662f\u6ca1\u529e\u6cd5\u4f18\u5316\n\n\u4f46\u8fd9\u4e2a\u8fb9\u591a\u53ea\u53d1\u751f\u5728K\u6bd4\u8f83\u5927\u7684\u65f6\u5019\uff0c\u800c\u8fd9\u79cd\u65f6\u5019\u5176\u5b9e\u62d3\u6251\u6392\u5e8f\u4e2d\u6ca1\u610f\u4e49\u7684\u8fb9\u662f\u5f88\u591a\u7684\uff0c\u6240\u4ee5\u601d\u8def\u662f\u5c3d\u91cf\u51cf\u5c11\u8fb9\u6570\n\n\u7136\u540e\u8fd9\u91cc\u6211\u4e00\u5f00\u59cb\u7684\u60f3\u6cd5\u662f\uff0c\u5bf9\u4e8e\u6bcf\u4e2ai\u53ea\u8003\u8651i-K\u90e8\u5206\uff0c\u539f\u672c\u5728\u524d\u540e\u7684\u9650\u5236\uff0c\u7136\u540e\u53d1\u73b0\u5f88\u96be\u505a\n\n\u4f46\u5982\u679c\u6bcf\u4e2ai\uff0c\u8003\u8651i-K\u548ci+K\uff0c\u4ed6\u4eec\u539f\u672c\u5728\u524d\u9762\u7684\u9650\u5236\uff0c\u5c31\u5b8c\u5168\u4e0d\u4e00\u6837\u4e86\uff0c\u56e0\u4e3a\u8ddd\u79bb\u9650\u5236\u662f\u5bf9\u79f0\u7684\n\n\u5177\u4f53\u800c\u8a00\uff0c\u5de6\u8fb9\u5927\u5c0f\u4e3aK\u7684\u90e8\u5206\uff0c\u53ea\u9700\u8981\u5411\u6bd4i\u65e9\u800c\u6700\u665a\u51fa\u73b0\u7684\u90a3\u4e2a\u8fde\u8fb9\uff0c\u56e0\u4e3a\u5176\u4ed6\u5df2\u7ecf\u51fa\u73b0\u7684\uff0c\u90fd\u4e00\u5b9a\u88ab\u8fd9\u4e2a\u8986\u76d6\uff1b\u53f3\u8fb9\u540c\u7406\n\n\u8fd9\u6837\u8fb9\u6570\u662f2n\u7ea7\u522b\u7684\uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u5373\u53ef\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a nlogn\n\n\u6700\u540e\u8bb2\u8bb2\u8fd9\u4e2a\u5b57\u5178\u5e8f\u7684\u95ee\u9898\n\n\u6211\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u8bf4p\u6700\u5c0f\u5c31\u662f\u8ba9A\u6700\u5c0f\uff0c\u8fd9\u4e2a\u8c8c\u4f3c\u4e4b\u524d\u4e5f\u78b0\u5230\u8fc7\uff0c\u5fd8\u8bb0\u662f\u4ec0\u4e48\u9898\u76ee\u4e86\uff0c\u53cd\u6b63\u5f53\u65f6\u4e5f\u6ca1\u4f1a\u8bc1\n\n\u4f46\u5982\u679c\u4e0d\u662f\u6c42A\u6700\u5c0f\uff0c\u76f4\u63a5\u6c42p\u6700\u5c0f\u6211\u4e0d\u77e5\u9053\u600e\u4e48\u6c42\u2026\u2026\u6240\u4ee5\u6682\u65f6\u5f53\u8fd9\u4e2a\u662f\u5bf9\u7684\u5427\n\nupd:\n\u8fd9\u5e76\u4e0d\u662f\u4e2a\u4e00\u822c\u6027\u7684\u7ed3\u8bba\uff0c\u53cd\u4f8b\u59822 3 1\u548c3 1 2\n\n\u6211\u5e76\u4e0d\u77e5\u9053\u662f\u8fd9\u9053\u9898\u7684\u8f6c\u5316\u6709\u95ee\u9898\uff0c\u8fd8\u662f\u6709\u4ec0\u4e48\u9650\u5236\u4fdd\u8bc1\u4e86\u8fd9\u79cd\u60c5\u51b5\u4e0d\u4f1a\u53d1\u751f\n\n\u6b22\u8fcejulao\u7ed9\u51fa\u89e3\u91ca\n\n\u90a3\u4e48A\u6700\u5c0f\u5f88\u5bb9\u6613\uff0c\u5c31\u662f\u7ecf\u5178\u7684\u6700\u5c0f\u5b57\u5178\u5e8f\u62d3\u6251\u65b9\u6848\uff0c\u76f4\u63a5\u641e\u4e2a\u5806\u8d2a\u5fc3\u5373\u53ef\uff0c\u5b57\u5178\u5e8f\u8fd9\u4e1c\u897f\u663e\u7136\u8d2a\u5fc3\u662f\u5bf9\u7684\n\n```cpp\n//Zory-2019\n#include<cmath>\n#include<ctime>\n#include<cstdio>\n#include<cstring>\n#include<cstdlib>\n#include<map>\n#include<set>\n#include<queue>\n#include<deque>\n#include<stack>\n#include<bitset>\n#include<vector>\n#include<algorithm>\n#include<iostream>\n#include<deque>\n// #include<unordered_map>\nusing namespace std;\nint bin[40],lg[1<<21];\nnamespace mine\n{\n\ttypedef long long ll;\n\t#define double long double\n\tconst int INF=0x3f3f3f3f;\n\tconst ll LLINF=0x3f3f3f3f3f3f3f3fll;\n\tll qread()\n\t{\n\t\tll ans=0;char c=getchar();int f=1;\n\t\twhile(c<'0' or c>'9') {if(c=='-') f=-1;c=getchar();}\n\t\twhile('0'<=c and c<='9') ans=ans*10+c-'0',c=getchar();\n\t\treturn ans*f;\n\t}\n\tvoid write(ll num)\n\t{\n\t\tif(num<0) {num=-num;putchar('-');}\n\t\tif(num>9) write(num/10);\n\t\tputchar('0'+num%10);\n\t}\n\tvoid writeln(int num){write(num);puts(\"\");}\n\t#define FR first\n\t#define SE second\n\t#define MP make_pair\n\t#define pr pair<int,int>\n\t#define PB push_back\n\t#define vc vector\n\tvoid chmax(int &x,const int y) {x=x>y?x:y;}\n\tvoid chmin(int &x,const int y) {x=x<y?x:y;}\n\tconst int MAX_N=5e5+10;\n\tconst int MOD=1e9+7;\n\tvoid add(int &x,int y) {x+=y;if(x>=MOD) x-=MOD;if(x<0) x+=MOD;}\n\n\tstruct SegmentTree\n\t{\n\t\t#define lc 2*x\n\t\t#define rc 2*x+1\n\t\t#define mid ((l+r)>>1)\n\t\tpr mx[MAX_N*4];\n\t\tvoid change(int x,int l,int r,int p,int c)\n\t\t{\n\t\t\tmx[x]=max(mx[x],MP(c,p));\n\t\t\tif(l==r) return;\n\t\t\tif(p<=mid) change(lc,l,mid,p,c);\n\t\t\telse change(rc,mid+1,r,p,c);\n\t\t}\n\t\tpr ask(int x,int l,int r,int fl,int fr)\n\t\t{\n\t\t\tif(fl>fr) return MP(0,0);\n\t\t\tif(l==fl and r==fr) return mx[x];\n\t\t\tif(fr<=mid) return ask(lc,l,mid,fl,fr);\n\t\t\tif(fl>mid) return ask(rc,mid+1,r,fl,fr);\n\t\t\treturn max(ask(lc,l,mid,fl,mid),ask(rc,mid+1,r,mid+1,fr));\n\t\t}\n\t}sgt;\n\n\tint a[MAX_N],ans[MAX_N];\n\tint ru[MAX_N];vector<int> to[MAX_N];\n\tvoid ins(int x,int y) {ru[y]++;to[x].PB(y);}\n\tpriority_queue< int,vector<int>,greater<int> > q;\n\tvoid main()\n\t{\n\t\tint n=qread(),K=qread();\n\t\tfor(int i=1;i<=n;i++) a[qread()]=i;\n\t\tfor(int i=1;i<=n;i++)\n\t\t{\n\t\t\tint num=a[i];sgt.change(1,1,n,num,i);\n\t\t\tpr a=sgt.ask(1,1,n,max(1,num-K+1),num-1);if(a.FR>0) ins(a.SE,num);\n\t\t\tpr b=sgt.ask(1,1,n,num+1,min(num+K-1,n));if(b.FR>0) ins(b.SE,num);\n\t\t}\n\t\tfor(int i=1;i<=n;i++) if(ru[i]==0) q.push(i);\n\t\tfor(int now=1;now<=n;now++)\n\t\t{\n\t\t\tint x=q.top();q.pop();ans[x]=now;\n\t\t\tfor(int t=0;t<(int)to[x].size();t++)\n\t\t\t{\n\t\t\t\tint y=to[x][t];ru[y]--;\n\t\t\t\tif(ru[y]==0) q.push(y);\n\t\t\t}\n\t\t}\n\t\tfor(int i=1;i<=n;i++) writeln(ans[i]);\n\t}\n};\nint main()\n{\n\tsrand(time(0));\n\tbin[0]=1;for(int i=1;i<=30;i++) bin[i]=bin[i-1]<<1;\n\tlg[1]=0;for(int i=2;i<(1<<21);i++) lg[i]=lg[i>>1]+1;\n\tmine::main();\n}\n",
        "postTime": 1553741310,
        "uid": 30058,
        "name": "Zory",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT1984 \u3010Wide Swap\u3011"
    },
    {
        "content": "\u9996\u5148\u8003\u8651\u6c42\u51fa\u539f\u6392\u5217\u7684\u9006\u7f6e\u6362\uff0c\u8bbe\u4e3a $Q$ \uff0c\u4e8e\u662f\u4ea4\u6362\u5c31\u53d8\u6210\u4e86\u5982\u679c $|Q_i - Q_{i+1}| < k$ \u90a3\u4e48\u53ef\u4ee5\u4ea4\u6362\u76f8\u90bb\u7684\u4e24\u4e2a\u5143\u7d20\u3002\n\n\u4e8e\u662f\uff0c\u5bf9\u4e8e\u4efb\u610f $i,j$ \u5982\u679c\u6ee1\u8db3 $|Q_i - Q_j| < k$ \u90a3\u4e48\u4ed6\u4eec\u7684\u76f8\u5bf9\u987a\u5e8f\u4e00\u5b9a\u65e0\u6cd5\u6539\u53d8\u3002\n\n\u800c\u4e14\u53ef\u4ee5\u8bc1\u660e\uff0c\u5982\u679c\u4e24\u4e2a\u6392\u5217 $Q,P$ \u4e2d\u6240\u6709\u5143\u7d20\u7684\u76f8\u5bf9\u4f4d\u7f6e\u7684\u5173\u7cfb\u662f\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u4e00\u5b9a\u53ef\u4ee5\u4ece $Q$ \u79fb\u5230 $P$ \u3002\u8003\u8651\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7684\u4e00\u6b21\u79fb\u52a8\u5c31\u53ef\u4ee5\u8ba9\u9006\u5e8f\u51cf\u5c11 $1$ \u3002\u6709\u9650\u6b65\u7684\u64cd\u4f5c\u540e\u4e00\u5b9a\u53ef\u4ee5\u8ba9 $Q$ \u6210\u4e3a $P$ \uff08\u753b\u4e00\u4e0b\u53d1\u73b0\u5f88\u5bf9\uff09\u3002\n\n\u4e8e\u662f\u6709\u4e86\u4e00\u79cd\u505a\u6cd5\uff0c\u5bf9\u4e8e $i<j$ \u6ee1\u8db3 $|Q_i - Q_j| < k$ \u6211\u4eec\u8fde\u4e00\u6761 $Q_i \\to Q_j$ \u7684\u6709\u5411\u8fb9\u8868\u793a\u5148 $Q_i$ \u540e $Q_j$ \uff0c\u4e8e\u662f\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u8fd9\u4e2a\u56fe\u4e0a\u7684\u4e00\u4e2a\u62d3\u6251\u5e8f\uff0c\u6ee1\u8db3 $1$ \u5c3d\u91cf\u9760\u524d\uff0c\u5728 $1$ \u5c3d\u91cf\u9760\u524d\u7684\u60c5\u51b5\u4e0b $2$ \u5c3d\u91cf\u9760\u524d... \u4e0d\u96be\u53d1\u73b0\u8fd9\u6837\u7684\u9650\u5236\u7b49\u4ef7\u4e8e\u539f\u6392\u5217\u5b57\u5178\u5e8f\u5c3d\u91cf\u5c0f\u3002\u8fd9\u4e2a\u9650\u5236\u4e0e\u5b57\u5178\u5e8f\u662f\u6ca1\u6709\u5173\u7cfb\u7684\u3002\u6bd4\u5982 $3 \\to 1 , 2 \\to 4$ \u5728\u8fd9\u4e2a\u9650\u5236\u4e0b\u5e94\u8be5\u62ff $3,1,2,4$ \u4f46\u662f\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u5e94\u5f53\u662f $2,3,1,4$ \u3002\n\n\u6c42\u8fd9\u4e2a\u62d3\u6251\u5e8f\u7684\u65b9\u6cd5\u53ef\u4ee5\u53c2\u7167 [LOJ2114](https://loj.ac/problem/2114) \u8fd9\u4e2a\u9898\u3002\u6211\u4eec\u6bcf\u6b21\u62ff\u53ef\u4ee5\u653e\u5728\u6700\u540e\u7684\u6700\u5927\u7684\u6570\u653e\u5728\u6700\u540e\u4e00\u5b9a\u4e0d\u52a3\u3002\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5efa\u53cd\u56fe\u518d\u8dd1\u62d3\u6251\u5e8f\uff0c\u6700\u540e\u628a\u62d3\u6251\u5e8f\u5012\u8fc7\u6765\u5c31\u5f97\u5230\u4e86\u6240\u6c42\u3002\n\n\u73b0\u5728\u95ee\u9898\u5728\u4e8e\u8fd9\u6837\u7684\u8fb9\u6709 $O(n^2)$ \u6761\u3002\u4f18\u5316\u65b9\u6cd5\u5927\u81f4\u6709\u4e24\u79cd\u3002\u9996\u5148\u53ef\u4ee5\u4e0d\u5efa\u8fb9\uff0c\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u5224\u65ad\u4e00\u4e2a\u70b9\u7684\u51fa\u5ea6\u6765\u505a\u62d3\u6251\u6392\u5e8f\uff0c\u8fd9\u662f\u5b98\u65b9\u9898\u89e3\u7684\u505a\u6cd5\u3002\u5927\u6982\u8fd8\u6709\u4e00\u4e2a\u505a\u6cd5\u662f\u4f18\u5316\u8fb9\u7684\u6570\u91cf\u3002\n\n\u8003\u8651\u6211\u4eec\u5f53\u524d\u5df2\u7ecf\u901a\u8fc7\u52a0\u8fb9\u8ba9 $1 \\sim i - 1$ \u7684\u70b9\u5bf9\u95f4\u90fd\u6ee1\u8db3\u4e86\u4e4b\u524d\u63d0\u5230\u7684\u9650\u5236\u3002\u73b0\u5728\u6211\u4eec\u52a0\u5165 $Q_i$ \u3002\u6211\u4eec\u53ea\u7ed9\u6ee1\u8db3 $0< Q_j - Q_i < k$ \u4ee5\u53ca $0 < Q_i - Q_j < k$ \u4e14\u5927\u7684\u4e24\u4e2a $j$ \u4e0e $Q_i$ \u8fde\u8fb9\u3002\u7531\u4e8e\u4e0a\u4e0b\u662f\u5bf9\u79f0\u7684\uff0c\u6211\u4eec\u53ea\u8003\u8651 $Q_j > Q_i$ \u7684\u60c5\u51b5\u3002\u56e0\u4e3a\u4e4b\u524d $1 \\sim i - 1$ \u4e2d\u4e0e $i$ \u6ee1\u8db3 $Q_t -Q_i < k$ \u7684\u4f4d\u7f6e \u4e0e $Q_j$ \u7684\u76f8\u5bf9\u987a\u5e8f\u5df2\u7ecf\u662f\u786e\u5b9a\u597d\u7684\uff0c\u5e76\u4e14\u4e00\u5b9a\u662f $Q_j$ \u5904\u4e8e\u6700\u9760\u540e\uff0c\u6240\u4ee5\u76f4\u63a5\u62ff $Q_j$ \u5411 $Q_i$ \u8fde\u8fb9\u5373\u53ef\u6ee1\u8db3\u6240\u6709\u7684\u9650\u5236\u3002\u8fd9\u6837\u8fde\u8fb9\u6700\u591a\u4e5f\u5c31\u8fde $2n$ \u6761\uff0c\u8fb9\u6570\u53d8\u6210\u4e86 $O(n)$ \u7ea7\u522b\u3002\u8fde\u8fb9\u8fc7\u7a0b\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\uff0c\u603b\u590d\u6742\u5ea6\u662f\u8fde\u8fb9\u7684 $O(n\\log n)$\u3002\n\n\u6700\u540e\u522b\u5fd8\u4e86\u8981\u8fd8\u539f\u6210\u539f\u6392\u5217\u3002\u3002~~\u8fd9\u6bd2\u7624\u6837\u4f8b\u5168\u90e8\u4e0d\u8fd8\u539f\u90fd\u80fd\u8fc7~~\n\n```cpp\n\nint n , k;\nint A[MAXN] , Q[MAXN];\n\nint T[MAXN << 2];\nvoid add( int rt , int l , int r , int x , int c ) {\n\tif( l == r ) { T[rt] = c; return; }\n\tint m = l + r >> 1;\n\tif( x <= m ) add( rt << 1 , l , m , x , c );\n\telse add( rt << 1 | 1 , m + 1 , r , x , c );\n\tT[rt] = max( T[rt << 1] , T[rt << 1 | 1] );\n}\nint que( int rt , int l , int r , int L , int R ) {\n\tif( L <= l && R >= r ) return T[rt];\n\tint m = l + r >> 1 , re = 0;\n\tif( L <= m ) re = max( re , que( rt << 1 , l , m , L , R ) );\n\tif( R > m ) re = max( re , que( rt << 1 | 1 , m + 1 , r , L , R ) );\n\treturn re;\n}\n\nvi G[MAXN];\nint deg[MAXN] , as[MAXN];\n\nvoid solve() {\n\tcin >> n >> k;\n\trep( i , 1 , n ) scanf(\"%d\",A + i) , Q[A[i]] = i;\n\trep( i , 1 , n ) {\n\t\tint t = que( 1 , 1 , n , Q[i] , min( Q[i] + k - 1 , n ) );\n\t\tif( t ) G[Q[i]].pb( Q[t] ) , ++ deg[Q[t]];// , cout << Q[i] << ' ' << Q[t] << endl;\n\t\tt = que( 1 , 1 , n , max( 1 , Q[i] - k + 1 ) , Q[i] );\n\t\tif( t ) G[Q[i]].pb( Q[t] ) , ++ deg[Q[t]];// , cout << Q[i] << ' ' << Q[t] << endl;\n\t\tadd( 1 , 1 , n , Q[i] , i );\n\t}\n\tpriority_queue<int> q;\n\trep( i , 1 , n ) if( !deg[i] ) q.push( i );\n\tvi re;\n\twhile( !q.empty() ) {\n\t\tint u = q.top(); q.pop();\n\t\tfor( int v : G[u] ) {\n\t\t\t-- deg[v];\n\t\t\tif( !deg[v] ) q.push( v );\n\t\t}\n\t\tre.pb( u );\n\t}\n\treverse( all( re ) );\n\trep( i , 1 , n ) as[re[i - 1]] = i;\n\trep( i , 1 , n ) printf(\"%d\\n\",as[i]);\n}\n\nsigned main() {\n//\tfreopen(\"input\",\"r\",stdin);\n//\tfreopen(\"stdout\",\"w\",stdout);\n//    int T;cin >> T;while( T-- ) solve();\n    solve();\n}\n```\n\n",
        "postTime": 1605056210,
        "uid": 63398,
        "name": "yijan",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 AT1984 \u3010[AGC001F] Wide Swap\u3011"
    },
    {
        "content": "&emsp;&emsp;**\u53bb\u5f80[\u539f\u535a\u5ba2](https://www.cnblogs.com/crashed/p/13539735.html)\u98df\u7528\u66f4\u4f73\u3002**\n\n# \u9898\u76ee\n\n&emsp;&emsp;[\u70b9\u8fd9\u91cc](https://vjudge.net/problem/AtCoder-agc001_f)\u770b\u9898\u76ee\u3002  \n\n# \u5206\u6790\n\n&emsp;&emsp;\u9898\u76ee\u7684\u6761\u4ef6\u6bd4\u8f83\u5947\u602a\uff0c\u56e0\u4e3a\u6211\u4eec\u4ea4\u6362\u7684\u8981\u6c42\u662f\uff1a\n\n1. \u503c \" \u76f8\u90bb \"\u3002\n2. \u4f4d\u7f6e\u7684\u5dee\u8981 $\\ge K$\u3002\n\n&emsp;&emsp;\u90a3\u4e48\u7b2c\u4e00\u4e2a\u6761\u4ef6\u5c31\u53ef\u4ee5\u5f15\u5bfc\u6211\u4eec\u60f3\u5230\uff0c\u6211\u4eec\u5e94\u8be5\u6784\u9020\u51fa\u53e6\u4e00\u4e2a\u5e8f\u5217 $A$ \uff0c\u4f7f\u5f97\u5728 $A$ \u4e0a\u9762\u4ea4\u6362\u76f8\u90bb\u4e24\u4e2a\u6570\uff0c\u5c31\u7b49\u4ef7\u4e8e\u5728 $P$ \u4e0a\u505a\u4ea4\u6362\u3002\n\n&emsp;&emsp;\u4e0d\u96be\u60f3\u5230\u5b9a\u4e49\uff1a \n$$\nA_i=\\sum_{k=1}^nk[P_k=i]\n$$\n&emsp;&emsp;\u5373 $A_i$ \u4e3a\u7b2c $i$ \u4e2a\u6570\u5728 $P$ \u4e2d\u51fa\u73b0\u7684\u4f4d\u7f6e\u3002\n\n&emsp;&emsp;\u6b64\u65f6\u4ea4\u6362 $A$ \u4e2d\u76f8\u90bb\u4e24\u4e2a\u6570\uff0c\u5c31 \" \u5929\u7136\u5730 \" \u6ee1\u8db3\u4e86\u7b2c\u4e00\u4e2a\u6761\u4ef6\u3002\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u5c31\u610f\u5473\u7740\uff0c\u76f8\u90bb\u4e24\u4e2a\u6570\u7684\u5dee\u7684\u7edd\u5bf9\u503c $\\ge K$\u3002\n\n&emsp;&emsp;\u53e6\u4e00\u65b9\u9762\uff0c\u6700\u5c0f\u5316 $P$ \u7684\u5b57\u5178\u5e8f\u4e5f\u5c31\u610f\u5473\u7740\u8981\u6700\u5c0f\u5316 $A$ \u7684\u5b57\u5178\u5e8f\u3002\n\n&emsp;&emsp;\u8003\u8651\u7b2c\u4e8c\u4e2a\u6761\u4ef6\uff0c\u5b9e\u9645\u4e0a\u5c31\u610f\u5473\u7740\uff0c**\u5982\u679c $|A_i-A_j|< K$\uff0c\u90a3\u4e48 $A_i$ \u548c $A_j$ \u7684\u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53ef\u80fd\u88ab\u6539\u53d8**\uff0c\u4f46\u8bf7\u6ce8\u610f\uff0c\u5b83\u7684\u5426\u547d\u9898\u5e76\u4e0d\u6210\u7acb\u3002\n\n&emsp;&emsp;\u5229\u7528\u4e00\u4e2a\u5e38\u89c1\u7684\u6280\u5de7\uff1a\u7528\u6709\u5411\u8fb9\u8868\u793a\u987a\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9 $|A_i-A_j|< K$ \u4e14 $i<j$\uff0c\u8fde\u63a5\u4e00\u6761 $A_i\\rightarrow A_j$ \u7684\u6709\u5411\u8fb9\u3002\u8003\u8651\u8fd9\u4e2a\u6709\u5411\u56fe\u7684\u62d3\u6251\u5e8f\uff0c\u5c31\u4e00\u5b9a\u6ee1\u8db3\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u3002\u56e0\u6b64\u6211\u4eec\u73b0\u5728\u5c31\u8981\u6c42\u8fd9\u4e2a\u6709\u5411\u56fe\u7684\u6700\u5c0f\u62d3\u6251\u5e8f\u3002\u8fd9\u53ef\u4ee5\u7528\u5806\u5b9e\u73b0\u3002\n\n&emsp;&emsp;\u4f46\u662f\u4e00\u4e0d\u5c0f\u5fc3\u8fd9\u4e2a\u56fe\u5c31\u4f1a\u6709 $O(n^2)$ \u6761\u8fb9\u3002\u6211\u4eec\u8fd8\u9700\u8981\u8003\u8651\u4f18\u5316\u8fb9\u6570\u3002\n\n&emsp;&emsp;\u6ce8\u610f\u5230\u4e00\u70b9\uff1a\u5982\u679c\u6709 $i<j<k,A_i>A_j,A_i>A_k$ \u4e14 $A_i-A_j<K,A_i-A_k<K$\uff0c\u90a3\u4e48\u5fc5\u7136\u6709 $|A_j-A_k|<K$\u3002\u8fd9\u8bf4\u660e\u6211\u4eec\u53ea\u9700\u8981\u8fde\u63a5\u8fb9 $A_i\\rightarrow A_j$\uff0c\u800c\u4e0d\u9700\u8981\u518d\u8fde\u63a5 $A_i\\rightarrow A_k$\u3002\u5f53 $A_i<A_j,A_i<A_k$ \u7684\u65f6\u5019\u540c\u7406\u3002\n\n&emsp;&emsp;\u56e0\u6b64\u6211\u4eec\u53ea\u9700\u8981\u627e\u5230\u6700\u5c0f\u7684 $j$ \u6ee1\u8db3 $A_i>A_j$ \u548c\u6700\u5c0f\u7684 $k$ \u6ee1\u8db3 $A_i<A_k$\uff0c\u5e76\u8fde\u63a5 $A_i\\rightarrow A_j,A_i\\rightarrow A_k$ \u5373\u53ef\u3002\u8fb9\u6570\u5c31\u662f $O(n)$ \u7684\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u53ef\u4ee5\u7528\u6743\u503c\u7ebf\u6bb5\u6811\u4f18\u5316\u4e00\u4e0b\u3002\n\n&emsp;&emsp;\u65f6\u95f4\u662f $O(n\\log_2n)$\u3002\n\n# \u4ee3\u7801\n\n&emsp;&emsp;[ AC \u8bb0\u5f55](https://vjudge.net/solution/26934733)\u3002\n\n```cpp\n#include <queue>\n#include <cstdio>\nusing namespace std;\n\nconst int INF = 0x3f3f3f3f;\nconst int MAXN = 5e5 + 5;\n\ntemplate<typename _T>\nvoid read( _T &x )\n{\n\tx = 0;char s = getchar();int f = 1;\n\twhile( s > '9' || s < '0' ){if( s == '-' ) f = -1; s = getchar();}\n\twhile( s >= '0' && s <= '9' ){x = ( x << 3 ) + ( x << 1 ) + ( s - '0' ), s = getchar();}\n\tx *= f;\n}\n\ntemplate<typename _T>\nvoid write( _T x )\n{\n\tif( x < 0 ){ putchar( '-' ); x = ( ~ x ) + 1; }\n\tif( 9 < x ){ write( x / 10 ); }\n\tputchar( x % 10 + '0' );\n}\n\ntemplate<typename _T>\n_T MIN( const _T a, const _T b )\n{\n\treturn a < b ? a : b;\n}\n\ntemplate<typename _T>\n_T MAX( const _T a, const _T b )\n{\n\treturn a > b ? a : b;\n}\n\nstruct edge\n{\n\tint to, nxt;\n}Graph[MAXN << 1];\n\npriority_queue<int, vector<int>, greater<int> > q;\n\nint mn[MAXN << 2];\n\nint seq[MAXN], ans[MAXN];\nint A[MAXN], P[MAXN], head[MAXN], deg[MAXN];\nint N, K, cnt;\n\nvoid addEdge( const int from, const int to )\n{\n\tGraph[++ cnt].to = to, Graph[cnt].nxt = head[from];\n\thead[from] = cnt, deg[to] ++;\n}\n\nvoid upt( const int x ) { mn[x] = MIN( mn[x << 1], mn[x << 1 | 1] ); }\n\nvoid build( const int x, const int l, const int r )\n{\n\tif( l > r ) return ; mn[x] = INF;\n\tif( l == r ) return ;\n\tint mid = l + r >> 1;\n\tbuild( x << 1, l, mid );\n\tbuild( x << 1 | 1, mid + 1, r );\n}\n\nvoid update( const int x, const int l, const int r, const int p, const int v )\n{\n\tif( l == r ) { mn[x] = v; return ; }\n\tint mid = l + r >> 1;\n\tif( p <= mid ) update( x << 1, l, mid, p, v );\n\telse update( x << 1 | 1, mid + 1, r, p, v );\n\tupt( x );\n}\n\nint query( const int x, const int l, const int r, const int segL, const int segR )\n{\n\tif( segL <= l && r <= segR ) return mn[x];\n\tint mid = l + r >> 1, ret = INF;\n\tif( segL <= mid ) ret = MIN( ret, query( x << 1, l, mid, segL, segR ) );\n\tif( mid < segR ) ret = MIN( ret, query( x << 1 | 1, mid + 1, r, segL, segR ) );\n\treturn ret;\n}\n\nint query( const int l, const int r ) { return query( 1, 1, N, MAX( 1, l ), MIN( N, r ) ); }\n\nint main()\n{\n\tread( N ), read( K );\n\tfor( int i = 1 ; i <= N ; i ++ ) read( P[i] ), A[P[i]] = i;\n\tbuild( 1, 1, N );\n\tfor( int i = N ; i ; i -- )\n\t{\n\t\tint pre = query( A[i] - K + 1, A[i] ),\n\t\t\tnxt = query( A[i], A[i] + K - 1 );\n\t\tif( pre < INF ) addEdge( A[i], A[pre] );\n\t\tif( nxt < INF ) addEdge( A[i], A[nxt] );  \n\t\tupdate( 1, 1, N, A[i], i );\n\t}\n\tfor( int i = 1 ; i <= N ; i ++ )\n\t\tif( ! deg[i] ) q.push( i );\n\tint u, v, tot = 0;\n\twhile( ! q.empty() )\n\t{\n\t\tu = seq[++ tot] = q.top(), q.pop();\n\t\tfor( int i = head[u] ; i ; i = Graph[i].nxt )\n\t\t\tif( ! ( -- deg[v = Graph[i].to] ) )\n\t\t\t\tq.push( v );\n\t}\n\tfor( int i = 1 ; i <= N ; i ++ ) ans[seq[i]] = i;\n\tfor( int i = 1 ; i <= N ; i ++ ) write( ans[i] ), putchar( '\\n' );\n\treturn 0;\n}\n```",
        "postTime": 1597977846,
        "uid": 123809,
        "name": "crashed",
        "ccfLevel": 0,
        "title": "[AGC001F] Wide Swap"
    },
    {
        "content": "\u6807\u7b7e: \u8f6c\u5316, \u8d2a\u5fc3, \u7ebf\u6bb5\u6811, \u62d3\u6251\u6392\u5e8f.\n\n~~\u9898\u76ee\u7f16\u53f7\u662f\u4e2a\u5f88\u5389\u5bb3\u7684\u6570\u5b57\u554a~~\n\n\u5b9a\u4e49\u4e00\u4e2a\u6570\u7ec4 $Q$, \u4f7f\u5f97 $Q_{P_i}=i$, \u5373\u628a\u6bcf\u4e00\u4e2a\u6570\u5b57\u7684\u4f4d\u7f6e\u8bb0\u5f55\u5728 $Q$ \u5185, \u56e0\u4e3a\u524d\u9762\u7684**\u6743\u503c\u5c3d\u91cf\u5c0f**\u7b49\u4ef7\u4e8e**\u6743\u503c\u5c0f\u7684\u5c3d\u91cf\u524d**, \u6240\u4ee5 $P$ \u5b57\u5178\u5e8f\u6700\u5c0f\u7b49\u4ef7\u4e8e $Q$ \u5b57\u5178\u5e8f\u6700\u5c0f, \u53ea\u9700\u8981\u8003\u8651\u6c42\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 $Q$ \u5c31\u597d\u4e86.\n\n$Q$ \u7684\u4ea4\u6362\u89c4\u5219\u662f\u6743\u503c\u5dee$\\geqslant k$\u7684\u76f8\u90bb\u5143\u7d20\u53ef\u4ee5\u6362\u987a\u5e8f, \u5bb9\u6613\u53d1\u73b0\u82e5 $abs(Q_i-Q_j) < k$, $Q_i, Q_j$ \u7684**\u76f8\u5bf9\u987a\u5e8f**\u4e0d\u4f1a\u6539\u53d8, \u6211\u4eec\u66b4\u529b\u5730\u5c06\u8fd9\u7c7b $Q_i, Q_j$ \u8fde\u8fb9, \u53ef\u4ee5\u5f97\u5230\u4e00\u5f20\u62d3\u6251\u56fe,  \u7528\u5806\u6765\u8d2a\u5fc3\u7684\u8dd1\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u62d3\u6251\u5e8f\u5c31\u597d\u4e86.\n\n\u4f46\u662f\u6211\u4eec\u6ce8\u610f\u5230\u4e0a\u8ff0\u65b9\u6cd5\u8fb9\u6570\u662f $\\mathcal O(n^2)$ \u7684, \u9700\u8981\u8fdb\u884c\u4f18\u5316. \u89c2\u5bdf\u53d1\u73b0\u66b4\u529b\u65b9\u6cd5\u4f1a\u6709\u5f88\u591a\u65e0\u7528\u8fb9. \u4f8b\u5982\u4e09\u6761\u6709\u5411\u8fb9$(i,j), (j,k),(i,k)$\u4e2d\u8fd9\u6761 $(i,k)$ \u662f\u65e0\u7528\u7684.\n\n\u8003\u8651\u4ece\u540e\u5f80\u524d\u904d\u5386 $Q$ , $Q_i$ **\u8fde\u5411\u7684\u6570**\u5fc5\u7136\u5c5e\u4e8e $(Q_i-K, Q_i)\\cup(Q_i,Q_i+K)$, \u53d1\u73b0 $(Q_i-K, Q_i)$ \u5185\u6240\u6709\u5143\u7d20\u5df2\u7ecf\u786e\u5b9a\u4e86\u76f8\u5bf9\u987a\u5e8f, $(Q_i,Q_i+K)$ \u4e5f\u662f, \u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u5c06 $Q_i$ \u5206\u522b\u5411\u4e24\u4e2a\u533a\u95f4\u5185\u4e0b\u6807\u6700\u5c0f\u7684\u5143\u7d20\u8fde\u8fb9\u5c31\u884c\u4e86. \u533a\u95f4\u5185\u4e0b\u6807\u6700\u5c0f\u7684\u5143\u7d20\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u6765\u7ef4\u62a4.\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log n)$, \u7a7a\u95f4\u590d\u6742\u5ea6 $O(n)$.\n",
        "postTime": 1570682161,
        "uid": 51237,
        "name": "Kinandra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT1984 \u3010Wide Swap\u3011"
    },
    {
        "content": "![](https://images2018.cnblogs.com/blog/1109445/201711/1109445-20171125163542203-35591385.png)\n![](https://images2018.cnblogs.com/blog/1109445/201711/1109445-20171125163601937-349290803.png)\n\n\u62d3\u6251\u6392\u5e8f+\u7ebf\u6bb5\u6811\u3002\n\n~~\u4e3a\u4ec0\u4e48\u8fd9\u9053\u4f1a\u662f\u9ed1\u9898\u554a~~\n\n\u9996\u5148\u8003\u8651\u8c03\u6362\u6743\u503c\u4e0e\u4e0b\u6807\u7684\u4f4d\u7f6e\uff0c\u90a3\u4e48\u5c31\u53ef\u4ee5\u628a\u9898\u76ee\u8f6c\u6362\u6210\uff1a\n\n\u76f8\u90bb\u5143\u7d20\u4e14\u6743\u503c\u5dee$>=k$\u7684\u53ef\u4ee5\u6362\u987a\u5e8f\uff0c\u8ba9\u524d\u9762\u7684\u6743\u503c\u5c3d\u91cf\u5c0f\u7684\u5e8f\u5217\u3002\n\n\u8fd9\u597d\u50cf\u662f\u4e00\u4e2a\u660e\u663e\u7684\u62d3\u6251\u6392\u5e8f\u3002\n\n\u4ece\u4f4d\u7f6e$i$\u5411\u540e\u9762\u7684\u4f4d\u7f6e$j$\u6bd4\u8f83\uff0c\u5982\u679c$abs(a[i]-a[j])<k$\uff0c\u90a3\u4e48$i$\u548c$j$\u7684\u6700\u7ec8\u4f4d\u7f6e\u5173\u7cfb\u5c31\u786e\u5b9a\u4e86\uff0c\u4e8e\u662f\u4ece$a[i]$\u5411$a[j]$\u8fde\u8fb9\u5c31\u884c\u4e86\u3002\n\n\u7136\u800c\u8fd9\u6837\u7684\u8bdd\uff0c\u8fb9\u7684\u6570\u91cf\u4f1a\u8fbe\u5230$O(n^2)$\uff0c\u6240\u4ee5\u9700\u8981\u4f18\u5316\u3002\n\n\u56e0\u4e3a\u8981\u6c42\u7684\u662f\u524d\u9762\u7684\u6743\u503c\u5c3d\u91cf\u5c0f\uff0c\u6240\u4ee5\u5e94\u5f53\u8fde\u5411\u7684\u662f\u6700\u5c0f\u7684\u8fb9\u3002\u6240\u4ee5\u4ece$a[i]$\u5411$(a[i]+1,a[i]+k-1)$\u7684\u6700\u5c0f\u503c\u8fde\u8fb9\u5c31\u597d\u4e86\u3002\u5982\u679c\u9009\u62e9\u7684\u662f\u4ece\u524d\u5f80\u540e\uff0c\u663e\u7136\u8fd9\u6837\u8fde\u8fb9\u662f\u6709\u91cd\u590d\u7684\u3002\u6240\u4ee5\u4ece\u540e\u5f80\u524d\uff0c\u4e0d\u4ec5\u5411\u540e\u9762\u8fde\u8fb9\uff0c\u518d\u5411\u524d\u9762$(a[i]-k+1,a[i]-1)$\u7684\u6700\u5c0f\u503c\u8fde\u8fb9\u5c31\u597d\u4e86\u3002\n\n\u6ce8\u610f\u62d3\u6251\u7684\u65f6\u5019\u7528\u4e00\u4e0b\u5c0f\u6839\u5806\u5c31\u884c\u4e86\u3002\n\ncode:\n```\n//2018.9.21 by ljz\n#include<bits/stdc++.h>\nusing namespace std;\n#define res register int\n#define LL long long\n#define inf 0x3f3f3f3f\n#define eps 1e-15\ninline int read(){\n    res s=0;\n    bool w=0;\n    char ch=getchar();\n    while(ch<'0'||ch>'9'){if(ch=='-')w=1;ch=getchar();}\n    while(ch>='0'&&ch<='9')s=s*10+ch-'0',ch=getchar();\n    return w?-s:s;\n}\ninline void _swap(res &x,res &y){\n    x^=y^=x^=y;\n}\ninline int _abs(const res &x){\n    return x>0?x:-x;\n}\ninline int _max(const res &x,const res &y){\n    return x>y?x:y;\n}\ninline int _min(const res &x,const res &y){\n    return x<y?x:y;\n}\nconst int N=1e6+10;\nnamespace MAIN{\n    int a[N],n,k;\n    namespace Segtree{\n        int mn[N<<2];\n        inline void pushup(const res &rt){\n            mn[rt]=_min(mn[rt<<1],mn[rt<<1|1]);\n        }\n        void build(const res &rt,const res &l,const res &r){\n            mn[rt]=inf;\n            if(l==r)return;\n            res mid=(l+r)>>1;\n            build(rt<<1,l,mid),build(rt<<1|1,mid+1,r);\n        }\n        void update(const res &rt,const res &l,const res &r,const res &p,const res &va){\n            if(l==r){mn[rt]=va;return;}\n            res mid=(l+r)>>1;\n            if(p<=mid)update(rt<<1,l,mid,p,va);\n            else update(rt<<1|1,mid+1,r,p,va);\n            pushup(rt);\n        }\n        int query(const res &rt,const res &l,const res &r,const res &L,const res &R){\n            if(L>R)return 0;\n            if(L<=l&&r<=R)return mn[rt];\n            res mid=(l+r)>>1,ans=inf;\n            if(L<=mid)ans=_min(ans,query(rt<<1,l,mid,L,R));\n            if(R>mid)ans=_min(ans,query(rt<<1|1,mid+1,r,L,R));\n            return ans;\n        }\n    }\n    struct E{\n        int next,to;\n        E() {}\n        E(res next,res to):next(next),to(to) {}\n    }edge[N];\n    int head[N],cnt,du[N];\n    inline void addedge(const res &u,const res &v){\n        edge[++cnt]=E(head[u],v),head[u]=cnt,du[v]++;\n    }\n    int x;\n    priority_queue<int,vector<int>,greater<int> >Q;\n    int id[N],idx;\n    inline void topsort(){\n        for(res i=1;i<=n;i++)if(!du[i])Q.push(i);\n        while(!Q.empty()){\n            res u=Q.top();\n            Q.pop();\n            id[u]=++idx;\n            for(res i=head[u];~i;i=edge[i].next){\n                res tox=edge[i].to;\n                if(--du[tox]==0)Q.push(tox);\n            }\n        }\n    }\n    inline void MAIN(){\n        memset(head,-1,sizeof(head));\n        n=read(),k=read();\n        for(res i=1;i<=n;i++)a[read()]=i;\n        Segtree::build(1,1,n);\n        for(res i=n;i;i--){\n            x=Segtree::query(1,1,n,a[i]+1,_min(a[i]+k-1,n));\n            if(x>=1&&x<=n)addedge(a[i],a[x]);\n            x=Segtree::query(1,1,n,_max(1,a[i]-k+1),a[i]-1);\n            if(x>=1&&x<=n)addedge(a[i],a[x]);\n            Segtree::update(1,1,n,a[i],i);\n        }\n        topsort();\n        for(res i=1;i<=n;i++)printf(\"%d\\n\",id[i]);\n    }\n}\nint main(){\n    MAIN::MAIN();\n    return 0;\n}\n```",
        "postTime": 1537511949,
        "uid": 32878,
        "name": "foreverlasting",
        "ccfLevel": 7,
        "title": "\u3010AGC 001F\u3011Wide Swap"
    }
]