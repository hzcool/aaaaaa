[
    {
        "content": "## B\uff08AT2688 Young Maids\uff09\uff08ARC080E\uff09\uff1a\n\n\u5c06$p$,$q$\u4e0a\u7684\u4f4d\u7f6e\u4ece\u5de6\u5f00\u59cb\u4f9d\u6b21\u8bbe\u4e3a$0,1,...,N-1$\u3002\n\n\u5728\u6309\u5b57\u5178\u5e8f\u6c42\u6700\u5c0f\u5217\u7684\u95ee\u9898\u4e0a,\u6211\u4eec\u53ef\u4ee5\u4ece\u5217\u7684\u5f00\u5934\u5f00\u59cb\u4f9d\u6b21\u786e\u5b9a\u5f53\u65f6\u53ef\u80fd\u6709\u7684\u6700\u5c0f\u503c\u3002\n\n\u9996\u5148\uff0c\u786e\u5b9a\u4f5c\u4e3a$q_0$\u53ef\u80fd\u5b58\u5728\u7684\u6700\u5c0f\u503c\uff0c\u6211\u4eec\u77e5\u9053\uff0c\u80fd\u6210\u4e3a$q _0$\u7684\uff0c\u662f$p$\u4e0a\u7b2c\u5076\u6570\u4f4d\u7684\u8981\u7d20\uff0c\u6211\u4eec\u8981\u5c06\u8fd9\u4e9b\u4e2d\u8981\u7d20\u4e2d\u6700\u5c0f\u7684\u8bb0\u4e3a$q_0$\u3002\u53e6\u5916,\u5c06\u8fd9\u4e2a\u8981\u7d20\u5728$p$\u4e0a\u7684\u4f4d\u7f6e\u8bbe\u4e3a$i$\u3002\n\n\u63a5\u4e0b\u6765,\u786e\u5b9a $q_1$\u4e2d\u6240\u6709\u53ef\u80fd\u5b58\u5728\u7684\u6700\u5c0f\u503c\u3002$q_1$\u4e00\u5b9a\u662f$p$\u4e0a\u7684\u7b2c\u5947\u6570\u4f4d\u7684\u8981\u7d20,\u4f4d\u4e8e\u4f4d\u7f6e$i$\u53f3\u4fa7.\u5c06\u8fd9\u4e9b\u4e2d\u6700\u5c0f\u7684\u8981\u7d20\u8bb0\u4e3a$q_1$\u3002\u53e6\u5916,\u5c06\u8fd9\u4e2a\u8981\u7d20\u5728$p$\u4e0a\u7684\u4f4d\u7f6e\u8bbe\u4e3a$j$\u3002\n\n\u8fd9\u6837,$p$\u7684\u5269\u4f59\u8981\u7d20\u5c31\u88ab\u5206\u5272\u6210$3$\u4e2a\u533a\u95f4$[0,i),[i+1,j),[j+1,N)$\u3002\n\n\u63a5\u4e0b\u6765,\u5728\u533a\u95f4\u5076\u6570\u7f16\u53f7\u7684\u8981\u7d20\u4e2d\u628a\u6700\u5c0f\u7684\u8bb0\u4e3a$q_2$\u3002\u53e6\u5916,\u628a\u8fd9\u4e2a\u8981\u7d20\u5728$S$\u4e0a\u7684\u4f4d\u7f6e\u8bbe\u4e3a$i'$\n\n\u63a5\u4e0b\u6765,\u786e\u5b9a$q_3$\u6240\u53ef\u80fd\u6709\u7684\u6700\u5c0f\u503c.$q_3$\u53ef\u4ee5\u6210\u4e3a$S$\u4e0a\u7684\u5947\u6570\u7f16\u53f7\u7684\u8981\u7d20.\u8fd9\u4e9b\u5143\u7d20\u4e2d,\u6700\u5c0f\u7684\u5143\u7d20\u88ab\u786e\u5b9a\u4e3a$q_3$\u3002\n\n\u53e6\u5916,\u628a\u8fd9\u4e2a\u5143\u7d20\u5728$S$\u4e0a\u7684\u4f4d\u7f6e\u8bbe\u4e3a$j'$\u7684\u8bdd,$S$\u7684\u5269\u4f59\u5143\u7d20\u4ee5\u4f4d\u7f6e$i',j'$\u4e3a\u754c,\u88ab\u5206\u5272\u4e3a\u4e09\u4e2a\u533a\u95f4\u3002\n\n\u53cd\u590d\u8fdb\u884c\u4e0a\u8ff0\u6b65\u9aa4\uff0c\u5c31\u80fd\u6c42\u51fa\u5b57\u5178\u5e8f\u6700\u5c0f\u7684$q$\u3002\u4f46\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$\\Theta(N^2)$\u3002\n\n\u8fd9\u6837\u7684\u65f6\u95f4\u5f53\u7136\u65e0\u6cd5\u901a\u8fc7$1\\times{10}^5$\u7684\u6570\u636e\uff0c\u6211\u4eec\u8003\u8651\u4f18\u5316\u3002\n\n###### \u4f18\u53161\uff1a\n\n\u67d0\u4e2a\u533a\u95f4\u4e0a\u7684\u5076\u6570(\u5947\u6570)\u6c42\u51fa\u7b2c\u4e8c\u4e2a\u8981\u7d20\u7684\u6700\u5c0f\u503c\u7684\u6b65\u9aa4\n\n\u6211\u4eec\u53ef\u4ee5\u9884\u5904\u7406\u8fd9\u4e9b\u6570\u636e\uff0c\u5c06\u53ea\u63d0\u53d6\u4e86\u7b2c\u4e8c\u4e2a\u8981\u7d20\u7684\u4e1c\u897f\u653e\u5728\u7ebf\u6bb5\u6811\u4e0a\u3002\n\n\u8fd9\u6837\u5728\u83b7\u53d6\u6700\u5c0f\u503c\u7684\u540c\u65f6\u4e5f\u53ef\u4ee5\u83b7\u5f97\u4f4d\u7f6e\n\n###### \u4f18\u53162\uff1a\n\n\u5728\u533a\u95f4\u4e2d\u9009\u62e9\u8981\u7d20\u7684\u6b65\u9aa4\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u73b0\u6709\u7684\u6240\u6709\u533a\u95f4\u7528\u4e00\u4e2a\u5806\u6765\u7ef4\u62a4\uff0c\n\n\u5c06\u5404\u533a\u95f4\u7684\u4f18\u5148\u7ea7\u8bbe\u5b9a\u8be5\u533a\u95f4\u5947\u6570\u7f16\u53f7\u7684\u8981\u7d20\u7684\u6700\u5c0f\u503c\u5373\u53ef\u3002\n\n\u8fd9\u6837\u6211\u4eec\u53ef\u4ee5\u505a\u5230$\\Theta(N\\ log N)$\u7684\u4f18\u79c0\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u4e5f\u5c31\u53ef\u4ee5\u987a\u5229\u901a\u8fc7\u5927\u6570\u636e\u4e86\u3002\n\n#### code\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N = 2e5 + 10;\nint n, a[N], t[2][N << 2];\n\ninline int read() {\n\tint s = 0, f = 1;\n\tchar ch;\n\tfor(; ch < '0' || ch > '9'; ch = getchar())\tif(ch == '-')\tf = -1;\n\tfor(; ch >= '0' && ch <= '9'; ch = getchar())\ts = (s << 1) + (s << 3) + ch - '0';\n\treturn s * f;\n}\n\ninline void add(int o, int pos, int l, int r, int cnt) {\n\tif (a[cnt] < a[t[o][pos]])\tt[o][pos] = cnt;\n\tif (l == r)\treturn;\n\tint mid = (l + r) >> 1;\n\tif (cnt <= mid)\tadd(o, pos << 1, l, mid, cnt);\n\telse\tadd(o, pos << 1 | 1, mid + 1, r, cnt);\n}\n\ninline int ask(int o, int pos, int l, int r, int L, int R) {\n\tif (l > R || r < L)\treturn 0;\n\tif (L <= l && r <= R)\treturn t[o][pos];\n\tint mid = (l + r) >> 1;\n\tint lans = ask(o, pos << 1, l, mid, L, R);\n\tint rans = ask(o, pos << 1 | 1, mid + 1, r, L, R);\n\treturn a[lans] < a[rans] ? lans : rans;\n}\n\nstruct node {\n\tint l, r, v;\n\tnode() {}\n\tnode(int _l, int _r){ l = _l, r = _r, v = l > r ? 0 : ask(l & 1, 1, 1, n, l, r); }\n\tfriend bool operator < (node A,node B) { return a[A.v] < a[B.v]; }\n};\n\nset <node> s;\n\nint main() {\n\tn = read();\n\ta[0] = n + 1;\n\tfor(int i = 1; i <= n; ++i) {\n\t\ta[i] = read();\n\t\tadd(i & 1, 1, 1, n, i);\n\t}\n\ts.clear();\n\ts.insert(node(1, n));\n\tfor(int i = 1; i <= n >> 1; ++i) {\n\t\tnode now = *s.begin();\n\t\ts.erase(s.begin());\n\t\tint l = now.l, r = now.r;\n\t\tint lmid = now.v, rmid = ask((lmid & 1) ^ 1, 1, 1, n, lmid, r);\n\t\tprintf(\"%d %d \", a[lmid], a[rmid]);\n\t\ts.insert(node(l, lmid - 1));\n\t\ts.insert(node(lmid + 1, rmid - 1));\n\t\ts.insert(node(rmid + 1, r));\n\t}\n\tputs(\"\");\n\treturn 0;\n}\n\n```\n\n",
        "postTime": 1572701603,
        "uid": 197658,
        "name": "dread",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 AT2688 \u3010Young Maids\u3011"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cd\u6bd4\u8f83\u66b4\u529b\u7684\u505a\u6cd5 \u3002\n\n\u7531\u4e8e\u6700\u540e\u9009\u7684\u6392\u5728\u6700\u524d\u9762 \uff0c \u6240\u4ee5\u6211\u4eec\u8003\u8651\u9006\u63a8 \u3002 \u5bf9\u4e8e\u4e00\u6bb5\u533a\u95f4 $a_i,l<=i<=r$ \uff0c \u6700\u540e\u6211\u4eec\u4e00\u5b9a\u9009 $x,y$ \u6ee1\u8db3 $x<y,(x-l)\\bmod 2=0,(r-y)\\bmod 2=0,a_x$ \u6700\u5c0f \uff0c \u5728\u6b64\u6761\u4ef6\u4e0b $a_y$ \u4e5f\u6700\u5c0f \u3002\u8fd9\u4ef6\u4e8b\u53ef\u4ee5\u7528 $st$ \u8868\u89e3\u51b3 \u3002 \u64cd\u4f5c\u540e\u533a\u95f4\u88ab\u5206\u6210 0 \u5230 3 \u4e2a\u5b50\u533a\u95f4 \uff0c \u7531\u4e8e\u8fd9\u662f\u6211\u4eec\u6700\u540e\u9009\u7684 \uff0c \u5269\u4e0b\u7684\u5b50\u533a\u95f4\u53ea\u80fd\u5728\u5185\u90e8\u9009 \uff0c \u5373\u4e0d\u80fd\u9009\u4e00\u4e2a\u5728\u4e00\u533a\u95f4 \uff0c \u53e6\u4e00\u4e2a\u5728\u4e8c\u6216\u4e09\u533a\u95f4 \u3002 \u8fd9\u5c31\u53ef\u4ee5\u89e3\u91ca $(x-l)\\bmod 2=0,(r-y)\\bmod 2=0$ \u3002\u4e8e\u662f\u6211\u4eec\u5411\u4e0b\u9012\u5f52 \uff0c \u5408\u5e76\u7b54\u6848 \u3002 \u56e0\u4e3a\u4e24\u4e2a\u5b50\u533a\u95f4\u95f4\u7684\u64cd\u4f5c\u4e92\u76f8\u4e0d\u5f71\u54cd \uff0c \u5408\u5e76\u65f6\u76f4\u63a5\u7528\u7c7b\u4f3c\u5f52\u5e76\u6392\u5e8f\u5408\u5e76\u4ece\u5c0f\u5230\u5927\u5408 \u3002\n\n\u7136\u800c\u8fd9\u79cd\u6734\u7d20\u505a\u6cd5\u592a\u5dee \uff0c \u65f6\u7a7a\u590d\u6742\u5ea6\u90fd\u5403\u4e0d\u6d88 \u3002 \u9996\u5148 \uff0c \u6211\u4eec\u53ef\u4ee5\u7528 $vector$  \uff0c \u8fd9\u6837\u7a7a\u95f4\u5c31\u591f\u4e86 \u3002 \u5176\u6b21 \uff0c \u6211\u4eec\u8981\u5229\u7528 $vector$ \u4e00\u4e2a\u91cd\u8981\u7279\u6027 \uff1a**$vector$\u4ea4\u6362\u4e24\u5bb9\u5668\uff08\u5373 $ swap$ \uff09\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u662f $O(1)$ \u7684** \uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u542f\u53d1\u5f0f\u5408\u5e76 \uff0c \u7ee7\u627f\u6700\u5927\u5b50\u533a\u95f4\u7684\u7b54\u6848 \u3002 \u4f46\u6b64\u65f6\u53c8\u51fa\u73b0\u4e86\u4e00\u4e2a\u95ee\u9898 : \u5f53\u524d\u533a\u95f4 $vector$ \u7b2c\u4e00\u4f4d\u5e94\u662f\u4e4b\u524d\u9009\u7684 $x,y$ \u8fd9\u6837 $swap$ \u5c31\u4f1a\u51fa\u4e8b \u3002\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u53e6\u4e00\u4e2a\u5957\u8def \uff1a \u5728 $vector$ \u91cc\u5012\u5e8f\u5b58\u653e\u7b54\u6848 \uff0c \u8fd9\u6837 $x,y$ \u53ea\u8981\u6700\u540e\u4e22\u8fdb $vector$ \u5373\u53ef \u3002\n\n\u4f46\u5012\u5e8f\u5b58\u653e\u8fd8\u6709\u4e00\u4e2a\u95ee\u9898~~\u56e0\u4e3a\u8fd9\u6211\u4eec\u8c03\u4e86\u4e24\u4e2a\u949f\u5934~~ \uff0c \u5408\u5e76\u65f6**\u4e0d\u80fd**\u4ece $v.begin()$ \u5f00\u59cb\u4ece\u5927\u5230\u5c0f\u6392 \uff0c\u8981\u4ece $v.end()$ \u5f00\u59cb\u4ece\u5c0f\u5230\u5927\u6392\uff0c\u6700\u540e $reverse$ \u4e00\u4e0b \u3002 \u81f3\u4e8e\u4e3a\u4ec0\u4e48\u8bf7\u8bfb\u8005\u81ea\u884c\u601d\u8003 \uff0c \u6a21\u62df\u4e00\u4e0b\u5c31\u77e5\u9053\u4e86 \u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 \uff1a \u7531\u4e8e\u4e00\u4e2a\u533a\u95f4\u6700\u591a\u88ab\u5206\u6210\u4e09\u4e2a , \u4e3a $O(nlog_3^2n)$ .\n\n\u4ee3\u7801\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint n,m,a[400000],b[400000],c[400000],st0[400000][20],st1[400000][20],lo[400000];\nstruct arr\n{\n\tint x,y;\n};\nvector<arr> v[400000],t,up[400000][4];\nbool cmp(arr x,arr y)\n{\n\treturn y.x<x.x;\n}\nint find0(int l,int r)\n{\n\tint len=lo[r-l+1];\n\tif(c[st0[l][len]]<c[st0[r-(1<<len)+1][len]]) return st0[l][len];\n\treturn st0[r-(1<<len)+1][len];\n}\nint find1(int l,int r)\n{\n\tint len=lo[r-l+1];\n\tif(b[st1[l][len]]<b[st1[r-(1<<len)+1][len]]) return st1[l][len];\n\treturn st1[r-(1<<len)+1][len];\n}\nvoid update(int m,int n,int bo)\n{\n\tif(!bo)\n\t{\n\t\tswap(v[m],up[m][n]);\n\t\treturn;\n\t}\n\tt.clear();\n\tint l=v[m].size()-1,r=up[m][n].size()-1;\n\twhile(r+l>-2)\n\t{\n\t\tif(l<0) t.push_back(up[m][n][r--]);\n\t\t\telse if(r<0) t.push_back(v[m][l--]);\n\t\t\t\telse if(cmp(v[m][l],up[m][n][r])) t.push_back(up[m][n][r--]);\n\t\t\t\t\telse t.push_back(v[m][l--]);\n\t}\n\treverse(t.begin(),t.end());\n\tswap(t,v[m]);\n}\nvoid solve(int x,int y)\n{\n\tint cnt=0;\n\tv[++m].clear();\n\tint l0=x>>1,r0=y>>1,l1=(x+1)>>1,r1=(y+1)>>1,p,q,pp,qq;\n\tif(!(x&1))\n\t{\n\t\tp=find0(l0,min(r0,r1-1));\n\t\tq=find1(p+1,r1);\n\t\tqq=(q<<1)-1;\n\t\tpp=p<<1;\n\t}\n\telse\n\t{\n\t\tq=find1(l1,min(r1,r0));\n\t\tp=find0(q,r0);\n\t\tpp=p<<1;\n\t\tqq=(q<<1)-1;\n\t\tswap(p,q);\n\t\tswap(pp,qq);\n\t}\n\tif(pp>x)\n\t{\n\t\tsolve(x,pp-1);\n\t\tswap(up[m][++cnt],v[m+1]);\n\t}\n\tif(qq>pp+1)\n\t{\n\t\tsolve(pp+1,qq-1);\n\t\tswap(up[m][++cnt],v[m+1]);\n\t}\n\tif(qq<y)\n\t{\n\t\tsolve(qq+1,y);\n\t\tswap(up[m][++cnt],v[m+1]);\n\t}\n\tif(cnt==1) update(m,1,0);\n\telse\n\t{\n\t\tif(cnt==2)\n\t\t{\n\t\t\tif(up[m][1].size()<up[m][2].size()) swap(up[m][1],up[m][2]);\n\t\t\tupdate(m,1,0);\n\t\t\tupdate(m,2,1);\n\t\t}\n\t\telse\n\t\tif(cnt==3)\n\t\t{\n\t\t\tif(up[m][1].size()<up[m][2].size()) swap(up[m][1],up[m][2]);\n\t\t\tif(up[m][1].size()<up[m][3].size()) swap(up[m][1],up[m][3]);\n\t\t\tupdate(m,1,0);\n\t\t\tupdate(m,2,1);\n\t\t\tupdate(m,3,1);\n\t\t}\n\t}\n\tif(!(x&1)) v[m--].push_back({c[p],b[q]}); else v[m--].push_back({b[p],c[q]});\n}\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++) scanf(\"%d\",&a[i]);\n\tn>>=1;\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tst1[i][0]=st0[i][0]=i;\n\t\tb[i]=a[(i<<1)-1];\n\t\tc[i]=a[i<<1];\n\t}\n\tfor(int i=2;i<=n;i++) lo[i]=lo[i>>1]+1;\n\tfor(int i=1;i<=lo[n];i++)\n\t\tfor(int j=1;j+(1<<i)<=n+1;j++)\n\t\t{\n\t\t\tif(c[st0[j][i-1]]<c[st0[j+(1<<(i-1))][i-1]]) st0[j][i]=st0[j][i-1];\n\t\t\t\telse st0[j][i]=st0[j+(1<<(i-1))][i-1];\n\t\t\tif(b[st1[j][i-1]]<b[st1[j+(1<<(i-1))][i-1]]) st1[j][i]=st1[j][i-1];\n\t\t\t\telse st1[j][i]=st1[j+(1<<(i-1))][i-1];\n\t\t}\n\tsolve(1,n<<1);\n\tfor(int i=v[1].size()-1;i>=0;i--) printf(\"%d %d \",v[1][i].x,v[1][i].y);\n\treturn 0;\n}\n```\n",
        "postTime": 1608191144,
        "uid": 112921,
        "name": "zhimao",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT2688 \u3010[ARC080C] Young Maids\u3011"
    },
    {
        "content": "### P.S.\n\u63d0\u4f9b\u4e00\u4e2a $O(n\\log n)$ \u7684\u505a\u6cd5\u3002  \n~~\u539f\u9898\u4e0d\u662f\u6211\u641c\u51fa\u6765\u7684\u554a/px~~  \n### Discription.\n\u7ed9\u5b9a\u4e00\u4e2a\u5e8f\u5217\uff0c\u4f60\u53ef\u4ee5\u53d6\u51fa\u8fde\u7eed\u7684\u4e24\u4e2a\u5143\u7d20\uff0c\u5e76\u628a\u5b83\u4eec **\u6309\u987a\u5e8f** \u653e\u5230\u7b54\u6848\u5e8f\u5217\u4e2d\u3002  \n\u73b0\u5728 **\u5012\u5e8f** \u904d\u5386\u8fd9\u4e2a\u5e8f\u5217\uff0c\u5e76\u95ee\u7b54\u6848\u5e8f\u5217\u7684\u6700\u5c0f\u5b57\u5178\u5e8f\u662f\u591a\u5c11\u3002  \n### Solution.\n\u6211\u4eec\u624b\u6a21\u5c0f\u6570\u636e\uff0c\u6211\u4eec\u7b2c\u4e00\u6b65\u80fd\u53d6\u7684\u4e1c\u897f\u80af\u5b9a\u662f\u4e24\u4e2a\u5947\u5076\u6027\u4e0d\u540c\u7684\u4f4d\u7f6e\u3002  \n\u7b2c\u4e8c\u6b65\u80fd\u53d6\u7684\u4e1c\u897f\u4ecd\u7136\u662f\u4e24\u4e2a\u5947\u5076\u6027\u4e0d\u540c\u7684\u4f4d\u7f6e\uff0c\u4f46\u662f\u4e0d\u80fd\u88ab\u7b2c\u4e00\u6b21\u9009\u7684\u4f4d\u7f6e\u5206\u5f00\u3002  \n\u89c2\u5bdf\u8fd9\u4e2a\u4e1c\u897f\uff0c\u5b83\u662f\u53ef\u4ee5\u5206\u6cbb\u7684\uff01  \n\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5206\u6cbb\uff0c~~\u6bcf\u6b21\u8fed\u4ee3\u89c4\u6a21\u51cf\u534a~~\uff0c\u6bcf\u4e2a\u4f4d\u7f6e\u53ea\u4f1a\u53d6\u4e00\u6b21\uff0c\u90a3\u4e48\u5b83\u662f $O(n)$ \u7684\u3002  \n\u7136\u540e\u6211\u4eec\u5c31\u9700\u8981\u8003\u8651\u5982\u4f55\u5feb\u901f\u5904\u7406\u51fa\u6bcf\u6b21\u8fed\u4ee3\u65f6\u6700\u4f18\u9009\u90a3\u4e24\u4e2a\u6570\u3002  \n\u89c2\u5bdf\u4e00\u6ce2\u6837\u4f8b\u6211\u4eec\u5c31\u4f1a\u53d1\u73b0\u6bcf\u6b21\u9009\u7684\u80af\u5b9a\u6ee1\u8db3\u5de6\u8fb9\u662f\u533a\u95f4\u6700\u5927\u503c\u3002  \n\u7136\u540e\u6211\u4eec\u5c31\u9700\u8981\u4e00\u4e2a\u652f\u6301\u533a\u95f4\u67e5\u8be2\u6700\u5927\u503c\u4f4d\u7f6e\u7684\u6570\u636e\u7ed3\u6784\uff0c\u663e\u7136\u7ebf\u6bb5\u6811\uff08  \n\u5bf9\u4e8e\u5947\u5076\u5206\u522b\u5efa\u4e24\u9897\u7ebf\u6bb5\u6811\uff0c\u7136\u540e\u76f4\u63a5\u5206\u7c7b\u8ba8\u8bba\u5c31\u597d\u4e86\u3002  \n\n\u5f53\u524d\u6211\u4eec\u7684\u4ee3\u7801\u5982\u4e0b\uff1a\n```\ninline void solve(int l,int r)\n{\n\tif(l>r) return;\n\tint wh1=query(l&1,1,1,n,l,r).wh,wh2=query((l&1)^1,1,1,n,wh1+1,r).wh;\n\trs[++rt]=make_pair(a[wh1],a[wh2]),solve(l,wh1-1),solve(wh1+1,wh2-1),solve(wh2+1,r);\n}\n```\n\u7ed3\u679c\u4f60\u4f1a\u53d1\u73b0\u8fc7\u4e0d\u4e86\u8fd9\u4e2a\u6837\u4f8b\n```\n6\n6 1 2 5 3 4\n```\n\u6211\u4eec\u521a\u5f00\u59cb\u80af\u5b9a\u5148\u9009 $[1,4]$ \u7136\u540e\u7b2c\u4e8c\u6b65\u4f1a\u9009 $[2,3]$\uff0c\u7b2c\u4e09\u6b65\u4f1a\u9009 $[5,6]$\u3002  \n\u663e\u7136\u6709\u66f4\u5c0f\u7684\u5148\u9009 $[1,4]\\rightarrow[5,6]\\rightarrow[2,3]$ \u7684\u65b9\u6848\u3002  \n\u51fa\u9519\u539f\u56e0\uff1a\u8003\u8651\u7684\u65f6\u5019\u5b83\u5206\u6210\u7684\u51e0\u4e2a\u5b50\u533a\u95f4\u662f\u53ef\u4ee5\u4efb\u610f\u987a\u5e8f\u6392\u5e03\u7684\u3002  \n\n\u6211\u4eec\u53d1\u73b0\uff0c\u6240\u6709\u7684\u533a\u95f4\u5173\u7cfb\u663e\u7136\u4f1a\u6784\u6210\u4e00\u68f5\u6811\uff0c\u7136\u540e\u5728\u8fd9\u68f5\u6811\u4e0a `Topo\u6392\u5e8f` \u5c31\u597d\u4e86\u3002\n\n\u590d\u6742\u5ea6 $O(n\\log n)$\n### Coding.\n```\n//\u613f\u4f60\u548c\u4f60\u91cd\u8981\u7684\u4eba\u80fd\u591f\u518d\u6b21\u91cd\u9022\uff01\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate<typename T>inline void read(T &x)\n{\n\tx=0;char c=getchar(),f=0;\n\tfor(;c<'0'||c>'9';c=getchar()) if(!(c^45)) f=1;\n\tfor(;c>='0'&&c<='9';c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tif(f) x=-x;\n}\nstruct node{int vl,wh;}t[2][800005];pair<int,int>rs[200005];int rt;\nint n,a[200005],b[200005];const int INF=(int)0x3f3f3f3f3f3f3f3f;\nstruct edge{int to,nxt;}e[400005];int et,head[200005],deg[200005];\ninline void adde(int x,int y) {if(x&&y) e[++et]=(edge){y,head[x]},head[x]=et,deg[y]++;}\ninline node operator+(node a,node b) {if(a.vl<b.vl) return a;else return b;}\ninline void build(int ID,int x,int l,int r)\n{\n\tif(l==r) return(void)(t[ID][x].vl=b[l],t[ID][x].wh=l);\n\tbuild(ID,x<<1,l,(l+r)>>1),build(ID,x<<1|1,((l+r)>>1)+1,r),t[ID][x]=t[ID][x<<1]+t[ID][x<<1|1];\n}\ninline node query(int ID,int x,int l,int r,int dl,int dr)\n{\n\tif(l>dr||dl>r) return(node){INF,0};else if(dl<=l&&r<=dr) return t[ID][x];\n\treturn query(ID,x<<1,l,(l+r)>>1,dl,dr)+query(ID,x<<1|1,((l+r)>>1)+1,r,dl,dr);\n}\ninline int solve(int l,int r)\n{\n\tif(l>r) return 0;\n\tint wh1=query(l&1,1,1,n,l,r).wh,wh2=query((l&1)^1,1,1,n,wh1+1,r).wh;\n\tint nw=++rt;adde(nw,solve(l,wh1-1)),adde(nw,solve(wh1+1,wh2-1)),adde(nw,solve(wh2+1,r));\n\treturn rs[nw]=make_pair(a[wh1],a[wh2]),nw;\n}\ninline void topo()\n{\n\tpriority_queue<pair<pair<int,int>,int>,vector<pair<pair<int,int>,int> >,greater<pair<pair<int,int>,int> > >q;\n\tfor(int i=1;i<=rt;i++) if(!deg[i]) q.push(make_pair(rs[i],i));\n\twhile(!q.empty())\n\t{\n\t\tint x=q.top().second;printf(\"%d %d \",q.top().first.first,q.top().first.second),q.pop();\n\t\tfor(int i=head[x];i;i=e[i].nxt) if(!--deg[e[i].to]) q.push(make_pair(rs[e[i].to],e[i].to));\n\t}\n}\nint main()\n{\n\tread(n);for(int i=1;i<=n;i++) read(a[i]);\n\tmemset(b,0x3f,sizeof(b));for(int i=1;i<=n;++++i) b[i]=a[i];build(1,1,1,n);\n\tmemset(b,0x3f,sizeof(b));for(int i=2;i<=n;++++i) b[i]=a[i];build(0,1,1,n);\n\treturn solve(1,n),topo(),putchar('\\n'),0;\n}\n```",
        "postTime": 1606446196,
        "uid": 44805,
        "name": "Leap_Frog",
        "ccfLevel": 7,
        "title": "AT2688 [ARC080C] Young Maids\uff08\u9898\u89e3\uff09"
    },
    {
        "content": "\u63d0\u4f9b\u4e00\u79cdST\u8868\u52a0\u6811\u72b6\u6570\u7ec4\u7684\u5199\u6cd5\u3002\n\n\uff08\u7136\u800c\u6211\u4eba\u50bb\u5e38\u6570\u5927\uff09\n\n## \u3010\u601d\u8def\u3011\n\u7531\u4e8e\u6211\u4eec\u8981\u4f7f\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u53c8\u8981\u4e0d\u65ad\u53d6\u51fa\u4e24\u4e2a\u6254\u5728\u6700\u524d\u9762\uff0c\u5f88\u96be\u53d7\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u9006\u63a8\uff0c\u7136\u540e\u8d2a\u5fc3\uff0c\u6bcf\u6b21\u53d6\u51fa\u4e24\u4e2a\u201c\u53ef\u4ee5\u53d6\u7684\u201d\uff08\u5373\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u79cd\u5e8f\u5217\u4f7f\u5f97\u8fd9\u4e24\u4e2a\u6570\u88ab\u6700\u540e\u53d6\uff09\uff0c\u4f7f\u5f97\u5b57\u5178\u5e8f\u6700\u5c0f\u7684\u4e24\u4e2a\u6570\u3002\n\n\u8bf4\u7684\u5bb9\u6613\uff0c\u95ee\u9898\u662f\u600e\u4e48\u5224\u65ad\u4e24\u4e2a\u6570\u662f\u201c\u53ef\u4ee5\u53d6\u7684\u201d\u5462\uff1f\n\n~~\u5176\u5b9e\u4f60\u4f1a\u53d1\u73b0\u8fd9\u4e2a\u4e1c\u897f\u5f88\u50cf\u4e00\u4e2a\u62ec\u53f7\u5339\u914d\u3002~~\n\n\u6211\u4eec\u5148\u5047\u5b9a\u521d\u59cb\u533a\u95f4\u4e3a $[l, r]$\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u4f60\u53d6\u51fa\u4e24\u4e2a\u6570 $u, v$ \u4e4b\u540e\u4f1a\u628a\u6574\u4e2a\u5e8f\u5217\u5212\u5206\u6210\u4e09\u4e2a\u533a\u95f4 $[l, u-1], [u+1, v-1], [v+1,r]$ \u3002\n\n\u663e\u7136\u6b64\u65f6\u63a5\u4e0b\u6765\u53d6\u7684\u6240\u6709\u6570\u5bf9\u90fd\u5fc5\u987b\u5c5e\u4e8e **\u540c\u4e00\u533a\u95f4**\u3002\n\n\u539f\u56e0\u5728\u4e8e\uff0c\u5982\u679c\u987a\u5e8f\u6765\u53d6\uff0c\u6bcf\u6b21\u53d6\u7684\u4e24\u4e2a\u6570\u90fd\u662f\u76f8\u90bb\u7684\uff0c\u800c\u5b9e\u9645\u4e0a\uff0c\u540e\u88ab\u53d6\u8d70\u4e24\u4e2a\u6570 **\u5728\u771f\u5b9e\u987a\u5e8f\u4e0a** \u6bd4\u73b0\u5728\u53d6\u8d70\u7684\u4e24\u4e2a\u88ab\u53d6\u8d70\u7684\u66f4\u65e9\uff0c\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec **\u9006\u63a8\u4e2d** \u5b83\u4eec\u5728\u8fd9\u4e2a\u72b6\u6001\u4e4b\u540e\u5fc5\u7136\u662f\u76f8\u90bb\u7684\uff01\n\n\u90a3\u4e48\u663e\u7136\uff0c\u5269\u4e0b\u6765\u4e09\u4e2a\u533a\u95f4\u5fc5\u7136\u957f\u5ea6\u90fd\u4e3a\u5076\u6570\u3002\n\n\u7531\u4e8e\u663e\u7136\u80fd\u627e\u5230\u4e00\u79cd\u65b9\u6cd5\u53d6\u5b8c\u4e00\u4e2a\u957f\u5ea6\u4e3a\u5076\u6570\u7684\u533a\u95f4\uff0c\u6211\u4eec\u5fc5\u5b9a\u80fd\u6784\u9020\u51fa\u4e00\u79cd\u65b9\u6848\u4f7f\u5f97\u67d0\u4e00\u65f6\u523b\uff0c$u, v$ \u8fd9\u4e24\u4e2a\u6570\u76f8\u90bb\u3002\n\n\u7136\u540e\u3002\u3002\u3002\u4f3c\u4e4e\u5c31\u5f88\u597d\u505a\u4e86\u3002\n\n\u6211\u4eec\u9996\u5148\u8981\u6c42 $u-1-l+1=u-l$ \u4e3a\u5076\u6570\u3002\n\n\u90a3\u4e48\u3002\u3002\u3002 $l, u$ \u5947\u5076\u6027\u5fc5\u7136\u76f8\u540c\u3002\n\n\u6240\u4ee5\u6211\u4eec\u8003\u8651\u628a\u6570\u503c\u5206\u4e3a\u5947\u5076\u4e24\u7c7b\uff0c\u7528\u4e00\u4e2a **ST\u8868** \u7ef4\u62a4\u4e0b\u6807\u4e3a\u5947\u6570\u7684\u6700\u5c0f\u503c\u4e0e\u4e0b\u6807\u4e3a\u5076\u6570\u7684\u6700\u5c0f\u503c\u3002\n\n\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4\uff0c\u6211\u4eec\u90fd\u8003\u8651\u6309\u7167\u4e0a\u9762\u7684\u65b9\u6cd5\u53d6\u51fa\u4e24\u4e2a\u6570\u7136\u540e\u5206\u88c2\u51fa $3$ \u4e2a\u5c0f\u533a\u95f4\u3002\n\n\u6bcf\u4e00\u6b21\u53d6\u51fa\u4e00\u4e2a\u533a\u95f4\uff0c\u7136\u540e\u901a\u8fc7\u8fd9\u4e2a\u533a\u95f4\u7684 $u$ \u8ba1\u7b97\u51fa\u5bf9\u5e94\u7684 $v$ \uff0c\u7136\u540e\u5206\u88c2\u51fa $3$ \u4e2a\u533a\u95f4\uff0c\u5224\u65ad\u8fd9\u4e9b\u533a\u95f4\u6709\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u7136\u540e\u628a\u6ca1\u8bbf\u95ee\u8fc7\u7684\u538b\u5230\u5806\u91cc\u9762\u5373\u53ef\u3002\n\n\u7531\u4e8e\u6bcf\u4e00\u4e2a\u533a\u95f4\u7684 $l$ \u5947\u5076\u6027\u786e\u5b9a\uff0c $u, v$ \u5947\u5076\u6027\u4e5f\u90fd\u662f\u786e\u5b9a\u7684\u3002\n\n\u6700\u540e\uff0c\u4e00\u4e2a\u533a\u95f4\u662f\u5426\u8bbf\u95ee\u8fc7\u53ef\u4ee5\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\uff0c\u7136\u800c\u6211\u4eba\u50bb\u5e38\u6570\u5927\u3002\n\n\u590d\u6742\u5ea6\u5e94\u8be5\u662f $O(nlogn)$ \u7684\u3002\n\n## \u3010\u4ee3\u7801\u3011\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define getchar() printf(\"I am a cheater!I AK IOI!%c\", 10)\ntypedef long long LL;\ntemplate <typename T>\ninline void read(T &x){\n    x = 0;int fu = 1;\n    char c = getchar();\n    while(c > 57 || c < 48){\n        if(c == 45) fu = -1;\n        c = getchar();\n    }\n    while(c <= 57 && c >= 48){\n        x = (x << 3) + (x << 1) + c - 48;\n        c = getchar();\n    }\n    x *= fu;\n}\ntemplate <typename T>\ninline void fprint(T x){\n    if(x < 0) putchar(45), x = -x;\n    if(x > 9) fprint(x / 10);\n    putchar(x % 10 + 48);\n}\ntemplate <typename T>\ninline void fprint(T x, char ch){\n    fprint(x);putchar(ch);\n}\ninline char next_char(){\n    char ch = getchar();\n    while(ch == 9 || ch == 10 || ch == 32) ch = getchar();\n    return ch;\n}\n\n#define MAXN 200005\nint n, a[MAXN];\nint ev[MAXN][25], od[MAXN][25];\n\ninline int mn(int x, int y){\n    if(a[x] > a[y]) return y;\n    return x;\n}\n\ninline int query(int l, int r){\n    int k = log2(r - l + 1);\n    if((l & 1)) return mn(od[l][k], od[r - (1 << k) + 1][k]);\n    else return mn(ev[l][k], ev[r - (1 << k) + 1][k]);\n}\n\nstruct Inter{\n    int l, r;\n    Inter (int tmp1, int tmp2) : l(tmp1), r(tmp2){}\n    inline bool operator < (const Inter &b) const{\n        return a[query(l, r)] > a[query(b.l, b.r)];\n    }\n};\n\npriority_queue <Inter> q;\nint c[MAXN];\ninline int lowbit(int x){return x & -x;}\ninline void modify(int x){for (;x <= n;x += lowbit(x)) c[x] ++;}\ninline int Query(int x){int ret = 0;for (;x;x -= lowbit(x)) ret += c[x];return ret;}\nint main(){\n    read(n);\n    for (register int i = 1;i <= n;i ++) read(a[i]);\n    for (register int i = 1;i <= n;i ++){\n        if(i & 1) od[i][0] = i;\n        else ev[i][0] = i;\n    }\n    a[0] = 0x3f3f3f3f;\n    for (register int i = 1;i <= 20;i ++){\n        for (register int j = 1;j + (1 << i) - 1 <= n;j ++){\n            od[j][i] = mn(od[j][i - 1], od[j + (1 << (i - 1))][i - 1]);\n            ev[j][i] = mn(ev[j][i - 1], ev[j + (1 << (i - 1))][i - 1]);\n        }\n    }\n    q.push(Inter(1, n));\n    while(!q.empty()){\n        Inter x = q.top();\n        q.pop();\n        int pos = query(x.l, x.r);\n        int rr = query(pos + 1, x.r);\n        fprint(a[pos], 32);fprint(a[rr], 32);\n        modify(pos);modify(rr);\n        if(pos - 1 >= x.l && !(Query(pos - 1) - Query(x.l - 1))) q.push(Inter(x.l, pos - 1));\n        if(pos + 1 <= rr - 1 && !(Query(rr - 1) - Query(pos))) q.push(Inter(pos + 1, rr - 1));\n        if(rr + 1 <= x.r && !(Query(x.r) - Query(rr))) q.push(Inter(rr + 1, x.r));\n    }\n    putchar(10);\n}\n```",
        "postTime": 1605268910,
        "uid": 66511,
        "name": "DPair",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT2688 \u3010[ARC080C] Young Maids\u3011"
    },
    {
        "content": "\u7531\u4e8e\u5b57\u5178\u5e8f\u5927\u5c0f\u662f\u4ece\u524d\u5f80\u540e\u51b3\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u8003\u8651\u4ece\u524d\u5f80\u540e\u786e\u5b9a\u8fd9\u4e2a\u5e8f\u5217\uff0c\u4e5f\u5c31\u662f\u5c06\u9898\u610f\u4e2d\u7684\u8fc7\u7a0b\u5012\u7740\u505a\u3002\n\n\u6211\u4eec\u8003\u8651\u5728\u67d0\u4e00\u72b6\u6001\u4e0b\uff0c\u9009\u62e9\u7684\u4e24\u4e2a\u6570\u5728\u539f\u5e8f\u5217\u4e2d\u662f$p_l,p_r$\uff0c\u90a3\u4e48\u518d\u6b21\u4e4b\u524d\u7684\u9009\u62e9\u4e2d\uff0c\u4e0d\u53ef\u80fd\u51fa\u73b0\u9009\u62e9\u7684\u6570\u4e3a$p_{a_l},p_{a_r}$\u4f7f\u5f97$a_l<l<a_r$\u6216$a_l<r<a_r$\u3002\n\n\u4e8e\u662f\u6211\u4eec\u53d1\u73b0\u5012\u7740\u8003\u8651\u662f\uff0c\u9009\u62e9$p_l,p_r$\u65f6\u5c31\u662f\u628a\u5e8f\u5217\u5206\u6210\u4e86$[1,l-1],[l+1,r-1],[r+1,n]$\u8fd9$3$\u6bb5\uff0c\u8fd9$3$\u6bb5\u76f8\u4e92\u72ec\u7acb\u3002\n\n\u6211\u4eec\u8003\u8651\u600e\u6837\u7684$<l,r>$\u662f\u5408\u6cd5\u7684\u3002\u663e\u7136\u5c31\u662f$[1,l-1],[l+1,r-1],[r+1,n]$\u957f\u5ea6\u5747\u4e3a\u5076\u6570\u65f6\uff08\u53ef\u80fd\u4e3a\u7a7a\uff09\u3002\n\n\u6240\u4ee5$l$\u4e00\u5b9a\u4e3a\u5947\u6570\uff0c$r$\u4e00\u5b9a\u4e3a\u5076\u6570\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u7ef4\u62a4\u51fa$p$\u4e2d\u5947\u6570\u4f4d\u4e8e\u5076\u6570\u4f4d\u7684\u6700\u5c0f\u503c\uff0c\u5e76\u7528\u4e00\u4e2a\u5c0f\u6839\u5806\u7ef4\u62a4\u6bcf\u4e00\u4e2a$[l,r]$\u7684\u6700\u5c0f\u503c\u5373\u53ef\uff0c\u6bcf\u6b21\u9009\u62e9\u540e\u5c06$[l,r]$\u5206\u6210$3$\u6bb5\u91cd\u65b0\u653e\u5165\u5806\u4e2d\u3002\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\n// \u8bfb\u5165\u8f93\u51fa\u4f18\u5316\u7565\u53bb\n\nconst int maxn = 200005;\nconst int inf = 0x3f3f3f3f;\n\nint n;\nint xx[maxn]; // \u9898\u610f\u4e2d\u7684p\n\n#define ls(x) (x << 1)\n#define rs(x) (x << 1 | 1)\n\nstruct Tree\n{\n    struct Node\n    {\n        int jx, ox; // \u5947\u6570\u4f4d\u7684\u6700\u5c0f\u503c\u4e0e\u5076\u6570\u4f4d\u7684\u6700\u5c0f\u503c\n    } no[maxn << 2];\n\n    int k;\n\n    inline int minn(int a, int b)\n    {\n        if (!a || !b)\n            return a | b;\n        else\n            return xx[a] < xx[b] ? a : b;\n    }\n\n    inline void push_up(int k)\n    {\n        no[k].jx = minn(no[ls(k)].jx, no[rs(k)].jx);\n        no[k].ox = minn(no[ls(k)].ox, no[rs(k)].ox);\n    }\n\n    inline void build_tree(int n)\n    {\n        for (k = 1; k <= n; k <<= 1);\n        for (int i = 1; i <= n; ++i)\n        {\n            if (i & 1)\n                no[i + k].jx = i;\n            else\n                no[i + k].ox = i;\n        }\n        for (int i = k; i; --i)\n            push_up(i);\n    }\n\n    inline int query(int l, int r, int kk)\n    {\n        int ans = 0;\n        for (l += k - 1, r += k + 1; l ^ r ^ 1; l >>= 1, r >>= 1)\n        {\n            if (~l & 1)\n                ans = minn(kk ? no[l ^ 1].jx : no[l ^ 1].ox, ans);\n            if (r & 1)\n                ans = minn(kk ? no[r ^ 1].jx : no[r ^ 1].ox, ans);\n        }\n        return ans;\n    }\n} tr;\n\nstruct QJ\n{\n    int l, r, ansl, ansr; // \u73b0\u5728\u53ef\u9009\u533a\u95f4\u4e3a[l,r]\uff0c\u6700\u4f18\u662f\u9009\u62e9p[l]\u548cp[r]\n\n    friend bool operator < (QJ a, QJ b)\n    {\n        return xx[a.ansl] > xx[b.ansl];\n    }\n\n    QJ (int l, int r)\n    {\n        this->l = l;\n        this->r = r;\n        this->ansl = tr.query(l, r, 1);\n        this->ansr = tr.query(ansl + 1, r, 0);\n    }\n};\n\npriority_queue<QJ> q;\n\nint main()\n{\n    read(n);\n    for (int i = 1; i <= n; ++i)\n        read(xx[i]);\n    tr.build_tree(n);\n    q.push(QJ(1, n));\n    while (!q.empty())\n    {\n        QJ now = q.top();\n        q.pop();\n        writesp(xx[now.ansl]);\n        writesp(xx[now.ansr]);\n        if (now.ansl + 1 < now.ansr - 1)\n            q.push(QJ(now.ansl + 1, now.ansr - 1));\n        if (now.l < now.ansl - 1)\n            q.push(QJ(now.l, now.ansl - 1));\n        if (now.ansr + 1 < now.r)\n            q.push(QJ(now.ansr + 1, now.r));\n    }\n    return 0;\n}\n```",
        "postTime": 1555206997,
        "uid": 84088,
        "name": "pufanyi",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT2688 \u3010Young Maids\u3011"
    },
    {
        "content": "$$\\huge\\rm [ARC080C]Young~Maids$$\n\n$$\\large\\text{\u2014\u2014}~The~~Solution~~Written~~by~~CCA~\\text{\u2014\u2014}$$\n\n---\n\n$$\\LARGE\\mathcal{Description}$$\n\n$\\quad$\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $n$ \u7684\u6392\u5217 $P$ \uff0c\u6bcf\u6b21\u53ef\u4ee5\u4ece $P$ \u4e2d\u9009\u53d6\u4e24\u4e2a\u76f8\u90bb\u7684\u6574\u6570 $x,y$ \uff0c\u5c06 $x,y$ \u63a5\u5728\u53e6\u4e00\u4e2a\u521d\u59cb\u4e3a\u7a7a\u7684\u6570\u5217 $Q$ \u7684\u5f00\u5934\uff0c\u8981\u6c42\u7ecf\u8fc7 $\\dfrac{n}{2}$ \u6b21\u64cd\u4f5c\u540e\uff0c$Q$ \u7684\u5b57\u5178\u5e8f\u6700\u5c0f\uff0c\u6c42\u51fa\u8fd9\u4e2a\u5b57\u5178\u5e8f\u6700\u5c0f\u7684 $Q$ \u3002\n\n$\\quad n\\leqslant 2\\times 10^5 ~\\&~ n\\equiv 0\\pmod 2$\n\n---\n\n$$\\LARGE\\mathcal{Solution}$$\n\n$\\quad$\u8003\u8651\u5012\u7740\u53d6\uff0c\u6bcf\u6b21\u53d6\u80fd\u53d6\u7684\u6570\u4e2d\u6700\u5c0f\u7684 \u3002\n\n$\\quad$\u5982\u679c\u5012\u7740\u53d6\u4e86 $x,y$ \uff0c\u90a3\u4e48\u4f1a\u5c06\u73b0\u5728\u7684\u5e8f\u5217\u5206\u6210\u4e09\u6bb5\uff0c\u5206\u522b\u662f $[L,x-1],[x+1,y-1]\u548c[y+1,R]$ \uff0c\u4e14\u6bcf\u4e00\u6bb5\u90fd\u662f\u4e00\u4e2a\u5b50\u95ee\u9898\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u9012\u5f52\u6c42\u89e3 \u3002\n\n$\\quad$\u518d\u8003\u8651\u5bf9\u4e8e\u4efb\u610f\u4e00\u4e2a\u5e8f\u5217\uff0c\u80fd\u591f\u53d6\u7684\u4f4d\u7f6e\u6709\u54ea\u4e9b\uff0c\u663e\u7136\u53d6\u5b8c\u4ee5\u540e\u4e09\u4e2a\u5b50\u533a\u95f4\u7684\u957f\u5ea6\u90fd\u5fc5\u987b\u4e3a\u6574\u6570\uff0c\u4e8e\u662f $x$ \u7684\u4f4d\u7f6e\u5fc5\u987b\u662f\u5947\u6570\uff0c$y$ \u7684\u4f4d\u7f6e\u5fc5\u987b\u662f\u5076\u6570 \u3002\n\n$\\quad$\u4e8e\u662f\u5c31\u53ea\u9700\u8981\u7ef4\u62a4\u4e00\u9897\u53ef\u4ee5\u6c42\u9759\u6001\u533a\u95f4\u6700\u5c0f\u503c\u7684\u7ebf\u6bb5\u6811\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7ef4\u62a4\u56db\u5143\u7ec4 $[L,R,x,y]$ \u7684\u4f18\u5148\u961f\u5217\uff0c\u6bcf\u6b21\u4ece\u5806\u4e2d\u627e\u5230 $x$ \u6700\u5c0f\u7684\u5e8f\u5217\uff0c\u5206\u6210\u4e09\u6bb5\u540e\u518d\u653e\u56de\u53bb\u5373\u53ef \u3002\n\n---\n\n$$\\LARGE\\mathcal{Code}$$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nconst int N = 2e5 + 10;\nconst int INF = 0x7fffffff;\n\nint n, p[N], id[N], q[N], a[N], cnt;\n\nstruct Node {\n    int L, R, x, y;\n    bool operator < (const Node &a) const {\n        return p[a.x] < p[x];\n}   };\n\npriority_queue <Node> Q;\n\nstruct Segment_Tree {\n    #define LS (p << 1)\n    #define RS (p << 1 | 1)\n    int Min[N << 2], l[N << 2], r[N << 2];\n    void Build (int p, int L, int R) {\n        l[p] = L, r[p] = R;\n        if(L == R) { Min[p] = a[L]; return; }\n        int mid = (L + R) >> 1;\n        Build(LS, L, mid), Build(RS, mid + 1, R);\n        Min[p] = min(Min[LS], Min[RS]);\n    }\n    int Query (int p, int L, int R) {\n        if(l[p] >= L && r[p] <= R) return Min[p];\n        int ans = INF;\n        if(r[LS] >= L) ans = min(ans, Query(LS, L, R));\n        if(l[RS] <= R) ans = min(ans, Query(RS, L, R));\n        return ans;\n    }\n}T[2];\n\npair <int, int> Cut (int L, int R) {\n    pair <int, int> Ans;\n    Ans.first = id[T[L & 1].Query(1, L, R)];\n    Ans.second = id[T[R & 1].Query(1, Ans.first + 1, R)];\n    return Ans;\n}\n\nint main () {\n\n    scanf(\"%d\", &n);\n    for(int i = 1; i <= n; i++)\n        scanf(\"%d\", &p[i]), id[p[i]] = i;\n\n    for(int i = 1; i <= n; i++) a[i] = i & 1 ? INF : p[i];\n    T[0].Build(1, 1, n);\n    for(int i = 1; i <= n; i++) a[i] = i & 1 ? p[i] : INF;\n    T[1].Build(1, 1, n);\n    \n    pair <int, int> Sta = Cut(1, n);\n    Q.push(Node{1, n, Sta.first, Sta.second});\n    while(!Q.empty()) {\n        Node u = Q.top(); Q.pop();\n        q[++cnt] = p[u.x], q[++cnt] = p[u.y];\n        if(u.L < u.x - 1) {\n            pair <int, int> v = Cut(u.L, u.x - 1);\n            Q.push(Node{u.L, u.x - 1, v.first, v.second});\n        }\n        if(u.x + 1 < u.y - 1) {\n            pair <int, int> v = Cut(u.x + 1, u.y - 1);\n            Q.push(Node{u.x + 1, u.y - 1, v.first, v.second});\n        }\n        if(u.y + 1 < u.R) {\n            pair <int, int> v = Cut(u.y + 1, u.R);\n            Q.push(Node{u.y + 1, u.R, v.first, v.second});\n        }\n    }\n\n    for(int i = 1; i <= cnt; i++) printf(\"%d \", q[i]);\n\n    return 0;\n}\n```\n",
        "postTime": 1606482017,
        "uid": 78645,
        "name": "C\u3000C\u3000A",
        "ccfLevel": 6,
        "title": "\u9898\u89e3 AT2688 \u3010[ARC080C] Young Maids\u3011"
    }
]