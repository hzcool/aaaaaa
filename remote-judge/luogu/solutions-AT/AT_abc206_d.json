[
    {
        "content": "\u89c2\u5bdf\u5230\u5982\u679c $ A_i $ \u4e0e $ A_{N-i+1} $ \u4e0d\u76f8\u540c\u7684\u8bdd\uff0c\u90a3\u4e48\u5fc5\u987b\u8981\u628a\u5b83\u4eec\u4fee\u6539\u4e3a\u76f8\u540c\u7684\u6570\u5b57\u3002\n\n\u4e8e\u662f\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u6ee1\u8db3 $ A_i $ \u4e0e $ A_{N-i+1} $ \u4e0d\u76f8\u540c\u7684 $ i $\uff0c\u5728 $ A_i $ \u4e0e $ A_{N-i+1} $ \u4e4b\u95f4\u5efa\u8fb9\u3002\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5355\u4e2a\u8fde\u901a\u5757\u5185\u9700\u8981\u7684\u4fee\u6539\u6b21\u6570\uff0c\u8fd9\u663e\u7136\u7b49\u4e8e\u8fde\u901a\u5757\u7684\u5927\u5c0f $ -1 $\uff0c\u56e0\u6b64\u6bcf\u4e2a\u8fde\u901a\u5757\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662f $ -1 $\u3002\n\n\u56e0\u6b64\u95ee\u9898\u8f6c\u5316\u4e3a $ A $ \u4e2d\u4e0d\u540c\u6570\u5b57\u7684\u4e2a\u6570\u51cf\u53bb\u8fde\u901a\u5757\u6570\uff0c\u8fd9\u4e2a\u53ef\u4ee5\u76f4\u63a5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $ \\mathcal{O}(n\\log{n}) $\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nconst int maxn=2e5+10;\nconst int mod=1e18;\nint n,q,u,v,c;\nchar op;\nstruct Splay\n{\n    int ch[maxn][2],fa[maxn],siz[maxn],val[maxn],sum[maxn],add[maxn],mul[maxn],rev[maxn];\n    void clear(int x)\n    {\n        ch[x][0]=ch[x][1]=fa[x]=siz[x]=val[x]=sum[x]=add[x]=rev[x]=0;\n        mul[x]=1;\n    }\n    int getch(int x)\n    {\n        return (ch[fa[x]][1]==x);\n    }\n    int isroot(int x)\n    {\n        clear(0);\n        return ch[fa[x]][0]!=x&&ch[fa[x]][1]!=x;\n    }\n    void maintain(int x)\n    {\n        clear(0);\n        siz[x]=(siz[ch[x][0]]+1+siz[ch[x][1]])%mod;\n        sum[x]=(sum[ch[x][0]]+val[x]+sum[ch[x][1]])%mod;\n    }\n    void pushdown(int x)\n    {\n        clear(0);\n        if(mul[x]!=1)\n        {\n            if(ch[x][0])\n            mul[ch[x][0]]=(mul[x]*mul[ch[x][0]])%mod,val[ch[x][0]]=(val[ch[x][0]]*mul[x])%mod,sum[ch[x][0]]=(sum[ch[x][0]]*mul[x])%mod,add[ch[x][0]]=(add[ch[x][0]]*mul[x])%mod;\n            if(ch[x][1])\n            mul[ch[x][1]]=(mul[x]*mul[ch[x][1]])%mod,val[ch[x][1]]=(val[ch[x][1]]*mul[x])%mod,sum[ch[x][1]]=(sum[ch[x][1]]*mul[x])%mod,add[ch[x][1]]=(add[ch[x][1]]*mul[x])%mod;\n            mul[x]=1;\n        }\n        if(add[x])\n        {\n            if(ch[x][0])\n            add[ch[x][0]]=(add[ch[x][0]]+add[x])%mod,val[ch[x][0]]=(val[ch[x][0]]+add[x])%mod,sum[ch[x][0]]=(sum[ch[x][0]]+add[x]*siz[ch[x][0]])%mod;\n            if(ch[x][1])\n            add[ch[x][1]]=(add[ch[x][1]]+add[x])%mod,val[ch[x][1]]=(val[ch[x][1]]+add[x])%mod,sum[ch[x][1]]=(sum[ch[x][1]]+add[x]*siz[ch[x][1]])%mod;\n            add[x]=0;\n        }\n        if(rev[x])\n        {\n            if(ch[x][0])\n            rev[ch[x][0]]^=1,swap(ch[ch[x][0]][0],ch[ch[x][0]][1]);\n            if(ch[x][1])\n            rev[ch[x][1]]^=1,swap(ch[ch[x][1]][0],ch[ch[x][1]][1]);\n            rev[x]=0;\n        }\n    }\n    void update(int x)\n    {\n        if(!isroot(x))\n        update(fa[x]);\n        pushdown(x);\n    }\n    void rotate(int x)\n    {\n        int y=fa[x],z=fa[y],chx=getch(x),chy=getch(y);\n        fa[x]=z;\n        if(!isroot(y))\n        ch[z][chy]=x;\n        ch[y][chx]=ch[x][chx^1];\n        fa[ch[x][chx^1]]=y;\n        ch[x][chx^1]=y;\n        fa[y]=x;\n        maintain(y);\n        maintain(x);\n        maintain(z);\n    }\n    void splay(int x)\n    {\n        update(x);\n        for(int f=fa[x];f=fa[x],!isroot(x);rotate(x))\n        if(!isroot(f))\n        rotate(getch(x)==getch(f)?f:x);\n    }\n    void access(int x)\n    {\n        for(int f=0;x;f=x,x=fa[x])\n        splay(x),ch[x][1]=f,maintain(x);\n    }\n    void makeroot(int x)\n    {\n        access(x);\n        splay(x);\n        swap(ch[x][0],ch[x][1]);\n        rev[x]^=1;\n    }\n    int find(int x)\n    {\n        access(x);\n        splay(x);\n        while(ch[x][0])\n        x=ch[x][0];\n        splay(x);\n        return x;\n    }\n    void final_mul(int u,int v,int c)\n    {\n    makeroot(u), access(v), splay(v);\n      val[v] = val[v] * c % mod;\n      sum[v] = sum[v] * c % mod;\n      mul[v] = mul[v] * c % mod;\n    }\n    void final_add(int u,int v,int c)\n    {\n    makeroot(u), access(v), splay(v);\n      val[v] = (val[v] + c) % mod;\n      sum[v] = (sum[v] + siz[v] * c % mod) % mod;\n      add[v] = (add[v] + c) % mod;\n    }\n    int query1(int u,int v)\n    {\n    makeroot(u), access(v), splay(v);\n    return sum[v];\n    }\n    void link(int u,int v)\n    {\n    if (find(u) != find(v)) \n    makeroot(u), fa[u] = v;\n    }\n    void cut(int u,int v)\n    {\n    makeroot(u);\n      access(v);\n      splay(v);\n      if (ch[v][0] == u && !ch[u][1]) \n      ch[v][0] = fa[u] = 0;\n    }\n    bool query2(int u,int v)\n    {\n    return find(u) == find(v);\n    }\n}st;\nint find(int x)\n{\nreturn st.find(x);\n}\nvoid merge(int u,int v)\n{\nst.link(u,v);\n}\nint a[2000020];\nset<int>p;\nbitset<2000020>vis,vis2;\nsigned main()\n{\ncin>>n;\nif(n==1)\n{\ncout<<0;\nreturn 0;\n}\nfor(int i=1;i<=n;i++)\ncin>>a[i],p.insert(a[i]),st.clear(i),st.maintain(i),st.splay(i);\nfor(int i=1;i<=n/2;i++)\nif(a[i]!=a[n-i+1])\nst.link(a[i],a[n-i+1]);\nint ans=0;\nfor(int i=1;i<=n;i++)\nif(!vis[st.find(a[i])])\nvis[st.find(a[i])]=1,ans++;\ncout<<p.size()-ans;\n}\n```\n",
        "postTime": 1667268178,
        "uid": 714821,
        "name": "loser_seele",
        "ccfLevel": 4,
        "title": "ABC206D\u9898\u89e3"
    }
]