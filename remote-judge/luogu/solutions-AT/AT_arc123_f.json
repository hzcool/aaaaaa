[
    {
        "content": "\u6211\u4eec\u8003\u8651\u4e0d\u4f7f\u7528\u6570\u6765\u523b\u753b\u8fd9\u4e2a\u4e1c\u897f\uff0c\u800c\u662f\u4f7f\u7528\u4e00\u4e2a\u7cfb\u6570\u5bf9\u6765\u523b\u753b\u8fd9\u4e2a\u4e1c\u897f\uff0c\u5373 $(x, y)$ \u8868\u793a $ax+by$\u3002\u90a3\u4e48\u6211\u4eec\u76f8\u5f53\u4e8e\u662f\u521d\u59cb\u6709 $(1, 0), (0, 1)$\uff0c\u6bcf\u6b21\u76f8\u90bb\u7684\u4e24\u4e2a\u4e8c\u5143\u7ec4\u5bf9\u5e94\u4f4d\u7f6e\u76f8\u52a0\uff0c\u5373 $(a, b), (a+c, b+d), (c, d)$\u3002\n\n\u53d1\u73b0\u8fd9\u4e2a\u8fc7\u7a0b\u4e0e Stern-Brocot \u6811\u7684\u6784\u5efa\u8fc7\u7a0b\u662f\u4e00\u6a21\u4e00\u6837\u7684\uff0c\u90a3\u4e48\u6211\u4eec\u5176\u5b9e\u5c31\u662f\u8981\u627e Stern-Brocot \u6811\u4e0a\u6ee1\u8db3 $ax+by \\le n$ \u7684 $\\frac{y}{x}$ \u4e2d\u524d $[L, R]$ \u5927\u7684\u6570\u3002\n\n\u6c42\u524d $[L, R]$ \u5927\u7684\u95ee\u9898\u662f\u6bd4\u8f83\u7ecf\u5178\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u627e\u51fa\u7b2c $L$ \u5927\u7684\uff0c\u7136\u540e\u518d\u9012\u63a8\u627e\u51fa $[L, R]$ \u5927\u7684\u3002\u653e\u5728 Stern-Brocot \u6811\u4e0a\uff0c\u5c31\u662f\u5148\u627e\u51fa\u7b2c $L$ \u5927\u7684\u8282\u70b9\u4f4d\u7f6e\uff0c\u7136\u540e\u63a5\u7740\u5728\u6811\u4e0a DFS \u627e\u51fa $[L, R]$ \u5927\u7684\u6570\u3002\u7531\u4e8e Stern-Brocot \u6811\u9ad8 $O(n)$\uff0c\u90a3\u4e48\u6211\u4eec\u6700\u591a\u53ea\u4f1a\u7ecf\u8fc7 $O(n)$ \u4e2a\u65e0\u7528\u8282\u70b9\uff0c\u5176\u4ed6\u8bbf\u95ee\u5230\u7684\u8282\u70b9\u5fc5\u5b9a\u662f\u4e00\u4e2a\u7b54\u6848\uff0c\u6240\u4ee5\u8fd9\u90e8\u5206\u7684\u590d\u6742\u5ea6\u4e3a $O(R - L + n)$\u3002\n\n\u6211\u4eec\u8003\u8651\u5982\u4f55\u627e\u7b2c $L$ \u5927\u7684\u8282\u70b9\u3002\u6211\u4eec\u53ef\u4ee5\u5728 Stern-Brocot \u6811\u4e0a\u4e8c\u5206\uff0c\u90a3\u4e48\u6211\u4eec\u53ea\u9700\u8981\u5feb\u901f\u6c42\u5f97\u6bcf\u4e2a\u5b50\u6811\u6709\u591a\u5c11\u8282\u70b9\u5373\u53ef\u3002\n\n\u90a3\u4e48\u6211\u4eec\u9700\u8981\u89e3\u51b3\u7684\u95ee\u9898\u4e3a\uff1a\n\n> \u6c42\u6709\u591a\u5c11\u5bf9 $(x, y)$\uff0c\u6ee1\u8db3\uff1a\n> - $\\gcd(x, y) = 1$\uff1b\n> - $ax+by \\le n$\uff1b\n\n$\\gcd(x, y) = 1$ \u7684\u9650\u5236\u663e\u7136\u53ef\u4ee5\u83ab\u53cd\u641e\u6389\uff0c\u7b80\u5355\u63a8\u5f0f\u5b50\u53ef\u4ee5\u5f97\u5230\u7b54\u6848\u4e3a\uff1a\n\n$$\\sum_{d=1}^n\\mu(d)\\sum_{i=1}^{\\lfloor\\frac{n}{da}\\rfloor}\\lfloor\\frac{\\lfloor\\frac nd\\rfloor-ia}{b}\\rfloor$$\n\n\u6570\u8bba\u5206\u5757\u5957\u7c7b\u6b27\u53ef\u4ee5\u505a\u5230 $O(\\sqrt n \\log n)$ \u8ba1\u7b97\u3002\n\n\u7136\u540e\u6211\u4eec\u5c31\u8dd1\u5373\u53ef\u3002\u6ce8\u610f Stern-Brocot \u6811\u4e0a\u8df3\u76f8\u540c\u65b9\u5411\u7684\u94fe\u65f6\u9700\u8981\u500d\u589e\u8df3\uff0c\u7531\u4e8e Stern-Brocot \u7684\u94fe\u6df1\u5ea6\u662f $O(\\log \\max\\{a, b\\})$ \u7684\uff0c\u90a3\u4e48\u603b\u590d\u6742\u5ea6\u5c31\u662f $O(n + \\sqrt{n} \\log^3 n)$\u3002\n\n\u7c7b\u6b27\u5b9e\u5728\u4e0d\u60f3\u81ea\u5df1\u5199\u4e86\uff0c\u8d3a\u4e86\u4e00\u4efd atcoder \u7684\u677f\u5b50\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 300005;\nint a, b, n;\nlong long l, r;\nint mu[MAXN];\nint pri[MAXN], vis[MAXN], pcnt;\nlong long f[MAXN];\n\nnamespace atcoder {\n    namespace internal {\n        // @param m `1 <= m`\n        // @return x mod m\n        constexpr long long safe_mod(long long x, long long m) {\n            x %= m;\n            if (x < 0) x += m;\n            return x;\n        }\n        // @param n `n < 2^32`\n        // @param m `1 <= m < 2^32`\n        // @return sum_{i=0}^{n-1} floor((ai + b) / m) (mod 2^64)\n        unsigned long long floor_sum_unsigned(unsigned long long n,\n                                              unsigned long long m,\n                                              unsigned long long a,\n                                              unsigned long long b) {\n            unsigned long long ans = 0;\n            while (true) {\n                if (a >= m) {\n                    ans += n * (n - 1) / 2 * (a / m);\n                    a %= m;\n                }\n                if (b >= m) {\n                    ans += n * (b / m);\n                    b %= m;\n                }\n\n                unsigned long long y_max = a * n + b;\n                if (y_max < m) break;\n                n = (unsigned long long)(y_max / m);\n                b = (unsigned long long)(y_max % m);\n                std::swap(m, a);\n            }\n            return ans;\n        }\n    }\n    long long floor_sum(long long n, long long m, long long a, long long b) {\n        assert(0 <= n && n < (1LL << 32));\n        assert(1 <= m && m < (1LL << 32));\n        unsigned long long ans = 0;\n        if (a < 0) {\n            unsigned long long a2 = internal::safe_mod(a, m);\n            ans -= 1ULL * n * (n - 1) / 2 * ((a2 - a) / m);\n            a = a2;\n        }\n        if (b < 0) {\n            unsigned long long b2 = internal::safe_mod(b, m);\n            ans -= 1ULL * n * ((b2 - b) / m);\n            b = b2;\n        }\n        return ans + internal::floor_sum_unsigned(n, m, a, b);\n    }\n}\nlong long count(long long a, long long b) {\n    long long ans = 0;\n    for (int l = 1, r; l <= n; l = r + 1) {\n        r = n / (n / l);\n        if (n / l < a + b) break;\n        ans += (mu[r] - mu[l - 1]) * atcoder::floor_sum(n / l / a, b, -a, n / l - a);\n    }\n    return ans;\n}\nvector<int> ans;\ntypedef pair<long long, long long> fraction;\nfraction operator+(fraction x, fraction y) {\n    return { x.first + y.first, x.second + y.second };\n}\nfraction operator*(long long x, fraction y) {\n    return { x * y.first, x * y.second };\n}\nlong long calc(fraction x) {\n    return 1ll * a * x.first + 1ll * b * x.second;\n}\nvoid insert(fraction x) {\n    ans.push_back(calc(x));\n}\nvoid solve2(fraction x, fraction y, long long l, long long r) {\n    if (ans.size() >= r - l + 1) return;\n    long long mid = calc(x + y);\n    if (mid > n) return;\n    solve2(x, x + y, l, r);\n    if (ans.size() < r - l + 1) {\n        insert(x + y);\n    }\n    solve2(x + y, y, l, r);\n}\nvoid solve1(fraction x, fraction y, long long l, long long r) {\n    if (ans.size() >= r - l + 1) return;\n    long long a = calc(x), b = calc(y), mid = calc(x + y);\n    if (mid > n) return;\n    long long cnt = count(calc(x), mid) + 1;\n    if (l == cnt) {\n        insert(x + y);\n        solve2(x + y, y, l, r);\n        return;\n    } else if (l < cnt) {\n        int dep = 0;\n        for (int i = 20; i >= 0; i--) {\n            if (l < count(a, calc((dep + (1 << i)) * x + y)) + 1) {\n                dep += (1 << i);\n            }\n        }\n        solve1(x, dep * x + y, l, r);\n        for (int i = dep; i >= 1; i--) {\n            if (ans.size() < r - l + 1) {\n                insert(i * x + y);\n                solve2(i * x + y, (i - 1) * x + y, l, r);\n            } else break;\n        }\n    } else {\n        int dep = 0;\n        long long tot = count(a, b);\n        for (int i = 20; i >= 0; i--) {\n            if (tot - l + 1 < count(calc(x + (dep + (1 << i)) * y), b) + 1) {\n                dep += (1 << i);\n            }\n        }\n        cnt = tot - count(calc(x + dep * y), b);\n        solve1(x + dep * y, y, l - cnt, r - cnt);\n    }\n}\nint main() {\n    scanf(\"%d%d%d%lld%lld\", &a, &b, &n, &l, &r);\n    mu[1] = 1;\n    for (int i = 2; i <= n; i++) {\n        if (!vis[i]) {\n            pri[++pcnt] = i;\n            mu[i] = -1;\n        }\n        for (int j = 1; j <= pcnt && i * pri[j] <= n; j++) {\n            vis[i * pri[j]] = 1;\n            if (i % pri[j] == 0) {\n                break;\n            } else {\n                mu[i * pri[j]] = -mu[i];\n            }\n        }\n        mu[i] += mu[i - 1];\n    }\n    long long cnt = count(a, b);\n    if (l != cnt + 2 && r != 1) {\n        solve1({ 1, 0 }, { 0, 1 }, max(l - 1, 1ll), min(r - 1, cnt));\n    }\n    if (l == 1) printf(\"%d \", a);\n    for (int i : ans) {\n        printf(\"%d \", i);\n    }\n    if (r == cnt + 2) printf(\"%d \", b);\n    printf(\"\\n\");\n    return 0;\n}\n```",
        "postTime": 1680008183,
        "uid": 279652,
        "name": "APJifengc",
        "ccfLevel": 9,
        "title": "\u300c\u89e3\u9898\u62a5\u544a\u300dARC123F Insert Addition"
    },
    {
        "content": "\u7b2c\u4e8c\u5341\u7bc7\u9898\u89e3\uff0c\u7b2c\u4e94\u5341\u9053\u9ed1\u9898\uff0c\u6d1b\u8c37\u7684 AT \u9898\u5e93\u65b0\u642c\u7684\u9898\u90fd\u8bc4\u7684\u597d\u9ad8\u554a\uff0c\u5df2\u7ecf\u767d\u8d5a\u516b\u9053\u9ed1\u9898\u4e86\u3002\n\n\u633a\u795e\u5947\u7684\u4e00\u9053\u9898\uff0c\u89c1\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\u8fd8\u662f\u6691\u5047 accoders \u7684\u591a\u6821\u8054\u8bad\u3002\n\n\u5148\u8003\u8651\u6700\u6734\u7d20\u7684\u66b4\u529b\uff1a\n\n```\nvoid dfs(int a,int b){\n\tif(a+b<=n){\n\t\tdfs(a,a+b);\n\t\t++ct;if(ct>r)return;\n\t\tif(ct>=l)qw(a+b,' ');\n\t\tdfs(a+b,b);\n\t}\n}\n```\n\n\u4f46\u8fd9\u4e2a\u7b97\u6cd5\u663e\u7136\u4f1a T \u98de\uff0c\u7ecf\u8ba1\u7b97\u5361\u6ee1\u65f6\u5e8f\u5217 $b$ \u7684\u957f\u5ea6\u4f1a\u8fbe\u5230\u8fd1 $3 \\times 10^{10}$ ~~\u4f46\u5728 accoders \u4e0a\u9a97\u4e86 80 \u5206~~\u3002\n\n\u53d1\u73b0\u6700\u7ec8 $b$ \u6570\u7ec4\u4e2d\u7684\u6bcf\u4e2a\u5143\u7d20\u90fd\u662f\u5f62\u5982 $pa + qb$ \u7684\u5f62\u5f0f\uff0c\u7528 $(p,q)$ \u8868\u793a\u4e00\u4e2a\u6570\uff0c\u90a3\u4e48\u521d\u59cb\u7684\u5e8f\u5217\u5c31\u662f $\\{(1,0),(0,1)\\}$\uff0c\u6700\u7ec8\u751f\u6210\u7684\u5e8f\u5217\u5c31\u662f\u4e2a\u7c7b\u4f3c SB-tree \u7684\u4e1c\u897f\u3002\n\n\u8fd9\u4e2a\u5176\u5b9e\u662f\u6d4b\u8bd5\u524d\u4e00\u5929\u8054\u8bad\u8bb2\u8bfe\u521a\u8bb2\u7684\u4e1c\u897f\uff0c\u4f46\u90a3\u65f6\u5019\u6211\u663e\u7136\u662f\u6ca1\u8ba4\u771f\u542c\u8bfe\u3002\n\nSB-tree \u6709\u4e00\u4e2a\u5f88\u795e\u5947\u7684\u6027\u8d28\uff0c\u90a3\u5c31\u662f\u5b83\u4f1a\u904d\u5386\u6240\u6709\u6ee1\u8db3 $\\gcd(p,q) = 1$ \u7684\u70b9\u5bf9 $(p,q)$\u3002\u90a3\u4e48\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u4f18\u5316\u6734\u7d20\u7684 dfs \u7b97\u6cd5\uff0c\u5982\u679c\u53d1\u73b0\u5f53\u524d\u8fd9\u4e2a\u51fd\u6570\u4f1a\u904d\u5386\u5230\u7684\u5143\u7d20\u4e2a\u6570 $x$ \u6ee1\u8db3 $x + ct < l$\uff0c\u90a3\u4e48\u76f4\u63a5 $ct \\leftarrow x + ct$ \u5e76\u8df3\u8fc7\u8fd9\u4e00\u6bb5\u3002\n\n```\nvoid dfs(int a,int b){\n    int x;\n    if(a+b<=n){\n        x=num(a,a+b);\n        if(ct+x>=l)dfs(a,a+b);\n        else ct+=x;\n        ++ct;if(ct>r)return;\n        if(ct>=l){\n            qw(a+b,' ');\n            prtans(a+b,b);\n            return;\n        }dfs(a+b,b);\n    }\n}\n```\n\n\u5176\u4e2d $num(a,b)$ \u5373\u4e3a\u8ba1\u7b97 $x$ \u7684\u51fd\u6570\uff0c**\u4e0d\u7b97 $a,b$ \u672c\u8eab**\u3002\n\n\u90a3\u4e48 $num$ \u51fd\u6570\u8be5\u600e\u4e48\u5b9e\u73b0\u5462\uff1f\u5229\u7528\u4e0a\u9762 SB-tree \u7684\u6027\u8d28\uff0c\u5b83\u5176\u5b9e\u5c31\u662f\n\n$$\n\\sum\\limits_{i \\in N^*}\\sum\\limits_{i \\in N^*}[\\gcd(i,j)=1][ia + jb \\le n]\n$$\n\n\u90a3\u4e48\u8fd9\u662f\u4e2a\u5178\u578b\u7684\u83ab\u53cd\uff0c\u5b83\u53ef\u4ee5\u53d8\u4e3a\n\n$$\n\\sum\\limits_{d=1}^n\\mu(d)F(a,b,\\lfloor \\dfrac{n}{d} \\rfloor)\n$$\n\n\u5176\u4e2d $F(a,b,n)$ \u5373\u4e3a\u53bb\u6389\u4e92\u8d28\u9650\u5236\u7684\u503c\uff0c\u90a3\u4e48\u663e\u7136\u6709\n\n$$ \nF(a,b,n) = \\sum\\limits_{i=1}^{\\lfloor \\frac na \\rfloor}\\lfloor \\dfrac{n - ai}b \\rfloor\n$$\n\n\u8ba1\u7b97\u4e00\u6b21\u7684\u590d\u6742\u5ea6\u4e0d\u592a\u597d\u7b97\uff0c\u4f46\u770b\u4f3c\u6ca1\u4ec0\u4e48\u95ee\u9898\u7684\uff0c\u5e76\u4e14 accoders \u4e0a\u4e5f\u8fc7\u4e86\uff0c\u4f46\u662f\u4ea4\u5230 AT \u4e0a\u53d1\u73b0 TLE x1\u3002\n\n\u5f53\u65f6\u5c31\u6ca1\u7ba1\u4e86\uff0c\u73b0\u5728\u7a81\u7136\u53c8\u770b\u5230\u4e86\u8fd9\u9898\uff0c\u70b9\u8fdb\u63d0\u4ea4\u8bb0\u5f55\u8be6\u60c5\uff0c\u53d1\u73b0 T \u7684\u90a3\u4e2a\u70b9\u53eb```04_ab_small_04.txt```\u3002\u90a3\u65e2\u7136\u662f $a,b$ \u8f83\u5c0f\u65f6 T \u4e86\uff0c\u90a3\u5c31\u9020\u51e0\u4e2a\u8bd5\u4e00\u8bd5\u3002\n\n\u4e00\u756a\u5c1d\u8bd5\u540e\u53d1\u73b0\u4e86\u4e00\u4e2a\u6570\u636e\uff1a\n\n```\n1 1 300000\n2 2\n```\n\n\u8fd9\u4e2a\u6570\u636e\u4f1a\u5bfc\u81f4 dfs \u50cf\u4e0b\u9762\u8fd9\u6837\u9012\u5f52\uff1a\n\n```dfs(1,1) -> dfs(1,2) -> dfs(1,3) -> dfs(1,4) ->...```\n\n\u800c\u6bcf\u6b21\u90fd\u4f1a\u6c42\u4e00\u6b21 $num$\uff0c\u7136\u540e\u5c31 T \u4e0a\u5929\u4e86\u3002\n\n\u5176\u5b9e\u6bcf\u6b21\u6c42\u7684\u65f6\u5019\u5224\u4e00\u4e0b\u5982\u679c $x<y$ \u5c31\u4ea4\u6362 $x,y$\uff0c\u6bcf\u6b21\u679a\u4e3e $\\lfloor \\dfrac n{\\max(a,b)} \\rfloor$ \u5c31\u5728 AT \u4e0a AC \u4e86\uff0c\u4f46\u90a3\u65f6\u5019\u6211\u6ca1\u60f3\u5230\uff0c\u800c\u4e14\u6539\u8fc7\u6765\u4e86\u8fd8\u662f\u8fc7\u4e0d\u4e86\u6211\u7684 hack\uff0c\u6211\u5728 AT \u7684\u63d0\u4ea4\u8bb0\u5f55\u4e0a\u627e\u4e86\u51e0\u4e2a AC \u4ee3\u7801\uff0c\u4e5f\u90fd T \u98de\u4e86\u3002\n\n\u90a3\u4e48\u4e0b\u9762\u91cd\u70b9\u5f00\u59cb\uff1a\u6211\u627e\u5230\u4e86[\u4e00\u4e2a\u4eba\u7684\u4ee3\u7801](https://atcoder.jp/contests/arc123/submissions/33797114)\uff0c\u53d1\u73b0\u5b83\u6ca1 T\uff0c\u4ed4\u7ec6\u89c2\u5bdf\u4e86\u4e00\u4e0b\uff0c\u53d1\u73b0\u4ed6\u539f\u6765\u662f\u4f18\u5316\u4e86\u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\n\u4ed6\u7684\u5185\u90e8\u5b9e\u73b0\u4e0e\u524d\u9762\u7684\u601d\u8def\u4e0d\u592a\u4e00\u6837\uff0c\u4ed6\u4e0d\u662f\u8df3\u8fc7\u6ca1\u6709\u5728\u8303\u56f4\u5185\u7684\uff0c\u800c\u662f\u5148\u627e\u5230\u7b2c $l$ \u4e2a\uff0c\u518d\u8fdb\u884c\u9012\u5f52\u6c42\u89e3\u3002\n\n\u9996\u5148\u9700\u8981\u627e\u5230\u7b2c $l$ \u4e2a\u7684\u4f4d\u7f6e\uff0c\u8bbe\u5b83\u662f\u7531 $x + y$ \u5f97\u5230\u7684\uff0c\u90a3\u4e48\u4e0b\u9762\u4ece $(a,b)$ \u5f00\u59cb\uff0c\u4e0d\u65ad\u8fdb\u884c\u5982\u4e0b\u64cd\u4f5c\uff1a\n\n1. \u5982\u679c $num(a,a+b) = l$\uff0c\u90a3\u4e48\u5c31\u627e\u5230\u4e86\uff0c\u76f4\u63a5\u9000\u51fa\u3002\n1. \u5982\u679c $num(a,a+b) > l$\uff0c\u90a3\u4e48 $b \\leftarrow a+b$\u3002\n1. \u5982\u679c $num(a,a+b) < l$\uff0c\u90a3\u4e48 $a \\leftarrow a+b$\u3002\n\n\u4f46\u662f\u8fd9\u6837\u5176\u5b9e\u8fd8\u662f T \u98de\u7684\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u8fc7\u7a0b\u4e0e\u524d\u9762\u7684 dfs \u7c7b\u4f3c\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u628a\u8fde\u7eed\u7684 2 \u64cd\u4f5c\u548c 3 \u64cd\u4f5c\u5408\u5e76\uff0c\u590d\u6742\u5ea6\u5c31\u6709\u4fdd\u8bc1\u4e86\u3002\n\n\u90a3\u4e48\u4e0a\u9762\u7684\u64cd\u4f5c\u5c31\u53d8\u6210\uff08\u4ee5\u64cd\u4f5c 2 \u4e3a\u4f8b\uff0c\u64cd\u4f5c 3 \u7c7b\u4f3c\uff09\uff1a\n\n- \u5982\u679c $num(a,a+b) > l$\uff0c\u90a3\u4e48 $b \\leftarrow ka+b$\uff0c\u5176\u4e2d $k$ \u4e3a\u6700\u5927\u7684\u6ee1\u8db3 $num(a,ka+b) > l$ \u7684 $k$\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u5c31\u663e\u7136\u53ef\u4ee5\u500d\u589e\u4e86\uff0c\u4ece\u9ad8\u5230\u4f4e\u8003\u8651\u6bcf\u4e2a $2^i$\uff0c\u8003\u8651\u80fd\u4e0d\u80fd $k \\leftarrow k + 2^i$\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c 3\uff0c\u7531\u4e8e\u4e0d\u53d8\u7684\u662f\u53f3\u8fb9\u7684\uff0c\u6240\u4ee5\u9700\u8981\u5148 $l \\leftarrow num(a,b)-l$\uff0c\u7136\u540e\u8fd8\u662f\u50cf\u64cd\u4f5c 2 \u4e00\u6837\uff0c\u6700\u540e\u518d $l \\leftarrow num(a,b) - l$\uff0c\u6ce8\u610f\u6b64\u65f6\u662f\u65b0\u7684 $a,b$\u3002\u90a3\u4e2a\u4eba\u8fd9\u91cc\u7528\u4e86\u4e2a\u5f88\u5947\u602a\u7684\u5b9e\u73b0\u65b9\u5f0f\uff0c\u6211\u770b\u4e0d\u592a\u61c2\uff0c\u8fd9\u662f\u6211\u7684\u5b9e\u73b0\u65b9\u5f0f\u3002\n\n\u4f46\u8fd9\u65f6\uff0c\u6709\u7684\u806a\u660e\u7684\u5c0f\u670b\u53cb\u53ef\u80fd\u5c31\u4f1a\u6709\u7591\u95ee\uff1a\u5982\u679c\u4e0d\u505c\u5730\u5de6\u53f3\u5de6\u53f3\uff0c\u4e5f\u5c31\u662f```(a,b)->(a+b,b)->(a+b,a+2b)->(2a+3b,a+2b)->...```\uff0c\u90a3\u4e0d\u8fd8\u662f\u5f97\u8981\u6bcf\u6b21\u4e00\u4e2a\u4e2a\u8df3\u5417\uff1f\n\n\u4f46\u5176\u5b9e\u5982\u679c\u8fd9\u6837\u7684\u8bdd\u5e76\u4e0d\u4f1a\u8d70\u5f88\u591a\u5c42\u5c31\u8d85\u8fc7 $n$ \u4e86\uff0c\u53ea\u6709\u5728 $a,b$ \u4e2d\u6709\u4e00\u4e2a\u5f88\u5c0f\u4e14\u4e0d\u505c\u5730\u52a0\u5b83\u624d\u4f1a\u9012\u63a8\u5f88\u591a\u5c42\u3002\n\n\u627e\u5230\u7b2c $l$ \u4e2a\u540e\uff0c\u5148\u8f93\u51fa $a + b$\uff0c\u7136\u540e\u518d\u5f00\u59cb $dfs(a+b,b)$\u3002\n\n\u4f46\u6b64\u65f6\u7684 $dfs$ \u8fd8\u9700\u8981\u8003\u8651\u904d\u5386\u5b8c\u8fd9\u4e2a\u5b50\u6811\u540e\u63a8\u51fa\u4e0b\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u8fd9\u91cc\u6211\u4e5f\u6ca1\u592a\u770b\u61c2\u90a3\u4e2a\u4eba\u7684\u5b9e\u73b0~~\u603b\u4e4b\u5c31\u662f\u9664\u4e86\u500d\u589e\u4f18\u5316\u7684\u601d\u60f3\u4ee5\u5916\u5565\u90fd\u6ca1\u770b\u61c2~~\uff0c\u6211\u662f\u8fd9\u4e48\u5b9e\u73b0\u7684\uff1a\n\n\u77e5\u9053\u4e86\u5f53\u524d\u7684 $x,y$\uff0c\u600e\u4e48\u63a8\u51fa\u904d\u5386\u5b8c\u540e\u7684\u4e0b\u4e00\u4e2a\u5462\uff1f\u90a3\u4e48\u8fdb\u884c\u4e00\u4e2a\u5206\u8ba8\uff1a\n\n1. \u5982\u679c $x<y$\uff0c\u90a3\u4e48\u5b83\u7684\u4e0a\u4e00\u7ea7\u4e00\u5b9a\u662f $(x,y-x)$\uff0c\u4e0b\u4e00\u4e2a\u662f $y-x$\u3002\n1. \u5982\u679c $x>y$\uff0c\u90a3\u4e48\u5b83\u7684\u4e0a\u4e00\u7ea7\u4e00\u5b9a\u662f $(x-y,y)$\uff0c\u518d\u770b $(x-y,y)$ \u7684\u4e0b\u4e00\u4e2a\u5373\u53ef\u3002\n\n\u90a3\u4e48\u7b2c\u4e8c\u79cd\u60c5\u51b5\u4e0d\u65ad\u91cd\u590d\u5176\u5b9e\u6700\u540e\u5c31\u662f $x \\bmod y$\uff0c\u6240\u4ee5\u6700\u7ec8\u7684\u7b54\u6848\u5c31\u662f $y - x \\bmod y$\u3002\u4f46\u8fd9\u53ea\u662f\u4e0b\u4e00\u4e2a\u5b50\u6811\u7684\u4e24\u4e2a\u201c\u6839\u201d\uff0c\u6240\u4ee5\u8fd8\u9700\u8981\u4e0d\u65ad\u5730 $b \\leftarrow a+b$ \u76f4\u5230\u518d\u64cd\u4f5c\u4f1a\u5bfc\u81f4 $b > n$\u3002\n\n\u4ee3\u7801\uff1a\n```\n#include<cstdio>\n#define TY ll\n#define MAXN 300002\n#define debug if( 0 &&putchar('>'))\n#define FOR(i,a,b) for(TY i=(a);i<=(b);++i)\n#define fOR(i,a,b) for(TY i=(a);i<(b);++i)\n#define ROF(i,a,b) for(TY i=(a);i>=(b);--i)\n#define rOF(i,a,b) for(TY i=(a);i>(b);--i)\nusing namespace std;\ntypedef long long ll;\nconst TY M=998244353;\ntypedef unsigned long long ull;\nTY _abs(TY a){return a<0?-a:a;}\nTY maxn(TY a,TY b){return a>b?a:b;}\nTY minn(TY a,TY b){return a<b?a:b;}\nTY gcd(TY a,TY b){return b?gcd(b,a%b):a;}\nTY qp(TY a,TY b){TY ans=1;do{if(b&1)ans=ans*a%M;a=a*a%M;}while(b>>=1);return ans;}\nchar getc(){char ch=getchar();while(ch==' '||ch=='\\n')ch=getchar();return ch;}\nTY qr(){\n\tchar ch=getchar();TY s=0,x=1;\n\tfor(;ch<'0'||ch>'9';ch=getchar())if(ch=='-')x=-1;\n\tfor(;ch>='0'&&ch<='9';ch=getchar())s=s*10+ch-'0';return x*s;\n}void qw(TY a,char ch){\n\tif(a<0){a=-a;putchar('-');}\n\tif(a>9)qw(a/10,0);putchar(a%10+'0');\n\tif(ch)putchar(ch);\n}TY miu[MAXN],prm[MAXN],a,b,cnt,n,l,r,x,ct=2;bool out[MAXN];\nTY count(TY a,TY b,TY n){//\u5373\u4e0a\u6587\u7684 F(a,b,n)\n\tTY m=n/a,ans=0;\n\tFOR(i,1,m){n-=a;ans+=n/b;}\n\treturn ans;\n}TY num(TY x,TY y){//\u83ab\u53cd\u6c42\u201c\u5b50\u6811\u201d\u5927\u5c0f\n\tTY p=1,ans=0;\n\tfor(;p*p<=n;++p)ans+=(miu[p]-miu[p-1])*count(x,y,n/p);--p;\n\tROF(i,n/p-1,1)ans+=(miu[n/i]-miu[n/(i+1)])*count(x,y,i);\n\treturn ans;\n}void prtans(TY a,TY b){//dfs\u8f93\u51fa\u7b54\u6848\n\tdebug{qw(ct,' ');qw(r,' ');qw(a,' ');qw(b,'\\n');}\n\tif(a+b<=n){//\u6b63\u5e38\u7684 dfs\n\t\tprtans(a,a+b);if(ct>=r)return;\n\t\tct=-~ct;qw(a+b,' ');\n\t\tif(ct>=r)return;prtans(a+b,b);\n\t\tif(ct>=r)return;\n\t}ct=-~ct;qw(b,' ');\n\tif(ct>=r)return;TY x=b-a%b;\n\tprtans(b,x+(n-x)/b*b);//\u8fd8\u6709\u5269\u4e0b\u7684\u503c\uff0c\u627e\u5230\u4e0b\u4e00\u4e2a\u5b50\u6811\n}int main(){\n\tmiu[1]=1;fOR(i,2,MAXN){\n\t\tif(!out[i])miu[prm[++cnt]=i]=-1;\n\t\tFOR(j,1,cnt){\n\t\t\tif(i*prm[j]>=MAXN)break;\n\t\t\tout[i*prm[j]]=true;\n\t\t\tif(i%prm[j]==0)break;\n\t\t\tmiu[i*prm[j]]=-miu[i];\n\t\t}miu[i]+=miu[i-1];\n\t}a=qr();b=qr();n=qr();l=qr();r=qr();qw(num(a,b),0);\n\tif(l==1)qw(a,' ');else l=~-l;\n\tr=r-l+1;if(r==1)return 0;l=~-l;//\u53bb\u6389\u7b2c\u4e00\u4e2a\uff0cr\u5b58\u63a5\u4e0b\u6765\u8fd8\u8981\u8f93\u51fa\u591a\u5c11\u6570\uff0c\u7279\u5224 l=r=1\u3002\n\tif(a+b>n){if(r>2)qw(a,' ');qw(b,0);return 0;}//\u9700\u8981\u7279\u5224 a+b>n \u7684\u60c5\u51b5\n\twhile(1){\n\t\tx=num(a,a+b);\n\t\tif(x==l){//\u60c5\u51b51\n\t\t\tqw(a+b,' ');if(r>2)prtans(a+b,b);return 0;\n\t\t}if(x>l){//\u60c5\u51b52\n\t\t\tb+=a;\n\t\t\tROF(i,18,0){\n\t\t\t\tif(b+(a<<i)>n)continue;\n\t\t\t\tif(num(a,b+(a<<i))<=l)continue;\n\t\t\t\tb+=(a<<i);\n\t\t\t}continue;\n\t\t}l=num(a,b)-l;a+=b;//\u60c5\u51b53\n\t\tROF(i,18,0){\n\t\t\tif(a+(b<<i)>n)continue;\n\t\t\tif(num(a+(b<<i),b)<=l)continue;\n\t\t\ta+=(b<<i);\n\t\t}l=num(a,b)-l;\n\t}\n}\n```",
        "postTime": 1667741978,
        "uid": 184168,
        "name": "xuanxuan001",
        "ccfLevel": 8,
        "title": "\u9898\u89e3AT_arc123_f\u3010Insert Addition\u3011"
    }
]