[
    {
        "content": "# [ABC282E] Choose Two and Eat One \u9898\u89e3\n\u7ed9\u51fa $n$ \u4e2a\u6570 $a_i$ \u4ee5\u53ca\u4e00\u4e2a\u6570 $m$\uff0c\u6bcf\u6b21\u9009\u51fa\u4e24\u4e2a\u6570 $x,y$\uff0c\u53ef\u4ee5\u83b7\u5f97 $(x^y+y^x)\\mod m$ \u7684\u5206\u503c\uff0c\u5e76\u9009\u62e9\u5176\u4e2d\u4e00\u4e2a\u6570\u6254\u6389\u3002\u76f4\u5230\u53ea\u6709\u4e00\u4e2a\u6570\u4e3a\u6b62\u3002\u6c42\u53ef\u4ee5\u83b7\u5f97\u7684\u6700\u5927\u5206\u503c\u3002\n\n\u4e00\u770b\u6570\u636e\u8303\u56f4\uff0c$n$ \u624d $500$\uff0c\u4e0d\u59a8\u7528 $O(n^2\\log m)$ \u7684\u65f6\u95f4\u5148\u628a\u4efb\u610f\u4e24\u4e2a\u6570\u4ea7\u751f\u7684\u5206\u652f\u7b97\u51fa\u6765\uff0c\u52a0\u4e0a\u5feb\u901f\u5e42\u5373\u53ef\uff0c\u7528\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\u8bb0\u5f55\u4e00\u4e0b\u3002\u5bf9\u4e8e $n=4$ \u7684\u6570\u636e\uff0c\u6211\u4eec\u753b\u51fa\u5982\u4e0b\u56fe\uff1a\n\n![\u56fe1](https://cdn.luogu.com.cn/upload/image_hosting/wfz3fc1g.png)\n\n\u6211\u4eec\u9009\u62e9\u4e24\u4e2a\u70b9\u770b\u770b\u4f1a\u53d1\u751f\u4ec0\u4e48\uff1a\n\n![\u56fe2](https://cdn.luogu.com.cn/upload/image_hosting/krwz5x9t.png)\n\n\u8fd9\u65f6\u5019\u6211\u4eec\u6254\u6389\u8c01\u5462\uff1f\u9898\u76ee\u4e0a\u6ca1\u6709\u9650\u5236\uff0c\u6240\u4ee5\u5e94\u8be5\u6211\u4eec\u81ea\u5df1\u51b3\u5b9a\u3002\u6211\u4eec\u5047\u8bbe\u628a\u7b2c\u4e8c\u4e2a\u6254\u6389\uff1a\n\n![\u56fe3](https://cdn.luogu.com.cn/upload/image_hosting/dx99khe9.png)\n\n\u6211\u4eec\u6b64\u65f6\u7684\u5206\u503c\u4e3a\u84dd\u8272\u90e8\u5206\u7684\u5206\u503c\u3002\u6211\u4eec\u628a\u5b83\u770b\u6210\u4e00\u5f20\u56fe\u7684\u8bdd\uff0c\u4f1a\u53d1\u73b0\uff1a\u56e0\u4e3a\u4e00\u6761\u8fb9\u9009\u4e86\u4ee5\u540e\u8981\u5220\u9664\u4e00\u4e2a\u9876\u70b9\uff0c\u6240\u4ee5\u4e00\u5b9a\u4e0d\u80fd\u9009\u62e9\u51fa\u4e00\u4e2a\u73af\uff0c\u60f3\u4e00\u60f3\u662f\u4e0d\u662f\u3002\u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u4ee4\u5b83\u5c31\u662f\u7b54\u6848\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u5982\u4e0b\u65b9\u6848\uff1a\u5728\u9009\u62e9\u53f6\u7ed3\u70b9\u7684\u8fb9\u65f6\uff0c\u6254\u6389\u53f6\u7ed3\u70b9\uff0c\u7136\u540e\u4e4b\u524d\u53f6\u7ed3\u70b9\u7684\u7236\u4eb2\u5c31\u53d8\u6210\u4e86\u53f6\u7ed3\u70b9\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002\n\n\u7efc\u4e0a\uff0c\u7528\u4e00\u4e2a**\u6700\u5927\u751f\u6210\u6811**\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u9884\u7b97\u5206\u503c $O(n^2\\log m)$\uff0c\u6700\u5927\u751f\u6210\u6811 $n^2$ \u4e2a\u7ed3\u70b9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n^2\\log(n^2))$\uff0c\u53ef\u4ee5\u901a\u8fc7\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;typedef long long ll;\nstruct Node{\n\tll x,y,z;\n\tbool operator <(const Node b){return z>b.z;}//\u91cd\u8f7d\u8fd0\u7b97\u7b26\n};\nll n,MOD,a[502],res,f[502],ans,cnt;vector<Node> v;\ninline ll qp(ll a,ll b){//\u5feb\u901f\u5e42\n\tres=1;\n\twhile(b){\n\t\tif(b&1)(res*=a)%=MOD;//\u4e8c\u8fdb\u5236\u8fd9\u4e00\u4f4d\u4e0a\u662f1\uff0c\u8981\u4e58\u4e0a\n\t\t(a*=a)%=MOD,b>>=1;//\u5347\u9ad8\u5e95\u6570\uff0c\u964d\u4f4e\u6b21\u6570\n\t}\n\treturn res;\n}\ninline ll fnd(ll x){return f[x]==x?x:f[x]=fnd(f[x]);}//\u5e76\u67e5\u96c6\nint main(){\n\tscanf(\"%lld%lld\",&n,&MOD);\n\tfor(int i=1;i<=n;i++)scanf(\"%lld\",&a[i]),f[i]=i;\n\tfor(int i=1;i<=n;i++)for(int j=1;j<=n;j++)v.push_back\n\t\t(Node{i,j,(qp(a[i],a[j])+qp(a[j],a[i]))%MOD});//\u9884\u7b97\u6bcf\u4e24\u4e2a\u70b9\u4e4b\u95f4\u7684\u5206\u503c\uff0c\u6ce8\u610f\u8981\u53d6\u6a21\n\tsort(v.begin(),v.end());//\u6700\u5927\u751f\u6210\u6811\uff1a\u6392\u5e8f\n\tfor(Node t:v)if(fnd(t.x)!=fnd(t.y)){//\u904d\u5386\u6bcf\u4e00\u6761\u8fb9\uff1a\u4e0d\u4f1a\u6784\u6210\u73af\n\t\tf[fnd(t.x)]=fnd(t.y),cnt++,ans+=t.z;//\u5408\u5e76\uff0c\u7edf\u8ba1\u8fb9\u6570\u548c\u7b54\u6848\n\t\tif(cnt==n-1){printf(\"%lld\\n\",ans);break;}//\u6811\u5df2\u7ecf\u751f\u6210\u4e86\uff0c\u8f93\u51fa\u7b54\u6848\n\t}\n\treturn 0;\n}\n```\n\n\u603b\u7ed3\u4e00\u4e0b\uff0c\u8fd9\u9053\u9898\u7684\u4ee3\u7801\u96be\u5ea6\u5e76\u4e0d\u5927\uff0c\u4f46\u601d\u7ef4\u6027\u5f88\u5f3a\uff0c\u60f3\u4e00\u4f1a\u513f\u624d\u80fd\u60f3\u5230\u6700\u5927\u751f\u6210\u6811\uff0c\u5199\u8d77\u6765\u5c31\u6bd4\u8f83\u5feb\u3002",
        "postTime": 1671952850,
        "uid": 367359,
        "name": "Neil_Qian",
        "ccfLevel": 6,
        "title": "[ABC282E] Choose Two and Eat One \u9898\u89e3"
    },
    {
        "content": "# AT-ABC282E Choose Two And Eat One\n\n\u8fd9\u9053\u9898\u7684\u601d\u8def\u771f\u7684\u9006\u5929\uff0c\u8003\u573a\u4e0a\u6ca1\u60f3\u51fa\u6765\uff0c\u8d5b\u540e\u5728\u9ad8\u4e8c\u5de8\u4f6c [_cyle_King](https://www.luogu.com.cn/user/582035) \uff08orzorz\uff09\u7684\u5e2e\u52a9\u4e0b A \u6389\u4e86\uff0c\u611f\u89c9\u601d\u8def\u5f88\u5de7\u5999\uff0c\u4e8e\u662f\u6765\u6c34\u4e00\u53d1\u9898\u89e3\u3002\n\n### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a\u957f\u5ea6\u4e3a $N$ \u7684\u6574\u6570\u5e8f\u5217 $A$ \u4e0e\u4e00\u4e2a\u6574\u6570 $M$\uff0c\u6bcf\u6b21\u9009\u53d6 $A$ \u4e2d\u7684\u4e24\u4e2a\u5143\u7d20 $x, y$ \u5e76\u4ea7\u751f $(A_x^{A_y} + A_y^{A_x}) \\bmod M$ \u7684\u8d21\u732e\u7136\u540e\u5220\u53bb\u8fd9\u4e24\u4e2a\u5143\u7d20\u4e2d\u7684\u5176\u4e2d\u4e00\u4e2a\uff0c\u6c42\u80fd\u591f\u4ea7\u751f\u7684\u6700\u5927\u8d21\u732e\u503c\u3002\n\n### \u601d\u8def\n\n\u7b2c\u4e00\u773c\u770b\u4e0a\u53bb\uff0c\u8fd9\u9053\u9898\u4f3c\u4e4e\u65e0\u6cd5\u76f4\u63a5\u7ef4\u62a4\uff0c\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5de7\u5999\u7684\u53d8\u5f62\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u3002\n\n\u6211\u4eec\u8003\u8651\u5efa\u56fe\u6765\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5bf9\u4e8e $A$ \u4e2d\u7684\u6bcf\u4e00\u5bf9\u5143\u7d20 $i, j$\uff0c\u5728 $i, j$ \u95f4\u8fde\u4e00\u6761\u6743\u503c\u4e3a $(A_i^{A_j} + A_j^{A_i}) \\bmod M$ \u7684\u8fb9\uff0c\u7136\u540e\u8dd1\u4e00\u904d\u6700\u5927\u751f\u6210\u6811\uff0c\u6c42\u51fa\u7684\u6743\u503c\u4e4b\u548c\u5c31\u662f\u7b54\u6848\u3002\n\n\u90a3\u4e48\u4e3a\u4ec0\u4e48\u8fd9\u6837\u6c42\u5f97\u7684\u5c31\u662f\u6700\u5927\u7b54\u6848\u5462\uff1f\n\n\u4e0d\u96be\u770b\u51fa\uff0c\u5982\u679c\u6309\u4e0a\u8ff0\u65b9\u6cd5\u5efa\u56fe\uff0c\u90a3\u4e48\u4efb\u610f\u4e00\u4e2a\u6d88\u53bb\u7684\u5e8f\u5217\u90fd\u53ef\u4ee5\u770b\u4f5c\u539f\u56fe\u7684\u4e00\u4e2a\u751f\u6210\u6811\u3002\n\u6211\u4eec\u62ff\u6837\u4f8b\u4e3e\u4f8b\u3002\n\n\u8fd9\u662f\u6837\u4f8b 1 \u5bf9\u5e94\u7684\u56fe\uff1a\n\n![\u539f\u56fe](https://s1.ax1x.com/2022/12/18/zbdKpD.png)\n\n\n\u800c\u6309\u7167\u6837\u4f8b\u8bf4\u660e\u5efa\u51fa\u6765\u7684\u56fe\uff0c\u957f\u8fd9\u4e2a\u6837\u5b50\uff1a\n\n![\u6837\u4f8b\u5bf9\u5e94\u7684\u56fe](https://s1.ax1x.com/2022/12/18/zbdnfO.png)\n\n\u6d88\u53bb\u7684\u987a\u5e8f\u4e3a $1 \\rightarrow 3 \\rightarrow 2 \\rightarrow 4$\uff0c\u5c31\u662f\u539f\u56fe\u7684\u4e00\u68f5\u751f\u6210\u6811\u561b\u3002\n\n\u5176\u5b9e\u8fd9\u662f\u53ef\u4ee5\u8bc1\u660e\u7684\u3002  \n\u4e00\u5171\u8981\u6d88\u53bb $N - 1$ \u4e2a\u70b9\uff0c\u4e5f\u5c31\u662f\u9009\u53d6\u5bf9\u5e94\u7684 $N - 1$ \u6761\u8fb9\uff0c\u53c8\u56e0\u4e3a\u6bcf\u8fde\u4e00\u6b21\u8fb9\u90fd\u8981\u5220\u53bb\u4e00\u4e2a\u70b9\uff0c\u6240\u4ee5\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u90fd\u4e0d\u4f1a\u4e0e\u66f4\u65e9\u5220\u53bb\u7684\u8282\u70b9\u76f8\u8fde\uff0c\u90a3\u4e48\u56fe\u4e2d\u4e0d\u4f1a\u5b58\u5728\u73af\uff0c\u800c\u539f\u56fe\u4e2d\u6709 $N$ \u4e2a\u70b9\uff0c\u90a3\u4e48\u5bf9\u5e94\u7684\u56fe\u4e0d\u5c31\u662f\u4e00\u68f5\u6811\u5417\uff1f\n\n### \u4ee3\u7801\n\n\u5949\u4e0a\u6211\u4e11\u964b\u7684\u4ee3\u7801~~\u9003~~\u3002\n\n\u7531\u4e8e $N \\le 500$\uff0c\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u66b4\u529b\u8fde\u8fb9\uff08\u8d5e\u7f8e\u826f\u5fc3\u51fa\u9898\u4eba\uff09\u3002  \n\u7531\u4e8e\u8fd9\u662f\u4e2a\u7a20\u5bc6\u56fe\uff0c$N$ \u7684\u8303\u56f4\u4e5f\u4e0d\u5927\uff0c\u6240\u4ee5\u7528\u90bb\u63a5\u77e9\u9635\u7684 Prim \u6bd4\u8f83\u5408\u9002\u3002\u6211\u7684\u662f\u76f4\u63a5\u4ece\u6a21\u677f\u9898\u90a3\u91cc\u590d\u5236\u8fc7\u6765\u7684 Prim\uff0c\u56e0\u4e3a\u61d2\uff0c\u8fb9\u6743\u662f\u539f\u6765\u8fb9\u6743\u7684\u76f8\u53cd\u6570\uff0c\u8fd9\u6837\u6c42\u6700\u5c0f\u751f\u6210\u6811\u5c31\u884c\u4e86\u3002\n\n```cpp\n#include <iostream>\n#include <cstdio>\n#include <vector>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\nusing ll = long long;\n\nconst int N = 550;\nint n, m, a[N], cnt;\nll ans;\n\nint fastPower(int base, int p, int m) {\n\tint res = 1;\n\twhile(p) {\n\t\tif (p & 1) res = ((ll)res * base) % m;\n\t\tbase = ((ll)base * base) % m;\n\t\tp >>= 1;\n\t}\n\treturn res;\n}\n\nint graph[N][N], f[N];\nbool used[N];\n\nvoid prim() {\n\tint cur = 1;\n\tmemset(f, 0x7f, sizeof f);\n\tf[1] = 0;\n\tfor (int i = 1; i <= n; i++) {\n\t\tint minn = 0x7f7f7f7f;\n\t\tfor (int j = 1; j <= n; j++) \n\t\t\tif (!used[j] && f[j] < minn) minn = f[j], cur = j;\n\t\tans += minn, used[cur] = true;\n\t\tfor (int j = 1; j <= n; j++) \n\t\t\tif (!used[j] && graph[j][cur] < f[j]) f[j] = graph[j][cur];\n\t}\n\tcout << -ans << endl;\n\treturn;\n}\nint main() {\n\tios::sync_with_stdio(false);\n\tcin.tie(0), cout.tie(0);\n\tcin >> n >> m;\n\tfor (int i = 1; i <= n; i++) cin >> a[i];\n\tfor (int i = 1; i <= n; i++)\n\t\tfor (int j = 1; j <= n; j++) \n\t\t\tgraph[i][j] = graph[j][i] = -(fastPower(a[i], a[j], m) + (ll)fastPower(a[j], a[i], m)) % m;\n\tprim();\n\treturn 0;\n}\n```\n\n",
        "postTime": 1671323502,
        "uid": 750067,
        "name": "ForgotDream_CHN",
        "ccfLevel": 0,
        "title": "AT-ABC282E Choose Two And Eat One"
    },
    {
        "content": "[\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/AT_abc282_e)\n\n\u770b\u5230\u4e86 $1\\leq n \\leq 500$\uff0c\u8bf4\u660e\u6b64\u9898\u662f\u7528\u5e38\u6570\u8f83\u5927\u7684 $O(n^2)$ \u6216 $O(n^3)$ \u505a\u7684\u3002\n\n\u65e2\u7136\u9898\u76ee\u7684\u610f\u601d\u662f\u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u8003\u8651 kruskal \u7b97\u6cd5\u3002\n\n\u7531\u4e8e $n$ \u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u7206\u641c\u6240\u6709\u7684\u8fb9\uff0c\u4e5f\u624d $O(n^2)$\uff0c\u6c42\u8fb9\u6743\u53ef\u4ee5\u7528\u5feb\u901f\u5e42 $O(\\log n)$  \u6c42\u89e3\n\n\u90a3\u4e48\u603b\u590d\u6742\u5ea6\u662f $O(n^2\\log n)$\uff0c\u662f\u53ef\u4ee5 AC \u7684\n\n$code:$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define CI const int\n#define gc getchar\n#define Mt(a, b) memset(a, b, sizeof a)\n#define pc putchar\n#define W while\n#define I inline\n#define int long long \nnamespace SlowIO{\n\tI int read() {\n\t\tint x = 0, f = 1; char ch = gc();\n\t\tW(ch < '0' || ch > '9') {if(ch == '-') f = -f; ch = gc();}\n\t\tW(ch >= '0' && ch <= '9') x = x * 10 + (ch ^ 48), ch = gc();\n\t\treturn x * f;\n\t}\n\tI void Read(int &x) {x = read();}\n\tI void Read(int &x, int &y) {Read(x), Read(y);}\n} using namespace SlowIO;\nCI N = 510;\nint n, P, a[N];\nint Pow(int a, int b) {\n\tint ans = 1;\n\tW(b) {\n\t\tif(b & 1) ans = ans * a % P;\n\t\ta = a * a % P;\n\t\tb >>= 1;\n\t}\n\treturn ans;\n}\nstruct edge{\n\tint a, b, c;\n\tI edge() {}\n\tI edge(int x, int y, int z) {a = x, b = y, c = z;}\n\tbool operator <(const edge &cmp) const {return c > cmp.c;}\n} E[N * N]; int tot;\nstruct bcj{\n\tint rt[N];\n\tI int find(int x) {return rt[x] == x ? x : rt[x] = find(rt[x]);}\n\tI void merge(int a, int b) {rt[find(b)] = find(a);}\n} B;\nsigned main() {\n\tRead(n, P); for(int i = 1; i <= n; i++) Read(a[i]);\n\tfor(int i = 1; i <= n; i++) B.rt[i] = i;\n\tfor(int i = 1; i <= n; i++)\n\t\tfor(int j = i + 1; j <= n; j++)\n\t\t\tE[tot++] = edge(i, j, (Pow(a[i], a[j]) + Pow(a[j], a[i])) % P);\n\tsort(E, E + tot);\n\tint ans = 0;\n\tfor(int i = 0; i < tot; i++) {\n\t\tint a = E[i].a, b = E[i].b, c = E[i].c;\n\t\tif(B.find(a) != B.find(b)) {\n\t\t\tans += c;\n\t\t\tB.merge(a, b);\n\t\t}\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```",
        "postTime": 1671967692,
        "uid": 675466,
        "name": "Stitch0711",
        "ccfLevel": 5,
        "title": "[ABC282E] Choose Two and Eat One \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u628a\u6bcf\u6b21\u9009\u62e9\u7684\u4e24\u4e2a\u70b9\u8fde\u8fb9\uff0c\u7531\u4e8e\u4f60\u53ea\u4f1a\u8fdb\u884c $n-1$ \u6b21\u64cd\u4f5c\uff0c\u6240\u4ee5\u6700\u540e\u4f60\u4f1a\u5f97\u5230\u4e00\u68f5\u6811\u3002\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5efa\u51fa\u4e00\u4e2a\u5b8c\u5168\u56fe\uff0c\u8dd1\u4e00\u904d\u6700\u5927\u751f\u6210\u6811\u5373\u53ef\u3002\n\n```cpp\n#include <algorithm>\n#include <iostream>\n#include <numeric>\n#include <vector>\n\nusing namespace std;\nusing LL = long long;\nusing Pii = pair<int, int>;\n\nconst int kN = 501;\n\nint n;\nLL m, a[kN], d[kN][kN], ans, f[kN];\nbool v[kN];\nvector<Pii> e;\n\nLL P(LL b, LL e) {\n  LL s = 1;\n  for (; e; e >>= 1, b = b * b % m) {\n    (e & 1) && (s = s * b % m);\n  }\n  return s;\n}\nint F(int x) { return x == f[x] ? x : (f[x] = F(f[x])); }\n\nint main() {\n  ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n  cin >> n >> m;\n  for (int i = 1; i <= n; ++i) {\n    cin >> a[i];\n  }\n  for (int i = 1; i <= n; ++i) {\n    for (int j = i + 1; j <= n; ++j) {\n      d[j][i] = d[i][j] = (P(a[i], a[j]) + P(a[j], a[i])) % m;  // \u6c42\u51fa\u8fb9\u6743\n      e.emplace_back(i, j);\n    }\n  }\n  sort(e.begin(), e.end(), [](Pii i, Pii j) { return d[i.first][i.second] > d[j.first][j.second]; });\n  iota(f + 1, f + n + 1, 1);\n  for (Pii i : e) {  // \u6700\u5927\u751f\u6210\u6811\n    if (F(i.first) != F(i.second)) {\n      ans += d[i.first][i.second];\n      f[F(i.first)] = F(i.second);\n    }\n  }\n  cout << ans;\n  return 0;\n}\n```",
        "postTime": 1671931356,
        "uid": 376161,
        "name": "wsfxk",
        "ccfLevel": 6,
        "title": "[ABC282E] Choose Two and Eat One \u9898\u89e3"
    }
]