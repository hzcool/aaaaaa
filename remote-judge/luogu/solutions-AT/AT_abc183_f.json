[
    {
        "content": "## AT_abc183_f\n\n### \u9898\u9762\n\n$N$ \u4e2a\u5b66\u751f\uff0c\u5b66\u751f $i$ \u5c5e\u4e8e\u73ed\u7ea7 $C_i$\uff0c\u5b66\u751f\u4eec\u4f1a\u7ec4\u6210\u4e00\u4e2a\u4e2a\u96c6\u5408\uff08\u4e0d\u4e00\u5b9a\u540c\u73ed\uff09\u3002\n\n\u521d\u59cb\u6bcf\u4f4d\u5b66\u751f\u6240\u5c5e\u96c6\u5408\u53ea\u5305\u542b\u81ea\u5df1\uff0c\u6709 $Q$ \u6b21\u64cd\u4f5c\uff1a\n\n`1 a b` \u5408\u5e76 $a$ \u548c $b$ \u6240\u5728\u7684\u96c6\u5408\uff08\u5728\u540c\u4e00\u96c6\u5408\u91cc\u5219\u4ec0\u4e48\u4e5f\u4e0d\u53d1\u751f\uff09\u3002\n\n`2 x y` \u95ee $x$ \u6240\u5728\u7684\u96c6\u5408\u91cc\u6709\u591a\u5c11 $y$ \u73ed\u7684\u5b66\u751f\u3002\n\n### \u601d\u8def\n\n\u6734\u7d20\u60f3\u6cd5\u662f\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6bcf\u4f4d\u5b66\u751f\u5c5e\u4e8e\u54ea\u4e2a\u96c6\u5408\uff0c\u8be2\u95ee\u65f6\u628a\u6240\u6709\u5b66\u751f\u626b\u4e00\u904d\u3002\n\n\u8003\u8651\u6bcf\u6b21\u6709\u6548\u5408\u5e76\u4e24\u4e2a\u96c6\u5408\u65f6\u65b0\u5efa\u4e00\u4e2a\u70b9 $x$\uff0c\u4f7f\u4e24\u4e2a\u96c6\u5408\u7684\u4ee3\u8868\uff08$u$\u3001$v$\uff09\u90fd\u6307\u5411 $x$\uff08$fa_u=fa_v=x$\uff09\u3002\n\n\u540c\u65f6\uff0c\u5728\u4e00\u5f20\u56fe $G$ \u91cc\u8fde $x$ \u5230 $u$\u3001$v$ \u7684\u5404\u4e00\u6761\u6709\u5411\u8fb9\uff08\u663e\u7136\u8be5\u56fe\u4e00\u5b9a\u662f\u68ee\u6797\uff09\u3002\n\n\u53d1\u73b0\u8fd9\u6837\u6bcf\u4e2a\u96c6\u5408\u90fd\u5728 $G$ \u91cc\u5f62\u6210\u4e86\u4e00\u68f5\u6709\u5411\u6811\uff0c\u8be2\u95ee\u65f6\u628a $x$ \u6240\u5728\u96c6\u5408\u7684\u4ee3\u8868 $p$ \u8bb0\u5f55\u4e00\u4e0b\u5e76\u79bb\u7ebf\uff0c\u7b54\u6848\u5c31\u662f $p$ \u7684\u5b50\u6811\u91cc\u6709\u591a\u5c11\u70b9\u5c5e\u4e8e\u73ed\u7ea7 $y$ \uff08\u65b0\u5efa\u7684\u70b9\u4e0d\u5c5e\u4e8e\u4efb\u4f55\u73ed\u7ea7\uff09\u3002\n\n\u540e\u7eed\u65b0\u5efa\u7684\u8282\u70b9\u4e0d\u4f1a\u5f71\u54cd\u4e4b\u524d\u7684\u8bb0\u5f55\u7684\u7b54\u6848\u7684\u5b50\u6811\uff0c\u6240\u4ee5\u7b54\u6848\u53ef\u4ee5\u4e4b\u540e\u4e00\u8d77\u6c42\u3002\n\n\u5904\u7406\u5b8c\u8f93\u5165\u4ee5\u540e\u8dd1\u51fa DFS \u5e8f\uff0c\u6839\u636e\u5176\u6027\u8d28\u53ef\u4ee5\u628a\u5b50\u6811\u95ee\u9898\u8f6c\u5316\u6210\u533a\u95f4\u95ee\u9898\uff0c\u5373\u95ee $[l,r]$ \u5185\u6709\u591a\u5c11\u5b66\u751f\u662f $y$ \u73ed\u7684\uff0c\u76f4\u63a5\u5dee\u5206\u5c31\u597d\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u7ebf\u6027\uff08\u9ed8\u8ba4\u5e76\u67e5\u96c6\u590d\u6742\u5ea6\u4e3a\u5e38\u6570\uff09\u3002\n\n### \u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define f(i,j,k) for(register int i=j;i<=k;++i)\n#define g(i,j,k) for(register int i=j;i>=k;--i)\nusing namespace std;\nint n,m,s,l;\nstruct pwf{\n    int p,w,f;\n}ls;\nint a[505050];\nint b[505050];\nint c[505050];\nint fa[505050];\nint ans[505050];\nint dfn[505050][2];\nint ask[505050][2];\nvector<int>q[505050];\nvector<pwf>r[505050];\nint fifa(int x){return x==fa[x]?x:fa[x]=fifa(fa[x]);}\nvoid dfs(int x){\n    dfn[x][0]=++m;\n    f(i,1,q[x].size())dfs(q[x][i-1]);\n    dfn[x][1]=m;\n}\nsigned main(){\n    int x,y,z;\n    cin>>n>>m;s=n;\n    g(i,n*2,1)fa[i]=i;\n    f(i,1,n)scanf(\"%lld\",&a[i]);\n    f(i,1,m){\n        scanf(\"%lld %lld %lld\",&z,&x,&y);\n        if(z==1){\n            x=fifa(x);y=fifa(y);\n            if(x==y)continue;\n            fa[x]=fa[y]=++s;\n            q[s].push_back(x);\n            q[s].push_back(y);\n        }else{\n            ask[++l][0]=fifa(x);ask[l][1]=y;\n        }\n    }\n    m=0;\n    f(i,1,s)if(fifa(i)==i)dfs(i);\n    f(i,1,s)b[dfn[i][0]]=a[i];\n    f(i,1,l){\n        x=ask[i][0];y=ask[i][1];\n        r[dfn[x][0]-1].push_back((pwf){-1,y,i});\n        r[dfn[x][1]].push_back((pwf){1,y,i});\n    }\n    f(i,1,s){\n        ++c[b[i]];\n        f(j,1,r[i].size()){\n            ls=r[i][j-1];\n            ans[ls.f]+=ls.p*c[ls.w];\n        }\n    }\n    f(i,1,l)printf(\"%lld\\n\",ans[i]);\n    return 0;\n}\n```",
        "postTime": 1670219999,
        "uid": 218376,
        "name": "IloveSurtr",
        "ccfLevel": 7,
        "title": "AT_abc183_f"
    },
    {
        "content": "\n\n\u5e76\u67e5\u96c6\u5957 `std::multiset` \u7ef4\u62a4\u96c6\u5408\u4e0e\u73ed\u7ea7\uff0c\u91c7\u7528\u542f\u53d1\u5f0f\u5408\u5e76\uff0c\u4f1a TLE \u4e24\u4e2a\u70b9\u3002\n\n```cpp\n#include <iostream>\n#include <set>\n\nvoid promote() {\n    std::ios::sync_with_stdio(0);\n    std::cin.tie(0);\n    std::cout.tie(0);\n    return;\n}\n\ntypedef std::multiset<int> mit;\n\nconst int maxN = 2e5;\nconst int maxQ = 2e5;\n\nint n, q;\nint c[maxN + 10];\nint op;\nint a, b;\nint x, y;\n\nstruct DisjointSetUnion {\n    struct Node {\n        int fa;\n        mit s;\n    } node[maxN + 10];\n\n    void Init() {\n        for (int i = 1; i <= n; i++) node[i].fa = i;\n        return;\n    }\n\n    int Find(int u) {\n        if (node[u].fa == u) return u;\n        return node[u].fa = Find(node[u].fa);\n    }\n\n    void Union(int u, int v) {\n        u = Find(u);\n        v = Find(v);\n        if (u == v) return;\n        if (node[u].s.size() > node[v].s.size()) std::swap(u, v);\n        node[u].fa = v;\n        for (auto w : node[u].s) node[v].s.insert(w);\n        return;\n    }\n} DSU;\n\nint main() {\n    promote();\n    std::cin >> n >> q;\n    DSU.Init();\n    for (int i = 1; i <= n; i++) std::cin >> c[i];\n    for (int i = 1; i <= n; i++) DSU.node[i].s.insert(c[i]);\n    for (int i = 1; i <= q; i++) {\n        std::cin >> op;\n        if (op == 1) {\n            std::cin >> a >> b;\n            DSU.Union(a, b);\n        } else if (op == 2) {\n            std::cin >> x >> y;\n            std::cout << DSU.node[DSU.Find(x)].s.count(y) << '\\n';\n        }\n    }\n    return 0;\n}\n```\n\n\u4e0d\u96be\u53d1\u73b0\u65f6\u95f4\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e\u4e00\u4e2a\u73ed\u7ea7 $C$ \u5728\u4e00\u6b21 `Union` \u4e2d\u88ab\u679a\u4e3e\u4e86 $\\lvert C \\rvert$ \u6b21\uff0c\u4e14\u5355\u6b21\u8d21\u732e\u4e3a $1$\u3002\n\n\u4f7f\u7528 `std::set` \u7ef4\u62a4\u96c6\u5408\u5185\u73ed\u7ea7\u7c7b\u578b\uff0c\u4f7f\u7528 `std::map` \u7ef4\u62a4\u73ed\u7ea7\u5185\u5b66\u751f\u6570\u91cf\uff0c\u4f18\u5316\u4e3a\u679a\u4e3e $1$ \u6b21\u4e14\u5355\u6b21\u8d21\u732e\u4e3a $\\lvert C \\rvert$\u3002\n\n```cpp\n#include <iostream>\n#include <map>\n#include <set>\n\nvoid promote() {\n    std::ios::sync_with_stdio(0);\n    std::cin.tie(0);\n    std::cout.tie(0);\n    return;\n}\n\ntypedef std::map<int, int> mii;\ntypedef std::set<int> sit;\n\nconst int maxN = 2e5;\nconst int maxQ = 2e5;\n\nint n, q;\nint c[maxN + 10];\nint op;\nint a, b;\nint x, y;\n\nstruct DisjointSetUnion {\n    struct Node {\n        int fa;\n        mii m;\n        sit s;\n    } node[maxN + 10];\n\n    void Init() {\n        for (int i = 1; i <= n; i++) node[i].fa = i;\n        return;\n    }\n\n    int Find(int u) {\n        if (node[u].fa == u) return u;\n        return node[u].fa = Find(node[u].fa);\n    }\n\n    void Union(int u, int v) {\n        u = Find(u);\n        v = Find(v);\n        if (u == v) return;\n        if (node[u].s.size() > node[v].s.size()) std::swap(u, v);\n        node[u].fa = v;\n        for (auto w : node[u].s) {\n            node[v].s.insert(w);\n            node[v].m[w] += node[u].m[w];\n        }\n        return;\n    }\n} DSU;\n\nint main() {\n    promote();\n    std::cin >> n >> q;\n    DSU.Init();\n    for (int i = 1; i <= n; i++) std::cin >> c[i];\n    for (int i = 1; i <= n; i++) DSU.node[i].m[c[i]] = 1;\n    for (int i = 1; i <= n; i++) DSU.node[i].s.insert(c[i]);\n    for (int i = 1; i <= q; i++) {\n        std::cin >> op;\n        if (op == 1) {\n            std::cin >> a >> b;\n            DSU.Union(a, b);\n        } else if (op == 2) {\n            std::cin >> x >> y;\n            std::cout << DSU.node[DSU.Find(x)].m[y] << '\\n';\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1683598918,
        "uid": 278046,
        "name": "Lyccrius",
        "ccfLevel": 5,
        "title": "ABC183F"
    },
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u6709 $N$ \u4e2a\u5b66\u751f\uff0c\u7b2c $i$ \u4f4d\u5b66\u751f\u5728\u7b2c $C_i$ \u4e2a\u73ed\u7ea7\u3002\u8fd9 $N$ \u4f4d\u5b66\u751f\u5c06\u4f1a\u7ec4\u6210\u4e00\u4e9b\u96c6\u5408\u3002\u521d\u59cb\u65f6\u6bcf\u4f4d\u5b66\u751f\u6240\u5728\u96c6\u5408\u90fd\u4e92\u4e0d\u76f8\u540c\u3002\u7ed9\u5b9a $Q$ \u6b21\u64cd\u4f5c\uff0c\u8be2\u95ee\u683c\u5f0f\u6709\u4e24\u79cd\uff1a\n\n+ `1 a b`\uff1a\u5c06\u7b2c $a$ \u4f4d\u5b66\u751f\u548c\u7b2c $b$ \u4f4d\u5b66\u751f\u6240\u5728\u7684\u96c6\u5408\u5408\u5e76\u3002\u5982\u679c\u5df2\u5728\u540c\u4e00\u96c6\u5408\uff0c\u4e0d\u4f1a\u6709\u4efb\u4f55\u53d8\u5316\u3002\n+ `2 x y`\uff1a\u8be2\u95ee\u7b2c $x$ \u4f4d\u5b66\u751f\u6240\u5728\u7684\u96c6\u5408\u6709\u591a\u5c11\u4f4d $y$ \u73ed\u7684\u5b66\u751f\u3002\n\n\u6570\u636e\u8303\u56f4\uff1a$1 \\le N,Q \\le 2\\times10^5$\uff0c$1 \\le C_i\\le N$\u3002\n\n------------\n\n### \u89e3\u6cd5\u5206\u6790\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u6bcf\u4f4d\u5b66\u751f\u6240\u5728\u96c6\u5408\uff0c\u5e76\u5f00\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4 $mp$\uff0c$mp_{i,j}$ \u8868\u793a\u7b2c $i$ \u4e2a\u96c6\u5408\u4e2d $j$ \u73ed\u5b66\u751f\u7684\u4eba\u6570\uff0c\u521d\u59cb\u5316 $mp_{i,C_i}=1$\uff0c\u5176\u4f59\u4e3a $0$\u3002\u9047\u5230 1 \u64cd\u4f5c\u5c31\u628a\u4e24\u5b66\u751f\u6240\u5728\u96c6\u5408\u4e2d\u5176\u4e2d\u4e00\u4e2a\u96c6\u5408\u7684\u6bcf\u73ed\u4eba\u6570\u4fe1\u606f\u52a0\u5230\u53e6\u5916\u4e00\u4e2a\u96c6\u5408\u53bb\uff0c\u9047\u5230 2 \u64cd\u4f5c\u5c31\u8f93\u51fa\u5bf9\u5e94\u7684\u503c\u3002\n\n\u4e0d\u4f5c\u5904\u7406\u7684\u8bdd\u80af\u5b9a\u662f\u65f6\u7a7a\u53cc\u7206\uff0c\u8003\u8651\u4f18\u5316\u4e00\u4e0b\uff1a\n\n+ 1 \u64cd\u4f5c\u65f6\uff0c\u82e5\u4e24\u5b66\u751f\u6240\u5728\u96c6\u5408\u76f8\u540c\u5c31\u8df3\u8fc7\uff0c\u5426\u5219\u628a\u4e24\u4e2a\u96c6\u5408\u4e2d\u4eba\u6570\u8f83\u5c11\u7684\u8f6c\u79fb\u5230\u53e6\u4e00\u4e2a\u96c6\u5408\u3002\u770b\u8d77\u6765\u597d\u50cf\u6ca1\u4ec0\u4e48\u5f71\u54cd\uff0c\u6700\u574f\u60c5\u51b5\u4e0b\u8f6c\u79fb\u6b21\u6570\u4f9d\u7136\u662f $N^2$ \u6b21\u5de6\u53f3\uff0c\u4f46\u5b9e\u9645\u4e0a\u8fdc\u6ca1\u6709\u8fd9\u4e48\u5927\u3002\u7531\u4e8e\u6700\u5f00\u59cb\u6bcf\u4e2a\u96c6\u5408\u90fd\u4ec5\u6709 $1$ \u4eba\uff0c\u4f18\u5316\u4e4b\u540e\uff0c\u6211\u4eec\u6bcf\u6b21\u9700\u8981\u8f6c\u79fb\u7684\u4eba\u6570\u6700\u591a\u4e5f\u53ea\u662f\u4ece $1$ \u5f00\u59cb\u9010\u6b21\u4e24\u500d\u4e24\u500d\u589e\u52a0\u7684\u3002\u5f53\u8fd9\u4e2a\u6570\u5b57\u63a5\u8fd1 $N$ \u7684\u65f6\u5019\uff0c\u5927\u591a\u6570 1 \u64cd\u4f5c\u90fd\u4f1a\u56e0\u4e24\u96c6\u5408\u76f8\u540c\u800c\u88ab\u8df3\u8fc7\u3002\u7531\u500d\u589e\u7684\u77e5\u8bc6\u6211\u4eec\u53ef\u4ee5\u77e5\u9053\u8fd9\u6837\u8f6c\u79fb\u6b21\u6570\u6700\u5927\u4e5f\u53ea\u80fd\u5230 $N\\log N$ \u7684\u7ea7\u522b\uff0c\u5728\u7b2c\u4e8c\u4e2a\u4f18\u5316\u7684\u5e2e\u52a9\u4e0b\u5c31\u53ef\u4ee5\u6210\u529f\u5361\u8fdb\u65f6\u9650\u4e86\u3002\n+ \u4f7f\u7528 `map` \u5b58\u50a8 $mp$\uff0c\u5373\u5b9a\u4e49\u65f6\u5199\u6210 `map <int,int> mp[200007]`\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u5728\u4e0a\u4e00\u4e2a\u4f18\u5316\u4e0b\uff0c\u8fd9\u6837\u5b58\u50a8\u6700\u574f\u7a7a\u95f4\u590d\u6742\u5ea6\u4e5f\u53ea\u6709 $O(N \\log N)$ \u5de6\u53f3\uff0c\u6210\u529f\u5361\u8fdb\u7a7a\u9650\u3002\n\n------------\n\n### \u4ee3\u7801\n\n```cpp\n#pragma GCC optimize(2)\n#include <bits/stdc++.h>\n#define ll long long\n#define pb push_back\n#define pii pair<int,int>\nusing namespace std;\nconst int N=2e5+7;\nint n,q,c[N],f[N];\nmap <int,int> mp[N]; // \u4f18\u5316 2\nint fnd(int x) { return f[x]==x?x:f[x]=fnd(f[x]); }\nint main() {\n\tscanf(\"%d%d\",&n,&q);\n\tfor (int i=1;i<=n;i++) f[i]=i,scanf(\"%d\",&c[i]),mp[i][c[i]]=1;\n\tfor (int op,x,y;q--;) {\n\t\tscanf(\"%d%d%d\",&op,&x,&y);\n\t\tif (op==1) {\n\t\t\tint fx=fnd(x),fy=fnd(y);\n\t\t\tif (fx!=fy) {\n\t\t\t\tif (mp[fx].size()>mp[fy].size()) swap(fx,fy); // \u4f18\u5316 1\n\t\t\t\tfor (pii i:mp[fx]) mp[fx][i.first]=0,mp[fy][i.first]+=i.second; // \u8f6c\u79fb\n\t\t\t\tf[fx]=fy;\n\t\t\t}\n\t\t}\n\t\telse printf(\"%d\\n\",mp[fnd(x)][y]);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1673670112,
        "uid": 319803,
        "name": "CarroT1212",
        "ccfLevel": 6,
        "title": "ABC183F Sol"
    }
]