[
    {
        "content": "#### **\u9898\u76ee\u5206\u6790\uff1a\uff08\u8d2a\u5fc3+\u6811\u5f62DP\uff09**\n\n\u9996\u5148\u8981\u660e\u786e\u7684\u662f\u4e09\u4ef6\u4e8b\uff1a\n\n1. \u5f53\u67d0\u4e00\u4e2a\u5b50\u6811\u4e2d\u67d3\u8272\u65b9\u6848\u548c\u6743\u503c\u65b9\u6848\u90fd\u786e\u5b9a\u4ee5\u540e\uff0c\u5bf9\u4e8e\u5176\u7956\u5148\u7ed3\u70b9\u7684\u5b50\u6811\u9020\u6210\u7684\u5f71\u54cd\u4ec5\u4ec5\u662f\u4e24\u79cd\u989c\u8272\u7684\u6743\u503c\u548c\uff0c\u800c\u4e0d\u5173\u5fc3\u5176\u5177\u4f53\u65b9\u6848\uff0c\u56e0\u4e3a\u5bf9\u4e8e\u5b83\u7684\u7236\u7ed3\u70b9\u6765\u8bf4\uff0c\u8fd9\u4e2a\u5b50\u6811\u662f\u4e00\u4e2a\u6574\u4f53\u3002\n2. \u663e\u7136\u5c06\u4e00\u4e2a\u5b50\u6811\u4e2d\u6240\u6709\u7ed3\u70b9\u9ed1\u767d\u5012\u7f6e\uff0c\u4ecd\u7136\u6ee1\u8db3\u8981\u6c42\uff1b\u56e0\u6b64\u6211\u4eec\u5728\u5904\u7406\u4e0a\u4e00\u6761\u4e2d\u63d0\u5230\u7684\u6743\u503c\u548c\u65f6\u4e0d\u5fc5\u5173\u5fc3\u5177\u4f53\u662f\u54ea\u79cd\u989c\u8272\u7684\u6743\u503c\u548c\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u4e0d\u5fc5\u77e5\u9053\u5230\u5e95\u662f\u201c\u9ed1\u8272\u201d\u8fd8\u662f\u201c\u767d\u8272\u201d\u7684\u6743\u503c\u548c\uff0c\u800c\u53ea\u8981\u77e5\u9053\u662f\u201c\u4e24\u79cd\u4e0d\u540c\u989c\u8272\u201d\u7684\u6743\u503c\u548c\u3002\n3. \u57fa\u4e8e\u4e0a\u9762\u4e00\u6761\uff0c\u6211\u4eec\u5728\u5904\u7406\u67d0\u4e00\u4e2a\u5b50\u6811\u65f6\uff0c\u53ef\u4ee5\u5047\u8bbe\u5b83\u7684\u6839\u8282\u70b9\u67d3\u9ed1\u8272\u3002\u56e0\u4e3a\u5982\u679c\u6839\u8282\u70b9\u67d3\u767d\u8272\uff0c\u53ea\u9700\u5c06\u8fd9\u4e2a\u5b50\u6811\u4e0a\u6240\u6709\u7ed3\u70b9\u9ed1\u767d\u5012\u7f6e\u5373\u53ef\u8f6c\u6362\u6210\u9ed1\u8272\u3002\u540c\u65f6\uff0c\u6839\u8282\u70b9\u7684\u6bcf\u4e00\u4e2a\u5b50\u8282\u70b9\u6240\u5bf9\u5e94\u5b50\u6811\u4e2d\u4e24\u79cd\u989c\u8272\u5f53\u7136\u4e5f\u662f\u53ef\u4ee5\u4ea4\u6362\u7684\u3002\n\n\u8fd9\u5c31\u662f\u6211\u4eec\u5206\u6790\u7684\u57fa\u7840\u4e86\u3002\u521a\u770b\u5230\u9898\u76ee\u4e2d\u7ed9\u7684\u6761\u4ef6\u53ef\u80fd\u8fd8\u4e0d\u592a\u6709\u5934\u7eea\uff0c\u5373\u4f7f\u6709\u4e86\u4e0a\u9762\u7684\u51e0\u6761\u57fa\u672c\u201c\u89c4\u5219\u201d\u4e5f\u96be\u4ee5\u7ee7\u7eed\u505a\u4e0b\u53bb\uff0c\u6240\u4ee5\u6211\u4eec\u8fd8\u9700\u8981\u4e00\u4e2a\u80fd\u591f\u5177\u4f53\u6267\u884c\u7684\u67d3\u8272\u548c\u8d4b\u6743\u6cd5\u5219\u3002\n\n**\u8d2a\u5fc3\u7b56\u7565\uff1a\uff08\u5047\u8bbe\u5c06\u67d0\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\u67d3\u6210\u9ed1\u8272\uff09\u5219\u8fd9\u9897\u5b50\u6811\u4e2d\u9ed1\u8272\u7ed3\u70b9\u7684\u6743\u503c\u548c\u5e94\u5f53\u6070\u597d\u7b49\u4e8e$V_ x$\uff0c\u800c\u767d\u8272\u7ed3\u70b9\u7684\u6743\u503c\u548c\u5e94\u5c3d\u91cf\u5c0f\u3002**\n\n\u8bc1\u660e\uff1a\u9ed1\u8272\u7ed3\u70b9\u6743\u503c\u548c\u7b49\u4e8e$V_x$\u5e94\u8be5\u6ca1\u6709\u4ec0\u4e48\u95ee\u9898\uff0c\u6839\u636e\u4e0a\u9762\u7684\u9ed1\u767d\u5012\u7f6e\u7406\u8bba\uff0c\u9ed1\u8272\u6216\u767d\u8272\u6743\u548c\u7b49\u4e8e$V_x$\u662f\u7b49\u4ef7\u7684\u3002\n\n- \u767d\u8272\u7ed3\u70b9\u7684\u6743\u503c\u548c\u5c3d\u91cf\u5c0f\u4e5f\u5f88\u5bb9\u6613\u7406\u89e3\uff1a\u56e0\u4e3a\u5047\u5982\u5b58\u5728\u4e00\u79cd\u767d\u8272\u7ed3\u70b9\u6743\u503c\u548c\u66f4\u5927\u7684\u60c5\u51b5\u80fd\u591f\u4f7f\u6574\u9897\u6811\u6ee1\u8db3\u8981\u6c42\uff0c\u5219\u6211\u4eec\u4e00\u5b9a\u53ef\u4ee5\u7ed9\u4e88\u8fd9\u4e2a\u5b50\u6811\u6839\u8282\u70b9\u7684\u7236\u8282\u70b9\u4e00\u4e2a\u6743\u503c\u4f7f\u5f97\u4ee5\u7236\u8282\u70b9\u4e3a\u6839\u7684\u66f4\u5927\u7684\u5b50\u6811\u4e5f\u6ee1\u8db3\u8981\u6c42\uff0c\u6b64\u65f6\u5bf9\u4e8e\u767d\u8272\u7ed3\u70b9\u6743\u503c\u548c\u5c0f\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u53ea\u8981\u589e\u5927\u7236\u8282\u70b9\u7684\u6743\u503c\uff0c\u5c31\u4e00\u5b9a\u80fd\u591f\u8fbe\u5230\u76f8\u540c\u7684\u6548\u679c\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u6743\u548c\u8f83\u5c0f\u662f\u6ee1\u8db3\u6761\u4ef6\uff0c\u5219\u5f53\u6743\u503c\u589e\u5927\u65f6\uff0c\u6709\u53ef\u80fd\u4f1a\u8d85\u51fa\u7236\u8282\u70b9\u7684$V$\u503c\uff0c\u4ece\u800c\u4e0d\u80fd\u7ed9\u5b83\u7684\u7236\u8282\u70b9\u5206\u914d\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u6743\u503c\u3002\n\n\u8fd9\u5c31\u662f\u6211\u4eec\u67d3\u8272\u548c\u8d4b\u6743\u7684\u5177\u4f53\u65b9\u6848\u4e86\u3002\u4e0b\u9762\u5c31\u8981\u8003\u8651\u5177\u4f53\u5982\u4f55\u5b9e\u73b0\u7684\u95ee\u9898\u3002\n\n\u91c7\u7528\u6811\u5f62DP\u7684\u9012\u5f52\u5b9e\u73b0\u3002\u6211\u4eec\u7528$f[i]$\u8868\u793a\u4ee5$i$\u4e3a\u6839\u7684\u5b50\u6811\u4e2d\u767d\u8272\u7ed3\u70b9\u7684\u6700\u5c0f\u6743\u503c\u548c\u3002\u6211\u4eec\u8fdb\u884c\u4e00\u6b21DFS\uff0c\u5047\u8bbe\u67d0\u7ed3\u70b9$x$\u7684\u6240\u6709\u5b50\u7ed3\u70b9\u7684$dp$\u503c\u5df2\u7ecf\u7b97\u51fa\uff0c\u5e76\u5047\u8bbe\u8fd9\u4e2a\u7ed3\u70b9\u67d3\u9ed1\u8272\uff0c\u90a3\u4e48\u5bf9\u4e8e\u6bcf\u4e2a\u5b50\u6811$i$\u6765\u8bf4\u6709\u4e24\u79cd\u51b3\u7b56\uff1a\n\n1. \u5c06\u8fd9\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\u67d3\u9ed1\uff0c\u5219\u6574\u68f5\u6811\u7684\u9ed1\u6743\u548c\u589e\u52a0$V_i$\uff0c\u6574\u68f5\u6811\u7684\u767d\u6743\u548c\u589e\u52a0$ f[i]$\uff1b\n2. \u5c06\u8fd9\u4e2a\u5b50\u6811\u7684\u6839\u8282\u70b9\u67d3\u767d\uff08\u9ed1\u767d\u5012\u7f6e\uff09\uff0c\u5219\u6574\u68f5\u6811\u7684\u9ed1\u6743\u548c\u589e\u52a0$f[i]$\uff0c\u767d\u6743\u548c\u589e\u52a0$V_i$\u3002\n\n\u540c\u65f6\u8003\u8651\u5230\u8fd9\u4e2a\u8282\u70b9\u81ea\u8eab\u67d3\u9ed1\uff0c\u800c\u4e14\u6743\u503c\u53ef\u4ee5\u662f\u4efb\u610f\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\uff0c\u6240\u4ee5\u53ea\u8981\u6bcf\u4e2a\u5b50\u6811\u7edf\u8ba1\u5b8c\u540e\u9ed1\u6743\u548c\u4e0d\u8d85\u8fc7$V_x$\u5373\u53ef\uff08\u5c11\u7684\u53ef\u4ee5\u76f4\u63a5\u901a\u8fc7\u6839\u8282\u70b9\u52a0\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u8981\u6c42\u7684\u5b9e\u9645\u4e0a\u5c31\u662f\uff1a\u5728\u9ed1\u6743\u548c\u4e0d\u8d85\u8fc7$V_x$\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u767d\u6743\u548c\u6700\u5c0f\u3002\u8fd9\u5176\u5b9e\u662f\u7c7b\u4f3c\u4e8e01\u80cc\u5305\u7684\u95ee\u9898\uff0c\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684\u6700\u5927$V_x$\u4e0d\u5927\uff0c\u56e0\u6b64\u53ef\u4ee5\u4f7f\u7528\u80cc\u5305\u95ee\u9898\u7684\u65b9\u6cd5\u6c42\u89e3\uff0c\u8fd9\u91cc\u53ea\u662f\u6bcf\u4e24\u4e2a\u7269\u54c1\u4e2d\u5fc5\u987b\u9009\u4e00\u4e2a\u7684\u80cc\u5305\uff0c\u8981\u6c42\u53ef\u884c\u7684\u6700\u5927\u503c\uff08\u56e0\u4e3a\u9ed1\u6743\u548c\u6700\u5927\u4ee3\u8868\u767d\u6743\u548c\u6700\u5c0f\uff09\u3002\n\n\u4e0b\u9762\u4ee3\u7801\u4e2d\u7528$f[i]$\u6307\u6811\u5f62dp\u4e2d\u7684\u6570\u7ec4\uff0c$dp[i]$\u4ee3\u8868\u80cc\u5305\u4e2d\u7684dp\u6570\u7ec4\u3002\n\n\u7b97\u6cd5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a$O(\\sum \\limits_{i=1}^nV_i)=O(NV)$\u3002\n\n------\n\n#### **\u7a0b\u5e8f\uff1a**\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN=1010;\nint n,fa[MAXN],v[MAXN],dp[5*MAXN],f[MAXN];\nvector <int> p[1010];\nvoid dfs (int x) {\n\tfor (int ii=0;ii<p[x].size();ii++) {\n\t\tdfs(p[x][ii]);\n\t}\n\tmemset(dp,0x3f,sizeof(dp));\n\tdp[0]=0;\n\tfor (int ii=0;ii<p[x].size();ii++) {\n\t\tint k=p[x][ii];\n\t\tfor (int i=v[x];i>=0;i--) {\n\t\t\tint tmp=0x3f3f3f3f;\n\t\t\tif (i>=v[k]) {\n\t\t\t\ttmp=min(tmp,dp[i-v[k]]+f[k]);\n\t\t\t}\n\t\t\tif (i>=f[k]) {\n\t\t\t\ttmp=min(tmp,dp[i-f[k]]+v[k]);\n\t\t\t}\n\t\t\tdp[i]=tmp;\n\t\t}\n\t}\n\tfor (int i=v[x];i>=0;i--) {\n\t\tf[x]=min(f[x],dp[i]);\n\t}\n\treturn;\n}\nint main () {\n\tmemset(f,0x3f,sizeof(f));\n\tscanf(\"%d\",&n);\n\tfor (int i=2;i<=n;i++) {\n\t\tscanf(\"%d\",&fa[i]);\n\t\tp[fa[i]].push_back(i);\n\t}\n\tfor (int i=1;i<=n;i++) {\n\t\tscanf(\"%d\",&v[i]);\n\t}\n\tdfs(1);\n\tif (f[1]<0x3f3f3f3f) {\n\t\tprintf(\"POSSIBLE\\n\");\n\t} else {\n\t\tprintf(\"IMPOSSIBLE\\n\");\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1555243260,
        "uid": 113546,
        "name": "ix35",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 AT3536 \u3010Bichrome Tree\u3011"
    },
    {
        "content": "\u6821\u5185\u6a21\u62df\u8d5b\u8003\u4e86\u8fd9\u9053\u9898\uff0c\u7ed3\u679c\u72b6\u6001\u5bf9\u4e86\u65b9\u7a0b\u63a8\u9519\u4e86\u2026\u2026\n\n\u6211\u662f sb \u77f3\u9524\u3002\n\n\u9996\u5148\uff0c\u8fd9\u4e2a\u95ee\u9898\u6709 $4$ \u4e2a\u7ef4\u5ea6\uff1a\n\n1. $i$ \u8282\u70b9\uff1b\n1. \u5b50\u6811\u5185\u767d\u70b9\u7684\u6743\u503c\u548c $w_0$\uff1b\n1. \u5b50\u6811\u5185\u9ed1\u70b9\u7684\u6743\u503c\u548c $w_1$\uff1b\n1. \u81ea\u5df1\u67d3\u6210\u9ed1\u8272\u8fd8\u662f\u767d\u8272 $c$\u3002\n\n\u76f4\u63a5\u5229\u7528\u8fd9\u4e2a\u6765 DP \u5e94\u8be5\u4f1a\u6709\u4e00\u4e2a $O(nX^4)$ \u7684\u4f18\u79c0\u590d\u6742\u5ea6\u3002\n\n\u4f46\u662f\u6211\u4eec\u53d1\u73b0\u73b0\u5728\u8fd9\u4e2a\u72b6\u6001\u6709\u4e00\u7ef4\u662f\u4e0d\u9700\u8981\u8bb0\u7684\uff0c\u56e0\u4e3a\u6839\u636e\u9898\u76ee\u8981\u6c42\uff0c\u6709 $w_c=X_i$\u3002\n\n\u4e8e\u662f\u964d\u5230 $3$ \u7ef4\uff1a\n\n1. $i$ \u8282\u70b9\uff1b\n1. \u81ea\u5df1\u67d3\u6210\u9ed1\u8272\u8fd8\u662f\u767d\u8272 $c$\u3002\n1. \u5b50\u6811\u5185\u53e6\u5916\u4e00\u4e2a\u989c\u8272\u7684\u70b9\u7684\u6743\u503c\u548c $w_{1-c}$\u3002\n\n\u5229\u7528\u8fd9\u4e2a\u6765 DP \u4f1a\u6709\u4e00\u4e2a $O(nX^2)$ \u7684\u4f18\u79c0\u590d\u6742\u5ea6\u3002\n\n\u8003\u8651\u7ee7\u7eed\u4f18\u5316\uff0c\u56e0\u4e3a\u4e0a\u754c\u662f $X$\uff0c\u4e14\u6743\u503c\u4e0d\u80fd\u662f\u8d1f\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u731c\u6d4b\u53ef\u80fd\u9700\u8981\u8ba9 $w_{1-c}$ \u5c3d\u91cf\u5c0f\u3002\n\n\u5982\u4f55\u8bc1\u660e\uff1f\n\n1. \u6700\u4f18\u6027\uff1a\u5982\u679c\u6709\u4e00\u4e2a\u65b9\u6848\u4f7f\u5f97 $w_{1-c}$ \u4e0d\u662f\u6700\u5c0f\u7684\uff0c\u90a3\u4e48\u5c06\u8fd9\u4e2a\u5b50\u6811\u5185\u65b9\u6848\u4fee\u6539\u4e3a\u4f7f\u5f97 $w_{1-c}$ \u6700\u5c0f\uff0c\u5e76\u589e\u5927\u989c\u8272\u4e3a $1-c$ \u7684\u7956\u5148\u7684\u6743\u503c\uff0c\u4e00\u5b9a\u80fd\u6784\u9020\u51fa\u53e6\u5916\u4e00\u4e2a\u65b9\u6848\u3002\n2. \u53ef\u884c\u6027\uff1a~~\u4f60\u90fd DP \u51fa\u6765\u4e86\u5f53\u7136\u53ef\u884c\u3002~~\n\n\u6240\u4ee5\u95ee\u9898\u53d8\u4e3a\u4e00\u4e2a $2$ \u7ef4\u7684\u6700\u4f18\u5316\u95ee\u9898\uff1a\n\n1. $i$ \u8282\u70b9\uff1b\n1. \u81ea\u5df1\u67d3\u6210\u9ed1\u8272\u8fd8\u662f\u767d\u8272 $c$\u3002\n1. \u6700\u5c0f\u5316\u5b50\u6811\u5185\u53e6\u5916\u4e00\u4e2a\u989c\u8272\u7684\u70b9\u7684\u6743\u503c\u548c $w_{1-c}$\u3002\n\n\u7136\u540e\u5c31\u5f97\u5230\u72b6\u6001\uff1a\u8bbe $f_{i,c}$ \u8868\u793a $i$ \u8282\u70b9\uff0c\u81ea\u5df1\u67d3\u6210 $c$ \u989c\u8272\uff0c\u5b50\u6811\u5185 $1-c$ \u7684\u989c\u8272\u7684\u6743\u503c\u548c\u6700\u5c0f\u662f\u591a\u5c11\u3002\n\n\u4f46\u662f\u8fd9\u65f6\u8f6c\u79fb\u597d\u50cf\u6ca1\u6709\u90a3\u4e48\u7b80\u5355\u3002\n\n\u8003\u8651\u4e00\u4e2a\u7c7b\u4f3c\u4e8e 0/1 \u80cc\u5305\u7684\u8f6c\u79fb\u3002\n\n\u8bbe $g_{c,i}$ \u8868\u793a $c$ \u989c\u8272\u6743\u503c\u548c\u4e3a $i$ \u65f6\uff0c$1-c$ \u989c\u8272\u7684\u6743\u503c\u548c\u6700\u5c0f\u591a\u5c11\u3002\n\n\u8003\u8651\u52a0\u5165\u4e00\u4e2a\u70b9 $v$ \u65f6\u7684\u8f6c\u79fb\u3002\n\n\u679a\u4e3e\u70b9 $u$ \u548c\u70b9 $v$ \u7684\u989c\u8272\u3002\u5982\u679c\u662f $0,0$\uff0c\u6709\u8f6c\u79fb\uff1a\n\n$$g_{0,j}\\leftarrow g_{0,j-X_v}+f_{v,0}$$\n\n$0,1$\uff0c\u6709\u8f6c\u79fb\uff1a\n\n$$g_{0,j}\\leftarrow g_{0,j-f_{v,1}}+X_v$$\n\n$1,0$\uff0c\u6709\u8f6c\u79fb\uff1a\n\n$$g_{1,j}\\leftarrow g_{1,j-f_{v,0}}+X_v$$\n\n$1,1$\uff0c\u6709\u8f6c\u79fb\uff1a\n\n$$g_{1,j}\\leftarrow g_{1,j-X_v}+f_{v,1}$$\n\n\u5408\u5e76\u56de $f$ \u7684\u65f6\u5019\uff0c\u5c31\u76f4\u63a5\u679a\u4e3e $i$ \u8282\u70b9\u7684\u6743\u503c\u5c31\u884c\u4e86\uff1a\n\n$$f_{i,j}=\\min_{k=0}^{X_i}g_{j,k}$$\n\n\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(nX)$\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <cstdio>\n#include <ctime>\n#include <algorithm>\nusing namespace std;\n\n#define getchar() (p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, 1 << 21, stdin), p1 == p2) ? EOF : *p1++)\nchar buf[(1 << 21) + 5], *p1 = buf, *p2 = buf;\n\ninline int qread() {\n\tchar c = getchar();\n\tint x = 0, f = 1;\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-') f = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9') {\n\t\tx = x * 10 + c - '0';\n\t\tc = getchar();\n\t}\n\treturn x * f;\n}\n\nstruct Edge {\n\tint to, nxt;\n\tEdge() {\n\t\tnxt = -1;\n\t}\n};\nint n, hd[1005], pnt, x[1005], dp[1005][2], col[1005], siz[1005][2];\nEdge e[2005];\n\ninline void AddEdge(int u, int v) {\n\te[++pnt].to = v;\n\te[pnt].nxt = hd[u];\n\thd[u] = pnt;\n}\n\ninline void Read() {\n\tn = qread();\n\tfor (int i = 2;i <= n;i++) {\n\t\tint fa = qread();\n\t\tAddEdge(fa, i);\n\t}\n\tfor (int i = 1;i <= n;i++) x[i] = qread();\n}\n\ninline void Dfs(int u) {\n\tif (!~hd[u]) {\n\t\tdp[u][0] = dp[u][1] = 0;\n\t\treturn;\n\t}\n\tint f[2][5005], g[2][5005];\n\tmemset(f, 0x3f, sizeof(f));\n\tf[0][0] = f[1][0] = 0;\n\tfor (int i = hd[u];~i;i = e[i].nxt) {\n\t\tDfs(e[i].to);\n\t\tmemset(g, 0x3f, sizeof(g));\n\t\tfor (int j = x[u];j >= 0;j--) {\n\t\t\tif (x[e[i].to] <= j) {\n\t\t\t\tg[0][j] = min(g[0][j], f[0][j - x[e[i].to]] + dp[e[i].to][0]);\n\t\t\t\tg[1][j] = min(g[1][j], f[1][j - x[e[i].to]] + dp[e[i].to][1]);\n\t\t\t}\n\t\t\tif (dp[e[i].to][1] <= j) g[0][j] = min(g[0][j], f[0][j - dp[e[i].to][1]] + x[e[i].to]);\n\t\t\tif (dp[e[i].to][0] <= j) g[1][j] = min(g[1][j], f[1][j - dp[e[i].to][0]] + x[e[i].to]);\n\t\t}\n\t\tmemcpy(f, g, sizeof(f));\n\t}\n\tdp[u][0] = dp[u][1] = 0x3f3f3f3f;\n\t//printf(\"u=%d:\\n\", u);\n\tfor (int i = 0;i <= x[u];i++) {\n\t\t//printf(\"%d \", f[0][i]);\n\t\tdp[u][0] = min(dp[u][0], f[0][i]);\n\t\tdp[u][1] = min(dp[u][1], f[1][i]);\n\t}\n}\n\nint main() {\n\tmemset(hd, -1, sizeof(hd));\n\tRead();\n\tDfs(1);\n\tif (dp[1][0] == 0x3f3f3f3f && dp[1][1] == 0x3f3f3f3f) puts(\"IMPOSSIBLE\");\n\telse puts(\"POSSIBLE\");\n\treturn 0;\n}\n```",
        "postTime": 1607046203,
        "uid": 61088,
        "name": "Solystic",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 AT3536 \u3010[ARC083C] Bichrome Tree\u3011"
    },
    {
        "content": "\u6807\u7b7e:\u6784\u9020\n\n\u5047\u8bbe\u6709\u53ef\u884c\u7684\u65b9\u6848, \u6211\u4eec\u5c1d\u8bd5\u6784\u9020\u51fa\u6765.\n\n\u8bbe $w_u$ \u4e3a $u$ \u7684\u6743\u503c, $y_u$ \u8868\u793a $u$ **\u5b50\u6811\u5185\u4e0e $u$ \u989c\u8272\u4e0d\u540c\u7684\u70b9** \u7684\u6743\u503c\u548c. \u5219 $x_u+y_u=\\sum_{v\\in T_u}w_u$, \u5176\u4e2d $T_u$ \u8868\u793a $u$ \u7684\u5b50\u6811\u7684\u70b9\u96c6.\n\n\u8003\u8651 $x_u$ \u5982\u4f55\u4ece\u513f\u5b50\u8282\u70b9 $v$ \u8f6c\u79fb, \u5bb9\u6613\u5f97\u5230 $x_u=w_u+\\sum_{c_u=c_v}x_v+\\sum_{c_u\\neq c_v}y_v$, \u5176\u4e2d $c_u$ \u8868\u793a $u$ \u7684\u989c\u8272. \u56e0\u4e3a $w_u$ \u662f\u4e00\u4e2a\u4efb\u610f\u51b3\u5b9a\u7684\u975e\u8d1f\u6574\u6570, \u5e76\u4e14\u5176\u53d6\u503c\u53ea\u5f71\u54cd $x_u$, \u4e0d\u5f71\u54cd $y_u$, \u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5148\u786e\u5b9a\u513f\u5b50\u8282\u70b9 $v$ \u5bf9 $u$ \u7684\u8d21\u732e\u662f $x$ \u8fd8\u662f $y$, \u6700\u540e\u7684\u8c03\u6574 $w_u$ \u4f7f\u5f97\u65b9\u6848\u5408\u6cd5.\n\n\u53d1\u73b0\u4e00\u4e2a\u70b9\u5bf9\u4e8e\u5176\u7236\u4eb2\u7684\u5f71\u54cd\u5168\u90e8\u53ef\u4ee5\u7528 $x$ \u548c $y$ \u6765\u4f53\u73b0, \u5bb9\u6613\u4f53\u4f1a\u5230 $y$ \u8d8a\u5c0f\u8d8a\u4f18, \u6240\u4ee5\u6211\u4eec\u5229\u7528\u62d3\u6251\u5e8f(\u6216\u9012\u5f52)\u6c42\u51fa\u6bcf\u4e00\u4e2a\u70b9 $y$ \u7684\u6700\u5c0f\u503c, \u5728\u6c42\u7684\u8fc7\u7a0b\u4e2d\u5224\u65ad\u662f\u5426\u6709\u89e3\u5c31\u597d\u4e86.\n\n\u5177\u4f53\u7684, \u5bf9\u4e8e\u53f6\u5b50\u7ed3\u70b9, $y=0$; \u5bf9\u4e8e\u975e\u53f6\u5b50\u8282\u70b9\u6211\u4eec\u53ef\u4ee5\u7528\u80cc\u5305\u6765\u6c42 $y$, \u8be6\u7ec6\u53ef\u4ee5\u770b\u4ee3\u7801.\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(nx)$.\n\n```cpp\n#include <bits/stdc++.h>\n#define inf 1000000000\nusing namespace std;\nint read();\nint n;\nqueue<int> q;\nint fa[1003], deg[1003], x[1003], y[1003];\nint f[1003][5003];\nvoid insert(int u) { return --deg[u] ? void() : q.push(u); }\n\nvoid update(int u, int a, int b) {\n    for (int i = x[u]; i >= 0; --i) {\n        if (i >= b)\n            f[u][i] = min(f[u][i - a] + b, f[u][i - b] + a);\n        else if (i < a)\n            f[u][i] = inf;\n        else\n            f[u][i] = f[u][i - a] + b;\n    }\n}\n\nint main() {\n    n = read();\n    for (int i = 2; i <= n; ++i) deg[fa[i] = read()]++;\n    for (int i = 1; i <= n; ++i) x[i] = read();\n    for (int i = 1; i <= n; ++i) deg[i] ? void() : q.push(i);\n    while (!q.empty()) {\n        int u = q.front(), v = fa[u];\n        q.pop(), insert(v);\n        if ((y[u] = f[u][x[u]]) >= inf) return puts(\"IMPOSSIBLE\"), 0;\n        if (!v) break;\n        if (x[u] > y[u]) swap(x[u], y[u]);\n        y[u] = min(y[u], inf);\n        update(v, x[u], y[u]);\n    }\n    puts(\"POSSIBLE\");\n    return 0;\n}\n\nint read() {\n    int x = 0, f = 1;\n    char c = getchar();\n    while (c < '0' || c > '9') f = (c == '-') ? -1 : f, c = getchar();\n    while (c >= '0' && c <= '9') x = x * 10 + c - '0', c = getchar();\n    return x * f;\n}\n\n```",
        "postTime": 1576458557,
        "uid": 51237,
        "name": "Kinandra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT3536 \u3010Bichrome Tree\u3011"
    }
]