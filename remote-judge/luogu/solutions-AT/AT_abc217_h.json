[
    {
        "content": "\u5148\u6574\u4e2a\u66b4\u529b dp\uff0c\u8bbe $f_{i,j}$ \u8868\u793a $T_i$ \u65f6\u523b\u89d2\u8272\u5728 $j$ \u53ef\u80fd\u7684\u6700\u5c0f\u4f24\u5bb3\uff0c\u8f6c\u79fb\u5c31\u679a\u4e3e\u4e0a\u4e00\u6b21\u5728\u54ea\uff0c\u5bb9\u6613\u5f97\u5230\u8f6c\u79fb\u65b9\u7a0b $f_{i,j}=\\min\\limits_{k=j-len}^{j+len}\\{f_{i-1,k}\\}+|j-X_i|[(j>X_i)=D_i]$\uff0c\u5176\u4e2d $len=T_i-T_{i-1}$\u3002\n\n\u76f4\u63a5\u505a\u662f $O(nV)$ \u7684\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n\u9996\u5148\u628a $f_{i,j}$ \u770b\u6210\u4e00\u4e2a\u5173\u4e8e $j$ \u7684\u51fd\u6570\uff0c\u6709\u7ed3\u8bba $f_{i,j}$ \u662f\u4e00\u4e2a**\u7ebf\u6027\u5206\u6bb5\u4e0b\u51f8\u51fd\u6570**\u3002\n\n\u7ebf\u6027\u548c\u5206\u6bb5\u662f\u663e\u7136\u7684\uff0c\u63a5\u4e0b\u6765\u8bc1\u660e\u4e0b\u51f8\u6027\u3002\n\n\u8003\u8651\u5f52\u7eb3\u8bc1\u660e\uff0c$f_{0,j}$ \u663e\u7136\u6210\u7acb\uff0c\u8003\u8651\u4e00\u6b21\u8f6c\u79fb\uff0c\u8f6c\u79fb\u65b9\u7a0b\u7684\u540e\u534a\u90e8\u5206\u7684\u51fd\u6570\u56fe\u50cf\u53ea\u6709\u4e24\u79cd\u5f62\u6001\uff0c\u5206\u522b\u5f62\u5982```\\_```\uff08\u5bf9\u5e94 $D_i=0$ \u7684\u60c5\u51b5\uff09\u548c```_/```\uff08\u5bf9\u5e94 $D_i=1$ \u7684\u60c5\u51b5\uff09\uff0c\u4e14\u659c\u7ebf\u90e8\u5206\u7684\u659c\u7387\u662f $1$ \u6216 $-1$\uff0c\u662f\u4e0b\u51f8\u7684\u3002\n\n\u65b9\u7a0b\u7684\u524d\u534a\u90e8\u5206\u662f\u5bf9\u4e00\u4e2a\u4e0b\u51f8\u51fd\u6570\u53d6\u533a\u95f4 $\\min$\uff0c\u8fd9\u4e2a\u64cd\u4f5c\u7b49\u4ef7\u4e8e\u5c06\u51fd\u6570\u6700\u5c0f\u503c\u5de6\u53f3\u4e24\u4fa7\u7684\u56fe\u50cf\u5206\u522b\u5411\u4e24\u8fb9\u5e73\u79fb\uff0c\u4e5f\u662f\u4e0b\u51f8\u51fd\u6570\u3002\n\n\u4e24\u4e2a\u4e0b\u51f8\u51fd\u6570\u76f8\u52a0\uff0c\u5f97\u5230\u7684\u8fd8\u662f\u4e0b\u51f8\u51fd\u6570\uff0c\u8bc1\u660e\u5206\u522b\u5bf9\u4e24\u4e2a\u4e0b\u51f8\u51fd\u6570\u6c42\u4e8c\u9636\u5bfc\u5373\u53ef\uff0c\u4e0d\u518d\u8d58\u8ff0\u3002\n\n\u56e0\u6b64 $f_{i,j}$ \u662f\u4e00\u4e2a**\u7ebf\u6027\u5206\u6bb5\u4e0b\u51f8\u51fd\u6570**\uff0c\u8fd9\u542f\u793a\u6211\u4eec\u4f7f\u7528 $\\mathrm{slope\\ trick}$ \u52a0\u901f dp\u3002\n\n\u5177\u4f53\u6765\u8bf4\u4f7f\u7528\u5927\u6839\u5806\u548c\u5c0f\u6839\u5806\u7ef4\u62a4\u5206\u522b\u7ef4\u62a4\u4e0b\u51f8\u58f3\u659c\u7387\u4e3a $0$ \u7684\u533a\u95f4\u7684\u4e24\u4fa7\u7684\u51f8\u58f3\u7684\u62d0\u70b9\uff08\u6ce8\u610f\u5806\u4e2d\u7684\u5143\u7d20\u8868\u793a\u659c\u7387\u5728\u8fd9\u4e2a\u4f4d\u7f6e\u6539\u53d8\u4e86**\u6070\u597d** $1$\uff0c\u56e0\u6b64\u5982\u679c\u5728\u67d0\u4e2a\u70b9\u53d8\u5316\u5927\u4e8e $1$ \u8981\u5728\u5806\u4e2d\u52a0\u5165\u591a\u4e2a\u5143\u7d20\uff09\uff0c\u4e00\u6b21\u8f6c\u79fb\u672c\u8d28\u4e0a\u662f\u628a\u51f8\u58f3\u5de6\u4fa7\u5411\u5de6\u5e73\u79fb $len$ \u4e2a\u5355\u4f4d\uff0c\u51f8\u58f3\u53f3\u4fa7\u5411\u53f3\u5e73\u79fb $len$ \u4e2a\u5355\u4f4d\uff0c\u8fd9\u53ef\u4ee5\u901a\u8fc7\u76f4\u63a5\u6253 tag \u5b9e\u73b0\uff0c\u7136\u540e\u518d\u52a0\u5165\u65b9\u7a0b\u540e\u534a\u90e8\u5206\u7684\u51fd\u6570\uff0c\u8fd9\u90e8\u5206\u5c31\u662f\u5728 $X_i$ \u4f4d\u7f6e\u63d2\u5165\u4e00\u4e2a\u62d0\u70b9\uff0c\u6839\u636e $X_i$ \u5728\u659c\u7387\u662f $0$ \u7684\u533a\u95f4\u7684\u5de6\u4fa7\u3001\u53f3\u4fa7\u6216\u5f53\u4e2d\u5206\u7c7b\u8ba8\u8bba\u8d21\u732e\uff0c\u63d2\u5165\u4e4b\u540e\u66f4\u65b0\u4e00\u4e0b\u659c\u7387\u662f $0$ \u7684\u533a\u95f4\u5373\u53ef\u3002\n\n\u5177\u4f53\u5b9e\u73b0\u8fd8\u662f\u8981\u770b\u4ee3\u7801\uff0c\u611f\u89c9\u8fd9\u4e2a\u4e1c\u897f\u6bd4\u8f83\u96be\u8bb2\u6e05\u695a\u2026\u2026\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<queue>\nusing namespace std;\n#define int long long\nint n,ans,lst;\ninline int read()\n{\n    int x=0,f=1;\n    char c=getchar();\n    while(c<'0'||c>'9')\n    {\n        if(c=='-')\n            f=-1;\n        c=getchar();\n    }\n    while(c>='0'&&c<='9')\n    {\n        x=(x<<1)+(x<<3)+(c^48);\n        c=getchar();\n    }\n    return x*f;\n}\nsigned main()\n{\n    n=read();\n    priority_queue<int> q1;\n    priority_queue<int,vector<int>,greater<int> > q2;\n    int tag1=0,tag2=0;\n    for(int i=1;i<=n;++i)\n    {\n        q1.emplace(0);\n        q2.emplace(0);\n    }\n    for(int i=1;i<=n;++i)\n    {\n        int t=read(),d=read(),x=read(),len=t-lst;\n        lst=t;\n        tag1-=len;\n        tag2+=len;\n        if(d==0)\n        {\n            if(x>q2.top()+tag2)\n            {\n                ans+=x-q2.top()-tag2;\n                q1.emplace(q2.top()+tag2-tag1);\n                q2.pop();\n                q2.emplace(x-tag2);\n            }\n            else\n                q1.emplace(x-tag1);\n        }\n        else\n        {\n            if(x<q1.top()+tag1)\n            {\n                ans+=q1.top()+tag1-x;\n                q2.emplace(q1.top()+tag1-tag2);\n                q1.pop();\n                q1.emplace(x-tag1);\n            }\n            else\n                q2.emplace(x-tag2);\n        }\n    }\n    cout<<ans<<'\\n';\n    return 0;\n}\n```",
        "postTime": 1667482894,
        "uid": 85682,
        "name": "\u7edd\u9876\u6211\u4e3a\u5cf0",
        "ccfLevel": 8,
        "title": "AT_abc217_h [ABC217H] Snuketoon \u9898\u89e3"
    }
]