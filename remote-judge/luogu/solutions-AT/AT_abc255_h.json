[
    {
        "content": "\n\n## \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a\u4e00\u7247 $N$ \u683c\u7684\u519c\u7530\uff0c\u4ece\u7b2c $0$ \u5929\u5f00\u59cb\uff0c\u7b2c $i$ \u683c\u519c\u7530\u6bcf\u5929\u4f1a\u957f\u51fa $i$ \u7684\u4f5c\u7269\u3002\n\n\u7ed9\u51fa $Q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4ee5 $D,L,R$ \u7684\u683c\u5f0f\u7ed9\u51fa\uff0c\u8868\u793a\u8be2\u95ee\u5728\u7b2c $D$ \u5929\uff0c\u6536\u5272 $[L,R]$ \u7684\u519c\u7530\uff0c\u4f1a\u83b7\u5f97\u591a\u5c11\u4f5c\u7269\uff1f\u7b54\u6848\u5bf9 $998244353$ \u53d6\u6a21\u3002\u6ce8\u610f\u8be2\u95ee\u76f8\u4e92\u4f9d\u8d56\uff0c\u5373\u5728\u6bcf\u4e00\u6b21\u6536\u5272\u540e\uff0c$[L,R]$ \u7684\u4f5c\u7269\u5e94\u5f53\u6e05\u96f6\u3002\n\n\n## \u89e3\u9898\u601d\u8def\n\n\u8003\u8651\u7528\u73c2\u6735\u8389\u6811\u6765\u7ef4\u62a4\u5f53\u524d\u519c\u7530\u6700\u540e\u4e00\u6b21\u88ab\u5272\u7684\u5929\u6570\u3002\u56e0\u4e3a\u6bcf\u4e2a\u519c\u7530\u589e\u957f\u7684\u4f5c\u7269\u662f\u56fa\u5b9a\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u7528\u5929\u6570 $\\times$ \u519c\u7530\u589e\u957f\u7684\u603b\u548c\uff0c\u8fd9\u4e2a\u7528\u7b49\u5dee\u6570\u5217\u516c\u5f0f\u5373\u53ef\u3002\u56e0\u4e3a\u6570\u636e\u8f83\u5927\uff0c\u6240\u4ee5\u9664 $2$ \u8981\u6539\u4e3a $\\times2$ \u7684\u9006\u5143\u3002\n\n\n\n## \u4ee3\u7801\u5b9e\u73b0\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nlong long n,q,mod=998244353,inv=499122177;\nstruct node\n{\n    long long l,r;\n    mutable long long v;\n    node(long long L,long long R=-1,long long V=0)\n    {\n        l=L,r=R,v=V;\n    }\n    bool operator<(const node &a) const\n    {\n        return l<a.l;\n    }\n};\nset<node> a;\n#define at set<node>::iterator\nlong long read()\n{\n    long long s=0,w=1;\n    char ch=getchar();\n    while(ch<'0'||ch>'9')\n    {\n        if(ch=='-')\n            w=-1;\n        ch=getchar();\n    }\n    while(ch>='0'&&ch<='9')\n        s=s*10+(ch-'0'),ch=getchar();\n    return s*w;\n}\nat split(long long pos)\n{\n    at it=a.lower_bound(pos);\n    if(it!=a.end()&&it->l==pos)\n        return it;\n    it--;\n    long long l=it->l;\n    long long r=it->r;\n    long long v=it->v;\n    a.erase(it);\n    a.insert(node(l,pos-1,v));\n    return a.insert(node(pos,r,v)).first;\n}\nlong long emerge(long long l,long long r,long long k)\n{\n    at itr=split(r+1);\n    at itl=split(l);\n    long long ans=0;\n    for(at it=itl;it!=itr;++it) \n    {\n        ans+=(k-it->v)%mod*((it->l+it->r)%mod)%mod*((it->r-it->l+1)%mod)%mod*inv%mod;\n        if(ans>=mod)\n            ans-=mod;\n    }\n    a.erase(itl,itr);\n    a.insert(node(l,r,k));\n    return ans;\n}\nint main()\n{\n    n=read(),q=read();\n    a.insert(node(1,n,0));\n    for(int i=1;i<=q;++i)\n    {\n        long long k=read(),l=read(),r=read();\n        printf(\"%lld\\n\",emerge(l,r,k));\n        // for(at it=a.begin();it!=a.end();++it)\n        //     cout<<it->l<<\" \"<<it->r<<\" \"<<it->v<<\"\\n\";\n    }\n    return 0;\n}\n```\n",
        "postTime": 1678016059,
        "uid": 342244,
        "name": "jamesharden666",
        "ccfLevel": 4,
        "title": "[ABC255Ex] Range Harvest Query"
    },
    {
        "content": "## ABC255Ex\n\n*2430\n\n\u601d\u8def\u8f83\u4e3a\u7b80\u5355\u3002\n\n\u8c03\u4e86\u4e00\u4e0b\u5348\u52a0\u4e00\u65e9\u4e0a\uff0c\u53d1\u73b0\u662f\u4eba\u773c\u505a $10^{18}$ \u7ea7\u6574\u6570\u6bd4\u5927\u5c0f\u5224\u9519\u4e86\uff0c\u62ac\u8d70\u3002\n\n### \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u7247 $N$ \u683c\u7684\u519c\u7530\uff0c\u4ece\u7b2c $0$ \u5929\u5f00\u59cb\uff0c\u7b2c $i$ \u683c\u519c\u7530\u6bcf\u5929\u4f1a\u957f\u51fa $i$ \u7684\u4f5c\u7269\u3002\n\n\u7ed9\u51fa $Q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4ee5 $D,L,R$ \u7684\u683c\u5f0f\u7ed9\u51fa\uff0c\u8868\u793a\u8be2\u95ee\u5728\u7b2c $D$ \u5929\uff0c\u6536\u5272 $[L,R]$ \u7684\u519c\u7530\uff0c\u4f1a\u83b7\u5f97\u591a\u5c11\u4f5c\u7269\uff1f\u7b54\u6848\u5bf9 $998244353$ \u53d6\u6a21\u3002\u6ce8\u610f\u8be2\u95ee\u76f8\u4e92\u4f9d\u8d56\uff0c\u5373\u5728\u6bcf\u4e00\u6b21\u6536\u5272\u540e\uff0c$[L,R]$ \u7684\u4f5c\u7269\u5e94\u5f53\u6e05\u96f6\u3002\n\n$1\\le l_i \\le r_i\\le n \\le 10^{18}$\n\n$1\\le q \\le 2\u00d710^5$\n\n$1< d_1 < d_2<...< d_q\u226410^{18}$\n\n### \u9898\u89e3\n\n\u503c\u57df\u5f88\u5927\uff0c\u4f20\u7edf\u7684\u7ebf\u6bb5\u6811\u65e0\u6cd5\u7ef4\u62a4\u3002\u52a8\u6001\u5f00\u70b9\u7ebf\u6bb5\u6811\u6839\u636e\u5b9e\u73b0\u7684\u597d\u574f\uff0c\u9700\u8981\u4e0d\u540c\u7a0b\u5ea6\u7684\u5361\u5e38\u3002\n\n\u8003\u8651\u4f7f\u7528 `std::set` \u7ef4\u62a4\u64cd\u4f5c\u8fc7\u7684\u533a\u95f4\u3002\u5047\u8bbe\u4e00\u6b21\u64cd\u4f5c $(d,l,r)$ \u6240\u64cd\u4f5c\u7684\u533a\u95f4\u5148\u524d\u672a\u88ab\u64cd\u4f5c\u8fc7\uff0c\u5219\u6839\u636e\u7b49\u5dee\u6570\u5217\u6c42\u548c\u516c\u5f0f\uff0c\u672c\u6b21\u64cd\u4f5c\u7684\u7b54\u6848\u4e3a $\\frac{d\u00b7(r+l)\u00b7(r-l+1)}{2}$\u3002\n\n\u6ce8\u610f\u5230\u5bf9\u4e8e\u4e00\u4e2a\u76f8\u540c\u7684\u533a\u95f4 $[l,r]$\uff0c\u5728\u64cd\u4f5c $(d,l,r)$ \u524d\u6709\u64cd\u4f5c $(d_0,l,r)$\uff0c\u5219 $(d,l,r)$ \u7684\u7b54\u6848\u662f $\\frac{(d-d_0)\u00b7(r+l)\u00b7(r-l+1)}{2}$\uff0c\u5176\u540e $d_0$ \u4e0d\u518d\u5f71\u54cd\u63a5\u4e0b\u6765\u7684\u64cd\u4f5c\uff0c$d$ \u53d6\u800c\u4ee3\u4e4b\u3002\n\n\u4e8e\u662f\u5728\u8ba1\u7b97\u7b54\u6848\u662f\u53ef\u4ee5\u5148\u8ba1\u7b97\u51fa\u4e0d\u53d7\u4efb\u4f55\u5f71\u54cd\u7684 $\\frac{d\u00b7(r+l)\u00b7(r-l+1)}{2}$\uff0c\u7136\u540e\u518d\u51cf\u53bb\u4e0e\u533a\u95f4 $[l,r]$ \u6709\u4ea4\u7684\u5148\u524d\u64cd\u4f5c\u7684\u5f71\u54cd\uff0c\u6700\u540e\u7531\u4e8e\u64cd\u4f5c\u7684\u8986\u76d6\u6027\u8d28\u76f4\u63a5\u53bb\u6389\u8fd9\u4e9b\u76f8\u4ea4\u7684\u533a\u95f4\uff0c\u5e76\u8986\u76d6\u4e0a $(d,l,r)$ \u5373\u53ef\u3002\n\n\u5b9e\u73b0\u4e0a\uff0c\u4f7f\u7528 `std::set` \u7ef4\u62a4\u4fdd\u7559\u4e0b\u7684\u6240\u6709\u533a\u95f4\uff0c\u6309 $l$ \u4e3a\u7b2c\u4e00\u5173\u952e\u5b57\u6392\u5e8f\uff0c\u6bcf\u6b21\u64cd\u4f5c\u65f6\u627e\u5230\u6240\u6709\u4e0e $[l,r]$ \u6709\u4ea4\u7684\u64cd\u4f5c\u7136\u540e\u51cf\u53bb\u5148\u524d\u64cd\u4f5c\u7684\u5f71\u54cd\u3002\n\n\u5bf9\u76f8\u4ea4\u7684\u60c5\u51b5\u5206\u7c7b\u8ba8\u8bba\u5373\u53ef\u3002\n\n\u53d1\u73b0\u5982\u6b64\u7ef4\u62a4\u533a\u95f4\u540e\uff0c`std::set` \u5185\u4fdd\u7559\u7684\u533a\u95f4\u4e24\u4e24\u4e0d\u4ea4\u3002\u5171\u6709 $q$ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u90fd\u4f1a\u63d2\u5165\u4e00\u4e2a\u533a\u95f4\uff0c\u6bcf\u4e2a\u533a\u95f4\u82e5\u5bfc\u81f4\u5206\u88c2\u53ea\u4f1a\u4ea7\u751f $O(1)$ \u4e2a\u65b0\u533a\u95f4\uff0c\u8986\u76d6\u5176\u4ed6\u533a\u95f4\u5219\u76f4\u63a5\u5c06\u5176\u5220\u9664\uff0c\u800c\u6bcf\u4e2a\u5757\u6700\u591a\u88ab\u5220\u9664\u4e00\u6b21\u3002\u603b\u533a\u95f4\u6570\u53ca\u5176\u64cd\u4f5c\u6570\u4ecd\u5728 $O(q)$ \u7ea7\u522b\uff0c\u5355\u6b21\u64cd\u4f5c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log q)$\uff0c\u6545\u603b\u590d\u6742\u5ea6\u4e3a $O(q\\log q)$ \uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n### \u4ee3\u7801\n\n```cpp\nconst ll maxn=2e5+5,mod=998244353,inv=499122177;\nstruct node{\n\tll l,r,d;\n\tfriend bool operator < (const node &x,const node &y){\n\t\treturn x.l==y.l?x.r<y.r:x.l<y.l;\n\t}\n};\nset<node>s;\nll ins(ll l,ll r,ll d){\n\tll res=((r+l)%mod*((r-l+1)%mod)%mod)*(d%mod)%mod*inv%mod;//\u8ba1\u7b97\u539f\u59cb\u7b54\u6848\n\tauto it=s.lower_bound((node){l,0,d});\n\twhile(it!=s.end()&&it->l<=r){//\u5de6\u7aef\u70b9\u843d\u5728\u533a\u95f4\u5185\n\t\tif(it->r<=r){//\u5b8c\u5168\u88ab\u533a\u95f4\u5305\u542b\n\t\t\tres=(res+mod-((it->r+it->l)%mod*((it->r-it->l+1)%mod)%mod*(it->d%mod)%mod*inv%mod)%mod)%mod;\n\t\t\ts.erase(*it);\n\t\t}\n\t\telse{//\u53f3\u7aef\u70b9\u5728\u533a\u95f4\u5916\n\t\t\tnode tmp=*it;\n\t\t\tres=(res+mod-((r+it->l)%mod*((r-it->l+1)%mod)%mod*(it->d%mod)%mod*inv%mod)%mod)%mod;\n\t\t\ts.erase(*it);\n\t\t\ts.insert((node){r+1,tmp.r,tmp.d});\n\t\t}\n\t\tit=s.lower_bound((node){l,0,d});\n\t}\n\tif(it!=s.begin()){\n\t\tit--;\n\t\tif(it->r>=l){//\u8981\u6c42\u6709\u4ea4\n\t\t\tif(it->r<=r){//\u5de6\u7aef\u70b9\u5728\u533a\u95f4\u5916\n\t\t\t\tnode tmp=*it;\n\t\t\t\tres=(res+mod-((it->r+l)%mod*((it->r-l+1)%mod)%mod*(it->d%mod)%mod*inv%mod)%mod)%mod;\n\t\t\t\ts.erase(*it);\n\t\t\t\ts.insert((node){tmp.l,l-1,tmp.d});\n\t\t\t}\n\t\t\telse {//\u533a\u95f4\u5b8c\u5168\u88ab\u5305\u542b\n\t\t\t\tnode tmp=*it;\n\t\t\t\tres=(res+mod-((r+l)%mod*((r-l+1)%mod)%mod*(it->d%mod)%mod*inv%mod)%mod)%mod;\n\t\t\t\ts.erase(*it);\n\t\t\t\ts.insert((node){tmp.l,l-1,tmp.d});\n\t\t\t\ts.insert((node){r+1,tmp.r,tmp.d});\n\t\t\t}\n\t\t}\n\t\t\n\t}\n\ts.insert((node){l,r,d});\n\treturn res;\n}\nll n,m;\nvoid solve(){\n\tn=R,m=R;\n\twhile(m--){\n\t\tll d=R,l=R,r=R;\n\t\twe(ins(l,r,d));\n\t}\n\treturn ;\n}\n```\n\n",
        "postTime": 1669257178,
        "uid": 93707,
        "name": "Rnfmabj",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 [ABC255Ex] Range Harvest Query"
    },
    {
        "content": "\u9898\u610f\uff1a\n\n\u7ed9\u5b9a\u4e00\u7247 $n$ \u683c\u7684\u519c\u7530\uff0c\u4ece\u7b2c $0$ \u5929\u5f00\u59cb\uff0c\u7b2c $i$ \u683c\u519c\u7530\u6bcf\u5929\u4f1a\u957f\u51fa $i$ \u7684\u4f5c\u7269\u3002\n\n\u7ed9\u51fa $q$ \u4e2a\u8be2\u95ee\uff0c\u6bcf\u6b21\u8be2\u95ee\u4ee5 $d,l,r$ \u7684\u683c\u5f0f\u7ed9\u51fa\uff0c\u8868\u793a\u8be2\u95ee\u5728\u7b2c $d$ \u5929\uff0c\u6536\u5272 $[l,r]$ \u7684\u519c\u7530\uff0c\u4f1a\u83b7\u5f97\u591a\u5c11\u4f5c\u7269\uff1f\u7b54\u6848\u5bf9 $998244353$ \u53d6\u6a21\u3002\u6ce8\u610f\u8be2\u95ee\u76f8\u4e92\u4f9d\u8d56\uff0c\u5373\u5728\u6bcf\u4e00\u6b21\u6536\u5272\u540e\uff0c$[l,r]$ \u7684\u4f5c\u7269\u5e94\u5f53\u6e05\u96f6\u3002\n\n\u601d\u8def\uff1a\n\n\u5bf9\u4e8e\u4e0a\u4e00\u6b21\u6536\u5272\u5929\u6570\u90fd\u662f $d_0$ \u7684\u4e00\u6bb5 $[l,r]$\uff0c\u82e5\u5728 $d$ \u5929\u6536\u5272\uff0c\u5219\u83b7\u5f97\u7684\u4f5c\u7269\u662f $(d-d_0)\\sum\\limits^r_{i=l}i=\\frac{(d-d_0)(l+r)(r-l+1)}{2}$\u3002\n\n\u6211\u4eec\u9700\u8981\u7ef4\u62a4\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u7ef4\u62a4\u503c\u57df\uff08$d$\uff09\u76f8\u540c\u7684\uff0c\u8fde\u7eed\u7684\u4e00\u6bb5\uff0c\u4ee5\u53ca\u533a\u95f4\u8d4b\u503c\u64cd\u4f5c\u3002\u8fd9\u53ef\u4ee5\u7528\u73c2\u6735\u8389\u6811\u6765\u89e3\u51b3\u3002\n\n\u590d\u6742\u5ea6\u5206\u6790\uff1a\u8986\u76d6 $q$ \u6b21\uff0c\u6700\u591a\u6709 $O(q)$ \u7ea7\u522b\u7684\u5757\u6570\uff0c\u6240\u4ee5\u5168\u5c40\u4f1a\u88ab\u5176\u5b83\u5757\u7ed9\u8986\u76d6\u7684\u5757\u6700\u591a\u4e5f\u53ea\u6709 $O(q)$ \u7684\u7ea7\u522b\uff0c\u7528 `set` \u7ef4\u62a4\uff0c\u63d2\u5165\u5220\u9664\u4e00\u4e2a\u5757\u7684\u590d\u6742\u5ea6\u90fd\u662f $O(\\log q)$\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6 $O(q\\log q)$\u3002\n\n\u597d\u66b4\u529b\u554a\u3002\n\n```\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int mod = 998244353, inv = 499122177;\nstruct node {\n\tll l, r;\n\tmutable ll v;\n\tnode(ll _l = -1, ll _r = -1, ll _v = -1) {\n\t\tl = _l, r = _r, v = _v;\n\t}\n\tbool operator < (const node &o) const {\n\t\treturn l < o.l;\n\t}\n};\nmultiset<node> T;\ninline auto split(ll pos) {\n\tauto it = T.lower_bound(node(pos));\n\tif (it != T.end() && it->l == pos) return it;\n\t--it;\n\tnode tmp(*it);\n\tT.erase(it);\n\treturn (T.insert(node(tmp.l, pos - 1, tmp.v)), T.insert(node(pos, tmp.r, tmp.v)));\n}\ninline ll assign(ll l, ll r, ll v) {\n\tauto itr = split(r + 1), itl = split(l);\n\tll res = 0;\n\tfor (auto it = itl; it != itr; ++it) {\n\t\tres += (v - it->v) % mod * ((it->l + it->r) % mod) % mod * ((it->r - it->l + 1) % mod) % mod * inv % mod;\n\t\tres >= mod ? res -= mod : 0;\n\t}\n\tT.erase(itl, itr);\n\tT.insert(node(l, r, v));\n\treturn res;\n}\nint main() {\n\tcin.tie(nullptr)->sync_with_stdio(false);\n\tcout.tie(nullptr);\n\tll n, q;\n\tcin >> n >> q;\n\tT.insert(node(1, n, 0));\n\twhile (q--) {\n\t\tll v, l, r;\n\t\tcin >> v >> l >> r;\n\t\tcout << assign(l, r, v) << '\\n';\n\t}\n\treturn 0;\n}\n\n```",
        "postTime": 1667301462,
        "uid": 434929,
        "name": "Usada_Pekora",
        "ccfLevel": 7,
        "title": "ABC255Ex \u73c2\u6735\u8389\u6811\u677f\u5b50"
    }
]