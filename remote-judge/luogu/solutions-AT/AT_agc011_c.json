[
    {
        "content": "\u53ef\u4ee5\u8003\u8651\u70b9$(x,y)$\u548c\u70b9$(x',y')$\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u9700\u8981\u6ee1\u8db3\u4ec0\u4e48\u6761\u4ef6\u3002\n\n\u65b0\u56fe\u70b9$(a,b)$\u548c\u70b9$(a',b')$\u6709\u8fb9\u7684\u6761\u4ef6\u662f$a$\u5230$a'$\u6709\u8fb9\uff0c$b$\u5230$b'$\u6709\u8fb9\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e2a\u8fc7\u7a0b\u89c6\u4f5c\u6211\u4eec\u4ece$a$\u8d70\u5230\u4e86$a'$\uff0c\u4ece$b$\u8d70\u5230\u4e86$b'$\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u6761\u4ef6\u5c31\u6bd4\u8f83\u76f4\u89c2\u4e86\uff0c\u4e3a\uff1a\n\n\u5728\u539f\u56fe\u4e2d\u5b58\u5728\u4e00\u6761$x$\u5230$x'$\uff0c$y$\u5230$y'$\uff0c\u4e14\u957f\u5ea6\u76f8\u540c\u7684\u8def\u5f84\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u53ef\u4ee5\u5728\u4e24\u70b9\u95f4\u6765\u56de\u8d70\u52a8\uff0c\u6240\u4ee5\u53ef\u4ee5\u8fdb\u4e00\u6b65\u628a\u8fd9\u4e2a\u6761\u4ef6\u7b80\u5316\u4e3a\uff1a\n\n\u5728\u539f\u56fe\u4e2d\u5b58\u5728\u4e00\u6761$x$\u5230$x'$\uff0c$y$\u5230$y'$\uff0c\u4e14\u957f\u5ea6\u5947\u5076\u6027\u76f8\u540c\u7684**\u7b80\u5355\u8def\u5f84**\u3002\n\n\u6b64\u65f6\u53ef\u4ee5\u53d1\u73b0\uff0c\u82e5\u4e00\u4e2a\u8fde\u901a\u5757\u4e2d\u5b58\u5728\u5947\u73af\uff0c\u5219\u8be5\u8fde\u901a\u5757\u4efb\u610f\u4e24\u70b9\u95f4\u65e2\u5b58\u5728\u4e00\u6761\u5076\u8def\u5f84\uff0c\u53c8\u5b58\u5728\u4e00\u6761\u5947\u8def\u5f84\u3002\u5426\u5219\u53ef\u4ee5\u5bf9\u8be5\u8fde\u901a\u5757\u8fdb\u884c\u9ed1\u767d\u67d3\u8272\uff0c\u76f8\u540c\u989c\u8272\u7684\u70b9\u4e4b\u95f4\u8def\u5f84\u4e3a\u5076\u6570\uff0c\u4e0d\u540c\u989c\u8272\u7684\u70b9\u4e4b\u95f4\u4e3a\u5947\u6570\u3002\n\n\u5bf9\u4e8e\u53ea\u6709\u4e00\u4e2a\u70b9\u7684\u8fde\u901a\u5757\u56e0\u4e3a\u5176\u65e0\u6cd5\u8d70\u52a8\uff0c\u6240\u4ee5\u9700\u8981\u5355\u72ec\u5904\u7406\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u8be5\u95ee\u9898\u4e0e\u6bcf\u4e2a\u8fde\u901a\u5757\u7684\u5927\u5c0f\u5e76\u65e0\u5173\uff08\u56e0\u4e3a\u76f8\u540c\u5c5e\u6027\u7684\u4e8c\u5143\u70b9\u65b0\u56fe\u4e2d\u4e00\u5b9a\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\uff09\uff0c\u81f3\u4e8e\u4e09\u79cd\u8fde\u901a\u5757\u7684\u6570\u91cf\u6709\u5173\uff0c\u4e0d\u59a8\u5047\u8bbe\u5176\u6570\u91cf\u5206\u522b\u4e3a$A,B,C$\uff0c\u5206\u522b\u4e3a$a$\u7c7b\uff0c$b$\u7c7b\uff0c$c$\u7c7b\u3002\n\n\uff08\u76f8\u540c\u5c5e\u6027\u540c\u4e00\u7ef4\u6307\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\uff0c\u4e14\u8be5\u8fde\u901a\u5757\u6709\u5947\u73af\u6216\u4e24\u70b9\u989c\u8272\u76f8\u540c\uff09\n\n\u7565\u52a0\u63a8\u5bfc\u53ef\u4ee5\u53d1\u73b0\uff08\u7edf\u8ba1\u7b54\u6848\u662f\u5148\u7edf\u8ba1$a$\u7c7b\uff0c\u518d\u7edf\u8ba1$b$\u7c7b\uff0c\u6700\u540e\u7edf\u8ba1$c$\u7c7b\uff09\uff1a\n\n\u5bf9\u4e8e\u4e00\u4e2a$a$\u7c7b\uff0c\u81ea\u5df1\u53ef\u4ee5\u4ea7\u751f$1$\u7684\u8d21\u732e\uff08\u4e24\u7ef4\u90fd\u5c5e\u4e8e\u8be5\u8fde\u901a\u5757\uff09\uff0c\u53ef\u4ee5\u4e0e\u5176\u5b83$a$\u7c7b\u9020\u6210$2$\u7684\u8d21\u732e\uff08\u81ea\u5df1\u5728\u7b2c\u4e00\u7ef4/\u7b2c\u4e8c\u7ef4\uff09\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a$b$\u7c7b\uff0c\u81ea\u5df1\u53ef\u4ee5\u4ea7\u751f$2$\u7684\u8d21\u732e\uff08\u4e24\u7ef4\u989c\u8272\u76f8\u540c/\u989c\u8272\u4e0d\u540c\uff09\uff0c\u53ef\u4ee5\u4e0e\u5176\u4ed6$b$\u7c7b\u9020\u6210$4$\u7684\u8d21\u732e\uff08\u81ea\u5df1\u5728\u7b2c\u4e00\u7ef4/\u7b2c\u4e8c\u7ef4\uff0c\u4e24\u7ef4\u989c\u8272\u76f8\u540c/\u4e0d\u540c\uff09\uff0c\u53ef\u4ee5\u4e0e\u5176\u4ed6$a$\u7c7b\u9020\u6210$2$\u7684\u8d21\u732e\uff08\u81ea\u5df1\u5728\u7b2c\u4e00\u7ef4/\u7b2c\u4e8c\u7ef4\uff09\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a$c$\u7c7b\uff0c\u5047\u8bbe\u73b0\u5728\u6709$num$\u4e2a**\u8282\u70b9**\uff08\u4e0d\u662f\u8fde\u901a\u5757\uff09\uff0c\u90a3\u4e48\u5176\u53ef\u4ee5\u9020\u6210$2*num+1$\u7684\u8d21\u732e\uff08\u81ea\u5df1\u5728\u7b2c\u4e00\u7ef4/\u7b2c\u4e8c\u7ef4+\u81ea\u5df1\u8ddf\u81ea\u5df1\uff09\u3002\n\n\u76f4\u63a5$O(n)$\u7edf\u8ba1\u5373\u53ef\u3002\n\n### \u4ee3\u7801\n\n```cpp\n//W4P3R\n#include<bits/stdc++.h>\n#define inf 1e9\n#define eps 1e-6\n#define mp make_pair\n#define pb push_back\n#define re register ll\n#define fr first\n#define sd second\n#define pa pair<ll,ll>\n#define FOR(i,a,b) for(re i=a;i<=b;i++)\n#define REP(i,a,b) for(re i=a;i>=b;i--)\n#define N 100010\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ninline ll read()\n{\n\tchar ch=getchar();\n\tll s=0,w=1;\n\twhile(ch<'0'||ch>'9'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){s=s*10+ch-'0';ch=getchar();}\n\treturn s*w;\n}\ninline ll lowbit(ll x){return x&(-x);}\nll n,m,vis[N],deg[N],A,B,C;vector<ll>e[N];\nll dfs(ll x,ll col)\n{\n\tvis[x]=col;ll flag=1;\n\tfor(ll y:e[x])\n\t{\n\t\tif(vis[y]){if(vis[y]!=3-vis[x]){flag=0;}}//\u6709\u5947\u73af\n\t\telse {flag&=dfs(y,3-col);}\n\t}\n\treturn flag;\n}//\u9ed1\u767d\u67d3\u8272\nint main()\n{\n\t//ios::sync_with_stdio(false);\n\t//freopen(\".in\",\"r\",stdin);\n\t//freopen(\".out\",\"w\",stdout);\n\tn=read(),m=read();\n\tFOR(i,1,m)\n\t{\n\t\tll x=read(),y=read();\n\t\te[x].pb(y),e[y].pb(x);\n\t\tdeg[x]++,deg[y]++;\n\t}\n\tFOR(i,1,n)if(!vis[i])\n\t{\n\t\tif(!deg[i]){C++;continue;}//c\u7c7b\n\t\telse dfs(i,1)?B++:A++;\n\t}\n\tll s=0,ans=0;\n\twhile(A--)\n\t{\n\t\tans++;\n\t\tans+=2*s;\n\t\ts++;\n\t}\n\twhile(B--)\n\t{\n\t\tans+=2;\n\t\tans+=2*s;\n\t\ts+=2;\n\t}\n\ts=n-C;//num\n\twhile(C--)\n\t{\n\t\tans++;\n\t\tans+=s*2;\n\t\ts++;\n\t}\n\tcout<<ans<<'\\n';\n\treturn 0;\n}\n//gl\n\n```\n\n**\u5982\u679c\u4f60\u89c9\u5f97\u8fd9\u7bc7\u9898\u89e3\u5bf9\u4f60\u6709\u5e2e\u52a9\uff0c\u90a3\u4f60\u53ef\u4ee5\u70b9\u4e2a\u8d5e\u652f\u6301\u6211\u4e00\u4e0bqwq\u3002\u5982\u679c\u4f60\u5bf9\u9898\u89e3\u6709\u4efb\u4f55\u95ee\u9898/\u8ba4\u4e3a\u6211\u7684\u9898\u89e3\u6709\u4efb\u4f55\u95ee\u9898\uff0c\u53ef\u4ee5\u79c1\u4fe1/\u5728\u8bc4\u8bba\u533a\u53d1\u51fa\u6765\uff0c\u5f53\u7136\u5982\u679c\u4f60\u5bf9\u6211\u7684\u9898\u89e3\u6709\u4efb\u4f55\u610f\u89c1/\u5efa\u8bae\u4e5f\u6b22\u8fce\u6307\u51fa\u3002\u6211\u4f1a\u5c3d\u6211\u5168\u529b\u628a\u6211\u9898\u89e3\u5199\u5230\u6700\u597d\u7684qwq**\n\n\n",
        "postTime": 1608010343,
        "uid": 72419,
        "name": "WAPER4EVER",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT2339 \u3010[AGC011C] Squared Graph\u3011"
    },
    {
        "content": "### \u601d\u8def\n\n\u8003\u8651\u627e\u5230\u4e00\u4e2a\u5947\u73af $(p_1,p_2,\\dots,p_m)$\uff0c\u5219\u8003\u8651\u4e00\u6761\u8fb9 $(a,b)$\uff0c\u6211\u4eec\u6709\n\n$$(a,p_1)-(b,p_2)-(a,p_3)-\\dots-(a,p_m)-(b,p_1)$$\n\n\u56e0\u6b64\u4e00\u4e2a\u7b2c\u4e8c\u7ef4\u542b\u5947\u73af\u7684\u8054\u901a\u5757\uff0c\u5bf9\u4e8e\u7b2c\u4e00\u7ef4\u7684\u5404\u4e2a\u8054\u901a\u5757\uff0c\u90fd\u662f\u5206\u522b\u8054\u901a\u7684\u3002**\u53ea\u8981\u7b2c\u4e00\u7ef4\u4e0d\u662f\u5355\u70b9**\u3002\n\n\u7b2c\u4e00\u7ef4\u542b\u5947\u73af\u540c\u7406\u3002\n\n\u5bf9\u4e8e\u5355\u70b9\uff0c\u5176\u4f5c\u4e3a\u7b2c\u4e00\u7ef4\u6216\u7b2c\u4e8c\u7ef4\u65f6\uff0c\u4ecd\u7136\u4e0d\u4e0e\u5176\u4ed6\u70b9\u8054\u901a\u3002\n\n\u8003\u8651\u4e24\u7ef4\u90fd\u4e0d\u542b\u5947\u73af\u7684\u975e\u5355\u70b9\u7684\u8054\u901a\u5757\uff0c\u90a3\u5c31\u662f\u4e8c\u5206\u56fe\uff0c\u70b9\u96c6\u603b\u53ef\u5206\u6210\u5de6\u3001\u53f3\u90e8\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\u6070\u6709 $2$ \u4e2a\u8054\u901a\u5757\uff1a\u4e24\u7ef4\u5747\u5728\u5de6\u90e8\uff0c\u6216\u5747\u5728\u53f3\u90e8\uff1b\u4e24\u7ef4\u4e00\u4e2a\u5728\u5de6\u90e8\uff0c\u4e00\u4e2a\u5728\u53f3\u90e8\u3002\u8fd9\u4e24\u7c7b\u5206\u522b\u6784\u6210\u4e00\u4e2a\u8054\u901a\u5757\u3002\n\n\u56e0\u6b64\uff0c\u8bbe\u5355\u70b9\u6709 $a$ \u4e2a\uff0c\u542b\u5947\u73af\u7684\u8054\u901a\u5757\u6709 $b$ \u4e2a\uff0c\u975e\u5355\u70b9\u7684\u4e8c\u5206\u56fe\u8054\u901a\u5757\u6709 $c$ \u4e2a\uff0c\u603b\u70b9\u6570\u6709 $n$ \u4e2a\uff0c\u5219\u603b\u7b54\u6848\u4e3a\n\n$$a(2n-a)+(b+c)^2+c^2$$\n\n\u76f4\u63a5\u4e8c\u5206\u56fe\u67d3\u8272\u5224\u5947\u73af\u5373\u53ef\u89e3\u51b3\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(n)$\u3002\n\n### Code\n\n\u6838\u5fc3\u4ee3\u7801\u5f88\u77ed\u3002\n\n```cpp\nstd::vector<uint>Way[100005];\nuint Dfn[100005],cnt;\nbol C[100005];\nbol dfs(uint p){\n    Dfn[p]=cnt++;\n    bol op=false;\n    for(auto s:Way[p])if(~Dfn[s])op|=C[p]==C[s];else C[s]=!C[p],op|=dfs(s);\n    return op;\n}\nint main()\n{\n#ifdef MYEE\n    freopen(\"QAQ.in\",\"r\",stdin);\n    // freopen(\"QAQ.out\",\"w\",stdout);\n#endif\n    uint n,m;scanf(\"%u%u\",&n,&m);for(uint i=0;i<n;i++)Dfn[i]=-1;\n    while(m--){uint u,v;scanf(\"%u%u\",&u,&v),Way[--u].push_back(--v),Way[v].push_back(u);}\n    uint a=0,b=0,c=0;\n    for(uint i=0;i<n;i++)if(!~Dfn[i]){if(Way[i].empty())a++;else(dfs(i)?b:c)++;}\n    // printf(\"%u %u %u\\n\",a,b,c);\n    printf(\"%llu\\n\",(ullt)a*(2*n-a)+(ullt)(b+c)*(b+c)+(ullt)c*c);\n    return 0;\n}\n```\n",
        "postTime": 1676860207,
        "uid": 105050,
        "name": "myee",
        "ccfLevel": 7,
        "title": "agc011_c"
    },
    {
        "content": "# \u3010AGC011C\u3011Squared Graph\n\n\u4e00\u9053\u7ed3\u8bba\u9898\u3002\u9898\u89e3\u7684\u7ed3\u8bba\u771f\u662f\u795e\u4e86\uff0c\u5e76\u4e0d\u77e5\u9053\u51fa\u9898\u4eba\u662f\u600e\u4e48\u60f3\u5230\u8fd9\u4e1c\u897f\u7684\uff0c\u8fd9\u91cc\u8bf4\u4e00\u4e0b\u7ed3\u8bba\u5427\n\n1. \u5bf9\u4e8e\u4e00\u4e2a\u539f\u56fe\u4e2d\u72ec\u7acb\u7684\u70b9x\uff0c\u65b0\u56fe\u7684(x,i)\u4e0e(i,x)\u5747\u4e3a\u72ec\u7acb\u7684\u70b9\u3002\u6545\u8bbe\u539f\u56fe\u4e2d\u72ec\u7acb\u70b9\u6570\u91cf\u4e3ap\uff0c\u90a3\u4e48\u72ec\u7acb\u70b9\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662fpn+(n-p)p\n\n2. \u5bf9\u4e8e\u539f\u56fe\u4e2d\u7684\u4e00\u4e2a\u65e0\u5947\u73af\u8054\u901a\u5757\uff0c\u5b83\u53ef\u4ee5\u4e0e\u4efb\u4e00\u8054\u901a\u5757\u7ec4\u6210\u65b0\u56fe\u7684\u4e24\u4e2a\u4e0d\u540c\u8054\u901a\u5757\u3002\u90a3\u4e48\u8bbe\u8fd9\u79cd\u8054\u901a\u5757\u6709c\u4e2a\uff0c\u8fd9\u79cd\u8054\u901a\u5757\u4e24\u4e24\u7ec4\u5408\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662fc\\*c\\*2\n3. \u5bf9\u4e8e\u539f\u56fe\u79cd\u7684\u4e00\u4e2a\u6709\u5947\u73af\u8054\u901a\u5757\uff0c\u5b83\u53ef\u4ee5\u4e0e\u4efb\u4e00\u8054\u901a\u5757\u7ec4\u6210\u65b0\u56fe\u7684\u4e00\u4e2a\u8054\u901a\u5757\uff08\u82e5\u4e0e\u5b83\u7ec4\u5408\u7684\u662f\u65e0\u5947\u73af\u8054\u901a\u5757\uff0c\u5219\u4e24\u4e2a\uff09\u3002\u8bbe\u8fd9\u79cd\u8054\u901a\u5757\u6709d\u4e2a\uff0c\u5219\u5b83\u4e0e\u5176\u5b83\u8054\u901a\u5757\u7ec4\u5408\u5bf9\u7b54\u6848\u7684\u8d21\u732e\u5c31\u662fd\\*(d+c\\*2)\n\n\u4e25\u683c\u8bc1\u660e\u6211\u4e5f\u4e0d\u4f1a\u3002\u4f46\u4ed4\u7ec6\u601d\u8003\uff0c\u6b63\u786e\u6027\u8fd8\u662f\u6bd4\u8f83\u663e\u7136\u7684\u3002YY\u8fc7\u7a0b\u6bd4\u8f83\u4e71\uff0c\u5c31\u4e0d\u732e\u4e11\u4e86\n\n```cpp\n#include<bits/stdc++.h>\n#define MP make_pair\n#define FR first\n#define SE second\nusing namespace std;\n\nconst int S=(1<<20)+5;\nchar buf[S],*H,*T;\ninline char Get()\n{\n    if(H==T) T=(H=buf)+fread(buf,1,S,stdin);\n    if(H==T) return -1;return *H++;\n}\ninline int read()\n{\n    int x=0;char c=Get();\n    while(!isdigit(c)) c=Get();\n    while(isdigit(c)) x=x*10+c-'0',c=Get();\n    return x;\n}\n\nconst int N=200010;\nstruct Edge{int to,next;} e[N<<1];\nint fa[N],sz[N],n,m,h[N],sum=0;\npair<int,int> circle[N];\nbool parity[N],odd[N];\nint cnt[2];\n\nint find(int x){return fa[x]==x?x:fa[x]=find(fa[x]);}\n\nvoid add_edge(int u,int v)\n{\n    e[++sum].to=v;\n    e[sum].next=h[u];\n    h[u]=sum;\n}\n\nvoid dfs(int u,int fa)\n{\n    parity[u]=parity[fa]^1;\n    for(int t=h[u];t;t=e[t].next)\n        if(e[t].to!=fa) dfs(e[t].to,u);\n}\n\nint main()\n{\n    int u,v,tot=0;\n    n=read();m=read();\n    for(int i=1;i<=n;i++) fa[i]=i,sz[i]=1;\n    for(int i=1;i<=m;i++)\n    {\n        u=read();v=read();\n        if(find(u)!=find(v))\n        {\n            add_edge(u,v);\n            add_edge(v,u);\n            u=find(u);v=find(v);\n            fa[u]=v;sz[v]+=sz[u];\n        }\n        else circle[++tot]=MP(u,v);\n    }\n    for(int i=1;i<=n;i++)\n        if(fa[i]==i) dfs(i,0);\n    for(int i=1;i<=tot;i++)\n        if(parity[circle[i].FR]==parity[circle[i].SE])\n            odd[find(circle[i].FR)]=1;\n    int alone=0;\n    long long ans=0;\n    for(int i=1;i<=n;i++)\n    {\n        if(fa[i]!=i) continue;\n        if(sz[i]==1) alone++,ans+=n;\n        else cnt[odd[i]]++;\n    }\n    ans+=1ll*(n-alone)*alone;\n    ans+=2ll*cnt[0]*cnt[0];\n    ans+=1ll*cnt[1]*(cnt[1]+2*cnt[0]);\n    cout<<ans<<endl;\n    return 0;\n}\n```\n\n",
        "postTime": 1538218383,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 AT2339 \u3010Squared Graph\u3011"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u601d\u8003 $(a,b)$ \u548c $(c,d)$ \u600e\u6837\u624d\u80fd\u591f\u8fde\u901a\uff0c\u7b54\u6848\u662f\u5b58\u5728\u4e00\u6761\u8def\u5f84 $a\\to s_1\\to s_2\\to \\cdots \\to s_n\\to c$\uff0c\u4e14\u6709\u4e00\u6761\u540c\u6837\u957f\u5ea6\u7684\u8def\u5f84 $b\\to t_1\\to t_2\\to \\cdots\\to t_n\\to d$ \u65f6\u624d\u80fd\u591f\u8fde\u901a\u3002\n\n\u5148\u4ece\u7b80\u5355\u7684\u60c5\u51b5\u5f00\u59cb\u8003\u8651\uff1a\n\n- \u5b64\u7acb\u70b9\u4e0e\u5176\u5b83\u6240\u6709\u70b9\u4e4b\u95f4\u7684\u4e8c\u5143\u7ec4\u90fd\u4e0d\u4e92\u76f8\u8fde\u901a\uff0c\u56e0\u4e3a\u5b64\u7acb\u70b9\u6ca1\u6709\u4e00\u6761\u8def\u5f84\u53ef\u8d70\u3002\n\n- \u5bf9\u4e8e\u4e00\u68f5\u6811\uff0c\u53ef\u4ee5\u53d1\u73b0\u8ddd\u79bb\u5947\u5076\u6027\u76f8\u540c\u7684\u70b9\u5bf9\u4e4b\u95f4\u53ef\u4ee5\u8fde\u8fb9\uff0c\u65b9\u6848\u53ef\u4ee5\u7531\u540c\u65f6\u5c3d\u91cf\u79fb\u5230\u76f4\u5f84\u4e24\u7aef\u7684\u65b9\u6cd5\u6765\u6784\u9020\u3002\n\n- \u6269\u5c55\u4e00\u4e0b\uff1a\u5bf9\u4e8e\u4e00\u5f20\u8fde\u901a\u4e8c\u5206\u56fe\uff0c\u53ef\u4ee5\u6839\u636e\u70b9\u5bf9\u6240\u5728\u96c6\u5408\u7684\u76f8\u540c / \u4e0d\u540c\u6765\u5212\u5206\u6210\u4e24\u4e2a\u8fde\u901a\u5757\u3002\u9996\u5148\u8fd9\u4e24\u4e2a\u8fde\u901a\u5757\u76f4\u63a5\u4e00\u5b9a\u4e0d\u80fd\u4e92\u76f8\u8fde\u8fb9\uff0c\u56e0\u4e3a\u540c\u65f6\u8d70\u4e00\u6b65\u4e0d\u80fd\u6539\u53d8\u6240\u5728\u96c6\u5408\u7684\u76f8\u540c\u6216\u4e0d\u540c\uff0c\u5145\u5206\u6027\u6613\u8bc1\u3002\u5fc5\u8981\u6027\u53ef\u4ee5\u627e\u4e00\u68f5\u751f\u6210\u6811\u3002\n\n- \u5bf9\u4e8e\u6709\u5947\u73af\u7684\u8fde\u901a\u56fe\uff0c\u5c06\u4e24\u4e2a\u70b9\u540c\u65f6\u79fb\u5230\u5947\u73af\u5904\u5c31\u53ef\u4ee5\u6539\u53d8\u6240\u5728\u96c6\u5408\u7684\u76f8\u540c\u6216\u4e0d\u540c\u3002\u8fd9\u4e2a\u65f6\u5019\u53ea\u6709\u4e00\u4e2a\u8fde\u901a\u5757\u3002\n\n- \u5bf9\u4e8e\u4e24\u4e2a\u4e0d\u540c\u8fde\u901a\u5757\u4e4b\u95f4\u7684\u70b9\uff0c\u663e\u7136\u5b83\u4eec\u4e0d\u4f1a\u8ddf\u5176\u5b83\u8fde\u901a\u5757\u626f\u4e0a\u5173\u7cfb\u3002\u6839\u636e\u4e4b\u524d\u7684\u8bba\u8bc1\uff0c\u53ef\u4ee5\u5f97\u5230\u8fd9\u6761\u6cd5\u5219\uff1a\n\n|     | \u5b64\u7acb\u70b9 | \u4e8c\u5206\u56fe | \u5947\u73af\u56fe |\n| :----------: | :----------: | :----------: | :----------: |\n| **\u5b64\u7acb\u70b9** | 1 | \u4e8c\u5206\u56fe\u5927\u5c0f | \u5947\u73af\u56fe\u5927\u5c0f |\n| **\u4e8c\u5206\u56fe** | \u4e8c\u5206\u56fe\u5927\u5c0f | 2 | 1 |\n| **\u5947\u73af\u56fe** | \u5947\u73af\u56fe\u5927\u5c0f | 1 | 1 |\n\n\u7edf\u8ba1\u6709\u591a\u5c11\u4e2a\u8fde\u901a\u5757\u662f\u5b64\u7acb\u70b9 / \u4e8c\u5206\u56fe / \u5947\u73af\u56fe\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6 $O(n+m)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\n#define For(i,a,b) for(int i=(a);i<=(b);++i)\n#define Rof(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int Maxn=2e5;\n\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;\n}\n\nint n,m,col[Maxn+5],cnt[3],tot,chk; ll ans;\nvector<int> v[Maxn+5];\n// \u5b64\u7acb\u70b9,\u4e8c\u5206\u56fe,\u5947\u73af\u56fe\n\ninline void dfs(int x,int id)\n{\n    col[x]=id,++tot;\n    for(auto y:v[x])\n    {\n        if(!col[y]) dfs(y,id^1);\n        else if(col[x]==col[y]) chk=1;\n    }\n}\ninline void Solve(int x)\n{\n    tot=0,chk=0,dfs(x,2);\n    if(tot==1) cnt[0]++;\n    else if(!chk) cnt[1]++;\n    else cnt[2]++;\n}\n\nint main()\n{\n    n=read(),m=read();\n    For(i,1,m)\n    {\n        int a=read(),b=read();\n        v[a].push_back(b),v[b].push_back(a);\n    }\n    For(i,1,n) if(!col[i]) Solve(i);\n    ans=cnt[0]+cnt[1]*2+cnt[2];\n    // \u5b64\u7acb\u70b9+\u5b64\u7acb\u70b9\n    ans+=1ll*cnt[0]*(cnt[0]-1);\n    // \u5b64\u7acb\u70b9+\u5176\u5b83\u70b9\n    ans+=2ll*cnt[0]*(n-cnt[0]);\n    // \u4e8c\u5206\u56fe+\u4e8c\u5206\u56fe\n    ans+=2ll*cnt[1]*(cnt[1]-1);\n    // \u4e8c\u5206\u56fe+\u5947\u73af\u56fe\n    ans+=2ll*cnt[1]*cnt[2];\n    // \u5947\u73af\u56fe+\u5947\u73af\u56fe\n    ans+=1ll*cnt[2]*(cnt[2]-1);\n    cout<<ans<<endl;\n    return 0;\n}\n```",
        "postTime": 1676876958,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 [AGC011C] Squared Graph"
    }
]