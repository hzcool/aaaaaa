[
    {
        "content": "# ABC273 Ex - Inv(0,1)ving Insert(1,0)n \u9898\u89e3\n\n[abc273_h](https://atcoder.jp/contests/abc273/tasks/abc273_h)\n\n## \u5f15\u5165\n\n\u9996\u5148\u9898\u76ee\u63cf\u8ff0\u7684\u4e1c\u897f\u5c31\u662f [$\\operatorname{Stern-Brocot\\ Tree}$](https://oi-wiki.org/math/number-theory/stern-brocot/)\uff0c\u4e0d\u4f1a\u4e5f\u6ca1\u6709\u5173\u7cfb\uff0c\u4f60\u53ea\u9700\u8981\u77e5\u9053\u4ee5\u4e0b\u51e0\u4e2a\u6027\u8d28\uff08\u4f5c\u8005\u81ea\u5df1\u5199\u7684\uff0c\u5efa\u8bae\u65e0\u8bba\u5927\u4f6c\u60a8\u4f1a\u4e0d\u4f1a\uff0c\u90fd\u770b\u4e0b\uff0c\u56e0\u4e3a\u540e\u9762\u53ef\u80fd\u4f1a\u7528\u5230\u6709\u5173\u6982\u5ff5\uff09\uff1a\n\n1. \u6811\u4e0a\u4efb\u610f\u4e00\u4e2a\u4e8c\u5143\u7ec4\uff0c**\u5747\u6709\u4e24\u5143\u7d20\u4e92\u8d28**\u3002\n2. \u5982\u679c\u628a\u6811\u4e0a\u6bcf\u4e2a\u4e8c\u5143\u7ec4\u7406\u89e3\u6210\u4e00\u4e2a\u65e2\u7ea6\u5206\u6570\uff0c\u5206\u5b50\u4e3a\u7b2c\u4e00\u4e2a\u5143\u7d20\u4e14\u5206\u6bcd\u4e3a\u7b2c\u4e8c\u4e2a\u5143\u7d20\uff08\u7279\u522b\u7684\uff0c$\\frac{1}{0}$ \u4e3a\u6b63\u65e0\u7a77\uff09\uff0c**\u4ee5\u4e0b\u82e5\u65e0\u7279\u6b8a\u8bf4\u660e\uff0c\u5747\u6309\u7167\u6b64\u65b9\u5f0f\u7406\u89e3**\u3002\n3. \u6309\u7167**\u4e2d\u5e8f\u904d\u5386**\u904d\u5386\u6574\u68f5\u6811\uff0c**\u5148\u8bbf\u95ee\u5230\u7684\u5143\u7d20\u4e00\u5b9a\u5c0f\u4e8e\u540e\u8bbf\u95ee\u5230\u7684\u5143\u7d20**\u3002\n\n\uff08\u5982\u679c\u60a8\u60f3\u8981\u8bc1\u660e\uff0c\u8fd8\u662f\u53bb\u770b\u4e0a\u9762\u7684\u94fe\u63a5\u5427\uff09\u3002\n\n## \u7ea6\u5b9a\n\n1. \u628a\u6bcf\u4e2a\u8282\u70b9\u4e0a\u7684**\u5206\u6570\u548c\u4e00\u4e2a\u7ebf\u6bb5\u5bf9\u5e94**\uff0c\u5373 $(\\frac{a}{b},\\frac{c}{d})$ \u4e0e\u5206\u6570 $\\frac{a+c}{b+d}$ \u5bf9\u5e94\uff08\u610f\u4e49\u662f\u8be5\u8282\u70b9\u5b50\u6811\u5185\u7684\u6240\u6709\u8282\u70b9\u90fd\u5728\u8fd9\u4e2a\u503c\u57df\u91cc\uff09\u3002\u7ebf\u6bb5\u8868\u793a\u548c\u5206\u6570\u8868\u793a\u5747\u6307\u8fd9\u4e2a\u8282\u70b9\u3002\n2. \u6839\u636e\u4e0d\u5408\u6cd5\u5143\u7d20\uff08$\\gcd$ \u4e0d\u4e3a $1$\uff09\u7684\u4f4d\u7f6e\uff0c\u53ef\u4ee5\u628a\u5e8f\u5217\u5206\u6210\u4e0d\u4ea4\u7684\u82e5\u5e72\u6bb5\uff0c\u6bcf\u4e00\u6bb5\u90fd\u53ef\u4ee5\u5355\u72ec\u5904\u7406\uff0c\u56e0\u6b64\uff0c\u4ee5\u4e0b\u8ba8\u8bba\u7684\u5e8f\u5217\u5168\u90e8\u5143\u7d20\u5408\u6cd5\u3002\n\n\n\n## \u6b63\u6587\n\n\u9996\u5148\u6211\u4eec\u8003\u8651\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5e8f\u5217 $p_{1},p_2,\\dots\uff0cp_n$\uff08$p_i$ \u662f\u4e00\u4e2a\u65e2\u7ea6\u5206\u6570\uff09\u3002\u539f\u95ee\u9898\u6c42\u7684\u95ee\u9898\u8bb0\u4e3a $p$ \u7684\u6240\u6709\u5b50\u533a\u95f4\u4e2d\u8282\u70b9\u5728 $\\operatorname{Stern-Brocot\\ Tree}$ \u4e0a\u751f\u6210\u7684\u865a\u6811\u70b9\u6743\u548c\uff08\u5176\u4e2d\u4e00\u4e2a\u70b9\u7684\u70b9\u6743\u662f**\u4ed6\u7684\u5728\u539f\u6811\u4e0a\u6df1\u5ea6**\u51cf\u53bb**\u4ed6\u865a\u6811\u4e0a\u7684\u7236\u4eb2\u5728\u539f\u6811\u4e0a\u7684\u6df1\u5ea6**\uff09\u3002\n\n\u6ce8\u610f\u5230 $\\frac{0}{1},\\frac{1}{0}$ \u5e76\u4e0d\u4f1a\u5bf9\u865a\u6811\u70b9\u6743\u9020\u6210\u8d21\u732e\uff0c\u8fd9\u90e8\u5206\u7ec6\u8282\u8bfb\u8005\u53ef\u4ee5\u81ea\u884c\u601d\u8003\u3002\n\n\u679a\u4e3e\u6bcf\u4e2a\u533a\u95f4\uff0c\u66b4\u529b\u5efa\u51fa\u865a\u6811\u662f\u4e0d\u53ef\u63a5\u53d7\u7684\u3002\u4f46\u662f\u6211\u4eec\u4f1a\u53d1\u73b0\u4e00\u4e2a\u4e8b\u60c5\uff0c\u5bf9\u4e8e\u4efb\u610f\u5b50\u533a\u95f4\u751f\u6210\u7684\u865a\u6811\uff0c\u5b83\u4e0a\u9762\u7684\u6240\u6709\u8282\u70b9**\u4e00\u5b9a\u90fd\u5728\u6574\u4e2a\u533a\u95f4\u751f\u6210\u7684\u865a\u6811\u4e0a\u51fa\u73b0\u8fc7**\u3002\n\n\u8fd9\u542f\u53d1\u6211\u4eec**\u76f4\u63a5\u5bf9\u6574\u4e2a\u533a\u95f4\u751f\u6210\u865a\u6811\uff0c\u5e76\u7edf\u8ba1\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\u8d21\u732e\u7684\u6b21\u6570**\u3002\n\n\u4e3a\u4e86\u65b9\u4fbf\uff0c\u6211\u4eec\u5c06\u8be5\u5e8f\u5217\u6392\u5e8f\uff0c\u5e76\u8bb0\u5f55\u6bcf\u4e2a\u5143\u7d20\u5728\u539f\u5e8f\u5217\u4e2d\u7684\u4f4d\u7f6e\u3002\uff08$pos_i$ \u8868\u793a\u6392\u5e8f\u540e\u6392\u540d\u4e3a $i$ \u7684\u4f4d\u7f6e\u5728\u539f\u5e8f\u5217\u4e2d\u7684\u4e0b\u6807\uff09\u3002**\u4ee5\u540e\u8bf4\u7684\u5e8f\u5217\u90fd\u6307\u7684\u662f\u65b0\u5e8f\u5217**\u3002\u90a3\u4e48\u6bcf\u4e2a $\\operatorname{Stern-Brocot\\ Tree}$ \u4e0a\u7684\u8282\u70b9\u5bf9\u5e94\u7684\u4e00\u5b9a\u662f\u65b0\u5e8f\u5217\u7684\u4e00\u6bb5\u533a\u95f4\uff08\u53ef\u4ee5\u4e3a\u7a7a\uff09\u3002\n\n### \u5efa\u7acb\u865a\u6811\u5e76\u8ba1\u7b97\u70b9\u6743\n\n\u5047\u8bbe\u6211\u4eec\u6b63\u5728\u67d0\u4e2a\u8282\u70b9 $(\\frac{a}{b},\\frac{c}{d})$ \u4e0a\uff0c\u5f53\u524d\u5e8f\u5217\u7684\u5b50\u533a\u95f4\u662f $[l,r](l\\le r)$\uff0c\u6211\u4eec\u4e00\u4e2a\u5206\u754c\u70b9 $lm$\uff0c\u4ee5\u53ca\u4e00\u4e2a\u5206\u754c\u70b9 $rm$\uff0c\u8868\u793a $[l,lm]$ \u4e2d\u7684\u5143\u7d20\u90fd\u5c0f\u4e8e $\\frac{a+c}{b+d}$\uff0c\u4e14 $[rm,r]$ \u4e2d\u5143\u7d20\u90fd\u5927\u4e8e $\\frac{a+c}{b+d}$\uff08\u663e\u7136 $(lm,rm)$ \u4e2d\u7684\u5143\u7d20\uff0c\u5982\u679c\u4ed6\u4eec\u5b58\u5728\u7684\u8bdd\uff0c\u90fd\u662f $\\frac{a+c}{b+d}$\uff09\u3002\n\n\u6211\u4eec\u5bf9\u4e8e $[l,lm],[rm,r]$ \u5206\u522b\u8003\u8651\uff0c\u56e0\u4e3a\u4e24\u8005\u57fa\u672c\u76f8\u540c\uff0c\u6240\u4ee5\u6211\u4eec\u8fd9\u91cc\u4ee5 $[l,lm]$ \u4e3a\u4f8b\u3002\n\n\u6211\u4eec\u8ba1\u7b97 $[l,lm]$ \u80fd\u591f\u4e00\u76f4\u5f80\u5de6\u8df3\u7684\u6df1\u5ea6\uff0c\u8bb0\u4e3a $k$\uff0c\u663e\u7136 $k$ \u4ec5\u4e0e $lm$ \u4f4d\u7f6e\u4e0a\u7684\u5143\u7d20\u6709\u5173\uff0c\u6240\u4ee5\u53ef\u4ee5\u6839\u636e\u4e0d\u7b49\u5f0f\uff1a\n$$\np_{lm}< \\frac{a+kc}{b+kd}\n$$\n$O(1)$ \u8ba1\u7b97\u51fa\u6700\u5927\u7684 $k$\u3002\n\n\u89e3\u91ca\uff1a\u4e0a\u9762\u7684\u4e0d\u7b49\u5f0f\u53f3\u8fb9\u4ee3\u8868\u7684\u662f\u76ee\u6807\u533a\u95f4\u7684\u53f3\u7aef\u70b9\u3002\n\n\u590d\u6742\u5ea6\u5206\u6790\uff1a\u9996\u5148\u7ed9\u51fa\u7ed3\u8bba\uff1a\u8282\u70b9\u4e2a\u6570\u7684\u590d\u6742\u5ea6\u4e0a\u9650\u662f $\\Theta(\\sum_{i=1}^{n}\\log\\max\\{a_i,b_i\\})$\u3002\u6211\u4eec\u6b63\u5411\u4e0d\u5bb9\u6613\u5206\u6790\u590d\u6742\u5ea6\uff0c\u4e8e\u662f\u53ef\u4ee5\u53cd\u5411\u8003\u8651\u3002\u6211\u4eec\u4e00\u6b21\u4e0a\u8df3\u4ece $(\\frac{a}{b},\\frac{c}{d}),(p_i=\\frac{a+c}{b+d})$ \u8fd9\u4e2a\u70b9\u5f80\u4e0a\u8df3\uff0c\u5047\u8bbe\u5f53\u524d\u70b9\u662f\u5176\u7236\u4eb2\u7684\u53f3\u513f\u5b50\uff0c\u4f1a\u8ba9 $a\\leftarrow a-kc,b\\leftarrow b-kd$\uff0c\u76f8\u5f53\u4e8e $(a+c)\\leftarrow a\\bmod c+c$\uff08$b+d$ \u540c\u7406\uff09\uff0c\u7c7b\u4f3c\u6c42 $\\gcd$ \u7684\u590d\u6742\u5ea6\u5206\u6790\uff0c\u6700\u591a\u4f1a\u8df3 $\\Theta(\\log\\max\\{a_i,b_i\\})$ \u6b21\u3002\n\n\u4e8e\u662f\uff0c**\u70b9\u6743\u5c31\u662f\u4ece\u7236\u4eb2\u5230\u4ed6\u8df3\u8fc7\u7684\u70b9\u6570**\u3002\n\n### \u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u8d21\u732e\u6b21\u6570\n\n\u8bb0 $S(n)=\\sum_{i=1}^{n}i=\\frac{n\\times(n+1)}{2}$\u3002\n\n\u6211\u4eec\u5047\u8bbe\u80fd\u66f4\u65b0\u5230\u5f53\u524d\u8282\u70b9\u7684\u5143\u7d20 $pos$ \u6392\u5e8f\u540e\u662f $x_1,x_2,\\dots,x_m$\uff0c\u5982\u679c\u6211\u4eec\u989d\u5916\u4ee4 $x_0=0,x_{m+1}=n+1$\uff0c\u90a3\u4e48\u65b9\u6848\u6570\u5c31\u662f $S(n)-\\sum_{i=1}^{m+1}S(x_{i}-x_{i-1}-1)$\uff0c\u610f\u601d\u5373\u4f7f\u5168\u90e8\u533a\u95f4\u51cf\u53bb\u4e0d\u5305\u542b\u8be5\u5e8f\u5217\u4e2d\u4efb\u4f55\u4e00\u4e2a\u70b9\u7684\u533a\u95f4\u3002\n\n\u8003\u8651\u5982\u679c\u6211\u4eec\u7528 `std::set` \u6765\u7ef4\u62a4\u8fd9\u4e9b\u4e0b\u6807\u96c6\u5408\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u505a\u5230\u5feb\u901f\u52a0\u3001\u5220\u5143\u7d20\uff08\u5355\u6b21 $O(\\log n)$\uff09\u5e76\u7ef4\u62a4\u6211\u4eec\u9700\u8981\u7684\u201c\u8d21\u732e\u6b21\u6570\u201d\u3002\n\n\u6bcf\u6b21\u6211\u4eec\u4f1a\u5c06\u8fd9\u4e2a\u96c6\u5408\u4e2d\u95f4\u7684\uff08$[lm+1,rm-1]$\uff09\u5220\u53bb\uff0c\u5e76\u628a\u5176\u4ed6\u7684\u5206\u6210\u4e24\u4efd\uff0c\u4e00\u4efd\u662f $[l,lm]$\uff0c\u53e6\u4e00\u4efd\u662f $[rm,r]$\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7**\u542f\u53d1\u5f0f\u5206\u88c2**\uff08\u81ea\u5df1 yy \u7684\u540d\u5b57\uff09\u505a\u5230 $O(n\\log^2 n)$\u3002\n\n\n\n\u81ea\u6b64\uff0c\u672c\u9898\u5168\u90e8\u89e3\u51b3\u3002\n\n\u8d34\u4e0a\u4ee3\u7801\uff1a\n\n```c++\n#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename F> inline void read(F &n) {\n\tF w = 1; n = 0;\n\tchar ch = getchar();\n\twhile (!isdigit(ch) && ch != EOF) { if(ch == '-') w = -1; ch = getchar(); } \n\twhile (isdigit(ch) && ch != EOF) { n = (n << 1) + (n << 3) + (ch & 15); ch = getchar(); }\n\tn *= w;\n}\ntemplate<typename T, typename ...L> inline void read(T &n,L &...l) { read(n); read(l...); }\ntypedef long long ll;\n\nconst int N = 1e5 + 5, mo = 998244353;\nint n, id[N], tot = 0;\nstruct fraction {\n    ll x, y;\n    fraction() { x = 0, y = 1; }\n    fraction(ll x, ll y) : x(x), y(y) {}\n    friend bool operator<(const fraction &x, const fraction &y) {\n        return (__int128)x.x * y.y < (__int128)y.x * x.y;\n    }\n    friend bool operator==(const fraction &x, const fraction &y) {\n        return x.x == y.x && x.y == y.y;\n    }\n} p[N];\nint gcd(int a, int b) { return b == 0 ? a : gcd(b, a % b); }\nll ans = 0, all;\nint L, R;\nll S(ll x) { return x * (x + 1) / 2 % mo; }\nvoid pls(ll &x, ll y) { x = x + y >= mo ? x + y - mo : x + y; }\nvoid mns(ll &x, ll y) { x = x < y ? x - y + mo : x - y; }\n\nint sL, sR; //for SET\nstruct SET {\n    ll cnt;\n    set<int> s;\n    SET() { cnt = 0; s.clear(); }\n    void insert(const int &x) {\n        auto it = s.insert(x).first;\n        int l = sL, r = sR;\n        if (it != s.begin()) l = *prev(it);\n        ++it; if (it != s.end()) r = *it;\n        pls(cnt, S(r - l - 1));\n        mns(cnt, S(x - l - 1));\n        mns(cnt, S(r - x - 1));\n    }\n    void erase(const int &x) {\n        auto it = s.find(x);\n        int l = sL, r = sR;\n        if (it != s.begin()) l = *prev(it);\n        ++it; if (it != s.end()) r = *it;\n        pls(cnt, S(x - l - 1));\n        pls(cnt, S(r - x - 1));\n        mns(cnt, S(r - l - 1));\n        s.erase(x);\n    }\n};\n\nint findL(int A, int B, const fraction &x) {\n    int mid, ans = A - 1;\n    while (A <= B) {\n        mid = (A + B) >> 1;\n        if (p[id[mid]] < x) ans = mid, A = mid + 1;\n        else B = mid - 1;\n    }\n    return ans;\n}\nint findR(int A, int B, const fraction &x) {\n    int mid, ans = B + 1;\n    while (A <= B) {\n        mid = (A + B) >> 1;\n        if (x < p[id[mid]]) ans = mid, B = mid - 1;\n        else A = mid + 1;\n    }\n    return ans;\n}\nvoid calc(int l, int r, SET &s, fraction x, fraction y, ll d) {\n    if (l > r) return;\n    pls(ans, s.cnt * (d % mo) % mo);\n    fraction mf(x.x + y.x, x.y + y.y);\n    int lm = findL(l, r, mf), rm = findR(l, r, mf);\n    for (int i = lm + 1; i < rm; ++i) s.erase(id[i]);\n    SET t;\n    if (lm - l < r - rm) {\n        for (int i = l; i <= lm; ++i) t.insert(id[i]), s.erase(id[i]);\n        swap(s, t);\n    } else {\n        for (int i = rm; i <= r; ++i) t.insert(id[i]), s.erase(id[i]);\n    }\n    ll down;\n    if (l <= lm) {\n        down = (y.x * p[id[lm]].y - y.y * p[id[lm]].x - 1) / (x.y * p[id[lm]].x - x.x * p[id[lm]].y);\n        assert(down > 0);\n        calc(l, lm, s, x, fraction(x.x * down + y.x, x.y * down + y.y), down);\n    }\n    if (rm <= r) {\n        down = (p[id[rm]].x * x.y - p[id[rm]].y * x.x - 1) / (p[id[rm]].y * y.x - p[id[rm]].x * y.y);\n        assert(down > 0);\n        calc(rm, r, t, fraction(x.x + y.x * down, x.y + y.y * down), y, down);\n    }\n}\n\nvoid solve(int L, int R) {\n    ::L = L, ::R = R;\n    all = S(R - L + 1);\n    tot = 0;\n    sL = L - 1, sR = R + 1;\n    SET st;\n    for (int i = L; i <= R; ++i) {\n        if (min(p[i].x, p[i].y) < 1) continue;\n        id[++tot] = i;\n        st.insert(i);\n    }\n    sort(id + 1, id + 1 + tot, [&](int i, int j) {\n        return p[i] < p[j];\n    });\n    calc(1, tot, st, fraction(0, 1), fraction(1, 0), 1);\n}\n\nint main() {\n    read(n);\n    for (int i = 1; i <= n; ++i) {\n        read(p[i].x, p[i].y);\n    }\n    int las = 0;\n    for (int i = 1; i <= n; ++i) {\n        if (max(p[i].x, p[i].y) < 1 || gcd(p[i].x, p[i].y) != 1) {\n            solve(las + 1, i - 1);\n            las = i;\n        }\n    }\n    if (las < n) solve(las + 1, n);\n    printf(\"%lld\\n\", ans);\n    return 0;\n}\n```",
        "postTime": 1666096214,
        "uid": 137176,
        "name": "lazytag",
        "ccfLevel": 7,
        "title": "ABC273 - Ex \u9898\u89e3"
    }
]