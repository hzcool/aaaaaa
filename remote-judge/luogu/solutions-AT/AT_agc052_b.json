[
    {
        "content": "\u8003\u8651\u8fb9\u6743\u8f6c\u70b9\u6743\uff0c\u8ba9\u8fb9\u6743\u6ee1\u8db3\u5176\u4e3a\u76f8\u90bb\u70b9\u6743\u7684\u5f02\u6216\u548c\uff0c\u64cd\u4f5c\u53d8\u6210\u4ea4\u6362\u4e24\u4e2a\u70b9\u7684\u70b9\u6743\u3002\n\n\u968f\u4fbf\u94a6\u5b9a\u4e00\u4e2a\u4e3a\u6839\uff0c\u8bbe $d_i$ \u4e3a\u521d\u59cb\u65f6 $i$ \u7684\u70b9\u6743\uff0c$f_i$ \u662f $i$ \u671f\u671b\u5f97\u5230\u4e3a\u591a\u5c11\u3002\u5982\u679c\u5b58\u5728 $d,f$\uff0c\u6ee1\u8db3\u5b83\u4eec\u662f\u76f8\u540c\u7684\u96c6\u5408\uff0c\u5c31\u6709\u89e3\u3002\n\n\u6ce8\u610f\u5230\u5982\u679c\u786e\u5b9a\u4e86\u4e00\u4e2a\u70b9\u7684\u70b9\u6743\uff0c\u90a3\u4e48\u5176\u4ed6\u6240\u6709\u70b9\u6743\u90fd\u80fd\u552f\u4e00\u7684\u786e\u5b9a\u3002\n\n\u73b0\u5728\u94a6\u5b9a $f_i$ \u4e3a $i$ \u5230\u6839\u8def\u5f84\u4e0a\u7684\u8fb9\u6743\u548c\uff08\u6216\u8005\u8bf4\u94a6\u5b9a $f_1=0$\uff09\uff0c\u6ce8\u610f\u5230\u4efb\u4f55\u4e00\u7ec4\u89e3\u90fd\u80fd\u628a\u6240\u6709\u70b9\u6743\u5f02\u6216 $f_1$\uff0c\u5f97\u5230 $f_1=0$ \u7684\u89e3\uff0c\u6240\u4ee5\u5224\u65ad\u662f\u5426\u6709\u89e3\u5c31\u5224\u65ad $f_1=0$ \u7684\u65f6\u5019\u662f\u5426\u6709\u89e3\u3002\n\n\u73b0\u5728 $f$ \u786e\u5b9a\u4e86\uff0c\u770b\u662f\u5426\u5b58\u5728 $d$\uff0c\u6ee1\u8db3 $d$ \u548c $f$ \u662f\u76f8\u540c\u7684\u96c6\u5408\u3002\n\n\u73b0\u5728\u7ee7\u7eed\u94a6\u5b9a $d_i$ \u4e3a $i$ \u5230\u6839\u8def\u5f84\u4e0a\u8fb9\u6743\u548c\uff0c\u4e0e $f$ \u76f8\u540c\uff0c\u6240\u6709\u53ef\u80fd\u4e3a\u7b54\u6848\u7684 $d'$ \u90fd\u662f $d$ \u5f02\u6216\u4e0a\u4e00\u4e2a $x$ \u5f97\u5230\u7684\u3002\n\n\u90a3\u4e48\u6709\u89e3\u7684\u5fc5\u8981\u6761\u4ef6\u5c31\u662f $(d_1\\oplus x)\\oplus (d_2\\oplus x)\\oplus...\\oplus (d_n\\oplus x)=f_1\\oplus f_2\\oplus...\\oplus f_n$\uff0c\u7531\u4e8e $n$ \u4e3a\u5947\u6570\uff0c\u6240\u4ee5\u53ef\u4ee5\u89e3\u51fa $x$ \u662f\u591a\u5c11\u3002\n\n\u7531\u4e8e\u8fd9\u4ec5\u662f\u5fc5\u8981\u6761\u4ef6\uff0c\u90a3\u4e48\u6700\u540e\u8fd8\u8981 $\\text{check}$ \u4e00\u4e0b\u662f\u5426\u5408\u6cd5\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#include<vector>\n#define pb emplace_back\n#define mp std::make_pair\n#define fi first\n#define se second\ntypedef long long ll;\ntypedef std::pair<int, int> pii;\ntypedef std::pair<ll, int> pli;\ntypedef std::pair<ll, ll> pll;\ntypedef std::vector<int> vi;\ntypedef std::vector<ll> vll;\nconst ll mod = 998244353;\nll Add(ll x, ll y) { return (x+y>=mod) ? (x+y-mod) : (x+y); }\nll Mul(ll x, ll y) { return x * y % mod; }\nll Mod(ll x) { return x < 0 ? (x + mod) : (x >= mod ? (x-mod) : x); }\nll cadd(ll &x, ll y) { return x = (x+y>=mod) ? (x+y-mod) : (x+y); }\ntemplate <typename T> T Max(T x, T y) { return x > y ? x : y; }\ntemplate <typename T> T Min(T x, T y) { return x < y ? x : y; }\ntemplate <typename T>\nT &read(T &r) {\n\tr = 0; bool w = 0; char ch = getchar();\n\twhile(ch < '0' || ch > '9') w = ch == '-' ? 1 : 0, ch = getchar();\n\twhile(ch >= '0' && ch <= '9') r = r * 10 + (ch ^ 48), ch = getchar();\n\treturn r = w ? -r : r;\n}\nconst int N = 100010;\nint n, ent, head[N];\nint d[N], f[N];\nstruct Edge {\n\tint next, to, v1, v2;\n}e[N << 1];\ninline void add(int x, int y, int w1, int w2) {\n\te[++ent].to = y; e[ent].next = head[x]; e[ent].v1 = w1; e[ent].v2 = w2; head[x] = ent;\n}\nvoid dfs(int x, int fa, int h1, int h2) {\n\td[x] = h1; f[x] = h2;\n\tfor(int i = head[x]; i; i = e[i].next) {\n\t\tint v = e[i].to; if(v == fa) continue ;\n\t\tdfs(v, x, h1 ^ e[i].v1, h2 ^ e[i].v2);\n\t}\n}\nsigned main() {\n\tread(n);\n\tfor(int i = 1; i < n; ++i) {\n\t\tint u, v, w1, w2; read(u); read(v); read(w1); read(w2);\n\t\tadd(u, v, w1, w2);\n\t\tadd(v, u, w1, w2);\n\t}\n\tdfs(1, 0, 0, 0);\n\tint x = 0;\n\tfor(int i = 1; i <= n; ++i) x ^= f[i] ^ d[i];\n\tfor(int i = 1; i <= n; ++i) d[i] ^= x;\n\tstd::sort(d + 1, d + n + 1);\n\tstd::sort(f + 1, f + n + 1);\n\tfor(int i = 1; i <= n; ++i)\n\t\tif(f[i] != d[i]) {\n\t\t\tputs(\"NO\");\n\t\t\treturn 0;\n\t\t}\n\tputs(\"YES\");\n\treturn 0;\n}\n```",
        "postTime": 1667613888,
        "uid": 223298,
        "name": "do_while_true",
        "ccfLevel": 8,
        "title": "\u300c\u9898\u89e3\u300dAGC052B Tree Edges XOR"
    }
]