[
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\u7ed9\u4f60 $n$ \u4e2a $0$ \u5230 $n-1$ \u5168\u6392\u5217\u7684\u6570\u7ec4\uff0c\u7136\u540e\u8fd9\u4e2a\u6570\u7ec4\u4f1a\u5faa\u73af\u5de6\u79fb $n-1$\n\u95ee\u4f60\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\u6570\u7ec4\u7684\u9006\u5e8f\u6570\u5bf9\u662f\u591a\u5c11\uff1f\n\n\n------------\n### \u89e3\u6790\n- \u9996\u5148\u8003\u8651\u5148\u6c42\u539f\u59cb\u5e8f\u5217\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\uff0c\u4e00\u5b9a\u5f97\u662f $O(n\\log n)$ \u7684\u7b97\u6cd5\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528\u5f52\u5e76\u6392\u5e8f\u548c\u6811\u72b6\u6570\u7ec4\u6765\u505a\u3002\u8fd9\u91cc\u4ecb\u7ecd\u7684\u662f\u6811\u72b6\u6570\u7ec4\u7684\u505a\u6cd5\u3002\n\n- \u8003\u8651\u5148\u7528\u6811\u72b6\u6570\u7ec4\u7684\u6734\u7d20\u505a\u6cd5\u6c42\u539f\u59cb\u5e8f\u5217\u7684\u9006\u5e8f\u5bf9\u4e2a\u6570\uff0c\u63a5\u7740\u5982\u679c\u6bcf\u4e00\u6b21\u90fd\u50cf\u8fd9\u6837\u8dd1\u4e00\u904d\u7684\u662f\u4f1a\u8d85\u65f6\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u627e\u89c4\u5f8b\uff0c\u9898\u76ee\u7684\u63d0\u793a\u6027\u5f88\u5f3a\u3002\n\n- \u9996\u5148\u6bcf\u6b21\u6211\u4eec\u4f1a\u628a\u5f53\u524d\u5e8f\u5217\u7684\u4e00\u4e2a\u6570\u79fb\u5230\u7ed3\u5c3e\uff0c\u6b64\u65f6\u6240\u6709\u6bd4\u7b2c\u4e00\u4e2a\u6570\u5c0f\u7684\u6570\u90fd\u5728\u5b83\u7684\u540e\u9762\uff0c\u9006\u5e8f\u5bf9\u4e2a\u6570\u5e94\u4e3a $val[i]-1$\uff0c\u6240\u4ee5\u5e94\u8be5\u51cf\u53bb\u3002\u5f53\u4ed6\u63d2\u5230\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u65f6\uff0c\u6240\u6709\u6bd4\u5b83\u5927\u7684\u6570\u90fd\u5728\u4ed6\u7684\u524d\u9762\u6240\u4ee5\u5e94\u8be5\u52a0\u4e0a $n-val[i]$\u3002\u6574\u7406\u5f97\uff0c\u8f6c\u79fb\u65f6 $ans=ans-a[i]\\times2+n+1$\u3002\n\n- \u6ce8\u610f\uff1a\u9006\u5e8f\u5bf9\u4e2a\u6570\u53ef\u80fd\u4f1a\u7206 int \u8303\u56f4\uff0c$val[i]$ \u53ef\u80fd\u4e3a $0$\u3002\n\nAC code:\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <iostream> \n#include <algorithm>\n#define rs register\n#define int long long\nusing namespace std;\nconst int N=300005;\nint a[N],tr[N];\nint n,ans;\nvoid add(int x,int v){for(;x<=n;x+=x&-x) tr[x]+=v;}\nint ask(int x)\n{\n\tint res(0);\n\tfor(;x;x-=x&-x)  res+=tr[x];\n\treturn res;\n}\nsigned main()\n{\n\tmemset(tr,0,sizeof tr);\n\tscanf(\"%lld\",&n);\n\tfor(rs int i=1;i<=n;i++)  scanf(\"%lld\",&a[i]),a[i]++;\n\tfor(rs int i=n;i>=1;i--)\n\t{\n\t\tans+=ask(a[i]-1);\n\t\tadd(a[i],1);\n\t}\n\tfor(rs int i=1;i<n;i++)\n\t{\n\t\tprintf(\"%lld\\n\",ans);\n\t\tans+=a[i]*(-2)+n+1;\n\t}\n\tprintf(\"%lld\\n\",ans);\n\t\n\t\n\treturn 0;\n}\n```\n\n\u5b8c\u7ed3\u6492\u82b1~",
        "postTime": 1668686760,
        "uid": 295398,
        "name": "1105Lee",
        "ccfLevel": 0,
        "title": "[ABC190F] Shift and Inversions \u9898\u89e3"
    },
    {
        "content": "\u867d\u7136\u8fd9\u9898\u6211\u4e0d\u4f1a\u505a\uff0c\u4f46\u662f\u8003\u8651\u4e00\u4e2a\u66f4\u666e\u901a\u7684\u95ee\u9898\uff1a\u533a\u95f4\u9006\u5e8f\u5bf9\u7684\u8ba1\u7b97\u3002\u8fd9\u9898\u5b9e\u9645\u4e0a\u53ea\u662f\u533a\u95f4\u9006\u5e8f\u5bf9\u7684\u7279\u6b8a\u60c5\u51b5\u3002\n\n\u663e\u7136\uff0c\u533a\u95f4 $ [l,r] $ \u5411\u5de6\u53f3\u7aef\u6269\u5c55\u7684\u8d21\u732e\u90fd\u662f\u53ef\u4ee5\u76f4\u63a5\u7528\u6811\u72b6\u6570\u7ec4\u8ba1\u7b97\u7684\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u76f4\u63a5\u4e0a\u83ab\u961f\u677f\u5b50\uff0c\u9996\u5148\u79bb\u6563\u5316\u538b\u7f29\u503c\u57df\uff0c\u7136\u540e\u79bb\u7ebf\u6240\u6709\u8be2\u95ee\u4e4b\u540e\u8dd1\u83ab\u961f\u5373\u53ef\uff0c\u5728\u66f4\u65b0\u5de6\u53f3\u6269\u5c55\u7684\u8d21\u732e\u65f6\u7528\u6811\u72b6\u6570\u7ec4\u66f4\u65b0\u7b54\u6848\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $ \\mathcal{O}(n\\sqrt{n}\\log{n}) $\uff0c\u4e0d\u662f\u5f88\u4f18\u96c5\u7684\u66b4\u529b\u505a\u6cd5\uff0c\u4f46\u53ef\u4ee5\u901a\u8fc7\u3002\u6ce8\u610f\u6570\u7ec4\u8981\u5f00\u53cc\u500d\u4e0d\u7136\u4f1a\u8d8a\u754c\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nconst int N=600005;\nint n,m;ll a[N];\ninline int lowbit(int x){return x&-x;}\nll c[N],sizei=0;\nint p[N];bool cmp(int x,int y){return a[x]<a[y];}\ninline void add(int x,ll k){sizei+=k;for(;x<=n;x+=lowbit(x))c[x]+=k;}\ninline ll getsum(int x){ll ans=0;for(;x;x-=lowbit(x))ans+=c[x];return ans;}\nll L[N],R[N];\nconst int block=800;\nstruct ASK\n{\n    int l,r,p;\n}ask[N];\ninline bool mmp(ASK n1,ASK n2)\n{\n    if(n1.l/block!=n2.l/block)\n  return n1.l<n2.l;\n    if((n1.l/block)&1)\n                    return n2.r<n1.r;\n    return n1.r<n2.r;\n}\nstruct node{int l,r,p,op;};\nvector<node>ls[N],rs[N];\nint B,bl[N/block+5],br[N/block+5],w[N];\nint s[N/block+5],C[N];\nll ret[N],ans[N];\nint main()\n{\n    scanf(\"%d\",&n);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%lld\",&a[i]);\n        p[i]=i;\n    }\n    for(int i=n+1;i<=2*n;i++)\n    {\n        a[i]=a[i-n];\n        p[i]=i;\n    }\n    n*=2;\n    sort(p+1,p+n+1,cmp);\n    ll tmp=a[p[1]];a[p[1]]=1;\n    for(int i=2,t=1;i<=n;i++)\n    {\n        if(a[p[i]]!=tmp)\n        t++;\n        tmp=a[p[i]];a[p[i]]=t;\n    }\n    for(int i=1;i<=n;i++)\n    {\n        L[i]=L[i-1]+sizei-getsum(a[i]);\n        add(a[i],1);\n    }\n    memset(c,0,sizeof(c));\n    for(int i=n;i>=1;i--)\n    {\n        R[i]=R[i+1]+getsum(a[i]-1);\n        add(a[i],1);\n    }\n    m=n/2;\n    for(int i=1;i<=m;i++)\n    {\n        ask[i].l=i,ask[i].r=i+n/2-1;\n        if(ask[i].l>ask[i].r)\n        swap(ask[i].l,ask[i].r);\n        ask[i].p=i;\n    }\n    sort(ask+1,ask+m+1,mmp);\n    ask[0]=(ASK){1,0,0};\n    for(int i=1;i<=m;i++)\n    { \n        ret[i]=L[ask[i].r]-L[ask[i-1].r]+R[ask[i].l]-R[ask[i-1].l];\n             if(ask[i].r>ask[i-1].r)\n             rs[ask[i-1].l-1].push_back((node){ask[i-1].r+1,ask[i].r,i,-1});\n        else if(ask[i].r<ask[i-1].r)\n        rs[ask[i-1].l-1].push_back((node){ask[i].r+1,ask[i-1].r,i, 1});\n             if(ask[i].l<ask[i-1].l)\n             ls[ask[i  ].r+1].push_back((node){ask[i].l,ask[i-1].l-1,i,-1});\n        else if(ask[i].l>ask[i-1].l)\n        ls[ask[i  ].r+1].push_back((node){ask[i-1].l,ask[i].l-1,i, 1});\n    }\n    B=(n-1)/block+1;\n    for(int i=1;i<=B;i++) \n    {\n        bl[i]=br[i-1]+1;\n        br[i]=br[i-1]+block;\n    }\n    br[B]=n;\n    for(int i=1;i<=B;i++)\n    for(int j=bl[i];j<=br[i];j++)\n    w[j]=i;\n    for(int i=1;i<=n;i++)\n    {\n        for(int j=1;j<w[a[i]];j++)\n        s[j]++;\n        for(int j=bl[w[a[i]]];j<=a[i];j++)\n        C[j]++;\n        for(int j=0;j<rs[i].size();j++)\n        {\n            node t=rs[i][j];\n            int l=t.l,r=t.r;\n            tmp=0;\n            for(int k=l;k<=r;k++)\n            tmp+=s[w[a[k]+1]]+C[a[k]+1];\n            ret[t.p]+=t.op*tmp;\n        }\n    }\n    memset(C,0,sizeof(C));\n    memset(s,0,sizeof(s));\n    for(int i=n;i>=1;i--)\n    {\n        for(int j=w[a[i]]+1;j<=B;j++)\n        s[j]++;\n        for(int j=a[i];j<=br[w[a[i]]];j++)\n        C[j]++;\n        for(int j=0;j<ls[i].size();j++)\n        {\n            node t=ls[i][j];\n            int l=t.l,r=t.r;\n            tmp=0;\n            for(int k=l;k<=r;k++)\n            tmp+=s[w[a[k]-1]]+C[a[k]-1];\n            ret[t.p]+=t.op*tmp;\n        }\n    }\n    for(int i=1;i<=m;i++)\n    {\n        ret[i]+=ret[i-1];\n        ans[ask[i].p]=ret[i];\n    }\n    for(int i=1;i<=m;i++)\n    printf(\"%lld\\n\",ans[i]);\n}\n```\n",
        "postTime": 1667266777,
        "uid": 714821,
        "name": "loser_seele",
        "ccfLevel": 4,
        "title": "ABC190F\u9898\u89e3"
    },
    {
        "content": "## \u601d\u8def\n\n\u5bf9\u4e00\u4e2a\u5e8f\u5217\u6c42\u9006\u5e8f\u5bf9\u53ef\u4ee5\u7528\u5f52\u5e76\u6392\u5e8f\u6216\u6811\u72b6\u6570\u7ec4 $O(n\\log n)$ \u89e3\u51b3\uff0c\u4f46\u5982\u679c\u5bf9\u6bcf\u4e00\u4e2a $b$ \u6c42\u9006\u5e8f\u5bf9\uff0c\u5219\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^2\\log n)$\u3002\u6211\u4eec\u8003\u8651\u4f18\u5316\uff1a\u80fd\u4e0d\u80fd\u4ece\u4e0a\u4e00\u4e2a\u72b6\u6001\u63a8\u7b97\u51fa\u4e0b\u4e00\u4e2a $b_i$ \u6709\u591a\u5c11\u9006\u5e8f\u5bf9\u5462\uff1f\n\n\u6211\u4eec\u8bbe $b$ \u662f\u4e00\u4e2a $1$ \u81f3 $n$ \u7684\u6392\u5217\uff1a\n\n- \u5f53 $b_1$ \u88ab\u53bb\u9664\u65f6\uff0c\u56e0\u4e3a $b_i$ \u8d21\u732e\u4e86 $b_i-1$ \u4e2a\u9006\u5e8f\u5bf9\uff0c\u6240\u4ee5\u4ece\u4e0a\u4e00\u8f6e\u7684\u7b54\u6848\u4e2d\u51cf\u53bb $b_i-1$\u3002\n\n- \u5f53 $b$ \u7684\u672b\u5c3e\u52a0\u5165 $b_n$ \u65f6\uff0c\u56e0\u4e3a\u4f1a\u548c\u524d\u9762\u7684 $n-b_i$ \u4e2a\u6570\u4ea7\u751f\u9006\u5e8f\u5bf9\uff0c\u6240\u4ee5\u4e0a\u4e00\u8f6e\u7684\u7b54\u6848\u7d2f\u52a0\u4e0a $n-b_i$\u3002\n\n```cpp\n#include<iostream>\n#include<vector>\nusing namespace std;\n#define int long long\n#define lowbit(x) ((x)&(-x))\nint c[300005],a[300005],n;\nvoid update(int x,int v){for(int i=x;i<=n;i+=lowbit(i)) c[i]+=v;}\nint getsum(int x){int ans=0;for(int i=x;i>=1;i-=lowbit(i)) ans+=c[i];return ans;}\nmain(){\n    int ans=0;\n    cin>>n;\n    for(int i=1;i<=n;i++){\n        cin>>a[i];\n        a[i]++;\n    }\n    for(int i=n;i>=1;i--){\n        update(a[i],1);\n        ans+=getsum(a[i]-1);\n    }\n    //\u9006\u5e8f\u5bf9\u4e2a\u4eba\u63a8\u8350\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\uff0c\u5e38\u65701/2\uff08\u5f53\u7136\u8981\u79bb\u6563\u5316\u7684\u8bdd\u53e6\u8bf4\uff09\n    cout<<ans<<'\\n';\n    for(int i=1;i<n;i++){\n        ans+=n-1-(a[i]-1)-(a[i]-1);\n        //\u66f4\u65b0\u7b54\u6848\n        cout<<ans<<'\\n';\n    }\n}\n```",
        "postTime": 1666694776,
        "uid": 527598,
        "name": "FReQuenter",
        "ccfLevel": 0,
        "title": "[ABC190F] Shift and Inversions \u9898\u89e3"
    }
]