[
    {
        "content": "**\u9898\u610f** : \u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6811,\u8fb9\u6709\u8fb9\u6743\u3002\n\n\u6309\u7167\u5982\u4e0b\u89c4\u5219\u5efa\u7acb\u4e00\u5f20\u5b8c\u5168\u56fe : $x,y$\u4e4b\u95f4\u7684\u8fb9\u957f\u4e3a$w[x]+w[y]+dis(x,y)$\n\n\u6c42\u5b8c\u5168\u56fe\u7684 `MST` \u8fb9\u6743\u548c\u3002\n\n$n\\leq 2\\times 10^5$,\u65f6\u9650$\\texttt{5s}$.\n\n------------\n\n- $O(n\\log^2 n)$\n\n\u4e00\u822c\u5730,\u5bf9\u4e8e(\u5b8c\u5168\u56fe)`MST`\u95ee\u9898,\u6211\u4eec\u53ef\u4ee5\u5148\u9009\u5b9a\u4e00\u4e2a**\u8fb9\u96c6**,\u505a\u4e00\u6b21`MST`(\u4e0d\u8fde\u901a\u4e0d\u7ba1),\u628a\u5269\u4f59\u7684\u8fb9\u4fdd\u7559,\u6700\u540e\u518d\u505a\u4e00\u6b21`MST`,\u8fd9\u6837\u4e00\u5b9a\u80fd\u5f97\u5230\u6700\u4f18\u89e3\u3002\n\n\u8fd9\u662f\u4e2a\u6811\u5f62\u7ed3\u6784,\u6211\u4eec\u53ef\u4ee5\u70b9\u5206\u6cbb,\u8003\u8651\u8de8\u8d8a\u91cd\u5fc3\u7684\u8def\u5f84\u6240\u751f\u6210\u7684\u8fb9\u96c6\u3002\n\n\u4ee5\u5206\u6cbb\u4e2d\u5fc3\u4e3a\u6839,\u4ee4$p[u]=w[u]+dep[u]$,\u5219\u8fde\u63a5\u4e24\u4e2a\u70b9\u7684\u4ee3\u4ef7\u5c31\u662f$p[u]+p[v]$(\u5173\u5efa\u8fb9\u7684\u957f\u5ea6)\n\n\u6211\u4eec\u53ea\u9700\u4fdd\u7559$p$\u6700\u5c0f\u7684\u4e00\u4e2a\u70b9,\u7136\u540e\u628a\u5176\u4ed6\u70b9\u90fd\u548c\u4ed6\u76f8\u8fde,\u663e\u7136\u5c31\u662f`MST`\u4e86\u3002\n\n\u8fd9\u91cc\u4f1a\u4ea7\u751f\u5b50\u6811\u5185\u81ea\u5df1\u8fde\u7684\u8def\u5f84,\u4f46\u662f\u6bd4\u76f4\u63a5\u8fde\u52a3\u6240\u4ee5\u4e0d\u4f1a\u5f71\u54cd\u7b54\u6848\u3002\n\n\u70b9\u5206\u6cbb\u4e00\u5171\u4f1a\u4ea7\u751f$O(n\\log n)$\u6761\u8fb9,\u7136\u540e\u8dd1\u4e00\u4e2a`kruskal`\u5c31$O(n\\log^2 n)$\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#define ll long long\n#define MaxN 200500\nusing namespace std;\ninline int read()\n{\n  int X=0;char ch=0;\n  while(ch<48||ch>57)ch=getchar();\n  while(ch>=48&&ch<=57)X=X*10+(ch^48),ch=getchar();\n  return X;\n}\nvector<int> g[MaxN],l[MaxN];\nint tp[MaxN],tn,ms[MaxN],siz[MaxN];\nbool vis[MaxN];\nvoid pfs(int u,int fa)\n{\n  tp[++tn]=u;\n  siz[u]=1;ms[u]=0;\n  for (int i=0,v;i<g[u].size();i++)\n    if ((v=g[u][i])!=fa&&!vis[v]){\n      pfs(v,u);\n      siz[u]+=siz[v];\n      ms[u]=max(ms[u],siz[v]);\n    }\n}\nint getrt(int u)\n{\n  tn=0;pfs(u,0);\n  int rt=0;\n  for (int i=1;i<=tn;i++){\n    ms[tp[i]]=max(ms[tp[i]],tn-siz[tp[i]]);\n    if (ms[tp[i]]<ms[rt])rt=tp[i];\n  }return rt;\n}\nll w[MaxN],dep[MaxN],mp;\nvoid dfs(int u,int fa)\n{\n  if (w[mp]+dep[mp]>w[u]+dep[u])mp=u;\n  for (int i=0,v;i<g[u].size();i++)\n    if ((v=g[u][i])!=fa&&!vis[v]){\n      dep[v]=dep[u]+l[u][i];\n   \t  dfs(v,u);\n    }\n}\nstruct Line\n{int f,t;ll len;}s[MaxN<<5];\nint tot;\nvoid solve(int u)\n{\n  dep[u]=mp=0;dfs(u,0);\n  ll sav=w[mp]+dep[mp];\n  for (int i=1;i<=tn;i++)\n    s[++tot]=(Line){tp[i],mp,sav+w[tp[i]]+dep[tp[i]]};\n  vis[u]=1;\n  for (int i=0,v;i<g[u].size();i++)\n    if (!vis[v=g[u][i]])\n   \t  solve(getrt(v));\n}\nint n,f[MaxN];\nbool cmp(const Line &A,const Line &B)\n{return A.len<B.len;}\nint findf(int u)\n{return f[u]==u ? u : f[u]=findf(f[u]);}\nbool merge(int x,int y)\n{\n  x=findf(x);y=findf(y);\n  if (x==y)return 0;\n  f[x]=y;return 1;\n}\nint main()\n{\n  n=read();w[0]=1ll<<60;ms[0]=n+1;\n  for (int i=1;i<=n;i++)w[i]=read();\n  for (int i=1,fr,to,len;i<n;i++){\n    fr=read();to=read();len=read();\n    g[fr].push_back(to);\n    l[fr].push_back(len);\n    g[to].push_back(fr);\n    l[to].push_back(len);\n  }solve(getrt(1));\n  ll ans=0;\n  for (int i=1;i<=n;i++)f[i]=i;\n  sort(s+1,s+tot+1,cmp);\n  for (int i=1;i<=tot;i++)\n    if (merge(s[i].f,s[i].t))\n      ans+=s[i].len;\n  printf(\"%lld\",ans);\n}\n```\n\n- $O(n\\log n)$\n\n\u8003\u8651\u4f7f\u7528\u7528Boruvka\u7b97\u6cd5\u3002\n\n\u6bcf\u4e00\u8f6e,\u6211\u4eec\u8981\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u627e\u5230\u6700\u5c0f\u51fa\u8fb9(\u5230\u8fbe\u5176\u4ed6\u8fde\u901a\u5757)\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5df2\u7ecf\u8054\u901a\u5757\u67d3\u8272\u7684\u5c40\u9762,\u6211\u4eec\u53ef\u4ee5\u8fdb\u884c`up and down DP`.\n\n\u9996\u5148\u6c42\u51fa\u4ece\u5b50\u6811\u5230\u8fbe\u672c\u8eab\u7684\u6700\u4f18\u51b3\u7b56,\u95ee\u9898\u6765\u4e86,\u989c\u8272\u4e0d\u80fd\u76f8\u540c\u2026\u2026\n\n$\\texttt{stO EI Orz}$\n\n\u6211\u4eec\u8bb0\u5f55\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\u5373\u53ef,\u5bf9\u989c\u8272\u53bb\u91cd,\u8fd9\u6837\u4e07\u4e00\u6700\u5927\u7684\u78b0\u4e86\u8fd8\u6709\u8865\u5200\u7684\u3002 (\u672c\u849f\u84bb\u8fd9\u91cc\u53ef\u80fd\u5199\u4e11\u4e86)\n\n\u7136\u540e\u518d\u6b21`dfs`\u8ba1\u7b97\u4ece\u4e0a\u9762\u5ef6\u4f38\u8fc7\u6765\u7684\u5373\u53ef\u3002\n\n\u6bcf\u8f6e\u4f1a\u4f7f\u8fde\u901a\u5757\u4e2a\u6570\u51cf\u534a,\u590d\u6742\u5ea6\u5c31\u662f$O(n\\log n)$,\u5e38\u6570\u8f83\u5927\u3002\n\n```cpp\n#include<algorithm>\n#include<cstdio>\n#include<vector>\n#define ll long long\n#define MaxN 200500\nusing namespace std;\ninline int read()\n{\n  int X=0;char ch=0;\n  while(ch<48||ch>57)ch=getchar();\n  while(ch>=48&&ch<=57)X=X*10+(ch^48),ch=getchar();\n  return X;\n}\nvector<int> g[MaxN],l[MaxN];\nint w[MaxN],c[MaxN];\n#define Pr pair<ll,int>\n#define mp make_pair\n#define fir first\n#define sec second\nstruct Data\n{\n  Pr x,x2;int c;\n  bool chk(const Data &t){\n    if (t.c==c){\n      x=min(x,t.x);\n      x2=min(x2,t.x2);\n    }else {\n      if (t.x<=x){\n        x2=min(x,t.x2);\n        c=t.c;x=t.x;\n      }else x2=min(x2,t.x);\n    }\n  }\n  Pr get(int tc){\n    if (tc==c)return x2;\n    return x;\n  }\n}f[MaxN];\nvoid dfs1(int u,int fa)\n{\n  f[u].x=mp(w[u],u);\n  f[u].c=c[u];\n  for (int i=0,v;i<g[u].size();i++)\n    if ((v=g[u][i])!=fa){\n   \t  dfs1(v,u);\n   \t  f[v].x.fir+=l[u][i];\n   \t  f[v].x2.fir+=l[u][i];\n   \t  f[u].chk(f[v]);\n   \t  f[v].x.fir-=l[u][i];\n      f[v].x2.fir-=l[u][i];\n   \t}\n}\nvoid dfs2(int u,int fa)\n{\n  for (int i=0,v;i<g[u].size();i++)\n    if ((v=g[u][i])!=fa){\n      f[u].x.fir+=l[u][i];\n      f[u].x2.fir+=l[u][i];\n      f[v].chk(f[u]);\n   \t  dfs2(v,u);\n   \t  f[u].x.fir-=l[u][i];\n      f[u].x2.fir-=l[u][i];\n    }\n}\nint n,cnt;\nint findf(int u)\n{return c[u]==u ? u : c[u]=findf(c[u]);}\nbool merge(int x,int y)\n{\n  x=findf(x);y=findf(y);\n  if (x==y)return 0;\n  c[x]=y;return 1;\n}\n#define INF (1ll<<60)\nPr p[MaxN];\nint main()\n{\n  n=read();\n  for (int i=1;i<=n;i++)w[i]=read();\n  for (int i=1,fr,to,len;i<n;i++){\n    fr=read();to=read();len=read();\n    g[fr].push_back(to);\n    l[fr].push_back(len);\n    g[to].push_back(fr);\n    l[to].push_back(len);\n  }for (int i=1;i<=n;i++)c[i]=i;\n  ll ans=0;\n  while(cnt<n-1){\n    for (int i=1;i<=n;i++){\n      p[i].fir=f[i].x.fir=f[i].x2.fir=INF;\n      f[i].x.sec=f[i].x2.sec=f[i].c=0;\n    }dfs1(1,0);dfs2(1,0);\n    for (int i=1;i<=n;i++){\n      Pr sav=f[i].get(c[i]);\n      sav.fir+=w[i];\n      p[c[i]]=min(p[c[i]],sav);\n    }for (int i=1;i<=n;i++)\n      if (p[i].fir<INF&&merge(i,p[i].sec))\n        {ans+=p[i].fir;cnt++;}\n    for (int i=1;i<=n;i++)findf(i);\n  }printf(\"%lld\",ans);\n}\n```\n",
        "postTime": 1583821606,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 AT3611 \u3010Tree MST\u3011"
    },
    {
        "content": "**\u9898\u610f\uff1a** \u7ed9\u5b9a\u4e00\u68f5 $n$ \u4e2a\u70b9\u7684\u6811\uff0c\u70b9\u548c\u8fb9\u90fd\u6709\u6743\u503c\uff0c\u6709\u5f20 $n$ \u4e2a\u70b9\u7684\u5b8c\u5168\u56fe\uff0c$(x,y)$ \u6743\u503c\u4e3a $w_x+w_y+dis(x,y)$\uff0c\u5176\u4e2d $w_x$ \u548c $w_y$ \u4e3a\u6743\u503c\uff0c$dis(x,y)$ \u8868\u793a $x$ \u548c $y$ \u5728\u6811\u4e0a\u7684\u5e26\u6743\u8ddd\u79bb\u3002\u6c42\u8fd9\u5f20\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u6743\u4e4b\u548c\u3002$n \\le 2 \\times 10^5$\u3002\n\n\u8fd9\u662f\u4e00\u7c7b\u7ecf\u5178\u7684\u6700\u5c0f\u751f\u6210\u6811\u9898\u76ee\uff0c\u8fd9\u7c7b\u9898\u76ee\u7684\u7279\u5f81\u662f\uff1a$n$ \u4e2a\u70b9\u7684\u5b8c\u5168\u56fe\uff0c**\u4e24\u70b9\u4e4b\u95f4\u7684\u8ddd\u79bb\u901a\u8fc7\u67d0\u4e2a\u516c\u5f0f\u8ba1\u7b97\u5f97\u5230**\uff08\u4f8b\u5982 $x$ \u548c $y$ \u70b9\u4e4b\u95f4\u7684\u8fb9\u6743 $w(x,y)=A_x \\operatorname{xor} A_y$\uff09\uff0c\u8981\u6c42\u51fa\u8fd9\u4e2a\u5b8c\u5168\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u9996\u5148\u8fd9\u79cd\u9898\u76ee\u7684\u70b9\u6570\u662f\u53ef\u4ee5\u51fa\u5230 $10^5$ \u7ea7\u522b\u7684\uff0c\u56e0\u4e3a\u867d\u7136\u4efb\u610f\u4e24\u70b9\u4e4b\u95f4\u90fd\u6709\u8fde\u8fb9\uff0c\u4f46\u662f\u8fb9\u6743\u662f\u901a\u8fc7\u516c\u5f0f\u8ba1\u7b97\u5f97\u5230\u7684\uff0c\u6240\u4ee5\u5728\u8f93\u5165\u4e2d\u53ea\u9700\u8981\u7ed9\u51fa $n$ \u4e2a\u70b9\u7684\u6743\u503c\u5373\u53ef\uff0c~~\u6bd2\u7624\u51fa\u9898\u4eba\u3002~~\n\n\u90a3\u4e48\u7528 Kruskal \u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f $O(n^2 \\log ^2 n)$ \u7684\uff0c\u7528 Prim \u7b97\u6cd5\u7a0d\u5feb\u4e00\u70b9\uff0c\u4f46\u662f\u590d\u6742\u5ea6\u4ecd\u7136\u4e3a $O(n^2)$ \u7ea7\u522b\uff0c\u8fc7\u4e0d\u4e86\u3002\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u7c7b\u751f\u6210\u6811\u9898\u76ee\uff0c\u6211\u4eec\u4e00\u822c\u4f7f\u7528\u4e00\u4e2a\u7279\u6b8a\u7684\u7b97\u6cd5\uff1a**Boruvka \u7b97\u6cd5**\u3002\n\n### **Boruvka \u7b97\u6cd5\u7684\u5927\u4f53\u6d41\u7a0b\uff1a**\n\n1. \u7ef4\u62a4\u5f53\u524d\u6240\u6709\u70b9\u5f62\u6210\u7684\u8fde\u901a\u5757\uff0c\u521d\u59cb\u65f6\u6ca1\u6709\u9009\u62e9\u4efb\u4f55\u8fb9\uff0c\u4e5f\u5c31\u662f\u6bcf\u4e2a\u70b9\u5355\u72ec\u5f62\u6210\u4e00\u4e2a\u8fde\u901a\u5757\u3002\n\n2. Boruvka \u7b97\u6cd5\u8fdb\u884c\u82e5\u5e72\u8f6e\u8fde\u8fb9\uff0c\u5728\u6bcf\u4e00\u8f6e\u4e2d\uff0c**\u4e3a\u6bcf\u4e2a\u8fde\u901a\u5757\u627e\u5230\u4e00\u6761\u6743\u503c\u6700\u5c0f\u7684\u8fde\u5411\u8be5\u8fde\u901a\u5757\u5916\u90e8\u7684\u8fb9\uff0c** \u5e76\u5c06\u8fd9\u6761\u8fb9\u8fde\u63a5\u8d77\u6765\u3002\uff08\u8fde\u63a5\u4e4b\u524d\u5224\u65ad\u4e00\u4e0b\u662f\u5426\u5df2\u7ecf\u8fde\u901a\uff0c\u56e0\u4e3a\u672c\u8f6e\u8fde\u8fb9\u7684\u4e4b\u524d\u8fde\u63a5\u7684\u82e5\u5e72\u6761\u8fb9\u53ef\u80fd\u5df2\u7ecf\u4f7f\u5f97\u8fd9\u6761\u8fb9\u4e24\u7aef\u7ed3\u70b9\u5df2\u7ecf\u8fde\u901a\u3002\uff09\n\n3. \u76f4\u5230\u67d0\u4e00\u8f6e\u53d1\u73b0\u6240\u6709\u70b9\u5df2\u7ecf\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u5185\u65f6\uff0c\u7b97\u6cd5\u7ed3\u675f\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u82e5\u8fde\u901a\u5757\u7684\u6570\u91cf\u4e3a $2n$\uff0c\u90a3\u4e48\u4e00\u8f6e\u8fde\u8fb9\u4e4b\u540e\u5269\u4f59\u8fde\u901a\u5757\u6570\u91cf\u6700\u591a\u53ea\u5269 $n$ \u4e2a\uff08\u6700\u574f\u60c5\u51b5\u662f $1$ \u548c $2$ \u8fde\u8fb9\uff0c$3$ \u548c $4$ \u8fde\u8fb9\uff0c...\uff0c$2n-1$ \u548c $2n$ \u8fde\u8fb9\uff09\uff0c**\u56e0\u6b64 Boruvka \u7b97\u6cd5\u7684\u8fde\u8fb9\u8f6e\u6570\u662f $O(\\log n)$ \u7ea7\u522b\u7684\u3002**\n\n\u5982\u679c\u53ea\u662f\u6b63\u5e38\u7684\u56fe\uff0cBoruvka \u7b97\u6cd5\u6bcf\u4e00\u8f6e\u8fde\u8fb9\u8981\u68c0\u67e5\u56fe\u4e2d\u6240\u6709\u7684\u8fb9\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u7ea6\u4e3a $O((n+m)\\log n)$\uff0c\u4e5f\u4e0d\u6bd4 Kruskal \u5feb\u5230\u54ea\u91cc\u53bb\uff1b**\u4f46\u662f\u5728\u8fd9\u4e00\u7c7b\u5b8c\u5168\u56fe\u751f\u6210\u6811\u95ee\u9898\u4e2d\uff0cBoruvka \u7b97\u6cd5\u6709\u7740\u7279\u6b8a\u7684\u4f18\u52bf\u3002** \u4ee5\u8fd9\u9053\u9898\u76ee\u4e3a\u4f8b\u4ecb\u7ecd\u4e00\u4e0b\u3002\n\n\u5148\u8f6c\u5316\u4e00\u4e0b\u8fb9\u6743 $w(x,y)=w_x+w_y+dis(x,y)$\uff0c\u7531\u4e8e $dis(x,y)=sum_x+sum_y-2\\times sum_{lca(x,y)}$\uff08$sum_x$ \u8868\u793a $x$ \u70b9\u5230\u6839\u7684\u8ddd\u79bb\uff09\uff0c\u6240\u4ee5 $w(x,y)=w_x+w_y+sum_x+sum_y-2 \\times sum_{lca(x,y)}$\u3002\n\n\u4e3a\u4e86\u7b80\u5316\uff0c\u6211\u4eec\u5047\u8bbe $W_x=w_x+sum_x$\uff0c\u6709 $w(x,y)=W_x+W_y-2 \\times sum_{lca(x,y)}$\u3002\n\n\u6839\u636e Boruvka \u7b97\u6cd5\u7684\u6d41\u7a0b\uff0c\u6211\u4eec\u6bcf\u4e00\u8f6e\u8981\u4e3a\u6240\u6709\u70b9 $x$\uff0c\u627e\u5230\u5c1a\u672a\u4e0e\u4e4b\u8fde\u901a\u7684\u70b9 $y$\uff0c\u5e76\u6700\u5c0f\u5316 $w(x,y)$\uff0c\u4e5f\u5c31\u662f\u76f8\u5f53\u4e8e\u6211\u4eec\u8981\u6700\u5c0f\u5316 $W_y-2 \\times sum_{lca(x,y)}$\u3002\u6211\u4eec\u8003\u8651\u53bb\u679a\u4e3e\u8fd9\u4e2a $z=lca(x,y)$\uff0c\u7136\u540e\u5728 $z$ \u7684\u5b50\u6811\u4e2d\u679a\u4e3e $y$ \u5373\u53ef\u3002\n\n\u4f46\u662f\u8fd9\u6837\u771f\u7684\u5bf9\u5417\uff1f\u6709\u6ca1\u6709\u53ef\u80fd\u51fa\u73b0\u4e00\u79cd\u60c5\u51b5\uff1a\u679a\u4e3e\u5230\u7684 $y$ \u548c $x$ \u5728 $z$ \u7684\u540c\u4e00\u68f5\u5b50\u6811\u5185\uff0c\u4f7f\u5f97 $lca(x,y)$ \u5e76\u4e0d\u662f $z$\uff1f\n\n\u662f\u6709\u8fd9\u79cd\u53ef\u80fd\u7684\uff0c\u4f46\u662f\u5e76\u4e0d\u5f71\u54cd\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u56e0\u4e3a\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b $lca(x,y)$ \u662f $z$ \u7684\u540e\u4ee3\uff0c\u800c\u6b64\u65f6\u7684 $z$ \u4e00\u5b9a\u4e0d\u4f18\uff08\u56e0\u4e3a $sum_z<sum_{lca_(x,y)}$\uff0c\u5bfc\u81f4 $W_y-2 \\times sum_z>W_y-2 \\times sum_{lca(x,y)}$\uff09\uff0c\u800c\u8fd9\u4e2a\u66f4\u4f18\u7684\u60c5\u51b5\u4f1a\u5728 $z=lca(x,y)$ \u65f6\u88ab\u679a\u4e3e\u5230\uff0c\u6240\u4ee5\u5e76\u4e0d\u5f71\u54cd\u3002\n\n\u6211\u4eec\u628a\u8fd9\u4e2a\u627e\u70b9\u7684\u8fc7\u7a0b\u5927\u4f53\u5206\u4e3a\u4e24\u4e2a\u9636\u6bb5\uff1a\n\n1. \u5c06\u6240\u6709\u662f $z$ \u540e\u4ee3\u7684 $y$ \u7684\u6743\u503c\u201c\u6302\u5230\u201d\u7ed3\u70b9 $z$ \u4e0a\u3002\n\n\u4e5f\u5c31\u662f\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a $z$\uff0c\u7ef4\u62a4 $W_y-2 \\times sum_z$ \u7684\u6700\u5c0f\u503c\uff0c\u5b9e\u8d28\u5c31\u662f\u8ba1\u7b97 $W_y$ \u7684\u6700\u5c0f\u503c\u3002\u8fd9\u4e2a\u53ef\u4ee5\u901a\u8fc7\u4e00\u6b21 dfs\uff0c\u81ea\u4e0b\u800c\u4e0a\u9012\u63a8\u5f97\u51fa\u3002\n\n2. \u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $x$\uff0c\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684 $z$\uff0c\u5e76\u53d6 $W_y-2 \\times sum_z$ \u7684\u6700\u5c0f\u503c\u3002\n\n\u4e0d\u96be\u53d1\u73b0\u8fd9\u6837\u7684 $z$ \u4e00\u5b9a\u5168\u662f $x$ \u7684\u7956\u5148\uff08\u5305\u62ec\u81ea\u5df1\uff09\uff0c\u6240\u4ee5\u6211\u4eec\u518d dfs \u4e00\u904d\uff0c\u81ea\u4e0a\u800c\u4e0b\u9012\u63a8\u4e0d\u96be\u5f97\u51fa\u3002\n\n\u4f46\u662f\u6211\u4eec\u4f3c\u4e4e\u5fd8\u4e86\u4e00\u4e2a\u9650\u5b9a\u6761\u4ef6\uff1f**\u6bcf\u4e00\u8f6e\u8981\u627e\u7684\u8fb9\u7684\u4e24\u4e2a\u7aef\u70b9\uff0c\u5fc5\u987b\u5c5e\u4e8e\u4e0d\u540c\u7684\u5df2\u6709\u8fde\u901a\u5757\u3002** \u8fd9\u6837\u6211\u4eec\u6c42\u51fa\u7684\u6700\u5c0f\u503c\u5bf9\u5e94\u7684\u70b9 $y$\uff0c\u53ef\u80fd\u6b63\u597d\u548c $x$ \u5df2\u7ecf\u8fde\u901a\u4e86\u3002\n\n\u89e3\u51b3\u65b9\u6cd5\u662f\uff1a**\u540c\u65f6\u7ef4\u62a4\u6700\u5c0f\u503c\u548c\u6b21\u5c0f\u503c\uff0c\u5e76\u4e14\u9650\u5b9a\u6700\u5c0f\u503c\u548c\u6b21\u5c0f\u503c\u5bf9\u5e94\u7684 $y$ \u7ed3\u70b9\u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u4e2d\u3002** \u8fd9\u6837\u82e5\u6700\u5c0f\u503c\u5bf9\u5e94\u7684 $y$ \u70b9\u548c $x$ \u4e0d\u5728\u540c\u4e00\u8fde\u901a\u5757\u4e2d\uff0c\u5c31\u9009\u62e9\u8fd9\u4e2a\u6700\u5c0f\u503c\uff0c\u5426\u5219\u9009\u62e9\u201c\u66ff\u8865\u201d\u7684\u6b21\u5c0f\u503c\u5373\u53ef\u3002\n\n\u8fde\u8fb9\u8f6e\u6570\u662f $O(\\log n)$ \u7684\uff0c\u6bcf\u4e00\u8f6e\u4e24\u6b21 dfs \u662f $O(n)$ \u7684\uff0c\u603b\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include <cstdio>\n#include <algorithm>\nusing namespace std;\n#define LL long long\nconst int N = 200010;\nconst LL inf = 1e18 + 10;\nstruct Edge {\n\tint to, cost, nxt;\n}edges[N << 1]; int head[N], nedge;\nstruct Edge2 {\n\tint u, v;\n}link2[N];\ninline LL min(LL x, LL y) {return x < y ? x : y;}\nstruct Tuple {\n\tint idx, col; LL dist; //idx \u8868\u793a\u5bf9\u5e94\u7684 y \u7ed3\u70b9\uff0ccol \u8868\u793a y \u7ed3\u70b9\u6240\u5728\u7684\u8fde\u901a\u5757\uff08\u4ee3\u8868\u5143\uff09\uff0cdist \u8868\u793a\u8ba1\u7b97\u7684\u6743\u503c\n};\nstruct Solution {\n\tTuple minv, secmin;\n\tSolution operator * (const Tuple &rhs) const {\n\t\tSolution ret = (Solution){minv, secmin};\n\t\tif(rhs.col == ret.minv.col) //\u5148\u7279\u6b8a\u5904\u7406\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5757\u7684\u60c5\u51b5\uff1a\u76f4\u63a5\u53d6 min \u5373\u53ef\u3002\n\t\t\tret.minv.dist = min(ret.minv.dist, rhs.dist);\n\t\telse if(rhs.col == ret.secmin.col) {\n\t\t\tret.secmin.dist = min(ret.secmin.dist, rhs.dist);\n\t\t\tif(ret.secmin.dist < ret.minv.dist)\n\t\t\t\tswap(ret.secmin, ret.minv); //\u6ce8\u610f\u53ef\u80fd\u8981\u4ea4\u6362\u6700\u5c0f\u503c\u548c\u6b21\u5c0f\u503c\uff01\n\t\t}\n\t\telse if(rhs.dist <= ret.minv.dist) {\n\t\t\tret.secmin = ret.minv;\n\t\t\tret.minv = rhs;\n\t\t}\n\t\telse if(rhs.dist < ret.secmin.dist)\n\t\t\tret.secmin = rhs;\n\t\treturn ret;\n\t}\n\tSolution operator + (const Solution &rhs) const {\n\t\treturn (rhs * minv) * secmin;\n\t}\n}sol[N];\nLL A[N], sum[N];\nint link[N]; LL cost[N];\nLL cost2[N];\nint fa[N], n;\nint par[N], col[N];\ninline int findroot(int x) {return par[x] == x ? x : par[x] = findroot(par[x]);}\ninline void unite(int x, int y) {par[findroot(x)] = findroot(y);}\ninline bool same(int x, int y) {return findroot(x) == findroot(y);}\nvoid addedge(int u, int v, int w) {\n\tedges[++nedge].to = v;\n\tedges[nedge].cost = w;\n\tedges[nedge].nxt = head[u];\n\thead[u] = nedge;\n}\nvoid dfs(int u) {\n\tA[u] += sum[u];\n\tfor(int i = head[u]; i; i = edges[i].nxt) {\n\t\tint v = edges[i].to, w = edges[i].cost;\n\t\tif(fa[u] == v) continue;\n\t\tfa[v] = u;\n\t\tsum[v] = sum[u] + w; dfs(v);\n\t}\n}\nvoid dfs1(int u) { //\u7b2c\u4e00\u8f6e dfs\uff1a\u81ea\u4e0b\u800c\u4e0a\u9012\u63a8\n\tsol[u].minv = (Tuple){u, col[u], A[u]};\n\tsol[u].secmin = (Tuple){0, 0, inf};\n\tfor(int i = head[u]; i; i = edges[i].nxt) {\n\t\tint v = edges[i].to;\n\t\tif(fa[u] == v) continue;\n\t\tdfs1(v); sol[u] = sol[u] + sol[v];\n\t}\n}\nvoid dfs2(int u) { //\u7b2c\u4e8c\u8f6e dfs\uff1a\u81ea\u4e0a\u800c\u4e0b\u9012\u63a8\n\tif(u == 1) {\n\t\tsol[u].minv.dist -= 2 * sum[u];\n\t\tsol[u].secmin.dist -= 2 * sum[u];\n\t}\n\tif(sol[u].minv.col == col[u]) {\n\t\tlink[u] = sol[u].secmin.idx;\n\t\tcost[u] = A[u] + sol[u].secmin.dist;\n\t} else {\n\t\tlink[u] = sol[u].minv.idx;\n\t\tcost[u] = A[u] + sol[u].minv.dist;\n\t}\n\tfor(int i = head[u]; i; i = edges[i].nxt) {\n\t\tint v = edges[i].to;\n\t\tif(fa[u] == v) continue;\n\t\tsol[v].minv.dist -= 2 * sum[v];\n\t\tsol[v].secmin.dist -= 2 * sum[v];\n\t\tsol[v] = sol[v] + sol[u]; dfs2(v);\n\t}\n}\nint main() {\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; ++i)\n\t\tscanf(\"%lld\", &A[i]);\n\tfor(int i = 1; i < n; ++i) {\n\t\tint u, v, w; scanf(\"%d %d %d\", &u, &v, &w);\n\t\taddedge(u, v, w); addedge(v, u, w);\n\t}\n\tdfs(1);\n\tfor(int x = 1; x <= n; ++x) par[x] = x;\n\tLL ans = 0;\n\twhile(true) {\n\t\tfor(int x = 1; x <= n; ++x) col[x] = findroot(x);\n\t\tbool flag = true;\n\t\tfor(int x = 2; x <= n; ++x)\n\t\t\tif(col[x] != col[1]) {flag = false; break;}\n\t\tif(flag) break;\n\t\tdfs1(1); dfs2(1);\n\t\tfor(int u = 1; u <= n; ++u) cost2[u] = inf;\n\t\tfor(int u = 1; u <= n; ++u)\n\t\t\tif(cost[u] < cost2[col[u]]) {\n\t\t\t\tlink2[col[u]] = (Edge2){u, link[u]};\n\t\t\t\tcost2[col[u]] = cost[u];\n\t\t\t}\n\t\tfor(int u = 1; u <= n; ++u)\n\t\t\tif(cost2[u] < inf) {\n\t\t\t\tint x = link2[u].u, y = link2[u].v;\n\t\t\t\tif(!same(x, y)) {unite(x, y); ans += cost2[u];}\n\t\t\t} //\u6ce8\u610f\u6700\u540e\u7684\u8fde\u8fb9\uff0c\u662f\u6bcf\u4e2a\u8fde\u901a\u5757\u9009\u4e00\u6761\u8fde\u5411\u5916\u90e8\u7684\u6700\u5c0f\u7684\u8fb9\uff01\n\t}\n\tprintf(\"%lld\", ans);\n\treturn 0;\n}\n```\n\n\u9644\u4e00\u4e9b Boruvka \u7b97\u6cd5\u7684\u7ec3\u4e60\u9898\uff1a\n\n[CF888G Xor-MST](https://www.luogu.com.cn/problem/CF888G)\n\n[CF1550F Jumping Around](https://www.luogu.com.cn/problem/CF1550F)",
        "postTime": 1648654442,
        "uid": 95625,
        "name": "\u66b4\u529b\u51fa\u5947\u8ff9",
        "ccfLevel": 0,
        "title": "AT3611 Tree MST \u9898\u89e3"
    },
    {
        "content": "\u9996\u5148\u6709\u4e2a\u663e\u7136\u7684\u7ed3\u8bba\uff0c\u5bf9\u4e8e\u4e00\u822c\u56fe\u7684MST\uff08\u6700\u5c0f\u751f\u6210\u6811\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u628a**\u8fb9\u96c6**\u5206\u4e3a\u4e24\u90e8\u5206\u5206\u522b\u505a\u6700\u5c0f\u751f\u6210\u6811\uff0c\u7136\u540e\u518d\u628a\u4e24\u90e8\u5206\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u62ff\u51fa\u6765\u518d\u505a\u4e00\u6b21\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5f97\u5230\u7684\u5c31\u662f\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\n\n\u8bc1\u660e\u5f88\u663e\u7136\n\n\u76f4\u63a5\u7b97\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb\u8981\u7528$lca$\uff0c\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0$lca$\u4e00\u5b9a\u5728\u5b83\u4eec\u4e4b\u95f4\u7684\u8def\u5f84\u4e0a\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u6109\u5feb\u5730\u641e\u8def\u5f84\u5566\n\n\u5bf9\u4e8e\u7ecf\u8fc7\u91cd\u5fc3\u7684\u4e24\u4e2a\u70b9\u7684\u8def\u5f84 u,v\uff0c\u5b83\u4eec\u7684\u8fb9\u957f\u5c31\u662f $(w[u] + dis[u]) + (w[v]+dis[v])$,\u5c31\u662f\u4e24\u4e2a\u70b9\u5230\u6839\uff08\u91cd\u5fc3\uff09\u7684\u8def\u5f84\u957f+\u70b9\u7684\u6743\u503c\n\n\u7136\u540e\u53d1\u73b0\n\n\u6bcf\u4e2a\u70b9$x$\u90fd\u662f\u8981\u52a0\u4e0a\u81ea\u5df1\u7684\u70b9\u6743\u548c\u5230\u6839\u7684\u8def\u5f84\u957f$w[x]+dis[x]$\uff0c\u53e6\u5916\u4e00\u8fb9\u80af\u5b9a\u662f\u9009\u6700\u5c0f\u7684$w[y]+dis[y]$,\u6240\u4ee5\u8fd9\u9898\u76f4\u63a5\u627e\u5230\u5b50\u6811\u4e2d\u6700\u5c0f\u7684$w[y]+dis[y]$\u518d\u548c\u5176\u5b83\u70b9\u8fde\u8fb9\u5c31\u597d\u4e86\n\n\n\u628a\u8fd9\u4e9b\u8fb9\u5b58\u4e0b\u6765\uff0c\u6700\u540e\u518d\u8dd1\u4e00\u6b21$kruskal$ \u5c31\u597d\u4e86\n\n\u4e00\u5171$nlogn$\u6761\u8fb9\uff0c$O (n log^2n)$\n\n\u770b\u4ee3\u7801\u80fd\u770b\u61c2\n\ncode:\n```cpp\n\n#include<bits/stdc++.h>\n#define N 2000005\n#define int long long\n#define ll long long\nusing namespace std;\nstruct edge {\n\tint v, nxt, c;\n} e[N << 1];\nint p[N], eid;\nvoid init() {\n\tmemset(p, -1, sizeof p);\n\teid = 0;\n}\nvoid insert(int u, int v, int c) {\n\te[eid].v = v;\n\te[eid].c = c;\n\te[eid].nxt = p[u];\n\tp[u] = eid ++;\n}\nint l, r, a[N], size[N], msize[N], vis[N], w[N], dis[N], szz;\nvoid dfs(int u, int fa) {\n\tmsize[u] = 0;\n\ta[++ r] = u; size[u] = 1;\n\tfor(int i = p[u]; i + 1; i = e[i].nxt) {\n\t\tint v = e[i].v, c = e[i].c;\n\t\tif(vis[v] || v == fa) continue;\n\t\tdfs(v, u);\n\t\tsize[u] += size[v];\n\t\tif(size[v] > msize[u]) msize[u] = size[v];\n\t}\n}\nvoid dfss(int u, int fa, ll sum) {\n\tdis[u] = sum; \n\tfor(int i = p[u]; i + 1; i = e[i].nxt) {\n\t\tint v = e[i].v, c = e[i].c;\n\t\tif(v == fa || vis[v]) continue;\n\t\tdfss(v, u, sum + c);\n\t}\n}\nstruct AA {\n\tint u, v; ll c;\n} ee[N << 3];\nvoid solve(int u) { \n\tl = 1, r = 0;\n\tdfs(u, u);\n\tint sz = size[u];\n\tfor(int i = 1; i <= r; i ++) {\n\t\tint v = a[i];\n\t\tif(max(msize[v], sz - size[v]) < max(msize[u], sz - size[u])) u = v;\n\t}\n\tdis[u] = 0;\n\tvis[u] = 1;\n\tfor(int i = p[u]; i + 1; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif(vis[v]) continue;\n\t\tdfss(v, u, e[i].c);\n\t}\n\tint ma = u;\n\tfor(int i = l; i <= r; i ++) {\n\t\tint v = a[i];\n\t\tif(dis[v] + w[v] < dis[ma] + w[ma]) ma = v;\t\t\n\t}\n\tfor(int i = l; i <= r; i ++) {\n\t\tint v = a[i];\n\t\tif(v == ma) continue;\n\t\tee[++ szz] = {ma, v, w[ma] + w[v] + dis[v] + dis[ma]};\n\t}\n\t\n\tfor(int i = p[u]; i + 1; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif(vis[v]) continue;\n\t\tsolve(v);\n\t}\n}\nint cmp(AA x, AA y) {\n\treturn x.c < y.c;\n}\nint fa[N], n;\nint get(int x) {\n\treturn fa[x] == x ? x : fa[x] = get(fa[x]);\n}\nsigned main() {\n\tinit();\n\tscanf(\"%lld\", &n);\n\tfor(int i = 1; i <= n; i ++) scanf(\"%lld\", &w[i]), fa[i] = i;\n\tfor(int i = 2; i <= n; i ++) {\n\t\tint u, v, c;\n\t\tscanf(\"%lld%lld%lld\", &u, &v, &c);\n\t\tinsert(u, v, c);\n\t\tinsert(v, u, c);\n\t}\n\tsolve(1); \n\tsort(ee + 1, ee + 1 + szz, cmp);\n\tll ans = 0;\n\tfor(int i = 1; i <= szz; i ++) {\n\t\tint u = ee[i].u, v = ee[i].v; ll c = ee[i].c;\n\t\tu = get(u), v = get(v);\n\t\tif(u == v) continue;\n\t\tfa[u] = v; ans += c;\n\t}\n\tprintf(\"%lld\", ans);\n\treturn 0;\n}\n```",
        "postTime": 1590128500,
        "uid": 31656,
        "name": "lomit",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 AT3611 \u3010Tree MST\u3011"
    },
    {
        "content": "## \u601d\u60f3\u53ca\u6d41\u7a0b\nBoruvka \u662f Kruskal \u548c Prim \u4e24\u8005\u7684\u7ed3\u5408\u7b97\u6cd5\uff0c\u201c\u535a\u91c7\u4f17\u957f\u201d\u56e0\u6b64\u80fd\u8f7b\u677e\u89e3\u51b3\u4e00\u7c7b\u4e24\u8005\u5f88\u96be\u5feb\u901f\u89e3\u51b3\u7684\u95ee\u9898\uff0c\u5c24\u5176\u662f\u5b8c\u5168\u56fe\uff08\u7a20\u5bc6\u56fe\uff09\u7684 MST\u3002\n\nBoruvka \u7684\u601d\u60f3\u662f\uff1a\u6700\u5f00\u59cb\u6bcf\u4e2a\u70b9\u90fd\u662f\u4e00\u4e2a\u5b64\u7acb\u7684\u8fde\u901a\u5757\uff0c\u4e4b\u540e\u7ecf\u8fc7\u591a\u8f6e\u7684\u8fed\u4ee3\uff0c\u5411 MST \u8fb9\u96c6\u4e2d\u52a0\u8fb9\uff0c\u628a\u8fb9\u7684\u4e24\u7aef\u7684\u8fde\u901a\u5757\u5408\u5e76\u3002\u52a0\u8fb9\u7684\u65b9\u6cd5\u662f\uff1a\u5bf9\u6bcf\u4e2a\u8fde\u901a\u5757\u627e\u5230\u79bb\u5b83\u6700\u8fd1\u7684\u8fde\u901a\u5757\uff0c\u8fd9\u6761\u8fb9\u53eb\u505a\u8fd9\u4e2a\u8fde\u901a\u5757\u7684\u201c\u6700\u5c0f\u8fb9\u201d\uff0c\u6bcf\u4e00\u8f6e\u7ed3\u675f\u65f6\u5c06\u6240\u6709\u62e5\u6709\u6700\u5c0f\u8fb9\u7684\u8fde\u901a\u5757\u7684\u6700\u5c0f\u8fb9\u52a0\u5165 MST \u8fb9\u96c6\uff1b\u8fd9\u4e00\u6b65\u53ef\u4ee5\u7528 $O(E)$ \u5730\u679a\u4e3e\u8fb9\u5e76\u66f4\u65b0\u4e24\u7aef\u8fde\u901a\u5757\u7684\u6700\u5c0f\u8fb9\u6765\u505a\u5230\uff0c\u4f46\u5f88\u591a\u65f6\u5019\u4e5f\u4f1a\u91c7\u7528 dp \u7b49\u65b9\u6cd5\u76f4\u63a5\u6c42\u5f97\u8fd9\u4e2a\u79bb\u5b83\u6700\u8fd1\u7684\u8fde\u901a\u5757\u3002\u6bcf\u4e00\u8f6e\u7ed3\u675f\u540e\uff0c\u6240\u6709\u8fde\u901a\u5757\u90fd\u8bbe\u4e3a\u201c\u6ca1\u6709\u6700\u5c0f\u8fb9\u201d\uff0c\u5e76\u8fdb\u5165\u4e0b\u4e00\u8f6e\u3002\u5bf9\u4e8e\u4e00\u4e2a\u8fde\u901a\u56fe\u6765\u8bf4\uff0c\u5408\u5e76\u4e00\u8f6e\u4e0b\u6765\uff0c\u90fd\u4f1a\u5c06\u8fde\u901a\u5757\u7684\u6570\u91cf\u81f3\u5c11\u51cf\u534a\uff0c\u6781\u7aef\u60c5\u51b5\u662f $V/2$ \u4e2a\u8fde\u901a\u5757\u548c\u53e6\u5916 $V/2$ \u4e2a\u8fde\u901a\u5757\u521a\u597d\u5206\u522b\u662f $V/2$ \u4e2a\u6700\u5c0f\u8fb9\u7684\u4e24\u7aef\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6700\u591a\u53ea\u4f1a\u8fed\u4ee3 $\\log V$ \u8f6e\uff0c\u5e38\u89c1\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(E\\log V)$\u3002\uff08\u5f53\u7136\u4e3b\u8981\u53d6\u51b3\u4e8e\u627e\u6700\u5c0f\u8fb9\u7684\u65b9\u6cd5\uff09\n\n## \u63a8\u8350\u9898\u76ee\n[CODE-FESTIVAL-2017-FINAL Tree MST](https://www.luogu.com.cn/problem/AT3611)\n\n\n\u8fd9\u4e2a\u9898\u5c31\u662f\u5178\u578b\u7684\u4f7f\u7528\u4e86 dp \u7684\u65b9\u6cd5\u6765\u5bfb\u627e\u8fde\u901a\u5757\u7684\u6700\u8fd1\u8fde\u901a\u5757\u3002\u5728\u6bcf\u8f6e\u4e2d\uff0c\u6211\u4eec\u53ef\u4ee5\u7528\u6811\u5f62 dp \u7ef4\u62a4\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u91cc\u79bb\u5b83\u6700\u8fd1\u7684\u4e24\u4e2a\u989c\u8272\u4e92\u5f02\u7684\u70b9\uff08\u6700\u8fd1\u7684\u542b\u4e49\u662f\u201c\u5b8c\u5168\u56fe\u201d\u4e2d\u8fb9\u6743\u6700\u5c0f\uff09\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u8fd9\u4e24\u4e2a\u70b9\u4e2d\u81f3\u5c11\u4e00\u4e2a\u7684\u989c\u8272\u548c $x$ \u4e0d\u4e00\u6837\uff0c\u800c\u8fd9\u6837\u7684\u4fe1\u606f\u4e5f\u5bb9\u6613\u4e3a\u7236\u4eb2\u6240\u7528\u3002\u518d\u8fdb\u884c\u4e00\u9053\u6362\u6839 dp\uff0c\u5f97\u5230\u79bb\u6bcf\u4e2a\u70b9\u6700\u8fd1\u7684\u3001\u8ddf\u8fd9\u4e2a\u70b9\u989c\u8272\u4e0d\u4e00\u6837\u7684\u70b9\uff0c\u7528\u201c\u70b9\u7684\u6700\u5c0f\u8fb9\u201d\u66f4\u65b0\u70b9\u6240\u5728\u8fde\u901a\u5757\u7684\u6700\u5c0f\u8fb9\uff0c\u7167\u642c Boruvka \u7684\u6d41\u7a0b\u5373\u53ef\u3002\n\n```cpp\n/*\nTodo list:\n1. How to embed 'whether a node has miniedge' into ppp\n2. How to connect in BCJ\n3. You haven't changed vertex to color! DONE\n*/\n#include <bits/stdc++.h>\n#define int long long\n#define pii pair<int,int>\n#define ppp pair<pii,pii >\n#define fi first\n#define se second\n#define mkp make_pair\nusing namespace std;\nconst int N=2e5+5,INF=1e17;\nconst ppp nu=mkp(mkp(INF,0),mkp(INF,0));\nint n,n_v,n_e,ans,w[N],fa[N];\nbool bk[N];\nvector<pii>gr[N],G[N];\nvector<ppp>f[N]; // nearest 2 colors in x's subtree\npair<pii,int>mn[N]; // to store the miniedges for each routine\nint find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\nvoid unite(int x,int y){fa[find(y)]=find(x);}\ninline void adde(int u,int v,int w){\n\tgr[u].push_back(mkp(v,w)),gr[v].push_back(mkp(u,w));\n}\nvoid dfs0(int x,int p){\n\tfor(int i=0;i<gr[x].size();i++){\n\t\tint y=gr[x][i].first,z=gr[x][i].second;\n\t\tif(y^p)G[x].push_back(mkp(y,z)),dfs0(y,x);\n\t}\n}\ninline pair<pii,int>gm(pair<pii,int>a,pair<pii,int>b){\n\treturn a.se<b.se?a:b;\n}\ninline ppp merge(ppp a,ppp b){\n\tvector<pii>tmp;\n\ttmp.push_back(a.fi),tmp.push_back(a.se),tmp.push_back(b.fi),tmp.push_back(b.se);\n\tsort(tmp.begin(),tmp.end(),[](pii a,pii b){return a.fi<b.fi;});\n\tppp c;\n\tc.fi=tmp[0];\n\tif(tmp[0].se!=tmp[1].se)c.se=tmp[1];\n\telse c.se=tmp[2];\n\treturn c;\n}\nvoid de(ppp a){\n\tprintf(\"(%lld %lld, %lld %lld)\\n\",a.fi.fi,a.fi.se,a.se.fi,a.se.se);\n}\nvoid dfs1(int x){\n\tvector<ppp>pre,suf;\n\tf[x].resize(G[x].size()+1),pre.resize(G[x].size()),suf.resize(G[x].size());\n\tfor(int i=0;i<G[x].size();i++){\n\t\tint y=G[x][i].first,z=G[x][i].second;\n\t\tdfs1(y);\n\t\tppp tmp=f[y][G[y].size()],tmp2=mkp(mkp(w[y],find(y)),mkp(INF,0));\n\t\ttmp=merge(tmp,tmp2);\n\t\ttmp.fi.fi+=z,tmp.se.fi+=z; \n\t\tpre[i]=(!i)?tmp:merge(pre[i-1],tmp);\n\t}\n\tfor(int i=(int)G[x].size()-1;~i;i--){\n\t\tint y=G[x][i].first,z=G[x][i].second;\n\t\tppp tmp=f[y][G[y].size()],tmp2=mkp(mkp(w[y],find(y)),mkp(INF,0));\n\t\ttmp=merge(tmp,tmp2);\n\t\ttmp.fi.fi+=z,tmp.se.fi+=z; \n\t\tsuf[i]=i==G[x].size()-1?tmp:merge(suf[i+1],tmp);\n\t}\n\tfor(int i=0;i<G[x].size();i++){\n\t\tf[x][i]=merge((!i)?nu:pre[i-1],i==G[x].size()-1?nu:suf[i+1]);\n\t}\n\tf[x][G[x].size()]=G[x].size()?suf[0]:nu;\n\t\n}\nvoid dfs2(int x,int p,int pe,int pid){\n\tif(p){\n\t\tppp tmp=f[p][pid],tmp2=mkp(mkp(w[p],find(p)),mkp(INF,0));\n\t\ttmp=merge(tmp,tmp2);\n\t\ttmp.fi.fi+=pe,tmp.se.fi+=pe;\n\t\tfor(int i=0;i<=G[x].size();i++){\n\t\t\tf[x][i]=merge(f[x][i],tmp);\n\t\t}\n\t}\n//\tprintf(\"%lld: \",x),de(f[x][G[x].size()]);\n\tif(f[x][G[x].size()].fi.fi<INF&&f[x][G[x].size()].fi.se!=find(x))mn[find(x)]=gm(mn[find(x)],mkp(mkp(find(x),f[x][G[x].size()].fi.se),f[x][G[x].size()].fi.fi+w[x]));\n\telse if(f[x][G[x].size()].se.fi<INF&&f[x][G[x].size()].se.se!=find(x))mn[find(x)]=gm(mn[find(x)],mkp(mkp(find(x),f[x][G[x].size()].se.se),f[x][G[x].size()].se.fi+w[x]));\n\tfor(int i=0;i<G[x].size();i++){\n\t\tint y=G[x][i].first,z=G[x][i].second;\n\t\tdfs2(y,x,z,i);\n\t}\n}\nvoid Boruvka(){\n\tn_v=n_e=0;\n\tfor(int i=0;i<=n;i++)f[i].clear(),mn[i]=mkp(mkp(0,0),INF);\n\tdfs1(1),dfs2(1,0,0,0);\n\tfor(int i=1;i<=n;i++)if(find(mn[i].fi.fi)!=find(mn[i].fi.se))unite(mn[i].fi.fi,mn[i].fi.se),ans+=mn[i].se/*,printf(\"%lld %lld %lld\\n\",e[i].fi.fi,e[i].fi.se,e[i].se)*/;\n//\tputs(\"......\");\n\tfor(int i=1;i<=n;i++)bk[find(i)]=1;\n\tfor(int i=1;i<=n;i++)n_v+=bk[i],bk[i]=0;\n}\ninline int read(){\n\tint x=0;char ch=getchar();\n\twhile(ch<'0'||ch>'9')ch=getchar();\n\twhile(ch>='0'&&ch<='9')x=(x<<1)+(x<<3)+(ch^48),ch=getchar();\n\treturn x;\n}\nsigned main(){\n//\tfreopen(\"input.in\",\"r\",stdin);freopen(\"output.out\",\"w\",stdout);\n\tn=read();\n\tfor(int i=1;i<=n;i++)w[i]=read(),fa[i]=i;\n\tfor(int i=1,u,v,_w;i<n;i++){\n\t\tu=read(),v=read(),_w=read();\n\t\tadde(u,v,_w);\n\t}\n\tdfs0(1,0);\n\tn_v=n;\n\tfor(int i=1;n_v>1;i++)Boruvka();\n\tcout<<ans;\n}\n```",
        "postTime": 1649583681,
        "uid": 300078,
        "name": "pengyule",
        "ccfLevel": 7,
        "title": "Boruvka \u6700\u5c0f\u751f\u6210\u6811"
    },
    {
        "content": "[\u9898\u76ee](https://www.luogu.org/problemnew/show/AT3611)\n\n\u8fd9\u4e2a\u9898\u7684\u8f93\u5165\u9996\u5148\u5c31\u662f\u4e00\u68f5\u6811\uff0c\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u70b9\u5206\n\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5206\u6cbb\u91cd\u5fc3\u8003\u8651\u4e00\u4e0b\u8de8\u8fc7\u8fd9\u4e2a\u5206\u6cbb\u91cd\u5fc3\u7684\u8fde\u8fb9\u60c5\u51b5\n\n\u5c31\u662f\u628a\u5f53\u524d\u5206\u6cbb\u533a\u57df\u5185\u6240\u6709\u7684\u70b9\u5411\u8ddd\u79bb\u5206\u6cbb\u91cd\u5fc3\u6700\u8fd1\u7684\u70b9\u8fde\u8fb9\n\n\u8003\u8651\u4e00\u4e0b\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6b63\u786e\u6027\uff0c\u5982\u679c\u6211\u4eec\u5df2\u7ecf\u5bf9\u4e00\u4e2a\u8054\u901a\u5757\u5185\u90e8\u5f62\u6210\u4e86\u4e00\u4e2a$mst$\uff0c\u6211\u4eec\u9700\u8981\u628a\u8fd9\u4e2a\u8054\u901a\u5757\u548c\u53e6\u5916\u4e00\u4e2a\u8054\u901a\u5757\u5408\u5e76\n\n\u5982\u679c\u8fd9\u4e2a\u65b0\u7684\u8054\u901a\u5757\u51fa\u73b0\u4f1a\u4f7f\u5f97\u539f\u6765\u8054\u901a\u5757\u7684$mst$\u6539\u53d8\uff0c\u90a3\u4e48**\u65b0\u51fa\u73b0\u7684\u8fb9\u4e5f\u53ea\u4f1a\u662f\u539f\u6765\u8054\u901a\u5757\u7684\u70b9\u548c\u65b0\u8054\u901a\u5757\u5230\u8fd9\u4e2a\u70b9\u8ddd\u79bb\u6700\u8fd1\u7684\u70b9\u4e4b\u95f4\u7684\u8fb9**\uff0c\u800c\u8fd9\u4e9b\u6700\u8fd1\u7684\u70b9\u53c8\u90fd\u662f\u4e00\u4e2a\uff0c\u6240\u4ee5\u6211\u4eec\u5c31\u53ef\u4ee5\u5927\u5927\u7b80\u5316\u8fde\u8fb9\u6570\u91cf\u4e86\n\n\u6240\u4ee5\u8fd9\u4e2a\u70b9\u5206\u7684\u8fc7\u7a0b\u5c31\u76f8\u5f53\u4e8e\u5408\u5e76$mst$\u7684\u8fc7\u7a0b\n\n\u6211\u4eec\u70b9\u5206\u4e4b\u540e\u53d1\u73b0\u6211\u4eec\u8fde\u4e86\u5927\u6982$nlogn$\u6761\u8fb9\uff0c\u4e8e\u662f\u518d\u8dd1\u4e00\u4e2akruskal\u5c31\u597d\u4e86\uff0c\u590d\u6742\u5ea6$O(nlog^2n)$\n\n\u4ee3\u7801\n\n```cpp\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define re register\n#define LL long long\n#define max(a,b) ((a)>(b)?(a):(b))\n#define min(a,b) ((a)<(b)?(a):(b))\ninline int read() {\n\tchar c=getchar();int x=0;while(c<'0'||c>'9') c=getchar();\n\twhile(c>='0'&&c<='9') x=(x<<3)+(x<<1)+c-48,c=getchar();return x;\n}\nconst int maxn=2e5+5;\nstruct E{int v,nxt,w;}e[maxn<<1];\nstruct Edge{int a,b;LL c;}E[maxn*55];\nint sum[maxn],vis[maxn],head[maxn],mx[maxn],a[maxn],fa[maxn],sz[maxn];\nint n,num,m,dx,S,rt;LL dw,ans,pre[maxn];\ninline void add(int x,int y,int z) {\n\te[++num].v=y;e[num].nxt=head[x];head[x]=num;e[num].w=z;\n}\nvoid getroot(int x,int fa) {\n\tsum[x]=1,mx[x]=0;\n\tfor(re int i=head[x];i;i=e[i].nxt) {\n\t\tif(vis[e[i].v]||e[i].v==fa) continue;\n\t\tgetroot(e[i].v,x);sum[x]+=sum[e[i].v];\n\t\tmx[x]=max(mx[x],sum[e[i].v]);\n\t}\n\tmx[x]=max(mx[x],S-sum[x]);\n\tif(mx[x]<mx[rt]) rt=x;\n}\nvoid getdis(int x,int fa) {\n\tE[++m]=(Edge){dx,x,pre[x]+a[x]+dw};\n\tfor(re int i=head[x];i;i=e[i].nxt) {\n\t\tif(vis[e[i].v]||e[i].v==fa) continue;\n\t\tgetdis(e[i].v,x);\n\t}\n}\nvoid chk(int x,int fa) {\n\tif(pre[x]+a[x]<dw) dw=pre[x]+a[x],dx=x;\n\tfor(re int i=head[x];i;i=e[i].nxt) {\n\t\tif(vis[e[i].v]||e[i].v==fa) continue;\n\t\tpre[e[i].v]=pre[x]+e[i].w;chk(e[i].v,x);\n\t}\n}\nvoid dfs(int x) {\n\tdx=x,dw=a[x];vis[x]=1;pre[x]=0,chk(x,0),getdis(x,0);\n\tfor(re int i=head[x];i;i=e[i].nxt) {\n\t\tif(vis[e[i].v]) continue;\n\t\tS=sum[e[i].v],rt=0,getroot(e[i].v,0),dfs(rt);\n\t}\n}\ninline int cmp(Edge A,Edge B) {return A.c<B.c;}\ninline int find(int x) {return x==fa[x]?x:fa[x]=find(fa[x]);}\ninline int merge(int x,int y) {\n\tint xx=find(x),yy=find(y);\n\tif(xx==yy) return 0;\n\tif(sz[xx]<sz[yy]) fa[xx]=yy,sz[yy]+=sz[xx];\n\t\telse fa[yy]=xx,sz[xx]+=sz[yy];\n\treturn 1;\n}\nint main() {\n\tn=read();\n\tfor(re int i=1;i<=n;i++) a[i]=read();\n\tfor(re int x,y,z,i=1;i<n;i++) \n\t\tx=read(),y=read(),z=read(),add(x,y,z),add(y,x,z); \n\tmx[0]=n+1,S=n,rt=0,getroot(1,0),dfs(rt);\n\tstd::sort(E+1,E+m+1,cmp);\n\tfor(re int i=1;i<=n;i++) sz[i]=1,fa[i]=i;\n\tfor(re int i=1;i<=m;i++) if(merge(E[i].a,E[i].b)) ans+=E[i].c;\n\tstd::cout<<ans;\n\treturn 0;\n}\n```\n",
        "postTime": 1559694504,
        "uid": 35178,
        "name": "asuldb",
        "ccfLevel": 0,
        "title": "\u9898\u89e3  \u3010AT3611\u3011Tree MST"
    },
    {
        "content": "\u9996\u5148\u6211\u4eec\u53d1\u73b0\u5728\u5b8c\u5168\u56fe\u4e0a\u7684\u8fb9\u6743\u82e5\u662f\u5728\u94a6\u5b9a\u7ecf\u8fc7\u4e00\u4e2a\u70b9 $x$ \u7684\u60c5\u51b5\u4e0b\u53ef\u4ee5\u8f6c\u6362\u4e3a $dis_u + dis_v + w_u +\nw_v$\uff0c$dis_i$ \u662f\u70b9 $x$ \u5230\u70b9 $i$ \u7684\u8ddd\u79bb\u3002\u8fd9\u53c8\u53ef\u4ee5\u8f6c\u6362\u4e3a $p_u + p_v$\uff0c$p_i$ \u8868\u793a $dis_i + w_i$\uff0c\u8fd9\u5c31\u544a\u8bc9\u6211\u4eec\u8fd9\u4e24\u4e2a\u70b9\u7684\u4ef7\u503c\u662f\u53ef\u4ee5\u5206\u5f00\u7b97\u7684\u3002\n\n\u800c\u94a6\u5b9a\u4e00\u4e2a\u70b9\u7684\u8fc7\u7a0b\u5c31\u542f\u793a\u6211\u4eec\u70b9\u5206\u3002\u8003\u8651\u70b9\u5206\u51fa\u4e00\u4e2a\u5206\u6cbb\u91cd\u5fc3\u540e\uff0c\u9996\u5148\u6211\u4eec\u77e5\u9053\u53ea\u6709\u5728\u5f3a\u5236\u7ecf\u8fc7\u5206\u6cbb\u91cd\u5fc3\u7684\u60c5\u51b5\u4e0b\u80fd\u6210\u4e3a\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\u624d\u6709\u53ef\u80fd\u6210\u4e3a\u6700\u7ec8\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u8fb9\uff0c\u63a5\u7740\uff0c\u5bf9\u4e8e\u53c8\u56e0\u4e3a\u6bcf\u4e2a\u70b9\u662f\u72ec\u7acb\u7684\uff0c\u6240\u4ee5\u5f3a\u5236\u7ecf\u8fc7\u5206\u6cbb\u91cd\u5fc3\u60c5\u51b5\u4e0b\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u662f\u9009\u51fa\u4e00\u4e2a\u6700\u5c0f\n$p_i$\uff0c\u7136\u540e\u5c06\u5176\u4ed6\u4e0e\u8fd9\u4e2a\u70b9\u4e0d\u5728\u4e00\u68f5\u5b50\u6811\u5185\u7684\u70b9\u4e0e\u8fd9\u4e2a\u70b9\u8fde\u8fb9\uff0c\u800c\u5b50\u6811\u5185\u90e8\u7ecf\u8fc7\u5206\u6cbb\u91cd\u5fc3\u4e00\u5b9a\u4e0d\u4f18\uff0c\u6240\u4ee5\u4e0d\u8fde\u3002\n\n\u6700\u540e\u5c06\u6240\u6709\u4faf\u9009\u8fb9\u63d0\u51fa\u6765\u8dd1\u4e00\u904d Kruskal \u5c31\u505a\u5b8c\u4e86\u3002\u8003\u8651\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u9996\u5148\u6211\u4eec\u70b9\u5206\u4e86 $\\log$ \u5c42\uff0c\u6bcf\u5c42\u8fde\u7684\u8fb9\u6570\u53c8\u662f $O(n)$ \u7684\uff0c\u90a3\u4e48\u603b\u7684\u5019\u9009\u8fb9\u6570\u5c31\u662f $O\n(n \\log n)$\uff0c\u7136\u540e Kruskal \u7684\u590d\u6742\u5ea6 $O (m \\log n)$ \u7684\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f $O (n \\log^2 n)$ \u7684\u3002\n\n\u6700\u540e\u8d34\u4e0a\u4e11\u964b\u7684\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int MAXN=200000,INF=0x3f3f3f3f;\nint n,edgenum,ans,rt,head[MAXN+5],val[MAXN+5],si[MAXN+5],dist[MAXN+5],a[MAXN+5],num,b[MAXN+5],tot,fa[MAXN+5];\nbool vis[MAXN+5];\ninline int read(){\n\tint x=0,f=1;\n\tchar ch;\n\tdo{\n\t\tch=getchar();\n\t\tif(ch=='-'){\n\t\t\tf=-1;\n\t\t}\n\t}while(!(ch>='0'&&ch<='9'));\n\twhile(ch>='0'&&ch<='9'){\n\t\tx=(x<<1)+(x<<3)+ch-'0';\n\t\tch=getchar();\n\t}\n\treturn x*f;\n}\nstruct Tree{\n    int from,to,next,w;\n}edge[2*MAXN+5];\nstruct Nedge{\n    int from,to,w;\n}nedge[20*MAXN+5];\nvoid add_edge(int from,int to,int w){\n    edge[++edgenum].next=head[from];\n    edge[edgenum].from=from;\n    edge[edgenum].to=to;\n    edge[edgenum].w=w;\n    head[from]=edgenum;\n}\nvoid get_root(int x,int f,int cnt){\n    si[x]=1;\n    int maxn=-INF;\n    for(int i=head[x];i;i=edge[i].next){\n        int v=edge[i].to;\n        if(v==f||vis[v]){\n            continue;\n        }\n        get_root(v,x,cnt);\n        si[x]+=si[v];\n        maxn=max(maxn,si[v]);\n    }\n    maxn=max(maxn,cnt-si[x]);\n    if(maxn<ans){\n        ans=maxn;\n        rt=x;\n    }\n}//\u6c42\u91cd\u5fc3\nvoid dfs(int x,int f,int from){\n    a[++num]=x;\n    b[x]=from;\n    si[x]=1;\n    for(int i=head[x];i;i=edge[i].next){\n        int v=edge[i].to;\n        if(v==f||vis[v]){\n            continue;\n        }\n        dist[v]=dist[x]+edge[i].w;\n        dfs(v,x,from);\n        si[x]+=si[v];\n    }\n}\nvoid solve(){\n    vis[rt]=1;\n    dist[rt]=0;\n    num=0;\n    a[++num]=rt;\n    b[rt]=rt;\n    for(int i=head[rt];i;i=edge[i].next){\n        int v=edge[i].to;\n        if(vis[v]){\n            continue;\n        }\n        dist[v]=edge[i].w;\n        dfs(v,rt,v);\n    }\n    int pos=rt,minx=INF;\n    for(int i=1;i<=num;++i){\n        if(val[a[i]]+dist[a[i]]<minx){\n            minx=val[a[i]]+dist[a[i]];\n            pos=a[i];\n        }\n    }\n    for(int i=1;i<=num;++i){\n        if(b[a[i]]!=b[pos]){\n            nedge[++tot].from=pos;\n            nedge[tot].to=a[i];\n            nedge[tot].w=dist[pos]+val[pos]+dist[a[i]]+val[a[i]];//\u5c06\u5019\u9009\u8fb9\u5b58\u4e0b\u6765\n        }\n    }\n    for(int i=head[rt];i;i=edge[i].next){\n        int v=edge[i].to;\n        if(vis[v]){\n            continue;\n        }\n        ans=INF;\n        get_root(v,v,si[v]);//\u7ee7\u7eed\u70b9\u5206\u4e0b\u53bb\n        solve();\n    }\n}//\u70b9\u5206\nbool cmp(Nedge x,Nedge y){\n    return x.w<y.w;\n}\nint find(int x){\n    if(fa[x]==x){\n        return x;\n    }\n    return fa[x]=find(fa[x]);\n}\nsigned main(){\n    n=read();\n    for(int i=1;i<=n;++i){\n        val[i]=read();\n    }\n    for(int i=1;i<n;++i){\n        int x=read();\n        int y=read();\n        int w=read();\n        add_edge(x,y,w);\n        add_edge(y,x,w);\n    }\n    ans=INF;\n    get_root(1,1,n);\n    solve();\n    sort(nedge+1,nedge+tot+1,cmp);\n    for(int i=1;i<=n;++i){\n        fa[i]=i;\n    }\n    ans=0;\n    for(int i=1;i<=tot;++i){\n        int x=nedge[i].from;\n        int y=nedge[i].to;\n        x=find(x);\n        y=find(y);\n        if(x!=y){\n            fa[x]=y;\n            ans+=nedge[i].w;\n        }\n    }//Kruskal\n    printf(\"%lld\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1663803707,
        "uid": 360977,
        "name": "541forever",
        "ccfLevel": 0,
        "title": "AT3611 Tree MST"
    },
    {
        "content": "\u6ce8\u610f\u5230\u70b9\u6570\u6bd4\u8fb9\u6570\u5c11\u5f88\u591a\uff0c\u8003\u8651\u4f7f\u7528 Bor\u016fvka \u7b97\u6cd5\u3002\n\n\u8fb9\u6743\u4e3a $s_x+s_y-2\\times s_{lca(x,y)} + w_x+w_y$ \uff0c\u5176\u4e2d $s_x$ \u8868\u793a $x$ \u5230\u6839\u7684\u8ddd\u79bb\u548c\u3002\n\n\u90a3\u4e48\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a $x$\uff0c\u627e\u5230\u7956\u5148\u67d0\u4e2a\u70b9\uff0c\u94a6\u5b9a\u8fd9\u4e2a\u70b9\u662f\u4ed6\u4eec\u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u3002\u6b64\u65f6\u7ef4\u62a4\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e3a\u6839\u5b50\u6811\u5185\u67d0\u70b9 $y$ \u7684 $s_y+w_y$ \u7684\u6700\u5c0f\u503c\u3002\u8fd9\u4e2a\u53ef\u4ee5 dp \u51fa\u6765\u3002\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u94a6\u5b9a\u662f\u5bf9\u7684\uff0c\u662f\u56e0\u4e3a\u5982\u679c\u5b9e\u9645\u4e0a \u6700\u5c0f\u7684 $y$ \u4e0e $x$ \u7684\u6700\u8fd1\u516c\u5171\u7956\u5148\u4e0d\u662f\u8fd9\u4e2a\u70b9\u7684\u8bdd\uff0c\u90a3\u7b54\u6848\u5fc5\u7136\u52a3\u4e8e\u771f\u6b63\u6700\u8fd1\u516c\u5171\u7956\u5148\u7684\u7b54\u6848\u3002\n\nBor\u016fvka \u7b97\u6cd5\uff0c\u8981\u627e\u5230\u5c5e\u4e8e\u4e0d\u540c\u8054\u901a\u5757\u7684\u4e00\u6761\u6700\u5c0f\u7684\u8fb9\uff0c\u5408\u5e76\uff0c\u5e76\u52a0\u5165\u7b54\u6848\u3002\n\n\u7531\u4e8e $x,y$ \u53ef\u80fd\u5c5e\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\u3002dp \u7684\u65f6\u5019\u53ef\u4ee5\u91cd\u8f7d\u4e00\u4e2a\u7c7b\uff0c\u5b58\u6700\u5c0f\u503c\u548c\u6b21\u5c0f\u503c\u3002\u5e76\u9650\u5b9a\u4ed6\u4eec\u4e0d\u540c\u5c5e\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757\u3002\n\n\u6709\u4e86 dp \u503c\u4ee5\u540e\uff0c\u7b2c\u4e8c\u6b21\u904d\u5386\u6c42\u51fa $x$ \u7b54\u6848\uff08\u8fd9\u91cc\u7b54\u6848\u6307 $x$ \u5230\u4e0d\u540c\u8054\u901a\u5757\u7684\u6700\u77ed\u8fb9\uff09\uff0c\u53ef\u4ee5\u8d2a\u5fc3\u5730\u8003\u8651\uff0c\u8003\u8651 \u6700\u5c0f\u503c\u548c $x$ \u662f\u5426\u5728\u4e00\u4e2a\u8fde\u901a\u5757\u3002\u4e0d\u662f\u5c31\u8003\u8651\u6b21\u5927\u503c\u3002 \u5bb9\u6613\u8bc1\u660e\u8bb0\u5f55\u4e24\u4e2a\u4e0d\u540c\u8fde\u901a\u5757\u7684\u503c\uff0c\u603b\u80fd\u4e0e\u4efb\u610f $x$ \u5f62\u6210\u4e0d\u540c\u5c5e\u4e8e\u4e00\u4e2a\u8fde\u901a\u5757 \u8fd9\u4e2a\u6548\u679c\u3002\n\n\u7136\u540e\u53d6\u4e00\u4e2a\u8fde\u901a\u5757\u91cc\u9762\u6bcf\u4e2a\u70b9\u7b54\u6848\uff08\u4e0e\u4e0a\u6587\u5b9a\u4e49\u4e00\u6837\uff09\u7684\u6700\u5c0f\u503c\uff0c\u5408\u5e76\u3002\n\n\n[\u8bc4\u6d4b\u8bb0\u5f551](https://atcoder.jp/contests/cf17-final/submissions/33407605)\n\n[\u8bc4\u6d4b\u8bb0\u5f552](https://atcoder.jp/contests/cf17-final/submissions/33407678)\n",
        "postTime": 1658477872,
        "uid": 119062,
        "name": "Lates",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT3611 Tree MST"
    },
    {
        "content": "\u4e3a\u4ec0\u4e48\u6211\u611f\u89c9\u6211\u7684\u6dc0\u7c89\u8d28\u548c\u5927\u5bb6\u7684\u6253\u6cd5\u4e0d\u4e00\u6837\uff0c\u800c\u4e14\u5e38\u6570\u8fd9\u4e48\u5927......\n\n# \u524d\u7f6e\u77e5\u8bc6\n\nkruskal \u6700\u5c0f\u751f\u6210\u6811\u7b97\u6cd5\u3002\n\n# Solution\n\n**\u5148\u666e\u53ca\u6dc0\u7c89\u8d28\uff1a**\n\n\u5728\u4e00\u7c7b\u548c\u6811\u4e0a\u8def\u5f84\u6709\u5173\u7684\u95ee\u9898\u91cc\uff0c\u53ef\u4ee5\u7528\u70b9\u5206\u6cbb\u3002\n\n\u65e2\u7136\u662f\u5206\u6cbb\uff0c\u6211\u4eec\u5c31\u5148\u8003\u8651\u539f\u6765\u7684\u6811\u3002\u53ef\u4ee5\u628a\u8def\u5f84\u5206\u6210\u4e24\u7c7b\uff1a\u901a\u8fc7\u6839\u7684\u8def\u5f84\u548c\u6ca1\u901a\u8fc7\u6839\u7684\u8def\u5f84\u3002\u7b2c\u4e8c\u7c7b\u8def\u5f84\u6211\u4eec\u9012\u5f52\u5904\u7406\uff0c\u53ea\u8003\u8651\u901a\u8fc7\u6839\u7684\u8def\u5f84\u3002\u53ef\u4ee5\u53d1\u73b0\uff0c\u4efb\u610f\u4e24\u4e2a\u4e0d\u540c\u5b50\u6811\u4e0a\u7684\u70b9\u7684\u8ddd\u79bb\u5c31\u662f\u4ed6\u4eec\u5230\u6839\u7684\u8ddd\u79bb\u4e4b\u548c\uff0c\u4e3a\u4e86\u4e0d\u7edf\u8ba1\u540c\u4e00\u4e2a\u5b50\u6811\u4e0a\u7684\u8def\u5f84\uff0c\u53ef\u4ee5\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u5c5e\u4e8e\u6839\u7684\u54ea\u4e00\u68f5\u5b50\u6811\u3002\u9884\u5904\u7406\u597d\u540e\u518d\u5904\u7406\u95ee\u9898\u3002\n\n\u6211\u4eec\u6bcf\u6b21\u9009\u6839\u9009\u6811\u7684\u91cd\u5fc3\uff0c\u8fd9\u6837\u53ef\u4ee5\u505a\u5230 $O(\\log n)$ \u5c42\u7684\u5206\u6cbb\uff0c\u5269\u4e0b\u7684\u5408\u7406\u5904\u7406\u5c31\u884c\u4e86\u3002\n\n**\u505a\u6cd5\uff1a**\n\n~~\u4e0d\u4f1a\u771f\u7684\u6709\u4eba\u66b4\u529b\u5427......~~\n\n\u89c2\u5bdf\u5230\u672c\u9898\u7684\u8f93\u5165\u7ed3\u6784\u662f\u6811\uff0c\u9700\u8981\u7ef4\u62a4\u7684\u4e1c\u897f\u662f\u6811\u4e0a\u7684\u8def\u5f84\u4e14\u5b50\u6811\u5bf9\u5e94\u7684\u6700\u5c0f\u751f\u6210\u6811\u548c\u4e0a\u6839\u8282\u70b9\u80af\u5b9a\u8fd8\u662f\u6700\u5c0f\u751f\u6210\u6811\uff0c\u6240\u4ee5\u8003\u8651\u70b9\u5206\u6cbb\u3002\n\n\u5bf9\u4e8e\u8fd9\u9898\u6709\u4e00\u4e2a\u5f88\u663e\u7136\u7684**\u6027\u8d28**\uff1a\u5728\u5408\u5e76\u65f6\u9700\u8981\u52a0\u5165\u7684\u8def\u5f84\u53ea\u80fd\u662f\u6839\u5230\u5b50\u6811\u4e0a\u7684\u8282\u70b9\uff0c\u6709\u4e86\u8fd9\u4e00\u70b9\u5c31\u5f88\u7b80\u5355\u4e86\u3002\u5148\u628a\u5b50\u6811\u5bf9\u5e94\u7684\u6700\u5c0f\u751f\u6210\u6811\u641e\u51fa\u6765\uff0c\u7136\u540e\u628a\u6839\u8282\u70b9\u5230\u6240\u6709\u70b9\u7684\u8def\u5f84\u4e0e\u5b50\u6811\u5bf9\u5e94\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u8def\u5f84\u5408\u5e76\uff0c\u7136\u540e\u5c31\u662f\u677f\u677f\u3002\n\n\u4e2a\u4eba\u611f\u89c9\u6709\u70b9\u6076\u8bc4\u3002\n\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define int long long\n#define wr(x,ch) write(x),putchar(ch)\nusing namespace std;\nnamespace IO{\n\t\n}\nusing IO::read;\nusing IO::write;\nconst int N=200005;\nll sum,head[N],nxt[N<<1],flag[N],cnt,to[N<<1],w[N<<1],fa[N],f[N],siz[N],Min,Minn,d[N],a[N],ans[N],n,u,v,ww,W[N],tto[N<<1];\nstruct edge {\n\tll u,v,w;\n\tbool operator<(const edge &p) const {\n\t\treturn w<p.w;\n\t}\n};\nvector<edge> vec[N],tmp;\nvoid add(int u,int v,int ww) {\n\tnxt[++cnt]=head[u],to[head[u]=cnt]=v,w[cnt]=ww;\n}\nvoid init_0(int p) {\n\tsum++;\n\tfor(int i=head[p];i;i=nxt[i]) \n\t\tif(!flag[to[i]]&&to[i]!=fa[p]) fa[to[i]]=p,init_0(to[i]);\n}\nvoid init(int p) {\n\tsiz[p]=1;\n\tll tmp=0;\n\tfor(int i=head[p];i;i=nxt[i]) \n\t\tif(!flag[to[i]]&&to[i]!=fa[p]) init(to[i]),siz[p]+=siz[to[i]],tmp=max(tmp,siz[to[i]]);\n\tif(max(tmp,sum-tmp)<Min) Min=max(tmp,sum-tmp),Minn=p;\n}\nvoid dfs(int p,ll dis,int top) {\n\td[p]=dis+W[p];\n\tif(top!=-1) a[++sum]=p;\n\tfor(int i=head[p];i;i=nxt[i]) {\n\t\tif(to[i]!=fa[p]&&!flag[to[i]]) {\n\t\t\tfa[to[i]]=p;\n\t\t\tif(top==-1) dfs(to[i],dis+w[i],to[i]);\n\t\t\telse dfs(to[i],dis+w[i],top);\n\t\t}\n\t}\n}\nbool cmp(int x,int y) {\n\treturn d[x]<d[y];\n}\nint get(int x) {\n\treturn x==f[x]?x:f[x]=get(f[x]);\n}\nint fz(int p) {\n\tMin=0x7f7f7f7f,Minn=0,fa[p]=0,sum=0;\n\tinit_0(p),init(p);\n\tp=Minn,flag[p]=1,fa[p]=0;\n\tfor(int i=head[p];i;i=nxt[i]) if(!flag[to[i]]) tto[i]=fz(to[i]);\n\tsum=0;\n\tdfs(p,0,-1);\n\tsort(a+1,a+sum+1,cmp);\n\ttmp.clear();\n\tfor(int i=head[p];i;i=nxt[i]) if(tto[i]&&!flag[tto[i]]) for(auto &lxl:vec[tto[i]]) tmp.push_back(lxl);\n\tfor(int i=2;i<=sum;i++) tmp.push_back((edge){a[1],a[i],d[a[1]]+d[a[i]]});\n\tfor(int i=1;i<=sum;i++) tmp.push_back((edge){p,a[i],d[a[i]]+d[p]}),f[a[i]]=a[i];\n\tsort(tmp.begin(),tmp.end());\n\tf[p]=p;int op1,op2,op3;\n\tfor(auto &lxl:tmp) {\n\t\top1=get(lxl.u),op2=get(lxl.v),op3=lxl.w;\n\t\tif(op1==op2) continue;\n\t\tf[op1]=op2;\n\t\tans[p]+=op3;\n\t\tvec[p].push_back(lxl);\n\t}\n\tflag[p]=0;\n\treturn p;\n}\nsigned main() {\n//\tfreopen(\"data.in\",\"r\",stdin);\n\tn=read();\n\tfor(int i=1;i<=n;i++) W[i]=read();\n\tfor(int i=1;i<n;i++) u=read(),v=read(),ww=read(),add(u,v,ww),add(v,u,ww);\n\tint ttmp=fz(1); \n//\tfor(auto &lxl:vec[ttmp]) printf(\"%d %d %d\\n\",lxl.u,lxl.v,lxl.w);\n\twr(ans[ttmp],'\\n');\n\treturn 0;\n}\n```",
        "postTime": 1656138395,
        "uid": 383791,
        "name": "Others",
        "ccfLevel": 7,
        "title": "AT3611 \u9898\u89e3"
    },
    {
        "content": "\u770b\u7740\u8fd9\u4e2a\u5f0f\u5b50\uff0c\u633a\u7b80\u5355\u7684\uff0c\u62c6\u4e00\u4e0b\uff1a\n\n$w_x + w_y + dis_{x,y}$\n\n\u679a\u4e3e lca\uff1a\n\n$= w_x + w_y + (dep_x + dep_y - 2 \\times dep_{lca})$\n\n\u76f4\u63a5\u5408\u5e76\u4e0b\u6807\u76f8\u540c\u7684\u9879\uff1a\n\n$= (w_x + dep_x) + (w_y + dep_y) - 2 \\times dep_{lca}$\n\n\u4ee5\u4e0b\u5c06\u4e00\u4e2a\u70b9 $x$ \u7684\u503c\u79f0\u4e3a $(w_x + dep_x)$\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $x$\uff0c\u8003\u8651\u5f53\u5b83\u4f5c\u4e3a lca \u65f6\u7684\u7b54\u6848\uff0c\u7ef4\u62a4\u5b50\u6811\u5185\u5f02\u8272\u7684\u6700\u5c0f\u7684\u4e24\u4e2a\u70b9\u7684\u503c\u5e76\u65f6\u523b\u66f4\u65b0\u7b54\u6848\uff0c\u6211\u4eec\u6bcf\u6b21\u6a21\u4eff Kruskal \u627e\u8fb9\u6743\u6700\u5c0f\u7684\u4e24\u4e2a\u70b9\u5e76\u542f\u53d1\u5f0f\u5408\u5e76\u6539\u989c\u8272\uff0c\u53ef\u4ee5\u901a\u8fc7\u4f18\u79c0\u7684 DDP \u505a\u5230 $O(n \\log ^ 3 n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\uff0c\u663e\u7136\u8fc7\u4e0d\u4e86\u3002\n\n\u8003\u8651\u8fb9\u591a\uff0c\u4f46\u8fb9\u5177\u6709\u7edf\u4e00\u7684\u8ba1\u7b97\u683c\u5f0f\u3002\u8054\u60f3\u5230\u53e6\u5916\u4e00\u79cd\u6c42\u6700\u5c0f\u751f\u6210\u6811\u7684 Boruvka \u7b97\u6cd5\uff1a\u6211\u4eec\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u5f53\u4f5c $x$ \u5bfb\u627e\u4f7f $x$ \u56fa\u5b9a\u65f6\u4f7f\u4e0a\u8ff0\u5f0f\u5b50\u6700\u5c0f\u7684\u4e00\u4e2a $y$\uff0c\u800c\u8fd9\u4e2a\u4e1c\u897f\u6211\u4eec\u663e\u7136\u53ef\u4ee5\u5148\u5c06 $x$ \u5b50\u6811\u5185\u7684\u70b9\u627e\u4e00\u4e0b\u6700\u5c0f\u503c\uff0c\u7136\u540e\u505a\u4e00\u904d\u6362\u6839 dp \u5f97\u5230\u6bcf\u4e2a\u70b9 $x$ \u5bf9\u5e94\u7684 $y$\u3002\n\n\u63a5\u7740\u5c31\u53ef\u4ee5\u6a21\u62df Boruvka \u7b97\u6cd5\u4e86\uff0c\u633a ez \u7684\u3002\n\n\u6ce8\u610f\u6211\u4eec\u5e94\u8be5\u540c\u65f6\u7ef4\u62a4\u5b50\u6811\u5185\u4e24\u79cd\u989c\u8272\u7684\u70b9\u7684\u6700\u5c0f\u503c\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u7684\u5f88\u70c2\uff0c\u5e38\u6570\u6709\u4ebf\u70b9\u5927\uff0c\u597d\u50cf\u8fd8\u8dd1\u4e0d\u8fc7\u70b9\u5206\u6811\uff0c\u633a\u5c2c\u7684\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n \\log n)$\u3002\n\n```cpp\n/*\n\u4ec0\u4e48\u9634\u95f4\u3002\n\u6211\u65e5\uff0c\u6811\u8fb9\u4e5f\u5e26\u6743\uff0c\u8fd9\u4e48\u5389\u5bb3\u7684\u5417\n\u6839\u636e\u4e00\u822c\u539f\u5219\u6211\u4eec\u62c6\u62c6\u62c6\n\u8f7b\u677e\u5199\u51fa\u4e00\u4e2a LCA \u76f8\u5173\u5f0f\u5b50\uff0c\u76f2\u731c\u662f\u5728 LCA \u5904\u7edf\u8ba1\u7b54\u6848\n\u5148\u628a (w_x - dep_x) \u653e\u5728\u4e00\u8d77\uff0c\u627e\u5230\u5b50\u6811\u5185\u6ca1\u6709\u76f8\u8fde\u7684\u4e24\u4e2a\u70b9\n\u611f\u89c9\u53ef\u4ee5\u76f4\u63a5\u7ebf\u6bb5\u6811\u6a21\u62df\uff1f\u597d\u50cf\u6709\u4ebf\u70b9\u96be\u5199\n\u8c8c\u4f3c\u662f O(n \\log n a(n)) \u7684\uff0c\u5c31\u7ef4\u62a4\u4e0d\u5728\u540c\u4e00\u96c6\u5408\u5185\u7684\u6700\u5c0f\u7684\u4e24\u4e2a\u70b9\uff1f\n\u6211\u65e5\u8fd9\u5f97\u66b4\u529b\u6539 LCA\uff0c\u95ee\u9898\u5927\u4e86\uff0c\u76f4\u63a5\u8d77\u98de \n\u8c8c\u4f3c\u53ef\u4ee5\u53ea\u5728\u4e24\u4e2a\u70b9\u7684 LCA \u5904\u6539\u4e00\u4e0b\uff1f\u4f46\u662f\u786e\u5b9e\u597d\u50cf\u8981\u5e76\u67e5\u96c6\nDDP\nAfter reading the solution\n\u597d\uff0c\u53ef\u4ee5\u76f4\u63a5\u6362\u6839 dp\uff0c\u6ca1\u770b\u51fa\u6765\u4e0d\u8c22 \n*/\n#include \"bits/stdc++.h\"\nusing namespace std;\nconst int Len = 2e5 + 5 , Inf = 2e9;\nconst long long Lnf = 1e17;\nint n,m;\nlong long dep[Len],w[Len];\nstruct node\n{\n\tint col,x;\n\tlong long res;\n\tnode(){col = x = Inf , res = Lnf;}\n\tnode(int COL,int X,long long RES){col = COL , x = X , res = RES;}\n\tinline void clear(){col = x = Inf , res = Lnf;}\n\tbool operator < (const node &Ano) const\n\t{return res < Ano.res;}\n};\nstruct Node\n{\n\tnode ts[2];\n\tNode(){ts[0].clear() , ts[1].clear();}\n\tNode(node x,node y){ts[0] = x , ts[1] = y;}\n\tinline void clear(){ts[0].clear() , ts[1].clear();}\n\tNode operator ^ (const Node &Ano) const//(Ans merge)\n\t{\n\t\tNode z;\n\t\tif(ts[0].res < Ano.ts[0].res) \n\t\t{\n\t\t\tz.ts[0] = ts[0];\n\t\t\tif(Ano.ts[0].col == ts[0].col) z.ts[1] = min(ts[1] , Ano.ts[1]);\n\t\t\telse z.ts[1] = min(ts[1] , Ano.ts[0]);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tz.ts[0] = Ano.ts[0];\n\t\t\tif(Ano.ts[0].col == ts[0].col) z.ts[1] = min(ts[1] , Ano.ts[1]);\n\t\t\telse z.ts[1] = min(ts[0] , Ano.ts[1]);\n\t\t}\n\t\treturn z;\n\t}\n}s[Len],pre[Len],suf[Len],p[Len];\nint col[Len];\nvoid makeSet(int x){for(int i = 1 ; i <= x ; i ++) col[i] = i;}\nint findSet(int x){return col[x] == x ? col[x] : col[x] = findSet(col[x]);}\nvoid unionSet(int x,int y)\n{\n\tint u = findSet(x) , v = findSet(y);\n\tif(u == v) return;\n\tcol[u] = v;\n} \nstruct edge\n{\n\tint to;long long w;\n\tedge(){to = w = 0;}\n\tedge(int TO,long long W){to = TO , w = W;}\n};\nvector<edge> G[Len];void add(int from,int to,long long w){G[from].push_back(edge(to , w));}\nvector<edge>::iterator it;\nvoid dfs(int x,int f)\n{\n\tint i = -1;\n\tfor(it = G[x].begin() ; it != G[x].end() ; it ++)\n\t{\n\t\ti ++;\n\t\tint to = G[x][i].to;\n\t\tif(to == f)\n\t\t{\n\t\t\tG[x].erase(it);\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor(int i = 0 ; i < G[x].size() ; i ++)\n\t{\n\t\tint to = G[x][i].to;\n\t\tdep[to] = dep[x] + G[x][i].w;\n\t\tdfs(to , x);\n\t}\n}\nvoid dfs1(int x)//\u66f4\u65b0 w_x - dep_x \u5728\u5b50\u6811\u5185\u7684\u6700\u5c0f\u7684\u4e24\u4e2a\u989c\u8272 \n{\n\ts[x] = Node(node(col[x] , x , w[x] + dep[x]) , node(Inf , Inf , Lnf));\n\tfor(int i = 0 ; i < G[x].size() ; i ++)\n\t{\n\t\tint to = G[x][i].to;\n\t\tdfs1(to);\n\t\ts[x] = s[x] ^ s[to];\n\t}\n}\nvoid dfs2(int x)//\u66f4\u65b0\u6bcf\u4e2a\u70b9\u5bf9\u5e94\u7684 ans \n{\n\tfor(int i = 0 ; i < G[x].size() ; i ++) \n\t{\n\t\tint to = G[x][i].to;\n\t\tif(i) pre[to] = pre[G[x][i - 1].to];\n\t\tpre[to] = pre[to] ^ (Node(node(s[to].ts[0].col , s[to].ts[0].x , -dep[x] * 2 + s[to].ts[0].res) , node(s[to].ts[1].col , s[to].ts[1].x , -dep[x] * 2 + s[to].ts[1].res)));\n\t}\n\tfor(int i = G[x].size() - 1 ; i >= 0 ; i --)\n\t{\n\t\tint to = G[x][i].to;\n\t\tif(i != G[x].size() - 1) suf[to] = suf[G[x][i + 1].to];\n\t\tsuf[to] = suf[to] ^ (Node(node(s[to].ts[0].col , s[to].ts[0].x , -dep[x] * 2 + s[to].ts[0].res) , node(s[to].ts[1].col , s[to].ts[1].x , -dep[x] * 2 + s[to].ts[1].res)));\n\t}\n\tfor(int i = 0 ; i < G[x].size() ; i ++)\n\t{\n\t\tint to = G[x][i].to;\n\t\tNode pz;\n\t\tif(i) pz = pz ^ pre[G[x][i - 1].to];\n\t\tif(i != G[x].size() - 1) pz = pz ^ suf[G[x][i + 1].to];\n\t\tp[to] = p[x] ^ pz ^ Node(node(col[x] , x , -dep[x] * 2 + w[x] + dep[x]) , node(Inf , Inf , Lnf));\n\t\tdfs2(to);\n\t}\n}\nnode ms[Len];\nvoid upd()\n{\n\tfor(int i = 1 ; i <= n ; i ++) \n\t{\n\t\ts[i] = Node(node(s[i].ts[0].col , s[i].ts[0].x , -dep[i] * 2 + s[i].ts[0].res) , node(s[i].ts[1].col , s[i].ts[1].x , -dep[i] * 2 + s[i].ts[1].res));\n\t\ts[i] = s[i] ^ p[i];\n\t\tif(s[i].ts[0].col == col[i]) ms[col[i]] = min(ms[col[i]] , node(s[i].ts[1].col , s[i].ts[1].x , w[i] + dep[i] + s[i].ts[1].res));\n\t\telse ms[col[i]] = min(ms[col[i]] , node(s[i].ts[0].col , s[i].ts[0].x , w[i] + dep[i] + s[i].ts[0].res));\n\t}\n}\nint main()\n{\n\tlong long ans = 0;\n\tscanf(\"%d\",&n);\n\tfor(int i = 1 ; i <= n ; i ++) scanf(\"%lld\",&w[i]);\n\tfor(int i = 1 ; i < n ; i ++)\n\t{\n\t\tint x,y,w;scanf(\"%d %d %d\",&x,&y,&w);\n\t\tadd(x , y , w);\n\t\tadd(y , x , w);\n\t}\t\n\tdfs(1 , 0);\n\tint Cnt = n;\n\tmakeSet(n);\n\twhile(Cnt > 1)\n\t{\n\t\tfor(int i = 1 ; i <= n ; i ++)\n\t\t{\n\t\t\ts[i].clear();\n\t\t\tpre[i].clear();\n\t\t\tsuf[i].clear();\n\t\t\tp[i].clear();\n\t\t\tms[i].clear();\n\t\t}\n\t\tdfs1(1);\n\t\tdfs2(1);\n\t\tupd();\n\t\tfor(int i = 1 ; i <= n ; i ++)\n\t\t{\n\t\t\tint x = findSet(col[i]);\n\t\t\tif(ms[x].x == Inf) continue;\n\t\t\tif(findSet(x) != findSet(ms[x].x)) \n\t\t\t{\n\t\t\t\tCnt --;\n\t\t\t\tans += ms[x].res;\n\t\t\t\tunionSet(x , ms[x].x);\n\t\t\t}\n\t\t}\n\t\tfor(int i = 1 ; i <= n ; i ++) col[i] = findSet(col[i]);\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1648438829,
        "uid": 132533,
        "name": "Hakuoro",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT3611 Tree MST"
    },
    {
        "content": "~~xpp\u6742\u9898\u6e05\u9664\u8ba1\u5212~~\n\n\u8fd9\u9898\u548c[P8207 [THUPC2022 \u521d\u8d5b] \u6700\u5c0f\u516c\u500d\u6811](https://www.luogu.com.cn/problem/P8207)\u6709\u70b9\u50cf\uff0c\u90fd\u53ef\u4ee5\u7528\u4f18\u5316\u9009\u8fb9\u7684 kruskal \u89e3\u51b3\u3002\n\n\u5f88\u663e\u7136\uff0c\u5bf9\u4e8e\u4e00\u5f20\u8fb9\u6570\u4e3a $n^2$ \u7ea7\u522b\u7684\u5b8c\u5168\u56fe\uff0c\u76f4\u63a5\u505a kruskal \u7684\u590d\u6742\u5ea6\u65f6 $O(n^2logn^2)$ \u7684\uff0c\u663e\u7136\u8fc7\u4e0d\u4e86\u3002\n\n\u4f46\u662f\u4e5f\u6b63\u662f\u56e0\u4e3a\u8fd9\u662f\u4e00\u5f20\u5b8c\u5168\u56fe\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u7528\u4e00\u4e2a\u5b9a\u7406\u6765\u89e3\u51b3\u95ee\u9898\u3002\n\n> \u5b9a\u7406\uff1a\u5bf9\u4e8e\u4efb\u610f\u4e00\u5f20\u5b8c\u5168\u56fe $G=(V,E)$ \uff0c\u9009\u53d6\u6570\u4e2a\u8fb9\u96c6 $(E_1,E_2,E_3,...,E_k)$ \u4f7f\u5176\u5b8c\u5168\u8986\u76d6\u8fb9\u96c6 $E$ \u3002\u5bf9\u6bcf\u4e2a\u96c6\u5408 $E_i$ \u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5f97\u5230\u8fb9\u96c6 $E_{MST_{i}}$ \u3002\u518d\u5bf9 $E_{MST_{1}},E_{MST_{2}},E_{MST_{3}},...,E_{MST_{k}}$ \u6c42\u6700\u5c0f\u751f\u6210\u6811\uff0c\u5176\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u4e5f\u662f $E$ \u7684\u6700\u5c0f\u751f\u6210\u6811\u3002\n\n\u8bc1\u660e\uff1a\u8003\u8651\u53cd\u8bc1\u3002\u5047\u8bbe\u6700\u7ec8\u56fe\u6709\u4e00\u79cd\u6bd4\u7528 $E_{MST_{1}},E_{MST_{2}},E_{MST_{3}},...,E_{MST_{k}}$ \u5efa\u51fa\u6765\u7684\u6700\u5c0f\u751f\u6210\u6811\u66f4\u5c0f\u7684\u751f\u6210\u6811\uff0c\u5219\u8be5\u6811\u4e00\u5b9a\u6709\u4e00\u6761\u8fb9 $(u,v)$ \u4e0d\u88ab\u5305\u542b\u5728\u4efb\u4f55\u7684 $E_{MST_i}$ \u4e2d\u3002\u8003\u8651\u8fd9\u6761\u8fb9\u6240\u5c5e\u7684\u4e00\u4e2a\u6216\u591a\u4e2a\u8fb9\u96c6\uff0c\u5728\u8be5\u8fb9\u96c6\u4e2d\u4e00\u5b9a\u6709\u4e00\u6761\u8fde\u63a5 $(u,v)$ \u7684\u94fe\uff0c\u4e14\u6b64\u94fe\u4e00\u5b9a\u4e0d\u6bd4 $(u,v)$ \u66f4\u52a3\u3002\u56e0\u6b64\u5728\u6700\u7ec8\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e2d\u7528\u8be5\u94fe\u66ff\u4ee3 $(u,v)$ \u4e00\u5b9a\u4e0d\u4f1a\u66f4\u52a3\u3002\u4e0e\u8be5\u751f\u6210\u6811\u6bd4 $E_{MST_{1}},E_{MST_{2}},E_{MST_{3}},...,E_{MST_{k}}$ \u5efa\u51fa\u6765\u7684\u6700\u5c0f\u751f\u6210\u6811\u66f4\u5c0f\u77db\u76fe\u3002\n\n\u56e0\u6b64\u8003\u8651\u6dc0\u7c89\u8d28\uff0c\u5047\u8bbe\u6211\u4eec\u4ee5\u5f53\u524d\u7684\u5206\u6cbb\u4e2d\u5fc3 $rt$ \u4e3a\u6839\uff0c\u8bbe\u6bcf\u4e2a\u70b9\u7684\u6743\u503c $p_i$ \u4e3a $dis_{rt,i} + w_i$ \uff0c\u5219\u5bf9\u4e8e\u4e0d\u540c\u5b50\u6811\u7684\u4e24\u4e2a\u70b9\uff0c\u4ed6\u4eec\u8fde\u8fb9\u7684\u6743\u503c\u4e3a $p_i+p_j$ \u3002\u8003\u8651\u4e24\u4e24\u4e0d\u540c\u5b50\u6811\u5185\u7684\u70b9\u4e4b\u95f4\u8fde\u8fb9\u7ec4\u6210\u7684\u8fb9\u96c6\uff0c\u8bbe $p_i$ \u6700\u5c0f\u7684 $i$ \u4e3a $mn$ \uff0c\u5219\u8fd9\u4e2a\u8fb9\u96c6\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e00\u5b9a\u4e3a $\\sum_{i \\in V} p_i+p_{mn}$ \uff08\u8fd9\u91cc\u7684\u8bc1\u660e\u73c2\u4ee5\u53c2\u8003\u4e00\u4e0b kruskal \u7b97\u6cd5\u6b63\u786e\u6027\u7684\u8bc1\u660e\uff09\uff0c\u56e0\u6b64\u5c06\u6dc0\u7c89\u8d28\u5f97\u5230\u7684\u6240\u6709\u8fb9 $(i,mn)$ \u52a0\u5165\u8fb9\u96c6\uff0c\u518d\u505a\u4e00\u6b21\u6700\u5c0f\u751f\u6210\u6811\u5c31\u662f $G=(V,E)$ \u7684\u6700\u5c0f\u751f\u6210\u6811\u4e86\u3002\n\n$Code$\n\n```cpp\n#include<bits/stdc++.h>\n#define N 200010\nusing namespace std;\ntypedef long long ll;\nint n,en;\nll w[N],INF=1e18;\nint cnt,head[N],to[N<<1],nxt[N<<1];\nll val[N<<1];\nint S,son[N],siz[N],vis[N],rt;\nstruct edge{\n\tint u,v;\n\tll w;\n\tconst bool operator < (const edge o) const {return w<o.w;}\n}e[N<<4];\nvoid insert(int u,int v,int w) {\n\tcnt++;\n\tto[cnt]=v;\n\tval[cnt]=w;\n\tnxt[cnt]=head[u];\n\thead[u]=cnt;\n}\nint read() {\n\tint res=0,f=1;char ch=getchar();\n\twhile(!isdigit(ch)) f=ch=='-'?-1:1,ch=getchar();\n\twhile(isdigit(ch)) res=res*10+ch-'0',ch=getchar();\n\treturn f*res;\n}\nvoid gtrt(int now,int fa) {\n    siz[now]=1,son[now]=0;\n    for(int i=head[now]; i; i=nxt[i]) if(to[i]!=fa&&!vis[to[i]]) {\n    \tgtrt(to[i],now);\n    \tsiz[now]+=siz[to[i]];\n    \tson[now]=max(son[now],siz[to[i]]);\n    }\n    son[now]=max(son[now],S-siz[now]);\n    if(son[now]<son[rt]) rt=now;\n}\nll sk[N];\nint id[N],tp,mn;\nvoid dfs(int now,int fa,ll dis) {\n\tsk[++tp]=w[now]+dis,id[tp]=now;\n\tif(sk[tp]<sk[mn]) mn=tp;\n\tfor(int i=head[now]; i; i=nxt[i]) if(!vis[to[i]]&&to[i]!=fa) \n\t\tdfs(to[i],now,dis+val[i]);\n}\nvoid solve(int now) {\n\tvis[now]=1;\n    tp=mn=0,dfs(now,0,0);\n\tfor(int i=1; i<=tp; i++) if(i!=mn) e[++en]=edge{id[i],id[mn],sk[i]+sk[mn]}; \n\tint tmp=S;\n\tfor(int i=head[now]; i; i=nxt[i]) if(!vis[to[i]]) {\n\t    S=siz[to[i]]<siz[now]?siz[to[i]]:tmp-siz[now];\n\t    rt=0,gtrt(to[i],now),solve(rt);\n\t}\n}\nint fa[N];\nint find(int x) {\n\twhile(fa[x]!=x) x=fa[x]=fa[fa[x]];\n\treturn x;\n}\nint main()\n{\n\tn=read();\n\tfor(int i=1; i<=n; i++) w[i]=read();\n\tfor(int i=1; i<n; i++) {\n\t\tint u=read(),v=read(),w=read();\n\t\tinsert(u,v,w);\n\t\tinsert(v,u,w);\n\t}\n\tS=son[0]=n,rt=0,gtrt(1,0),sk[0]=INF;\n\tsolve(rt);\n\tfor(int i=1; i<=n; i++) fa[i]=i;\n\tsort(e+1,e+en+1);int tot=0;ll sum=0;\n\tfor(int i=1; i<=en; i++) {\n\t\tint u=find(e[i].u),v=find(e[i].v);\n\t\tif(u!=v) fa[u]=v,tot++,sum+=e[i].w;\n\t\tif(tot==n-1) {printf(\"%lld\",sum);return 0;}\n\t}\n\treturn 0;\n}\n```\n\n~~\u6211\u662f\u4e0d\u4f1a\u8bf4\u6211\u5f00 nlogn \u7684\u6570\u7ec4\u53ea\u5f00\u4e86 n*4 \u5bfc\u81f4\u9519\u4e86\u597d\u51e0\u53d1\u7684~~\n",
        "postTime": 1648092356,
        "uid": 124918,
        "name": "LinkyChristian",
        "ccfLevel": 6,
        "title": "\u3010\u9898\u89e3\u3011AT3611 Tree MST"
    }
]