[
    {
        "content": "\u770b\u9898\u89e3\u533a\u90fd\u662f\u52bf\u80fd\u7ebf\u6bb5\u6811\uff0c\u6765\u4e00\u53d1\u4e0d\u4e00\u6837\u7684\u9898\u89e3\u3002\n\n### \u524d\u7f6e\u829d\u58eb\n\u5206\u5757\u3001\u73c2\u6735\u8389\u6811\n\n### \u601d\u8def\n\u7b2c\u4e00\u773c\u770b\u5230\u8fd9\u9898\uff0c\u60f3\u5230\u7684\u5f88\u663e\u7136\u662f\u73c2\u6735\u8389\u6811\uff0c\u4f46\u8fd9\u9898\u73c2\u6735\u8389\u6811\u8fc7\u4e0d\u53bb\u2026\u2026\n\n\u6240\u4ee5\u8003\u8651\u4e00\u4e9b\u79d1\u6280\u3002\n\n\u4e0d\u59a8\u5148\u5bf9\u5e8f\u5217\u5206\u5757\uff0c\u6bcf\u4e2a\u5757\u5efa\u73c2\u6735\u8389\u6811\u3002\n\n\u5bf9\u4e8e\u64cd\u4f5c\u4e00\uff0c\u4e0d\u96be\u53d1\u73b0\u5bf9\u4e8e\u5e8f\u5217\u4e2d\u7684\u4e00\u4e2a\u5143\u7d20\uff0c\u5728\u6ca1\u6709\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\u7684\u60c5\u51b5\u4e0b\uff0c\u81f3\u591a $\\log{w}$ \u6b21\u5c31\u4f1a\u53d8\u6210 $0$\u3002\n\n\u800c\u5bf9\u4e8e\u64cd\u4f5c\u4e8c\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e00\u6b21\u63a8\u5e73\u81f3\u591a\u4f7f $2$ \u4e2a\u533a\u95f4\u7684\u5143\u7d20\u79cd\u7c7b\u52a0\u4e00\uff0c\u800c\u6574\u4e2a\u5757\u88ab\u63a8\u5e73\u7684\u60c5\u51b5\u4e0b\uff0c\u64cd\u4f5c\u4e00\u7684\u590d\u6742\u5ea6\u662f $O(1)$ \u6216 $O(\\log{n})$ \u7684\uff08\u770b\u5b9e\u73b0\uff09\uff0c\u6240\u4ee5\u64cd\u4f5c\u4e00\u603b\u590d\u6742\u5ea6\u4e3a $O((n + q) \\log{w} + \\tfrac{(n+q)n \\log{w}}{B})$\uff08\u53ef\u80fd\u4e0d\u592a\u4e25\u8c28\uff0c\u611f\u6027\u7406\u89e3\u4e00\u4e0b qwq \uff09\u3002\n\n\u518d\u8003\u8651\u67e5\u8be2\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u64cd\u4f5c\u4e00\u548c\u4e8c\u7684\u65f6\u5019\u540c\u65f6\u7ef4\u62a4\u5757\u5185\u548c\uff0c\u67e5\u8be2\u65f6\u5bf9\u4e8e\u6574\u5757\u67e5\u8be2\u7684\u76f4\u63a5\u8fd4\u56de\u5757\u5185\u548c\u5373\u53ef\u3002\n\n\u603b\u590d\u6742\u5ea6\u5927\u6982\u662f $O(\\tfrac{(n+q)n \\log{w}}{B})$ \uff08\u7701\u7565\u4e86\u4e00\u4e9b\u590d\u6742\u5ea6\u8f83\u4f4e\u7684\u64cd\u4f5c\uff09\u3002\n\n### AC Code\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\n#define pr pair<int, int>\n#define mp make_pair\n#define pb push_back\n#define mid (l + r) / 2\n#define fi first\n#define se second\nconst int len = 300;\n\nstruct node {\n\tint l, r;\n\tmutable int v;\n\t\n\tnode(int l, int r = 0, int v = 0) : l(l), r(r), v(v){}\n\t\n\tbool operator < (const node &a) const{\n\t\treturn l < a.l;\n\t}\n};\n\nstruct Block {\n\tint l, r, ans;\n\tset<node> s;\n\t\n\tset<node> :: iterator split(int pos) {\n\t\tauto it = s.lower_bound(node(pos));\n\t\t\n\t\tif (it != s.end() && it -> l == pos) {\n\t\t\treturn it;\n\t\t}\n\t\t\n\t\tit--;\n\t\tif (it -> r < pos) return s.end();\n\t\t\n\t\tint l = it -> l;\n\t\tint r = it -> r;\n\t\tint v = it -> v;\n\t\t\n\t\ts.erase(it);\n\t\ts.insert(node(l, pos - 1, v));\n\t\t\n\t\treturn s.insert(node(pos, r, v)).first;\n\t}\n\t\n\tvoid assign(int l, int r, int x) {\n\t\tauto itr = split(r + 1), itl = split(l);\n\t\t\n\t\tfor (auto it = itl; it != itr; it++) {\n\t\t\tans -= (it -> r - it -> l + 1) * it -> v;\n\t\t}\n\t\t\n\t\ts.erase(itl, itr);\n\t\ts.insert(node(l, r, x));\n\t\t\n\t\tans += (r - l + 1) * x;\n\t}\n\t\n\tvoid div(int l, int r, int x) {\n\t\tif (ans == 0) return;\n\t\t\n\t\tauto itr = split(r + 1), itl = split(l);\n\t\t\n\t\tfor (auto it = itl; it != itr; it++) {\n\t\t\tans -= (it -> r - it -> l + 1) * it -> v;\n\t\t\t\n\t\t\tit -> v /= x;\n\t\t\t\n\t\t\tans += (it -> r - it -> l + 1) * it -> v;\n\t\t}\n\t}\n\t\n\tint query(int l, int r) {\n\t\tint now = 0;\n\t\t\n\t\tauto itr = split(r + 1), itl = split(l);\n\t\t\n\t\tfor (auto it = itl; it != itr; it++) {\n\t\t\tnow += (it -> r - it -> l + 1) * it -> v;\n\t\t}\n\t\t\n\t\treturn now;\n\t}\n} b[500005];\n\nint a[500005], id[500005];\n\ninline int read(){\n\tint x = 0, mm = 1;\n\tchar ch = getchar();\n\twhile(!isdigit(ch)){\n\t\tif(ch == '-') mm = -1;\n\t\tch = getchar();\n\t}\n\twhile(isdigit(ch)){\n\t\tx = x * 10 + ch - 48;\n\t\tch = getchar();\n\t}\n\treturn x * mm;\n}\n\ninline void write(int x){\n\tif(x < 0){\n\t\tputchar('-');\n\t\twrite(-x);\n\t\treturn;\n\t}\n\tif(x >= 10) write(x / 10);\n\tputchar(x % 10 + '0');\n}\n\nsigned main(){\n\tint n = read(), q = read(), k = 0;\n\t\n\tfor (int i = 1; i <= n; i++) {\n\t\ta[i] = read();\n\t}\n\t\n\tfor (int l = 1, r = min(n, len); l <= n; l = r + 1, r = min(l + len - 1, n)) {\n\t\tb[++k].l = l, b[k].r = r;\n\t\t\n\t\tfor (int i = l; i <= r; i++) {\n\t\t\tid[i] = k;\n\t\t\tb[k].s.insert(node(i, i, a[i]));\n\t\t\tb[k].ans += a[i];\n\t\t}\n\t}\n\t\n\tauto assign = [&](int l, int r, int x) -> void {\n\t\tint L = id[l], R = id[r];\n\t\t\n\t\tif (L == R) {\n\t\t\tb[L].assign(l, r, x);\n\t\t}\n\t\telse {\n\t\t\tb[L].assign(l, b[L].r, x);\n\t\t\tb[R].assign(b[R].l, r, x);\n\t\t\t\n\t\t\tfor (int i = L + 1; i < R; i++) {\n\t\t\t\tb[i].assign(b[i].l, b[i].r, x);\n\t\t\t}\n\t\t}\n\t};\n\t\n\tauto div = [&](int l, int r, int x) -> void {\n\t\tint L = id[l], R = id[r];\n\t\t\n\t\tif (L == R) {\n\t\t\tb[L].div(l, r, x);\n\t\t}\n\t\telse {\n\t\t\tb[L].div(l, b[L].r, x);\n\t\t\tb[R].div(b[R].l, r, x);\n\t\t\t\n\t\t\tfor (int i = L + 1; i < R; i++) {\n\t\t\t\tb[i].div(b[i].l, b[i].r, x);\n\t\t\t}\n\t\t}\n\t};\n\t\n\tauto query = [&](int l, int r) -> int {\n\t\tint L = id[l], R = id[r];\n\t\t\n\t\tif (L == R) {\n\t\t\treturn b[L].query(l, r);\n\t\t}\n\t\telse {\n\t\t\tint ans = b[L].query(l, b[L].r) + b[R].query(b[R].l, r);\n\t\t\t\n\t\t\tfor (int i = L + 1; i < R; i++) {\n\t\t\t\tans += b[i].ans;\n\t\t\t}\n\t\t\t\n\t\t\treturn ans;\n\t\t}\n\t};\n\t\n\tfor (int i = 1; i <= q; i++) {\n\t\tint opt = read();\n\t\t\n\t\tif (opt == 1) {\n\t\t\tint l = read(), r = read(), x = read();\n\t\t\t\n\t\t\tdiv(l, r, x);\n\t\t}\n\t\t\n\t\tif (opt == 2) {\n\t\t\tint l = read(), r = read(), x = read();\n\t\t\t\n\t\t\tassign(l, r, x);\n\t\t}\n\t\t\n\t\tif (opt == 3) {\n\t\t\tint l = read(), r = read();\n\t\t\t\n\t\t\twrite(query(l, r));\n\t\t\tputchar('\\n');\n\t\t}\n\t}\n}\n```",
        "postTime": 1680486750,
        "uid": 188286,
        "name": "cjZYZtcl",
        "ccfLevel": 6,
        "title": "[ABC256Ex] I like Query Problem \u9898\u89e3"
    },
    {
        "content": "### Preface  \n\u4e00\u9053\u52bf\u80fd\u7ebf\u6bb5\u6811\u677f\u5b50\u3002  \n### Problem  \n\n\u7ed9\u5b9a $ n, q $\uff0c\u548c\u5e8f\u5217 $ a_n $\uff0c\u7ed9\u5b9a $ q $ \u6b21\u64cd\u4f5c\uff0c\u6709\u4e09\u79cd\uff1a\n\n`1 L R x`\uff1a\u5bf9\u4e8e $ [L, R] $ \u5185\u7684\u6240\u6709 $ i $ \u8fdb\u884c $ a_i \\leftarrow \\lfloor \\dfrac{a_i}{x} \\rfloor $\u3002\n\n`2 L R y`\uff1a\u533a\u95f4\u63a8\u5e73 $ [L, R] $ \u4e3a $ y $\u3002\n\n`3 L R`\uff1a\u8f93\u51fa $ \\sum_{i = L}^R a_i $\u3002\n\n### Solution  \n\u6211\u4eec\u53d1\u73b0\u5982\u679c\u6ca1\u6709\u533a\u95f4\u4fee\u6539\u64cd\u4f5c\uff0c\u6bcf\u4e2a\u6570\u53ea\u4f1a\u88ab\u9664 $\\log V$ \u6b21\u3002  \n\u4f46\u662f\u533a\u95f4\u63a8\u5e73\u5bfc\u81f4\u8fd9\u4e2a\u64cd\u4f5c\u4f1a\u9000\u5316\u3002  \n\u4f46\u662f\u533a\u95f4\u63a8\u5e73\u62e5\u6709\u5f88\u597d\u7684\u6027\u8d28\u3002  \n\n\u6211\u4eec\u8bbe\u4e00\u4e2a\u533a\u95f4 $(L,R)$ \u7684\u52bf\u80fd\u51fd\u6570 $H(L,R)$ \u4e3a\uff1a  \n\u5bf9\u4e8e\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u533a\u95f4\uff0c\u82e5\u533a\u95f4\u5185\u6240\u6709\u6570\u5b57\u76f8\u540c\uff1a  \n$$H(L,R)=1$$  \n\u5426\u5219\uff1a  \n$$H(L,R)=H(L,mid)+H(mid+1,R)$$  \n\n\u5bf9\u4e8e\u4e00\u4e2a\u975e\u7ebf\u6bb5\u6811\u8282\u70b9\u533a\u95f4\uff0c\u5176\u52bf\u80fd\u51fd\u6570\u4e3a\u6309\u7ebf\u6bb5\u6811\u65b9\u6cd5\u5206\u5272\u8fd9\u4e2a\u8282\u70b9\u5206\u4e3a $\\log n$ \u4e2a\u7ebf\u6bb5\u6811\u533a\u95f4\u7684\u52bf\u80fd\u51fd\u6570\u4e4b\u548c\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u5982\u679c\u4e00\u4e2a\u533a\u95f4\u5185\u6240\u6709\u6570\u5b57\u76f8\u7b49\uff0c\u5bf9\u8fd9\u4e2a\u533a\u95f4\u8fdb\u884c\u533a\u95f4\u9664\u6cd5\u662f $O(1)$ \u7684\u3002  \n\u90a3\u4e48\u5bf9\u4e00\u4e2a\u533a\u95f4\u8fdb\u884c\u533a\u95f4\u9664\u6cd5\u5c31\u662f $O(H(L,R))$ \u7684\u3002  \n\n\u7136\u540e\u4f60\u8003\u8651\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\u3002  \n\u76f8\u4f3c\u5730\uff0c\u6211\u4eec\u5c06\u533a\u95f4\u63a8\u5e73\u6309\u7ebf\u6bb5\u6811\u65b9\u6cd5\u5206\u5272\u6210 $\\log n$ \u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u63a8\u5e73\u3002  \n\u7136\u540e\u4f60\u53d1\u73b0\u4e00\u4e2a\u795e\u5947\u7684\u4e8b\u60c5\u3002  \n\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\u4e0d\u4f1a\u4f7f\u62c6\u5f00\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u4ee5\u53ca\u5b83\u513f\u5b50\u4eec\u7684\u7684\u52bf\u80fd\u51fd\u6570\u53d8\u4e3a 1\u3002  \n\n\u8003\u8651\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\uff0c\u8fdb\u884c\u6709\u5173\u7684\u63a8\u5e73\u64cd\u4f5c\u7684\u65f6\u5019\u5b83\u76f4\u63a5\u52bf\u80fd\u964d\u5230\u6700\u4f4e\uff0c\u7136\u540e\u4ed6\u7684\u7236\u4eb2\u8282\u70b9\u7684\u52bf\u80fd\u51fd\u6570\u6700\u591a +1\uff0c\u5426\u5219\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\uff0c\u56e0\u4e3a\u82e5\u5176\u52bf\u80fd\u51fd\u6570\u4e0d\u7b49\u4e8e 1 \u5219\u9700\u8981 $\\log V$ \u6b21\u9664\u6cd5\u4f7f\u5f97\u5176\u53d8\u6210 1\u3002  \n\u4e00\u6b21\u9664\u6cd5\u64cd\u4f5c\u4f1a\u5173\u4e8e $O(\\log n)$ \u4e2a\u8282\u70b9\uff0c\u90a3\u4e48\u603b\u52bf\u80fd\u5206\u6790\u7684\u590d\u6742\u5ea6\u5c31\u662f $O(n \\log n \\log V)$ \u7684\u3002\n\n\u6362\u4e00\u79cd\u65b9\u6cd5\u89e3\u91ca\uff1a\u8fd9\u4e2a\u64cd\u4f5c\u53ef\u4ee5\u8ba9\u62c6\u51fa\u7684 $\\log n$ \u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u6240\u5bf9\u5e94\u7684\u533a\u95f4\u7f29\u4e3a\u4e00\u4e2a\u5143\u7d20\uff0c\u8fd9\u4e2a\u65b0\u5143\u7d20\u7684\u6743\u503c\u5c31\u662f\u9700\u8981\u63a8\u5e73\u7684\u503c\uff0c\u800c\u8fd9\u4e2a\u7ebf\u6bb5\u6811\u8282\u70b9\u4e0b\u7684\u5176\u5b83\u70b9\u53ef\u4ee5\u76f4\u63a5\u4f5c\u5e9f\u4e86\uff08\u82e5\u4e4b\u540e\u6709\u63a8\u5e73\u64cd\u4f5c\u8fd8\u53ef\u4ee5\u5728\u4e0b\u9762\u63d2\u5165\u65b0\u70b9\uff09\uff0c\u4e4b\u540e\u6bcf\u4e00\u6b21\u64cd\u4f5c\u7684\u90fd\u662f\u8fd9\u4e2a\u7f29\u51fa\u6765\u7684\u65b0\u5143\u7d20\uff0c\u540c\u65f6\uff0c\u8fd9 $\\log n$ \u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u4e5f\u8981\u88ab\u66f4\u65b0\uff08\u53ef\u4ee5\u7406\u89e3\u4e3a\u66f4\u6362\u4e86\u4e00\u4e2a\u65b0\u5143\u7d20\uff09\u3002  \n\n\u90a3\u4e48\u6bcf\u4e2a\u5143\u7d20\u7684\u88ab\u64cd\u4f5c\u6b21\u6570\u8fd8\u662f $\\log V$ \u7684\uff0c\u800c\u5143\u7d20\u4e2a\u6570\u662f $n \\log n$ \u7684\u3002\n\n\u7136\u540e\u4f60\u53d1\u73b0\uff0c\u5982\u679c\u5728\u533a\u95f4\u9664\u6cd5\u7684\u65f6\u5019\u5bf9\u6240\u6709\u6570\u5b57\u76f8\u7b49\u7684\u7ebf\u6bb5\u6811\u8282\u70b9\u8fdb\u884c\u64cd\u4f5c\uff0c\u590d\u6742\u5ea6\u4e3a $O(n \\log n \\log V)$\uff1a  \n```cpp\n#include <bits/stdc++.h>\n#define int long long\n#define mp make_pair\nusing namespace std;\nconst int N=5e5+10;\nint n,q,l,r,a[N],op,x,y;\nvector < pair<int,int> > ins;\nint tree[N<<2],minval[N<<2],maxval[N<<2],lazy[N<<2];\nvoid pushup(int rt){\n\ttree[rt]=tree[rt*2]+tree[rt*2+1];\n\tminval[rt]=min(minval[rt*2],minval[rt*2+1]);\n\tmaxval[rt]=max(maxval[rt*2],maxval[rt*2+1]);\n}\nvoid pushdown(int rt,int left,int right){\n\tint mid=(left+right)/2;\n\tif(lazy[rt]!=-1){\n\t\tlazy[rt*2]=lazy[rt*2+1]=lazy[rt];\n\t\ttree[rt*2]=(mid-left+1)*lazy[rt];\n\t\ttree[rt*2+1]=(right-mid)*lazy[rt];\n\t\tminval[rt*2]=maxval[rt*2]=minval[rt*2+1]=maxval[rt*2+1]=lazy[rt];\n\t\tlazy[rt]=-1;\n\t}\n}\nvoid build(int rt,int left,int right){\n\tif(left==right){\n\t\tminval[rt]=a[left];\n\t\tmaxval[rt]=a[left];\n\t\ttree[rt]=a[left];\n\t\treturn;\n\t}int mid=(left+right)/2;\n\tbuild(rt*2,left,mid);\n\tbuild(rt*2+1,mid+1,right);\n\tpushup(rt);\n}\nvoid update(int rt,int left,int right,int L,int R,int x){\n\tif(left<right)pushdown(rt,left,right);\n\tif(left>=L&&right<=R){\n\t\tlazy[rt]=x;tree[rt]=(right-left+1)*x;\n\t\tminval[rt]=maxval[rt]=x;return;\n\t}int mid=(left+right)/2;\n\tif(L<=mid)update(rt*2,left,mid,L,R,x);\n\tif(mid+1<=R)update(rt*2+1,mid+1,right,L,R,x);\n\tpushup(rt);\n}\nvoid insert(int rt,int left,int right,int L,int R,int x){\n\tif(left<right)pushdown(rt,left,right);\n\tint mid=(left+right)/2;\n\t//cout<<left<<\" \"<<right<<\"\\n\";\n\tif(left>=L&&right<=R){\n\t\tif(minval[rt]==maxval[rt]){\n\t\t\t//cout<<\"OK\\n\";\n\t\t\tlazy[rt]=maxval[rt]/x;\n\t\t\ttree[rt]=(right-left+1)*lazy[rt];\n\t\t\tminval[rt]/=x,maxval[rt]/=x;\n\t\t\treturn;\n\t\t}else{\n\t\t\tinsert(rt*2,left,mid,L,R,x);\n\t\t\tinsert(rt*2+1,mid+1,right,L,R,x);\n\t\t}\n\t}else{\n\t\tif(L<=mid)insert(rt*2,left,mid,L,R,x);\n\t\tif(mid+1<=R)insert(rt*2+1,mid+1,right,L,R,x);\n\t}pushup(rt);\n}\nint query(int rt,int left,int right,int L,int R){\n\tif(left<right)pushdown(rt,left,right);\n\tif(left>=L&&right<=R)return tree[rt];\n\tint mid=(left+right)/2,res=0;\n\tif(L<=mid)res+=query(rt*2,left,mid,L,R);\n\tif(mid+1<=R)res+=query(rt*2+1,mid+1,right,L,R);\n\treturn res;\n}\nsigned main(){\n\tios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n\tmemset(lazy,-1,sizeof(lazy));\n\tcin>>n>>q;\n\tfor(int i=1;i<=n;i++)\n\t\tcin>>a[i];\n\tbuild(1,1,n);\n\twhile(q--){\n\t\tcin>>op;\n\t\tif(op==1){\n\t\t\tcin>>l>>r>>x;\n\t\t\tinsert(1,1,n,l,r,x);\n\t\t}else if(op==2){\n\t\t\tcin>>l>>r>>y;\n\t\t\tupdate(1,1,n,l,r,y);\n\t\t}else{\n\t\t\tcin>>l>>r;\n\t\t\tcout<<query(1,1,n,l,r)<<\"\\n\";\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1678611287,
        "uid": 213173,
        "name": "\u5c0f\u6728\u866b",
        "ccfLevel": 4,
        "title": "\u3010AtCoder\u601d\u7ef4\u8bad\u7ec3\u3011[ABC256Ex] I like Query Problem"
    },
    {
        "content": "# [[ABC256Ex] I like Query Problem](https://www.luogu.com.cn/problem/AT_abc256_h) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.tsawke.com?t=ABC256Ex)\n\n## \u9898\u9762\n\n\u7ed9\u5b9a $ n, q $\uff0c\u548c\u5e8f\u5217 $ a_n $\uff0c\u7ed9\u5b9a $ q $ \u6b21\u64cd\u4f5c\uff0c\u6709\u4e09\u79cd\uff1a\n\n`1 L R x`\uff1a\u5bf9\u4e8e $ [L, R] $ \u5185\u7684\u6240\u6709 $ i $ \u8fdb\u884c $ a_i \\leftarrow \\lfloor \\dfrac{a_i}{x} \\rfloor $\u3002\n\n`2 L R y`\uff1a\u533a\u95f4\u63a8\u5e73 $ [L, R] $ \u4e3a $ y $\u3002\n\n`3 L R`\uff1a\u8f93\u51fa $ \\sum_{i = L}^R a_i $\u3002\n\n## Solution\n\n\u663e\u7136\u52bf\u80fd\u7ebf\u6bb5\u6811\uff0c\u597d\u50cf\u4e0d\u662f\u5f88\u96be\u5199\u3002\u5927\u6982\u5c31\u662f\u5728\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\u57fa\u7840\u4e0a\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u6570\u662f\u5426\u5747\u76f8\u540c\u7684\u6807\u8bb0\uff0c\u7136\u540e\u533a\u95f4\u6574\u9664\u7684\u65f6\u5019\u76f4\u63a5\u901a\u8fc7\u8fd9\u4e2a\u5b9e\u73b0 lazytag\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u7ecf\u8fc7\u4e00\u7cfb\u5217\u5206\u6790\u603b\u4e4b\u6700\u540e\u5c31\u662f $ O(n \\log^2 n) $\uff0c\u5b9e\u73b0\u8d77\u6765\u5f88\u5bb9\u6613\uff0c\u4ee3\u7801\u4e5f\u5f88\u77ed\uff0c\u4e0d\u8fc7\uff0c**\u8fd9\u592a\u4e0d\u4f18\u96c5\u4e86**\uff01\n\n\u6709\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\uff0c\u4e0d\u96be\u60f3\u5230 ODT\uff0c\u663e\u7136\u4f1a\u88ab\u5361\uff0c\u4e8e\u662f\u60f3\u5230\u4e00\u79cd\u4f18\u5316\uff1a\n\n\u8003\u8651\u8fd9\u4e2a\u7684\u65f6\u5019\u9996\u5148\u8981\u77e5\u9053\u4e00\u70b9\u8bed\u6cd5\u77e5\u8bc6\uff0c\u5373\u5bf9\u4e8e `set` \u5b83\u662f\u4e0d\u540c\u4e8e\u4e00\u822c\u7684\u7ebf\u6027\u7ed3\u6784\u5982 `basic_string` \u7684\uff0c\u4e00\u822c\u7684\u7ebf\u6027\u7ed3\u6784\u5f53\u63d2\u5165\u5220\u9664\u65f6\u82e5\u6539\u53d8 `capacity ` \u7684\u8bdd\u6307\u9488\u5c31\u4f1a\u5931\u6548\uff0c\u4f46\u5f53\u5728 `set` \u4e2d\u63d2\u5165\u6216\u5220\u9664\u5143\u7d20\u7684\u65f6\u5019\uff0c\u5bf9\u4e8e**\u975e\u88ab\u5220\u6570\u5143\u7d20**\u7684\u8fed\u4ee3\u5668\u3001\u6307\u9488\u548c\u5f15\u7528\u7b49\u90fd\u662f**\u4e0d\u4f1a\u5931\u6548**\u7684\uff0c\u7528 cppreference \u7684\u8bdd\u6765\u8bf4\u5c31\u662f\uff1a\n\n> No iterators or references are invalidated.\n\n\u4f17\u6240\u5468\u77e5\uff0c\u6211\u4eec\u4e00\u822c\u901a\u8fc7\u5bf9\u53d8\u91cf\u7684 `mutable` \u4fee\u9970\u4ee5\u4f7f\u5176\u53ef\u4ee5\u5728 `set` \u4e2d\u88ab\u4fee\u6539\uff0c\u4e14\u6309\u7167 `l` \u6392\u5e8f\uff0c\u6240\u4ee5\u8fd9\u91cc\u6211\u4eec\u53ef\u4ee5\u5c06 `r` \u4e5f\u4fee\u9970\u4e3a `mutable`\uff0c\u8fd9\u6837\u7684\u8bdd\u6211\u4eec\u4fbf\u53ef\u4ee5\u5f88\u65b9\u4fbf\u7684 $ O(1) $ \u5ef6\u7533\u533a\u95f4\u800c\u4e0d\u635f\u5931\u91cd\u6784\u6240\u9700\u7684 $ O(\\log) $\uff0c\u6b64\u65f6\u8003\u8651\uff0c\u56e0\u4e3a\u6211\u4eec\u7684 $ 1 $ \u64cd\u4f5c\u4e2d $ x \\ge 2 $\uff0c\u6240\u4ee5\u663e\u7136\u5bf9\u4e8e\u4e00\u4e2a\u6570\u5982\u679c\u4e0d\u63a8\u5e73\u4e3a\u5176\u5b83\u6570\u7684\u65f6\u5019\u6700\u591a $ \\log $ \u6b21\u5c31\u4f1a\u53d8\u4e3a $ 0 $\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u7ef4\u62a4 $ 1 $ \u64cd\u4f5c\u65f6\u662f\u53ef\u4ee5\u540c\u65f6\u5c06\u6240\u6709\u5df2\u7ecf\u4e3a $ 0 $ \u7684\u6570\u5408\u5e76\uff0c\u8fd9\u6837\u53ef\u4ee5\u6709\u6548\u51cf\u5c11\u5757\u6570\uff0c\u6b64\u65f6\u4f3c\u4e4e\u5bf9\u4e8e $ 1 $ \u548c $ 2 $ \u64cd\u4f5c\u590d\u6742\u5ea6\u5c31\u5df2\u7ecf\u6b63\u786e\u4e86\uff0c\u4e0d\u8fc7\u5982\u679c\u6211\u5728\u6bcf $ \\log $ \u6b21\u4e4b\u540e\u5c31\u91cd\u65b0\u63a8\u5e73\u6ee1\uff0c\u8fd9\u6837\u590d\u6742\u5ea6\u4f3c\u4e4e\u5927\u6982\u53ef\u80fd\u4f1a\u88ab\u5361\uff1f\uff1f\u4e0d\u662f\u5f88\u786e\u5b9a\u3002\n\n\u7136\u540e\u8fd9\u6837\u4ea4\u4e0a\u53bb\u4f1a\u83b7\u5f97 $ 28 / 30 $ \u7684\u597d\u6210\u7ee9\uff0c\u4e0d\u8fc7\u4f9d\u7136\u4f1a T\uff0c\u4e5f\u4e0d\u96be\u60f3\u5230\uff0c\u6211\u4eec\u76f4\u63a5\u62c9\u6ee1\u67e5\u8be2\u8fd9\u4e2a\u4e1c\u897f\u5c31\u9000\u5316\u6210 $ O(nq) $ \u7684\u4e86\u3002\u5bf9\u4e8e\u8fd9\u4e2a\u6211\u6700\u521d\u7684\u601d\u8def\u662f\uff0c\u6bcf\u5f53\u4fee\u6539\u540e\u518d\u9047\u5230\u4e00\u4e2a $ 3 $ \u64cd\u4f5c\u5c31**\u91cd\u65b0\u5efa\u7acb\u4e00\u68f5\u7ebf\u6bb5\u6811\u7ef4\u62a4\u6240\u6709\u6570\u7684\u503c**\uff0c\u8fd9\u6837\u5728\u8fd9\u6b21\u67e5\u8be2\u63a5\u7740\u7684\u6240\u6709\u67e5\u8be2\u5c31\u90fd\u662f $ O(\\log n) $ \u7684\u4e86\uff0c\u8fd9\u6837\u5e94\u8be5\u53ef\u4ee5\u6709\u6548\u7684\u6c34\u8fc7\u4e00\u4e9b\u6784\u9020\u7684\u6570\u636e\uff0c\u5f53\u7136\u5361\u7684\u65b9\u6cd5\u4e5f\u5f88\u7b80\u5355\uff0c\u53ea\u8981\u5728\u6bcf\u6b21\u67e5\u8be2\u4e4b\u95f4\u589e\u52a0\u4e00\u6b21\u5fae\u5c0f\u6270\u52a8\u7684\u4fee\u6539\uff0c\u4f46\u662f\u8fd9\u6837\u6bcf\u6b21\u90fd\u4f1a\u91cd\u65b0\u5efa\u6574\u68f5\u6811\uff0c\u6700\u540e\u590d\u6742\u5ea6\u8fd8\u4f1a\u9000\u5316\u4e3a $ \\dfrac{1}{2} $ \u5e38\u6570\u7684 $ O(nq) $\u3002**\u4f46\u662f**\uff0c\u7ecf\u8fc7\u4e0b\u8f7d\u6570\u636e\u70b9\u53d1\u73b0\uff0cT \u6389\u7684\u4e24\u4e2a\u6570\u636e\u5e76\u6ca1\u6709\u5982\u6b64\u8bbe\u8ba1\uff0c\u800c\u662f\u5b8c\u5168\u8be2\u95ee\u62c9\u6ee1\uff0c\u4e5f\u5c31\u662f\u8bf4\u7406\u8bba\u4e0a\u8fd9\u6837\u5b9e\u73b0\u4e4b\u540e\u662f\u53ef\u4ee5\u901a\u8fc7\u8fd9\u9053\u9898\u7684\uff0c\u4f30\u8ba1\u51fa\u9898\u4eba\u4e5f\u6ca1\u60f3\u5230\u8fd9\u79cd\u5947\u602a\u7684\u505a\u6cd5\u3002\u3002\u3002\n\n\u4f46\u662f\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u6269\u5c55\u8fd9\u79cd\u505a\u6cd5\uff0c\u4e0d\u96be\u60f3\u5230\u521a\u624d\u8bf4\u7684\u505a\u6cd5\u590d\u6742\u5ea6\u4e3b\u8981\u6d6a\u8d39\u5728\u4e86\u4fee\u6539\u65f6\u53ea\u4fee\u6539\u4e86\u4e00\u90e8\u5206\uff0c\u800c\u4e0d\u9700\u8981\u6574\u68f5\u6811\u91cd\u5efa\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c1d\u8bd5\u5728\u8fd9\u91cc\u4f18\u5316\u4e00\u4e0b\u3002\u4e0d\u96be\u60f3\u5230\uff0c\u5bf9\u4e8e\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\uff0c\u5176\u662f\u652f\u6301\u9664\u4e86 $ 1 $ \u64cd\u4f5c\u5916\u6240\u6709\u64cd\u4f5c\u7684\u5feb\u901f\u5b9e\u73b0\u7684\uff0c\u800c ODT \u53c8\u53ef\u4ee5\u5c06\u533a\u95f4\u6574\u9664\u8f6c\u5316\u4e3a\u533a\u95f4\u63a8\u5e73\uff0c\u4e8e\u662f\u6211\u4eec\u4fbf\u4e0d\u96be\u60f3\u5230\uff0c\u540c\u65f6\u7ef4\u62a4\u4e00\u68f5 ODT \u548c\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u5bf9\u4e8e $ 1 $ \u64cd\u4f5c\u5728 ODT \u4e0a\u901a\u8fc7\u521a\u624d\u8bf4\u7684\u4f18\u5316\u8f6c\u6362\u4e3a\u82e5\u5e72\u4e2a\u533a\u95f4\u63a8\u5e73\uff0c\u7136\u540e\u5c06\u63a8\u5e73\u4f5c\u7528\u5230\u7ebf\u6bb5\u6811\u4e0a\uff0c\u5bf9\u4e8e $ 2 $ \u64cd\u4f5c\u5219 ODT \u548c\u7ebf\u6bb5\u6811\u540c\u65f6\u8fdb\u884c\uff0c\u5bf9\u4e8e $ 3 $ \u7684\u67e5\u8be2\u76f4\u63a5\u5728\u7ebf\u6bb5\u6811\u4e0a\u8dd1\u5373\u53ef\u3002\u8fd9\u4e2a\u7684\u590d\u6742\u5ea6\u6211\u6ca1\u592a\u60f3\u51fa\u6765\uff0c\u4e0d\u8fc7\u7ffb\u4e86\u4e00\u4e0b\u9898\u89e3\u533a\uff0c\u53d1\u73b0\u4e00\u7bc7 Blog [[ABC256Ex] I like Query Problem \u9898\u89e3](https://www.luogu.com.cn/blog/EastPorridge/solution-ABC256Ex) \u548c\u6211\u7684\u505a\u6cd5\u51e0\u4e4e\u76f8\u540c\uff0c\u552f\u4e00\u7684\u533a\u522b\u5c31\u662f\u5176\u5728 ODT \u7ef4\u62a4\u533a\u95f4\u6574\u9664\u7684\u65f6\u5019\u662f\u76f4\u63a5\u91cd\u6784\u7684 ODT\u3002\u603b\u4f53\u6765\u8bb2\u8fd9\u4e24\u79cd\u7ef4\u62a4\u65b9\u5f0f\u5dee\u522b\u662f\u4e0d\u5927\u7684\uff0c\u65e0\u975e\u5c31\u662f\u4e00\u53ea\u5c0f $ \\log $ \u7684\u533a\u522b\uff0c\u5927\u4f6c\u7684 Blog \u6700\u540e\u5206\u6790\u7684\u590d\u6742\u5ea6\u4e3a $ O(n \\log^2 n) $\uff0c\u6240\u4ee5\u6211\u7684\u8fd9\u4e2a\u53ef\u80fd\u4e5f\u662f\u8fd9\u4e2a\u590d\u6742\u5ea6\uff1f\uff1f\u603b\u4e4b\u8868\u73b0\u8fd8\u4e0d\u9519\uff0c\u6700\u7ec8 $ 1.6\\texttt{s} $ \u8dd1\u5b8c\u3002\n\n## \u5199\u5728\u540e\u9762\n\n\u8fd9\u4e2a\u5947\u602a\u7684\u505a\u6cd5\u867d\u7136\u80fd\u8fc7\uff0c\u4e0d\u8fc7\u8fd8\u662f\u4e0d\u63a8\u8350\u5199\uff0c\u6bd5\u7adf\u5b9e\u73b0\u8d77\u6765\u6bd4\u8f83\u590d\u6742\u7ec6\u8282\u8f83\u591a\uff0c\u5982\u679c\u5199\u7684\u8bdd\u4f3c\u4e4e\u76f4\u63a5\u5199\u91cd\u6784\u90e8\u5206 ODT \u7684\u65b9\u6cd5\u4f1a\u66f4\u597d\u5b9e\u73b0\u4e00\u4e9b\u3002\u4e00\u822c\u7684\u7ebf\u6bb5\u6811\u5199\u6cd5\u5b9e\u73b0\u5927\u6982\u4e5f\u5c31 $ 60 $ \u884c\uff0c\u7136\u540e\u8fd9\u4e2a\u4e1c\u897f\u6211\u5b9e\u73b0\u5927\u6982\u5199\u4e86\u5c06\u8fd1\u4e24\u767e\u884c\u3002\u3002\u3002\n\n## Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW(arr) void* Edge::operator new(size_t){static Edge* P = arr; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\ntemplate < typename T = int >\ninline T read(void);\n\nint N, Q;\nint A[510000];\n\nstruct Node{\n    int l;\n    mutable int r;\n    mutable ll val;\n    friend const bool operator < (const Node &a, const Node &b){\n        return a.l < b.l;\n    }\n};\n\nclass SegTree{\nprivate:\npublic:\n    ll tr[510000 << 2];\n    ll lz[510000 << 2];\n    #define LS (p << 1)\n    #define RS (LS | 1)\n    #define MID ((gl + gr) >> 1)\n    #define SIZ(l, r) ((r) - (l) + 1)\npublic:\n    SegTree(void){memset(lz, -1, sizeof lz);}\n    void Pushup(int p){tr[p] = tr[LS] + tr[RS];}\n    void Pushdown(int p, int gl, int gr){\n        if(!~lz[p])return;\n        lz[LS] = lz[RS] = lz[p];\n        tr[LS] = SIZ(gl, MID) * lz[p];\n        tr[RS] = SIZ(MID + 1, gr) * lz[p];\n        lz[p] = -1;\n    }\n    void Build(int p = 1, int gl = 1, int gr = N){\n        if(gl == gr)return tr[p] = A[gl = gr], void();\n        Build(LS, gl, MID), Build(RS, MID + 1, gr);\n        Pushup(p);\n    }\n    void Assign(int l, int r, ll v, int p = 1, int gl = 1, int gr = N){\n        // printf(\"Assign ST : l = %d, r = %d, v = %lld, gl = %d, gr = %d, p = %d\\n\", l, r, v, gl, gr, p);\n        if(l <= gl && gr <= r)return tr[p] = SIZ(gl, gr) * v, lz[p] = v, void();\n        Pushdown(p, gl, gr);\n        if(l <= MID)Assign(l, r, v, LS, gl, MID);\n        if(MID + 1 <= r)Assign(l, r, v, RS, MID + 1, gr);\n        Pushup(p);\n    }\n    ll Query(int l, int r, int p = 1, int gl = 1, int gr = N){\n        if(l <= gl && gr <= r)return tr[p];\n        if(r < gl || l > gr)return 0;\n        Pushdown(p, gl, gr);\n        return Query(l, r, LS, gl, MID) + Query(l, r, RS, MID + 1, gr);\n    }\n    void Desc(int siz = 3){\n        int len(1);\n        int cur(0);\n        while(siz--){\n            for(int i = 1; i <= len; ++i)printf(\"%lld%c\", tr[++cur], i == len ? '\\n' : ' ');\n            len <<= 1;\n        }\n    }\n}st;\n\nclass ODT{\nprivate:\n    set < Node > tr;\npublic:\n    auto Insert(Node p){return tr.insert(p);}\n    auto Split(int p){\n        auto it = tr.lower_bound(Node{p});\n        if(it != tr.end() && it->l == p)return it;\n        advance(it, -1);\n        if(p > it->r)return tr.end();\n        int l = it->l, r = it->r;\n        ll val = it->val;\n        tr.erase(it);\n        Insert(Node{l, p - 1, val});\n        return Insert(Node{p, r, val}).first;\n    }\n    void Assign(int l, int r, ll val){\n        auto itR = Split(r + 1), itL = Split(l);\n        tr.erase(itL, itR);\n        Insert(Node{l, r, val});\n        st.Assign(l, r, val);\n    }\n    void Divide(int l, int r, ll x){\n        auto itR = Split(r + 1), itL = Split(l);\n        for(auto it = itL; it != itR;){\n            it->val /= x;\n            if(!it->val){\n                decltype(it) nxt;\n                for(nxt = next(it); nxt != itR; nxt = tr.erase(nxt)){\n                    nxt->val /= x;\n                    if(!nxt->val)it->r = nxt->r;\n                    else{\n                        st.Assign(it->l, it->r, it->val);\n                        st.Assign(nxt->l, nxt->r, nxt->val);\n                        it = next(nxt);\n                        break;\n                    }\n                }\n                if(nxt == itR)st.Assign(it->l, it->r, it->val), it = nxt;\n            }else\n                st.Assign(it->l, it->r, it->val), advance(it, 1);\n        }\n    }\n    ll Query(int l, int r){\n        ll ret(0);\n        auto itR = Split(r + 1), itL = Split(l);\n        for(auto it = itL; it != itR; ++it)\n            ret += (it->r - it->l + 1) * it->val;\n        return ret;\n    }\n    void Desc(void){\n        printf(\"Describe ODT:\\n\");\n        for(auto nod : tr)printf(\"%d ~ %d : %lld\\n\", nod.l, nod.r, nod.val);\n    }\n}odt;\n\nint main(){\n    // freopen(\"01_n_small_00.txt\", \"r\", stdin);\n    // freopen(\"out.txt\", \"w\", stdout);\n    N = read(), Q = read();\n    for(int i = 1; i <= N; ++i)odt.Insert(Node{i, i, A[i] = read()});\n    st.Build();\n    while(Q--){\n        int opt = read();\n        switch(opt){\n            case 1:{\n                int l = read(), r = read(), x = read();\n                odt.Divide(l, r, x);\n                break;\n            }\n            case 2:{\n                int l = read(), r = read(), x = read();\n                odt.Assign(l, r, x);\n                break;\n            }\n            case 3:{\n                int l = read(), r = read();\n                printf(\"%lld\\n\", st.Query(l, r));\n                break;\n            }\n            default: break;\n        }\n    }\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n## UPD\n\nupdate-2022_12_08 \u521d\u7a3f\n\nupdate-2022_12_08 \u4fee\u590d\u4e00\u70b9\u5c0f\u9505",
        "postTime": 1670504741,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "[ABC256Ex] I like Query Problem \u9898\u89e3"
    },
    {
        "content": "### \u9898\u76ee\u6982\u8ff0\uff1a\n\n\u8ba9\u4f60\u5199\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u652f\u6301\u533a\u95f4\u63a8\u5e73\uff0c\u533a\u95f4\u6574\u9664\uff0c\u67e5\u8be2\u533a\u95f4\u548c\u3002\n\n### \u9898\u76ee\u5206\u6790\uff1a\n\n\u73c2\u6735\u8389\u6811\u5957\u7ebf\u6bb5\u6811\uff0c\u8fd9\u9053\u9898\u5145\u65a5\u4e86\u6211\u5bf9\u73c2\u6735\u8389\u6811\u7684\u6240\u6709\u7406\u89e3\u3002\n\n\u770b\u5230\u533a\u95f4\u63a8\u5e73\uff0c\u6211\u76f8\u4fe1\u5b66\u8fc7\u73c2\u6735\u8389\u6811\u7684\u4eba\u5df2\u7ecf\u6309\u637a\u4e0d\u4f4f\u5185\u5fc3\u60f3\u76f4\u63a5\u5199\u4e2a\u73c2\u6735\u8389\u6811\u80e1\u4e0a\u53bb\uff0c\u6211\u4e5f\u662f\uff0c\u4f46\u662f\u8fd9\u662f Ex \u9898\uff0c\u8fc7\u4e0d\u53bb\u3002\n\n\u5206\u6790\u539f\u56e0\uff0c\u5f88\u7b80\u5355\uff0c\u56e0\u4e3a\u5757\u6570\u592a\u6563\u4e86\uff0c\u6bcf\u6b21\u67e5\u8be2\u548c\u6574\u9664\u64cd\u4f5c\u7684\u590d\u6742\u5ea6\u592a\u50bb\uff0c\u4e00\u6b65\u601d\u8003\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b9a\u671f\u91cd\u6784\u7684\u65b9\u5f0f\uff0c\u6bcf\u76f8\u9694 $\\sqrt q$ \u7684\u65f6\u95f4\uff0c\u5c31\u7528\u7ebf\u6027\u7684\u590d\u6742\u5ea6\u5c06 `set` \u4e2d\u6743\u503c\u8fde\u7eed\u7684\u90e8\u5206\u53d8\u6210\u6781\u5927\u5757\uff0c\u6765\u4f18\u5316\u67e5\u8be2\u548c\u6574\u9664\u64cd\u4f5c\uff0c\u4f46\u662f\uff0c\u8fd8\u662f\u8fc7\u4e0d\u53bb\u3002\n\n\u6211\u4eec\u6bcf\u6b21\u4f18\u5316\u7684\u5c31\u662f\u4e24\u4e2a\u8981\u8fdb\u884c\u5757\u95f4\u904d\u5386\u7684\u64cd\u4f5c\uff0c\u6240\u4ee5\u5b9a\u671f\u91cd\u6784\u53ef\u4ee5\u7406\u89e3\u4e3a\u7528\u8fd1\u4f3c $O(n \\sqrt q)$ \u7684\u590d\u6742\u5ea6\u53bb\u5747\u644a\u4e24\u4e2a\u66b4\u529b\u64cd\u4f5c\u7684\u7684\u590d\u6742\u5ea6\u3002\n\n\u6709\u5565\u6570\u636e\u7ed3\u6784\u4e5f\u53ef\u4ee5\u964d\u4f4e\u67e5\u8be2\u7684\u590d\u6742\u5ea6\u5462\uff1f\u7ebf\u6bb5\u6811\u3002\n\n\u6211\u4eec\u53d1\u73b0\u7ebf\u6bb5\u6811\u5f88\u5bb9\u6613\u652f\u6301\u533a\u95f4\u63a8\u5e73\u548c\u533a\u95f4\u548c\u64cd\u4f5c\uff0c\u7a33\u5b9a $O( \\log n)$\uff0c\u96be\u5728\u533a\u95f4\u6574\u9664\uff08\u5176\u5b9e\u4f60\u5982\u679c\u4f1a\uff0c\u8fd9\u5c31\u662f\u4e2a\u52bf\u80fd\u7ebf\u6bb5\u6811\u7684\u677f\u5b50\uff09\uff0c\u4f46\u73c2\u6735\u8389\u6811\u5374\u53ef\u4ee5\u5f88\u7b80\u5355\u7684\u8fdb\u884c\u533a\u95f4\u6574\u9664\uff0c\u7ed3\u5408\u6211\u4eec\u4e0a\u9762\u7684\u5747\u644a\u601d\u60f3\uff0c\u4e00\u4e2a\u65b0\u65b9\u6cd5\u8bde\u751f\u4e86\u3002\n\n\u6bcf\u6b21\u6574\u9664\u64cd\u4f5c\u548c\u533a\u95f4\u63a8\u5e73\u65f6\uff0c\u90fd\u91cd\u6784\u4e00\u904d split \u51fa\u6765\u7684\u5de6\u53f3\u7aef\u70b9\u4e2d\u95f4\u7684\u5757\uff0c\u5f52\u5e76\u6210\u6743\u503c\u76f8\u540c\u7684\u6781\u5927\u5757\uff0c\u518d\u7528\u7ebf\u6bb5\u6811\u8fdb\u884c\u533a\u95f4\u63a8\u5e73\uff0c\u76f8\u5f53\u4e8e\u628a\u5b9a\u671f\u91cd\u6784\u6362\u6210\u4e86\u9047\u4e0a\u4fee\u6539\u64cd\u4f5c\u5c31\u91cd\u6784\u4e00\u904d\u4fee\u6539\u64cd\u4f5c\u4e2d\u95f4\u7684\u6240\u6709\u5757\uff0c\u518d\u7528\u7ebf\u6bb5\u6811\u63a8\u5e73\u7ef4\u62a4\u4e00\u904d\uff0c\u67e5\u8be2\u5c31\u53ef\u4ee5\u76f4\u63a5 $O(\\log n)$ \u7684\u505a\u3002\n\n\u8fd9\u73a9\u610f\u662f\u5bf9\u7684\uff0c\u6bd4\u7eaf\u66b4\u529b\u73c2\u6735\u8389\u6811\u5feb 6s \u591a\uff0c\u4e0b\u9762\u53e3\u80e1\u4e00\u4e0b\u590d\u6742\u5ea6\u3002\n\n\u56e0\u4e3a\u6bcf\u6b21\u64cd\u4f5c\u90fd\u4fdd\u8bc1\u4e86\u76f8\u540c\u6743\u503c\u6781\u5927\u5757\uff0c\u6240\u4ee5\u6bcf\u6b21\u6574\u9664\u81f3\u5c11\u662f $\\log$ \u7684\uff0c\u53c8\u56e0\u4e3a\u6211\u4eec\u5916\u9762\u53c8\u5957\u4e86\u68f5\u7ebf\u6bb5\u6811\uff0c\u6240\u4ee5\u6574\u4f53\u8fd1\u4f3c $O(n \\log^2 n)$ \u7684\uff0c\u4e0d\u4e25\u683c\u5728\u6574\u9664\u64cd\u4f5c\uff0c\u52a0\u4e0a STL \u548c\u7ebf\u6bb5\u6811\u5e76\u7528\u7684\u5de8\u5927\u5e38\u6570\uff0c\u6240\u4ee5\u8dd1\u7684\u8fd8\u662f\u6bd4\u8f83\u6162\u7684\u3002\n\n### Code.\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\ninline char gc()\n{\n    static char buf[100000],*p1=buf,*p2=buf;\n    return p1==p2&&(p2=(p1=buf)+fread(buf,1,100000,stdin),p1==p2)?EOF:*p1++;\n}\n#define gc getchar\ninline int read()\n{\n\tint x=0; char c=gc(); bool f=0;\n\tfor(;c<'0'||c>'9';c=gc()) f|=(c=='-');\n\tfor(;c>='0'&&c<='9';c=gc()) x=(x<<1)+(x<<3)+(c^48);\n\treturn x=f ? -x : x;\n}\nusing namespace std;\nconst int N=5e5+10;\nint n,q,a[N],tt; struct Seg {int l,r,sum,tag;} tr[N<<2];\ninline void pushup(int u) {tr[u].sum=tr[u<<1].sum+tr[u<<1|1].sum;}\ninline void pushdown(int u)\n{\n\tif(tr[u].tag != -1)\n\t{\n\t\ttr[u<<1].sum=tr[u].tag*(tr[u<<1].r - tr[u<<1].l + 1);\n\t\ttr[u<<1|1].sum=tr[u].tag*(tr[u<<1|1].r - tr[u<<1|1].l + 1);\n\t\ttr[u<<1].tag=tr[u<<1|1].tag=tr[u].tag;\n\t}\n\ttr[u].tag=-1;\n}\ninline void build(int u,int l,int r)\n{\n\ttr[u].l=l,tr[u].r=r,tr[u].tag=-1;\n\tif(l == r) return tr[u].sum=a[l],void();\n\tint mid = (l + r) >> 1ll;\n\tbuild(u<<1,l,mid); build(u<<1|1,mid+1,r);\n\tpushup(u);\n}\ninline int query(int u,int l,int r)\n{\n\tif(l <= tr[u].l && tr[u].r <= r) return tr[u].sum;\n\tpushdown(u);\n\tint mid = (tr[u].l + tr[u].r) >> 1ll,res=0;\n\tif(l <= mid) res=query(u<<1,l,r); if(mid < r) res+=query(u<<1|1,l,r);\n\treturn res;\n}\ninline void modify(int u,int l,int r,int k)\n{\n\tif(l <= tr[u].l && tr[u].r <= r)\n\t{\n\t\ttr[u].sum=k*(tr[u].r - tr[u].l + 1);\n\t\ttr[u].tag=k; return ;\n\t}\n\tpushdown(u);\n\tint mid = (tr[u].l + tr[u].r) >> 1ll;\n\tif(l <= mid) modify(u<<1,l,r,k); if(mid < r) modify(u<<1|1,l,r,k);\n\tpushup(u);\n}\nstruct node\n{\n\tint l,r; mutable int v;\n\tbool operator < (const node &o) const {\n\t\treturn l < o.l;\n\t}\n} t[N]; set<node> s;\ninline set<node> :: iterator split(int pos)\n{\n\tauto it=s.lower_bound(node{pos,-1,0});\n\tif(it->l == pos && it != s.end()) return it;\n\tit -- ; int l=it->l,r=it->r,v=it->v;\n\ts.erase(it); s.insert(node{l,pos-1,v});\n\treturn s.insert(node{pos,r,v}).first;\n}\ninline void assign(int l,int r,int v)\n{\n\tauto itr=split(r+1),itl=split(l);\n\ts.erase(itl,itr); s.insert(node{l,r,v});\n\tmodify(1,l,r,v);\n}\ninline void qr(int l,int r,int x)\n{\n\tauto itr=split(r+1),itl=split(l); int pl=0,yl=1;\n\tfor(auto it=itl;it!=itr;it++) it->v/=x,t[++pl]=*it;\n\ts.erase(itl,itr);\n\tfor(int i=2;i<=pl;i++)\n\t{\n\t\tif(t[i].v == t[yl].v) t[yl].r=t[i].r;\n\t\telse t[++yl]=t[i];\n\t}\n\tfor(int i=1;i<=yl;i++)\n\t{\n\t\ts.insert(node{t[i].l,t[i].r,t[i].v});\n\t\tmodify(1,t[i].l,t[i].r,t[i].v);\n\t}\n}\nsigned main()\n{\n\tn=read(); q=read();\n\tfor(int i=1,l=1;i<=n;i++)\n\t{\n\t\ta[i]=read(); if(i == 1) tt=a[i];\n\t\telse if(a[i] != tt || i == n)\n\t\t{\n\t\t\ts.insert(node{l,i-1,tt});\n\t\t\tl=i,tt=a[i];\n\t\t}\n\t}\n\ts.insert(node{n,n,a[n]}); build(1,1,n);\n\twhile(q -- )\n\t{\n\t\tint op=read(),l=read(),r=read();\n\t\tif(op == 1) qr(l,r,read()); \n\t\telse if(op == 2) assign(l,r,read());\n\t\telse printf(\"%lld\\n\",query(1,l,r));\n\t}\n\treturn 0;\n}\n\n```\n------------\n\n\u8fd9\u4e2a\u73a9\u610f\u6211\u628a\u5b83\u4f5c\u4e3a\u6709\u533a\u95f4\u63a8\u5e73\u64cd\u4f5c\u7684\u52bf\u80fd\u7ebf\u6bb5\u6811\u7684\u4e0b\u4f4d\u66ff\u4ee3\u54c1\uff0c\u53ef\u4ee5\u8bf4\u662f\u7528\u73c2\u6735\u8389\u6811\u6765\u7b80\u5316\u4fee\u6539\uff0c\u6216\u8005\u8bf4\u662f\u7528\u7ebf\u6bb5\u6811\u6765\u4f18\u5316\u67e5\u8be2\u4e86\uff0c\u4f18\u70b9\u53ef\u80fd\u662f\u5c11\u53bb\u4e86\u539f\u672c\u5728\u7ebf\u6bb5\u6811\u4e0a\u5206\u6790\u52bf\u80fd\u7684\u64cd\u4f5c\uff0c\u6bd4\u8f83\u65e0\u8111\u4e14\u597d\u5199\uff0c\u9002\u5408\u66b4\u529b\u3002",
        "postTime": 1666365282,
        "uid": 230865,
        "name": "EastPorridge",
        "ccfLevel": 0,
        "title": "[ABC256Ex] I like Query Problem \u9898\u89e3"
    }
]