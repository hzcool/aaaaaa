[
    {
        "content": "~~\u7ecf\u8fc7\u4e86\u4e00\u5468\u7684\u52aa\u529b\u540e\uff0c\u7ec8\u4e8e\u628a\u8fd9\u9898\u8fc7\u4e86......~~\n\n---\n\n\u9898\u610f\u63cf\u8ff0\uff1a\n\n\u7ed9\u4f60\u4e00\u5f20\u6709\u6570\u5b57\u548c\u5b57\u7b26\u7684\u56fe\u7247\uff0c\u8ba1\u7b97\u5176\u8868\u8fbe\u5f0f\u7684\u503c\u3002\n\n---\n\n\u5206\u6790\uff1a\n\n\u5bf9\u4e8e\u8fd9\u9053\u9898\u6765\u8bf4\uff0c\u5927\u4f53\u53ef\u4ee5\u5206\u4e3a2\u4e2a\u6b65\u9aa4:\n![](https://cdn.luogu.com.cn/upload/image_hosting/yn789b9k.png)\n\n\u5176\u4e2d\u8868\u8fbe\u5f0f\u6c42\u503c\u7684\u90e8\u5206\u53ef\u53c2\u8003[P1175](https://www.luogu.com.cn/problem/P1175)\uff08\u8868\u8fbe\u5f0f\u7684\u8f6c\u6362\uff09\uff0c\u5c06\u4e2d\u7f00\u8868\u8fbe\u5f0f\u8f6c\u4e3a\u540e\u7f00\u8868\u8fbe\u5f0f\u6c42\u503c\u5373\u53ef\u3002\n\n\u4f46\u6700\u91cd\u8981\uff0c\u4e5f\u662f\u6700\u96be\u4ee5\u89e3\u51b3\u7684\u90e8\u5206\uff0c\u5c31\u662f\u8bc6\u522b\u8868\u8fbe\u5f0f\u7684\u90e8\u5206\uff0c\u5e94\u8be5\u600e\u4e48\u505a\u5462\uff1f\n\n\u9996\u5148\uff0c\u4e3a\u4e86\u51cf\u5c11\u566a\u70b9\u7684\u5e72\u6270\uff0c\u9700\u8981\u5bf9\u56fe\u7247\u8fdb\u884c\u964d\u566a\u5904\u7406\uff0c\u8fd9\u91cc\uff0c\u6211\u91c7\u7528\u4e86\u4e00\u79cd\u53eb\u4f17\u6570\u6ee4\u6ce2\u5668\u7684\u964d\u566a\u65b9\u6cd5\uff0c\u8fd9\u91cc\u5c55\u793a\u7684\u662f\u5bf952\u53f7\u70b9\u7684\u5904\u7406\u7ed3\u679c\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/qonbjdec.png)\n\n\u53ef\u4ee5\u770b\u5230\uff0c\u6548\u679c\u76f8\u5f53\u663e\u8457\u3002\u5177\u4f53\u7684\u4ee3\u7801\u5b9e\u73b0\u4e5f\u6bd4\u8f83\u7b80\u5355\uff1a\n```cpp\n//\u5bf9\u56fe\u7247\u8fdb\u884c\u964d\u566a\u5904\u7406\nImage reducenoice(const Image& img)\n{\n\tImage tmp(img);  //\u5bf9img\u8fdb\u884c\u590d\u5236\n\tauto valid = [&](int x, int y) {return x >= 0 and x < img.sx and y >= 0 and y < img.sy; };  //\u5224\u5b9a\u8bbf\u95ee\u662f\u5426\u8d8a\u754c\n\tint dx[] = { 0, 1, 1, 0, -1, -1, -1, 0, 1 };\n\tint dy[] = { 0, 0, 1, 1, 1, 0, -1, -1, -1 };   //\u521b\u5efa\u904d\u5386\u5217\u8868\n\tfor (int x = 0; x < img.sx; x++) {\n\t\tfor (int y = 0; y < img.sy; y++) {  //\u5bf9\u6bcf\u4e2ax, y\u8fdb\u884c\u5faa\u73af\n\t\t\tint cnt1 = 0, cnt2 = 0;  //cnt1\u4e3a\u5468\u56f41\u5708\u9ed1\u70b9\u6570\u91cf\uff0ccnt2\u4e3a\u5468\u56f41\u5708\u70b9\u7684\u6570\u91cf\n\t\t\tfor (int k = 0; k < 9; k++) {  //\u904d\u5386\u5468\u56f4\u7684\u70b9\n\t\t\t\tint nx = x + dx[k], ny = y + dy[k];\n\t\t\t\tif (valid(nx, ny))\n\t\t\t\t\tcnt2++, cnt1 += img[nx][ny];\n\t\t\t}\n\t\t\ttmp[x][y] = (cnt1 * 2 > cnt2);  //\u5224\u5b9a\u5468\u56f4\u9ed1\u70b9\u6570\u91cf\u662f\u5426\u6bd4\u767d\u70b9\u591a\uff0c\u82e5\u662f\u5219\u5c06\u6b64\u5904\u6d82\u9ed1\n\t\t}\n\t}\n\treturn tmp;\n}\n```\n\uff08\u5176\u4e2dImage\u662f\u6211\u4e3a\u4e86\u65b9\u4fbf\u64cd\u4f5c\u56fe\u7247\u800c\u521b\u5efa\u7684\u7c7b\uff09\n\n\u5bf9\u6574\u5f20\u56fe\u7247\u8fdb\u884c\u964d\u566a\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u51c6\u786e\u5730\u5c06\u5404\u4e2a\u5b57\u7b26\u4ece\u56fe\u7247\u4e2d\u6309\u987a\u5e8f\u5206\u79bb\u51fa\u6765\u4e86\u3002\u56e0\u4e3a\u9898\u76ee\u4fdd\u8bc1\u4e86\uff1a\n\n>* \u5bf9\u4e8e\u6a2a\u5411\u7684\u4f4d\u7f6e\uff0c\u5bf9\u4e8e\u4efb\u610f\u76f8\u90bb\u7684\u5b57\u7b26\uff0c\u5b83\u4eec\u4e4b\u95f4\u4f1a\u6709 $10$ \u4e2a\u50cf\u7d20\u7684\u7a7a\u767d\u3002\n\n\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u56fe\u7247\u9010\u5217\u4ece\u4e0a\u5f80\u4e0b\u626b\uff0c\u6765\u6309\u987a\u5e8f\u5f97\u5230\u4e0d\u540c\u7684\u5b57\u7b26\u3002\n\n\u8fd9\u4e00\u90e8\u5206\u7684\u4ee3\u7801\u5b9e\u73b0\uff1a\n```cpp\n//\u5c06\u5927\u4e8eminsize\u5927\u5c0f\u7684\u8054\u901a\u5757\u5206\u79bb\u51fa\u6765\nvector<Image> split(Image img, int minsize = 15)\n{\n\tvector<Image> res;\n\tqueue<pair<int, int>> q;  //\u5b58\u50a8\u8fde\u901a\u5757\u4e2d\u7684\u9ed1\u70b9\n\tint minx = INT_MAX, maxx = INT_MIN, miny = INT_MAX, maxy = INT_MIN;\n\tauto init = [&]() {minx = INT_MAX, maxx = INT_MIN, miny = INT_MAX, maxy = INT_MIN; };  //\u521d\u59cb\u5316\u53d8\u91cf\n\tauto valid = [&](int x, int y) { return x >= 0 and x < img.sx and y >= 0 and y < img.sy; };  //\u5224\u5b9a\u8bbf\u95ee\u662f\u5426\u8d8a\u754c\n\tauto bfs = [&](int x, int y) {  //\u5c06\u5f53\u524d\u8fde\u901a\u5757\u4e2d\u6240\u6709\u9ed1\u70b9\u5168\u90e8\u52a0\u5165\u5230\u961f\u5217q\u4e2d\n\t\tqueue<pair<int, int>> q1;\n\t\tint dx[] = { 0, 1, 0, -1 }, dy[] = { 1, 0, -1, 0 };\n\t\tq1.push({ x, y }); q.push(q1.back());\n\t\tchkmax(maxx, x), chkmax(maxy, y), chkmin(minx, x), chkmin(miny, y);\n\t\timg[x][y] = 0;\n\t\twhile (!q1.empty()) {\n\t\t\tauto h = q1.front();\n\t\t\tint x = h.first, y = h.second;\n\t\t\tq1.pop();\n\t\t\tfor (int i = 0; i < 4; i++) {\n\t\t\t\tint nx = x + dx[i], ny = y + dy[i];\n\t\t\t\tif (valid(nx, ny) and img[nx][ny]) {\n\t\t\t\t\tq1.push({ nx, ny }); q.push(q1.back());\n\t\t\t\t\timg[nx][ny] = 0;\n\t\t\t\t\tchkmax(maxx, nx), chkmax(maxy, ny), chkmin(minx, nx), chkmin(miny, ny);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\tfor (int j = 0; j < img.sy; j++) {\n\t\tfor (int i = 0; i < img.sx; i++) {  //\u904d\u5386\u6574\u5f20\u56fe\uff0c\u6ce8\u610f\u53d8\u91cf\u679a\u4e3e\u987a\u5e8f\n\t\t\tif (img[i][j]) {  //\u5982\u679c\u6b64\u5904\u5b58\u5728\u9ed1\u70b9\n\t\t\t\tinit();\n\t\t\t\tbfs(i, j);  //\u5f97\u5230\u4e0e\u5b83\u76f8\u8fde\u7684\u8fde\u901a\u5757\n\t\t\t\tif (q.size() >= minsize) {  //\u8fd9\u91cc\u7684\u5224\u65ad\u662f\u9632\u6b62\u6709\u4e9b\u566a\u70b9\u672a\u88ab\u5904\u7406\u5e72\u51c0\uff0c\u88ab\u5f53\u4e3a\u5355\u4e2a\u5b57\u7b26\u5206\u79bb\u51fa\u53bb\n\t\t\t\t\tImage tmpimg(maxx - minx + 1, maxy - miny + 1, img.conv1, img.conv2);  //\u4f9d\u636e\u5927\u5c0f\u6784\u5efa\u5b50\u56fe\n\t\t\t\t\twhile (!q.empty()) {\n\t\t\t\t\t\tauto p = q.front(); q.pop();\n\t\t\t\t\t\tint x = p.first, y = p.second;\n\t\t\t\t\t\ttmpimg[x - minx][y - miny] = 1;  //\u5c06\u961f\u5217\u91cc\u7684\u9ed1\u70b9\u653e\u5230\u5b50\u56fe\u7684\u76f8\u5e94\u4f4d\u7f6e\n\t\t\t\t\t}\n\t\t\t\t\tres.push_back(tmpimg);  //\u5c06\u5b50\u56fe\u653e\u5230\u5217\u8868\u91cc\u9762\n\t\t\t\t}\n\t\t\t\twhile (!q.empty()) q.pop();\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n```\n\n\u5269\u4e0b\u6765\u7684\uff0c\u5c31\u662f\u5355\u4e2a\u5b57\u7b26\u7684\u8bc6\u522b\u8fc7\u7a0b\u4e86\u3002\u5230\u4e86\u8fd9\u91cc\uff0c\u53ef\u80fd\u4f1a\u675f\u624b\u65e0\u7b56\uff0c\u4f46\u662f\u9898\u9762\u53c8\u4e00\u6b21\u7ed9\u4e86\u6211\u4eec\u91cd\u8981\u7684\u63d0\u793a:\n\n>\u8f93\u5165\uff1a\n>\n$$t$$\n$$\\vdots$$\n\n>\u5176\u4e2d\uff0c$t$ \u4e3a\u975e\u8d1f\u6574\u6570\uff0c\u8868\u793a\u6b64\u4e3a\u7b2c $t$ \u7ec4\u6570\u636e\uff1b\n\n\n\n>\u6240\u6709\u4ee5\u4e0b\u6570\u636e\u6309\u4ee5\u4e0b\u6b65\u9aa4\u751f\u6210\uff1a\n\n>$\\cdots$\n\n>\u6570\u636e\u8303\u56f4\uff1a\n\n>* \u5bf9\u4e8e $0 \\le t < 30$ \u7684\u6570\u636e:\n>* $\\vdots$\n>* \u5bf9\u4e8e $30 \\le t < 90$ \u7684\u6570\u636e:\n>* $\\vdots$\n>* \u5bf9\u4e8e $90 \\le t \\le 140$ \u7684\u6570\u636e:\n>* $\\vdots$\n\n\u8fd9\u8bf4\u660e\u4ec0\u4e48\uff1f\u5bf9\u4e8e\u51fa\u73b0\u7684\u6240\u6709\u5b57\u7b26\uff0c\u5b83\u90fd\u662f\u901a\u8fc7\u786e\u5b9a\u7684\u53d8\u6362\u65b9\u5f0f\uff0c\u901a\u8fc7\u4e0d\u540c\u7684\u53c2\u6570\u53d8\u6362\u800c\u6765\u7684\u3002\u6839\u636e\u9898\u610f\uff0c\u53ef\u4ee5\u5199\u51fa\u53d8\u6362\u90e8\u5206\u7684\u4ee3\u7801\uff1a\n\n```cpp\nImage balance(const Image& img)\n{\n\tImage res(65, 38);\n\tint sumx = 0, sumy = 0, sumc = 0;\n\tfor (int i = 0; i < img.sx; i++)\n\t{\n\t\tfor (int j = 0; j < img.sy; j++)\n\t\t{\n\t\t\tif (img[i][j])\n\t\t\t{\n\t\t\t\tsumx += i, sumy += j, sumc++;\n\t\t\t}\n\t\t}\n\t}\n\tint cx = (2 * sumx + sumc) / (2 * sumc), cy = (2 * sumy + sumc) / (2 * sumc);  //\u786e\u5b9a\u4e2d\u5fc3\u4f4d\u7f6e\n\tint px = 32 - cx, py = 19 - cy;  //\u786e\u5b9a\u504f\u79fb\u91cf\n\tres = cover(res, img, px, py);  //\u8fdb\u884c\u5e73\u79fb\n\treturn res;\n}\n\nauto trans = [&](const Image& img, double M, double Mx, double My, double R, double Sx, double Sy)\n{\n\tauto valid = [=](int x, int y) { return x >= 0 and x < 65 and y >= 0 and y < 38; };  //\u5224\u65ad\u662f\u5426\u8d8a\u754c\n\tImage imgans(65, 38);\n\tfor (int i = 0; i < 65; i++)\n\t{\n\t\tfor (int j = 0; j < 38; j++)\n\t\t{\n\t\t\tif (img[i][j])\n\t\t\t{\n\t\t\t\tdouble y = i + 0.5 - 32.5, x = j + 0.5 - 19;  //\u5148\u5bf9\u50cf\u7d20\u70b9\u8fdb\u884c\u5e73\u79fb\uff0c\u65b9\u4fbf\u540e\u9762\u7684\u65cb\u8f6c,\u626d\u66f2\u64cd\u4f5c\n\t\t\t\tx *= M * Mx, y *= M * My;  //\u8fdb\u884c\u6a2a\u5411/\u7eb5\u5411\u4f38\u7f29\u53d8\u6362\n\t\t\t\tdouble nx = x * cos(torad(R)) - y * sin(torad(R)), ny = x * sin(torad(R)) + y * cos(torad(R));  //\u8fdb\u884c\u65cb\u8f6c\u53d8\u6362\n\t\t\t\tx = nx + Sy * ny, y = ny + Sx * nx;  //\u8fdb\u884c\u626d\u66f2\u53d8\u6362\n\t\t\t\tint X = int(round(y + 32.5 - 0.5)), Y = int(round(x + 19 - 0.5));  //\u6700\u7ec8\u7684X, Y\u5750\u6807\n\t\t\t\tif (valid(X, Y))\n\t\t\t\t{\n\t\t\t\t\timgans[X][Y] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn balance(reducenoice(imgans));  //\u5bf9\u53d8\u6362\u540e\u7684\u56fe\u50cf\u964d\u566a\u540e\u518d\u6446\u6b63\u4f4d\u7f6e\n};\n```\n\n\u6709\u4e86\u53d8\u6362\u51fd\u6570\u4e86\u540e\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728\u9898\u76ee\u7ed9\u5b9a\u7684\u53c2\u6570\u8303\u56f4\u5185\uff0c\u968f\u673a\u751f\u6210\u591a\u5f20\u56fe\u50cf\uff0c\u6765\u5e94\u5bf9\u53ef\u80fd\u51fa\u73b0\u7684\u591a\u79cd\u60c5\u51b5\u3002\u8fd9\u91cc\u662f\u521d\u59cb\u5316\u51fd\u6570\u7684\u5b9e\u73b0\uff1a\n\n```cpp\nvoid init(int t)\n{\n\tfor (int i = 0; i < 16; i++)\n\t{\n\t\tSignset[i] = cover(Image(65, 38), Signset[i], Signpos[i][0], Signpos[i][1]);  //\u8fd9\u91cc\u6211\u4e3a\u4e86\u51cf\u5c11\u4ee3\u7801\u957f\u5ea6\uff0c\u53ea\u622a\u53d6\u4e86\u5404\u4e2a\u5b57\u7b26\u7684\u9ed1\u8272\u533a\u57df\uff0c\u4fdd\u5b58\u4e86\u5b83\u4eec\u7684\u5de6\u4e0a\u89d2\u5750\u6807\uff0c\u8fd9\u4e00\u6b65\u505a\u7684\u5c31\u662f\u8fd8\u539f\u4ed6\u4eec\u539f\u6765\u6240\u5728\u7684\u4f4d\u7f6e\n\t}\n\tdouble Mmin = 0.9, Mmax = 1, Rmin, Rmax, Smin, Smax;\n\tif (0 <= t and t < 30)\n\t{\n\t\tRmin = -2, Rmax = 2, Smin = Smax = 0;\n\t}\n\telse if (30 <= t and t < 90)\n\t{\n\t\tRmin = -10, Rmax = 10, Smin = -0.1, Smax = 0.1;\n\t}\n\telse\n\t{\n\t\tRmin = -15, Rmax = 15, Smin = -0.1, Smax = 0.1;\n\t}\n\tuniform_real_distribution M(Mmin, Mmax), R(Rmin, Rmax), S(Smin, Smax);  //\u521d\u59cb\u5316\u968f\u673a\u6570\u751f\u6210\u5668\n\tdefault_random_engine gen(time(NULL));  //\u521d\u59cb\u5316\u968f\u673a\u6570\u751f\u6210\u5668\n\tauto trans = [&](const Image& img, double M, double Mx, double My, double R, double Sx, double Sy)\n\t{\n\t\tauto valid = [=](int x, int y) { return x >= 0 and x < 65 and y >= 0 and y < 38; };  //\u5224\u65ad\u662f\u5426\u8d8a\u754c\n\t\tImage imgans(65, 38);\n\t\tfor (int i = 0; i < 65; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < 38; j++)\n\t\t\t{\n\t\t\t\tif (img[i][j])\n\t\t\t\t{\n\t\t\t\t\tdouble y = i + 0.5 - 32.5, x = j + 0.5 - 19;  //\u5148\u5bf9\u50cf\u7d20\u70b9\u8fdb\u884c\u5e73\u79fb\uff0c\u65b9\u4fbf\u540e\u9762\u7684\u65cb\u8f6c,\u626d\u66f2\u64cd\u4f5c\n\t\t\t\t\tx *= M * Mx, y *= M * My;  //\u8fdb\u884c\u6a2a\u5411/\u7eb5\u5411\u4f38\u7f29\u53d8\u6362\n\t\t\t\t\tdouble nx = x * cos(torad(R)) - y * sin(torad(R)), ny = x * sin(torad(R)) + y * cos(torad(R));  //\u8fdb\u884c\u65cb\u8f6c\u53d8\u6362\n\t\t\t\t\tx = nx + Sy * ny, y = ny + Sx * nx;  //\u8fdb\u884c\u626d\u66f2\u53d8\u6362\n\t\t\t\t\tint X = int(round(y + 32.5 - 0.5)), Y = int(round(x + 19 - 0.5));  //\u6700\u7ec8\u7684X, Y\u5750\u6807\n\t\t\t\t\tif (valid(X, Y))\n\t\t\t\t\t{\n\t\t\t\t\t\timgans[X][Y] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn balance(reducenoice(imgans));  //\u5bf9\u53d8\u6362\u540e\u7684\u56fe\u50cf\u964d\u566a\u540e\u518d\u6446\u6b63\u4f4d\u7f6e\n\t};\n\tfor (int i = 0; i < 16; i++)  //\u679a\u4e3e\u6bcf\u4e2a\u5b57\u7b26\n\t{\n\t\tfor (int j = 0; j < maxitertime; j++)  //\u5728\u53c2\u6570\u8303\u56f4\u5185\u968f\u673a\u751f\u6210\u81f3\u591amaxitertime\u5f20\u56fe\u50cf\uff0c\u8fd9\u91cc\u7684\u6570\u5b57\u4e3a75\n\t\t{\n\t\t\tdouble _M = M(gen), _Mx = M(gen), _My = M(gen), _R = R(gen), _Sx = S(gen), _Sy = S(gen);  //\u83b7\u53d6\u968f\u673a\u6570\n\t\t\trandomset[i][j] = trans(Signset[i], _M, _Mx, _My, _R, _Sx, _Sy);  //\u751f\u6210\u968f\u673a\u56fe\u50cf\n\t\t}\n\t}\n}\n```\n\n\u5bf9\u5355\u5b57\u7b26\u7684\u5339\u914d\u4e5f\u80fd\u987a\u4fbf\u5199\u51fa\u6765\u4e86\uff1a\n\n```cpp\nconst char* convtable = \"0123456789()+-*/\";  //\u5b57\u7b26\u8f6c\u6362\u8868\n\ndouble operator==(const Image& img1, const Image& img2)\n{\n\tint bx = img2.sx, by = img2.sy;\n\tdouble cnt = 0;\n\tfor (int i = 0; i < img1.sx; i++)\n\t{\n\t\tfor (int j = 0; j < img1.sy; j++)\n\t\t{\n\t\t\tcnt += (img2[i][j] == img1[i][j]) ? 1 : 0;\n\t\t}\n\t}\n\treturn (cnt / double(img1.sx * img1.sy));\n}\n\nchar recognize(const Image& img)\n{\n\tdouble rate = 0;\n\tint idx = -1;  \n\tImage imgtmp = balance(img);  //\u8c03\u6574img\u7684\u4f4d\u7f6e\n#ifdef debug\n\tcout << \"Balancing the input :\\n\" << imgtmp << endl;\n#endif // debug\n\n\tfor (int i = 0; i < maxitertime; i++)\n\t{\n\t\tfor (int j = 0; j < 16; j++)\n\t\t{\n\t\t\tdouble r = (imgtmp == randomset[j][i]);  //\u6bd4\u8f83\u76f8\u4f3c\u7a0b\u5ea6\n\t\t\tif (r > rate)  //\u5982\u679c\u5339\u914d\u5ea6\u6700\u5927\n\t\t\t{\n\t\t\t\trate = r;  //\u8bb0\u5f55\u5339\u914d\u5ea6\n\t\t\t\tidx = j;  //\u8bb0\u5f55\u7f16\u53f7\n\t\t\t}\n\t\t}\n\t}\n\treturn convtable[idx];  //\u8fd4\u56de\u5bf9\u5e94\u7684\u5b57\u7b26\n}\n```\n\n\u6700\u540e\uff0c\u4f4d\u4e8e\u4e3b\u51fd\u6570\u7684\u7684\u8ba1\u7b97\u90e8\u5206\u4e5f\u80fd\u5199\u51fa\u6765\u4e86\uff1a\n```cpp\nint main()\n{\n\tstring tmp1, tmp2;\n\tcin >> t >> n >> m;\n\tinit(t);  //\u6839\u636e\u6570\u636e\u7f16\u53f7\u521d\u59cb\u5316\n\twhile (cin >> tmp2)\n\t{\n\t\ttmp1 += tmp2 + ' ';\n\t}\n\ttest = Image(tmp1);  //\u4ece\u5b57\u7b26\u4e32\u6784\u9020\u56fe\u50cf\n\ttest = reducenoice(test);  //\u5bf9\u56fe\u50cf\u8fdb\u884c\u964d\u566a\n\t//cout << test << endl << endl;\n\ttest2 = split(test);  //\u5206\u79bb\u5355\u4e2a\u5b57\u7b26\n\ttmp2.clear();\n\tfor (const auto& i : test2)\n\t{\n\t\t//cout << i << endl << endl;\n\t\ttmp2 += recognize(i);  //\u5206\u522b\u5bf9\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u9010\u4e00\u8bc6\u522b\uff0c\u5e76\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\n\t}\n\tcout << calc(tmp2) << endl;  //\u6700\u540e\u8c03\u7528\u8ba1\u7b97\u51fd\u6570\uff0c\u5b8c\u6210\u8ba1\u7b97\uff08\u4e00\u5b9a\u8981\u52a0\u6362\u884c\u7b26\u554a\uff01\uff09\n}\n```\n~~\u8fd9\u9053\u9898\u5c31\u8fd9\u4e48\u7ed3\u675f\u4e86~~\n\ncode: (\u5176\u4e2d\u6709\u5f88\u591a\u6211\u5199\u4ee3\u7801\u65f6\u7528\u6765\u8c03\u8bd5\u7684\u65e0\u7528\u4ee3\u7801...\uff09\n```cpp\n#include <bits/stdc++.h>\n#pragma warning(disable : 4996)\n#define runmode 3\n//#define debug 1\nusing namespace std;\nconst double pi = 3.141592653589793;\nconst int maxitertime = 75;\n#define Range(x) (x).begin(), (x).end()\ntemplate <typename T>\nvoid chkmax(T& x, T y) { x = max(x, y); }\ntemplate <typename T>\nvoid chkmin(T& x, T y) { x = min(x, y); }\ndouble torad(double x) { return x / 180.0 * pi; }\nconst function<int(char)> conv1 = [](const char c) {return c == '.' ? 0 : 1; };\nconst function<char(int)> conv2 = [](const int c) {return c ? '#' : '.'; };\nconst char* convtable = \"0123456789()+-*/\";  //\u5b57\u7b26\u8f6c\u6362\u8868\n//ofstream out(\"data.out\");\n\nstruct Image\n{\n\tvector<vector<int>> raw;\n\tfunction<int(char)> conv1 = [](const char c) {return int(c); };\n\tfunction<char(int)> conv2 = [](const int c) {return char(c); };\n\tImage() = default;\n\tint sx, sy;\n\tImage(int sx, int sy, function<int(char)> c1 = ::conv1, function<char(int)> c2 = ::conv2) :sx(sx), sy(sy), conv1(c1), conv2(c2) {\n\t\traw.resize(sx);\n\t\tfill(Range(raw), vector<int>(sy));\n\t}\n\tauto& operator[](int x) { return raw[x]; }\n\tconst auto& operator[](int x) const { return raw[x]; }\n\t//\u4ece\u5b57\u7b26\u4e32\u6784\u9020\u56fe\u7247\n\tImage(const string& a, function<int(char)> c1 = ::conv1, function<char(int)> c2 = ::conv2) : conv1(c1), conv2(c2) {\n\t\tsx = sy = 0;\n\t\tstringstream s1;\n\t\tstring s2;\n\t\ts1 << a;\n\t\twhile (s1 >> s2) {\n\t\t\tvector<int> s3;\n\t\t\tfor (const auto i : s2) {\n\t\t\t\ts3.push_back(conv1(i));\n\t\t\t}\n\t\t\traw.push_back(s3);\n\t\t\tsx++;\n\t\t\tchkmax(sy, int(s3.size()));\n\t\t}\n\t}\n\tImage(const char* a, function<int(char)> c1 = ::conv1, function<char(int)> c2 = ::conv2) : conv1(c1), conv2(c2) {\n\t\tsx = sy = 0;\n\t\tstringstream s1;\n\t\tstring s2;\n\t\ts1 << a;\n\t\twhile (s1 >> s2) {\n\t\t\tvector<int> s3;\n\t\t\tfor (const auto i : s2) {\n\t\t\t\ts3.push_back(conv1(i));\n\t\t\t}\n\t\t\traw.push_back(s3);\n\t\t\tsx++;\n\t\t\tchkmax(sy, int(s3.size()));\n\t\t}\n\t}\n\tfriend int colorcount(const Image& img)\n\t{\n\t\tint cnt = 0;\n\t\tfor (const auto& i : img.raw)\n\t\t{\n\t\t\tfor (const auto& j : i)\n\t\t\t{\n\t\t\t\tcnt += j;\n\t\t\t}\n\t\t}\n\t\treturn cnt;\n\t}\n\tImage subImage(int sx, int sy, int ex, int ey) const\n\t{\n\t\tImage res(ex - sx + 1, ey - sy + 1);\n\t\tfor (int i = sx; i <= ex; i++)\n\t\t{\n\t\t\tfor (int j = sy; j <= ey; j++)\n\t\t\t{\n\t\t\t\tres[i - sx][j - sy] = raw[i][j];\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\ttuple<int, int, int, int> getminmaxrange() const\n\t{\n\t\tint minx = INT_MAX, maxx = 0, miny = INT_MAX, maxy = 0;\n\t\tfor (int i = 0; i < sx; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < sy; j++)\n\t\t\t{\n\t\t\t\tif (raw[i][j])\n\t\t\t\t{\n\t\t\t\t\tchkmax(maxx, i);\n\t\t\t\t\tchkmin(minx, i);\n\t\t\t\t\tchkmax(maxy, j);\n\t\t\t\t\tchkmin(miny, j);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn { minx, miny, maxx, maxy };\n\t}\n\tbitset<65 * 38> tobitset() const\n\t{\n\t\tbitset<65 * 38> res;\n\t\tassert(sx == 65 and sy == 38);\n\t\tfor (int i = 0; i < 65; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < 38; j++)\n\t\t\t{\n\t\t\t\tres[i * 38 + j] = raw[i][j];\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t}\n\tvoid resize(int nx, int ny){\n\t\tsx = nx, sy = ny;\n\t\traw.resize(ny);\n\t\tfor_each(Range(raw), [=](auto& i) { i.resize(nx); });\n\t}\n\tfriend ostream& operator<<(ostream& out, const Image& img) {\n\t\tfor (const auto& i : img.raw) {\n\t\t\tfor (const auto j : i)\n\t\t\t\tcout << img.conv2(j);\n\t\t\tcout << endl;\n\t\t}\n\t\treturn out;\n\t}\n};\n\n#pragma region data\nvector<Image> Signset{  //\u5404\u4e2a\u5b57\u7b26\u5bf9\u5e94\u7684\u56fe\u50cf\nR\"(\n...........########...........\n.........############.........\n.......################.......\n......##################......\n.....####################.....\n....######################....\n...########################...\n...##########....##########...\n..#########........#########..\n..########..........########..\n.#########..........#########.\n.########............########.\n.########............########.\n.########............########.\n########..............########\n########..............########\n########..............########\n########..............########\n########..............########\n########..............########\n########..............########\n########..............########\n########..............########\n########..............########\n########..............########\n.########............########.\n.########............########.\n.########............########.\n.#########..........#########.\n..########..........########..\n..#########........#########..\n...##########....##########...\n...########################...\n....######################....\n.....####################.....\n......##################......\n.......################.......\n.........############.........\n...........########...........\n)\",\nR\"(\n.............####..........\n...........#######.........\n........##########.........\n.....#############.........\n..################.........\n.#################.........\n.#################.........\n.#################.........\n.#################.........\n..######..########.........\n..###.....########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n..........########.........\n.##########################\n###########################\n###########################\n###########################\n###########################\n.##########################\n)\",\nR\"(\n.........#########..........\n......##############........\n...###################......\n..#####################.....\n.#######################....\n.#######################....\n.########################...\n.#########......#########...\n.#######.........#########..\n.#######..........########..\n.#######..........########..\n.#######..........########..\n.#######..........########..\n..######..........########..\n.................#########..\n.................########...\n................#########...\n...............##########...\n..............##########....\n.............###########....\n............###########.....\n...........###########......\n..........###########.......\n.........###########........\n........###########.........\n.......###########..........\n......###########.....#####.\n.....###########.....#######\n....###########......#######\n...###########.......#######\n..###########........#######\n.###########.........#######\n############################\n############################\n############################\n############################\n############################\n.###########################\n)\",\nR\"(\n.........##########.........\n.....################.......\n...####################.....\n..######################....\n..#######################...\n..########################..\n..########################..\n..########.......##########.\n..#######.........#########.\n..#######..........########.\n..#######..........########.\n...######..........########.\n...................########.\n...................########.\n..................########..\n.................#########..\n..........###############...\n.........###############....\n.........##############.....\n.........###############....\n.........################...\n..........################..\n.................##########.\n...................########.\n...................#########\n....................########\n....................########\n....................########\n....................########\n...................#########\n..###.............##########\n.########........##########.\n.##########################.\n.#########################..\n##########################..\n.########################...\n.######################.....\n....#################.......\n.......###########..........\n)\",\nR\"(\n.................#####........\n................#######.......\n...............########.......\n..............#########.......\n.............##########.......\n............###########.......\n............###########.......\n...........############.......\n..........#############.......\n.........##############.......\n........###############.......\n.......################.......\n.......########.#######.......\n......########..#######.......\n.....########...#######.......\n....########....#######.......\n...#########....#######.......\n...########.....#######.......\n..########......#######.......\n.########.......#######.......\n##############################\n##############################\n##############################\n##############################\n##############################\n##############################\n...............########.......\n...............########.......\n...............########.......\n...............########.......\n...............########.......\n...............########.......\n.........####################.\n........#####################.\n........#####################.\n........#####################.\n........#####################.\n.........####################.\n)\",\nR\"(\n...######################...\n...#######################..\n...#######################..\n...#######################..\n...#######################..\n...######################...\n...#######..................\n...#######..................\n...#######..................\n...#######..................\n...#######..................\n...#######..................\n..########..########........\n..####################......\n..######################....\n..#######################...\n..########################..\n..########################..\n..#########################.\n..########.......##########.\n.....##...........#########.\n...................#########\n....................########\n....................########\n....................########\n....................########\n....................########\n....................########\n...#...............#########\n..####............#########.\n.########.......###########.\n.##########################.\n.#########################..\n#########################...\n.#######################....\n..#####################.....\n....#################.......\n........##########..........\n)\",\nR\"(\n....................######...\n...............###########...\n............###############..\n..........#################..\n........###################..\n.......####################..\n......####################...\n.....################........\n....############.............\n...###########...............\n...#########.................\n..#########..................\n..########...................\n.########....................\n.########....................\n.#######....########.........\n.#######..#############......\n#########################....\n##########################...\n###########################..\n###########################..\n############......##########.\n##########.........#########.\n#########...........#########\n########.............########\n########.............########\n########.............########\n.#######.............########\n.#######.............########\n.########...........#########\n.#########.........#########.\n..##########.....###########.\n...#########################.\n...########################..\n....######################...\n.....####################....\n......##################.....\n........##############.......\n...........########..........\n)\",\nR\"(\n###########################.\n############################\n############################\n############################\n############################\n###########################.\n#######...........#########.\n#######...........#########.\n#######..........#########..\n#######..........#########..\n#######..........########...\n#######.........#########...\n#######.........########....\n#######........#########....\n.#####.........#########....\n...............########.....\n..............#########.....\n..............########......\n.............#########......\n.............########.......\n............#########.......\n............#########.......\n............########........\n...........#########........\n...........########.........\n..........#########.........\n..........########..........\n..........########..........\n.........########...........\n.........########...........\n........#########...........\n........########............\n........########............\n.......########.............\n.......########.............\n.......#######..............\n.......#######..............\n.........#####..............\n)\",\nR\"(\n..........#########.........\n........#############.......\n......#################.....\n.....###################....\n....#####################...\n...#######################..\n...#######################..\n...#########.....#########..\n..#########.......#########.\n..########.........########.\n..########.........########.\n..########.........########.\n..########.........########.\n..########.........########.\n...########.......########..\n...#########.....#########..\n....#####################...\n.....###################....\n......#################.....\n......#################.....\n....#####################...\n...#######################..\n..#########......##########.\n.########..........########.\n.########..........#########\n########............########\n########............########\n########............########\n########............########\n#########..........#########\n#########..........#########\n.##########......##########.\n.##########################.\n..########################..\n..########################..\n...######################...\n....####################....\n......################......\n.........##########.........\n)\",\nR\"(\n.........#########..........\n.......#############........\n.....#################......\n....###################.....\n...#####################....\n..#######################...\n.########################...\n.##########......#########..\n.#########........#########.\n#########..........########.\n########............#######.\n########............#######.\n########............########\n########............########\n########............########\n#########..........#########\n.########.........##########\n.##########......###########\n..##########################\n..##########################\n...#########################\n....########################\n......############..########\n........########....#######.\n....................#######.\n...................########.\n...................########.\n..................########..\n.................#########..\n...............##########...\n.............############...\n.........###############....\n....###################.....\n...###################......\n...##################.......\n...################.........\n...##############...........\n...############.............\n....######..................\n)\",\nR\"(\n...............####..\n..............######.\n............########.\n...........##########\n..........###########\n.........############\n........############.\n.......###########...\n......###########....\n.....###########.....\n.....##########......\n....##########.......\n....#########........\n...#########.........\n...########..........\n..#########..........\n..########...........\n.#########...........\n.########............\n.########............\n.########............\n#########............\n########.............\n########.............\n########.............\n########.............\n########.............\n########.............\n########.............\n########.............\n########.............\n########.............\n.########............\n.########............\n.########............\n.#########...........\n..########...........\n..#########..........\n..#########..........\n...#########.........\n...##########........\n....#########........\n.....#########.......\n.....##########......\n......###########....\n.......###########...\n........###########..\n.........############\n..........###########\n...........##########\n............#########\n.............#######.\n...............####..\n.................#...\n)\",\nR\"(\n..####...............\n.######..............\n#########............\n##########...........\n###########..........\n############.........\n.############........\n...###########.......\n....###########......\n.....##########......\n......##########.....\n.......##########....\n........#########....\n.........#########...\n..........########...\n..........#########..\n...........########..\n...........#########.\n............########.\n............########.\n............########.\n............#########\n.............########\n.............########\n.............########\n.............########\n.............########\n.............########\n.............########\n.............########\n.............########\n.............########\n............########.\n............########.\n............########.\n...........#########.\n...........########..\n..........#########..\n..........#########..\n.........#########...\n........##########...\n.......##########....\n.......#########.....\n.....###########.....\n....###########......\n...###########.......\n..###########........\n############.........\n###########..........\n##########...........\n#########............\n.#######.............\n..####...............\n...#.................\n)\",\nR\"(\n...........#####...........\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n###########################\n###########################\n###########################\n###########################\n###########################\n###########################\n###########################\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n..........#######..........\n...........#####...........\n)\",\nR\"(\n.##########################.\n############################\n############################\n############################\n############################\n############################\n.###########################\n)\",\nR\"(\n...........####...........\n..........######..........\n..........#######.........\n.........########.........\n.........########.........\n..........#######.........\n..........######..........\n.#####....######.....####.\n.######...######...#######\n#########..#####.#########\n###############.##########\n##########################\n##########################\n.########################.\n......##############......\n.........########.........\n........###########.......\n.......#############......\n.....########.#######.....\n....########..########....\n....########..#########...\n...########....########...\n...########....########...\n....#######.....#######...\n.....#####......######....\n......###.........##......\n)\",\nR\"(\n......................####..\n......................######\n.....................#######\n.....................#######\n....................########\n....................#######.\n...................########.\n...................#######..\n..................########..\n..................#######...\n.................########...\n.................#######....\n................########....\n................########....\n................#######.....\n...............########.....\n...............#######......\n..............########......\n..............#######.......\n.............########.......\n.............#######........\n............########........\n............#######.........\n...........########.........\n...........#######..........\n..........########..........\n..........#######...........\n..........#######...........\n.........########...........\n.........#######............\n........########............\n........#######.............\n.......########.............\n.......#######..............\n......########..............\n......#######...............\n.....########...............\n.....#######................\n....########................\n....#######.................\n...########.................\n...########.................\n...#######..................\n..########..................\n..#######...................\n.########...................\n.#######....................\n########....................\n#######.....................\n.######.....................\n..#####.....................\n)\",\n};\nint Signpos[16][2] = {  //\u5b57\u7b26\u5728\u539f\u6765\u5c3a\u5bf8\u4e0b\u7684\u5de6\u4e0a\u89d2\u7684\u4f4d\u7f6e\n\t{ 7, 4 },\n\t{ 7, 6 },\n\t{ 7, 5 },\n\t{ 7, 5 },\n\t{ 7, 4 },\n\t{ 8, 5 },\n\t{ 7, 5 },\n\t{ 8, 6 },\n\t{ 7, 5 },\n\t{ 7, 5 },\n\t{ 4, 8 },\n\t{ 4, 9 },\n\t{ 13, 6 },\n\t{ 23, 5 },\n\t{ 7, 6 },\n\t{ 3, 5 }\n};\nImage randomset[16][maxitertime];\n#pragma endregion This is the image data\n\nImage cover(const Image& img1, const Image& img2, int sx, int sy)\n{\n\tImage imgans(img1);\n\tfor (int i = max(0, -sx); i < min(img2.sx, img1.sx - sx); i++)\n\t{\n\t\tfor (int j = max(0, -sy); j < min(img2.sy, img1.sy - sy); j++)\n\t\t{\n\t\t\timgans[i + sx][j + sy] = img2[i][j];\n\t\t}\n\t}\n\treturn imgans;\n}\n\n//\u5bf9\u56fe\u7247\u8fdb\u884c\u964d\u566a\u5904\u7406\nImage reducenoice(const Image& img)\n{\n\tImage tmp(img);  //\u5bf9img\u8fdb\u884c\u590d\u5236\n\tauto valid = [&](int x, int y) {return x >= 0 and x < img.sx and y >= 0 and y < img.sy; };  //\u5224\u5b9a\u8bbf\u95ee\u662f\u5426\u8d8a\u754c\n\tint dx[] = { 0, 1, 1, 0, -1, -1, -1, 0, 1 };\n\tint dy[] = { 0, 0, 1, 1, 1, 0, -1, -1, -1 };   //\u521b\u5efa\u904d\u5386\u5217\u8868\n\tfor (int x = 0; x < img.sx; x++) {\n\t\tfor (int y = 0; y < img.sy; y++) {  //\u5bf9\u6bcf\u4e2ax, y\u8fdb\u884c\u5faa\u73af\n\t\t\tint cnt1 = 0, cnt2 = 0;  //cnt1\u4e3a\u5468\u56f41\u5708\u9ed1\u70b9\u6570\u91cf\uff0ccnt2\u4e3a\u5468\u56f41\u5708\u70b9\u7684\u6570\u91cf\n\t\t\tfor (int k = 0; k < 9; k++) {  //\u904d\u5386\u5468\u56f4\u7684\u70b9\n\t\t\t\tint nx = x + dx[k], ny = y + dy[k];\n\t\t\t\tif (valid(nx, ny))\n\t\t\t\t\tcnt2++, cnt1 += img[nx][ny];\n\t\t\t}\n\t\t\ttmp[x][y] = (cnt1 * 2 > cnt2);  //\u5224\u5b9a\u5468\u56f4\u9ed1\u70b9\u6570\u91cf\u662f\u5426\u6bd4\u767d\u70b9\u591a\uff0c\u82e5\u662f\u5219\u5c06\u6b64\u5904\u6d82\u9ed1\n\t\t}\n\t}\n\treturn tmp;\n}\n\nImage reducesize(const Image& img)\n{\n\tconst auto& rng = img.getminmaxrange();\n\tint minx, maxx, miny, maxy;\n\ttie(minx, maxx, miny, maxy) = rng;\n\treturn img.subImage(minx, maxx, miny, maxy);\n}\n\n//\u5c06\u5927\u4e8eminsize\u5927\u5c0f\u7684\u8054\u901a\u5757\u5206\u79bb\u51fa\u6765\nvector<Image> split(Image img, int minsize = 15)\n{\n\tvector<Image> res;\n\tqueue<pair<int, int>> q;  //\u5b58\u50a8\u8fde\u901a\u5757\u4e2d\u7684\u9ed1\u70b9\n\tint minx = INT_MAX, maxx = INT_MIN, miny = INT_MAX, maxy = INT_MIN;\n\tauto init = [&]() {minx = INT_MAX, maxx = INT_MIN, miny = INT_MAX, maxy = INT_MIN; };  //\u521d\u59cb\u5316\u53d8\u91cf\n\tauto valid = [&](int x, int y) { return x >= 0 and x < img.sx and y >= 0 and y < img.sy; };  //\u5224\u5b9a\u8bbf\u95ee\u662f\u5426\u8d8a\u754c\n\tauto bfs = [&](int x, int y) {  //\u5c06\u5f53\u524d\u8fde\u901a\u5757\u4e2d\u6240\u6709\u9ed1\u70b9\u5168\u90e8\u52a0\u5165\u5230\u961f\u5217q\u4e2d\n\t\tqueue<pair<int, int>> q1;\n\t\tint dx[] = { 0, 1, 0, -1 }, dy[] = { 1, 0, -1, 0 };\n\t\tq1.push({ x, y }); q.push(q1.back());\n\t\tchkmax(maxx, x), chkmax(maxy, y), chkmin(minx, x), chkmin(miny, y);\n\t\timg[x][y] = 0;\n\t\twhile (!q1.empty()) {\n\t\t\tauto h = q1.front();\n\t\t\tint x = h.first, y = h.second;\n\t\t\tq1.pop();\n\t\t\tfor (int i = 0; i < 4; i++) {\n\t\t\t\tint nx = x + dx[i], ny = y + dy[i];\n\t\t\t\tif (valid(nx, ny) and img[nx][ny]) {\n\t\t\t\t\tq1.push({ nx, ny }); q.push(q1.back());\n\t\t\t\t\timg[nx][ny] = 0;\n\t\t\t\t\tchkmax(maxx, nx), chkmax(maxy, ny), chkmin(minx, nx), chkmin(miny, ny);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\tfor (int j = 0; j < img.sy; j++) {\n\t\tfor (int i = 0; i < img.sx; i++) {  //\u904d\u5386\u6574\u5f20\u56fe\uff0c\u6ce8\u610f\u53d8\u91cf\u679a\u4e3e\u987a\u5e8f\n\t\t\tif (img[i][j]) {  //\u5982\u679c\u6b64\u5904\u5b58\u5728\u9ed1\u70b9\n\t\t\t\tinit();\n\t\t\t\tbfs(i, j);  //\u5f97\u5230\u4e0e\u5b83\u76f8\u8fde\u7684\u8fde\u901a\u5757\n\t\t\t\tif (q.size() >= minsize) {  //\u8fd9\u91cc\u7684\u5224\u65ad\u662f\u9632\u6b62\u6709\u4e9b\u566a\u70b9\u672a\u88ab\u5904\u7406\u5e72\u51c0\uff0c\u88ab\u5f53\u4e3a\u5355\u4e2a\u5b57\u7b26\u5206\u79bb\u51fa\u53bb\n\t\t\t\t\tImage tmpimg(maxx - minx + 1, maxy - miny + 1, img.conv1, img.conv2);  //\u4f9d\u636e\u5927\u5c0f\u6784\u5efa\u5b50\u56fe\n\t\t\t\t\twhile (!q.empty()) {\n\t\t\t\t\t\tauto p = q.front(); q.pop();\n\t\t\t\t\t\tint x = p.first, y = p.second;\n\t\t\t\t\t\ttmpimg[x - minx][y - miny] = 1;  //\u5c06\u961f\u5217\u91cc\u7684\u9ed1\u70b9\u653e\u5230\u5b50\u56fe\u7684\u76f8\u5e94\u4f4d\u7f6e\n\t\t\t\t\t}\n\t\t\t\t\tres.push_back(tmpimg);  //\u5c06\u5b50\u56fe\u653e\u5230\u5217\u8868\u91cc\u9762\n\t\t\t\t}\n\t\t\t\twhile (!q.empty()) q.pop();\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n\n//\u5bf9\u56fe\u50cf\u8fdb\u884c\u7ebf\u6027\u62c9\u4f38\u53d8\u6362\nImage resize(const Image& img, int nx, int ny)\n{\n\tImage res(nx, ny);\n\t/*vector<vector<double>> cnt;\n\tfor (int i = 1; i <= nx; i++)\n\t\tcnt.push_back(vector<double>(ny));*/\n\tauto valid = [=](int x, int y) { return x >= 0 and x < nx and y >= 0 and y < ny; };\n\tdouble cx = double(nx) / img.sx, cy = double(ny) / img.sy;\n\tif (cx < 1)\n\t{\n\t\tfor (int i = 0; i < img.sx; i++)\n\t\t{\n\t\t\tif (cy < 1)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < img.sy; j++)\n\t\t\t\t{\n\t\t\t\t\tif (img[i][j])\n\t\t\t\t\t\tres[int(i * cx)][int(j * cy)] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < ny; j++)\n\t\t\t\t{\n\t\t\t\t\tif (img[i][int(j / cy)])\n\t\t\t\t\t\tres[int(i * cx)][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse\n\t{\n\t\tfor (int i = 0; i < nx; i++)\n\t\t{\n\t\t\tif (cy < 1)\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < img.sy; j++)\n\t\t\t\t{\n\t\t\t\t\tif (img[int(i / cx)][j])\n\t\t\t\t\t\tres[i][int(j * cy)] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tfor (int j = 0; j < ny; j++)\n\t\t\t\t{\n\t\t\t\t\tif (img[int(i / cx)][int(j / cy)])\n\t\t\t\t\t\tres[i][j] = 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn res;\n}\n\n//\u5bf9\u56fe\u50cf\u8fdb\u884c\u65cb\u8f6c\u53d8\u6362\nImage rotate(const Image& img, double angle)\n{\n\tangle = angle / 180 * pi;\n\tdouble minx = 1e5, maxx = -1e5, miny = 1e5, maxy = -1e5;\n\tvector<pair<double, double>> points;\n\tauto singlerotate = [](pair<double, double> p, double angle)\n\t{\n\t\tdouble x = p.second, y = -p.first;\n\t\tdouble nx = x * cos(angle) - y * sin(angle), ny = x * sin(angle) + y * cos(angle);\n\t\treturn pair<double, double>({ -ny, nx });\n\t};\n\tfor (int i = 0; i < img.sx; i++)\n\t{\n\t\tfor (int j = 0; j < img.sy; j++)\n\t\t{\n\t\t\tif (img[i][j])\n\t\t\t{\n\t\t\t\tpoints.push_back({ i, j });\n\t\t\t\t\n\t\t\t}\n\t\t}\n\t}\n\tfor (auto& i : points)\n\t{\n\t\ti = singlerotate(i, angle);\n\t\tchkmax(maxx, i.first);\n\t\tchkmin(minx, i.first);\n\t\tchkmax(maxy, i.second);\n\t\tchkmin(miny, i.second);\n\t}\n\tImage res(int(maxx - minx + 1), int(maxy - miny + 1));\n\tfor (const auto& i : points)\n\t{\n\t\tint x = (i.first - minx), y = (i.second - miny);\n\t\tres[x][y] = 1;\n\t}\n\treturn res;\n\n}\n\ndouble operator==(const Image& img1, const Image& img2)\n{\n\tint bx = img2.sx, by = img2.sy;\n\tdouble cnt = 0;\n\tfor (int i = 0; i < img1.sx; i++)\n\t{\n\t\tfor (int j = 0; j < img1.sy; j++)\n\t\t{\n\t\t\tcnt += (img2[i][j] == img1[i][j]) ? 1 : 0;\n\t\t}\n\t}\n\treturn (cnt / double(img1.sx * img1.sy));\n}\n\n\nImage balance(const Image& img)\n{\n\tImage res(65, 38);\n\tint sumx = 0, sumy = 0, sumc = 0;\n\tfor (int i = 0; i < img.sx; i++)\n\t{\n\t\tfor (int j = 0; j < img.sy; j++)\n\t\t{\n\t\t\tif (img[i][j])\n\t\t\t{\n\t\t\t\tsumx += i, sumy += j, sumc++;\n\t\t\t}\n\t\t}\n\t}\n\tint cx = (2 * sumx + sumc) / (2 * sumc), cy = (2 * sumy + sumc) / (2 * sumc);  //\u786e\u5b9a\u4e2d\u5fc3\u4f4d\u7f6e\n\tint px = 32 - cx, py = 19 - cy;  //\u786e\u5b9a\u504f\u79fb\u91cf\n\tres = cover(res, img, px, py);  //\u8fdb\u884c\u5e73\u79fb\n\treturn res;\n}\nchar recognize(const Image& img)\n{\n\tdouble rate = 0;\n\tint idx = -1;  \n\tImage imgtmp = balance(img);  //\u8c03\u6574img\u7684\u4f4d\u7f6e\n#ifdef debug\n\tcout << \"Balancing the input :\\n\" << imgtmp << endl;\n#endif // debug\n\n\tfor (int i = 0; i < maxitertime; i++)\n\t{\n\t\tfor (int j = 0; j < 16; j++)\n\t\t{\n\t\t\tdouble r = (imgtmp == randomset[j][i]);  //\u6bd4\u8f83\u76f8\u4f3c\u7a0b\u5ea6\n\t\t\tif (r > rate)  //\u5982\u679c\u5339\u914d\u5ea6\u6700\u5927\n\t\t\t{\n\t\t\t\trate = r;  //\u8bb0\u5f55\u5339\u914d\u5ea6\n\t\t\t\tidx = j;  //\u8bb0\u5f55\u7f16\u53f7\n\t\t\t}\n\t\t}\n\t}\n\treturn convtable[idx];  //\u8fd4\u56de\u5bf9\u5e94\u7684\u5b57\u7b26\n}\nint t, n, m;\nImage test;\nvector<Image> test2, signset;\nint calc(const string& s)\n{\n\tvector<int> stk1;\n\tvector<char> stk2;\n\tint optnum = 0, isd = 0;\n\tauto cal = [&](char c)\n\t{\n\t\tint rhs = stk1.back();\n\t\tstk1.pop_back();\n\t\tint lhs = stk1.back();\n\t\tstk1.pop_back();\n\t\tswitch (c)\n\t\t{\n\t\tcase '+':\n\t\t\tstk1.push_back(lhs + rhs);\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tstk1.push_back(lhs - rhs);\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tstk1.push_back(lhs * rhs);\n\t\t\tbreak;\n\t\tcase '/':\n\t\t\tstk1.push_back(lhs / rhs);\n\t\t\tbreak;\n\t\t}\n\t};\n\tauto level = [](char c)\n\t{\n\t\tswitch (c)\n\t\t{\n\t\tcase '(':\n\t\t\treturn 0;\n\t\t\tbreak;\n\t\tcase '+':\n\t\tcase '-':\n\t\t\treturn 1;\n\t\t\tbreak;\n\t\tcase '*':\n\t\tcase '/':\n\t\t\treturn 2;\n\t\t\tbreak;\n\t\t}\n\t\treturn -1;\n\t};\n\tfor (const auto c : s)\n\t{\n\t\tif (c >= '0' and c <= '9')\n\t\t{\n\t\t\toptnum = 10 * optnum + (c - 48);\n\t\t\tisd = 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (isd)\n\t\t\t{\n\t\t\t\tstk1.push_back(optnum);\n\t\t\t\tisd = 0;\n\t\t\t\toptnum = 0;\n\t\t\t}\n\t\t\t\n\t\t\tif (stk2.empty())\n\t\t\t{\n\t\t\t\tstk2.push_back(c);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tswitch (c)\n\t\t\t\t{\n\t\t\t\tcase '(':\n\t\t\t\t\tstk2.push_back(c);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ')':\n\t\t\t\t\twhile (stk2.back() != '(')\n\t\t\t\t\t{\n\t\t\t\t\t\tcal(stk2.back());\n\t\t\t\t\t\tstk2.pop_back();\n\t\t\t\t\t}\n\t\t\t\t\tstk2.pop_back();\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\twhile (!stk2.empty() and level(c) <= level(stk2.back()))\n\t\t\t\t\t{\n\t\t\t\t\t\tcal(stk2.back());\n\t\t\t\t\t\tstk2.pop_back();\n\t\t\t\t\t}\n\t\t\t\t\tstk2.push_back(c);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (isdigit(s.back()))\n\t{\n\t\tstk1.push_back(optnum);\n\t}\n\twhile (!stk2.empty())\n\t{\n\t\tcal(stk2.back());\n\t\tstk2.pop_back();\n\t}\n\treturn stk1.back();\n}\n\nvoid init(int t)\n{\n\tfor (int i = 0; i < 16; i++)\n\t{\n\t\tSignset[i] = cover(Image(65, 38), Signset[i], Signpos[i][0], Signpos[i][1]);  //\u8fd9\u91cc\u6211\u4e3a\u4e86\u51cf\u5c11\u4ee3\u7801\u957f\u5ea6\uff0c\u53ea\u622a\u53d6\u4e86\u5404\u4e2a\u5b57\u7b26\u7684\u9ed1\u8272\u533a\u57df\uff0c\u4fdd\u5b58\u4e86\u5b83\u4eec\u7684\u5de6\u4e0a\u89d2\u5750\u6807\uff0c\u8fd9\u4e00\u6b65\u505a\u7684\u5c31\u662f\u8fd8\u539f\u4ed6\u4eec\u539f\u6765\u6240\u5728\u7684\u4f4d\u7f6e\n#ifdef debug\n\t\tcout << \"char \" << convtable[i] << \":\\n\" << Signset[i] << endl;\n#endif // debug\n\n\t}\n\tdouble Mmin = 0.9, Mmax = 1, Rmin, Rmax, Smin, Smax;\n\tif (0 <= t and t < 30)\n\t{\n\t\tRmin = -2, Rmax = 2, Smin = Smax = 0;\n\t}\n\telse if (30 <= t and t < 90)\n\t{\n\t\tRmin = -10, Rmax = 10, Smin = -0.1, Smax = 0.1;\n\t}\n\telse\n\t{\n\t\tRmin = -15, Rmax = 15, Smin = -0.1, Smax = 0.1;\n\t}\n\tuniform_real_distribution M(Mmin, Mmax), R(Rmin, Rmax), S(Smin, Smax);  //\u521d\u59cb\u5316\u968f\u673a\u6570\u751f\u6210\u5668\n\tdefault_random_engine gen(time(NULL));  //\u521d\u59cb\u5316\u968f\u673a\u6570\u751f\u6210\u5668\n\tauto trans = [&](const Image& img, double M, double Mx, double My, double R, double Sx, double Sy)\n\t{\n\t\tauto valid = [=](int x, int y) { return x >= 0 and x < 65 and y >= 0 and y < 38; };  //\u5224\u65ad\u662f\u5426\u8d8a\u754c\n\t\tImage imgans(65, 38);\n\t\tfor (int i = 0; i < 65; i++)\n\t\t{\n\t\t\tfor (int j = 0; j < 38; j++)\n\t\t\t{\n\t\t\t\tif (img[i][j])\n\t\t\t\t{\n\t\t\t\t\tdouble y = i + 0.5 - 32.5, x = j + 0.5 - 19;  //\u5148\u5bf9\u50cf\u7d20\u70b9\u8fdb\u884c\u5e73\u79fb\uff0c\u65b9\u4fbf\u540e\u9762\u7684\u65cb\u8f6c,\u626d\u66f2\u64cd\u4f5c\n\t\t\t\t\tx *= M * Mx, y *= M * My;  //\u8fdb\u884c\u6a2a\u5411/\u7eb5\u5411\u4f38\u7f29\u53d8\u6362\n\t\t\t\t\tdouble nx = x * cos(torad(R)) - y * sin(torad(R)), ny = x * sin(torad(R)) + y * cos(torad(R));  //\u8fdb\u884c\u65cb\u8f6c\u53d8\u6362\n\t\t\t\t\tx = nx + Sy * ny, y = ny + Sx * nx;  //\u8fdb\u884c\u626d\u66f2\u53d8\u6362\n\t\t\t\t\tint X = int(round(y + 32.5 - 0.5)), Y = int(round(x + 19 - 0.5));  //\u6700\u7ec8\u7684X, Y\u5750\u6807\n\t\t\t\t\tif (valid(X, Y))\n\t\t\t\t\t{\n\t\t\t\t\t\timgans[X][Y] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn balance(reducenoice(imgans));  //\u5bf9\u53d8\u6362\u540e\u7684\u56fe\u50cf\u964d\u566a\u540e\u518d\u6446\u6b63\u4f4d\u7f6e\n\t};\n\tfor (int i = 0; i < 16; i++)  //\u679a\u4e3e\u6bcf\u4e2a\u5b57\u7b26\n\t{\n#ifdef debug\n\t\tcout << \"Generating data from char \" << convtable[i] << \" :\\n\";\n#endif // debug\n\n\t\tfor (int j = 0; j < maxitertime; j++)  //\u5728\u53c2\u6570\u8303\u56f4\u5185\u968f\u673a\u751f\u6210\u81f3\u591amaxitertime\u5f20\u56fe\u50cf\uff0c\u8fd9\u91cc\u7684\u6570\u5b57\u4e3a75\n\t\t{\n\t\t\tdouble _M = M(gen), _Mx = M(gen), _My = M(gen), _R = R(gen), _Sx = S(gen), _Sy = S(gen);  //\u83b7\u53d6\u968f\u673a\u6570\n\t\t\trandomset[i][j] = trans(Signset[i], _M, _Mx, _My, _R, _Sx, _Sy);  //\u751f\u6210\u968f\u673a\u56fe\u50cf\n#ifdef debug\n\t\t\tcout << \"M = \" << _M << \", Mx = \" << _Mx << \", My = \" << _My << \", R = \" << _R << \", Sx = \" << _Sx << \", Sy = \" << _Sy << endl;\n\t\t\tcout << randomset[i][j] << endl << endl;\n#endif // debug\n\t\t}\n\t}\n}\n\nint main()\n{\n\n#if runmode == 1\n\tifstream in(\"font.txt\");\n\tfreopen(\"data.out\", \"w\", stdout);\n\tcout << \"vector<Image> Signset{\\n\";\n\tfor (int i = 0; i < 16; i++)\n\t{\n\t\tstring tmp, tmp2;\n\t\tfor (int j = 1; j <= 65; j++)\n\t\t{\n\t\t\tin >> tmp2;\n\t\t\ttmp += tmp2 + '\\n';\n\t\t}\n\t\tauto img = Image(tmp);\n\t\tsignset.push_back(reducesize(img));\n\t\tcout << \"R\\\"(\\n\" << reducesize(img) << \")\\\", \\n\";\n\t\ttie(Signpos[i][0], Signpos[i][1], ignore, ignore) = img.getminmaxrange();\n\t}\n\tcout << \"};\\n\";\n\tcout << \"int Signpos[16][2] = \\n{\\n\";\n\tfor (int i = 0; i < 16; i++)\n\t{\n\t\tcout << \"\t{ \" << Signpos[i][0] << \", \" << Signpos[i][1] << \" },\\n\";\n\t}\n\tcout << \"};\\n\";\n\n#endif\n\n#if runmode == 2\n#ifndef ONLINE_JUDGE\n\tfreopen(\"data.out\", \"w\", stdout);\n#endif\n\tinit(10);\n#endif\n\n#if runmode == 3\n#ifndef ONLINE_JUDGE\n\tfreopen(\"data.in\", \"r\", stdin);\n\tfreopen(\"data.out\", \"w\", stdout);\n#endif\n\tstring tmp1, tmp2;\n\tcin >> t >> n >> m;\n\tinit(t);  //\u6839\u636e\u6570\u636e\u7f16\u53f7\u521d\u59cb\u5316\n\twhile (cin >> tmp2)\n\t{\n\t\ttmp1 += tmp2 + ' ';\n\t}\n\ttest = Image(tmp1);  //\u4ece\u5b57\u7b26\u4e32\u6784\u9020\u56fe\u50cf\n\ttest = reducenoice(test);  //\u5bf9\u56fe\u50cf\u8fdb\u884c\u964d\u566a\n\t//cout << test << endl << endl;\n\ttest2 = split(test);  //\u5206\u79bb\u5355\u4e2a\u5b57\u7b26\n\ttmp2.clear();\n\tfor (const auto& i : test2)\n\t{\n\t\t//cout << i << endl << endl;\n\t\ttmp2 += recognize(i);  //\u5206\u522b\u5bf9\u5217\u8868\u4e2d\u7684\u5b57\u7b26\u9010\u4e00\u8bc6\u522b\uff0c\u5e76\u52a0\u5230\u5b57\u7b26\u4e32\u4e2d\n\t}\n\t\n#ifndef ONLINE_JUDGE\n\tcout << tmp2 << endl << calc(tmp2);\n#else\n\tcout << calc(tmp2) << endl;  //\u6700\u540e\u8c03\u7528\u8ba1\u7b97\u51fd\u6570\uff0c\u5b8c\u6210\u8ba1\u7b97\uff08\u4e00\u5b9a\u8981\u52a0\u6362\u884c\u7b26\u554a\uff01\uff09\n#endif\n#endif\n}\n\n```\n---\n\u540e\u8bb0\uff1a\n\n~~\u8fd9\u9053\u9898\u7684\u786e\u662f\u4e00\u9053\u975e\u5e38\u6709\u6311\u6218\u6027\u7684\u9898\u76ee~~\uff0c\u6211\u82b1\u8d39\u4e86\u5c06\u8fd1\u4e00\u5468\uff0c\u5c1d\u8bd5\u4e86\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u6700\u7ec8\uff0c\u5728\u6211\u4ee3\u7801\u81ea\u5e26\u7684\u5927\u5e38\u6570\u4e0b\uff0c\u4ee5\u6bcf\u70b9\u6700\u9ad8900ms\u7684\u901f\u5ea6\u901a\u8fc7\u4e86\u6b64\u9898\u3002\u611f\u8c22\u4e4b\u524d\u4e3a\u4e86A\u6389\u6b64\u9898\u800c\u4e0d\u65ad\u5c1d\u8bd5\u7684\u4eba\uff0c\u540c\u65f6\u611f\u8c22\u4e3a\u6211\u63d0\u4f9b\u4e86\u4e00\u5b9a\u601d\u8def\u7684 @UIKIt \u7684\u9898\u89e3\uff0c~~\u5c3d\u7ba1\u6211\u6309\u7167\u4ed6\u7684\u60f3\u6cd5\u6700\u7ec8\u53ea\u62ff\u4e86430pts~~\u3002\n\n\u8fd9\u4e00\u9898\u5728\u6d1b\u8c37\u4e0a\u6ca1\u6709\u4e00\u4efdC++\u4ee3\u7801\u8fc7\u9898\u7684\u5386\u53f2\uff0c\u7ec8\u4e8e\u7ed3\u675f\u4e86\u3002\n",
        "postTime": 1611240575,
        "uid": 152651,
        "name": "xiyihan",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 AT678"
    },
    {
        "content": "\n\u7b80\u8981\u9898\u610f\uff1a\n\n- \u7ed9\u4f60\u4e00\u4e2a01\u77e9\u9635\uff0c\u4ece\u4e2d\u8bc6\u522b\u51fa\u4e00\u4e2a\u8868\u8fbe\u5f0f\uff080~9\u3001+\u3001-\u3001*\u3001/\u3001(\u3001) )\u5e76\u6c42\u503c\n- \u5b57\u7b26\u6709\u65cb\u8f6c\n\n- \u6709\u968f\u673a\u566a\u70b9\n\n### 1.\u964d\u566a\n\u5982\u679c\u4e0d\u964d\u566a\u4f1a\u5f71\u54cd\u56fe\u7247\u7684\u8bc6\u522b\u6548\u679c\uff0c\u800c\u4e14\u6211\u4eec\u5f88\u5bb9\u6613\u53d1\u73b0\u566a\u70b9\u8fde\u6210\u4e00\u4e2a\u5f88\u5927\u7684\u8054\u901a\u5757\u57fa\u672c\u662f\u4e0d\u53ef\u80fd\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7 flood-fill \u6c42\u51fa\u6bcf\u4e00\u4e2a\u8054\u901a\u5757\uff0c\u5e76\u5220\u6389\u6240\u6709\u5927\u5c0f<100\u7684\u8054\u901a\u5757\u3002\n\n\u964d\u566a\u524d\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/qnwv2ulf.png)\n\n\u964d\u566a\u540e\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/er452yyj.png)\n\n\u4ee3\u7801\uff1a\n\n```cpp\nvoid get_num_and_clean(){\n    num=now=1;\n    memset(vis,0,sizeof(vis));\n    for(int j=1;j<=h;j++)\n    for(int k=0;k<w;k++){\n      if(a[j][k]=='#'&&vis[j][k]==0){\n        num=0;\n          maxy[now]=maxx[now]=0;\n          miny[now]=minx[now]=1e8;\n        dfs(j,k);\n        if(num>=100){\n          fnum[now]=num;\n          now++;\n        }\n        else{\n          num=0;\n          maxy[now]=maxx[now]=0;\n          miny[now]=minx[now]=1e8;\n          dfs(j,k,1);\n        }\n      }\n    }\n    now--;\n}//\u7edf\u8ba1\u5d4c\u5165\u5f0f\u6587\u672c\u6587\u4ef6\u4e2d\u20181\u2019\u50cf\u7d20\u7684\u4e2a\u6570\u5e76\u8fdb\u884c\u964d\u566a\n```\n\n### 2.\u5206\u79bb\u5b57\u7b26\n\u6211\u4eec\u7528\u4e0a\u4e00\u6b65\u88ab\u4fdd\u7559\u7684\u8054\u901a\u5757\uff0c\u6c42\u51fa\u5de6\u4e0a\u89d2\uff0c\u53f3\u4e0b\u89d2\uff0c\u5de6\u4e0b\u89d2\uff0c\u53f3\u4e0a\u89d2\u56db\u4e2a\u70b9\u7684\u5750\u6807\uff0c\u5c31\u628a\u5b57\u7b26\u5206\u79bb\u4e86\u51fa\u6765\u3002\n\n\u5206\u79bb\u6548\u679c\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/c9ufpdkc.png)\n\n\u4ee3\u7801\uff1a\n\n```cpp\nvoid dfs(int x,int y,int sz=0){\n  maxx[now]=max(maxx[now],x);\n  minx[now]=min(minx[now],x);\n  maxy[now]=max(maxy[now],y);\n  miny[now]=min(miny[now],y);\n  num++;\n  vis[x][y]=1;\n  if(sz){\n    a[x][y]='.';\n  }\n  for(int i=0;i<=7;i++){\n    int nx=x+mx[i],ny=y+my[i];\n    if(nx<1||ny<0||nx>h||ny>=w||a[nx][ny]!='#'||(vis[nx][ny]&&sz==0))continue;\n    dfs(nx,ny,sz);\n  }\n}//\uff08\u6211\u628a\u8fd9\u4e00\u6b65\u548c\u53bb\u9664\u566a\u70b9\u5199\u5728\u4e00\u8d77\u4e86\uff09\n```\n\n### 3.\u8bc6\u522b\u5b57\u7b26\n__\u8fd9\u662f\u672c\u6587\u7684\u91cd\u70b9\u3002__\n\n#### 3.1\u751f\u6210\u7279\u5f81\u77e9\u9635\n\n\u6211\u4eec\u628a\u6bcf\u4e00\u4e2a\u5b57\u7b26\u5206\u6210 5\\*5 \u4efd\u6c42\u51fa\u6bcf\u4e00\u4efd\u7684\u50cf\u7d20\u5bc6\u5ea6\uff0c\u4f5c\u4e3a\u7279\u5f81\u77e9\u9635\uff0c\u5bf9\u4e8e\u7ed9\u51fa\u7684\u6a21\u7248\u5b57\u7b26\uff0c\u505a\u540c\u6837\u7684\u64cd\u4f5c\u3002\n\n\u8fd9\u79cd\u7279\u5f81\u77e9\u9635\u7684\u597d\u5904\u662f\u4ec0\u4e48?\n\n- \u4e0d\u88ab\u653e\u7f29\u5f71\u54cd\n\n- \u53d7\u566a\u70b9\u5f71\u54cd\u5c0f\n\n\u574f\u5904\u5462\uff1f\n\n- \u53d7\u65cb\u8f6c\u5f71\u54cd\u5927\n\n\u6837\u4f8b\u751f\u6210\u7684\u7279\u5f81\u77e9\u9635\uff1a\n\n```\n0.314286 0.628571 0.885714 0.571429 0 \n0.4 0.371429 1 0.6 0 \n0 0 1 0.6 0 \n0 0 1 0.6 0 \n0.622222 0.666667 1 0.866667 0.666667 \n\uff083\uff09\n0.485714 0.857143 1 0.885714 0.265306 \n0.771429 0.657143 0 0.685714 0.693878 \n0 0 0.3125 0.95 0.464286 \n0.0285714 0.571429 0.97619 0.428571 0.387755 \n0.844444 1 0.833333 0.666667 1 \n\uff08*\uff09\n0.4 0.885714 1 0.942857 0.387755 \n0.35 0.525 0 0.5 0.839286 \n0 0.114286 0.857143 0.971429 0.530612 \n0 0 0 0.35 0.964286 \n0.644444 0.822222 0.777778 0.866667 0.555556 \n\uff083\uff09\n0 0 0.47619 0.97619 0 \n0 0.452381 0.928571 1 0 \n0.55 0.9375 0.458333 1 0.25 \n0.571429 0.571429 0.714286 1 0.571429 \n0 0.296296 0.777778 1 0.571429 \n\uff08-\uff09\n0.4 1 0.857143 0.857143 0.571429 \n0.457143 1 0.238095 0.257143 0.0204082 \n0.45 0.8 0.625 0.85 0.75 \n0.0285714 0 0 0.228571 1 \n0.622222 0.822222 0.777778 0.888889 0.507937 \n\uff084\uff09\n\n```\n\n\n\u4ee3\u7801\uff1a\n\n```cpp\nvoid prework4(){\n  for(int l=1;l<=now;l++){\n    double vv=double(maxy[l]-miny[l])/KUAN;\n    //cerr<<vv<<endl;\n    for(int j=1;j<=KUAN;j++){\n      Hs2[j]=miny[l]+vv*(j-1);\n    }\n    Hs2[KUAN+1]=maxy[l]+1;\n    vv=double(maxx[l]-minx[l])/KUAN;\n    //cerr<<vv<<endl;\n    for(int j=1;j<=KUAN;j++){\n      Ws2[j]=minx[l]+vv*(j-1);\n    }\n    Ws2[KUAN+1]=maxx[l]+1;\n  for(int i=1;i<=KUAN;i++)\n  for(int j=1;j<=KUAN;j++){\n    double aa=0,bb=0;\n    //cout<<i<<\" \"<<Ws[i]<<\" \"<<Ws[i+1]-1<<endl;\n    //cout<<j<<\" \"<<Hs[j]<<\" \"<<Hs[j+1]-1<<endl;\n    for(int ii=Ws2[i];ii<Ws2[i+1];ii++){\n      for(int jj=Hs2[j];jj<Hs2[j+1];jj++){\n        bb+=1;\n        aa+=(a[ii][jj]=='#');\n      }\n    }\n    Features2[l][i][j]=aa/bb;\n    if(isnan(Features2[l][i][j])){\n      Features2[l][i][j]=0;\n    }\n  }\n\n  }\n}\n```\n\n### 3.2\u5339\u914d\n\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u5b57\u7b26\uff0c\u6c42\u51fa\u5b83\u548c\u6240\u6709\u6a21\u7248\u5b57\u7b26\u76f8\u4f3c\u5ea6\u6700\u5927\u7684\u4e00\u4e2a\u5373\u53ef\u3002\n\n\u600e\u4e48\u6c42\u76f8\u4f3c\u5ea6\uff1f\n\n\u628a\u77e9\u9635\u53d8\u6210\u5411\u91cf\uff0c\u6c42\u5411\u91cf\u76f8\u4f3c\u5ea6\uff0c\u7ed9\u51fa\u4e24\u79cd\u65b9\u6cd5\uff1a\n\n- \u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff08\u8f83\u574f\uff09\n\n- \u4f59\u5f26\u76f8\u4f3c\u5ea6\uff08\u8f83\u597d\uff09\n\n\u4ee3\u7801(\u6211\u7528\u7684\u662f\u4f59\u5f26\u76f8\u4f3c\u5ea6\uff09\uff1a\n\n```cpp\nfor(int i=1;i<=now;i++){\n    double minn=0;\n    int id;\n    for(int j=0;j<=15;j++){\n      double sumarrayA=0,sumarrayB=0;\n      double cosine=0;\n      for(int ii=1;ii<=KUAN;ii++)\n      for(int jj=1;jj<=KUAN;jj++){\n        sumarrayA+=Features[j][ii][jj]*Features[j][ii][jj];\n        sumarrayB+=Features2[i][ii][jj]*Features2[i][ii][jj];\n        cosine+=Features2[i][ii][jj]*Features[j][ii][jj];\n      }\n      sumarrayA=sqrt(sumarrayA);\n    sumarrayB=sqrt(sumarrayB);\n    cosine/=(sumarrayA*sumarrayB);\n      cout<<i<<\" \"<<j<<\" \"<<cosine<<endl;\n      if(cosine>minn){\n        minn=cosine;\n        id=j;\n      }\n    }\n    ...\n```\n\u8fd9\u5c31\u7ed3\u675f\u4e86\uff1f\n\n#### 3.3\u5176\u4ed6\u6ce8\u610f\u4e8b\u9879\n\n\u4e0a\u8fb9\u7684\u4ee3\u7801\u53ea\u80fd\u5f97\u5230100\u5206\u5de6\u53f3\uff08\u6ee1\u5206500\u5206\uff09\n\n3.3.1:\u6211\u4eec\u53d1\u73b0\u4e0a\u8fb9\u7684\u4ee3\u7801\u53ef\u80fd\u628a\u8fd0\u7b97\u7b26\u8bc6\u522b\u6210\u6570\u5b57\uff0c\u4e8e\u662f\u6211\u4eec\u63d0\u9ad8\u77e9\u9635\u7cbe\u5ea6\u518d\u8dd1\u4e00\u6b21\uff085\\*5->7\\*7)\uff0c\u5982\u679c\u8bc6\u522b\u7ed3\u679c\u4e3a\u8fd0\u7b97\u7b26\uff0c\u5219\u4ee5\u8fd9\u6b21\u7684\u7ed3\u679c\u4e3a\u51c6\uff0c\u5426\u5219\u4ee5\u4e0a\u4e00\u6b21\u7684\u7ed3\u679c\u4e3a\u51c6\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n...\nint bfid=id;\n    minn=0;\n      for(int j=0;j<=15;j++){\n        double sumarrayA=0,sumarrayB=0;\n        double cosine=0;\n        for(int ii=1;ii<=KUAN2;ii++)\n        for(int jj=1;jj<=KUAN2;jj++){\n          sumarrayA+=Features3[j][ii][jj]*Features3[j][ii][jj];\n          sumarrayB+=Features4[i][ii][jj]*Features4[i][ii][jj];\n          cosine+=Features4[i][ii][jj]*Features3[j][ii][jj];\n        }\n        sumarrayA=sqrt(sumarrayA);\n        sumarrayB=sqrt(sumarrayB);\n        cosine/=(sumarrayA*sumarrayB);\n        if(cosine>minn){\n          minn=cosine;\n          id=j;\n        }\n      }\n\n\n    if(ch[id]=='+'||ch[id]=='-'||ch[id]=='*'||ch[id]=='/'){\n    fin_ans.push_back(ch[id]);\n\n    }\n    else\n    fin_ans.push_back(ch[bfid]);\n  }\n```\n\n3.3.2\uff08\u6211\u4e0d\u4f1a\uff09:\u628a\u6240\u6709\u5b57\u7b26\u624b\u52a8\u65cb\u8f6c\u4e3a\u6b63\u3002\n\n3.3.3:\u6211\u7684\u8fd9\u4efd\u4ee3\u7801\u6700\u540e\u4e5f\u6ca1\u6709AC\uff08\u56e0\u4e3a\u6211\u57283.1\u63d0\u5230\u8fc7\u7279\u5f81\u77e9\u9635\u7684\u7f3a\u70b9\uff09\uff08\u6211\u592a\u5f31\u4e86QwQ)\uff0c\u53ea\u80fd\u5f97\u5230221\u5206\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/hd6kvcmx.png)\n\n3.3.4:\u6e90\u4ee3\u7801\u4e0b\u8f7d\u5730\u5740 : [https://jxjjxy-my.sharepoint.com/:u:/g/personal/swift_t_odmail_cn/EaclKqmVZMBBuLacEuGqdQkBZw3nmHKp79v76yZ00fitgQ?e=gSMocs](https://jxjjxy-my.sharepoint.com/:u:/g/personal/swift_t_odmail_cn/EaclKqmVZMBBuLacEuGqdQkBZw3nmHKp79v76yZ00fitgQ?e=gSMocs)\n\n\n",
        "postTime": 1582944829,
        "uid": 183154,
        "name": "swiftc",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 AT678"
    },
    {
        "content": "## TL;DR\n\n\u672c\u9898\u53ef\u4ee5\u4ee5 $2953\\text{byte}$ \u5728 Linux \u4e0a\u901a\u8fc7\u6d4b\u8bd5\u3002\n\n\u672c\u9898\u53ef\u4ee5\u4ee5 $2871\\text{byte}$ \u5728 Windows \u4e0a\u901a\u8fc7\u6d4b\u8bd5\u3002\n\n## \u524d\u8a00\n\n**upd 2022/7/15:** \u4f18\u5316\u5230 7k \u4ee5\u4e0b\uff0c\u539f\u5148 9k\u3002\n\n**upd 2022/8/1:** \u4fee\u6b63\u4e86\u4e00\u4e9b\u9519\u8bef\uff0c\u4e4b\u524d\u7684\u4e0d\u8ba1\u6362\u884c\u7b26\u5e94\u4e3a\u6362\u884c\u7b26\u8bb0\u4e3a\u4e00\u4e2a\u5b57\u7b26\uff0c\u8bb0\u6362\u884c\u7b26\u5e94\u4e3a\u6362\u884c\u7b26\u8bb0\u4e24\u4e2a\u5b57\u7b26\uff1b\u589e\u52a0\u4e86\u65b0\u5185\u5bb9\u3002\n\n**upd 2022/8/2:** www\uff0c\u975e\u5e38\u62b1\u6b49\u98df\u8a00\u4e86\uff0c\u53d1\u51fa\u6765\u4e4b\u540e\u53d1\u73b0\u4e86\u4e00\u4e9b\u4e0d\u80fd\u5bb9\u5fcd\u7684\u9519\u8bef\u3002~~\u4ee5\u53ca\u9694\u4e86\u4e00\u5929\u4e4b\u540e\u6211\u53c8\u4e0d\u7d2f\u4e86\u3002~~\n\n**upd 2022/9/24:** \u8fdb\u5165 3.6k \u5927\u5173\u3002\n\n**upd 2022/10/27:** \u4fee\u590d\u4ee3\u7801\u9519\u8bef\uff0c\u8865\u6863\u4e00\u4e2a\u7279\u6027\u7684\u89e3\u91ca\u3002\n\n~~\u6211\u5bfb\u601d\u8fd9\u9898\u4e5f\u4e0d\u96be\u554a\uff0c\u6211\u624d\u4ea4\u4e86\u56db\u53d1\u641e\u5b9a\u4e00\u4e9b\u5f31\u667a\u9519\u8bef\u5c31\u6709 480 \u4e86\u3002~~\n\n**upd 2022/11/11:** \u7b54\u6848\u662f\u4f18\u5316\u4e4b\u540e\u7684\u4ee3\u7801\u53ea\u80fd\u5728 Windows \u7cfb\u7edf\u4e0a\u8dd1\u3002\n\n> 2022/11/11: \u7b54\u6848\u662f Western Windows-1252 \u7f16\u7801\uff0c\u6211\u7684\u8bc4\u4ef7\u662f\uff1a\u7b28\u6bd4 Linux \u7684\u6e38\u620f\u7406\u89e3\u5c31\u5230\u8fd9\u4e86\u597d\u5427\u3002\n\n**upd 2022/11/12:** $2881\\text{byte}$\uff0c\u6c38\u8fdc\u6c38\u8fdc\u7684\u7ed3\u675f\u4e86\u3002\n\n> 2022/11/12: \u603b\u4e4b\u6211\u662f\u9b54\u6014\u4e86\u3002\n\n---\n\n~~\u6211\u5bfb\u601d\u8fd9\u9898\u4e5f\u4e0d\u96be\u554a\uff0c\u6211\u624d\u4ea4\u4e86\u56db\u53d1\u641e\u5b9a\u4e00\u4e9b\u5f31\u667a\u9519\u8bef\u5c31\u6709 480 \u4e86\u3002~~\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9fvrewlu.png)\n\n~~\u8981 A \u6389\u4e0d\u5c31\u4ea4\u4e86 17 \u53d1\uff0c\u82b1\u4e86\u4e24\u4e2a\u665a\u4e0a\u4e00\u4e2a\u4e0b\u5348\u5927\u6982\u4e24\u4f4d\u6570\u5c0f\u65f6\u4e48\u3002~~\n\n> 2022/7/15\uff1a\u5443\u554a\u6211\u592a\u83dc\u4e86\uff0cA \u6389\u8fd9\u9898\u597d\u50cf\u6bd4\u8fc7\u8fd9\u9898\u7684\u9898\u89e3\u5ba1\u6838\u5bb9\u6613\u3002\n\n> 2022/8/1\uff1a\u6700\u7ec8\u505c\u5728\u4e86 4k \u7684\u95e8\u69db\u4e0a\u554a\uff0c\u7d2f\u4e86\u3002\n\n> 2022/8/2\uff1a\u8fdb\u5165\u4e86 4k \u5927\u5173\u3002\n\n> 2022/10/27: \u90a3\u5565\uff0c\u6211\u5b8c\u5168\u4e0d\u4f1a code golf\uff0c\u8fd9\u91cc\u53ea\u662f\u5199\u6765\u73a9\u4e00\u73a9\u7684\u3002\n\n## \u8bba\u5982\u4f55\u5728 23k \u4ee5\u5185\u8fc5\u901f\u5730\u89e3\u51b3\u6218\u6597\n\n\u9996\u5148\uff08\u4e00\u5f00\u59cb\uff09\u6211\u6ca1\u6709\u4f7f\u7528\u538b\u7f29\u6280\u672f\u628a\u56fe\u50cf\u538b\u7f29\u8fdb\u53bb\u3002\n\n\u5f53\u65f6\u5199\u7740\u5199\u7740\uff0c\u5f00\u59cb\u8c03\u4e86\uff0c\u7a81\u7136\u53d1\u73b0\u81ea\u5df1\u597d\u50cf\u53ef\u4ee5\uff08\u5728\u6d1b\u8c37\u4e0a\uff09\u6574\u4e2a\u6700\u77ed\u89e3\u3002\n\n### \u964d\u566a\u4e0e\u5206\u79bb\n\n\u9996\u5148\u56e0\u4e3a\u8fd9\u9898\u662f\u4e2a\u5927\u6a21\u62df\uff0c\u8003\u8651\u5c01\u88c5\u4e00\u4e2a `image` \u7c7b\u4fbf\u4e8e\u64cd\u4f5c\u56fe\u50cf\uff1a\n\n```c++\nstruct image{\n    int rx,ry;  // \u957f\u5bbd\u4fe1\u606f\n    vector<vector<bool>> raw,null,vis;\n    // raw \u8868\u793a\u56fe\u50cf\u4fe1\u606f\uff0cnull \u8868\u793a\u7a7a\u7684\u56fe\uff08\u7528\u4e8e\u7ed9 vis \u8d4b\u503c\uff09\uff0cvis \u662f\u5de5\u5177\u4eba\uff08\n\n    image(const char *s){  // \u4ece\u5b57\u7b26\u4e32\u6784\u9020\uff0c\u4ee5\u6362\u884c\u7b26\u4f5c\u4e3a\u5206\u9694\u7b26\n        int i=0;\n        raw.resize(1);\n        null.resize(1);\n        for(;*s!=0;++s)\n            if(*s=='\\n'){\n                if(raw[i].size()<raw[0].size()) break;\n                null[i].resize(raw[i].size());\n                raw.resize(++i+1);\n                null.resize(i+1);\n            }else\n                raw[i].push_back(*s=='#');\n        ry=raw[0].size();\n        if((int)raw.back().size()<ry){\n            raw.pop_back();\n            null.pop_back();\n        }\n        rx=raw.size();\n    }\n\n    image(int x,int y){  // \u7ed9\u5b9a\u957f\u5bbd\uff0c\u6784\u9020\u4e00\u4e2a\u7a7a\u56fe\u50cf\n        raw.resize(rx=x+1);\n        ry=y+1;\n        for(int i=0;i<=x;++i) raw[i].resize(y+1);\n        null=raw;\n    }   \n}\n```\n\n\u4f17\u6240\u5468\u77e5\u6211\u4eec\u5728\u5904\u7406\u4e8c\u7ef4\u56fe\u7684\u65f6\u5019\u7ecf\u5e38\u8981\u8981\u904d\u5386\u6574\u5f20\u56fe\uff0c\u6216\u8005\u5bf9\u4e00\u4e2a\u70b9\u53bb\u5bfb\u627e\u4e0e\u5b83\u8054\u901a\u7684\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u5bf9\u8fd9\u4e24\u79cd\u4e1c\u897f\u505a\u4e00\u4e2a\u5c01\u88c5\uff1a\n\n```c++\nstruct image{\n    // ......\n    template<class A,class B>\n    void expand(int x,int y,bool now,const A &check,const B &next){\n        // \u62d3\u5c55\u4e00\u4e2a\u70b9\u5468\u56f4\u7684\u70b9\n        for(int i=0;i<8;++i){\n            int nx=x+fx[i][0],ny=y+fx[i][1];\n            if(~nx&&~ny&&nx<rx&&ny<ry&&check(nx,ny)&&raw[nx][ny]==now)\n                next(nx,ny);\n        }\n    }\n    template<class T>\n    void foreach(const T &func){\n        // \u904d\u5386\u6574\u5f20\u56fe\n        for(int i=0;i<rx;++i)\n            for(int j=0;j<ry;++j)\n                func(i,j);  // \u5bf9\u6bcf\u4e2a\u70b9\u6267\u884c\u51fd\u6570\n    }\n}\n```\n\n> \u7136\u9e45\u540e\u6765\u53d1\u73b0 `expand` \u7528\u7684\u592a\u5c11\u4e86\uff0c\u6211\u7ed9\u5b83\u4f18\u5316\u6389\u4e86\u3002\n\n\u5177\u4f53\u7528\u6cd5\uff0c\u6bd4\u5982\u6211\u4eec\u8981\u964d\u566a\uff0c\u4f7f\u7528\u4f17\u6570\u6ee4\u6ce2\u5668\uff0c\u8981\u7edf\u8ba1\u5468\u56f4\u7684\u5408\u6cd5\u7684\u70b9\u6570\u4ee5\u53ca\u9ed1\u70b9\u7684\u6570\u91cf\uff0c\u5c31\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a\n\n```c++\nstruct image{\n    // ......\n    image &reno(){\n        vis=null;  // null \u662f\u5728\u521d\u59cb\u5316\u65f6\u521b\u5efa\u597d\u7684\u4e00\u4e2a\u7a7a\u4e8c\u7ef4 vector\uff0c\u8fd9\u53e5\u8bdd\u7b49\u540c\u4e8e\u6e05\u7a7a\n        foreach([&](int i,int j){\n            int all=1,bk=raw[i][j];\n            expand(i,j,1,\n                   [&](int x,int y){\n                       ++all;\n                       // \u8fd9\u662f check\uff0c\u8fd9\u5c31\u662f\u4e3a\u4ec0\u4e48 check \u7684\u5224\u65ad\u653e\u5728\u4e86\u5224\u65ad\u989c\u8272\u8fde\u901a\u6027\u4e4b\u524d\n                       return(1);\n                   },\n                   [&](int x,int y){\n                       ++bk;\n                       // \u8fd9\u662f next\uff0c\u7531\u4e8e\u5224\u65ad\u4e86\u989c\u8272\u4e3a 1\uff0c\u76f4\u63a5\u52a0\u5373\u53ef\u3002\n                   });\n            raw[i][j]=bk<<1>all;\n        });\n        return(*this);\n    }\n}\n```\n\n> \u4f17\u6570\u6ee4\u6ce2\uff0c\u5373\u5bf9\u6bcf\u4e2a\u70b9\u8ba1\u7b97\uff08\u5305\u542b\u81ea\u8eab\u7684\uff09\u5468\u56f4\u7684\u70b9\u7684\u60c5\u51b5\uff0c\u9009\u53d6\u6700\u591a\u7684\u989c\u8272\u8fdb\u884c\u7740\u8272\u3002\n>\n> \u4e0d\u8fc7\u8fd9\u91cc\u5176\u5b9e\u53ef\u4ee5\u4e0d\u7edf\u8ba1\u56db\u5468\u5408\u6cd5\u70b9\u7684\u6570\u91cf\uff0c\u63a5\u89e6\u8fb9\u7f18\u7684\u70b9\u6211\u4eec\u53ef\u4ee5\u76f4\u63a5\u5f53\u4f5c\u566a\u97f3\u3002\n\n\u518d\u6bd4\u5982\uff0c\u6211\u4eec\u8c03\u8bd5\u8981\u8f93\u51fa\u6574\u5f20\u56fe\u50cf\uff0c\u5c31\u53ef\u4ee5\u8fd9\u4e48\u5199\uff1a\n\n```c++\nstruct image{\n    // ......\n    void print(){\n        foreach([&](int x,int y){\n            putchar(raw[x][y]?'#':' ');\n            if(y==ry-1) puts(\"\");});\n    }\n}\n```\n\n>\u8fd9\u4e2a `print` \u592a\u597d\u4f7f\u4e86\uff0c\u6ca1\u6709\u5b83\u6839\u672c\u6ca1\u6cd5\u8c03\u8bd5\u3002\n>\n>\u6307\u5199\u51fa\u4e86 `charset[i].rotate(j).cut(-.1,-.1).reno().print()` \u7684\u9b54\u6014\u4eba\u3002\n\n\u7136\u540e\u63a5\u4e0b\u6765\uff0c\u7531\u4e8e\u6211\u4eec\u5bf9\u56fe\u50cf\u505a\u64cd\u4f5c\uff0c\u4ee5\u53ca\u5206\u79bb\u7684\u65f6\u5019\u9700\u8981\u6846\u51fa\u56fe\u50cf\u7684\u56db\u8fb9\uff0c\u6240\u4ee5\u6211\u4eec\u518d\u5c01\u88c5\u4e00\u4e2a\u7c7b\uff1a\n\n```c++\nstruct sqr{\n    int x0,x1,y0,y1;\n    void operator+=(const sqr &b){\n        x0=min(x0,b.x0);x1=max(x1,b.x1);\n        y0=min(y0,b.y0);y1=max(y1,b.y1);\n    }\n    void operator+=(pair<int,int> b){\n        x0=min(x0,b.first);x1=max(x1,b.first);\n        y0=min(y0,b.second);y1=max(y1,b.second);\n    }\n};\n```\n\n\u5206\u79bb\u5927\u6982\u957f\u8fd9\u6837\uff1a\n\n```c++\nstruct image{\n    // ......\n    sqr find(int x,int y){  // \u904d\u5386\u6574\u4e2a\u8fde\u901a\u5757\uff0c\u8fd4\u56de\u56fe\u50cf\u56db\u5468\u7684\u5750\u6807\n        sqr re={x,x,y,y};\n        vis[x][y]=1;\n        expand(x,y,raw[x][y],\n               [&](int x,int y){return(!vis[x][y]);},\n               [&](int x,int y){re+=find(x,y);});\n        return(re);\n    }\n    image get(int x,int y){  // \u5c06\u8fde\u901a\u5757\u6240\u5360\u636e\u7684\u77e9\u5f62\u590d\u5236\u6210\u65b0\u7684\u56fe\u50cf\n        sqr out=find(x,y);\n        image re(out.x1-out.x0,out.y1-out.y0);\n        for(int i=out.x0;i<=out.x1;++i)\n            for(int j=out.y0;j<=out.y1;++j)\n                re[i-out.x0][j-out.y0]=raw[i][j];\n        return(re);\n    }\n    vector<image> split(){\n        vector<image> re;\n        vis=null;\n        for(int i=0;i<ry;++i)\n            for(int j=0;j<rx;++j)\n                if(raw[j][i]&&!vis[j][i]){\n                    re.emplace_back(get(j,i));\n                    if(re.back().rx*re.back().ry<80)\n                        re.pop_back();\n                    // \u5224\u65ad\u5757\u5927\u5c0f\uff0c\u592a\u5c0f\u7684\u76f4\u63a5\u653e\u5f03\uff0c\u9632\u6b62\u964d\u566a\u4e0d\u5145\u5206\uff08\u771f\u7684\u4f1a\u53d1\u751f\u7684\uff09\n                }\n        return(re);\n    }\n}\n```\n\n\u7136\u540e\u6211\u4eec\u5c31\u5f97\u5230\u4e00\u4e2a\u7531 `image` \u7ec4\u6210\u7684 `vector`\uff0c\u4e0b\u4e00\u6b65\u53ef\u4ee5\u5f00\u59cb\u5339\u914d\u4e86\u3002\n\n\u4e0d\u8fc7\u5728\u6b64\u4e4b\u524d\u2026\u2026\n\n### \u53d8\u6362\u4e0e\u9884\u5904\u7406\n\n\u9996\u5148\u6211\u4eec\u5148\u628a\u57fa\u7840\u5b57\u4f53\u585e\u8fdb\u4e00\u4e2a `vector<image>` \u91cc\u9762\uff0c\u4f7f\u7528 C++11 \u7684\u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\uff0c\u5927\u6982\u50cf\u8fd9\u6837\uff1a\n\n```c++\nvector<image> charset({R\"(.#.\n#.#\n#.#\n#.#\n.#.\n)\",R\"(##.\n.#.\n.#.\n.#.\n###)\",R\"(###\n..#\n###\n#..\n###)\",R\"(\u4ee5\u4e0b\n\u7701\u7565)\"});\n```\n\n\u4f17\u6240\u5468\u77e5\u53ea\u6709\u57fa\u7840\u5b57\u4f53\u7684\u56fe\u50cf\uff08\u4ee5\u4e0b\u79f0\u201c\u672c\u6e90\u56fe\u50cf\u201d\uff09\uff0c\u6211\u4eec\u662f\u4e0d\u53ef\u80fd A \u6389\u8fd9\u9053\u9898\u7684\u3002\n\n\u7531\u4e8e\u9898\u76ee\u7ed9\u51fa\u7684\u56fe\u50cf\u5df2\u7ecf\u53d8\u6362\u7684\u5f88\u5389\u5bb3\u4e86\uff0c\u6240\u4ee5\u8bd5\u56fe\u5bf9\u8fd9\u4e9b\u56fe\u50cf\u505a\u9006\u53d8\u6362\u53ef\u80fd\u4e0d\u662f\u4e2a\u597d\u4e3b\u610f\u3002\u6240\u4ee5\u6211\u4eec\u8981\u5bf9\u672c\u6e90\u56fe\u50cf\u505a\u4ebf\u4e9b\u53d8\u6362\uff0c\u4f7f\u5f97\u5b83\u4eec\u66f4\u52a0\u50cf\u9898\u76ee\u4e2d\u7ed9\u5b9a\u7684\u56fe\u50cf\u3002\n\n\u7136\u540e\u770b\u5230\u9898\u76ee\u4e2d\u7ed9\u51fa\u4e86\u53d8\u6362\u987a\u5e8f\uff1a\n\n1. \u6574\u4f53\u7f29\u5c0f\u3002\n2. \u5bf9 $x$ \u65b9\u5411\u4e0e $y$ \u65b9\u5411\u5206\u522b\u7f29\u5c0f\uff08\u6539\u53d8\u6bd4\u4f8b\uff09\u3002\n3. \u65cb\u8f6c $[-15,15]$ \u5ea6\u3002\n4. \u526a\u5207\u53d8\u6362\u3002~~\u5176\u5b9e\u6700\u5f00\u59cb\u6211\u6ca1\u770b\u5230\u8fd9\u4e2a\u53d8\u6362\u6240\u4ee5\u53ea\u62ff\u4e86 480 \u5206\uff0c\u770b\u5230\u4e4b\u540e\u5c31\u6709 490 \u4e86\u3002~~\n\n\u6240\u4ee5\u6211\u4eec\u7684\u56fe\u50cf\u4e5f\u8981\u6309\u987a\u5e8f\u53d8\u6362\uff0c\u5148\u8fdb\u884c\u65cb\u8f6c\u3002\n\n> \u8fd9\u4e2a\u95ee\u9898\u662f\u8fd9\u6837\u7684\uff0c\u56e0\u4e3a\u7f29\u653e\u7684\u53c2\u6570\u9884\u5148\u731c\u6d4b\u6548\u679c\u5e76\u4e0d\u597d\uff0c\u4f46\u662f\u5982\u679c\u5176\u4ed6\u53d8\u6362\u90fd\u505a\u5b8c\u4e86\uff0c\u7f29\u653e\u7684\u53c2\u6570\u5176\u5b9e\u53ef\u4ee5\u901a\u8fc7\u56fe\u50cf\u4fe1\u606f\u5f97\u51fa\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u59a8\u5230\u4e86\u8981\u5339\u914d\u7684\u65f6\u5019\u518d\u8fdb\u884c\u7f29\u653e\u3002\n\n\u65cb\u8f6c\u6309\u7167\u516c\u5f0f\u5199\u5373\u53ef\uff1a\n\n```c++\nstruct image{\n    // ......\n    image rotate(db ang){\n        vector<pair<int,int>> point;\n        sqr out={INF,-INF,INF,-INF};\n        // \u521b\u5efa\u4e00\u4e2a\u9ed1\u70b9\u96c6\u5408\uff0c\u4ee5\u53ca\u8bb0\u5f55\u96c6\u5408\u7684\u56db\u8fb9\n\n        ang=ang/180*pi;\n        db csa=cos(ang),sia=sin(ang),cex=rx/2.,cey=ry/2.;\n\n        foreach([&](int x,int y){\n            if(!raw[x][y]) return;\n            db nx=(x-cex)*csa+(y-cey)*sia,ny=-(x-cex)*sia+(y-cey)*csa;\n            // \u6309\u7167\u516c\u5f0f\u53d8\u6362\n            point.emplace_back(nx+cex,ny+cey);\n            out+=make_pair(nx+cex,ny+cey);});\n\n        image re(out.x1-out.x0,out.y1-out.y0);\n        for(auto i:point)\n            re[i.first-out.x0][i.second-out.y0]=1;\n        // \u5c06\u9ed1\u70b9\u96c6\u5408\u653e\u5165\u56fe\u50cf\n        return(re);\n    }\n}\n```\n\n\u7136\u540e\u662f\u526a\u5207\u53d8\u6362\uff1a\n\n```c++\nstruct image{\n    // ......\n    image cut(db cx,db cy){\n        vector<pair<int,int>> point;\n        sqr out={INF,-INF,INF,-INF};\n        // \u521b\u5efa\u4e00\u4e2a\u9ed1\u70b9\u96c6\u5408\uff0c\u4ee5\u53ca\u8bb0\u5f55\u96c6\u5408\u7684\u56db\u8fb9\n\n        foreach([&](int x,int y){\n            if(!raw[x][y]) return;\n            db nx=x+y*cy,ny=y+x*cx;  // \u6309\u7167\u516c\u5f0f\u53d8\u6362\n            point.emplace_back(nx,ny);\n            out+=make_pair(nx,ny);});\n\n        image re(out.x1-out.x0,out.y1-out.y0);\n        for(auto i:point)\n            re[i.first-out.x0][i.second-out.y0]=1;\n        // \u5c06\u9ed1\u70b9\u96c6\u5408\u653e\u5165\u56fe\u50cf\n        return(re);\n    }\n}\n```\n\n\u5c01\u88c5\u7684\u6536\u76ca\u8fd9\u4e2a\u65f6\u5019\u5c31\u4f53\u73b0\u51fa\u6765\u4e86\u3002\n\n\u6700\u540e\u662f\u7f29\u5c0f\u64cd\u4f5c\uff08\u5f3a\u8c03\u7f29\u5c0f\u662f\u56e0\u4e3a\u653e\u5927\u9700\u8981\u989d\u5916\u589e\u52a0\u9ed1\u70b9\uff0c\u6bd4\u8f83\u96be\u5904\u7406\uff0c\u6211\u5199\u7684\u8fd9\u4e2a\u6bd4\u8f83\u7b80\u5355\uff0c\u53ea\u80fd\u7f29\u5c0f\uff09\uff1a\n\n```c++\nstruct image{\n    // .....\n    image fit(int rxt,int ryt){  // \u8fd9\u91cc\u4f20\u5165\u7684\u662f\u76ee\u6807\u7684\u56fe\u50cf\u5927\u5c0f\n        image re(rxt,ryt);\n        db delx=(db)rxt/rx,dely=(db)ryt/ry;  // \u8ba1\u7b97\u7f29\u5c0f\u6bd4\u4f8b\n\n        foreach([&](int x,int y){\n            if(raw[x][y]) re[x=x*delx][y=y*dely]=1;});\n\n        return(re);\n    }\n}\n```\n\n\u7136\u540e\u5728\u9884\u5904\u7406\u4e2d\u641e\u51fa\u82e5\u5e72\u5f20\u56fe\u50cf\u6765\uff0c\u65b9\u4fbf\u5904\u7406\u3002\u6211\u6ca1\u6709\u4f7f\u7528\u968f\u673a\uff0c\u800c\u662f\u76f4\u63a5\u6309\u7167\u4e00\u5b9a\u5206\u5ea6\u503c\u679a\u4e3e\u53c2\u6570\u3002\n\n```c++\nvoid init(){\n    for(int i=0;i<16;++i)  // \u679a\u4e3e\u5b57\u7b26\n        for(db j=-15;j<16;j+=3){  // \u679a\u4e3e\u65cb\u8f6c\u89d2\n            auto tmp=charset[i].rotate(j);\n            trans[i].emplace_back(tmp.cut(-.1,-.1).reno());\n            trans[i].emplace_back(tmp.cut(-.1,.1).reno());\n            trans[i].emplace_back(tmp.cut(.1,-.1).reno());\n            trans[i].emplace_back(tmp.cut(.1,.1).reno());\n            // \u6211\u4eec\u53ea\u5bf9\u56db\u89d2\u7684\u6700\u6781\u7aef\u7684\u56db\u79cd\u526a\u5207\u505a\u9884\u5904\u7406\uff0c\u4e8b\u5b9e\u8bc1\u660e\u8fd9\u662f\u8db3\u591f\u7684\n            trans[i].emplace_back(tmp.reno());\n        }\n}\n```\n\n\u8fd9\u91cc\u4f7f\u7528\u964d\u566a\u662f\u56e0\u4e3a\u53d8\u6362\u5bb9\u6613\u641e\u51fa\u4e2d\u5fc3\u7a7a\u70b9\u3002\n\n### \u5339\u914d\u4e0e\u8ba1\u7b97\n\n~~\u4e5f\u5c31\u662f\u4e3b\u51fd\u6570\uff01~~\n\n\u6211\u4eec\u4f7f\u7528\u66b4\u529b\u5339\u914d\u6cd5\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u8fdb\u884c\u5339\u914d\uff0c\u6700\u540e\u901a\u8fc7\u5339\u914d\u7684\u6570\u91cf\u9664\u4ee5\u603b\u7684\u6570\u91cf\u5f97\u5230\u5339\u914d\u7387\u3002\n\n```c++\nstruct image{\n    // ......\n    db match(image &x){\n        if(min(abs((db)ry/rx-(db)x.ry/x.rx),abs((db)rx/ry-(db)x.rx/x.ry))>0.25) \n            return(0);\n        // \u5bf9\u4e8e\u957f\u5bbd\u6bd4\u76f8\u5dee\u8fc7\u5927\u7684\u76f4\u63a5\u653e\u5f03\uff0c\u5426\u5219\u5728\u8fdb\u884c\u5267\u70c8\u7f29\u5c0f\u7684\u65f6\u5019\u4f1a\u4e22\u5931\u5927\u91cf\u7684\u4fe1\u606f\u5bfc\u81f4\u8bef\u5224\n        int re=0,mix=min(rx,x.rx)-1,miy=min(ry,x.ry)-1;\n        // \u8fd9\u91cc\u6211\u4eec\u5c06\u4e24\u5f20\u56fe\u50cf\u90fd\u8fdb\u884c\u7f29\u5c0f\uff0c\u6309\u7167\u4e24\u4e2a\u7ef4\u5ea6\u7f29\u5c0f\u5230\u6700\u5c0f\u7684\u5927\u5c0f\uff0c\u56e0\u4e3a\u5e76\u4e0d\u80fd\u653e\u5927\n        // fit \u6ca1\u5199\u597d\uff0c\u6240\u4ee5\u6211\u8981\u51cf\u4e00\n        auto a=this->fit(mix,miy),b=x.fit(mix,miy);\n\n        a.foreach([&](int x,int y){re+=a[x][y]==b[x][y];});\n\n        return((db)re/(a.rx*a.ry));  // \u8fd4\u56de\u4f7f\u7528\u6bd4\u4f8b\uff0c\u56e0\u4e3a\u6bcf\u6b21\u5339\u914d\u7684\u5927\u5c0f\u662f\u4e0d\u5b9a\u7684\n    }\n}\n```\n\n\u90a3\u4e48\u7ecf\u8fc7\u4e86\u5927\u91cf\u7684\u5c01\u88c5\uff0c\u4e3b\u51fd\u6570\u53ea\u9700\u8981\u8c03\u7528\u5373\u53ef\uff1a\n\n```c++\nint main(){\n    init();\n    fread(BuF,1,FSIZE,stdin);\n\n    read(t);read(n);read(m);\n\n    for(;*InF<33;++InF);\n    image in(InF);\n\n    for(auto &i:in.reno().split()){\n        db bestmatch=0,tmp;\n        int bestnum=0;\n        for(int j=0;j<16;++j){\n            tmp=i.match(charset[j]);\n            if(tmp>0&&tmp<.5) continue;\n            // \u5148\u5bf9\u672c\u6e90\u56fe\u505a\u4e00\u6b21\u5339\u914d\uff0c\u5982\u679c\u5339\u914d\u7387\u592a\u4f4e\u76f4\u63a5\u653e\u5f03\n\n            for(auto &k:trans[j])\n                if((tmp=i.match(k))>bestmatch){\n                    bestmatch=tmp;\n                    bestnum=j;\n                }\n        }\n        ans+=charname[bestnum];\n    }\n    printf(\"%d\\n\",calc(ans));\n}\n```\n\n\u8ba1\u7b97\u6211\u662f\u76f4\u63a5 copy \u7684\uff0c\u5927\u5bb6\u53ef\u4ee5\u53bb\u770b\u5176\u4ed6\u7684\u9898\u89e3\uff08\u96fe\uff09\u3002\n\n### \u6700\u540e\u4e00\u6b65\n\n~~Final Step!~~\n\n\u628a\u6240\u6709\u7684\u7a7a\u683c\u7f29\u8fdb\u6362\u6210 `Tab` \uff08\u96fe\uff09\u3002\n\n### \u540e\u8bb0\n\n\u8fd9\u9053\u9898\u6211\u5b9e\u9645\u5199\u8d77\u6765\u6bd4\u60f3\u7684\u5bb9\u6613\u5f88\u591a\uff08\uff1f\n\n\u4e00\u5f00\u59cb\u751a\u81f3\u6ca1\u6709\u770b\u5230\u526a\u5207\u64cd\u4f5c\u5c31\u62ff\u5230\u4e86 480pts\u3002\n\n\u8fd9\u4e5f\u8bc1\u660e\u4e86\u8003\u573a\u4e0a\u6253\u8fd9\u4e2a\u505a\u6cd5\u662f\u975e\u5e38\u4e0d\u9519\u7684\uff0c\u56e0\u4e3a\u597d\u5199\u53c8\u597d\u62ff\u5206\uff08\uff1f\n\n\u611f\u8c22 [**@xiyihan**](https://www.luogu.com.cn/user/152651) \u63d0\u4f9b\u7684\u5b57\u7b26\u8868\u4ee5\u53ca\u6700\u540e\u4e00\u6b65\u8ba1\u7b97\u7684\u4ee3\u7801\uff08\u6307\u6211\u76f4\u63a5\u8fdb\u884c\u4e00\u4e2a\u539a\u989c\u65e0\u803b\u7684 copy\uff09\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u53ef\u4ee5\u5728 AtCoder \u7684 [\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33195205) \u4e2d\u67e5\u770b\u3002\n\n\u6700\u540e\uff0cClang \u540a\u6253 GCC\uff01\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/lx83uugx.png)\n\n## \u8bba\u5982\u4f55\u5728 9k \u4ee5\u5185\u4f18\u96c5\u5730\u89e3\u51b3\u6218\u6597\n\n\u6211\u8bb0\u5f97\u6211\u521a\u521a\u8bf4\u8fc7\u53ef\u4ee5\u505a\u5230 6k \u662f\u5427\uff1f\n\n### \u5b57\u7b26\u8868\u538b\u7f29\n\n\u9996\u5148\u6211\u4eec\u89c2\u5bdf\u5b57\u7b26\u8868\uff0c\u53d1\u73b0\u8fd9\u4e1c\u897f\u5de8\u5927\uff0c\u80af\u5b9a\u8981\u538b\u7f29\u3002\n\n\u6211\u9009\u62e9\u4e86\u6e38\u7801\uff0c\u4e3b\u8981\u662f\u56e0\u4e3a\u5b83\u6613\u4e8e\u89e3\u7801\uff0c\u800c\u4e14\u8fd9\u9898\u7684\u5b57\u7b26\u96c6\u4e3a\u4e8c\uff0c\u975e\u5e38\u9002\u5408\u6e38\u7801\u53d1\u6325\uff08\u66f4\u597d\u7684\u65b9\u6cd5\u89e3\u7801\u66f4\u590d\u6742\uff0c\u6548\u679c\u5176\u5b9e\u6ca1\u6709\u7406\u8bba\u90a3\u4e48\u597d\uff09\u3002\n\n\u5b9e\u6d4b\u5927\u7ea6\u662f $20\\%$ \u7684\u538b\u7f29\u7387\uff0c\u6548\u679c\u8fd8\u662f\u5f88\u4e0d\u9519\u7684\u3002\n\n\u5177\u4f53\u7684\u8fc7\u7a0b\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u8f93\u5165\u770b\u4f5c\u4e3a\u4e00\u7ef4\u5b57\u7b26\u4e32\u8fdb\u884c\uff0c\u89e3\u7801\u65f6\u518d\u989d\u5916\u4f20\u4e00\u4e2a\u5bbd\u5ea6\u5373\u53ef\u8fd8\u539f\u6210\u4e8c\u7ef4\u77e9\u9635\u3002\n\n```c++\nstruct image{\n    // ......\n    image(initializer_list<int> v){\n        // initializer_list \u7684\u7b2c\u4e00\u4e2a\u503c\u662f\u5bbd\u5ea6\n        int i=0;bool p=0;auto k=v.begin();\n        raw.resize(1);\n        null.resize(1);\n        for(ry=*k;++k!=v.end();p^=1)\n            for(int j=0;j<*k;++j){\n                raw[i].eb(p);\n                if(raw[i].size()==ry&&k+1!=v.end()){\n                    // \u5bf9\u4e8e\u6700\u540e\u4e00\u4e2a\u6570\u636e\u4e0d\u518d\u65b0\u5f00\u4e00\u884c\n                    raw.resize(++i+1);\n                    null.resize(i+1);\n                }\n            }\n        rx=raw.size();\n    }\n}\n```\n\n\u7136\u540e\u6211\u4eec\u7684 16 \u4e2a\u5b57\u7b26\u5c31\u662f\u8fd9\u6837\u7684\u753b\u98ce\uff1a\n\n```c++\nvector<image> charset({\n{30,11,8,20,12,16,16,13,18,11,20,9,22,7,24,6,10,4,10,5,9,8,9,4,8,10,8,3,9,10,9,2,8,12,8,2,8,12,8,2,8,12,8,1,8,14,16,14,16,14,16,14,16,14,16,14,16,14,16,14,16,14,16,14,16,14,8,1,8,12,8,2,8,12,8,2,8,12,8,2,9,10,9,3,8,10,8,4,9,8,9,5,10,4,10,6,24,7,22,9,20,11,18,13,16,16,12,20,8},\n{27,13,4,21,7,17,10,14,13,11,16,10,17,10,17,10,17,10,17,11,6,2,8,11,3,5,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,10,134,1,26},{28,9,9,16,14,11,19,8,21,6,23,5,23,5,24,4,9,6,9,4,7,9,9,3,7,10,8,3,7,10,8,3,7,10,8,3,7,10,8,4,6,10,8,19,9,19,8,19,9,18,10,17,10,17,11,16,11,16,11,16,11,16,11,16,11,16,11,16,11,5,5,6,11,5,7,4,11,6,7,3,11,7,7,2,11,8,7,1,11,9,147,1,27},\n{28,9,10,14,16,10,20,7,22,6,23,5,24,4,24,4,8,7,10,3,7,9,9,3,7,10,8,3,7,10,8,4,6,10,8,20,8,20,8,19,8,19,9,12,15,12,15,13,14,14,15,13,16,13,16,19,10,20,8,20,9,20,8,20,8,20,8,20,8,19,9,2,3,13,10,1,8,8,10,2,26,2,25,2,26,3,24,4,22,9,17,14,11},\n{30,17,5,24,7,22,8,21,9,20,10,19,11,19,11,18,12,17,13,16,14,15,15,14,16,14,8,1,7,13,8,2,7,12,8,3,7,11,8,4,7,10,9,4,7,10,8,5,7,9,8,6,7,8,8,7,7,7,180,15,8,22,8,22,8,22,8,22,8,22,8,16,20,9,21,9,21,9,21,9,21,10,20},\n{28,3,22,6,23,5,23,5,23,5,23,5,22,6,7,21,7,21,7,21,7,21,7,21,7,20,8,2,8,10,20,8,22,6,23,5,24,4,24,4,25,3,8,7,10,6,2,11,9,20,9,20,8,20,8,20,8,20,8,20,8,20,8,3,1,15,9,2,4,12,9,2,8,7,11,2,26,2,25,2,25,4,23,6,21,9,17,15,10},\n{29,20,6,18,11,15,15,12,17,10,19,9,20,8,20,8,16,12,12,16,11,18,9,19,9,20,8,20,8,21,8,21,7,4,8,10,7,2,13,6,25,4,26,3,27,2,27,2,12,6,10,1,10,9,9,1,9,11,17,13,16,13,16,13,8,1,7,13,8,1,7,13,8,1,8,11,9,1,9,9,9,3,10,5,11,4,25,4,24,6,22,8,20,10,18,13,14,18,8},\n{28,0,27,1,139,1,7,11,9,1,7,11,9,1,7,10,9,2,7,10,9,2,7,10,8,3,7,9,9,3,7,9,8,4,7,8,9,5,5,9,9,19,8,19,9,19,8,19,9,19,8,19,9,19,9,19,8,19,9,19,8,19,9,19,8,20,8,19,8,20,8,19,9,19,8,20,8,19,8,20,8,20,7,21,7,23,5},\n{28,10,9,17,13,13,17,10,19,8,21,6,23,5,23,5,9,5,9,4,9,7,9,3,8,9,8,3,8,9,8,3,8,9,8,3,8,9,8,3,8,9,8,4,8,7,8,5,9,5,9,6,21,8,19,10,17,11,17,9,21,6,23,4,9,6,10,2,8,10,8,2,8,10,17,12,16,12,16,12,16,12,17,10,18,10,9,1,10,6,10,2,26,3,24,4,24,5,22,7,20,10,16,15,10},\n{28,9,9,17,13,13,17,10,19,8,21,6,23,4,24,4,10,6,9,3,9,8,9,1,9,10,8,1,8,12,7,1,8,12,7,1,8,12,16,12,16,12,17,10,9,1,8,9,10,1,10,6,11,2,26,2,26,3,25,4,24,6,12,2,8,8,8,4,7,21,7,20,8,20,8,19,8,19,9,17,10,16,12,12,15,8,19,8,19,9,18,10,16,12,14,14,12,17,6},\n{21,15,4,16,6,13,8,12,10,10,11,9,12,8,12,8,11,9,11,9,11,10,10,10,10,11,9,11,9,12,8,12,9,12,8,12,9,12,8,13,8,13,8,12,9,12,8,13,8,13,8,13,8,13,8,13,8,13,8,13,8,13,8,13,8,14,8,13,8,13,8,13,9,13,8,13,9,12,9,13,9,12,10,12,9,13,9,12,10,12,11,11,11,11,11,11,12,10,11,11,10,12,9,13,7,16,4,19,1},\n{21,2,4,16,6,14,9,12,10,11,11,10,12,10,12,11,11,11,11,11,10,12,10,12,10,12,9,13,9,13,8,13,9,13,8,13,9,13,8,13,8,13,8,13,9,13,8,13,8,13,8,13,8,13,8,13,8,13,8,13,8,13,8,13,8,12,8,13,8,13,8,12,9,12,8,12,9,12,9,11,9,11,10,10,10,11,9,10,11,9,11,9,11,9,11,8,12,9,11,10,10,11,9,13,7,15,4,18,1},\n{27,11,5,21,7,20,7,20,7,20,7,20,7,20,7,20,7,20,7,20,7,10,189,10,7,20,7,20,7,20,7,20,7,20,7,20,7,20,7,20,7,20,7,21,5},\n{28,1,26,1,140,1,32},\n{26,11,4,21,6,20,7,18,8,18,8,19,7,19,6,11,5,4,6,5,4,2,6,3,6,3,16,2,5,1,24,1,62,1,24,7,14,15,8,17,11,14,13,11,8,1,7,9,8,2,8,8,8,2,9,6,8,4,8,6,8,4,8,7,7,5,7,8,5,6,6,10,3,9,2},\n{28,22,4,24,6,21,7,21,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,21,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,22,6,23,5}});\n```\n\n> \u8fd9\u91cc\u7f29\u4e86\u4e00\u70b9\u70b9\uff0c\u5220\u6389\u4e86\u6700\u540e\u4e00\u4e2a\u6570\u5b57\uff0c\u5373\u5ffd\u7565\u6389\u4e86\u6700\u540e\u7684\u82e5\u5e72\u4e2a 0\uff0c\u56e0\u4e3a\u521d\u59cb\u5c31\u4f1a\u586b\u5145\u4e3a 0.\n>\n> \u5927\u6982\uff1f\u6211\u4e5f\u4e0d\u77e5\u9053\u4e3a\u4ec0\u4e48\u6ca1\u6709 `push_back` \u80fd\u884c\uff0c\u53cd\u6b63\u8fc7\u4e86\u3002\n\n#### 2022/10/27 \u66f4\u65b0\n\n\u8fd9\u662f\u4e00\u4e2a STL \u7279\u6027\uff0c\u56e0\u4e3a `vector<>` \u5bf9 `bool` \u7c7b\u578b\u7279\u5316\uff0c\u4f7f\u7528 64 \u4f4d\u6574\u6570\uff08\u53d6\u51b3\u4e8e\u673a\u5b50\uff0c\u5982\u679c\u662f 32 \u4f4d\u673a\u5b50\u5c31 32 \u4f4d\u6574\u6570\uff0c\u8ddf `bitset<>` \u4e00\u4e2a\u9053\u7406\uff09\uff0c\u6765\u50a8\u5b58\u4fe1\u606f\u3002\n\n\u8fd9\u5c31\u4f1a\u5bfc\u81f4\u5176\u5b9e\u6211\u4eec\u7684 `vector` \u957f\u5ea6\u5982\u679c\u5c0f\u4e8e 64 \u7684\u8bdd\u5b9e\u9645\u4e0a\u5bf9\u4e8e\u5185\u5b58\u800c\u8a00\u6ca1\u4ec0\u4e48\u610f\u4e49\uff0c\u56e0\u4e3a\u5b83\u81f3\u5c11\u8981\u5f00\u4e00\u4e2a\u6574\u6570\u3002\n\n\u800c\u663e\u7136\u7684\uff0c\u6211\u4eec\u5b57\u7b26\u96c6\u4e2d\u7684\u5b57\u7b26\u5bbd\u5ea6\u5c0f\u4e8e 64\uff08\u54ea\u6015 32 \u4e5f\u6070\u597d\u6ca1\u5230\uff09\uff0c\u6240\u4ee5\u6bcf\u4e00\u884c\u90fd\u53ea\u4f1a\u4f7f\u7528\u4e00\u4e2a\u6574\u6570\u50a8\u5b58\u3002\n\n\u8fd9\u5c31\u610f\u5473\u7740\uff0c\u867d\u7136\u6211\u4eec\u7684\u6700\u540e\u4e00\u884c\u6ca1\u6709 `push_back`\uff0c\u4f46\u662f\u5185\u5b58\u662f\u5b58\u5728\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u5728\u8bbf\u95ee\u8fd9\u4e9b\u4f4d\u7f6e\u65f6\u4e0d\u4f1a\u8d8a\u754c\uff0c\u800c\u53ea\u662f\u4f1a\u5f97\u5230\u968f\u673a\u503c\uff08\u8bbf\u95ee\u672a\u521d\u59cb\u5316\u5185\u5b58\uff09\u3002\n\n\u4f46\u8fd9\u65e0\u5173\u7d27\u8981\uff0c\u56e0\u4e3a\u5b83\u4e00\u5b9a\u4f1a\u88ab\u964d\u566a\u5e72\u6389\u3002\n\n\u6240\u4ee5\u5982\u679c\u4f60\u4f7f\u7528 `int` \u5b58\uff0c\u4f46\u662f\u63d0\u524d `reserve` \u4e00\u4e0b\u7684\u8bdd\uff0c\u5927\u6982\u4e5f\u662f\u8fd9\u4e2a\u6548\u679c\u5427\u3002\n\n### \u91cd\u6784\u4e0e\u4f18\u5316\n\n1. \u6211\u4eec\u628a `expand` \u4f18\u5316\u4e86\uff08\u56e0\u4e3a\u53ea\u5728\u7c7b\u7684\u5185\u90e8\u8c03\u7528\u4e86\u4e24\u6b21\uff0c\u800c\u4e14 API \u8fd8\u4e0d\u662f\u5f88\u5408\u9002\uff0c\u6240\u4ee5\u7ed9\u5b83\u5185\u8054\u6389\uff09\u3002\n\n2. \u6211\u4eec\u628a `get` \u4f18\u5316\u4e86\uff08\u56e0\u4e3a\u53ea\u5728\u7c7b\u7684\u5185\u90e8\u8c03\u7528\u4e86\u4e00\u6b21\uff0c\u6240\u4ee5\u7ed9\u5b83\u5185\u8054\u6389\uff09\u3002\n\n3. \u56e0\u4e3a `push_back` \u4e0e `emplace_back` \u592a\u591a\u4e86\uff0c\u6240\u4ee5\u5168\u90e8\u66ff\u6362\u6210 `#define eb emplace_back`\u3002\n\n4. \u8fd4\u56de\u503c\u53ef\u4ee5\u7528 `auto`\u3002\n\n5. \u6211\u4eec\u53d1\u73b0 `rotate` \u4e0e `cut` \u5305\u542b\u5927\u91cf\u91cd\u590d\u4ee3\u7801\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\uff1a\n\n    ```c++\n    template<class T>image trans(T func){\n        vector<pair<int,int>> point;\n        sqr out={INF,-INF,INF,-INF};\n        foreach([&](int x,int y){\n            if(!raw[x][y]) return;\n            auto p=func(x,y);\n            // \u5bf9\u5750\u6807\u8fdb\u884c\u53d8\u6362\uff0c\u8fd4\u56de\u4e00\u4e2a pair<double,double> \u8868\u793a\u65b0\u5750\u6807\n            point.eb(p);\n            out+=p;});\n        image re(out.x1-out.x0,out.y1-out.y0);\n        for(auto i:point)\n            re[i.first-out.x0][i.second-out.y0]=1;\n        return(re);\n    }\n    ```\n\n    \u7136\u540e `rotate` \u53d8\u6210\u8fd9\u6837\uff1a\n\n    ```c++\n    auto rotate(db ang){\n        ang=ang/180*pi;\n        db csa=cos(ang),sia=sin(ang),cex=rx/2.,cey=ry/2.;\n        return(trans([&](int x,int y){\n            return(make_pair((x-cex)*csa+(y-cey)*sia+cex,-(x-cex)*sia+(y-cey)*csa+cey));}));\n    }\n    ```\n\n    `cut` \u8fd9\u4e48\u5199\uff1a\n\n    ```c++\n    auto cut(db cx,db cy){\n        return(trans([&](int x,int y){return(make_pair(x+y*cy,y+x*cx));}));\n    }\n    ```\n\n6. \u4f18\u5316\u6700\u540e\u7684\u8ba1\u7b97\u4ee3\u7801\u3002\n\n7. \u5176\u4ed6\u975e\u5e38\u591a\u7684\u4f18\u5316\uff0c\u6709\u5174\u8da3\u7684\u8bdd\u8fd8\u662f\u7ffb\u5230\u4e0b\u9762\u89c1\u6e90\u7801\u5427\u3002\n\n### \u6700\u540e\u4e00\u6b65\n\n\u628a\u6240\u6709\u7684\u7a7a\u683c\u7f29\u8fdb\u6362\u6210 `Tab` \uff08\u5927\u96fe\uff09\u3002\n\n### \u540e\u8bb0\n\n~~\u4f60\u600e\u4e48\u8fd9\u4e48\u591a\u540e\u8bb0\uff01~~\n\n\u611f\u8c22 [**@xiyihan**](https://www.luogu.com.cn/user/152651) \u7684\u9898\u89e3\u63d0\u4f9b\u7684\u601d\u8def ~~\u4ee5\u53ca\u8ba9\u6211\u770b\u5230\u4e86\u8fd9\u9053\u9898\u662f\u53ef\u4ee5\u5199\u7684~~\u3002\n\n\u5728\u6ca1\u6709\u8fc7\u591a\u7684\u727a\u7272\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u7684\u524d\u63d0\u4e0b\uff08\u6ca1\u6709\u8fc7\u4e8e\u5947\u602a\u7684\u53d8\u91cf\u540d\u4ee5\u53ca\u8fc7\u5ea6\u79bb\u8c31\u7684\u538b\u884c\uff09\uff0c\u6700\u7ec8\u5f97\u5230\u7684\u4ee3\u7801\u7ea6\u6709 $5455\\text{byte}$ \u7684\u6709\u6548\u4ee3\u7801\u4ee5\u53ca $3541\\text{byte}$ \u7684\u6570\u636e\u3002\n\n\u7528 Clang \u63d0\u4ea4\u6700\u6162\u7684\u6570\u636e\u70b9\u8017\u65f6 $740\\text{ms}$\uff0c\u603b\u7684\u6548\u7387\u8fd8\u662f\u4e0d\u9519\u7684\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u89c1 [\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33203740)\u3002\n\n\u518d\u590d\u8bfb\u4e00\u904d\u611a\u8822\u7684 GCC\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/pyuh7ikg.png)\n\nPython \u5360\u636e\u6700\u77ed\u63d0\u4ea4\u7b2c\u4e00\u7684\u5386\u53f2\uff0c\u7ec8\u4e8e\u7ed3\u675f\u4e86\u3002~~\u867d\u7136\u6211\u4f30\u6478\u7740\u5f88\u5feb\u5c31\u4f1a\u6709\u4eba\u7ed9\u6211\u5e72\u6389\u3002~~\n\n## \u8bba\u5982\u4f55\u5728 8k \u4ee5\u5185\u89e3\u51b3\u6218\u6597\n\n\u989d\uff0c\u6211\u4eec\u76f4\u63a5\u8fdb\u5165\u6b63\u9898\u5427\u3002\n\n\u4f46\u662f\u6211\u4eec\u5e76\u4e0d\u6ee1\u8db3\u4e8e $20\\%$ \u7684\u538b\u7f29\u7387\u3002\n\n> \u4ee5\u4e0b\u201c\u538b\u7f29\u7ec4\u201d\u6307\u6e38\u7801\u5f97\u5230\u7684\u4e00\u4e2a\u6570\uff0c\u5373\u4e00\u4e2a\u8868\u793a\u4e00\u5757\u76f8\u540c\u989c\u8272\u7684\u5927\u5c0f\u7684\u6570\u3002\n\n\u6211\u4eec\u89c2\u5bdf\u538b\u7f29\u8868\uff0c\u53d1\u73b0\u91cc\u9762\u6709\u5927\u91cf\u7684\u4e00\u4f4d\u6570\u4e0e\u4e8c\u4f4d\u6570\uff0c\u5b9e\u9645\u4e0a\uff0c\u4f7f\u7528\u4f18\u79c0\u7684\u6587\u672c\u7f16\u8f91\u5668\u6211\u4eec\u53ef\u4ee5\u5feb\u901f\u770b\u51fa\u91cc\u9762\u6700\u5927\u7684\u4e8c\u4f4d\u6570\u662f\u4e00\u4e2a $62$\uff0c\u800c\u7b2c\u4e8c\u5927\u7684\u662f $31$\u3002\n\n\u800c\u4e09\u4f4d\u6570\u5e76\u6ca1\u6709\u51e0\u4e2a\uff0c\u6700\u5927\u7684\u662f $189$\u3002\n\n\u8fd9\u542f\u53d1\u6211\u4eec\u53ef\u4ee5\u5c06\u5c0f\u6570\u5b57\u538b\u7f29\u8d77\u6765\uff0c\u6211\u4eec\u6309\u7167 $5\\text{bit}$ \u4e3a\u4e00\u4e2a\u5355\u4f4d\u653e\u5165\u6570\u5b57\uff08\u6070\u597d\u53ef\u4ee5\u653e\u5165 $[0,31]$\uff09\uff0c\u5982\u679c\u6570\u5b57\u5927\u4e8e $5\\text{bit}$ \u5c31\u5f3a\u5236\u5b8c\u6210\u5f53\u524d\u6570\u5b57\uff0c\u6ce8\u610f\u5982\u679c\u51fa\u6765\u7684\u6570\u5b57\u5c0f\u4e8e $190$ \u5219\u9700\u8981\u8fd8\u539f\u56de\u53bb\uff08\u4f3c\u4e4e\u5b9e\u6218\u5e76\u6ca1\u6709\u8fd9\u79cd\u60c5\u51b5\uff09\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f `unsigned long long` \u6709 $64\\text{bit}$\uff0c\u5bf9 $5$ \u53d6\u6a21\u4f59 $4$\uff0c\u8fd9\u6837\u6700\u540e\u4e00\u4e2a\u6570\u5b57\u53ef\u80fd\u5dee $1\\text{bit}$ \u5199\u4e0d\u8fdb\u53bb\uff0c\u4f46\u4e5f\u6709\u53ef\u80fd\u80fd\u5199\u8fdb\u53bb\uff08\u80fd\u5199\u8fdb\u53bb\u5373\u5c0f\u4e8e $16$\uff09\uff0c\u8fd9\u9700\u8981\u5224\u65ad\u4e00\u4e0b\u3002\n\n\u89e3\u7801\u4ecd\u6bd4\u8f83\u7b80\u5355\uff0c\u6211\u4eec\u5bf9\u4e8e\u5c0f\u4e8e $190$ \u7684\u6570\u76f4\u63a5\u6309\u7167\u4e00\u4e2a\u538b\u7f29\u7ec4\u5904\u7406\uff0c\u5bf9\u4e8e\u5927\u4e8e\u7b49\u4e8e\uff08\u867d\u7136\u4e5f\u6ca1\u6709\u7b49\u4e8e\uff09\u7684\u6570\u6309\u7167 $5\\text{bit}$ \u4e3a\u4e00\u8282\u4ece\u4f4e\u5230\u9ad8\u62c6\u5f00\uff0c\u7136\u540e\u4f9d\u6b21\u4f5c\u4e3a\u538b\u7f29\u7ec4\u5904\u7406\u5373\u53ef\u3002\u4e3a\u4e86\u7167\u987e\u89e3\u7801\u5668\uff0c\u6211\u4eec\u9009\u62e9\u5c06\u9760\u524d\u7684\u6570\u5b57\u653e\u5230\u5c0f\u7aef\uff0c\u8fd9\u987a\u4fbf\u53ef\u4ee5\u89e3\u51b3\u6570\u5b57 $7$ \u6e38\u7801\u538b\u7f29\u540e\u7b2c\u4e00\u4e2a\u6570\u4e3a $0$ \u7684\u95ee\u9898\u3002\n\n\u5c06\u8f83\u5927\u7684\u6570\u5b57\u6309\u7167 $16$ \u8fdb\u5236\u8f93\u51fa\uff0c\u6700\u7ec8\u538b\u7f29\u7387\u5927\u7ea6\u4e3a $12.7\\%$\u3002\n\n\u538b\u7f29\u5668\u4ee3\u7801\uff1a\n\n```c++\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nusing uni=unsigned long long;\nconst int FSIZE=1<<20;\nconst uni INF=0xffffffffffffff;\nvector<uni> ans;\nchar BuF[FSIZE],*InF=BuF;\nvoid push(uni &x){\n    if(x>189) ans.push_back(x);  // \u5982\u679c\u5927\u4e8e\u7b49\u4e8e 190 \u5219\u76f4\u63a5\u653e\u5165\n    else if(x)  // \u5426\u5219\u8fdb\u884c\u89e3\u6784\uff0c\u8fd8\u539f\u6210\u539f\u59cb\u72b6\u6001\n        for(;x;x>>=4)\n            ans.push_back(x&15);\n    x=0;\n}\nint main(){\n    for(;~scanf(\"%s\",InF);*InF++='\\n') for(;*InF;++InF);\n    bool p=0;\n    uni rest=0,t=0,now=0;\n    for(InF=BuF;*InF;++InF){\n        for(;*InF<33&&*InF;++InF);\n        if(*InF!='.'&&*InF!='#') continue;\n        if((*InF=='#')==p) ++now;\n        else{\n            if(now>32||t>60||(t==60&&now>15)){  // \u56e0\u4e3a\u8fc7\u5927\u6216\u6ea2\u51fa\u800c\u4e0d\u80fd\u653e\u5165\u538b\u7f29\u6570\u4e2d\n                push(rest);\n                t=0;\n            }\n            if(now<32){  // \u80fd\u653e\u5165\u538b\u7f29\u6570\u4e2d\n                rest+=now<<t;\n                t+=5;\n            }else{\n                push(rest);\n                t=0;\n                ans.push_back(now);\n            }\n            now=1;\n            p^=1;\n        }\n    }\n    if(now>32||t>60||(t==60&&now>15)){\n        push(rest);\n        t=0;\n    }\n    if(now<32){\n        push(rest+=now<<t);\n    }else{\n        push(rest);\n        ans.push_back(now);\n    }\n    for(auto i:ans){\n        if(i<10000000000){\n            printf(\"%llu,\",i);\n        }else{\n            printf(\"0x%llx,\",i);\n        }\n    }\n}\n```\n\n\u89e3\u538b\u5668\uff08\u5373 `image` \u7c7b\u7684\u6784\u9020\u51fd\u6570\uff09\u5982\u4e0b\uff1a\n\n```c++\nstruct image{\n    // ......\n\n    image(initializer_list<uni> v){\n        int i=0;bool p=0;auto k=v.begin();\n        raw.resize(1);\n        auto get=[&](int k){\n            for(int j=0;j<k;++j){\n                raw[i].eb(p);\n                if(raw[i].size()==ry) raw.resize(++i+1);\n            }\n            p^=1;};\n        for(ry=*k;++k!=v.end();)\n            if(*k<190) get(*k);\n            else for(uni x=*k;x;x>>=5) get(x&31);\n        raw.pop_back();\n        null.resize(rx=raw.size());\n        for(int i=0;i<rx;++i) null[i].resize(ry);\n    }\n}\n```\n\n\u6700\u7ec8\u5f97\u5230\u7684\u538b\u7f29\u8868\u5982\u4e0b\uff1a\n\n```c++\nvector<image> charset({\n{30,0x7b268b936106510b,0x852089424aa228d8,0x243102431024a923,0x741d0741c80a188,0x741d0741d0741d0,0x812188121880a1d0,0x84910a40d2a4890c,0x5d1363e0ca228a9,9274147250,11},\n{27,0xa8aa0b6b9513d48d,0x828d681197154551,0x44d1344d1344d13,0x44d1344d1344d13,0x44d1344d1344d13,0x291344d13,134,833},\n{28,0xb96e6aa26b74129,0x38d293912649305,0x38d0a38d0a38d0a,0x4cd134cd0a3110a,0x5c1705c17154552,0x598a55c1705c170,0x588e758ce6590e5,9798888,147,865},\n{28,0x4c16e6b1e8a83949,0x851c6949c6a3a098,0x45114428c4428e3,0xd7b9cd7b1ec4cd13,0x8a2289a228a9c1b0,0x84054d1893345114,0x4d8981e8591684a,339409},\n{30,0x5cd544d5163e0b1,0xe839ef741b164973,0x859c6861c4869c28,0x6424e5428e44a8e4,242458887,180,0x45916459164590f,0x1a2aa9aa6a9aa690},\n{28,0x6b16e5b96e5b9ac3,0x8a1ea7a9ea7a9ea7,0x4c1305b9ac8a2902,0x8a2689588ca3a079,0xf08d144511445114,0x1684b3a04961049,0x529f14d4d726459},\n{29,0x8a266a8b1ef5c8d4,0x8a266992e0c64114,0x6688ea410f545514,0xa0a8cc16c5b1e899,0x14360d8362b48529,0x90a5680a1a70a1a7,0x8b1b04c916550d29,0x5224e6c954},\n{28,1888,139,0x24a8e14ace14ace1,0x71a5271a14712547,0x44d292952839109,0x4cd3344d3344d33,0x451134cd134cd13,0x44d1444d3345113,0xe2dcf53d114},\n{28,0x5b9aa89aa2d6c52a,0x84a0693a4892a4b7,0x3425034250342503,0x324a92a0e822128,0x925cd54c57154d15,0xc8322a4090a40946,0xa328295495164190,0xf82a87b1704c0f42,298},\n{28,0x4b9aa89aa2d6c529,0x8524294246932898,0xc831013b1013b101,0xb3282a4a02954590,0x840986c1323d0b42,0x99a268a2287a9c88,0xa926689a1ec64151,0x91a2c73990},\n{21,0x86256a5310d3408f,0x95a94a52d2b4ad0c,0xd4312c4312c4312b,0x86a1a86a189621a8,0xe4350d4350d4350d,0x9625a86a5a86a1a8,0xb5b14c4b52c5312d,0x76a58a5ad4c5ad6b,3198096},\n{21,0xa6296b5312e34082,0x96298a6296b5ad6c,0xd4352d4352d4352d,0x86a1a86a1a96a1a8,0xc4350d4350d4350d,0x962588625886a1a8,0x95a56a4ad4a52d2b,0x76a56a52d2c42d2b,17877135},\n{27,0x3d0f43d0f43d4ab,0xa3d0f43d0f4,189,0x3d0f43d0f43d0ea,0x2cb53d0f43d0f4},\n{28,1857,140,865},\n{26,0x3cd12448f43548b,0x330cc2214c42acd3,58758224,62,0x142dae5c50f71f01,0x8220c91210812127,0xa318a8394e741106,198947},\n{28,0x3d1143d4f536096,0x3d1143d1143d114,0x450f4450f445114,0x450f4450f4450f4,0x3d1143d4f4450f4,0x3d1143d1143d114,0x451143d1143d114,0x450f4450f4450f4,0x54b7358f4}});\n```\n\n\u6700\u540e\u7684\u4ee3\u7801\u957f\u5ea6 $7724\\text{byte}$\uff0c\u538b\u7f29\u8868 $2159\\text{byte}$\u3002\n\n\u5b8c\u6574\u4ee3\u7801\u4ecd\u7136\u662f\u89c1 AtCoder \u4e0a\u7684 [\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33223619)\uff0c\u4e0d\u8fc7\u8fd9\u4efd\u4ee3\u7801\u7684\u538b\u7f29\u8868\u6709\u4e00\u70b9\u70b9\u5c0f\u95ee\u9898\uff0c\u6bd4\u4e0a\u9762\u7ed9\u7684\u591a\u4e86 $6\\text{byte}$\u3002\n\n## Anything More Exciting?\n\n\u5230\u8fd9\u4e00\u6b65\u6211\u5176\u5b9e\u4e0d\u5927\u4f1a\u4e86\uff0c\u4f46\u662f\u8fd8\u662f\u6709\u4e00\u4e9b\u4e0d\u90a3\u4e48\u806a\u660e\u7684\u529e\u6cd5\u7ee7\u7eed\u538b\u7f29\u3002\n\n\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u7684\u6570\u5b57\u90fd\u662f $16$ \u8fdb\u5236\uff0c\u800c\u4e14\u8fd8\u6709\u5f88\u591a\u51d1\u6570\u7684 `0x` \u5360\u4f4d\u7b26\u3002\u800c\u4f17\u6240\u5468\u77e5\uff0cASCII \u6709 $95$ \u4e2a\u53ef\u89c1\u5b57\u7b26\u548c\u4e00\u4e2a\u53ef\u4ee5\u663e\u793a\u4e3a\u4e00\u4e2a\u5947\u602a\u7684\u4e1c\u897f\u7684 `0x7f`\uff08\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5b9e\u9645\u4e0a\u6709 $96$ \u4e2a\u53ef\u7528\u5b57\u7b26\uff09\u3002\u6211\u4eec\u53ef\u4ee5\u628a\u6570\u5b57\u8f6c\u6362\u6210 $95$ \u8fdb\u5236\uff08\u53bb\u6389\u4e00\u4e2a\u5206\u9694\u7b26\uff09\uff0c\u7136\u540e\u628a\u7a7a\u683c\u5f53\u4f5c\u5206\u9694\u7b26\u6574\u4e2a\u653e\u5165\u5b57\u7b26\u4e32\u4e2d\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u505a\u5230 $8\\%$ \u7684\u538b\u7f29\u7387\u3002\n\n\u8868\u957f\u5ea6 $1350\\text{byte}$\uff0c\u53ef\u89c1 [\u526a\u8d34\u677f](https://www.luogu.com.cn/paste/ddlrtzwt)\u3002\n\n> \u653e\u526a\u8d34\u677f\u662f\u56e0\u4e3a\u8fd9\u4e2a\u8868\u91cc\u6709\uff08\u6211\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u7684\uff09\u5947\u602a\u7684\u4e1c\u897f\u4f1a\u4ee4\u540e\u9762\u7684 markdown \u5168\u90e8\u5bc4\u6389\u3002 \n>\n> \u56e0\u4e3a\u6d1b\u8c37\u4f1a\u628a `0x7f` \u663e\u793a\u6210\u4e00\u4e2a\u7a7a\u683c\u7684\u6837\u5b50\uff0c\u800c\u4e14\u5373\u4f7f\u662f\u653e\u5230\u526a\u8d34\u677f\u91cc\u9762\uff0c\u4ee3\u7801\u9ad8\u4eae\u8fd8\u662f\u5bc4\u6389\u4e86\uff0c\u6240\u4ee5\u5efa\u8bae\u590d\u5236\u5230\u672c\u5730\u770b\u3002\n\n> 2022/8/1\uff1a\u597d\u50cf\u627e\u5230\u4e86\uff0c\u662f\u67d0\u77e5\u540d\u7f8e\u5143\u7b26\u53f7\u7684\u95ee\u9898\u3002\n\n\u7406\u8bba\u4e0a\u8fd8\u53ef\u4ee5\u505a\u7684\u66f4\u7edd\u4e00\u70b9\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06 ASCII \u524d\u9762 $127$ \u4e2a\u5b57\u7b26\uff08\u9664\u53bb\u7a7a\u5b57\u7b26\uff09\u5168\u90e8\u7528\u51fa\u6765\uff08\u524d\u9762\u7684\u5b57\u7b26\u4e5f\u80fd\u663e\u793a\u4e3a\u5947\u602a\u7684\u4e1c\u897f\uff09\uff0c\u505a\u5230 $126$ \u8fdb\u5236\u3002\u4f46\u662f\u6211\u8bd5\u4e86\u8bd5\u4f3c\u4e4e\u4e0d\u662f\u5f88\u884c\uff08\u53ef\u80fd\u662f\u7f16\u8f91\u5668\u7684\u9505\uff0c\u4e5f\u6709\u53ef\u80fd\u662f\u7f16\u8bd1\u5668\uff09\uff0c\u800c\u4e14\u53ea\u80fd\u8282\u7701 $7$ \u4e2a\u5b57\u7b26\uff0c\u6240\u4ee5\u8fd8\u662f\u7b97\u4e86\u5427\u3002\n\n\u800c\u540e\u9762\u7684\u5b57\u7b26\u4f1a\u51fa\u66f4\u591a\u7684\u95ee\u9898\uff0c\u5b83\u4eec\u5f88\u5bb9\u6613\u88ab\u89e3\u91ca\u4e3a UTF-8 \u7f16\u7801\u7136\u540e\u5bfc\u81f4\u89e3\u7801\u5931\u8d25\uff0c\u5c31\u7b97\u672c\u5730\u80fd\u884c\uff08\u800c\u4e14\u5176\u5b9e\u672c\u5730\u4e5f\u5f88\u96be\u590d\u5236\u8fd9\u4e9b\u5b57\u7b26\uff0c\u8981\u5b9e\u73b0\u53ef\u80fd\u5f97\u76f4\u63a5\u6539\u4e8c\u8fdb\u5236\u6587\u4ef6\uff09\uff0c\u590d\u5236\u7c98\u8d34\u5230\u6d4f\u89c8\u5668\u73af\u5883\u4e2d\u4e5f\u5f88\u6709\u53ef\u80fd\u5bc4\u6389\u3002\n\n### 2022/8/2 \u66f4\u65b0\n\n\u4e8b\u5b9e\u4e0a\uff0c\u7531\u4e8e\u4e0d\u540c cv \u9650\u5b9a\u7b26\u7684\u540c\u4e00\u7c7b\u578b\u4f5c\u4e3a\u53c2\u6570\u5141\u8bb8\u540c\u65f6\u51fa\u73b0\u5728\u540c\u4e00\u51fd\u6570\u7684\u91cd\u8f7d\u4e2d\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u5bbd\u5ea6\u4fe1\u606f\u5f53\u4f5c\u4e00\u4e2a\u538b\u7f29\u7ec4\u7f16\u7801\u8fdb\u5b57\u7b26\u4e32\u4e2d\u3002\n\n\u53d1\u73b0\u8fd9\u6837\u5341\u5206\u6709\u6548\uff0c\u800c\u4e14\u628a\u65b0\u7684\u89e3\u7801\u5668\u5199\u51fa\u6765\uff0c\u53d1\u73b0\u89e3\u7801\u5668\u53ea\u591a\u4e86 $1\\text{byte}$\uff08\u96fe\uff09\u3002\n\n~~\u5927\u6982\u662f\u6211\u7684\u7801\u98ce\u95ee\u9898\u3002~~\n\n\u4e00\u4e2a\u66f4\u6709\u8da3\u7684\u662f\uff0c\u63a5\u4e0b\u6765\u6211\u4eec\u5c06 $95$ \u8fdb\u5236\u6362\u6210 $94$ \u8fdb\u5236\uff0c\u5f97\u5230\u7684\u7ed3\u679c\u66f4\u77ed\u3002\n\n\u5c0f\u7f16\u4e5f\u5f88\u60ca\u8bb6.jpg\n\n> \u56e0\u4e3a\u5b9e\u64cd\u7684\u65f6\u5019\uff0c\u8f6c\u6362\u51fa\u7684\u5b57\u7b26\u4e32\u5e76\u4e0d\u80fd\u5b8c\u7f8e\u5730\u76f4\u63a5\u4f7f\u7528\uff0c\u5176\u4e2d\u5b58\u5728\u7684 `\"\\` \u4e24\u79cd\u5b57\u7b26\u9700\u8981\u8f6c\u4e49\uff0c\u6240\u4ee5\u4f1a\u4ea7\u751f\u4e00\u70b9\u7ec6\u5fae\u7684\u5dee\u522b\u3002\n>\n> \u539f\u59cb\u5b57\u7b26\u4e32\u5b57\u9762\u91cf\u53ef\u4ee5\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f46\u662f\u4e00\u4e2a\u4ee3\u4ef7 $3\\text{byte}$ \u6709\u70b9\u8d35\u3002\n\n\u6211\u4eec\u53d1\u73b0\u5b57\u4f53\u7684\u4e00\u4e9b\u6781\u5c0f\u7684\u7a7a\u767d\u4f1a\u5f71\u54cd\u6211\u4eec\u7684\u538b\u7f29\uff08\u6e38\u7801\u7684\u7279\u6027\uff09\uff0c\u4f46\u662f\u5bf9\u5339\u914d\u7684\u5f71\u54cd\u4e0d\u5927\uff0c\u6240\u4ee5\u53ef\u4ee5\u6ee4\u9664\u4e00\u4e9b\u7a7a\u767d\u3002\n\n> \u5f71\u54cd\u4e0d\u4e00\u5b9a\u90fd\u662f\u8d1f\u9762\u7684\uff0c\u9700\u8981\u4e00\u4e2a\u4e00\u4e2a\u5730\u5c1d\u8bd5\u6765\u786e\u5b9a\u3002\n\n\u7136\u540e\u4f7f\u7528 `unsigned __int128`\uff01\n\n\u6700\u7ec8\uff0c\u6211\u4eec\u7684\u8868\u957f $1209\\text{byte}$\uff0c\u538b\u7f29\u7387\u4e3a $7\\%$\u3002\n\n\u4e0d\u8fc7\u4ee5\u4e0b\u4f7f\u7528\u8fd9\u4e2a\u538b\u7f29\u8868\u7684\u63d0\u4ea4\u8bb0\u5f55\u7684\u8868\u957f\u5747\u4e3a $1213\\text{byte}$\u3002\n\n### 2022/10/27 \u66f4\u65b0\n\n\u7531\u4e8e\u6709\u4e86\u4e0a\u9762\uff08STL \u7279\u6027\uff09\u7684\u7ed3\u8bba\uff0c\u6240\u4ee5\u6211\u4eec\u53ef\u4ee5\u5c06\u6700\u540e\u4e00\u4e2a\u538b\u7f29\u7ec4\u7701\u6389\uff0c\u5bf9\u4e8e\u6700\u540e\u4e00\u4e2a\u538b\u7f29\u7ec4\u4e3a `#`\uff0c\u6211\u4eec\u76f4\u63a5\u5411\u672c\u6e90\u56fe\u50cf\u4eba\u4e3a\u6dfb\u52a0\u4e00\u4e2a `.` \u5373\u53ef\u3002\n\n\u8868\u957f $1192\\text{byte}$\uff0c\u4e4d\u770b\u8d77\u6765\u597d\u50cf\u6709\u4f18\u5316\u4e00\u6837\u3002\n\n### 2022/11/11 \u66f4\u65b0\n\n\u6211\u8bd5\u4e86\u8bd5\uff0c\u53ef\u4ee5\u628a\u6240\u6709\u7684\u5b57\u7b26\u90fd\u7528\u4e0a\uff0c\u53ea\u8981\u6ca1\u6709\u7a7a\u5b57\u7b26\u90fd\u80fd\u7b80\u5355\u641e\uff0c\u5e26\u7a7a\u5b57\u7b26\u7684\u8bdd\u5c31\u8981\u76f4\u63a5\u6539\u4e8c\u8fdb\u5236\u6587\u4ef6\u3002\n\n\u4e8e\u662f\u6211\u4eec\u538b\u7f29\u6709\u4e24\u4e2a\u53c2\u6570\uff0c\u8fdb\u5236\uff08\u4f7f\u7528\u7684\u6700\u5927\u5b57\u7b26\u6570\u91cf\uff09\u4e0e\u4f4d\u79fb\uff08\u5206\u9694\u7b26\u7684 ASCII \u7801\uff0c\u4ece\u5206\u9694\u7b26\u4e4b\u540e\u9009\u53d6\u5b57\u7b26\uff09\u3002\n\n\u7ecf\u5c1d\u8bd5\u4f7f\u7528 $256$ \u8fdb\u5236\uff0c\u5206\u9694\u7b26\u4e3a $10$ \u662f\u6700\u4f18\u7684\uff08`\\\"` \u4e0e `\\n` \u4e0e `\\r` \u8f83\u5c11\uff09\uff0c\u5171 $995\\text{byte}$\uff0c\u538b\u7f29\u7387\u6765\u5230 $5.8\\%$\u3002\n\n\uff08\u867d\u7136 $256+10>256$ \u4f46\u662f\u6700\u9ad8\u4f4d\u7684\u6570\u4e2a\u5b57\u7b26\u90fd\u6ca1\u6709\u7528\u4e0a\uff0c\u6240\u4ee5\u6ca1\u6709\u95ee\u9898\uff0c~~\u603b\u4e4b\u6211\u4e5f\u89c9\u5f97\u633a\u795e\u5947\u7684~~\uff09\u3002\n\n\u4f46\u662f\u975e\u5e38\u4e0d\u5e78\u7684\u662f\uff0c\u8fd9\u4efd\u538b\u7f29\u8868\u5e76\u4e0d\u80fd\u5728 Linux \u4e0a\u8fd0\u884c\uff08\u53ea\u6709 Western Windows-1252 \u80fd\u652f\u6301\u8fd9\u4e2a\u538b\u7f29\u8868\uff09\u3002\n\n\u4f46\u662f\u4e0d\u8bba\u600e\u4e48\u6837\uff0c\u8fd9\u4ecd\u7136\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u8fdb\u6b65\u3002\n\n### 2022/11/12 \u66f4\u65b0\n\n\u90a3\u600e\u4e48\u529e\u5462\uff0c\u6211\u6ca1\u8f99\u4e86\u3002\n\n\u53ea\u80fd\u8003\u8651\u6709\u635f\u538b\u7f29\u4e86\uff08\u5176\u5b9e\u4e4b\u524d\u4e5f\u7b97\u662f\u6709\u635f\u538b\u7f29\u5427\uff0c\u867d\u7136\u635f\u5931\u5927\u6982\u53ef\u4ee5\u7b97\u662f\u5ffd\u7565\u4e0d\u8ba1\uff09\u3002\n\n\u6211\u4eec\u6709\u4e24\u6761\u8def\u5f84\uff1a\n\n1. \u628a\u56fe\u50cf\u7f29\u5c0f\u3002\n\n    \u5177\u4f53\u4ec0\u4e48\u6548\u679c\u6211\u4e0d\u6e05\u695a\uff0c\u56e0\u4e3a\u6211\u8d70\u7684\u53e6\u4e00\u6761\u8def\u5f84\u3002\n\n2. \u8c03\u6574\u538b\u7f29\u7ec4\n\n    \u4e0d\u77e5\u9053\u5728\u4ec0\u4e48\u7cbe\u795e\u72b6\u6001\u4e0b\u60f3\u51fa\u6765\u7684\u5947\u5f02\u65b9\u6cd5\u3002\n\n    \u8003\u8651\u5982\u679c\u6211\u4eec\u6bcf\u4e2a\u538b\u7f29\u7ec4\u90fd\u662f\u5076\u6570\u7684\u8bdd\uff08\u5176\u5b9e\u672c\u6765\u60f3\u7684\u662f\u5947\u6570\u7684\uff0c\u56e0\u4e3a\u5947\u6570\u7684\u538b\u7f29\u7ec4\u6bd4\u5076\u6570\u7684\u591a\uff0c\u4f46\u662f\u6709\u4e00\u4e2a bug \u7ea7\u7684 $0$ \u6240\u4ee5\u6ca1\u529e\u6cd5\uff09\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u628a\u6700\u540e\u4e00\u4f4d\u7701\u6389\u3002\n\n    \u5177\u4f53\u7684\u8c03\u6574\u65b9\u6cd5\u5c31\u9047\u5230\u5927\u4e8e $1$ \u7684\u5947\u6570\u5c31\u51cf\u4e00\uff0c\u7136\u540e\u518d\u9047\u5230\u5c31\u52a0\u56de\u53bb\uff0c\u7136\u540e\u5bf9\u4e8e $1$ \u5f3a\u5236\u52a0\u4e00\u3002\n\n    \u7136\u540e\u5168\u90e8\u9664\u4e8c\uff0c\u4f60\u53d1\u73b0\u5927\u90e8\u5206\u7684\u6570\u90fd\u5c0f\u4e8e\u7b49\u4e8e $13$\uff0c\u6240\u4ee5\u6211\u4eec\u6574\u4e00\u4e2a $14$ \u8fdb\u5236\u5373\u53ef\u3002\n\n    \u7531\u4e8e\u5bbd\u5ea6\u90fd\u5927\u4e8e $13$\uff0c\u6240\u4ee5\u4f60\u53d1\u73b0\u5bf9\u4e8e\u7b2c\u4e00\u4f4d\u4e00\u5b9a\u6070\u597d\u662f\u4e00\u4e2a\u5b57\u7b26\u8868\u793a\u5bbd\u5ea6\uff0c\u6240\u4ee5\u53ef\u4ee5\u5c06\u5176\u540e\u7684\u5206\u9694\u7b26\u5220\u53bb\u3002\n\n    \u51fa\u6765\u7684\u56fe\u50cf\u662f\u8fd9\u6837\u7684\uff1a\n\n    ```plain\n    ............####...........\n    ...........######..........\n    ........##########.........\n    .....############..........\n    ..################.........\n    .################..........\n    ##################.........\n    .################..........\n    ##################.........\n    .######..########..........\n    ..##......########.........\n    .........########..........\n    ..........########.........\n    .........########..........\n    ..........########.........\n    .........########..........\n    ..........########.........\n    .........########..........\n    ..........########.........\n    .........########..........\n    ..........########.........\n    .........########..........\n    ..........########.........\n    .........########..........\n    ..........########.........\n    .........########..........\n    ..........########.........\n    .........########..........\n    ..........########.........\n    .........########..........\n    ..........########.........\n    .........########..........\n    ###########################\n    ###########################\n    ###########################\n    ###########################\n    ###########################\n    #########################..\n    ```\n\n    \u4f46\u662f\u5728\u964d\u566a\u7684\u9f0e\u529b\u76f8\u52a9\u4e0b\u53cd\u6b63\u662f\u8fc7\u4e86\u3002\n\n\u7136\u540e\u53c8\u7814\u7a76\u4e00\u4e9b\u8bed\u6cd5\u603b\u4e4b\u662f\u538b\u4e0b\u53bb\u4e86\uff0c\u5220\u6389\u4e86\uff08\u6700\u540e\uff09\u4e00\u4e2a\u4f18\u5316\uff0c\u5e78\u597d\u53ea\u8dd1\u4e86 $1850ms$\u3002\n\n\u5176\u5b9e\u53ef\u4ee5\u4e24\u79cd\u538b\u7f29\u65b9\u6cd5\u7ed3\u5408\u4e00\u4e0b\uff0c\u4f46\u662f\u6211\u5df2\u7ecf\u628a\u6574\u4e2a\u4ee3\u7801\u538b\u7f29\u5f97\u5c11\u4e8e $3000\\text{byte}$ \u4e86\uff0c\u5c31\u4e0d\u7ba1\u4e86\u3002\n\n\u538b\u7f29\u60c5\u51b5\uff1a\n\n- Windows\uff1a$795\\text{byte}$\uff0c\u538b\u7f29\u7387 $4.6\\%$\u3002\n- Linux\uff1a$888\\text{byte}$\uff0c\u538b\u7f29\u7387 $5.2\\%$\u3002\n\n## \u6700\u540e\u7684\u6700\u540e\n\n~~\u4e0d\u540e\u8bb0\u4e86\u662f\u5427\u3002~~\n\n\u8fd9\u9053\u9898\u4f5c\u4e3a\u4e00\u9053\u5927\u6a21\u62df\u5199\u8d77\u6765\u5176\u5b9e\u975e\u5e38\u8212\u670d\uff08\u81f3\u5c11\u6211\u89c9\u5f97\u5f88\u8212\u670d\uff09\uff0c\u5c24\u5176\u7684\u8003\u9a8c\u4e86\u5bf9\u4e0e STL \u5e93\u3001\u6a21\u677f\u7b49 C++ \u7279\u6027\u7684\u7406\u89e3\uff08\u5927\u6982\uff1f\uff09\u3002\n\n~~\u4f46\u662f\u8017\u65f6\u8fd8\u662f\u786e\u5b9e\u8017\u65f6\u7684\uff0c\u800c\u4e14\u4e07\u4e00\u601d\u8def\u4e0d\u662f\u975e\u5e38\u597d\u7684\u8bdd\u4f1a\u5bc4\u7684\u5f88\u96be\u53d7\u3002~~\n\n\u5bf9\u4e8e\u56fe\u50cf\u538b\u7f29\u7684\u601d\u8003\u786e\u5b9e\u975e\u5e38\u6709\u8da3\uff0c\u6211\u89c9\u5f97\u4e0b\u6b21\u53ef\u4ee5\u51fa\u4e00\u4e2a\u7ed9\u5b9a\u56fe\u50cf\uff0c\u8981\u6c42\u63d0\u4ea4\u7a0b\u5e8f\u8f93\u51fa\u8be5\u56fe\u50cf\uff0c\u6309\u7167\u7a0b\u5e8f\u957f\u5ea6\u8bc4\u5206\u8fd9\u6837\u7684\u9898\u76ee\u3002\n\n\n\u4ee5\u4e0b\u662f\u5f00\u59cb\u7684\u4e00\u4e9b\u5c1d\u8bd5\u7684\u8fdb\u7a0b\uff08\u524d\u516b\u4efd\u4ee3\u7801\u53ef\u8bfb\uff0c\u81f3\u5c11\u672c\u4eba\u53ef\u8bfb\uff09\uff1a\n\n1. \uff08$23433\\text{byte}$\uff09[\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33195205)\n2. \uff08$9251\\text{byte}$\uff09[\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33199980)\n3. \uff08$8994\\text{byte}$\uff09[\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33203740)\n4. \uff08$7730\\text{byte}$\uff09[\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33223619)\n5. \uff08$6952\\text{byte}$\uff09[\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33228502)\n6. \uff08$6711\\text{byte}$\uff09[\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33248616)\n7. \uff08$6462\\text{byte}$\uff09[\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33608210)\n8. \uff08$5987\\text{byte}$\uff09[\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33692074)\n9. \uff08$5844\\text{byte}$\uff09[\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33745961)\n- \uff08\u53ef\u8bfb\u6027\u89e3\u7981 $4076\\text{byte}$\uff09[\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33711652)\n- \uff08\u53ef\u8bfb\u6027\u89e3\u7981 $3914\\text{byte}$\uff09[\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/33745378)\n\n---\n\nLinux \u4e0b\u53ef\u8fd0\u884c\u7684\u4ee3\u7801\u76ee\u524d\u4e3a $2953\\text{byte}$\u3002\n\n\n> 2022/10/27: \u4e4b\u524d\u7684\u4ee3\u7801\u51fa\u4e86\u95ee\u9898\uff0c\u89c1\u8c05\uff0c\u73b0\u5728\u8fd9\u4e2a\u80fd\u901a\u8fc7\u6240\u6709\u6570\u636e\u3002\n>\n> 2022/11/12: \u8be5\u4ee3\u7801\u7684 [\u63d0\u4ea4\u8bb0\u5f55](https://atcoder.jp/contests/birthday0410/submissions/36451684)\uff0cAtCoder \u8ba1\u7b97\u6362\u884c\u662f\u6309\u7167 $2\\text{byte}$ \u8ba1\u7b97\u7684\uff0c\u4f46\u8fd9\u4e0d\u5f71\u54cd\u6211\u4eec\u51b2\u8fdb $3000\\text{byte}$\u3002\n\nWindows \u4e0b\u53ef\u8fd0\u884c\u7684\u4ee3\u7801\u76ee\u524d\u4e3a $2871\\text{byte}$\u3002\n\n\u4ee5\u4e0a\u4e24\u4efd\u4ee3\u7801\u89c1 [\u526a\u8d34\u677f](https://www.luogu.com.cn/paste/qv5itlny)\u3002\n\n> \u867d\u7136\u4e0d\u9700\u8981\u201c\u76ee\u524d\u201d\u4e86\uff0c\u518d\u4e5f\u4e0d\u4f1a\u66f4\u65b0\u4e86\u3002\n\n\u672c\u5f53\u306e\u672c\u5f53\u306b\u7d42\u308f\u308a\n\n## \u540e\u9644\u6587\u4ef6\n\n\u611f\u8c22\u4f60\u770b\u5230\u8fd9\u91cc\u3002\n\n\u5982\u679c\u60f3\u5c1d\u8bd5\u8fd9\u9898\uff0c\u4ee5\u4e0b\u53ef\u80fd\u6709\u5e2e\u52a9\u3002\n\n\u4eba\u7c7b\u53ef\u8bfb\u5e26\u5927\u91cf\u6ce8\u91ca\u4ee3\u7801\uff08\u53bb\u9664\u4e86\u538b\u7f29\u8868\uff0c\u5305\u542b\u4e24\u79cd\u89e3\u7801\uff0c\u4e3a\u4e86\u4fdd\u7559\u6700\u77ed\u4ee3\u7801\u539f\u8c8c\uff0c\u6709\u4e9b\u5730\u65b9\u4e0d\u662f\u5f88\u53ef\u8bfb\uff09\uff1a\n\n```c++\n#include<bits/stdc++.h>\nusing namespace std;\nstruct image{\n    int h,w=0;\n    vector<vector<bool>> raw,null,vis;\n    void empty(int x){    // \u521d\u59cb\u5316 null \u6570\u7ec4\n        null.resize(h=x);\n        for(auto &i:null) i.resize(w);\n    }\n    image(auto *s){    // \u4ece\u5b57\u7b26\u96c6\u76f4\u63a5\u6784\u5efa\u56fe\u7247\n        for(raw.emplace_back();*s;++s)\n            *s<33?raw.emplace_back(),0\n                :raw.back().emplace_back(*s<46);\n\n        // \u6700\u540e\u4e00\u884c\u4f1a\u591a\u4e00\u4e2a\u6362\u884c\uff0c\u5c06\u5176\u5f39\u51fa\n        raw.pop_back();\n\n        w=raw.back().size();\n        empty(raw.size());\n    }\n    image(int x,int y){    // \u4ece\u957f\u5bbd\u6784\u5efa\u56fe\u7247\n        w=y+1;\n        empty(x+1);\n        raw=null;\n    }\n    image(const auto *s){\n        int p=1,c;\n\n        // \u5904\u7406\u5355\u4e2a\u538b\u7f29\u7ec4\n        auto get=[&](int k){\n            for(p^=1,k+=k;k--;\n                raw.back().size()==w?\n                    raw.emplace_back(),0:0)\n                raw.back().emplace_back(p);\n            };\n\n        raw.emplace_back();\n        w=*s-2;\n        // For Linux version\n        for(__uint128_t k=0;*++s;)\n            if(*s>1)k=k*124+*s-2;    // 124 \u8fdb\u5236\uff0c\u5206\u9694\u7b26\u4e3a 1\n            else if(k<99)get(k),k=0;\n            else for(;k;k/=14)get(k%14);\n\n        // For Windows version\n        for(__uint128_t k=0;c=(uint8_t)*++s;)    // \u6ce8\u610f\u8fd9\u91cc\u9700\u8981\u5c06 char \u5f3a\u8f6c\u4e3a unsigned char\n            if(c>1) k=k*254+c-2;    // 254 \u8fdb\u5236\uff0c\u5206\u9694\u7b26\u4e3a 2\n            else if(k<99) get(k),k=0;\n            else for(;k;k/=14) get(k%14);\n\n        empty(raw.size());\n    }\n    struct out{    // \u56fe\u50cf\u8fb9\u7f18\u7c7b\n        int a,b,c,d;\n        // a \u8868\u793a x \u8f74\u5de6\u8fb9\u7f18\n        // b \u8868\u793a x \u8f74\u53f3\u8fb9\u7f18\n        // c \u8868\u793a y \u8f74\u4e0b\u8fb9\u7f18\n        // d \u8868\u793a y \u8f74\u4e0a\u8fb9\u7f18\n        void add(out x){\n            a=min(a,x.a);\n            b=max(b,x.b);\n            c=min(c,x.c);\n            d=max(d,x.d);\n        }\n    };\n    out find(int x,int y){    // \u904d\u5386\u8fde\u901a\u5757\uff0c\u8fd4\u56de\u5176\u56db\u8fb9\u8303\u56f4\n        out re{x,x,y,y};\n        vis[x][y]=1;\n        for(int i:{-1,0,1})\n            for(int j:{-1,0,1})\n                if(int k=x+i,l=y+j;\n                    ~k&&~l&&k<h&&l<w&&!vis[k][l]&&raw[k][l]==raw[x][y])\n                    re.add(find(k,l));\n        return re;\n    }\n    template<typename T>void foreach(T func){    // \u904d\u5386\u6574\u4e2a\u56fe\u50cf\n        // \u6ce8\u610f\u8fd9\u91cc\u7684\u904d\u5386\u987a\u5e8f\u662f\u5148\u5217\u540e\u884c\uff0c\u8fd9\u662f\u4e3a\u4e86\u5206\u79bb\u56fe\u50cf\u7684\u65f6\u5019\u4e5f\u80fd\u4f7f\u7528\u8fd9\u4e2a API\n        for(int j=0;j<w;++j)\n            for(int i=0;i<h;++i)\n                func(i,j);\n    }\n    image& reno(){    // \u964d\u566a\n        vis=null;\n        foreach([&](int x,int y){\n            int c=0,k,l;\n            for(int i:{-1,0,1})\n                for(int j:{-1,0,1})\n                    c+=~(k=x+i-1)&&~(l=y+j-1)&&k<h&&l<w&&raw[k][l];\n            raw[x][y]=c>4;});\n        return *this;\n    }\n    vector<image> split(){    // \u5206\u79bb\u56fe\u50cf\n        vector<image> re;\n        vis=null;\n\n        // \u6ce8\u610f\u5982\u679c foreach \u662f\u5148\u884c\u540e\u5217\u7684\uff0c\u90a3\u4e48\u8fd9\u91cc\u5c31\u4e0d\u80fd\u4f7f\u7528\uff0c\u5fc5\u987b\u5148\u5217\u540e\u884c\n        foreach([&](int x,int y){\n            if(raw[x][y]&&!vis[x][y])\n                if(auto [a,b,c,d]=find(x,y);(b-a)*(d-c)>80){    // \u5982\u679c\u8054\u901a\u5757\u8fc7\u5c0f\uff0c\u653e\u5f03\n                    image now(b-a,d-c);\n\n                    // \u904d\u5386\u6574\u4e2a\u77e9\u5f62\u8303\u56f4\uff0c\u7136\u540e copy\n                    now.foreach([&](int x,int y){now.raw[x][y]=raw[x+a][y+c];});\n                    re.emplace_back(now);\n                }});\n        return re;\n    }\n    template<typename T>image trans(T c){    // \u6839\u636e\u7ed9\u5b9a\u51fd\u6570\u8fdb\u884c\u56fe\u50cf\u53d8\u6362\n        vector<pair<int,int>> point;\n        out side{h,0,w,0};\n        foreach([&](int x,int y){\n            if(raw[x][y]){\n                pair<int,int> p=c(x,y);\n                point.emplace_back(p);\n                side.add({p.first,p.first,p.second,p.second});    // \u628a\u56db\u8fb9\u8bb0\u5f55\u4e0b\u6765\n            }});\n\n        // \u5c06\u6240\u6709\u70b9\u6574\u4f53\u4f4d\u79fb\u81f3\u5408\u6cd5\u8303\u56f4\uff0c\u7136\u540e\u653e\u5165\u65b0\u56fe\u4e2d\n        image re(side.b-side.a,side.d-side.c);\n        for(auto i:point)\n            re.raw[i.first-side.a][i.second-side.c]=1;\n        return re.reno();    // \u6700\u540e\u964d\u566a\n    }\n    auto fit(int a,int b){    // \u5c06\u56fe\u50cf\u7f29\u653e\u4e3a\u7ed9\u5b9a\u5927\u5c0f\n        image re(a,b);\n        foreach([&](int x,int y){\n            if(raw[x][y])\n                re.raw[ceil(x*a/float(h-1))][ceil(y*b/float(w-1))]=1;\n        });\n        return re;\n    }\n    float match(image& x){    // \u5bf9\u7ed9\u5b9a\u56fe\u50cf\u8fdb\u884c\u5339\u914d\uff0c\u8fd4\u56de\u5b9e\u6570\u4f5c\u4e3a\u5339\u914d\u7387\n        int re=0,y=min(h,x.h)-1,z=min(w,x.w)-1;\n        if(abs(w*x.h/float(h*x.w)-1)<.3){    // \u5bf9\u4e8e\u957f\u5bbd\u5dee\u5f02\u8fc7\u5927\uff0c\u653e\u5f03\n            auto a=fit(y,z),b=x.fit(y,z);    // \u53d8\u6362\u4e3a\u540c\u4e00\u957f\u5bbd\n            // \u66b4\u529b\u5339\u914d\n            a.foreach([&](int x,int y){re+=a.raw[x][y]==b.raw[x][y];});\n        }\n        return(float)re/y/z;    // \u5176\u5b9e\u8fd9\u91cc\u7684 y,z \u5e94\u8be5\u52a0\u4e00\u7684\uff0c\u6240\u4ee5\u8fd9\u6837\u4f1a\u6709\u5927\u4e8e 1 \u7684\u5339\u914d\u7387\n    }\n};\nvector<image> t[16],a={\n\n/*\u538b\u7f29\u8868*/\n\n};\nint now=0,num=0,bestnum;\nvector<int> st0,st1;\nchar BuF[1<<21];\n\n// \u5224\u65ad\u8fd0\u7b97\u7b26\u53f7\uff0c\u7136\u540e\u5c06\u6570\u5b57\u6808\u9876\u4e0e\u4e0b\u4e00\u4e2a\u6808\u9876\u8fd0\u7b97\n#define calc(t,x)case t:st0.back()x##=top;break;\n\n// \u8fde\u7eed\u5f39\u51fa\u7b26\u53f7\u6808\u76f4\u5230\u5176\u4f18\u5148\u7ea7\u9ad8\u4e8e\u81ea\u5df1\n/* \u4f18\u5148\u7ea7\u4e3a\uff1a(     0\n           ) + - 1\n           * /   2\n*/\n// \u8d8a\u5c0f\u8d8a\u9ad8\n#define pops(e)\\\n    for(;st1.size()&&e;st1.pop_back()){\\\n        int top=st0.back();\\\n        st0.pop_back();\\\n        switch(st1.back()){\\\n            calc(12,+)\\\n            calc(13,-)\\\n            calc(14,*)\\\n            calc(15,/)\\\n        }\\\n    }\nint main(){\n    scanf(\"%*d%*d%*d \");\n    fread(BuF,1,2e6,stdin);\n    for(int i=0;i<16;++i)\n        for(int j=-15;j<16;j+=3){    // \u4ece -15 \u5230 15 \u5ea6\uff0c\u5206\u5ea6\u503c\u4e3a 3\n            float r=j*acos(-1)/180,c=cos(r),s=sin(r);\n\n            // \u65cb\u8f6c\u53d8\u6362\n            auto e=a[i].trans(\n                [&](int x,int y){return make_pair(x*c+y*s,y*c-x*s);});\n            for(float a:{-.1,.1})\n                for(float b:{-a,a})\n                    // \u526a\u5207\u53d8\u6362\n                    t[i].emplace_back(\n                        e.trans(\n                            [&](int x,int y){return make_pair(x+y*b,y+x*a);}));\n            t[i].emplace_back(e);\n        }\n    for(auto &i:image(BuF).reno().split()){\n        float bestmatch=0;\n        for(int j=0;j<16;++j)\n            for(auto &k:t[j])\n                if(float p=i.match(k);p>bestmatch)\n                    bestmatch=p,\n                    bestnum=j;\n\n        // bestnum \u5bf9\u5e94\u5b57\u7b26\u4e3a \"0123456789()+-*/\"[bestnum]\n        if(bestnum<10) now=now*10+bestnum,num=1;\n        else{\n            // \u5982\u679c\u6709\u6570\u5b57\uff0c\u5c06\u5176\u538b\u5165\u6808\n            if(num)\n                st0.emplace_back(now),\n                num=now=0;\n\n            // \u5982\u679c\u4e0d\u662f\u5de6\u62ec\u53f7\uff0c\u5c1d\u8bd5\u5f39\u6808\n            if(bestnum>10)\n                pops((bestnum<14||st1.back()>13)&&st1.back()>10)\n\n            // \u5982\u679c\u662f\u53f3\u62ec\u53f7\uff0c\u628a\u6808\u9876\u7684\u5de6\u62ec\u53f7\u5f39\u51fa\uff0c\u5426\u5219\u5165\u6808\n            bestnum==11?\n                st1.pop_back(),0:\n                st1.emplace_back(bestnum);\n        }\n    }\n    if(num) st0.emplace_back(now);\n    pops(1)    // \u5168\u90e8\u5f39\u6808\n    cout<<st0.back()<<endl;\n}\n```\n\n\u6570\u636e\u751f\u6210\u5668\uff08\u53ef\u4ee5\u751f\u6210\u5355\u4e2a\u5b57\u7b26\uff0c\u5e76\u8fdb\u884c\u6d4b\u8bd5\uff0c\u6ce8\u610f\u9700\u8981\u8c03\u6574\u88ab\u6d4b\u8bd5\u4ee3\u7801\u76f4\u63a5\u8f93\u51fa\u5339\u914d\u5b57\u7b26\u4e32\uff09\uff1a\n\n```c++\n#include<cmath>\n#include<vector>\n#include<string>\n#define cmin(x,y) if(x>y) x=y;\n#define cmax(x,y) if(x<y) x=y;\n#define eb emplace_back\nusing namespace std;\nusing db=double;\nusing uni=unsigned long long;\nconst int FSIZE=1<<26,INF=0x7fffffff,fx[8][2]={{1,0},{0,1},{-1,0},{0,-1},{1,1},{1,-1},{-1,1},{-1,-1}};\nconst db pi=acos(-1);\nstruct image{\n    int rx,ry;\n    vector<vector<bool>> raw,null,vis;\n    image(int x,int y){\n        raw.resize(rx=x+1);\n        ry=y+1;\n        for(int i=0;i<=x;++i) raw[i].resize(y+1);\n        null=raw;\n    }\n    image(initializer_list<uni> v){\n        int i=0;bool p=0;auto k=v.begin();\n        raw.resize(1);\n        auto get=[&](int k){\n            for(int j=0;j<k;++j){\n                raw[i].eb(p);\n                if(raw[i].size()==ry) raw.resize(++i+1);\n            }\n            p^=1;};\n        for(ry=*k;++k!=v.end();)\n            if(*k<190) get(*k);\n            else for(uni x=*k;x;x>>=5) get(x&31);\n        raw.pop_back();\n        null.resize(rx=raw.size());\n        for(int i=0;i<rx;++i) null[i].resize(ry);\n        print();\n    }\n    auto &operator[](int x){return(raw[x]);}\n    struct sqr{\n        int x0,x1,y0,y1;\n        void operator+=(sqr b){\n            cmin(x0,b.x0)cmax(x1,b.x1)\n            cmin(y0,b.y0)cmax(y1,b.y1)\n        }\n        void operator+=(pair<int,int> b){\n            cmin(x0,b.first)cmax(x1,b.first)\n            cmin(y0,b.second)cmax(y1,b.second)\n        }\n    };\n    template<class T>void foreach(T func){\n        for(int i=0;i<rx;++i)\n            for(int j=0;j<ry;++j) func(i,j);\n    }\n    template<class T>auto trans(T func){\n        vector<pair<int,int>> point;\n        sqr out={INF,-INF,INF,-INF};\n        foreach([&](int x,int y){\n            if(!raw[x][y]) return;\n            auto p=func(x,y);\n            point.eb(p);\n            out+=p;});\n        image re(out.x1-out.x0,out.y1-out.y0);\n        for(auto i:point)\n            re[i.first-out.x0][i.second-out.y0]=1;\n        return(re);\n    }\n    auto rotate(db ang){\n        ang=ang/180*pi;\n        db csa=cos(ang),sia=sin(ang),cex=rx/2.,cey=ry/2.;\n        return(trans([&](int x,int y){\n            return(make_pair((x-cex)*csa+(y-cey)*sia+cex,-(x-cex)*sia+(y-cey)*csa+cey));}));\n    }\n    auto cut(db cx,db cy){\n        return(trans([&](int x,int y){return(make_pair(x+y*cy,y+x*cx));}));\n    }\n    auto fit(int rxt,int ryt){\n        db delx=(db)(rxt-1)/(rx-1),dely=(db)(ryt-1)/(ry-1);\n        return(trans([&](int x,int y){return(make_pair(ceil(x*delx),ceil(y*dely)));}));\n    }\n    void print(){\n        foreach([&](int x,int y){\n            putchar(raw[x][y]?'#':'.');\n            if(y==ry-1) puts(\"\");});\n    }\n};\nvector<image> charset({{30,11,8,20,12,16,16,13,18,11,20,9,22,7,24,6,10,4,10,5,9,8,9,4,8,10,8,3,9,10,9,2,8,12,8,2,8,12,8,2,8,12,8,1,8,14,16,14,16,14,16,\n14,16,14,16,14,16,14,16,14,16,14,16,14,16,14,8,1,8,12,8,2,8,12,8,2,8,12,8,2,9,10,9,3,8,10,8,4,9,8,9,5,10,4,10,6,24,7,22,9,20,11,18,13,16,16,12,20,8},\n{27,13,4,21,7,17,10,14,13,11,16,10,17,10,17,10,17,10,17,11,6,2,8,11,3,5,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,19,8,\n19,8,19,8,19,8,19,8,19,8,19,8,10,134,1,26},{28,9,9,16,14,11,19,8,21,6,23,5,23,5,24,4,9,6,9,4,7,9,9,3,7,10,8,3,7,10,8,3,7,10,8,3,7,10,8,4,6,10,8,19,9,\n19,8,19,9,18,10,17,10,17,11,16,11,16,11,16,11,16,11,16,11,16,11,16,11,5,5,6,11,5,7,4,11,6,7,3,11,7,7,2,11,8,7,1,11,9,147,1,27},\n{28,9,10,14,16,10,20,7,22,6,23,5,24,4,24,4,8,7,10,3,7,9,9,3,7,10,8,3,7,10,8,4,6,10,8,20,8,20,8,19,8,19,9,12,15,12,15,13,14,14,15,13,16,13,16,19,10,20,\n8,20,9,20,8,20,8,20,8,20,8,19,9,2,3,13,10,1,8,8,10,2,26,2,25,2,26,3,24,4,22,9,17,14,11},\n{30,17,5,24,7,22,8,21,9,20,10,19,11,19,11,18,12,17,13,16,14,15,15,14,16,14,8,1,7,13,8,2,7,12,8,3,7,11,8,4,7,10,9,4,7,10,8,5,7,9,8,6,7,8,8,7,7,7,180,\n15,8,22,8,22,8,22,8,22,8,22,8,16,20,9,21,9,21,9,21,9,21,10,20},\n{28,3,22,6,23,5,23,5,23,5,23,5,22,6,7,21,7,21,7,21,7,21,7,21,7,20,8,2,8,10,20,8,22,6,23,5,24,4,24,4,25,3,8,7,10,6,2,11,9,20,9,20,8,20,8,20,8,20,8,20,\n8,20,8,3,1,15,9,2,4,12,9,2,8,7,11,2,26,2,25,2,25,4,23,6,21,9,17,15,10},\n{29,20,6,18,11,15,15,12,17,10,19,9,20,8,20,8,16,12,12,16,11,18,9,19,9,20,8,20,8,21,8,21,7,4,8,10,7,2,13,6,25,4,26,3,27,2,27,2,12,6,10,1,10,9,9,1,9,11,\n17,13,16,13,16,13,8,1,7,13,8,1,7,13,8,1,8,11,9,1,9,9,9,3,10,5,11,4,25,4,24,6,22,8,20,10,18,13,14,18,8},\n{28,0,27,1,139,1,7,11,9,1,7,11,9,1,7,10,9,2,7,10,9,2,7,10,8,3,7,9,9,3,7,9,8,4,7,8,9,5,5,9,9,19,8,19,9,19,8,19,9,19,8,19,9,19,9,19,8,19,9,19,8,19,9,19,\n8,20,8,19,8,20,8,19,9,19,8,20,8,19,8,20,8,20,7,21,7,23,5},\n{28,10,9,17,13,13,17,10,19,8,21,6,23,5,23,5,9,5,9,4,9,7,9,3,8,9,8,3,8,9,8,3,8,9,8,3,8,9,8,3,8,9,8,4,8,7,8,5,9,5,9,6,21,8,19,10,17,11,17,9,21,6,23,4,9,\n6,10,2,8,10,8,2,8,10,17,12,16,12,16,12,16,12,17,10,18,10,9,1,10,6,10,2,26,3,24,4,24,5,22,7,20,10,16,15,10},\n{28,9,9,17,13,13,17,10,19,8,21,6,23,4,24,4,10,6,9,3,9,8,9,1,9,10,8,1,8,12,7,1,8,12,7,1,8,12,16,12,16,12,17,10,9,1,8,9,10,1,10,6,11,2,26,2,26,3,25,4,\n24,6,12,2,8,8,8,4,7,21,7,20,8,20,8,19,8,19,9,17,10,16,12,12,15,8,19,8,19,9,18,10,16,12,14,14,12,17,6},\n{21,15,4,16,6,13,8,12,10,10,11,9,12,8,12,8,11,9,11,9,11,10,10,10,10,11,9,11,9,12,8,12,9,12,8,12,9,12,8,13,8,13,8,12,9,12,8,13,8,13,8,13,8,13,8,13,\n8,13,8,13,8,13,8,13,8,14,8,13,8,13,8,13,9,13,8,13,9,12,9,13,9,12,10,12,9,13,9,12,10,12,11,11,11,11,11,11,12,10,11,11,10,12,9,13,7,16,4,19,1},\n{21,2,4,16,6,14,9,12,10,11,11,10,12,10,12,11,11,11,11,11,10,12,10,12,10,12,9,13,9,13,8,13,9,13,8,13,9,13,8,13,8,13,8,13,9,13,8,13,8,13,8,13,8,13,8,\n13,8,13,8,13,8,13,8,13,8,12,8,13,8,13,8,12,9,12,8,12,9,12,9,11,9,11,10,10,10,11,9,10,11,9,11,9,11,9,11,8,12,9,11,10,10,11,9,13,7,15,4,18,1},\n{27,11,5,21,7,20,7,20,7,20,7,20,7,20,7,20,7,20,7,20,7,10,189,10,7,20,7,20,7,20,7,20,7,20,7,20,7,20,7,20,7,20,7,21,5},\n{28,1,26,1,140,1,32},\n{26,11,4,21,6,20,7,18,8,18,8,19,7,19,6,11,5,4,6,5,4,2,6,3,6,3,16,2,5,1,24,1,62,1,24,7,14,15,8,17,11,14,13,11,8,1,7,9,8,2,8,8,8,2,9,6,8,4,8,6,8,4,8,7,\n7,5,7,8,5,6,6,10,3,9,2},\n{28,22,4,24,6,21,7,21,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,21,7,20,8,\n20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,8,20,7,20,8,20,7,20,8,20,7,20,8,20,7,22,6,23,5}});\nimage out(60,40);\nchar charname[17]=\"0123456789()+-*/\";\n#include<random>\n#include<chrono>\nmt19937 rnd(chrono::steady_clock::now().time_since_epoch().count());\nint main(){\n    for(;;){\n        freopen(\"AT678.in\",\"w\",stdout);\n        printf(\"0 0 0\\n\");\n        int p=rnd()&15;\n        image i=charset[p];\n        uniform_real_distribution<> R1(0.9,1);\n        uniform_real_distribution<> R2(-.1,.1);\n        db a=R1(rnd),b=R1(rnd),c=R1(rnd);\n        i=i.fit(i.rx*a,i.ry*a);\n//        i.print();\n        i=i.fit(i.rx*b,i.ry);\n//        i.print();\n        i=i.fit(i.rx,i.ry*c);\n//        i.print();\n        i=i.rotate(uniform_real_distribution<>(-18,18)(rnd));\n//        i.print();\n        i=i.cut(R2(rnd),R2(rnd));\n//        i.print();\n        out=image(60,40);\n        i.foreach([&](int x,int y){\n            out[x+5][y+5]=i[x][y];\n        });\n        out.foreach([&](int x,int y){\n            if(!uniform_int_distribution<>(0,19)(rnd))\n                out.raw[x][y]=!out.raw[x][y];\n        });\n        out.print();\n        fclose(stdout);\n        freopen(\"\",\"w\",stdout);\n        printf(\"%c\\n\",charname[p]);\n        system(\"AT678_s4tmp < AT678.in > AT678.out\");\n        freopen(\"AT678.out\",\"r\",stdin);\n        if(getchar()!=charname[p]){\n            exit(1);\n        }\n    }\n}\n```",
        "postTime": 1657713273,
        "uid": 111069,
        "name": "UNVRS",
        "ccfLevel": 0,
        "title": "AT Birthday0410 X - \u8bba\u5982\u4f55\u5728 3k \u4ee5\u5185\u89e3\u51b3\u6218\u6597"
    }
]