[
    {
        "content": "## ABC272F\n\n*2238\n\n\u89c2\u524d\u63d0\u793a\uff1a\u7531\u4e8e\u7b14\u8005\u592a\u5f31\u5c0f\u4e86\u6ca1\u6709\u529b\u91cf\uff0c\u6240\u4ee5\u8fd9\u662f\u4e00\u7bc7\u4f7f\u7528\u54c8\u5e0c+\u4e8c\u5206\u4ee5 $O(n \\log^2n)$ \u7684\u590d\u6742\u5ea6\u6c42\u89e3 SA \u6570\u7ec4\u7684\u9898\u89e3\u3002\n\n### \u9898\u610f\n\n\u7ed9\u51fa\u4e24\u4e2a\u4ec5\u542b\u5c0f\u5199\u5b57\u6bcd\u7684\u957f\u5ea6\u4e3a $N$ \u7684\u5b57\u7b26\u4e32 $S,T$\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u5b57\u7b26\u4e32 $X$ \u548c\u4e00\u4e2a\u6574\u6570 $i$\uff0c\u5b9a\u4e49 $f(X,i)$ \u4e3a\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c $i$ \u904d\u540e\u7684\u7ed3\u679c\uff1a\n\n- \u79fb\u9664\u5b57\u7b26\u4e32 $X$ \u7684\u9996\u4e2a\u5b57\u7b26\u5e76\u5c06\u5176\u52a0\u5230\u5b57\u7b26\u4e32\u6700\u540e\u3002\n\n\u627e\u51fa\u7b26\u5408\u4ee5\u4e0b\u6761\u4ef6\u7684\u6570\u5bf9 $(i,j)$ \u7684\u6570\u91cf\uff1a\n\n- $1\\le i,j\\le N-1$\u3002\n- $f(S,i)$ \u7684\u5b57\u5178\u5e8f\u5c0f\u4e8e\u7b49\u4e8e $f(T,j)$ \u7684\u5b57\u5178\u5e8f\u3002\n\n### \u9898\u89e3\n\n\u9898\u4e2d\u7ed9\u51fa\u7684\u64cd\u4f5c\u76f8\u5f53\u4e8e\u6784\u6210\u4e86\u4e00\u4e2a \u201c\u5b57\u7b26\u73af\u201d\uff0c\u90a3\u4e48\u4e3a\u4e86\u4fbf\u4e8e\u8ba1\u7b97\u5f53\u7136\u8981\u5148\u7834\u73af\u4e3a\u94fe\u3002\u5177\u4f53\u5730\uff0c\u6211\u4eec\u5c06 $S,T$ \u4e32\u5404\u5c06\u81ea\u8eab\u590d\u5236\u4e00\u4efd\u7136\u540e\u76f4\u63a5\u62fc\u63a5\u5728\u81ea\u5df1\u540e\u9762\uff0c\u8fd9\u6837\u4e00\u6765\u5bf9\u4e8e\u4efb\u610f\u7684 $1\\le i\\le N$ \uff0c$S_i,S_{i+1},\\dots,S_{i+N-1}$ \u5373\u4e3a $f(S,i-1)$ \u7684\u7ed3\u679c\u3002\n\n\u7136\u540e\u4e00\u4e2a $i$ \u7684\u8d21\u732e\u5373\u4e3a\u5b57\u7b26\u4e32\u6392\u540d\u5728 $i$ \u4e4b\u540e\u7684 $j$ \uff0c\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u5bf9\u6240\u6709\u7684\u957f\u4e3a $N$ \u7684\u5b57\u7b26\u4e32\u6392\u5e8f\uff0c\u7136\u540e\u5f97\u5230\u8fd9\u6837\u505a\u7684\u4e0b\u6807\u987a\u5e8f\uff0c\u4e5f\u5c31\u662f\u6c42\u51fa\u4e24\u4e2a\u4e32\u5408\u5e76\u4e4b\u540e\u7684 SA \u6570\u7ec4\u5c31\u597d\u4e86\uff08\u5b9e\u9645\u4e0a\u5e76\u6ca1\u6709\u957f\u5ea6\u5747\u4e3a $N$ \u7684\u9650\u5236\uff0c\u4f46\u5728\u672c\u9898\u4e2d\u4e8c\u8005\u8d77\u5230\u7684\u4f5c\u7528\u7b49\u4ef7\uff09\u3002\n\n\u90a3\u4e48\u600e\u4e48\u6bd4\u8f83\u5462\uff1f\u6392\u5e8f\u672c\u8eab\u662f $O(n\\log n)$ \u7684\uff0c\u6bd4\u8f83\u957f\u5ea6\u4e3a $N$ \u7684\u5b57\u7b26\u4e32\u5b57\u5178\u5e8f\u662f $O(n)$ \u7684\uff0c\u8fd9\u6837\u505a\u6700\u574f\u662f $O(n^2\\log n)$ \u7684\uff0c\u4e0d\u80fd\u63a5\u53d7\u3002\n\n\u53ef\u4ee5\u4f7f\u7528\u54c8\u5e0c+\u4e8c\u5206\u6765\u4f18\u5316\u5b57\u7b26\u4e32\u6bd4\u8f83\u3002\u54c8\u5e0c\u53ef\u4ee5\u68c0\u67e5\u4e24\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u76f8\u7b49\uff0c\u90a3\u4e48\u5728\u6bd4\u8f83\u4e24\u4e2a\u5b57\u7b26\u4e32\u65f6\uff0c\u53ef\u4ee5\u4e8c\u5206\u51fa\u4e24\u4e2a\u5b57\u7b26\u4e32\u6700\u957f\u7684\u76f8\u540c\u524d\u7f00\uff0c\u7136\u540e\u6bd4\u8f83\u76f8\u540c\u524d\u7f00\u7684\u540e\u4e00\u4f4d\uff0c\u4e5f\u5c31\u662f\u7b2c\u4e00\u4e2a\u4e0d\u540c\u4f4d\u7684\u5927\u5c0f\u5373\u53ef\u3002\n\n\u8fd9\u6837\u5c31\u80fd\u4ee5 $O(n\\log^2n)$ \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u5b8c\u6210\u6392\u5e8f\uff0c\u6700\u540e $O(n)$ \u4ece\u540e\u5f80\u524d\u626b\u6392\u5e8f\u540e\u7684\u4e0b\u6807\uff0c\u7ef4\u62a4\u4e00\u4e2a $cnt$ \uff0c\u5982\u679c\u8be5\u4e0b\u6807\u662f $T$ \u7684\u90a3\u4e48 $cnt\u2190cnt+1$ \uff0c\u53cd\u4e4b $ans\u2190ans+cnt$\uff0c\u5373\u53ef\u5b8c\u6210\u7edf\u8ba1\u7b54\u6848\u3002\n\n### \u4ee3\u7801\n\n\u4e3a\u4e86\u4fbf\u4e8e\u6392\u5e8f\u4e0e\u7edf\u8ba1\u5c06 $T$ \u4e32\u62fc\u5728\u4e86 $S$ \u4e32\u540e\u3002\n\n```cpp\ntypedef unsigned long long ll;\nconst ll maxn=2e5+5,seed=29;\nll n;\nchar c[maxn<<2];\nll h[maxn<<2],fac[maxn];\nll calc(ll l,ll r){\n\treturn (h[r]-(h[l-1]*fac[r-l+1]));\n}\nbool cmp(ll x,ll y){\n\tll l=1,r=n,ans=0;\n\twhile(l<=r){\n\t\tll mid=(l+r)>>1;\n\t\tif(calc(x,x+mid-1)==calc(y,y+mid-1)){\n\t\t\tans=mid;\n\t\t\tl=mid+1;\n\t\t}\n\t\telse r=mid-1;\n\t}\n\treturn c[x+ans]==c[y+ans]?x<y:c[x+ans]<c[y+ans];//\u5982\u679c\u4e24\u4e2a\u5b57\u7b26\u4e32\u76f8\u7b49\u90a3\u4e48\u4f18\u5148\u5c06\u7f16\u53f7\u9760\u524d\u7684\u653e\u5728\u524d\u9762\n\t//\u56e0\u4e3a\u9898\u76ee\u8981\u6c42\u7684\u662f\u7edf\u8ba1\u5c0f\u4e8e\u7b49\u4e8e\u7684 f(T,j)\uff0c\u610f\u5473\u7740\u76f8\u7b49\u7684 T \u4e5f\u8981\u88ab\u8bb0\u5165\u7b54\u6848\n\t//\u524d\u9762\u6211\u4eec\u628a T \u62fc\u5728 S \u540e\uff0c\u6240\u4ee5 T \u4e32\u7684\u4efb\u610f\u4e00\u4e2a\u4e0b\u6807\u4e00\u5b9a\u90fd\u6bd4 S \u7684\u4efb\u610f\u4e00\u4e2a\u5927\n}\nll sa[maxn<<1];\nvoid solve(){\n\tcin>>n;\n\tcin>>(c+1);\n\tfac[0]=1;\n\tfor(ll i=1;i<=n;i++){\n\t\tfac[i]=fac[i-1]*seed;\n\t\tc[i+n]=c[i];\n\t\tsa[i]=i;\n\t}\n\tcin>>(c+2*n+1);\n\tfor(ll i=1;i<=n;i++){\n\t\tc[i+3*n]=c[i+2*n];\n\t\tsa[n+i]=2*n+i;\n\t}\n\tfor(ll i=1;i<=n*4;i++)h[i]=h[i-1]*seed+c[i]-'a'+1;\n\tsort(sa+1,sa+1+n*2,cmp);\n\tll ans=0,cnt=0;\n\tfor(ll i=n*2;i>=1;i--){\n\t\tif(sa[i]>n)cnt++;\n\t\telse ans+=cnt;\n\t}\n\tcout<<ans<<endl;\n\treturn ;\n}\n```\n\n",
        "postTime": 1668760517,
        "uid": 93707,
        "name": "Rnfmabj",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 [ABC272F] Two Strings"
    },
    {
        "content": "#  [[ABC272F] Two Strings](https://www.luogu.com.cn/problem/AT_abc272_f) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.tsawke.com?t=ABC272F)\n\n## \u9898\u9762\n\n\u7ed9\u5b9a\u4e24\u5b57\u7b26\u4e32 $ S, T $\uff0c\u6c42\u4e24\u5b57\u7b26\u4e32\u53ca\u5176\u5206\u522b\u5faa\u73af\u540c\u6784\u7684\u6240\u6709\u5b57\u7b26\u4e32\u6309\u5b57\u5178\u5e8f\u6392\u5e8f\u540e\u987a\u5e8f\u5bf9\u4e2a\u6570\uff0c\u5b9a\u4e49\u987a\u5e8f\u5bf9\u4e3a $ S $ \u5faa\u73af\u540c\u6784\u7684\u5b57\u7b26\u4e32\u5c0f\u4e8e\u7b49\u4e8e $ T $ \u5faa\u73af\u540c\u6784\u7684\u5b57\u7b26\u4e32\u7684\u5bf9\u6570\u3002\n\n## Solution\n\n~~\u4e8c\u5206\u54c8\u5e0c~~\uff0c~~SA~~\uff0cSAM\u3002\n\n\u9996\u5148\u7ecf\u5178\u5957\u8def\uff0c\u5bf9\u4e8e\u5faa\u73af\u540c\u6784\u76f4\u63a5\u65ad\u73af\u7136\u540e\u500d\u957f\uff0c\u4ee5\u6b64\u5176\u957f\u5ea6\u4e3a $ n $ \u7684\u5b50\u4e32\u53ef\u4ee5\u8868\u793a\u6240\u6709\u5faa\u73af\u540c\u6784\u7684\u4e32\uff0c\u4e8e\u662f\u60f3\u5230\u5bf9\u4e8e\u672c\u9898\uff0c\u500d\u957f $ S, T $\uff0c\u6309\u7167 `S + S + T + T` \u7684\u987a\u5e8f\u6392\u4e00\u4e0b\uff0c\u6b64\u65f6\u5bf9\u4e8e\u5176\u4e2d\u8d77\u59cb\u70b9\u4e3a $ [1, n] \\cup [2n + 1, 3n] $\uff0c\u957f\u5ea6\u4e3a $ n $ \u7684\u6240\u6709\u5b50\u4e32\u8fdb\u884c\u5b57\u5178\u5e8f\u6392\u5e8f\u7136\u540e\u6c42\u987a\u5e8f\u5bf9\u5373\u53ef\u3002\n\n\u4e0a\u8ff0\u6392\u5e8f\u8fc7\u7a0b\u663e\u7136\u53ef\u4ee5\u54c8\u5e0c\u4e4b\u540e\uff0c\u4e8c\u5206\u5224\u65ad\uff0c\u590d\u6742\u5ea6\u5927\u6982\u662f $ O(n \\log^2 n) $\uff0c\u4f46\u662f\u8fd9\u6837\u4e0d\u591f\u4f18\u79c0\uff0c\u663e\u7136\u4e5f\u53ef\u4ee5\u7528 SA \u6c42\u89e3\uff0c\u4f46\u662f\u6211\u4e0d\u60f3\u5199 SA\uff0c\u4e8e\u662f\u6211\u4eec\u8003\u8651\u5f3a\u884c\u4f7f\u7528 SAM \u89e3\u51b3\u3002\n\n\u8fd9\u4e2a\u505a\u6cd5\u5e38\u6570\u8f83\u5927\u4e14\u7ec6\u8282\u8f83\u591a\uff0c\u9700\u8981\u5bf9 SAM \u6709\u4e00\u5b9a\u7684\u7406\u89e3\uff0c\u5efa\u8bae\u5148\u5c1d\u8bd5\u7528 SAM \u5199\u4e00\u4e0b\u540e\u7f00\u6392\u5e8f\u540e\u518d\u8003\u8651\u8fd9\u9053\u9898\u3002\n\n\u518d\u6b21\u601d\u8003\u4e00\u4e0b\u6211\u4eec\u7684\u95ee\u9898\uff0c\u663e\u7136\u53ef\u4ee5\u8f6c\u6362\u4e3a\u5bf9\u539f\u4e32\u7684\u6240\u6709\u5b9a\u957f\uff08\u5373\u957f\u5ea6\u4e3a $ n $\uff09\u5b50\u4e32\u4e4b\u95f4\u53ef\u91cd\u590d\u5730\u6392\u5e8f\u3002\n\n\u4e0d\u8003\u8651\u53ef\u91cd\u590d\uff0c\u4e0d\u8003\u8651\u590d\u6742\u5ea6\uff0c\u4e00\u4e2a\u663e\u800c\u6613\u89c1\u7684\u601d\u8def\u5c31\u662f\u6211\u4eec\u987a\u5e8f\u63d2\u5165\u5efa\u51fa SAM\uff0c\u663e\u7136\u5728 SAM \u4e2d\u6bcf\u8d70\u4e00\u6b65\u5c31\u4f1a\u4f7f\u957f\u5ea6 $ +1 $\uff0c\u4e14 SAM \u53ef\u4ee5\u8868\u793a\u51fa\u539f\u4e32\u7684\u4efb\u610f\u5b50\u4e32\uff0c\u4e8e\u662f\u6211\u4eec\u5728 SAM\uff08\u5177\u4f53\u6765\u8bf4\u5c31\u662f SAM \u7684 DAG\uff09\u4e0a dfs\uff0c\u7136\u540e\u8d2a\u5fc3\u5730\u4f18\u5148\u8d70\u5b57\u5178\u5e8f\u8f83\u5c0f\u7684 `trans`\uff0c\u8fd9\u6837\u5f53\u6df1\u5ea6\uff08\u6216\u8005\u8bf4\u6b65\u6570\uff09\u8fbe\u5230 $ n $ \u7684\u65f6\u5019\uff0c\u6211\u4eec\u76f4\u63a5\u5c06\u8fd9\u4e2a\u70b9\u5bf9\u5e94\u7684\u63d2\u5165\u7684\u4f4d\u7f6e $ idx $ \u5b58\u4e0b\u6765\uff0c\u8fd9\u4e2a\u5b58\u50a8\u7684\u987a\u5e8f\u5c31\u662f\u5bf9\u5e94\u7ec8\u6b62\u4e8e $ idx $ \u957f\u5ea6\u4e3a $ n $ \u7684\u5b57\u7b26\u4e32\u4e4b\u95f4\u7684\u5b57\u5178\u5e8f\u987a\u5e8f\u5173\u7cfb\u3002\n\n\u73b0\u5728\u8ba9\u6211\u4eec\u4f9d\u6b21\u89e3\u51b3\u8fd9\u4e9b\u95ee\u9898\u3002\n\n\u9996\u5148\u5bf9\u4e8e\u91cd\u590d\u7684\u95ee\u9898\uff0c\u7ec8\u6b62\u8282\u70b9\uff0c\u6216\u8005\u8bf4\u5c31\u662f $ endpos $ \u4e0d\u540c\u7684\u76f8\u540c\u4e32\uff0c\u6211\u4eec\u5e94\u8be5\u5747\u4fdd\u7559\uff0c\u800c\u4e0a\u8ff0\u8fc7\u7a0b\u4e2d\u663e\u7136\u6211\u4eec\u5bf9\u4e8e\u4e00\u4e2a $ endpos $ \u7684\u7b49\u4ef7\u7c7b\u4e2d\u53ea\u4fdd\u7559\u4e86\u4e00\u4e2a\uff0c\u800c\u8fd9\u4e2a\u4e5f\u5f88\u597d\u5904\u7406\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5bf9\u4e8e\u627e\u5230\u7684\u8282\u70b9\uff0c\u904d\u5386\u5176\u5728 Parent Tree \u4e0a\u7684\u6574\u4e2a\u5b50\u6811\u4fdd\u7559\u6574\u68f5\u5b50\u6811\u4e0a\u7684\u6240\u6709 $ idx $ \u5373\u53ef\u3002\n\n\u7136\u540e\u8003\u8651\u590d\u6742\u5ea6\uff0c\u4e00\u822c\u6765\u8bb2\u6811\u4e0a\u7684\u641c\u7d22\u662f\u53ef\u63a7\u7684\uff0c\u800c DAG \u4e0a\u7684\u641c\u7d22\u5219\u4e0d\u540c\uff0c\u751a\u81f3\u662f\u6307\u6570\u7ea7\u7684\uff0c\u4e8e\u662f\u6211\u4eec\u60f3\u5230\u5c1d\u8bd5\u5c06\u8fd9\u4e2a\u8fc7\u7a0b\u4ece SAM \u4e0a\u641c\u7d22\u8f6c\u4e3a\u4ece Parent Tree \u4e0a\u641c\u7d22\uff0c\u8fd9\u4e00\u90e8\u5206\u7684\u601d\u8def\u4e0e SAM \u6c42 SA \u8f83\u4e3a\u76f8\u4f3c\uff0c\u9996\u5148\u601d\u8003 SAM \u4e0e Parent Tree \u7684\u533a\u522b\uff0cSAM \u4e2d\u7684\u8fb9\u662f\u5728\u5c3e\u90e8\u8ffd\u52a0\u5b57\u7b26\uff0c\u800c Parent Tree \u5219\u662f\u5728\u524d\u9762\u63d2\u5165\u5b57\u7b26\u3002\u6211\u4eec\u8003\u8651\u5c06\u539f\u4e32\u5012\u5e8f\u63d2\u5165 SAM\uff0c\u8fd9\u6837\u5728 Parent Tree \u4e2d\u5411\u66f4\u6df1\u8d70\u7684\u65f6\u5019\u610f\u4e49\u5c31\u4f1a\u53d8\u4e3a\u8ffd\u52a0\u540e\u7f00\uff0c\u800c\u6bcf\u4e2a\u7b49\u4ef7\u7c7b\u4e2d\u53c8\u4ee3\u8868\u7740\u8fde\u7eed\u957f\u5ea6\u7684\u5b50\u4e32\uff0c\u90a3\u4e48\u5f53\u6211\u4eec\u5728 Parent Tree \u641c\u7d22\u65f6\u82e5 $ len \\ge n $\uff0c\u5219\u8bf4\u660e\u5f53\u524d\u6240\u5728\u7684 $ endpos $ \u7b49\u4ef7\u7c7b\u4e2d\u5b50\u4e32\u957f\u5ea6\u521a\u597d\u4f1a\u5305\u62ec $ n $\uff0c\u4e8e\u662f\u518d\u6b21\u641c\u7d22\u8fd9\u4e2a\u70b9\u7684\u5b50\u6811\u5e76\u4fdd\u7559\u5373\u53ef\u3002\n\n\u63a5\u4e0b\u6765\u4e0d\u96be\u53d1\u73b0\u8fd9\u6837\u662f\u4e0d\u5b58\u5728\u8d2a\u5fc3\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\u6b64\u8fc7\u7a0b\u662f\u65e0\u5e8f\u7684\uff0c\u800c `link` \u5e76\u4e0d\u50cf `trans` \u4e00\u6837\u672c\u8eab\u5e26\u6709\u5b57\u7b26\uff0c\u800c\u5bf9\u4e8e\u8fd9\u91cc\u7684\u5904\u7406\u53c8\u8981\u8003\u8651\u5230 SAM \u4e2d Parent Tree \u7684\u672c\u8d28\uff0c\u5373\u5728 SAM \u4e2d\u8fdb\u884c\u538b\u7f29\uff0c\u6362\u53e5\u8bdd\u8bf4\u5c31\u662f\u5bf9\u4e8e\u4e00\u4e2a $ v \\rightarrow u $ \u7684 `link`\uff0cParent Tree \u4e2d $ u $ \u4e3a $ v $ \u7684\u5b50\u8282\u70b9\uff0c\u90a3\u4e48\u5e94\u8be5\u6ee1\u8db3 $ u $ \u8ffd\u52a0\u82e5\u5e72\u957f\u5ea6\u540e\u8fbe\u5230 $ v $\uff0c\u800c\u6b64\u65f6\u6211\u4eec\u7684\u8d2a\u5fc3\u5c31\u9700\u8981\u8003\u8651\u5230\u4ece $ u $ \u5230 $ v $ \u7684\u8fc7\u7a0b\u4e2d\u7684 $ u $ \u4e4b\u540e\u7684\u7b2c\u4e00\u4e2a\u5b57\u7b26\u7684\u5b57\u5178\u5e8f\u5173\u7cfb\uff0c\u8fd9\u4e2a\u662f\u663e\u7136\u7684\uff0c\u4e14\u82e5\u7b2c\u4e00\u4e2a\u5b57\u7b26\u76f8\u540c\u90a3\u4e48\u4e00\u5b9a\u4e0d\u4f1a\u88ab\u5206\u88c2\u6210\u4e24\u4e2a\u70b9\uff0c\u6240\u4ee5\u6211\u4eec\u4f9d\u6b21\u4e3a\u4f9d\u636e\uff0c\u60f3\u5230 $ u $ \u662f $ v $ \u7684\u524d\u7f00\uff0c\u90a3\u4e48\u4ece $ v $ \u7684\u521d\u59cb\u4f4d\u7f6e\uff08\u6ce8\u610f\u8fd9\u91cc\u53cd\u5411\u63d2\u5165\u539f\u4e32\u540e $ endpos $ \u6216\u8005\u8bf4\u4ee3\u7801\u4e2d\u7684 $ idx $ \u7684\u610f\u4e49\u6539\u4e3a\u5b50\u4e32\u521d\u59cb\u4f4d\u7f6e\uff09\u4f4d\u79fb $ u $ \u7684\u957f\u5ea6\u540e\u4ee5\u539f\u4e32\u4e2d\u7684\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5b57\u7b26\u4e3a\u5173\u952e\u5b57\u8fdb\u884c\u504f\u5e8f\u5730\u8d2a\u5fc3\u5373\u53ef\u3002\u5177\u4f53\u6765\u8bf4\uff0cParent Tree \u6bcf\u6761\u8fb9\u7684\u8fb9\u6743\u5e94\u4e3a `p->idx + p->link->len`\u3002\n\n\u4e0b\u4e00\u4e2a\u7ec6\u8282\uff0c\u5bf9\u4e8e\u5efa SAM \u65f6\u5206\u88c2\u51fa\u6765\u7684\u70b9\uff0c\u4ece\u610f\u4e49\u4e0a\u6765\u8bb2\u5176 $ idx $ \u5e94\u8be5\u4e3a\u5bf9\u5e94\u6b21\u63d2\u5165\u65f6\u7684 $ idx $\uff0c\u4e14\u6211\u4eec\u5728\u8bb0\u5f55\u7b54\u6848\u65f6\u5bf9\u4e8e\u5206\u88c2\u51fa\u7684\u70b9\u5e94\u8be5\u5ffd\u7565\u3002\n\n\u518d\u4e00\u4e2a\u7ec6\u8282\u5c31\u662f\u6211\u4eec\u5728\u641c\u7d22\u5b50\u6811\u7684\u65f6\u5019\u4e0d\u80fd\u76f4\u63a5\u8fd4\u56de\u4e00\u4e2a `basic_string` \u7b49\u5bb9\u5668\uff0c\u5426\u5219\u4f1a\u56e0\u9012\u5f52\u591a\u6b21\u5bfc\u81f4\u590d\u6742\u5ea6\u9000\u5316\u3002\n\n\u800c\u6700\u7ec8\u7edf\u8ba1\u7b54\u6848\u65f6\uff0c\u6211\u4eec\u53ea\u9700\u8981\u4fdd\u7559\u6240\u6709\u8303\u56f4\u5728 $ [1, n] \\cup [2n + 1, 3n] $ \u7684\u7b54\u6848\u5e76\u8bb0\u5f55\u5373\u53ef\u3002\n\n## Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW void* Edge::operator new(size_t){static Edge* P = ed; return P++;}\n#define ROPNEW_NODE void* Node::operator new(size_t){static Node* P = nd; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\n#define d(c) (c - 'a')\n\ntemplate < typename T = int >\ninline T read(void);\n\nstruct Edge;\nstruct Node{\n    unordered_map < int, Node* > trans;\n    Node* link;\n    int len;\n    int idx;\n    bool flag;\n    Edge* head;\n    int val;\n    OPNEW;\n}nd[2100000];\nROPNEW_NODE;\nNode* root;\n\nstruct Edge{\n    Edge* nxt;\n    Node* to;\n    int val;\n    OPNEW;\n}ed[4100000];\nROPNEW;\n\nint N;\nstring S, T;\nstring base;\nbasic_string < bool > sorted;\nbasic_string < int > ret;\n\nvoid Insert(int c, int idx){\n    static Node* lst = root;\n    Node* p = lst; Node* cp = lst = new Node; cp->idx = idx; cp->flag = true;\n    cp->len = p->len + 1;\n    while(p && !p->trans[c])p->trans[c] = cp, p = p->link;\n    if(!p)cp->link = root;\n    else if(p->trans[c]->len == p->len + 1)cp->link = p->trans[c];\n    else{\n        auto q = p->trans[c], sq = new Node(*q); sq->idx = idx; sq->flag = false;\n        sq->len = p->len + 1;\n        cp->link = q->link = sq;\n        while(p && p->trans[c] == q)p->trans[c] = sq, p = p->link;\n    }\n}\nvoid Link(void){\n    auto endp = new Node();\n    for(auto p = nd; p != endp;++p)\n        if(p->link)\n            p->link->head = new Edge{p->link->head, p, base.at(p->idx + p->link->len)};\n}\nvoid dfs_subt(Node* p){\n    if(p->flag && ((1 <= p->idx && p->idx <= N) || (N * 2 + 1 <= p->idx && p->idx <= N * 3)))ret += p->idx;\n    for(auto i = p->head; i; i = i->nxt)dfs_subt(SON);\n}\nvoid dfs(Node* p = root){\n    if(N <= p->len){\n        ret.clear();\n        dfs_subt(p);\n        int cnt1(0);\n        for(auto pos : ret)\n            if(N * 2 + 1 <= pos && pos <= N * 3)++cnt1;\n            else if(1 <= pos && pos <= N)sorted += false;\n        while(cnt1--)sorted += true;\n        return;\n    }\n    basic_string < Edge* > sons;\n    for(auto i = p->head; i; i = i->nxt)sons += i;\n    sort(sons.begin(), sons.end(), [](Edge* a, Edge* b)->bool{return a->val < b->val;});\n    for(auto son : sons)dfs(son->to);\n}\n\nint main(){\n    // freopen(\"in.txt\", \"r\", stdin);\n    root = new Node(); root->idx = -1; root->len = 0;\n    N = read();\n    cin >> S >> T;\n    base = '#' + S + S + T + T;\n    for(int i = N * 4; i >= 1; --i)Insert(d(base.at(i)), i);\n    Link(), dfs();\n    ll ans(0), sumS(0);\n    for(auto v : sorted)if(v)ans += sumS; else ++sumS;\n    printf(\"%lld\\n\", ans);\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int idx(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')idx = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= idx;\n    return ret;\n}\n```\n\n## UPD\n\nupdate-2023_02_15 \u521d\u7a3f",
        "postTime": 1676454562,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "[ABC272F] Two Strings \u9898\u89e3"
    }
]