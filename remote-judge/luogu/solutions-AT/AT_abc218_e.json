[
    {
        "content": "## \u9898\u610f\n\n\u7ed9\u4e00\u4e2a\u65e0\u5411\u56fe\uff0c\u8ba9\u4f60\u4ece\u4e2d\u9009\u51fa\u51e0\u4e2a\u8fb9\uff0c\u8981\u6c42\u9009\u51fa\u7684\u8fb9\u6743\u603b\u548c\u6700\u5927\u5e76\u4e14\u5269\u4e0b\u7684\u56fe\u8981\u662f\u4e00\u4e2a\u8fde\u901a\u56fe\uff0c\u8f93\u51fa\u6700\u5927\u7684\u8fb9\u6743\u3002\n\n## \u5206\u6790\n\n\u6211\u4eec\u53cd\u5411\u601d\u8003\u4e00\u4e0b\uff0c\u8981\u4f7f\u5f97\u9009\u51fa\u7684\u8fb9\u6743\u603b\u548c\u6700\u5927\uff0c\u90a3\u5c31\u662f\u8ba9\u5269\u4e0b\u7684\u56fe\u8fb9\u6743\u603b\u548c\u6700\u5c0f\uff0c\u8fd8\u8981\u4fdd\u8bc1\u5b83\u662f\u8fde\u901a\u56fe\u3002\u6240\u4ee5\u9996\u5148\u60f3\u5230 [\u6700\u5c0f\u751f\u6210\u6811](https://baike.so.com/doc/6806060-7023006.html) \u3002\u7528\u751f\u6210\u6811\u8dd1\u51fa\u6765\u6700\u5c0f\u7684\u8fb9\u6743\u548c\uff0c\u7136\u540e\u8ba1\u7b97\u56fe\u4e0a\u6240\u6709\u8fb9\u7684\u8fb9\u6743\u603b\u548c\uff0c\u6700\u540e\u76f8\u51cf\u5c31\u80fd\u5f97\u51fa\u7b54\u6848\u3002\n\n\u6211\u4eec\u5f00\u59cb\u8003\u8651\u7ec6\u8282\u3002\u76f4\u63a5\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u80af\u5b9a\u662f\u4e0d\u884c\u7684\uff0c\u56e0\u4e3a\u9898\u76ee\u4e0a\u6709\u8d1f\u6743\u8fb9\u3002\u4f46\u662f\u8d1f\u6743\u8fb9\u6211\u4eec\u6700\u7ec8\u7b54\u6848\u91cc\u9762\u80af\u5b9a\u4e0d\u80fd\u9009\u62e9\u7684\u3002\u6240\u4ee5\u6211\u4eec\u53ea\u9700\u8981\u7279\u5224\u4e00\u4e0b\uff0c\u53ea\u8981\u6211\u4eec\u5728\u8dd1\u6700\u5c0f\u751f\u6210\u6811\u53ea\u8981\u78b0\u5230\u8d1f\u8fb9\u6743\u6211\u4eec\u5c31\u7ed9\u628a\u5b83\u653e\u8fdb\u56fe\u91cc\uff0c\u8fd9\u6837\u5c31\u80fd\u4fdd\u8bc1\u6700\u7ec8\u7b54\u6848\u91cc\u6ca1\u6709\u8d1f\u6743\u8fb9\u3002\n\n\u7136\u540e\u5c31\u53ef\u4ee5\u4e0a\u4ee3\u7801\u4e86\n\n## Code\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n#define ll long long\nconst int N = 200010, M = 200010, INF = 0x3f3f3f3f;\n\nint n, m;\nint p[N];\n\nstruct Edge {\n    int a, b, w;\n\n    bool operator<(const Edge &W) const //\u91cd\u8f7d\u8fd0\u7b97\u7b26\u4ee5\u4fbf\u4e8e\u80fd\u76f4\u63a5sort\n    {\n        return w < W.w;\n    }\n} edges[M];\n\nint find(int x) //\u5e76\u67e5\u96c6\n{\n    if (p[x] != x) p[x] = find(p[x]);\n    return p[x];\n}\n\nll kruskal() {\n    sort(edges, edges + m);\n\n    for (int i = 1; i <= n; i++) p[i] = i;    // \u521d\u59cb\u5316\u5e76\u67e5\u96c6\n\n    ll res = 0, cnt = 0;\n    for (int i = 0; i < m; i++) {\n        int a = edges[i].a, b = edges[i].b, w = edges[i].w;\n\n        a = find(a), b = find(b);\n        if (a != b)//\u627e\u5230\u7684\u7956\u5b97\u4e0d\u76f8\u7b49\u8bf4\u660e\u4e0d\u8fde\u901a\n        {\n            p[a] = b;\n            res += w;\n            cnt++;\n        }\n        else {\n            if (w < 0)res += w;\n        }\n    }\n\n    return res;\n}\n\nint main() {\n//freopen(\"des.in\",\"r\",stdin);\n//freopen(\"des.out\",\"w\",stdout);\n    ll sum = 0;\n    scanf(\"%d%d\", &n, &m);\n    for (int i = 0; i < m; i++) {\n        int a, b, w;\n        scanf(\"%d%d%d\", &a, &b, &w);\n        edges[i] = {a, b, w};\n        sum += w;\n    }\n\n    cout << sum - kruskal();\n\n\n    return 0;\n}\n\n```\n",
        "postTime": 1675130663,
        "uid": 756625,
        "name": "zyxabcd",
        "ccfLevel": 0,
        "title": "Destruction \u9898\u89e3"
    }
]