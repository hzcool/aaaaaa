[
    {
        "content": "\u7531\u4e8e\u6bcf\u79cd\u989c\u8272\u7684\u602a\u517d\u53ea\u6709\u4e00\u53ea\uff0c\u6240\u4ee5\u5982\u679c\u6700\u540e\u8981\u60f3\u5269\u4e0b\u67d0\u4e00\u79cd\u989c\u8272\uff0c\u4e00\u5f00\u59cb\u8be5\u989c\u8272\u7684\u602a\u517d\u5c31\u5fc5\u987b\u80fd\u5403\u5149\u6240\u6709\u7684\u602a\u517d\uff08\u4e00\u65e6\u5b83\u5728\u67d0\u4e2a\u65f6\u523b\u88ab\u5403\uff0c\u8fd9\u79cd\u989c\u8272\u5c31\u7edd\u8ff9\u4e86\uff09\u3002\u6839\u636e\u903b\u8f91\uff0c\u628a\u80fd\u5403\u7684\u90fd\u5403\u4e86\uff0c\u5982\u679c\u5403\u5b8c\u4e86\uff0c\u90a3\u5c31\u53ef\u4ee5\u5269\u4e0b\u8fd9\u79cd\u989c\u8272\uff0c\u53cd\u4e4b\uff0c\u5982\u679c\u5230\u67d0\u4e00\u4e2a\u65f6\u523b\u53d1\u73b0\u5269\u4e0b\u7684\u602a\u517d\u4e00\u53ea\u90fd\u4e0d\u80fd\u5403\uff0c\u90a3\u5c31\u4e0d\u80fd\u5269\u4e0b\u8be5\u989c\u8272\u3002\n\n\u663e\u7136\uff0c\u4e00\u53ea\u602a\u517d\u4e00\u5b9a\u80fd\u5403\u6389\u6bd4\u81ea\u5df1\u5c0f\u7684\u602a\u517d\uff0c\u5982\u679c\u4ee5\u6b64\u65f6\u7684\u5927\u5c0f\u5403\u4e0d\u6389\u540e\u9762\u6bd4\u5b83\u5927\u7684\u602a\u517d\uff0c\u90a3\u4e48\u5b83\u7684\u989c\u8272\u5c31\u4e0d\u53ef\u80fd\u4f5c\u4e3a\u6700\u7ec8\u7b54\u6848\uff0c\u540c\u65f6\u4e00\u5f00\u59cb\u6bd4\u5b83\u5c0f\u7684\u602a\u517d\u7684\u989c\u8272\u66f4\u4e0d\u53ef\u80fd\u6210\u4e3a\u6700\u7ec8\u7b54\u6848\u3002\n\n\u5148\u5c06\u6570\u7ec4\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\uff0c\u6c42\u4e00\u4e2a\u524d\u7f00\u548c\uff08\u524d\u9762\u6bd4\u5b83\u5c0f\u7684\u4e00\u5b9a\u90fd\u80fd\u5403\uff09\u3002\u7528\u4e00\u4e2a\u53d8\u91cf\u6765\u8ba1\u6570\uff0c\u5982\u679c\u67d0\u4e2a\u602a\u517d\u4e0d\u80fd\u5403\u6389\u4e0b\u9762\u4e00\u53ea\uff0c\u90a3\u4e48\u5c31\u5c06\u53d8\u91cf\u7f6e\u4e3a 0\uff0c\u5426\u5219\u589e\u52a0 1\u3002\u8fd8\u6709\uff0c\u524d\u7f00\u548c\u4f1a\u7206\uff0c\u8bb0\u5f97\u5f00 long long\u3002\n\n~~\u4f17\u6240\u5468\u77e5 Atcoder \u7684\u9898\u76ee\u7684\u4ee3\u7801\u5b9e\u73b0\u662f\u975e\u5e38\u7b80\u5355\u7684\uff0c~~ \u8fd9\u91cc\u5c31\u4e0d\u53d1\u4ee3\u7801\u4e86\u3002",
        "postTime": 1659165671,
        "uid": 369598,
        "name": "\u9088\u4e91\u6c49",
        "ccfLevel": 4,
        "title": "AT2338 [AGC011B] Colorful Creatures"
    },
    {
        "content": "[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://rbtr.ee/agc-011-b)\n\n## [\u9898\u610f](https://atcoder.jp/contests/agc011/tasks/agc011_b)\n\u6709 $n$ \u4e2a\u751f\u7269\uff0c\u7b2c $i$ \u4e2a\u751f\u7269\u6709\u5927\u5c0f $A_i$ \u548c\u989c\u8272 $i$\u3002\n\n\u7b2c $i$ \u4e2a\u751f\u7269\u53ef\u4ee5\u541e\u566c\u7b2c $j$ \u4e2a\u5143\u7d20\u5f53\uff1a\n$$A_j \\leq 2 \\cdot A_i$$\n\n\u8fd9\u4e9b\u751f\u4e0d\u505c\u7684\u541e\u566c\u7740\u5176\u5b83\u751f\u7269\uff0c\u6700\u7ec8\u6210\u4e3a\u4e00\u4e2a\u751f\u7269\u3002\u6c42\u8be5\u751f\u7269\u53ef\u80fd\u7684\u989c\u8272\u7684\u6570\u91cf\u3002\n\n$2 \\leq n \\leq 10^5, 1 \\leq A_i \\leq 10^9$\n\n## \u9898\u89e3\n\u8003\u8651\u7b2c $i$ \u4e2a\u751f\u7269\u6709\u6ca1\u6709\u53ef\u80fd\u6210\u4e3a\u6700\u7ec8\u7684\u90a3\u4e2a\u751f\u7269\uff1a\n\n\u7b2c $i$ \u4e2a\u751f\u7269\u5fc5\u7136\u662f\u4ece\u5927\u5c0f\u6700\u5c0f\u7684\u751f\u7269\u5f00\u59cb\u541e\u566c\uff0c\u5982\u679c\u6700\u540e\u5168\u90e8\u541e\u566c\u4e86\uff0c\u90a3\u4e48\u8fd9\u4e2a\u751f\u7269\u5c31\u662f\u7b54\u6848\u4e4b\u4e00\u3002\n\n\u8fd9\u6837\u5f97\u5230\u4e86\u4e00\u4e2a $\\mathcal O\\left(n^2\\right)$ \u7684\u7b97\u6cd5\u3002\n\n\u8003\u8651\u5982\u4f55\u4f18\u5316\uff1a\n1. \u628a\u6570\u7ec4\u6392\u5e8f\uff0c\u4e8c\u5206\u4ece\u54ea\u4e2a\u70b9\u5f00\u59cb\u53ef\u4ee5\u3002\n2. \u8003\u8651\u5230\u5982\u679c\u751f\u7269 $i$ \u4e0d\u80fd\u6210\u4e3a\u6700\u540e\u4e00\u4e2a\u751f\u7269\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f $i$ \u7684**\u524d\u7f00\u548c**\u7684\u4e24\u500d\u5c0f\u4e8e\u7b2c $i + 1$ \u4e2a\u70b9\u7684\u5927\u5c0f\u3002\u6240\u4ee5\uff0c\u628a\u6570\u7ec4\u6392\u5e8f\uff0c**\u4ece\u53f3\u5f80\u5de6** \u627e\u5230\u7b2c\u4e00\u4e2a $i$ \u7684**\u524d\u7f00\u548c**\u7684\u4e24\u500d\u5c0f\u4e8e\u7b2c $i + 1$ \u4e2a\u70b9\u7684\u5927\u5c0f\u7684\u70b9\u3002\u90a3\u4e48\u8fd9\u4e2a\u70b9\uff0c\u4ee5\u53ca\u66f4\u9760\u524d\u7684\u70b9\u4e0d\u7136\u4e0d\u80fd\u6210\u4e3a\u6700\u540e\u4e00\u4e2a\u751f\u7269\u3002\n\n\u56e0\u4e3a\u8981\u6392\u5e8f\uff0c\u590d\u6742\u5ea6\u662f $\\mathcal O\\left(n \\log n\\right)$\u3002\n\n## \u4ee3\u7801\n```cpp\n// By rbtree (https://rbtree.archi)\n// Please submit with C++14!\n#include <algorithm>\n#include <array>\n#include <cmath>\n#include <iostream>\n#include <list>\n#include <map>\n#include <queue>\n#include <set>\n#include <tuple>\n#include <unordered_map>\n#include <utility>\n#include <vector>\n#define ra _Read()\n\nusing tp = long long;\ntp _Read();\nusing namespace std;\nconstexpr bool __MTCS__ = 0;\nconstexpr tp Hat_N = 1e5 + 3;\n\nnamespace __SOL__ {\nsigned main() {\n  tp n = ra, cnt = 0;\n  array<tp, Hat_N> a, s;\n  for (tp i = 1; i <= n; ++i) {\n    a[i] = ra;\n  }\n  stable_sort(a.begin() + 1, a.begin() + n + 1);\n  for (tp i = 1; i <= n; ++i) {\n    s[i] = s[i - 1] + a[i];\n  }\n  for (tp i = n; i; --i) {\n    if (s[i] * 2 < a[i + 1]) {\n      break;\n    }\n    ++cnt;\n  }\n  cout << cnt << '\\n';\n  return 0;\n}\n}  // namespace __SOL__\n\nsigned main() {\n  tp __MTCS__ = ::__MTCS__ ? ra : 1;\n  while (__MTCS__--) {\n    __SOL__::main();\n  }\n  return EXIT_SUCCESS;\n}\n\ntp _Read() {\n  bool __neg(0);\n  char __c(getchar());\n  tp __val(0);\n  for (; __c < 48 || __c > 57; __c = getchar()) {\n    __neg = __c == 45;\n  }\n  for (; __c > 47 && __c < 58; __c = getchar()) {\n    __val = __val * 10 + (__c & 15);\n  }\n  return __neg ? ~__val + 1 : __val;\n}\n```",
        "postTime": 1658988752,
        "uid": 413140,
        "name": "\u7ea2\u9ed1\u6811",
        "ccfLevel": 5,
        "title": "AGC 011 B \u9898\u89e3"
    }
]