[
    {
        "content": "\u4ee5\u4e0b\u8ba8\u8bba\u4e2d\uff0c\u6211\u4eec\u5c06\u7b2c $i$ \u4e2a\u5b57\u7b26\u4e32\u8868\u793a\u4e3a $S_i$\u3002\n\n\u9996\u5148\uff0c\u82e5\u94a6\u5b9a\u5b57\u7b26\u96c6\u5927\u5c0f\u4e3a $k$\uff0c\u6211\u4eec\u5c31\u5c06\u7b2c $i$ \u4e2a\u5b57\u7b26\u4e32\u770b\u6210\u4e00\u4e2a\u957f\u5ea6\u4e3a $|S_i|$ \u7684 $k$ \u8fdb\u5236\u6570\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u4e2a\u6700\u5c0f\u7684\u5408\u6cd5\u5b57\u7b26\u96c6\u5927\u5c0f $k$ \u662f\u53ef\u4e8c\u5206\u627e\u5230\u7684\u3002\n\n\u6211\u4eec\u8003\u8651\u4e8c\u5206\u7b54\u6848\u4e4b\u540e\uff0c\u5982\u4f55\u5224\u65ad $k$ \u5408\u6cd5\u3002\n\n\u90a3\u4e48\u8003\u8651\u76f8\u90bb\u4e24\u4e2a\u4e32 $S_i$ \u548c $S_{i+1}$\u3002\n\n\u82e5 $|S_i|<|S_{i+1}|$\uff0c\u5219 $S_i$ \u662f $S_{i+1}$ \u7684\u524d\u7f00\u5c31\u80fd\u6ee1\u8db3  $S_{i}<S_{i+1}$\u3002\u5219\u53ea\u9700\u8981\u5728 $S_i$ \u540e\u4e00\u76f4\u8865 `a` \u81f3\u957f\u5ea6 $|S_{i+1}|$ \u5c31\u80fd\u8f6c\u79fb\u6210\u6700\u4f18\u7684 $S_{i+1}$\u3002\n\n\u82e5 $|S_i|\\ge |S_{i+1}|$\uff0c\u5219\u9700\u8981\u8ba9 $S_{i+1}$ \u7684\u672b\u5c3e $+1$ \u624d\u80fd\u6ee1\u8db3 $S_{i} < S_{i+1}$\u3002\u4e5f\u5c31\u662f\uff0c\u8ba9 $S_{i}$ \u820d\u5f03\u6389\u957f\u5ea6\u4e3a $|S_{i}|-|S_{i+1}|$ \u7684\u540e\u7f00\uff0c\u7136\u540e\u518d\u8ba9\u6700\u540e\u4e00\u4e2a\u5b57\u7b26 $+1$\uff0c\u7136\u540e\u5982\u679c\u53d1\u73b0\u5b57\u7b26\u7b49\u4e8e `a`$+k$  \u5c31\u5c06\u8fd9\u4e00\u4f4d\u7f6e\u4e3a `a`\uff0c\u7136\u540e\u8fdb\u4f4d\u5230\u524d\u4e00\u4f4d\u3002\n\n\u5982\u679c\u76f4\u63a5\u66b4\u529b\u7ef4\u62a4\u6240\u6709\u7684\u957f\u5ea6\uff0c\u663e\u7136\u4e0d\u80fd\u901a\u8fc7\u3002\n\n\u6211\u4eec\u8003\u8651\u7528\u4e00\u4e2a\u6808\u7ef4\u62a4\u4e0d\u662f `a` \u7684\u4f4d\u7f6e\u3002\u8fd9\u6837\u7684\u4f4d\u7f6e\u663e\u7136\u6700\u591a\u53ea\u6709 $O(n)$ \u4e2a\u3002\u7136\u540e\u6bcf\u6b21\u8fdb\u4f4d\u4e5f\u5c31\u53ea\u9700\u8981\u66b4\u529b\u8fdb\u4f4d\uff0c\u56e0\u4e3a\u8fdb\u4f4d\u6b21\u6570\u663e\u7136\u4e0d\u8d85\u8fc7 $n$ \u6b21\u3002\n\n\u5982\u679c\u53d1\u73b0\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u4ea7\u751f\u4e86\u8fdb\u4f4d\uff0c\u90a3\u4e48\u8fd9\u4e2a $k$ \u5c31\u4e00\u5b9a\u4e0d\u5408\u6cd5\u3002\u53cd\u4e4b\uff0c\u5982\u679c\u8fdb\u884c\u5230\u6700\u540e\uff0c\u6ca1\u6709\u4ea7\u751f\u8fdb\u4f4d\uff0c\u90a3\u4e48\u8fd9\u4e2a $k$ \u5c31\u5408\u6cd5\u3002\u7b80\u5355\u5224\u65ad\u5c31\u884c\u4e86\u3002\n\n$\\rm Code$\uff1a\n\n```cpp\nstruct Node {\n\tint v, c;\n\n\tNode() {}\n\tNode(int v, int c):v(v), c(c) {}\n};\n\nint n;\nint top;\nint a[200010];\nNode sta[200010];\n\ninline void insert(int v, int x) {\n\twhile(sta[top].v > v) --top;\n\tif(sta[top].v == v) sta[top].c++;\n\telse sta[++top] = Node(v, 1);\n\tif(top > 1 && sta[top].c == x) --top, insert(v - 1, x);\n}\n\ninline int chk(int x) {\n\tsta[top = 1] = Node(0, 0);\n\tfor(int i = 2; i <= n; i++)\n\t\tif(a[i] <= a[i - 1]) insert(a[i], x);\n\treturn sta[1].c == 0;\n}\n\nint main() {\n\tn = ri;\n\tfor(int i = 1; i <= n; i++) a[i] = ri;\n\n\tint ct = 0;\n\tfor(int i = 2; i <= n; i++) ct += a[i] > a[i - 1];\n\tif(ct == n - 1) return puts(\"1\"), 0;\n    \n\tint l = 2, r = n, res = 1;\n\twhile(l <= r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif(chk(mid)) res = mid, r = mid - 1;\n\t\telse l = mid + 1;\n\t} printf(\"%d\\n\", res);\n\treturn 0;\n}\n```",
        "postTime": 1581603407,
        "uid": 20782,
        "name": "CYJian",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 AT4502 \u3010[AGC029C] Lexicographic constraints\u3011"
    },
    {
        "content": "### link\n\n[[AGC029C] Lexicographic constraints](https://www.luogu.com.cn/problem/AT4502)\n\n\u6309\u987a\u5e8f\u7ed9\u4f60\u4e00\u4e9b\u5b57\u7b26\u4e32\u7684\u7684\u957f\u5ea6\uff0c\u5206\u522b\u4e3aS1,S2,S3....,Sn\uff0c\u8981\u4f60\u6784\u9020\u4e00\u4e2a\u6700\u5c0f\u7684\u5b57\u7b26\u96c6\u4f7f\u5f97\u4f60\u53ef\u4ee5\u7528\u8fd9\u4e00\u4e2a\u5b57\u7b26\u96c6\u8868\u793a\u51fa\u8fd9n\u4e2a\u5b57\u7b26\u4e32\u5e76\u4e14 \u4f7f\u5f97\u8fd9\u4e9b\u5b57\u7b26\u4e32\u662f\u6309\u7167\u5b57\u5178\u5e8f\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u6392\u5217\u7684\u3002\n\n### solve\n\n\u6211\u4eec\u53d1\u73b0\u76f4\u63a5\u6784\u9020\u5f88\u96be\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u7b54\u6848\u518d\u6765\u9a8c\u8bc1\u5c31\u5f88\u7b80\u5355\u4e86\u3002\n\n\u901a\u8fc7\u89c2\u5bdf\uff0c\u8fd9\u9053\u9898\u662f\u6ee1\u8db3\u4e8c\u5206\u6027\u8d28\u7684\uff0c\u4e8e\u662f\u8003\u8651\u4e8c\u5206\u7b54\u6848\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u628a\u4e32\u770b\u6210\u662f $N$ \u8fdb\u5236\u7684\u6570\uff0c\u5bf9\u4e8e $a[i]>a[i-1]$ \u53ea\u9700\u8981\u5728\u524d\u9762\u653e $0$ \u5c31\u597d\u4e86\uff0c\u5bf9\u4e8e $a[i]\u2264a[i-1]$ ,\u6211\u4eec\u9700\u8981\u627e\u5230\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e $a[i]$ \u7684\u4e32\uff0c\u7136\u540e\u5728\u540e\u9762 $+1$ \u5c31\u597d\u4e86\uff0c\u5176\u4e2d\u6a21\u62df\u7684\u8fc7\u7a0b\u53ef\u4ee5\u7528 $map$ \u6765\u5b9e\u73b0\u3002\n\n### code\n\n```cpp\n#include<cstdio>\n#include<map>\nusing namespace std;\nconst int maxn=2e5+5;\nint N,a[maxn],ans,F=0;\nmap<int,int> mp;\nbool check(int up){\n\tmp.clear();\n\tfor(int i=2;i<=N;i++)if(a[i-1]>=a[i]){\n\t\twhile(!mp.empty()){\n\t\t\tint t=mp.rbegin()->first;\n\t\t\tif(t>a[i]) mp.erase(t);\n\t\t\telse break;\n\t\t}\n\t\tint j=a[i];\n\t\twhile(mp[j]+1==up) mp.erase(j),j--;\n\t\tif(j==0)return false;\n\t\tmp[j]++;\n\t}\n\treturn true;\n}\ninline int read(){\n\tint ret=0,f=1;char ch=getchar();\n\twhile(ch<'0'||ch>'9'){if(ch=='-')f=-f;ch=getchar();}\n\twhile(ch<='9'&&ch>='0')ret=ret*10+ch-'0',ch=getchar();\n\treturn ret*f;\n}\nint main(){\n//\tfreopen(\"AT4434.in\",\"r\",stdin);\n//\tfreopen(\"AT4434.out\",\"w\",stdout);\n\tN=read();\n\tfor(int i=1;i<=N;i++)a[i]=read(),F|=(a[i]<=a[i-1]);\n\tif(!F)return printf(\"1\\n\"),0;\n\tint L=2,R=N;\n\twhile(L<=R){\n\t\tint mid=(L+R)>>1;\n\t\tif(check(mid))ans=mid,R=mid-1;\n\t\telse L=mid+1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1636360550,
        "uid": 128822,
        "name": "OI\u754c\u7684\u5c0f\u6df7\u6df7",
        "ccfLevel": 6,
        "title": "[AGC029C] Lexicographic constraints \u9898\u89e3"
    },
    {
        "content": "- \u9996\u5148\u968f\u4fbf\u60f3\u4e2a\u66b4\u529b\uff0c\u5bf9\u4e8e $a_i > a_{i -1}$\uff0c\u6211\u4eec\u76f4\u63a5\u5f80\u5b57\u7b26\u4e32\u7684\u672b\u5c3e\u52a0\u4e0a\u4e00\u4e9b\u6700\u5c0f\u7684\u5b57\u7b26\u3002\u5bf9\u4e8e $a_i \\le a_{i - 1}$\uff0c\u6211\u4eec\u4fdd\u7559\u524d\u7f00\u4e4b\u540e\u968f\u4fbf\u52a0\u4e00\u4e2a\u4f4d\u7f6e\u7684 $1$\u3002\n\n- \u53d1\u73b0\u8fd9\u4e2a\u968f\u4fbf\u7684\u4f4d\u7f6e\u4e0d\u662f\u5f88\u597d\u627e\uff0c\u4e8e\u662f\u60f3\u5230\u7528\u4e8c\u5206**\u8f6c\u679a\u4e3e\u4e3a\u5224\u65ad**\u3002\u4e8c\u5206\u6700\u5927\u7684\u5b57\u7b26\uff08\u53ef\u4ee5\u8f6c\u5316\u4e3a\u6570\u5b57\uff09$x$\uff0c\u6bcf\u6b21\u6211\u4eec\u53ea\u5f80\u6700\u540e\u4e00\u4f4d\u52a0\u4e00\uff0c\u8fd9\u76f8\u5f53\u4e8e\u5728 $x$ \u8fdb\u5236\u4e0b\u505a\u4e00\u4e2a\u52a0\u6cd5\u3002\n\n- \u6ce8\u610f\u4e8c\u5206\u7684\u5224\u65ad\u9519\u8bef\u7684\u6761\u4ef6\uff0c\u5f53\u7b2c\u4e00\u4f4d\u4ea7\u751f\u8fdb\u4f4d\u65f6\uff0c\u524d\u9762\u5df2\u7ecf\u6ca1\u6709\u4f4d\u7f6e\u4e86\uff0c\u4e8e\u662f\u65e0\u89e3\u3002\n\n- \u6ce8\u610f\u5230 $a_i$ \u5f88\u5927\uff0c\u76f4\u63a5\u505a\u52a0\u6cd5\u4f1a\u70b8\u3002\u6211\u4eec\u4e0d\u59a8**\u53bb\u9664\u91cd\u590d\u72b6\u6001**\uff0c\u53ea\u8bb0\u5f55\u4e0d\u4e3a $0$ \u7684\u6570\uff0c\u5982\u679c\u8fd9\u4e9b\u6570\u4e2d\u6ca1\u6709\u52a0\u4e00\u7684\u6570\u5c31\u6dfb\u4e00\u4e2a\u6570\u8fdb\u6765\u3002\u8fd9\u6837\u7531\u4e8e\u6bcf\u6b21\u6700\u591a\u6dfb\u4e00\u4e2a\u6570\uff0c\u6240\u4ee5\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3a $O(n)$\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\u3002\u8fd9\u91cc\u7684 $\\log$ \u6765\u81ea\u4e8c\u5206\u3002\n\n- \u5b9e\u73b0\u7684\u7ec6\u8282\u5199\u5728\u4ee3\u7801\u91cc\u4e86\u3002\n\n```cpp\n/*\n\u6559\u5b66\u5c40\uff0c\u5fc5\u62ff\u4e0b\n\u66f4\u65b0\u5206\u4e09\u6b65\u8d70\uff1a\u5220\u540e\u7f00\uff0c\u8fdb\u4f4d\uff0c\u52a0\u6570\u3002\n\u4e8e\u662f\u6211\u4eec\u9700\u8981\u4e00\u4e2a\u652f\u6301\u67e5\u8be2\uff0c\u5220\u9664\uff0c\u52a0\u5165\uff0c\u66f4\u6539\u503c\uff0c\u4e0b\u6807\u8fd8\u5f88\u5927\u7684\u4e1c\u897f\u3002\u5f88\u5bb9\u6613\u60f3\u5230 map\u3002\n\u5c06 map \u7684 first \u4f5c\u4f4d\uff0csecond \u5b58\u503c\uff0c\u76f4\u63a5\u66f4\u65b0\u5373\u53ef\u3002\n\u6ce8\u610f\u5230\u53ea\u6709\u5f53 a[i]>=a[i-1] \u65f6\u624d\u4f1a\u66f4\u65b0\uff0c\u6240\u4ee5\u628a\u8d85\u8fc7\u7684\u540e\u7f00\u5220\u6389\u8fd9\u4e00\u6b65\u53ef\u4ee5\u76f4\u63a5\u4ece\u6700\u540e\u5f00\u59cb\u5220\u3002\u56e0\u4e3a\u91cc\u9762\u52a0\u5165\u7684\u5143\u7d20 first \u9012\u589e\u3002\n\u8fd9\u6837\u7406\u8bba\u590d\u6742\u5ea6\u4f1a\u4e0a\u5347\u4e00\u4e2a log\uff0c\u5e94\u8be5\u8fd8\u662f\u80fd\u8fc7\u7684\uff0c\u4f46\u6211\u88ab\u5361\u4e86 \uff0d_\uff0db\n\u6ce8\u610f\u5230\u4e0a\u4e0a\u884c\u7684\u53d1\u73b0\uff0c\u60f3\u5230\u7528\u6808\u4ee3\u66ff map\uff0c\u679c\u7136\u5feb\u7684\u4e00\u6279\n*/\n\n#include <iostream>\n#include <stack>\n#include <algorithm>\n\nusing namespace std;\nconst long long N = 2e5+5, mod = 998244353;\n\nint n;\nint a[N];\n\n#define id first\n#define w second\nbool check(int x) {\n\tstack<pair<int, int>> sta;\n\tfor (int i = 2; i <= n; ++i) \n\t\tif (a[i] <= a[i - 1]) {\n            while (!sta.empty()) {\n                int l = sta.top().id;\n                if (l > a[i]) sta.pop();\n                else break;\n            }\n            int l = a[i];\n            while (((!sta.empty() && sta.top().id == l && sta.top().w + 1 == x) || x == 1) && l > 0) {\n\t\t\t\tif (!sta.empty()) sta.pop();\n\t\t\t\t--l;\n\t\t\t} \n            if (l == 0) \n\t\t\t\treturn false;\n\t\t\tint val = 0;\n\t\t\tif (!sta.empty() && sta.top().id == l) val = sta.top().w;\n\t\t\t++val;\n\t\t\tif (!sta.empty() && sta.top().id == l) sta.pop();\n\t\t\tsta.push(make_pair(l, val));\n\t\t}\n\treturn true;\n}\n#undef id\n#undef w\n\nsigned main(){\n\tfreopen(\"text.in\", \"r\", stdin);\n\tios::sync_with_stdio(false);\n\tcin.tie(0);cout.tie(0);\n\t\n\tcin >> n;\n\tfor (int i = 1; i <= n; ++i) cin >> a[i];\n\t\n\tint l = 1, r = n;\n\twhile (l < r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif (check(mid) == true) r = mid;\n\t\telse l = mid + 1;\n\t}\n\n    cout << l << endl;\n\t\n\treturn 0;\n}\n```",
        "postTime": 1683807456,
        "uid": 149219,
        "name": "_maze",
        "ccfLevel": 6,
        "title": "\u4e8c\u5206\uff0c\u7136\u540e\u968f\u4fbf check \u4e00\u4e0b"
    },
    {
        "content": "\u9996\u5148\u4e8c\u5206\u7b54\u6848\u8f6c\u5316\u4e3a\u5408\u6cd5\u6027\u5224\u5b9a\u95ee\u9898\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u5c1d\u8bd5\u6784\u9020\u5408\u6cd5\u89e3\u3002\n\n\u5982\u679c\u5b57\u7b26\u96c6\u5927\u5c0f\u4e3a $mid$\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u5b57\u7b26\u4e32\u770b\u6210\u4e00\u4e2a $mid$ \u8fdb\u5236\u7684\u6570\u5b57\u3002\u4ece $a_{i-1}$ \u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u5230 $a_i$ \u4ee3\u8868\u7684\u5b57\u7b26\u4e32\u4e2d\uff0c\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n- $a_{i-1}<a_i$\uff0c\u53ea\u9700\u8981\u5728\u6700\u540e\u9762\u8865\u5b57\u7b26 `a` \u5373\u53ef\u3002\u5728\u8fdb\u5236\u6570\u5c42\u9762\u5c31\u662f\u5728\u6700\u540e\u8865\u4e0a\u82e5\u5e72\u4e2a 0\u3002\n\n- $a_{i-1}\\ge a_i$\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5fc5\u987b\u8981\u5728\u524d\u9762 $a_i$ \u4f4d\u5c31\u8981\u6bd4 $a_{i-1}$ \u7684\u5b57\u7b26\u4e32\u5927\u3002\u9996\u5148\u7f29\u51cf\u957f\u5ea6\uff0c\u5c06\u5b57\u7b26\u4e32\u7f29\u6210 $a_i$ \u4f4d\u3002\u5982\u679c\u628a\u5b57\u7b26\u4e32\u770b\u6210\u8fdb\u5236\u6570\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u5c31\u5728\u5b83\u7684\u6700\u540e\u4e00\u4f4d\u52a0\u4e00\u3002\u5982\u679c\u53d1\u73b0\u8fdb\u4f4d\u5230\u4e86\u9996\u4f4d\u8fd8\u5f97\u518d\u8fdb\u4e00\u6b21\uff0c\u90a3\u4e48\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u3002\n\n\u6ce8\u610f\u7279\u5224\u4e00\u4e0b $mid=1$ \u7684\u60c5\u51b5\u3002\u5229\u7528 map \u66b4\u529b\u6a21\u62df\u7f29\u51cf\u548c\u8fdb\u4f4d\u8fc7\u7a0b\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log^2n)$\u3002\u7ebf\u6bb5\u6811\u4e5f\u53ef\u4ee5\u7528\u7c7b\u4f3c\u7684\u65b9\u6cd5\u5b9e\u73b0\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define For(i,a,b) for(int i=(a);i<=(b);++i)\n#define Rof(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int Maxn=2e5;\n\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;\n}\n\nint n,a[Maxn+5];\n\ninline int Check(int mid)\n{\n    map<int,int> mp; int l=0; mp[1]=0;\n    For(i,1,n)\n    {\n        if(l<a[i]) l=a[i];\n        else\n        {\n            if(mid==1) return 0;\n            for(auto it=prev(mp.end());;it--)\n            {\n                if(it==mp.begin()) break;\n                if(it->first>a[i]) it=mp.erase(it);\n                else break;\n            }\n            int it=a[i]; l=a[i],mp[l]++;\n            while(mp[it]==mid)\n            {\n                if(it==1) return 0;\n                mp[it]=0,mp[it-1]++,it--;\n            }\n        }\n    }\n    return 1;\n}\n\nint main()\n{\n    n=read();\n    For(i,1,n) a[i]=read();\n    int l=1,r=n;\n    while(l<r)\n    {\n        int mid=(l+r)/2;\n        if(Check(mid)) r=mid;\n        else l=mid+1;\n    }\n    cout<<l<<endl;\n    return 0;\n}\n```",
        "postTime": 1683806513,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 AGC029C\u3010Lexicographic constraints\u3011"
    }
]