[
    {
        "content": "### \u524d\u8a00\n\n\u4e00\u79cd\u590d\u6742\u5e76\u4e14\u9700\u8981\u5927\u5206\u7c7b\u8ba8\u8bba\uff0c\u4f46\u662f\u6ca1\u6709\u5927\u601d\u7ef4\u91cf\u7684\u505a\u6cd5\u3002~~\u6211\u4f1a\u8bf4\u6211\u8c03\u4e86\u4e00\u5929\u5417\u3002~~\n\n### \u601d\u8def\n\n\u9996\u5148\u5bb9\u6613\u53d1\u73b0\u53ea\u7528\u8003\u8651\u5728\u8d77\u70b9\u7ec8\u70b9\u6784\u6210\u77e9\u5f62\u4e2d\u7684\u55b7\u6cc9\uff0c\u4e0d\u59a8\u8d77\u70b9\u5728\u5de6\u4e0b\u65b9\uff0c\u7ec8\u70b9\u5728\u53f3\u4e0a\u65b9\u3002\n\n\u4e8e\u662f\u6211\u4eec\u8003\u8651\uff0c\u5bf9\u6b63\u5e38\u7684\u8def\u5f84\uff0c\u6211\u4eec\u53ea\u53ef\u80fd\u5411\u53f3\u3001\u5411\u4e0a\u8d70\u3002\n\n\u6211\u4eec\u628a\u8fd9\u90e8\u5206\u8d21\u732e\u7b97\u51fa\u6765\uff0c\u7136\u540e\u6bcf\u4e2a\u55b7\u6cc9\u5904\u6709\u4e00\u4e2a\u9644\u52a0\u7684\u8d21\u732e\u3002\n\n\u8003\u8651\u5982\u4f55\u8ba1\u7b97\u8fd9\u90e8\u5206\u9644\u52a0\u7684\u8d21\u732e\u3002\n\n\u8003\u8651\u6bcf\u4e2a\u55b7\u6cc9\u5fc5\u7136\u4ece\u4e00\u4e2a **\u5de6\u63d2\u5934** \u6216\u8005 **\u4e0b\u63d2\u5934** \u8fdb\u5165\uff0c\u5fc5\u7136\u4ece\u4e00\u4e2a **\u4e0a\u63d2\u5934** \u6216\u8005 **\u53f3\u63d2\u5934** \u79bb\u5f00\u3002\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5047\u8bbe\u5df2\u77e5\u4ece\u5de6\u63d2\u5934\u3001\u4e0b\u63d2\u5934\u7684\u6700\u5c0f\u6743\u503c\uff0c\u5219\u53ef\u4ee5\u77e5\u9053\u4ece\u53f3\u63d2\u5934\u3001\u4e0a\u63d2\u5934\u51fa\u53bb\u7684\u6700\u5c0f\u6743\u503c\u3002\n\n\u6211\u4eec\u53ea\u7528\u77e5\u9053\u54ea\u4e9b\u8282\u70b9\u53ef\u4ee5\u66f4\u65b0\u5230\u5f53\u524d\u70b9\u3002\n\n\u6211\u4eec\u79f0\u4e24\u4e2a\u8282\u70b9 $(x_1,y_1)(x_2,y_2)$ \u6784\u6210 $(x_1,y_1)\\rightarrow(x_2,y_2)$ \u7684 **\u504f\u5e8f**\uff0c\u5f53\u4e14\u4ec5\u5f53 $x_1<x_2\\land y_1<y_2$\u3002\n\n\u4e00\u4e2a\u8282\u70b9\u7684\u53f3\u63d2\u5934\u53ef\u4ee5\u66f4\u65b0\u5230\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u63d2\u5934\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5f80\u5f53\u524d\u70b9\u6784\u6210\u504f\u5e8f\u3002\n\n\u4e00\u4e2a\u8282\u70b9\u7684\u4e0a\u63d2\u5934\u53ef\u4ee5\u66f4\u65b0\u5230\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u63d2\u5934\uff0c\u5f53\u4e14\u4ec5\u5f53\u5176\u5f80\u5f53\u524d\u70b9\u6784\u6210\u504f\u5e8f\uff0c\u4e14 **\u4e24\u70b9\u4e4b\u95f4\u81f3\u5c11\u5b58\u5728\u4e00\u884c\u6ee1\u8db3\u4e0d\u5b58\u5728\u80fd\u540c\u65f6\u4e0e\u4e24\u8282\u70b9\u4e4b\u95f4\u6240\u6709\u8282\u70b9\u6784\u6210\u504f\u5e8f\u7684\u70b9**\u3002\uff08\u6b63\u786e\u6027\u8bc1\u660e\uff1a\u5982\u679c\u5b58\u5728\u7a7a\u884c\u90a3\u4e48\u663e\u7136\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u53ef\u4ee5\u4ece\u4e24\u4e2a\u4e0d\u6784\u6210\u504f\u5e8f\u7684\u8282\u70b9\u95f4\u7a7f\u8fc7\u53bb\uff1b\u9664\u6b64\u4e4b\u5916\uff0c\u603b\u662f\u4e0d\u53ef\u884c\uff09\u5bb9\u6613\u53d1\u73b0\u8fd9\u6837\u7684\u8282\u70b9\u7684 $y$ \u4e00\u5b9a\u5c0f\u4e8e\u4e00\u4e2a\u5b9a\u503c\uff0c\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u627e\u51fa\u3002\n\n\u5269\u4e0b\u4e24\u7c7b\u8d21\u732e\u540c\u7406\u3002\n\n\u548c\u8d77\u70b9\u3001\u7ec8\u70b9\u7684\u8fde\u8fb9\u8d21\u732e\u53ef\u4ee5\u7c7b\u4f3c\u5730\u5206\u7c7b\u8ba8\u8bba\u3002\n\n\u6574\u4e2a\u8fc7\u7a0b\u4e8e\u662f\u5373\u53ef\u79bb\u6563\u5316\uff0c\u626b\u63cf\u7ebf\uff0c\u5e76\u7528 BIT \u7ef4\u62a4\u524d\u7f00 $\\min$\uff0c\u4ece\u800c\u8fdb\u884c dp\u3002\n\n\u603b\u590d\u6742\u5ea6\u4e3a $O(n\\log n)$\u3002\n\n### Code\n\n\u6ce8\u610f\uff0c\u4e3a\u4e86\u907f\u514d\u79bb\u6563\u5316\u4e22\u5931\u201c\u7a7a\u884c\u201d\u7684\u4fe1\u606f\uff0c\u6211\u4eec\u8981\u5728\u79bb\u6563\u5316\u6570\u7ec4\u4e2d\u624b\u52a8\u52a0\u5165\u7a7a\u884c\u3002\n\n\u7531\u4e8e\u7ec6\u8282\u5f88\u591a\uff0c\u653e\u51fa\u6838\u5fc3\u4ee3\u7801\uff0c\u6709\u8f83\u4e3a\u8be6\u7ec6\u7684\u6ce8\u91ca\u3002\n\n\uff08\u8bfb\u5165\u5e76\u6821\u51c6\u7684\u4ee3\u7801\u7531\u4e8e\u4e0d\u662f\u6838\u5fc3\uff0c\u76f4\u63a5\u7701\u7565\u4e86\uff09\n\n```cpp\nnamespace BIT1{ // \u5355\u70b9\u53d6 min\uff0c\u524d\u7f00\u6c42 min \u7684 BIT\n    dbl A[500005];voi clear(){for(auto&s:A)s=1e18;} // \u521d\u59cb\u5316\u4e3a inf\n    voi chg(uint p,dbl v){p++;while(p<=500000)_min(A[p],v),p+=lowbit(p);} // \u628a p \u5904\u5411 v \u53d6 min\uff0c\u6ce8\u610f\u662f 0 \u6807\u53f7\n    dbl find(uint r){ // \u67e5\u8be2 [0,r) \u6700\u5c0f\u503c\n        dbl ans=1e18;while(r)_min(ans,A[r]),r-=lowbit(r);\n        return ans;\n    }\n}\nnamespace BIT2{ // \u540c\u4e0a\n    dbl A[500005];voi clear(){for(auto&s:A)s=1e18;}\n    voi chg(uint p,dbl v){p++;while(p<=500000)_min(A[p],v),p+=lowbit(p);}\n    dbl find(uint r){\n        dbl ans=1e18;while(r)_min(ans,A[r]),r-=lowbit(r);\n        return ans;\n    }\n}\nconst dbl Pi=acos(-1); // \u6ce8\u610f\u9700\u8981 math \u5e93\nint main()\n{\n    uint n,x,y;\n    std::vector<std::pair<uint,uint> >P;\n    // ??? ... ...\n    // \u8bfb\u5165\u5e76\u6821\u51c6\u6210\u8d77\u70b9 (0,0)\uff0c\u7ec8\u70b9 (x,y) \u7684\u8fc7\u7a0b\uff0c\u628a\u77e9\u5f62\u5185\u8282\u70b9\u5b58\u5165 P\uff0c\u8be5\u90e8\u5206\u4ee3\u7801\u7565\u3002\n    if(P.empty()){printf(\"%.15lf\\n\",100.*(x+y));return 0;} // \u5224\u6389\u6ca1\u70b9\u7684\u60c5\u51b5\n    if(!x||!y){printf(\"%.15lf\\n\",100.*(x+y)+10*Pi-20);return 0;} // \u5224\u6389\u8def\u5f84\u662f\u7ebf\u6bb5\u7684\u60c5\u51b5\n    std::vector<uint>X{0,x},Y{0,y};\n    for(auto s:P)if(s.first)X.push_back(s.first),X.push_back(s.first-1); // \u65b9\u4fbf\u5224\u65ad\u662f\u5426\u76f8\u90bb\n    for(auto s:P)if(s.second)Y.push_back(s.second),Y.push_back(s.second-1);\n    std::sort(X.begin(),X.end()),std::sort(Y.begin(),Y.end());\n    X.erase(std::unique(X.begin(),X.end()),X.end());\n    Y.erase(std::unique(Y.begin(),Y.end()),Y.end());\n    for(auto&s:P) // \u79bb\u6563\u5316\n        s.first=std::lower_bound(X.begin(),X.end(),s.first)-X.begin(),\n        s.second=std::lower_bound(Y.begin(),Y.end(),s.second)-Y.begin();\n    n=P.size();\n    std::sort(P.begin(),P.end()); // \u6392\u5e8f\uff0c\u65b9\u4fbf\u540e\u9762\u626b\u63cf\u7ebf\n    BIT1::clear(),BIT2::clear();\n    static bol GoneX[500005],GoneY[500005]; // \u76ee\u524d\u8fd8\u6709\u6ca1\u6709\u8fd9\u79cd x / y\n    static uint FathX[500005],FathY[500005]; // \u5e76\u67e5\u96c6\uff0c\u627e\u5230\u6700\u8fdc\u7684\u4e00\u4e2a x / y \u65b9\u5411\u4e0a\u7684\u8fde\u7eed\u504f\u5e8f\u5bf9\n    static dbl _L[500005],_D[500005];\n    static std::vector<uint>V[500005];\n    for(uint i=0;i<X.size();i++)FathX[i]=i;\n    for(uint i=0;i<Y.size();i++)FathY[i]=i;\n    for(uint i=0;i<n;i++){ // \u7b2c\u4e00\u8f6e\u626b\u63cf\u7ebf\uff0c\u7ef4\u62a4\u51fa\u5e76\u67e5\u96c6\u5f62\u6001\uff0c\u5e76\u5224\u65ad\u51fa\u4ece\u539f\u70b9\u5230\u76ee\u524d\u70b9\u5de6 / \u4e0b\u63d2\u5934\u662f\u5426\u53ef\u8fbe\n        uint u=P[i].first,v=P[i].second;\n        GoneX[u]=GoneY[v]=1;\n        if(u&&GoneX[u-1]&&P[i-1].second<v)FathX[u]=FathX[u-1];\n        if(v&&GoneY[v-1])FathY[v]=FathY[v-1];\n        _L[i]=!GoneX[0]||P[0].second>v||FathX[u]?0:1e18;\n        _D[i]=!GoneY[0]||FathY[v]?0:1e18;\n        V[FathX[u]].push_back(i); // \u7531\u4e8e\u662f\u4e8c\u7ef4\u6570\u70b9\uff0c\u79bb\u7ebf BIT \u63d0\u524d\u5b58\u4e0b\u8be2\u95ee\n    }\n    dbl w=(!GoneX[0]&&FathY[Y.size()-1])||(!GoneY[0]&&FathX[X.size()-1])?0:1e18; // \u539f\u70b9\u662f\u5426\u53ef\u4ee5\u76f4\u63a5\u5230\u8fbe\u7ec8\u70b9\n    for(uint i=0;i<n;i++){ // \u7b2c\u4e8c\u8f6e\u626b\u63cf\u7ebf\uff0c\u8ba1\u7b97\u5de6 / \u4e0b\u63d2\u5934\u6700\u5c0f\u503c\uff0c\u5e76\u66f4\u65b0\u7b54\u6848\n        for(auto s:V[i])_min(_L[s],BIT1::find(P[s].second));\n        uint u=P[i].first,v=P[i].second;\n        dbl L=std::min({_L[i],BIT2::find(v)}),D=std::min({_D[i],BIT1::find(v),BIT2::find(FathY[v])}); // \u5de6\u63d2\u5934\u3001\u4e0b\u63d2\u5934\u7684\u6700\u5c0f\u8d21\u732e\n        dbl R=std::min(L+10*Pi-20,D+5*Pi-20),U=std::min(L+5*Pi-20,D+10*Pi-20); // \u7528\u5de6\u3001\u4e0b\u63d2\u5934\u66f4\u65b0\u53f3\u3001\u4e0a\u63d2\u5934\n        BIT1::chg(v,R),BIT2::chg(v,U);\n        if(u<FathX[X.size()-1])_min(w,R);\n        if(v<FathY[Y.size()-1])_min(w,U);\n    }\n    printf(\"%.15lf\\n\",100.*(x+y)+w);\n    return 0;\n}\n```\n\n",
        "postTime": 1678194269,
        "uid": 105050,
        "name": "myee",
        "ccfLevel": 7,
        "title": "agc019_c"
    },
    {
        "content": "\u5148\u901a\u8fc7\u955c\u50cf\u7ffb\u8f6c\u4f7f\u5f97\u76ee\u6807\u70b9\u5728\u51fa\u53d1\u70b9\u7684\u53f3\u4e0a\u65b9\uff0c\u8fd9\u6837\u80fd\u7b80\u5316\u95ee\u9898\n\n\u6bcf\u884c\u6bcf\u5217\u90fd\u53ea\u4f1a\u6709\u4e00\u4e2a\u8f6c\u76d8\uff0c\u8fd9\u662f\u4e00\u4e2a\u91cd\u8981\u6761\u4ef6\n\n\u60f3\u8c61\u4e00\u4e0b\u6211\u4eec\u7684\u8def\u5f84\uff0c\u5c31\u662f\u4e0d\u65ad\u5f80\u53f3\u4e0a\u65b9\u8d70\uff0c\u9047\u5230\u8f6c\u76d8\u5c31\u7ed51/4\u5468\u8f6c\u5f2f\uff0c\u53ef\u4ee5\u628a\u539f\u6765\u8f6c\u5f2f\u768420\u4f18\u5316\u62105\u03c0\uff0c\u6211\u4eec\u5e0c\u671b\u5728\u8def\u5f84\u4e0a\u9047\u5230\u5c3d\u53ef\u80fd\u591a\u7684\u8f6c\u76d8\u3002\n\n\u4e8e\u662f\u8fd9\u5c31\u53ef\u4ee5\u5efa\u7acbLIS\u6a21\u578b\u3002\u53d6\u51fa(x1,y1)\u5230(x2,y2)\u533a\u57df\u5185\u7684\u8f6c\u76d8\uff0c\u4ee5\u6a2a\u5750\u6807\u4e3a\u4e0b\u6807\uff0c\u7eb5\u5750\u6807\u4e3a\u503c\uff0c\u8dd1\u4e00\u904dLIS\uff0c\u5f97\u5230\u7684\u7b54\u6848\u5c31\u662f\u6211\u4eec\u8def\u5f84\u4e0a\u80fd\u7ecf\u8fc7\u7684\u6700\u591a\u5706\u76d8\u6570\u91cf\n\n\u4f46\u8fd9\u6837\u4f1a\u6709\u4e00\u4e9b\u5c0f\u95ee\u9898\u3002\u6bd4\u5982\u8bf4\u5f53\u6bcf\u4e00\u884c\u90fd\u7ecf\u8fc7\u4e00\u4e2a\u8f6c\u76d8\u65f6\uff0c\u6700\u9876\u4e0a\u90a3\u4e00\u884c\u7684\u8f6c\u76d8\u5fc5\u7136\u8981\u7ed51/2\u5468\u3002\u56e0\u6b64\u9700\u8981\u52a0\u4e00\u4e2a\u7279\u5224\uff0c\u82e5\u6bcf\u4e00\u884c\u90fd\u7ecf\u8fc7\u4e00\u4e2a\u5706\u76d8\uff0c\u6216\u6bcf\u4e00\u5217\u90fd\u7ecf\u8fc7\u4e00\u4e2a\u5706\u76d8\uff0c\u5219\u7b54\u6848\u52a0\u4e0a1/4\u5706\u5468\u7684\u957f\u5ea6\n\n```cpp\n#include<bits/stdc++.h>\n#define X first\n#define Y second\nusing namespace std;\n\nconst int S=(1<<20)+5;\nchar buf[S],*H,*T;\ninline char Get()\n{\n    if(H==T) T=(H=buf)+fread(buf,1,S,stdin);\n    if(H==T) return -1;return *H++;\n}\ninline int read()\n{\n    int x=0;char c=Get();\n    while(!isdigit(c)) c=Get();\n    while(isdigit(c)) x=x*10+c-'0',c=Get();\n    return x;\n}\n\ntypedef pair<int,int> pii;\nconst double pi=acos(-1);\nconst int N=200010;\nconst int MX=1e8+5;\nint x1,yy1,x2,yy2,n,tot=0,lis;\nint g[N],idx[N],a[N],f[N],gx[N],ax[N];\npii pnt[N];\nbool deled[N];\n\nint LIS()\n{\n    int res=0;\n    memset(g,0x7f,sizeof(g));\n    for(int i=1;i<=tot;i++)\n    {\n        auto it=lower_bound(g+1,g+1+n,a[i]);\n        if(*it==0x7f7f7f7f) res++;\n        *it=a[i];\n    }\n    return res;\n}\n\nint main()\n{\n    x1=read();yy1=read();x2=read();yy2=read();n=read();\n    for(int i=1;i<=n;i++) pnt[i].X=read(),pnt[i].Y=read();\n    if(x2<x1||yy2<yy1)\n    {\n        if(x1<=x2) goto swap2;\n        x1=MX-x1;x2=MX-x2;\n        for(int i=1;i<=n;i++) pnt[i].X=MX-pnt[i].X;\n        if(yy1<=yy2) goto work;\n        swap2: yy1=MX-yy1;yy2=MX-yy2;\n        for(int i=1;i<=n;i++) pnt[i].Y=MX-pnt[i].Y;\n    }\n    work: sort(pnt+1,pnt+1+n);\n    for(int i=1;i<=n;i++)\n        if(pnt[i].X>=x1&&pnt[i].X<=x2&&pnt[i].Y>=yy1&&pnt[i].Y<=yy2) a[++tot]=pnt[i].Y;\n    double ans=100.0*(x2-x1+yy2-yy1)+(pi*5-20)*(lis=LIS());\n    if(lis==min(x2-x1,yy2-yy1)+1) ans+=pi*5;\n    output: printf(\"%.12lf\\n\",ans);\n    return 0;\n}\n```\n\n",
        "postTime": 1540457111,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 AT2702 \u3010Fountain Walk\u3011"
    }
]