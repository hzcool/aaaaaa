[
    {
        "content": "\u4f3c\u4e4e\u6ca1\u4eba\u7528\u7ebf\u6027\u57fa\uff0c\u8fd9\u91cc\u6765\u8865\u5145\u4e00\u4e2a\u3002  \n\n\u8bbe $S$ \u662f\u6240\u6709\u4e2a\u7ed9\u5b9a01\u4e32\u91cc\u9762\u6700\u77ed\u7684\u90a3\u4e2a\n\n\u7531\u9898\u610f\u4e0d\u96be\u53d1\u73b0\uff0c\u4e00\u4e2a\u6709\u610f\u4e49\u7684\u4e32\u7684\u957f\u5ea6\u4e0d\u4f1a\u8d85\u8fc7 $2\\times|S|$\u3002\n\n\u56e0\u4e3a\u60f3\u8981\u8ba9\u4e00\u4e2a01\u4e32\u53d8\u957f\uff0c\u90a3\u4e48\u53ea\u80fd\u901a\u8fc7\u5de6\u79fb\u7684\u65b9\u5f0f\u3002\u800c\u5f53\u5b83\u7684\u957f\u5ea6\u8d85\u8fc7\u4e86$2\\times|S|$\uff0c\u5219\u8bf4\u660e\u5b83\u7684\u524d $S$ \u4f4d\u5747\u662f0\uff0c\u90a3\u4e48\u8fd9\u4e2a\u4e32\u548c\u4e00\u4e2a\u7a7a\u4e32\u5b9e\u9645\u4e0a\u662f\u6ca1\u6709\u4ec0\u4e48\u533a\u522b\u7684\u3002    \n\n\u6240\u4ee5\u770b\u4e0a\u53bb\u6709\u65e0\u9650\u4e2a\u768401\u4e32\u5df2\u7ecf\u53d8\u6210\u4e86\u6709 $n\\times |S|$ \u4e2a\u4e32\uff0c\u4e5f\u5c31\u662f\u6700\u591a\u53ea\u4f1a\u6709 $n\\times |S|$ \u4e2a\u957f\u5ea6\u4e0d\u8d85\u8fc7 $2\\times|S|$ \u7684\u4e32\u4e86\u3002  \n\n\u5230\u8fd9\u91cc\uff0c\u4e0d\u96be\u60f3\u5230\u628a\u8fd9\u4e9b\u4e32\u4e22\u5230\u7ebf\u6027\u57fa\u91cc\u9762\u7136\u540e\u505a\u4e00\u4e2a\u6570\u4f4ddp\u3002  \n\n\u6570\u4f4ddp\u90e8\u5206\u6bd4\u8f83\u7b80\u5355\uff0c\u5c31\u4e0d\u8bb2\u4e86\uff0c\u4e3b\u8981\u8bb2\u7ebf\u6027\u57fa\u90e8\u5206\u600e\u4e48\u5b9e\u73b0\u3002  \n\n\u6bcf\u63d2\u5165\u4e00\u4e2a\u4e32\u7684\u590d\u6742\u5ea6\u662f $O(|S|^2)$ \u7684\uff0c\u4e00\u5171\u6709 $n\\times |S|$ \u4e2a\u4e32\uff0c\u4e00\u773c\u770b\u4e0a\u53bb\u4f3c\u4e4e\u662f $O(n|S|^3)$\u7684\uff0c\u5982\u679c\u7167\u7740\u6b63\u5e38\u7684\u7ebf\u6027\u57fa\u5199\uff0c\u786e\u5b9e\u662f\u8fd9\u4e2a\u590d\u6742\u5ea6\uff0c\u4e5f\u786e\u5b9e\u4f1aTLE\u3002  \n\n\u4f46\u662f\u601d\u8003\u4e00\u4e0b\uff0c\u4e00\u4e2a\u7ebf\u6027\u57fa\u5b83\u672c\u8d28\u4e0a\u5c31\u662f\u628a\u4e22\u8fdb\u53bb\u768401\u4e32\u91cc\u9762\u76841\u5c3d\u91cf\u6d88\u9664\uff0c\u6bcf\u6d88\u9664\u4e00\u4e2a1\u7684\u590d\u6742\u5ea6\u662f $O(|S|)$ \u7684\uff0c\u90a3\u4e48\u662f\u4e0d\u662f\u53ef\u4ee5\u8003\u8651\u7c7b\u4f3c\u52bf\u80fd\u5206\u6790\u7684\u505a\u6cd5\uff1f  \n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u4e32 $S$ \uff0c\u4ee4\u5b83\u5728\u7ecf\u8fc7\u4e00\u6b21\u63d2\u5165\u64cd\u4f5c\u4e4b\u540e\u5269\u4e0b\u6765\u7684\u90a3\u4e2a\u88ab\u6d88\u5269\u4e0b\u7684\u4e32\u662f $T$ \uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u63d2\u5165\u4e00\u4e2a $S<<1$ \u548c\u63d2\u5165\u4e00\u4e2a $T<<1$ \u662f\u7b49\u4ef7\u7684\u3002  \n\n\u8bc1\u660e\uff1a  \n\u7531\u4e8e\u5bf9\u4e8e\u4efb\u610f\u4e32 $X$ \uff0c\u90fd\u8981\u4fdd\u8bc1\u5b58\u5728 $X<<1$ \uff0c\u6240\u4ee5\u5982\u679c $S\\bigoplus T=X$ \uff0c\u90a3\u4e48\u539f\u7ebf\u6027\u57fa\u4e2d\u5fc5\u7136\u5b58\u5728 $X<<1$ \uff0c\u6240\u4ee5\u4e5f\u5c31\u5fc5\u7136\u5b58\u5728 $S<<1 \\bigoplus X<<1 =T<<1$ \u3002\n\n\u90a3\u4e48\u8fd9\u6837\u4e0b\u6765\uff0c\u5c31\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e\u521a\u5f00\u59cb\u7ed9\u5b9a\u7684 $n$ \u4e2a\u4e32\uff0c\u5b83\u548c\u5b83\u7684\u884d\u751f\u4e32\u603b\u5171\u88ab\u5f02\u6216\u7684\u6b21\u6570\u4e0d\u4f1a\u8d85\u8fc7 $O(|S|)$ \u3002\n\n\u56e0\u6b64\uff0c\u53ea\u8981\u5728\u7ebf\u6027\u57fa\u7684 `insert` \u51fd\u6570\u4e2d\u628a\u53d8\u91cf\u7528 `&` \u4f20\u8fdb\u53bb\uff0c\u5c31\u53ef\u4ee5\u5b9e\u73b0\u603b\u590d\u6742\u5ea6 $O(n|S|^2)$ \u4e86\u3002\n\n\u5f53\u7136\uff0c\u4f7f\u7528 `bitset` \u4f18\u5316\u4e4b\u540e\u53ef\u4ee5\u505a\u5230 $O(\\dfrac{n|S|^2}{w})$ \n\n\u6240\u4ee5\u603b\u590d\u6742\u5ea6\u662f $O(\\dfrac{n|S|^2}{w}+|S|)$\n\n\n_Code_\n------------\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define il inline\n#define ri register int\n#define ll long long\n#define ui unsigned int\nil ll read(){\n    bool f=true;ll x=0;\n    register char ch=getchar();\n    while(ch<'0'||ch>'9') {if(ch=='-') f=false;ch=getchar();}\n    while(ch>='0'&&ch<='9') x=(x<<3)+(x<<1)+(ch^48),ch=getchar();\n    if(f) return x;\n    return ~(--x);\n}\nil void write(const ll &x){if(x>9) write(x/10);putchar(x%10+'0');}\nil void print(const ll &x) {x<0?putchar('-'),write(~(x-1)):write(x);putchar('\\n');}\nil ll max(const ll &a,const ll &b){return a>b?a:b;}\nil ll min(const ll &a,const ll &b){return a<b?a:b;}\n// struct Int\n// {\n//     char s[8005];\n//     int len;\n//     char& operator[](int pos){return s[pos];}\n//     void operator^=(Int &b){\n//         for(ri i=b.len;~i;--i) s[i]^=b.s[i];\n//         len=max(len,b.len);\n//         while(len&&!s[len]) --len;\n//     }\n//     void operator<<=(int x){\n//         len+=x;\n//         for(ri i=len;i>=x;--i) s[i]=s[i-x];\n//         for(ri i=x-1;~i;--i) s[i]=0;\n//     }\n//     void reset(){\n//         for(ri i=0;i<=len;++i) s[i]=0;\n//         len=0;\n//     }\n// };\n//\u5b9e\u9645\u4e0a\u662f\u7528\u4e0a\u9762\u8fd9\u4e2a\u5c01\u88c5\u597d\u7684\u7c7b\u4f1a\u66f4\u5feb\u4e00\u4e9b\uff0c\u56e0\u4e3abitset\u6bcf\u4e00\u6b21\u90fd\u662f\u628a8000\u8fd9\u4e2a\u4e0a\u754c\u8dd1\u6ee1\u7684\n#define Int bitset<8001>\nInt base[8096],m,b[10];\nbool vis[8096];\nint cnt[8096],li[10];//\nint lim;\nvoid insert(Int &x,int bg){\n    for(ri i=bg;~i;--i){\n        if(!x[i]) continue;\n        if(vis[i]) x^=base[i];\n        else{\n            base[i]=x;\n            vis[i]=1;\n            return;\n        }\n    }\n}\nchar s[8096];\nint n;\nint read(Int &x){\n    x.reset();\n    scanf(\"%s\",s);\n    int len=strlen(s)-1;\n    for(ri i=len;~i;--i) x[len-i]=s[i]-'0';\n    return len;\n}\nconst ll mod=998244353;\nll fac[8096],ans;\nil ll add(ll x,ll y){return (x+=y)>mod?x-mod:x;}\nint Len=0;\n//72016675\nint main(){\n    // freopen(\"rand.in\",\"r\",stdin);\n    // freopen(\"1.out\",\"w\",stdout);\n    n=read(),Len=lim=read(m);\n    for(ri i=1;i<=n;++i){\n        li[i]=read(b[i]);\n        Len=max(Len,li[i]);\n    }\n    Len*=2;\n    for(ri i=1;i<=n;++i){\n        for(ri j=li[i];j<=Len;++j){\n            insert(b[i],j+1);\n            b[i]<<=1;\n        }\n    }\n    fac[0]=1;\n    for(ri i=1;i<=8000;++i) fac[i]=(fac[i-1]<<1)%mod;\n    for(ri i=0;i<=Len;++i){\n        if(vis[i]) cnt[i]++;\n        if(i) cnt[i]+=cnt[i-1];\n    }\n    Int res;\n    res.reset();\n    for(ri i=lim;~i;--i){\n        if(!vis[i]){\n            if(!res[i]&&m[i]){\n                ans=add(ans,fac[cnt[i]]);\n                print(ans);\n                return 0;\n            }\n            else if(res[i]&&!m[i]){\n                print(ans);\n                return 0;\n            }\n            continue;\n        }\n        if(res[i]&&!m[i]) res^=base[i];\n        else if(!res[i]&&m[i]){\n            ans=add(ans,fac[cnt[i]-1]);\n            res^=base[i];\n        }\n        else if(res[i]&&m[i]){\n            ans=add(ans,fac[cnt[i]-1]);\n        }\n    }\n    ++ans;\n    print(ans);\n    return 0;\n}\n```\n",
        "postTime": 1627042456,
        "uid": 206998,
        "name": "Krimson",
        "ccfLevel": 0,
        "title": "[ARC084D] XorShift"
    },
    {
        "content": "**\u9898\u610f** \uff1a\u6709 $n$ \u4e2a\u6570 $A_{i...n}$ \u5199\u5728\u9ed1\u677f\u4e0a\uff08\u4ee5\u4e8c\u8fdb\u5236\u5f62\u5f0f\u7ed9\u51fa\uff09\uff0c\u73b0\u5728\u6709\u4e24\u79cd\u53ef\u4ee5\u6267\u884c\u65e0\u9650\u6b21\u7684\u64cd\u4f5c\uff1a\n\n\u5f53 $x$ \u5728\u9ed1\u677f\u4e0a\u65f6\u628a $2x$ \u4e5f\u5199\u5728\u9ed1\u677f\u4e0a\u3002\n\n\u5f53 $x$ \u548c $y$ \u90fd\u5728\u9ed1\u677f\u4e0a\u65f6\uff0c\u628a $x{\\ \\rm xor\\ }y$ \u5199\u5728\u9ed1\u677f\u4e0a\u3002\uff08\u9009\u62e9\u7684 $x,y$ \u53ef\u4ee5\u76f8\u540c\uff09\n\n\u6c42\u6700\u7ec8\u6709\u591a\u5c11\u4e2a $\u2264M$ \u7684\u6570\u80fd\u88ab\u5199\u5728\u9ed1\u677f\u4e0a\u3002\u7b54\u6848\u5bf9 $998244353$ \u53d6\u6a21\u3002\n\n$n\u22646$, $M,A_i\u22642^{4000}$ \uff0c\u65f6\u9650$\\texttt{2s}$\u3002\n\n------------\n\n\u5c06\u7ed9\u51fa\u7684\u6570\u770b\u505a $F_2$ \u4e0b\u7684\u591a\u9879\u5f0f\u3002\n\n\u4e24\u4e2a\u64cd\u4f5c\u5206\u522b\u5bf9\u5e94 \u201c\u4e58 $x$\u201d \u548c \u201c\u4e24\u4e2a\u591a\u9879\u5f0f\u76f8\u52a0/\u51cf\u201d \u3002\n\n\u5229\u7528\u8fd9\u4e24\u4e2a\u64cd\u4f5c\uff0c\u53ef\u4ee5\u6784\u9020\u51fa\u591a\u9879\u5f0f $F,G$ \u7684 $\\gcd$\u3002\n\n\u5177\u4f53\u5730\uff0c\u6c42 $\\gcd(F,G)$ \u65f6\uff0c\u4e0d\u59a8\u8bbe ${\\rm deg}(F)\\geq {\\rm deg}(G)$ \uff0c\u8bb0 $P=G*x^{{\\rm deg}(F)-{\\rm deg}(G)}$\u3002\n\n\u5219\u6709 $\\gcd(F,G)=\\gcd(F-P,G)$\u3002\n\n\u663e\u7136\uff0c\u8fd9\u6837\u7684\u8f6c\u5316\u6bcf\u6b21\u90fd\u4f1a\u4f7f\u5f97 $F$ \u7684\u6b21\u6570\u51cf\u5c11\uff0c\u6545\uff08\u5f53 $F,G$ \u5176\u4e2d\u4e00\u8005\u4e3a $0$ \u65f6\uff09\u80fd\u6c42\u5f97\u7b54\u6848\u3002\n\n\u8bb0 $D$ \u4e3a $A_{1...n}$ \u7684 $\\gcd$ \u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u9898\u76ee\u4e2d\u7684\u64cd\u4f5c\u53ea\u80fd\u6784\u9020\u51fa\u6240\u6709 $D$ \u7684\u500d\u6570\u3002\n\n- \u4e8e\u662f\u95ee\u9898\u8f6c\u5316\u4e3a \uff1a\n\n  \u6709\u591a\u5c11\u4e2a\u591a\u9879\u5f0f $P$ \u6ee1\u8db3\u4e0b\u5217\u6761\u4ef6 \uff1a\n\n  - $P$ \u662f $D$ \u7684\u500d\u6570\u3002\n  \n  - $P$ \u8f6c\u5316\u4e3a\u4e8c\u8fdb\u5236\u6570\u540e $\\leq M$\u3002\n  \n\u6839\u636e\u6570\u4f4d $\\rm DP$ \u7684\u5957\u8def\uff0c\u53ef\u4ee5\u5c06\u7b2c\u4e8c\u4e2a\u6761\u4ef6\u8f6c\u5316\u6210\u82e5\u5e72\u5982\u4e0b\u4e0d\u76f8\u4ea4\u7684\u7ea6\u675f \uff1a\n\n- \u94a6\u5b9a\u524d\u9762\u7684\u82e5\u5e72\u9ad8\u4f4d\uff0c\u5176\u4f59\u4f4e\u4f4d\u968f\u610f\u3002\n  \n\u8bb0 $d={\\rm deg}(D),m={\\rm deg}(M)$ \u3002\u82e5 $d>m$ \u5219\u7b54\u6848\u4e3a $1$ \uff08\u4ec5\u6709 $0$ \u7b26\u5408\u6761\u4ef6\uff09\u3002\n\n\u4e0d\u96be\u8bc1\u660e\uff0c\u82e5\u6211\u4eec\u94a6\u5b9a\u4e86 $P$ \u7684\u9ad8\u4f4d\uff0c\u53ea\u5269\u4e0b $d-1$ \u4e2a\u4f4e\u4f4d\u6ca1\u6709\u94a6\u5b9a\uff0c\u90a3\u4e48\u6709\u552f\u4e00\u4e00\u79cd\u65b9\u6cd5\u586b\u5199\u4f4e\u4f4d\u4f7f\u5f97\u5176\u662f $D$ \u7684\u500d\u6570\u3002\n\n- \u5177\u4f53\u65b9\u6cd5 \uff1a\u8bb0\u88ab\u94a6\u5b9a\u7684\u90e8\u5206\u4e3a $P_0$ \uff0c\u5728\u4f4e\u4f4d\u586b\u4e0a $P_0\\bmod D$ \u3002\n\n\u4e8e\u662f\uff0c\u82e5\u8be2\u95ee\u4e2d\u94a6\u5b9a\u4e86\u524d $k$ \u4e2a\u9ad8\u4f4d\uff0c\u5219 \uff1a\n\n- \u82e5 $m-k\\geq d-1$ \uff0c\u65b9\u6848\u6570\u4e3a $2^{m-k-d+1}$\u3002\n\n- \u82e5 $m-k<d-1$ \uff0c\u8fd9\u4e9b\u8be2\u95ee\u7684\u524d $m-d+1$ \u4f4d\u90fd\u662f\u76f8\u540c\u7684\uff08\u4e0e $M$ \u76f8\u540c\uff09\uff0c\u53ea\u9700\u5904\u7406\u4e00\u6b21\u3002\uff08\u8865\u5168\u540e\u5224\u5b9a\u662f\u5426 $\\leq M$\uff09\n\n\u5229\u7528 `bitset` \uff0c$F_2$ \u4e0b\u7684\u591a\u9879\u5f0f $\\rm gcd$ \uff0c\u591a\u9879\u5f0f\u53d6\u6a21\u7684\u590d\u6742\u5ea6\u5747\u53ef\u4ee5\u505a\u5230 $O({\\rm deg}^2/\\omega)$\u3002\n\n\u4e8e\u662f\u603b\u590d\u6742\u5ea6\u4e3a $O(nm^2/\\omega)$\u3002\n\n```cpp\n#include<algorithm>\n#include<cstring>\n#include<cstdio>\n#include<bitset>\n#define MaxN 4050\nusing namespace std;\nconst int mod=998244353;\nstruct Poly{bitset<MaxN> f;int m;};\nPoly gcd(Poly A,Poly B)\n{\n  while(A.f.any()&&B.f.any()){\n    if (A.m>B.m){A.f^=B.f<<(A.m-B.m);while(A.m&&!A.f[A.m-1])A.m--;}\n    else {B.f^=A.f<<(B.m-A.m);while(B.m&&!B.f[B.m-1])B.m--;}\n  }return A.f.any() ? A : B;\n}\nPoly fmod(Poly A,Poly B)\n{\n  while(A.m>=B.m){\n    A.f^=B.f<<(A.m-B.m);\n    while(A.m&&!A.f[A.m-1])A.m--;\n  }return A;\n}\nchar s[MaxN],m[MaxN];\nPoly d,sav;\nint n,pw2[MaxN];\nint main()\n{\n\tscanf(\"%d%s\",&n,m);\n\tfor (int i=1;i<=n;i++){\n\t  scanf(\"%s\",s);int len=strlen(s);\n\t  sav.f.reset();sav.m=len;\n\t  for (int j=0;j<len;j++)\n\t    sav.f[len-j-1]=(s[j]=='1');\n\t  d=gcd(d,sav);\n  }\n  int len=strlen(m),ans=0;\n  if (len<d.m){puts(\"1\");return 0;}\n  pw2[0]=1;for (int i=1;i<=len;i++)pw2[i]=(pw2[i-1]<<1)%mod;\n  for (int k=0;len-k-d.m>=0;k++)\n    if (m[k]=='1')\n      ans=(ans+pw2[len-k-d.m])%mod;\n  sav.f.reset();sav.m=len;\n  for (int j=d.m-1;j<len;j++)\n\t  sav.f[j]=(m[len-j-1]=='1');\n\tsav=fmod(sav,d);\n\tbool fl=1;\n\tfor (int i=d.m-2;i>=0;i--)\n\t  if (sav.f[i]>(m[len-i-1]=='1')){fl=0;break;}\n    else if (sav.f[i]<(m[len-i-1]=='1')){fl=1;break;}\n  ans+=fl;\n  printf(\"%d\",(ans+mod)%mod);\n\treturn 0;\n}\n```",
        "postTime": 1620535890,
        "uid": 58705,
        "name": "command_block",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 \u3010AT3623 [ARC084D] XorShift\u3011"
    }
]