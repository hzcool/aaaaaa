[
    {
        "content": "[Blog](https://autumnkite.github.io/atcoder-cfoo15F-sol/)\u98df\u7528\u6548\u679c\u66f4\u4f73\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://code-festival-2015-okinawa-open.contest.atcoder.jp/tasks/code_festival_2015_okinawa_f)\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u5e73\u9762\u4e0a $n$ \u4e2a\u70b9 $(x_i,y_i)$\uff0c\u4ee5\u53ca\u4e09\u53ea\u9e1f\u7684\u521d\u59cb\u5750\u6807 $(x_a,y_a),(x_b,y_b),(x_c,y_c)$\u3002\u73b0\u5728\u4e09\u53ea\u9e1f\u8981\u4ece\u521d\u59cb\u70b9\u5f00\u59cb\uff0c\u4f9d\u6b21\u98de\u5230\u4e00\u4e9b\u70b9\uff08\u4e0d\u9700\u8981\u56de\u5230\u8d77\u70b9\uff09\uff0c\u8981\u6c42\u6bcf\u4e2a\u70b9\u81f3\u5c11\u88ab\u4e00\u53ea\u9e1f\u98de\u5230\u3002\u6c42\u4e09\u53ea\u9e1f\u603b\u98de\u884c\u8ddd\u79bb\u4e4b\u548c\u7684\u6700\u5c0f\u503c\u3002\n\n\u4ece\u4e00\u4e2a\u70b9 $(x_s,y_s)$ \u98de\u5230\u53e6\u4e00\u4e2a\u70b9 $(x_t,y_t)$ \u7684\u98de\u884c\u8ddd\u79bb\u4e3a\u8fd9\u4e24\u4e2a\u70b9\u7684\u6b27\u51e0\u91cc\u5f97\u8ddd\u79bb\uff0c\u5373 $$\\sqrt{(x_s - x_t)^2 + (y_s - y_t)^2}$$\n\n$n\\le 18$\uff0c\u6240\u6709\u6a2a\u7eb5\u5750\u6807\u7684\u7edd\u5bf9\u503c $\\le 10^4$\uff0c\u65f6\u9650 $8s$\u3002\n\n## \u65b9\u6cd5\u4e00\n\n\u4e09\u53ea\u9e1f\u5f88\u96be\u8003\u8651\uff0c\u8003\u8651\u4e00\u53ea\u9e1f\u98de\u904d\u67d0\u4e2a\u70b9\u96c6\u6240\u9700\u7684\u6700\u5c11\u65f6\u95f4\u3002\n\n\u8bb0 $dp_{t,i,j}$ \u8868\u793a\u7b2c $t$ \u53ea\u9e1f\uff0c\u98de\u904d\u70b9\u96c6 $i$\uff0c\u6700\u540e\u505c\u7559\u5728\u70b9 $j$ \u7684\u6700\u5c0f\u8ddd\u79bb\u548c\u3002\n\n\u8f6c\u79fb\u5f88\u663e\u7136\uff0c\u53ea\u8981\u5728\u70b9\u96c6 $i$ \u4e2d\u679a\u4e3e\u4e0a\u4e00\u4e2a\u70b9 $k$\uff0c\u7136\u540e\u76f4\u63a5\u8f6c\u79fb\u5373\u53ef\u3002\n\n\u6700\u540e\u679a\u4e3e\u6bcf\u53ea\u9e1f\u98de\u5230\u7684\u70b9\u96c6\u5373\u53ef\uff0c\u56e0\u4e3a\u4e24\u53ea\u9e1f\u98de\u5230\u7684\u70b9\u96c6\u4e0d\u4f1a\u6709\u4ea4\uff0c\u6240\u4ee5\u590d\u6742\u5ea6\u4e3a $O(3^n)$\u3002\u5177\u4f53\u5b9e\u73b0\u65f6\uff0c\u53ef\u4ee5\u679a\u4e3e\u4e00\u4e2a\u96c6\u5408 $A$\uff0c\u518d\u679a\u4e3e\u8fd9\u4e2a\u96c6\u5408\u7684\u5b50\u96c6 $B$\uff0c\u5047\u8bbe\u5168\u96c6\u4e3a $C$\uff0c\u5219\u4e09\u4e2a\u96c6\u5408\u5206\u522b\u4e3a $B,A-B,C-A$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(3n^22^n+3^n)$\uff0c\u5e38\u6570\u4e0d\u5927\uff0c\u6700\u5927\u70b9 $2898ms$\uff08[\u8bc4\u6d4b\u8bb0\u5f55](https://code-festival-2015-okinawa-open.contest.atcoder.jp/submissions/3961803)\uff09\u3002\n\n## \u65b9\u6cd5\u4e8c\n\n\u53d1\u73b0\u4e0a\u9762\u7684\u65b9\u6cd5\u6bd4\u8f83\u6162\uff0c\u4e14\u4e3b\u8981\u5728\u4e8e $3^n$ \u7684\u7edf\u8ba1\u7b54\u6848\u3002\u8003\u8651\u76f4\u63a5\u5728\u7b2c\u4e8c\u53ea\u9e1f\u3001\u7b2c\u4e09\u53ea\u9e1f DP \u65f6\uff0c\u76f4\u63a5\u5408\u5e76\u7b54\u6848\u3002\n\n\u8bb0 $dp_{t,i,j}$ \u8868\u793a\u524d $i$ \u53ea\u9e1f\uff0c\u98de\u904d\u70b9\u96c6 $i$\uff0c\u7b2c $i$ \u53ea\u9e1f\u505c\u7559\u5728\u70b9 $j$ \u65f6\u7684\u6700\u5c0f\u8ddd\u79bb\u548c\u3002\n\n\u4e3b\u8981\u8f6c\u79fb\u65b9\u7a0b\u4e0e\u65b9\u6cd5\u4e00\u5dee\u4e0d\u591a\uff0c\u4f46\u662f\u6709\u4e00\u4e9b\u7ec6\u8282\u9700\u8981\u6ce8\u610f\uff0c\u4f8b\u5982\u98de\u5230\u7b2c\u4e00\u4e2a\u70b9\u65f6\u9700\u8981\u7279\u6b8a\u8f6c\u79fb\uff0c\u5177\u4f53\u53c2\u89c1\u4ee3\u7801\u3002\u4e5f\u8bb8\u6709\u66f4\u597d\u7684\u3001\u7ec6\u8282\u66f4\u5c11\u7684\u5199\u6cd5\uff0c\u6b22\u8fce\u5206\u4eab\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(3n^22^n)$\uff0c\u6700\u5927\u70b9 $535ms$\uff08[\u8bc4\u6d4b\u8bb0\u5f55](https://code-festival-2015-okinawa-open.contest.atcoder.jp/submissions/4218967)\uff09\u3002\n\n## \u4ee3\u7801\n\n### \u65b9\u6cd5\u4e00\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\nint n;\nstruct point{\n\tint x, y;\n}a[20], b[3];\ndouble Dp[3][300000][20];\ndouble dis(point a, point b){\n\treturn sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\nint main(){\n\tscanf(\"%d\", &n);\n\tfor (register int i = 0; i < n; ++i) scanf(\"%d%d\", &a[i].x, &a[i].y);\n\tfor (register int i = 0; i < 3; ++i) scanf(\"%d%d\", &b[i].x, &b[i].y);\n\tfor (register int t = 0; t < 3; ++t){\n\t\tdouble (*dp)[20] = Dp[t];\n\t\tfor (register int i = 0; i < (1 << n); ++i)\n\t\t\tfor (register int j = 0; j <= n; ++j)\n\t\t\t\tdp[i][j] = 1e100;\n\t\tdp[0][n] = 0;\n\t\tfor (register int i = 0; i < n; ++i) dp[1 << i][i] = dis(b[t], a[i]);\n\t\tfor (register int i = 0; i < (1 << n); ++i)\n\t\t\tfor (register int j = 0; j < n; ++j)\n\t\t\t\tif (i >> j & 1){\n\t\t\t\t\tfor (register int k = 0; k < n; ++k)\n\t\t\t\t\t\tif (i >> k & 1 && k != j)\n\t\t\t\t\t\t\tdp[i][j] = std :: min(dp[i][j], dp[1 << j ^ i][k] + dis(a[k], a[j]));\n\t\t\t\t\tdp[i][n] = std :: min(dp[i][n], dp[i][j]); // \u8fd9\u4e2a\u72b6\u6001\u8bb0\u5f550~n-1\u7684\u6700\u5c0f\u503c\n\t\t\t\t}\n\t}\n\tdouble ans = 1e100;\n\tfor (register int i = 0; i < (1 << n); ++i)\n\t\tfor (register int j = i; j >= 0; j = (j - 1) & i){\n\t\t\tint A = j, B = i ^ j, C = ((1 << n) - 1) ^ i;\n\t\t\tans = std :: min(ans, Dp[0][A][n] + Dp[1][B][n] + Dp[2][C][n]);\n\t\t\tif (!j) break;\n\t\t}\n\tprintf(\"%.12lf\\n\", ans);\n}\n```\n\n### \u65b9\u6cd5\u4e8c\n\n```cpp\n#include <cstdio>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\nint n;\nstruct point{\n\tint x, y;\n}a[20], b;\ndouble dp[3][300000][20], d[20][20];\ndouble dis(point a, point b){\n\treturn sqrt((a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y));\n}\nint main(){\n\tscanf(\"%d\", &n);\n\tfor (register int i = 0; i < n; ++i) scanf(\"%d%d\", &a[i].x, &a[i].y);\n\tfor (register int t = 0; t < 3; ++t){\n\t\tscanf(\"%d%d\", &b.x, &b.y);\n\t\tfor (register int i = 0; i < (1 << n); ++i)\n\t\t\tfor (register int j = 0; j <= n; ++j)\n\t\t\t\tdp[t][i][j] = 1e100;\n\t\tfor (register int i = 0; i < n; ++i)\n\t\t\tfor (register int j = 0; j < n; ++j)\n\t\t\t\td[i][j] = dis(a[i], a[j]);\n\t\tdp[t][0][n] = 0;\n\t\tfor (register int i = 0; i < n; ++i) dp[t][1 << i][i] = dis(b, a[i]);\n\t\tfor (register int i = 0; i < (1 << n); ++i)\n\t\t\tfor (register int j = 0; j < n; ++j)\n\t\t\t\tif (i >> j & 1){\n\t\t\t\t\tdp[t][i][n] = std :: min(t ? dp[t - 1][i][n] : 1e100, dp[t][i][n]); // \u7279\u6b8a\u8f6c\u79fb 1\n\t\t\t\t\tfor (register int k = 0; k < n; ++k)\n\t\t\t\t\t\tif (i >> k & 1 && k != j)\n\t\t\t\t\t\t\tdp[t][i][j] = std :: min(dp[t][i][j], dp[t][1 << j ^ i][k] + d[k][j]);\n\t\t\t\t\tdp[t][i][j] = std :: min(dp[t][i][j], t ? dp[t - 1][1 << j ^ i][n] + dis(b, a[j]) : 1e100); // \u7279\u6b8a\u8f6c\u79fb 2\n\t\t\t\t\tdp[t][i][n] = std :: min(dp[t][i][n], dp[t][i][j]);\n\t\t\t\t}\n\t}\n\tprintf(\"%.12lf\\n\", dp[2][(1 << n) - 1][n]);\n}\n```\n\n\u6709\u66f4\u597d\u7684\u5199\u6cd5\u6216\u590d\u6742\u5ea6\u66f4\u4f18\u7684\u505a\u6cd5\u8bf7\u5728\u8bc4\u8bba\u4e2d\u5206\u4eab\uff01",
        "postTime": 1550753893,
        "uid": 20561,
        "name": "AutumnKite",
        "ccfLevel": 10,
        "title": "\u300cAT1728\u300d\u300cCODE FESTIVAL 2015 OKINAWA OPEN\u300dFalconry"
    }
]