[
    {
        "content": "\u4e00\u4e2a\u6bd4\u8f83\u9700\u8981\u6e05\u6670\u601d\u8def\uff0c\u4f46\u662f\u633a\u5de7\u5999\u7684\u65b9\u6cd5\u3002\n\n\u9996\u5148\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u7684\u503c $a_{i,j}$\uff0c\u4f1a\u5bf9\u5b83\u4ea7\u751f\u5f71\u54cd\u7684\u53ea\u6709\u4e0a\u6b21 $2$ \u64cd\u4f5c\u5230\u73b0\u5728\u7684 $1$ \u64cd\u4f5c\u3002\u8003\u8651\u600e\u6837\u5229\u7528\u8fd9\u4e00\u70b9\u3002\n\n\u6bcf\u6b21 $1$ \u64cd\u4f5c\u4f1a\u6d89\u53ca\u4e00\u4e2a\u533a\u95f4\uff0c\u60f3\u5230\u7c7b\u4f3c\u626b\u63cf\u7ebf\u7684\u64cd\u4f5c\u3002\u53d1\u73b0\u64cd\u4f5c $2$ \u4e0d\u592a\u597d\u7ef4\u62a4\uff0c\u6240\u4ee5\u8f6c\u53d8\u4e00\u4e0b\u601d\u8def\uff1a\u91cd\u65b0\u4ee5\u539f\u6765\u7eb5\u5750\u6807\u4e3a $x$ \u8f74\uff0c\u4ee5\u65f6\u95f4\u6233\u4e3a $y$ \u8f74\uff0c\u5c06\u6240\u6709\u8be2\u95ee\u548c\u4fee\u6539\u6309\u7167 $x$ \u8f74\u6392\u5e8f\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $x$\uff0c\u7ef4\u62a4\u5f53\u524d\u7eb5\u5750\u6807\u7684\u503c\u4e3a\u5e8f\u5217 $a$\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u8be2\u95ee\uff0c\u8bbe $i$ \u4e3a\u4e0a\u4e00\u6b21\u5f71\u54cd\u5b83\u7684\u64cd\u4f5c $2$ \u7684\u65f6\u95f4\u6233\uff0c$j$ \u4e3a\u6539\u6210\u7684\u503c\uff0c$t$ \u4e3a\u5f53\u524d\u64cd\u4f5c\u7684\u65f6\u95f4\u6233\uff0c\u5219\u8fd9\u6b21\u8be2\u95ee\u7684\u7b54\u6848\u4e3a $\\sum_{i\\le k\\le t} a_k+j$\u3002\n\n\u6240\u4ee5\u53ef\u4ee5\u7528 BIT \u7ef4\u62a4\u5e8f\u5217 $a$\uff0c\u5229\u7528\u626b\u63cf\u7ebf\u7684\u601d\u60f3\uff0c\u5c06\u64cd\u4f5c $1$ \u770b\u6210 $x$ \u8f74\u4e3a $l$ \u65f6\u5c06\u5bf9\u5e94\u65f6\u95f4\u6233\u4f4d\u7f6e\u52a0\u4e0a $x$\uff0c\u7b49\u4e8e $r+1$ \u65f6\u51cf\u53bb $x$\uff0c\u518d\u7528\u6570\u7ec4\u8bb0\u5f55\u4e0a\u8ff0 $i,j$ \u5373\u53ef\u3002\n\n\u53ef\u4ee5\u7ed3\u5408\u4ee3\u7801\u7406\u89e3\uff0c\u6bd5\u7adf\u8fd9\u79cd\u4ee5\u65f6\u95f4\u6233\u4e3a\u4e00\u8f74\u8fd8\u662f\u592a\u62bd\u8c61\u4e86\u3002\n\n\u611f\u89c9\u53ef\u4ee5\u4e0b\u4f4d\u84dd\uff1f\n\ncode\uff1a\n\n```cpp\nint n,m,q,s,pre[N],c[N],id[N];\nll ans[N];\nstruct node{\n\tint pos,t,vl,op;\n}e[N<<1];\n\nll tr[N];\n#define lowbit(x) (x&(-x))\ninline void update(int x,int y){\n\twhile(x<=q){\n\t\ttr[x]+=y;\n\t\tx+=lowbit(x);\n\t}\n}\ninline ll query(int x){\n\tif(!x)\n\t\treturn 0;\n\tll ret=0;\n\twhile(x){\n\t\tret+=tr[x];\n\t\tx-=lowbit(x);\n\t}\n\treturn ret;\n}\n\ninline bool cmp(node x,node y){\n\treturn x.pos!=y.pos?x.pos<y.pos:x.op<y.op;\n}\nvoid solve(){\n\tscanf(\"%d%d%d\",&n,&m,&q);\n\tint cnt=0;\n\tfor(int i=1,op,x,y,k;i<=q;i++){\n\t\tscanf(\"%d%d%d\",&op,&x,&y);\n\t\tif(op==1){\n\t\t\tscanf(\"%d\",&k);\n\t\t\te[++s]={x,i,k,-1};\n\t\t\te[++s]={y+1,i,-k,-1};\n\t\t}\n\t\tif(op==2){\n\t\t\tpre[x]=i;\n\t\t\tc[x]=y;\n\t\t}\n\t\tif(op==3){\n\t\t\te[++s]={y,i,pre[x],c[x]};\n\t\t\tid[i]=++cnt;\n\t\t}\n\t}\n\tsort(e+1,e+s+1,cmp);\n\tfor(int i=1;i<=s;i++){\n\t\tif(e[i].op==-1)\n\t\t\tupdate(e[i].t,e[i].vl);\n\t\telse \n\t\t\tans[id[e[i].t]]=query(e[i].t)-query(e[i].vl)+e[i].op;\n\t}\n\tfor(int i=1;i<=cnt;i++)\n\t\tprintf(\"%lld\\n\",ans[i]);\n}\nsigned main(){\n\tint t=1;\n\t//\tscanf(\"%d\",&t);\n\twhile(t--)\n\t\tsolve();\n}\n```",
        "postTime": 1685107374,
        "uid": 740322,
        "name": "_Ritsu_",
        "ccfLevel": 0,
        "title": "ABC253F"
    },
    {
        "content": "# [[ABC253F] Operations on a Matrix](https://www.luogu.com.cn/problem/AT_abc253_f) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.tsawke.com?t=ABC253F)\n\n## \u9898\u9762\n\n\u5b58\u5728 $ n $ \u884c $ m $ \u5217\u7684\u77e9\u9635\uff0c\u7ed9\u5b9a $ q $ \u6b21\u64cd\u4f5c\uff0c\u6709 $ 3 $ \u79cd\u683c\u5f0f\u3002\n\n* `1 l r x`\uff1a\u5c06 $ [l, r] $ \u5217\u7684\u6240\u6709\u5143\u7d20\u5168\u90e8\u52a0\u4e0a $ x $\u3002\n* `2 i x`\uff1a\u5c06\u7b2c $ i $ \u884c\u7684\u5143\u7d20\u5168\u90e8\u53d8\u4e3a $ x $\u3002\n* `3 i j`\uff1a\u8f93\u51fa\u77e9\u9635 $ (i, j) $ \u4f4d\u7f6e\u7684\u5143\u7d20\u503c\u3002\n\n## Solution\n\n\u611f\u89c9\u8fd8\u7b97\u662f\u4e00\u9053\u7ec6\u8282\u4e0d\u5c11\u7684\u9898\u3002\n\n\u9996\u5148\u8fd9\u9053\u9898\u7684\u505a\u6cd5\u4e0d\u5c11\uff0c\u4e3b\u6d41\u7684\u5c31\u662f\u7c7b\u4f3c\u4e8c\u4f4d\u504f\u5e8f\u7ef4\u62a4\uff0c\u6216\u8005\u5199\u4e00\u4e2a\u533a\u95f4\u4fee\u6539\u7684\u4e3b\u5e2d\u6811\u3002\n\n\u8fd9\u91cc\u4e3b\u8981\u8bf4\u4e00\u4e0b\u7528 BIT \u7ef4\u62a4\u7684\u65b9\u6cd5\u3002\n\n\u9996\u5148\u4e0d\u96be\u60f3\u5230\uff0c$ 2 $ \u64cd\u4f5c\u4f1a\u8986\u76d6\u6389\u524d\u9762\u6240\u6709\u7684\u5bf9\u5176\u6709\u5f71\u54cd\u7684 $ 1 $ \u64cd\u4f5c\u3002\u7136\u540e $ 1 $ \u64cd\u4f5c\u662f\u533a\u95f4\u4fee\u6539\u5217\uff0c$ 2 $ \u64cd\u4f5c\u662f\u5355\u70b9\u63a8\u5e73\u884c\u3002\u6240\u4ee5\u8003\u8651\u79bb\u7ebf\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\uff0c\u4ee4\u5176\u5e8f\u53f7\u4e3a $ r $\uff0c\u6709\u884c $ x $ \u5217 $ y $\uff0c\u6211\u4eec\u8981\u627e\u5230\u5728\u5176\u4e4b\u524d\u7684\u4e0a\u4e00\u4e2a\u63a8\u5e73 $ x $ \u884c\uff0c\u4ee4\u5176\u7684\u64cd\u4f5c\u5e8f\u53f7\u4e3a $ l $\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u9700\u8981\u5bf9\u8fd9\u4e2a\u7b54\u6848\u521d\u59cb\u8bbe\u4e3a\u90a3\u6b21\u63a8\u5e73\u7684\u503c\uff0c\u7136\u540e\u52a0\u4e0a $ [l, r] $ \u4e4b\u95f4\u7684\u6240\u6709\u7684\u5bf9\u4e8e $ y $ \u5217\u7684\u64cd\u4f5c\u3002\n\n\u601d\u8def\u5c31\u662f\u8fd9\u6837\uff0c\u7ef4\u62a4\u7684\u65b9\u5f0f\u8fd8\u662f\u6709\u4e9b\u9ad8\u5999\u7684\u3002\u5148\u8003\u8651\u79bb\u7ebf\u4e00\u904d\uff0c\u7136\u540e\u7ef4\u62a4\u5bf9\u4e8e\u6bcf\u4e2a\u67e5\u8be2\u7684\u4e0a\u4e00\u6b21\u5bf9\u5e94\u7684\u63a8\u5e73\uff0c\u540c\u65f6\u7ef4\u62a4\u8be5\u67e5\u8be2\u7684\u521d\u59cb\u503c\uff0c\u7136\u540e\u5728\u9700\u8981\u51cf\u53bb\u7684\u4f4d\u7f6e\u5f00\u4e2a `basic_string` \u63d2\u8fdb\u53bb\u9700\u8981\u51cf\u7684\u5e8f\u53f7\u3002\u7136\u540e\u6211\u4eec\u8003\u8651\u4f1a\u6709\u4e00\u6b21\u533a\u95f4\u7684\u67e5\u8be2\uff0c\u7528 BIT \u548c\u524d\u7f00\u548c\u7ef4\u62a4\uff0c\u518d\u904d\u5386\u4e00\u6b21\u64cd\u4f5c\uff0c\u5148\u5c06\u524d\u7f00\u52a0\u8d77\u6765\uff0c\u7136\u540e\u51cf\u53bb\u7684\u90a3\u4e2a\u524d\u7f00\u5c31\u5728\u6211\u4eec\u7b2c\u4e8c\u6b21\u904d\u5386\u7684\u65f6\u5019\u901a\u8fc7\u904d\u5386\u5bf9\u5e94\u7684 `basic_string` \u800c\u51cf\u53bb\u3002\u7136\u540e\u6700\u540e\u8dd1\u4e00\u904d\u8f93\u51fa\u7b54\u6848\u5373\u53ef\u3002\n\n## Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW(arr) void* Edge::operator new(size_t){static Edge* P = arr; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\ntemplate < typename T = int >\ninline T read(void);\n\nint N, M, Q;\nint lst[210000], pos[210000];\nll ans[210000];\nstruct Query{int opt; int a, b, c;}qs[210000];\nbasic_string < int > del[210000];\n\nclass BIT{\nprivate:\n    ll tr[210000];\npublic:\n    int lowbit(int x){return x & -x;}\n    void Modify(int x, int v){while(x <= M)tr[x] += v, x += lowbit(x);}\n    ll Query(int x){ll ret(0); while(x)ret += tr[x], x -= lowbit(x); return ret;}\n    void ModifyRange(int l, int r, ll v){Modify(l, v), Modify(r + 1, -v);}\n}bit;\n\nint main(){\n    // freopen(\"test_05.txt\", \"r\", stdin);\n    // freopen(\"out.txt\", \"w\", stdout);\n    N = read(), M = read(), Q = read();\n    for(int i = 1; i <= Q; ++i){\n        int opt = read();\n        switch(opt){\n            case 1:{\n                int l = read(), r = read(), v = read(); qs[i] = Query{opt, l, r, v};\n                break;\n            }\n            case 2:{\n                int p = read(), v = read(); qs[i] = Query{opt, p, v};\n                pos[p] = i;\n                break;\n            }\n            case 3:{\n                int x = read(), y = read(); qs[i] = Query{opt, x, y};\n                ans[i] = qs[pos[x]].b;\n                del[pos[x]] += i;\n                break;\n            }\n            default: break;\n        }\n    }\n    for(int i = 1; i <= Q; ++i){\n        switch(qs[i].opt){\n            case 1:{bit.ModifyRange(qs[i].a, qs[i].b, qs[i].c); break;}\n            case 2:{for(auto p : del[i])ans[p] -= bit.Query(qs[p].b); break;}\n            case 3:{ans[i] += bit.Query(qs[i].b); break;}\n            default: break;\n        }\n    }\n    for(int i = 1; i <= Q; ++i)if(qs[i].opt == 3)printf(\"%lld\\n\", ans[i]);\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n## UPD\n\nupdate-2022_12_05 \u521d\u7a3f",
        "postTime": 1670228419,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "[ABC253F] Operations on a Matrix \u9898\u89e3"
    }
]