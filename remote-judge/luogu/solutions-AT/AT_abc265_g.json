[
    {
        "content": "# ABC265G \u9898\u89e3\n\n\n\n## \u601d\u8def\u5206\u6790\n\n\u601d\u8def\u6bd4\u8f83\u7b80\u5355\uff0c\u533a\u95f4\u4fee\u6539\u533a\u95f4\u67e5\u8be2\u7684\u6570\u636e\u7ed3\u6784\u7b2c\u4e00\u65f6\u95f4\u60f3\u5230\u7ebf\u6bb5\u6811\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u7ebf\u6bb5\u6811\u4e0a\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\uff0c\u7ef4\u62a4 $cnt_x$ \u8868\u793a\u6bcf\u4e2a $x$ \u5728\u5bf9\u5e94\u533a\u95f4\u91cc\u51fa\u73b0\u7684\u4e2a\u6570\uff0c\u7ef4\u62a4 $inv_{x,y}$ \u8868\u793a\u533a\u95f4\u4e2d\u51fa\u73b0 $a_i=x,a_j=y$ \u4e14 $i<j$ \u7684\u6570\u5bf9\u6570\u91cf\u3002\n\n\u6bcf\u6b21\u4fee\u6539\u7ef4\u62a4\u4e00\u4e2a\u5173\u4e8e $\\{0,1,2\\}$ \u7684\u7f6e\u6362\uff08\u8fd9\u91cc\u7684\u7f6e\u6362\u5b9a\u4e49\u4e0d\u592a\u4e25\u8c28\uff0c\u4e0d\u4e00\u5b9a\u662f $0,1,2$ \u7684\u4e00\u4e2a\u6392\u5217\uff0c\u53ea\u662f\u8868\u793a $0,1,2$ \u6700\u540e\u6b27\u5206\u522b\u4f1a\u53d8\u6210\u4ec0\u4e48\u5143\u7d20\uff09\u7684 Lazy Tag\uff0c\u6253\u6807\u8bb0\u7684\u65f6\u5019\u53ea\u9700\u8981\u66b4\u529b\u7f6e\u6362 ${0,1,2}$ \u7684\u503c\u3002\n\n\u6bcf\u6b21\u56de\u7b54\u7b54\u6848\u7684\u65f6\u5019\u8f93\u51fa\u6240\u6709 $x>y$ \u7684 $inv_{x,y}$ \u7684\u548c\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(nw^2\\log n)$\uff0c$w$ \u4e3a $\\{a_i\\}$ \u7684\u503c\u57df\u3002\n\n## \u4ee3\u7801\u5448\u73b0\n\n\u4e0b\u9762\u5177\u4f53\u5206\u6790\u4e00\u4e0b\u5982\u4f55\u8ba9\u4ee3\u7801\u66f4\u52a0\u6e05\u6670\uff1a\n\n\u9996\u5148\uff0c\u6211\u4eec\u5bf9 Lazy Tag \u8bbe\u7acb\u4e00\u4e2a\u7ed3\u6784\u4f53 `Record`\uff0c\u7528\u6570\u7ec4 `p[3]` \u7ef4\u62a4\u7f6e\u6362 $\\{0,1,2\\}\\gets \\{p_0,p_1,p_2\\}$\uff1a\n\n```cpp\nstruct Record {\n\tint p[3]\n};\n```\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u8981\u5b9e\u73b0\u4e00\u4e2a `Record` \u7684\u6784\u9020\u51fd\u6570\uff0c\u5176\u4e2d\u9ed8\u8ba4\u7684\u6784\u9020\u51fd\u6570\u5e94\u8be5\u662f $\\{p_i\\}=\\{0,1,2\\}$\uff0c\u5e76\u4e14\u652f\u6301\u6784\u9020\u4e00\u4e2a\u9898\u76ee\u4e2d\u7ed9\u51fa\u7684 $\\{p_i\\}=\\{s,t,u\\}$ \u7684\u6807\u8bb0\uff1a\n\n```cpp\nstruct Record {\n\t/* Funciton Before */\n\tRecord() { p[0]=0,p[1]=1,p[2]=2; }\n\tRecord(int s,int t,int u) { p[0]=s,p[1]=t,p[2]=u; }\n};\n```\n\n\u4e3a\u4e86\u8c03\u7528\u65b9\u4fbf\uff0c\u6211\u4eec\u53ef\u4ee5\u91cd\u8f7d `[]` \u8fd0\u7b97\u7b26\uff0c\u7528 `tag[i]` \u4ee3\u66ff `tag.p[i]`\uff0c\u4ece\u800c\u51cf\u5c11\u7801\u91cf\uff1a\n\n```cpp\nstruct Record {\n\t/* Funciton Before */\n\tinline int& operator [](const int &i) { return p[i]; }\n};\n```\n\n\u7531\u4e8e\u6211\u4eec\u8981\u652f\u6301\u5728\u4e00\u8f6e\u7f6e\u6362\u7684\u57fa\u7840\u4e0a\u518d\u8fdb\u884c\u4e00\u8f6e\u7f6e\u6362\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u91cd\u8f7d `+` \u8fd0\u7b97\u7b26\uff0c\u7528 `tag1+tag2` \u8868\u793a\u5148\u8fdb\u884c `tag1` \u4ee3\u8868\u7684\u7f6e\u6362\uff0c\u7136\u540e\u518d\u8fdb\u884c `tag2` \u4ee3\u8868\u7684\u7f6e\u6362\uff1a\n\n```cpp\nstruct Record {\n\t/* Funciton Before */\n\tinline friend Record operator +(Record org,Record add) {\n\t\treturn Record(add[org[0]],add[org[1]],add[org[2]]);\n\t}\n};\n```\n\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u5b9e\u73b0\u7ef4\u62a4\u6bcf\u4e2a\u7ebf\u6bb5\u6811\u4fe1\u606f\u7684 `Node` \u7ed3\u6784\u4f53\u3002\n\n\u9996\u5148\uff0c\u4e00\u4e2a `Node` \u7ed3\u6784\u4f53\u8981\u7ef4\u62a4 `inv[3][3]` \u548c `cnt[3]` \u7684\u4fe1\u606f\uff0c\u4ee3\u8868\u7684\u542b\u4e49\u5982\u9898\u6240\u793a\uff0c\u540c\u65f6\u7ef4\u62a4\u4e00\u4e2a `Record` \u7ed3\u6784\u4f53\u8868\u793a\u5f53\u524d\u533a\u95f4\u5bf9\u5e94\u7684 Lazy Tag\uff1a\n\n```cpp\nstruct Node {\n\tint inv[3][3],cnt[3];\n\tRecord tag; \n};\n```\n\n\u63a5\u4e0b\u6765\u5b9e\u73b0\u6784\u9020\u51fd\u6570\uff0c\u9664\u4e86\u9ed8\u8ba4\u7684\u7a7a\u533a\u95f4\u5916\uff0c\u6211\u4eec\u8981\u5728\u7ebf\u6bb5\u6811\u5efa\u7acb\u7684\u8fc7\u7a0b\u4e2d\u6c42\u53f6\u5b50\u7ed3\u70b9\u7684\u503c\uff0c\u5373\u533a\u95f4 $[x,x]$\uff0c\u6b64\u65f6 $inv_{x,y}$ \u5168\u4e3a $0$\uff0c\u800c  $cnt_{a_x}$ \u4e3a $1$ \u5176\u4f59\u4e3a $0$\uff1a\n\n```cpp\nstruct Node {\n\t/* Funciton Before */\n\tNode() { memset(inv,0,sizeof(inv)),memset(cnt,0,sizeof(cnt)); }\n\tNode(int k) { memset(inv,0,sizeof(inv)),memset(cnt,0,sizeof(cnt));++cnt[k];\t}\n};\n```\n\n\u7531\u4e8e\u7ebf\u6bb5\u6811\u5728\u7ef4\u62a4\u8fc7\u7a0b\u4e2d\u8981\u4e0d\u65ad\u8fdb\u884c Push Up\uff0c\u56e0\u6b64\u6211\u4eec\u53ef\u4ee5\u91cd\u8f7d `+` \u8fd0\u7b97\u7b26\u6765\u7ef4\u62a4\u5408\u5e76\u5de6\u53f3\u533a\u95f4\u540e\u5f97\u5230\u7684\u7ed3\u679c\u3002\n\n\u6b64\u65f6 $cnt_x$ \u76f4\u63a5\u662f\u5de6\u53f3\u533a\u95f4\u7684 $cnt_x$ \u4e4b\u548c\u3002\n\n$inv_{x,y}$ \u7edf\u8ba1\u7684\u6ee1\u8db3 $a_i=x,a_j=y$ \u7684\u6570\u5bf9 $(a_i,a_j)$ \u6570\u91cf\u6709\u4e09\u79cd\uff1a\n\n- $a_i,a_j$ \u90fd\u5728\u5de6\u533a\u95f4\uff0c\u8d21\u732e\u4e3a\u5de6\u533a\u95f4 $inv_{x,y}$ \u7684\u503c\u3002\n- $a_i$ \u5728\u5de6\u533a\u95f4\uff0c$a_j$ \u5728\u53f3\u533a\u95f4\uff0c\u8d21\u732e\u4e3a\u5de6\u533a\u95f4 $cnt_x$ \u7684\u503c\u4e58\u4e0a\u53f3\u533a\u95f4 $cnt_y$ \u7684\u503c\u3002\n- $a_i,a_j$ \u90fd\u5728\u53f3\u533a\u95f4\uff0c\u8d21\u732e\u4e3a\u53f3\u533a\u95f4 $inv_{x,y}$ \u7684\u503c\u3002\n\n\u6309\u7167\u4e0a\u8ff0\u8fc7\u7a0b\u7ef4\u62a4\u5408\u5e76\u64cd\u4f5c\u5373\u53ef\uff1a\n\n```cpp\nstruct Node {\n\t/* Funciton Before */\n\tinline friend Node operator +(Node L,Node R) {\n\t\tNode A;\n\t\tfor(int i:{0,1,2}) A.cnt[i]=L.cnt[i]+R.cnt[i];\n\t\tfor(int i:{0,1,2}) {\n\t\t\tfor(int j:{0,1,2}) {\n\t\t\t\tif(i==j) continue;\n\t\t\t\tA.inv[i][j]=L.inv[i][j]+L.cnt[i]*R.cnt[j]+R.inv[i][j];\n\t\t\t}\n\t\t}\n\t\treturn A;\n\t}\n};\n```\n\n\u63a5\u4e0b\u6765\uff0c\u5728\u4fee\u6539\u64cd\u4f5c\u548c\u7ebf\u6bb5\u6811 Push Down \u7684\u65f6\u5019\uff0c\u9700\u8981\u4e0d\u65ad\u5728\u4e00\u4e2a\u539f\u6709\u7684 `Node` \u8282\u70b9\u4e0a\u8fdb\u884c\u4e00\u6b21\u7f6e\u6362\uff0c\u66b4\u529b\u6267\u884c\u4e00\u4e2a\u7531 `Record` \u7ef4\u62a4\u7684\u7f6e\u6362\u5373\u53ef\uff1a\n\n```cpp\nstruct Node {\n\t/* Funciton Before */\n\tinline void add(Record op) {\n\t\tNode ret;\n\t\ttag=tag+op;\n\t\tfor(int i:{0,1,2}) for(int j:{0,1,2}) ret.inv[op[i]][op[j]]+=inv[i][j];\n\t\tfor(int i:{0,1,2}) for(int j:{0,1,2}) inv[i][j]=(i==j)?0:ret.inv[i][j];\n\t\tfor(int i:{0,1,2}) ret.cnt[op[i]]+=cnt[i];\n\t\tfor(int i:{0,1,2}) cnt[i]=ret.cnt[i];\n\t}\n};\n```\n\n\u6700\u540e\u8fd8\u8981\u7edf\u8ba1\u4e00\u4e2a\u533a\u95f4\u5bf9\u5e94\u7684 `Node` \u8282\u70b9\u7684\u7b54\u6848\uff0c\u5b9e\u73b0\u4e00\u4e2a\u6210\u5458\u51fd\u6570\u7ef4\u62a4\u5373\u53ef\uff1a\n\n```cpp\nstruct Node {\n\t/* Funciton Before */\n\tinline int calc() {\n\t\tint ret=0;\n\t\tfor(int i:{0,1,2}) for(int j:{0,1,2}) if(i>j) ret+=inv[i][j];\n\t\treturn ret;\n\t}\n};\n```\n\n\u6700\u540e\u5c31\u662f\u7ebf\u6bb5\u6811\u6a21\u677f\u548c\u4e3b\u51fd\u6570\u4e86\uff0c\u8fd9\u90e8\u5206\u7684\u5b9e\u73b0\u6bd4\u8f83\u7b80\u5355\uff0c\u5404\u4f4d\u81ea\u884c\u5b8c\u6210\u5373\u53ef\uff0c\u5b8c\u6574\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int MAXN=2e5+1;\nstruct Record {\n\tint p[3];\n\tRecord() { p[0]=0,p[1]=1,p[2]=2; }\n\tRecord(int s,int t,int u) { p[0]=s,p[1]=t,p[2]=u; }\n\tinline int& operator [](const int &i) { return p[i]; }\n\tinline friend Record operator +(Record org,Record add) {\n\t\treturn Record(add[org[0]],add[org[1]],add[org[2]]);\n\t}\n};\nstruct Node {\n\tint inv[3][3],cnt[3];\n\tRecord tag; \n\tNode() { memset(inv,0,sizeof(inv)),memset(cnt,0,sizeof(cnt)); }\n\tNode(int k) { memset(inv,0,sizeof(inv)),memset(cnt,0,sizeof(cnt));++cnt[k];\t}\n\tinline friend Node operator +(Node L,Node R) {\n\t\tNode A;\n\t\tfor(int i:{0,1,2}) A.cnt[i]=L.cnt[i]+R.cnt[i];\n\t\tfor(int i:{0,1,2}) {\n\t\t\tfor(int j:{0,1,2}) {\n\t\t\t\tif(i==j) continue;\n\t\t\t\tA.inv[i][j]=L.inv[i][j]+L.cnt[i]*R.cnt[j]+R.inv[i][j];\n\t\t\t}\n\t\t}\n\t\treturn A;\n\t}\n\tinline void add(Record op) {\n\t\tNode ret;\n\t\ttag=tag+op;\n\t\tfor(int i:{0,1,2}) for(int j:{0,1,2}) ret.inv[op[i]][op[j]]+=inv[i][j];\n\t\tfor(int i:{0,1,2}) for(int j:{0,1,2}) inv[i][j]=(i==j)?0:ret.inv[i][j];\n\t\tfor(int i:{0,1,2}) ret.cnt[op[i]]+=cnt[i];\n\t\tfor(int i:{0,1,2}) cnt[i]=ret.cnt[i];\n\t}\n\tinline int calc() {\n\t\tint ret=0;\n\t\tfor(int i:{0,1,2}) for(int j:{0,1,2}) if(i>j) ret+=inv[i][j];\n\t\treturn ret;\n\t}\n};\nint n,q,a[MAXN];\nclass SegmentTree {\n\tprivate:\n\t\tNode tree[MAXN<<2];\n\t\tinline int left(int x) { return x<<1; }\n\t\tinline int right(int x) { return x<<1|1; }\n\t\tinline void pushup(int pos) { tree[pos]=tree[left(pos)]+tree[right(pos)]; }\n\t\tinline void pushdown(int pos) {\n\t\t\ttree[left(pos)].add(tree[pos].tag);\n\t\t\ttree[right(pos)].add(tree[pos].tag);\n\t\t\ttree[pos].tag=Record();\n\t\t}\n\tpublic:\n\t\tinline void Build(int l=1,int r=n,int pos=1) {\n\t\t\tif(l==r) {\n\t\t\t\ttree[pos]=Node(a[l]);\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tint mid=(l+r)>>1;\n\t\t\tBuild(l,mid,left(pos));\n\t\t\tBuild(mid+1,r,right(pos));\n\t\t\tpushup(pos);\n\t\t\treturn ;\n\t\t}\n\t\tinline void Modify(int ul,int ur,Record k,int l=1,int r=n,int pos=1) {\n\t\t\tif(ul<=l&&r<=ur) {\n\t\t\t\ttree[pos].add(k);\n\t\t\t\treturn ;\n\t\t\t}\n\t\t\tpushdown(pos);\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(ul<=mid) Modify(ul,ur,k,l,mid,left(pos));\n\t\t\tif(mid<ur) Modify(ul,ur,k,mid+1,r,right(pos));\n\t\t\tpushup(pos);\n\t\t}\n\t\tinline Node Query(int ul,int ur,int l=1,int r=n,int pos=1) {\n\t\t\tif(ul<=l&&r<=ur) return tree[pos];\n\t\t\tpushdown(pos);\n\t\t\tint mid=(l+r)>>1;\n\t\t\tif(ur<=mid) return Query(ul,ur,l,mid,left(pos));\n\t\t\tif(mid<ul) return Query(ul,ur,mid+1,r,right(pos));\n\t\t\treturn Query(ul,ur,l,mid,left(pos))+Query(ul,ur,mid+1,r,right(pos));\n\t\t}\n}\tS;\nsigned main() {\n\tscanf(\"%lld%lld\",&n,&q);\n\tfor(int i=1;i<=n;++i) scanf(\"%lld\",&a[i]);\n\tS.Build();\n\twhile(q--) {\n\t\tint op;\n\t\tscanf(\"%lld\",&op);\n\t\tif(op==1) {\n\t\t\tint l,r;\n\t\t\tscanf(\"%lld%lld\",&l,&r);\n\t\t\tprintf(\"%lld\\n\",S.Query(l,r).calc());\n\t\t}\n\t\tif(op==2) {\n\t\t\tint l,r,s,t,u;\n\t\t\tscanf(\"%lld%lld%lld%lld%lld\",&l,&r,&s,&t,&u);\n\t\t\tS.Modify(l,r,Record(s,t,u));\n\t\t}\n\t}\n\treturn 0;\n}\n```\n\n",
        "postTime": 1674485893,
        "uid": 539618,
        "name": "DaiRuiChen007",
        "ccfLevel": 6,
        "title": "ABC265G \u9898\u89e3"
    },
    {
        "content": "## Solution\n\u533a\u95f4\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\uff0c\u8003\u8651\u7ebf\u6bb5\u6811\u3002\n\n\u7531\u4e8e\u6240\u6709\u6570 $\\in\\{0,1,2\\}$\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u533a\u95f4\uff0c\u7ef4\u62a4\u4ee5\u4e0b\u4fe1\u606f\uff1a\n\n+ $ans(i,j)$ \u8868\u793a\u5f62\u5982 $(i,j)$ \u8fd9\u6837\u7684\u9006\u5e8f\u5bf9\u3002\n\n+ $sum(i)$ \u8868\u793a\u6570\u5b57 $i$ \u51fa\u73b0\u7684\u4e2a\u6570\u3002\n\n+ $s,t,u$ \u7684 $tag$ \u6807\u8bb0\u3002\n\n\u4e0a\u4f20\u6807\u8bb0\u5f88\u7b80\u5355\uff0c$sum$ \u5c31\u76f4\u63a5\u52a0\uff0c$ans(i,j)$ \u5c31\u662f\u5de6\u533a\u95f4 $ans$ \u548c\u53f3\u533a\u95f4 $ans$ \u548c\u5de6\u533a\u95f4 $sum(i)$ \u4e58\u53f3\u533a\u95f4 $sum(j)$\u3002\n\n```cpp\nvoid pushup(int p){\n  for(int i=0;i<3;i++)sum[p][i]=sum[ls[p]][i]+sum[rs[p]][i];\n  for(int i=0;i<3;i++)for(int j=0;j<3;j++)\n    ans[p][i][j]=ans[ls[p]][i][j]+ans[rs[p]][i][j]+1ll*sum[ls[p]][i]*sum[rs[p]][j];\n}\n```\n\n\u4e3b\u8981\u662f\u600e\u4e48\u5904\u7406\u6807\u8bb0\uff0c\u6ce8\u610f\u5230\u539f\u5e8f\u5217 $0\\to s,1\\to t,2\\to u$\uff0c\u4ec5\u4ec5\u6d89\u53ca\u5230\u4e00\u4e2a\u4ea4\u6362\u7684\u95ee\u9898\uff0c\u53ea\u9700\u8981\u5f00\u4e00\u4e2a\u4e34\u65f6\u53d8\u91cf\uff0c\u7136\u540e\u5c06\u5176\u8d4b\u56de\u6765\u5373\u53ef\u3002\n\n```cpp\ntmp[0]=s;tmp[1]=t;tmp[2]=u;\nfor(int i=0;i<3;i++){\n  a[tmp[i]]+=sum[p][i];//\u6ce8\u610f\u662f+\uff0c\u56e0\u4e3a\u6ca1\u6709\u4fdd\u8bc1 s,t,u \u4e92\u4e0d\u76f8\u7b49\n  for(int j=0;j<3;j++)res[tmp[i]][tmp[j]]+=ans[p][i][j];\n}\nfor(int i=0;i<3;i++)sum[p][i]=a[i];\nfor(int i=0;i<3;i++)for(int j=0;j<3;j++)ans[p][i][j]=res[i][j];\n```\n\n\u4e0b\u4f20\u6807\u8bb0\u8981\u6ce8\u610f\uff0c\u5e76\u975e\u76f4\u63a5\u8986\u76d6\uff0c\u4f8b\u5982\u539f\u6765\u6709 $tags=1$\uff0c\u73b0\u5728\u591a\u4e00\u4e2a $tagt=2$\uff0c\u7b49\u4ef7\u4e8e $tags=2$\u3002\u4e5f\u5c31\u662f\u8bf4\u6211\u4eec\u5f97\u770b\u4e0a\u4e00\u6b21\u53d8\u6210\u4e86\u4ec0\u4e48\uff0c\u7ed3\u5408\u4ee3\u7801\u7406\u89e3\u3002\n\n```cpp\ntags[p]=tmp[tags[p]];\ntagt[p]=tmp[tagt[p]];\ntagu[p]=tmp[tagu[p]];//tmp \u7684\u5b9a\u4e49\u540c\u4e0a\u4e00\u6bb5\u4ee3\u7801\n```\n\n\u67e5\u8be2\u5c31\u662f\u5c06\u591a\u4e2a\u533a\u95f4\u5408\u5e76\uff0c\u533a\u95f4\u5185\u7684\u76f4\u63a5\u52a0 $ans$\uff0c\u8de8\u533a\u95f4\u7684\u9700\u8981\u8bb0\u4e00\u4e0b\u524d\u9762\u7684\u533a\u95f4\u51fa\u73b0\u4e86\u591a\u5c11\u4e2a $1,2$\uff0c\u7136\u540e\u5c06\u80fd\u4ea7\u751f\u8d21\u732e\u7684\u6570\u4e58\u8d77\u6765\u52a0\u5165\u7b54\u6848\u5373\u53ef\u3002\n\n## Code\n\u7ec6\u8282\u591a\uff0c\u6709\u70b9\u96be\u5199\uff0c2.78KB \u6210\u529f\u538b\u5230\u4e86 99 \u884c\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define pb push_back\n#define mkp make_pair\n#define fi first\n#define se second\nusing ll=long long;\nusing pii=pair<int,int>;\nusing pll=pair<ll,ll>;\nusing ull=unsigned long long;\ninline void read(int &x){\n  char ch=getchar();\n  int r=0,w=1;\n  while(!isdigit(ch))w=ch=='-'?-1:1,ch=getchar();\n  while(isdigit(ch))r=(r<<1)+(r<<3)+(ch^48),ch=getchar();\n  x=r*w;\n}\nconst int N=1e5+7;\nint n,q,x,lst1,lst2;\nll ss;\nstruct seg_tree{\n  int root,tot,sum[N*4][3],tags[N*4],tagt[N*4],tagu[N*4],ls[N*4],rs[N*4];\n  ll ans[N*4][3][3];\n  void pushup(int p){\n    for(int i=0;i<3;i++)sum[p][i]=sum[ls[p]][i]+sum[rs[p]][i];\n    for(int i=0;i<3;i++)for(int j=0;j<3;j++)\n      ans[p][i][j]=ans[ls[p]][i][j]+ans[rs[p]][i][j]+1ll*sum[ls[p]][i]*sum[rs[p]][j];\n  }\n  void update(int p,int s,int t,int u){\n    int a[3],tmp[3];\n    ll res[3][3];\n    for(int i=0;i<3;i++)a[i]=0;\n    for(int i=0;i<3;i++)for(int j=0;j<3;j++)res[i][j]=0;\n    tmp[0]=s;tmp[1]=t;tmp[2]=u;\n    for(int i=0;i<3;i++){\n      a[tmp[i]]+=sum[p][i];\n      for(int j=0;j<3;j++)res[tmp[i]][tmp[j]]+=ans[p][i][j];\n    }\n    for(int i=0;i<3;i++)sum[p][i]=a[i];\n    for(int i=0;i<3;i++)for(int j=0;j<3;j++)ans[p][i][j]=res[i][j];\n    if(tags[p]==-1)tags[p]=s,tagt[p]=t,tagu[p]=u;\n    else{\n      tags[p]=tmp[tags[p]];\n      tagt[p]=tmp[tagt[p]];\n      tagu[p]=tmp[tagu[p]];\n    }\n  }\n  void pushdown(int p){\n    update(ls[p],tags[p],tagt[p],tagu[p]);\n    update(rs[p],tags[p],tagt[p],tagu[p]);\n    tags[p]=tagt[p]=tagu[p]=-1;\n  }\n  void pre(int &p,int l=1,int r=n){\n    if(!p)p=++tot;\n    if(l==r){read(x),sum[p][x]++;return;}\n    int mid=l+r>>1;\n    pre(ls[p],l,mid);pre(rs[p],mid+1,r);\n    pushup(p);tags[p]=tagt[p]=tagu[p]=-1;\n  }\n  void modify(int &p,int ql,int qr,int s,int t,int u,int l=1,int r=n){\n    if(!p)p=++tot;\n    if(ql<=l&&r<=qr){\n      update(p,s,t,u);\n      return;\n    }\n    if(tags[p]!=-1)pushdown(p);\n    int mid=l+r>>1;\n    if(ql<=mid)modify(ls[p],ql,qr,s,t,u,l,mid);\n    if(qr>mid)modify(rs[p],ql,qr,s,t,u,mid+1,r);\n    pushup(p);\n  }\n  ll query(int &p,int ql,int qr,int l=1,int r=n){\n    if(!p)p=++tot;\n    if(ql<=l&&r<=qr){\n      ss+=lst2*(sum[p][0]+sum[p][1]);\n      ss+=lst1*sum[p][0];\n      lst1+=sum[p][1];lst2+=sum[p][2];\n      return ans[p][2][0]+ans[p][2][1]+ans[p][1][0];\n    }\n    if(tags[p]!=-1)pushdown(p);\n    int mid=l+r>>1;\n    ll tmp=0;\n    if(ql<=mid)tmp+=query(ls[p],ql,qr,l,mid);\n    if(qr>mid)tmp+=query(rs[p],ql,qr,mid+1,r);\n    return tmp;\n  }\n}tr;\nint main(){\n  read(n);read(q);tr.pre(tr.root);\n  while(q--){\n    int op,l,r,s,t,u;read(op);read(l);read(r);\n    if(op==1){\n      ss=lst1=lst2=0;\n      printf(\"%lld\\n\",tr.query(tr.root,l,r)+ss);\n    }\n    else read(s),read(t),read(u),tr.modify(tr.root,l,r,s,t,u);\n  }\n  return 0;\n}\n```",
        "postTime": 1673587499,
        "uid": 415256,
        "name": "Epoch_L",
        "ccfLevel": 5,
        "title": "ABC265G"
    },
    {
        "content": "\u56e0\u4e3a\u503c\u53ea\u6709 $0,1,2$\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u4fe1\u606f $cnt_i$ \u548c  $c_{i,j}(i\\ne j)$ \u5206\u522b\u4ee3\u8868\u533a\u95f4\u5185 $i$ \u7684\u4e2a\u6570\u548c\u533a\u95f4\u5185\u6ee1\u8db3 $a_x=i,a_y=j,x<y$ \u7684\u4e8c\u5143\u7ec4 $(x,y)$ \u7684\u6570\u91cf\u3002\n\n\u533a\u95f4\u5408\u5e76\u65f6\uff0c\u8bbe\u5de6\u533a\u95f4\u4e3a $lc$\uff0c\u53f3\u533a\u95f4\u4e3a $rc$\uff0c\u7ed3\u679c\u4e3a $x$\u3002\n\n\u663e\u7136\uff0c\n\n$x_{num_i}=lc_{num_i}+rc_{num_i}$\n\n$x_{c_{i,j}}=lc_{c_{i,j}}+rc_{c_{i,j}}+lc_{num_i}\\times rc_{num_j}$\n\n\u5bf9\u4e8e\u9898\u76ee\u4e2d\u7684 $0,1,2$ \u4e4b\u95f4\u7684\u76f8\u4e92\u8f6c\u6362\uff0c\u6211\u4eec\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u8282\u70b9\u7ef4\u62a4\u4e00\u4e2a $f_i$ \u8868\u793a $i$ \u53d8\u6210\u4e86 $f_i$\u3002\u6240\u4ee5\u6bcf\u6b21\u66f4\u6539\u7684\u65f6\u5019\u6211\u4eec\u9700\u8981\u91cd\u65b0\u8ba1\u7b97\u4e00\u4e0b\u3002\u8bbe\u539f\u5148\u8282\u70b9\u4fe1\u606f\u4e3a $x$\uff0c\u8ba1\u7b97\u540e\u7684\u4fe1\u606f\u4e3a $y$\uff0c\u5219\n\n$y_{num_i}=\\sum\\limits_{j=0}^2 [f_j=i]\\times x_{num_j}$\n\n$y_{c_{i,j}}=\\sum\\limits_{k=0}^2\\sum\\limits_{l=0}^2[k\\ne l]\\times[f_k\\ne f_l]\\times[f_k=i]\\times[f_l=j]\\times x_{c_{i,j}}$\n\n$y_{f_i}=f_{y_{f_i}}$\n\n\u6807\u8bb0\u7684\u4e0b\u4f20\u76f4\u63a5\u7528\u4e0a\u8ff0\u7684\u4e09\u4e2a\u5f0f\u5b50\u5373\u53ef\uff0c\u5728\u4e0b\u4f20\u540e\u8bb0\u5f97 $x_{f_i}:=i(0\\leq i \\leq 2)$\u3002\n\n\u7a0b\u5e8f\u53ea\u7ed9\u51fa\u4e3b\u4f53\u90e8\u5206\uff0c\u4e3b\u8981\u662f\u524d\u9762\u4e00\u90e8\u5206\u7684\u6a21\u677f\u6709\u4e00\u4e9b\u5f71\u54cd\u89c2\u611f\uff0c\u800c\u4e14\u7ed9\u51fa\u4e3b\u4f53\u5df2\u7ecf\u80fd\u591f\u8f85\u52a9\u7406\u89e3\u3002\n\n```cpp\n//Linkwish's code\nconst int N=100005;\nstruct node{\n\tint pos[3];\n\tint num[3];\n\tint c[3][3];\n\tinline node(){\n\t\tfor(int i=0;i<3;i++)pos[i]=i;\n\t\tmemset(num,0,sizeof num);\n\t\tmemset(c,0,sizeof c);\n\t}\n}t[N<<2];\nint n,m;\nint a[N];\ninline int ls(int x){return x<<1;}\ninline int rs(int x){return x<<1|1;}\ninline node merge(node x,node y){\n\tnode res;\n\tfor(int i=0;i<3;i++)res.num[i]=x.num[i]+y.num[i];\n\tfor(int i=0;i<3;i++){\n\t\tfor(int j=0;j<3;j++){\n\t\t\tif(i==j)continue;\n\t\t\tres.c[i][j]=x.c[i][j]+y.c[i][j]+x.num[i]*y.num[j];\n\t\t}\n\t}\n\treturn res;\n}\ninline void trans(node &x,int *f){\n\tnode tmp;\n\tfor(int i=0;i<3;i++){\n\t\ttmp.num[f[i]]+=x.num[i];\n\t\ttmp.pos[i]=f[x.pos[i]];\n\t}\n\tfor(int i=0;i<3;i++){\n\t\tfor(int j=0;j<3;j++){\n\t\t\tif(i==j||f[i]==f[j])continue;\n\t\t\ttmp.c[f[i]][f[j]]+=x.c[i][j];\n\t\t}\n\t}\n\tx=tmp;\n}\ninline void push_down(int x){\n\ttrans(t[ls(x)],t[x].pos);\n\ttrans(t[rs(x)],t[x].pos);\n\tfor(int i=0;i<3;i++)t[x].pos[i]=i;\n}\nvoid build(int x,int l,int r){\n\tif(l==r){\n\t\tt[x].num[a[l]]=1;\n\t\treturn ;\n\t}\n\tint mid=(l+r)>>1;\n\tbuild(ls(x),l,mid);\n\tbuild(rs(x),mid+1,r);\n\tt[x]=merge(t[ls(x)],t[rs(x)]);\n}\nvoid modify(int x,int l,int r,int L,int R,int *f){\n\tif(l>=L&&r<=R){\n\t\ttrans(t[x],f);\n\t\treturn ;\n\t}\n\tpush_down(x);\n\tint mid=(l+r)>>1;\n\tif(L<=mid)modify(ls(x),l,mid,L,R,f);\n\tif(R>mid)modify(rs(x),mid+1,r,L,R,f);\n\tt[x]=merge(t[ls(x)],t[rs(x)]);\n}\nnode ask(int x,int l,int r,int L,int R){\n\tif(l>=L&&r<=R)return t[x];\n\tpush_down(x);\n\tint mid=(l+r)>>1;\n\tnode res;\n\tif(L<=mid)res=ask(ls(x),l,mid,L,R);\n\tif(R>mid)res=merge(res,ask(rs(x),mid+1,r,L,R));\n\treturn res;\n}\nsigned main(){\n\tread(n),read(m);\n\tfor(int i=1;i<=n;i++)read(a[i]);\n\tbuild(1,1,n);\n\tint op,x,y;\n\tint g[3],ans;\n\tnode res;\n\twhile(m--){\n\t\tread(op),read(x),read(y);\n\t\tif(op==1){\n\t\t\tres=ask(1,1,n,x,y),ans=0;\n\t\t\tfor(int i=1;i<3;i++)\n\t\t\t\tfor(int j=i-1;~j;j--)\n\t\t\t\t\tans+=res.c[i][j];\n\t\t\twriteln(ans);\n\t\t}\n\t\telse{\n\t\t\tfor(int i=0;i<3;i++)read(g[i]);\n\t\t\tmodify(1,1,n,x,y,g);\n\t\t}\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1672101294,
        "uid": 408180,
        "name": "LinkWish",
        "ccfLevel": 7,
        "title": "ABC265G \u9898\u89e3"
    }
]