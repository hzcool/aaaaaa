[
    {
        "content": "### \u9898\u76ee\u5927\u610f\n\n\u6709\u4e00\u5f20 $n$ \u4e2a\u70b9 $m$ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u8282\u70b9 $i$ \u6709\u70b9\u6743 $x_i$\uff0c\u8fb9 $i$ \u8fde\u63a5\u70b9 $a_i$ \u548c $b_i$ \u4e14\u6709\u8fb9\u6743 $y_i$\u3002\n\n\u73b0\u5728\u8981\u5220\u9664\u82e5\u5e72\u6761\u8fb9\uff0c\u4f7f\u5f97\u5269\u4e0b\u7684\u56fe\u6ee1\u8db3\uff1a\u5bf9\u4e8e\u6ca1\u6709\u88ab\u79fb\u9664\u7684\u8fb9\uff0c\u5176\u6240\u5728\u8054\u901a\u5757\u4e2d\u7684\u70b9\u7684\u70b9\u6743\u548c\u4e0d\u5c0f\u4e8e\u8be5\u8fb9\u7684\u8fb9\u6743\u3002\n\n\u6c42\u9700\u8981\u79fb\u9664\u7684\u6700\u5c0f\u8fb9\u6570\u3002\n\n### \u601d\u8def\n\n\u6b63\u7740\u8003\u8651\u5220\u8fb9\u4e0d\u597d\u505a\uff0c\u8003\u8651\u6309\u8fb9\u6743\u4ece\u5c0f\u5230\u5927\u5f80\u56fe\u4e2d\u52a0\u8fb9\uff0c\u6c42\u51fa\u6700\u591a\u80fd\u52a0\u591a\u5c11\u8fb9\u3002\u56e0\u4e3a\u52a0\u8fb9\u53ea\u4f1a\u4f7f\u8054\u901a\u5757\u7684\u70b9\u6743\u548c\u53d8\u5927\uff0c\u6240\u4ee5\u539f\u6765\u52a0\u8fdb\u53bb\u7684\u8fb9\u4e00\u5b9a\u4e0d\u4f1a\u53d8\u5f97\u4e0d\u7b26\u5408\u6761\u4ef6\u3002\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u5373\u53ef\u3002\n\n\u4f46\u662f\u53ef\u80fd\u6709\u539f\u6765\u52a0\u4e0d\u8fdb\u53bb\u7684\u8fb9\u53d8\u5f97\u80fd\u52a0\u8fdb\u53bb\u4e86\u3002\u5bf9\u4e8e\u8fd9\u6837\u7684\u8fb9\uff0c\u6211\u4eec\u53ef\u4ee5\u5148\u628a\u8054\u901a\u5757\u8fde\u8d77\u6765\uff0c\u4f46\u662f\u8fd9\u6761\u8fb9\u4e0d\u8ba1\u5165\u7b54\u6848\u3002\u5f53\u4e14\u4ec5\u5f53\u7b49\u5230\u52a0\u5165\u67d0\u6761\u8fb9\u540e\u4f7f\u5f97\u8fd9\u6761\u8fb9\u6ee1\u8db3\u6761\u4ef6\u4e86\uff0c\u90a3\u4e48\u4e4b\u524d\u672a\u8ba1\u5165\u7b54\u6848\u7684\u8fb9\u5c31\u53ef\u4ee5\u8ba1\u5165\u4e86\u3002\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\n#define maxn 100005\n#define ll long long\nusing namespace std;\nint n,m,fa[maxn],num[maxn],ans; ll sum[maxn];\nstruct edge{int from,to; ll val; bool operator<(const edge &xx)const{return val<xx.val;}}a[maxn];\nint getfa(int xx){if(fa[xx]==xx) return xx; return fa[xx]=getfa(fa[xx]);}\nint main(){\n    scanf(\"%d%d\",&n,&m); for(int i=1;i<=n;i++){scanf(\"%lld\",&sum[i]); fa[i]=i;}\n    for(int i=1;i<=m;i++) scanf(\"%d%d%lld\",&a[i].from,&a[i].to,&a[i].val); sort(a+1,a+1+m);\n    for(int i=1;i<=m;i++){\n        int r1=getfa(a[i].from),r2=getfa(a[i].to); if(r1!=r2){fa[r2]=r1; sum[r1]+=sum[r2]; num[r1]+=num[r2];}\n        num[r1]++; if(sum[r1]>=a[i].val){ans+=num[r1]; num[r1]=0;}\n    } printf(\"%d\",m-ans);\n    return 0;\n}\n\n```",
        "postTime": 1680441049,
        "uid": 294382,
        "name": "qzhwlzy",
        "ccfLevel": 5,
        "title": "AT_nikkei2019_qual_e Weights on Vertices and Edges \u9898\u89e3"
    }
]