[
    {
        "content": "# [[ABC250Ex] Trespassing Takahashi](https://www.luogu.com.cn/problem/AT_abc250_h) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.tsawke.com?t=ABC250Ex)\n\n## \u9898\u9762\n\n\u7ed9\u5b9a\u4e00\u5f20 $ n $ \u4e2a\u70b9 $ m $ \u6761\u8fb9\u7684\u65e0\u5411\u8fde\u901a\u7b80\u5355\u56fe\u3002\u6bcf\u6761\u8fb9\u5b58\u5728 $ a_i, b_i, c_i $\uff0c\u8868\u793a $ a_i \\rightarrow b_i $ \u6216 $ b_i \\rightarrow a_i $ \u8017\u65f6 $ c_i $\u3002\u7ed9\u5b9a $ k $\uff0c\u5b9a\u4e49 $ n $ \u4e2a\u70b9\u4e2d\u53ea\u6709\u524d $ k $ \u4e2a\u70b9\u6709\u623f\u5b50\uff0c$ q $ \u6b21\u8be2\u95ee\uff0c\u6bcf\u6b21\u7ed9\u5b9a $ x, y, t $\uff0c\u6c42\u4ece $ x $ \u5230 $ y $ **\u8fde\u7eed\u7684\u4e0d\u5728\u623f\u5b50\u4e2d\u7684\u65f6\u95f4**\u662f\u5426\u4e00\u5b9a\u4f1a\u8d85\u8fc7 $ t $\uff0c\u8d85\u8fc7\u8f93\u51fa `No`\uff0c\u53cd\u4e4b\u8f93\u51fa `Yes`\u3002\u4fdd\u8bc1\u8be2\u95ee\u4e2d $ t $ \u6ee1\u8db3\u5347\u5e8f\u3002\n\n## Solution\n\n\u8003\u8651\u7ef4\u62a4\u5bf9\u4e8e\u8d70\u6bcf\u6761\u8fb9\u65f6\u9700\u8981\u591a\u957f\u65f6\u95f4\u624d\u80fd\u8fde\u901a\u6700\u8fd1\u7684\u4e24\u4e2a\u623f\u5b50\uff0c\u6362\u53e5\u8bdd\u8bf4\uff0c\u6ee1\u8db3\u8fd9\u4e2a\u65f6\u95f4\u7684\u65f6\u5019\u8fd9\u6761\u8fb9\u5c31\u4e00\u5b9a\u53ef\u4ee5\u88ab\u8d70\u3002\u5177\u4f53\u7ef4\u62a4\u53ef\u4ee5\u8003\u8651\u5efa\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u5e76\u5411\u6240\u6709\u623f\u5b50\u8fde\u4e2a\u8fb9\uff0c\u7136\u540e\u8dd1\u4e2a Dijk \u5373\u53ef\uff0c\u5f53\u7136\u76f4\u63a5\u5f80\u961f\u5217\u91cc\u628a\u6240\u6709\u623f\u5b50\u70b9\u90fd\u585e\u8fdb\u53bb\u4e5f\u884c\u3002\u7136\u540e\u6211\u4eec\u53ef\u4ee5\u4ee4 $ c_i \\leftarrow c_i + dis_{a_i} + dis_{b_i} $ \u5373\u53ef\uff0c\u7136\u540e\u663e\u7136\u53ef\u4ee5\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u5177\u4f53\u5730\uff0c\u6bcf\u6b21\u8be2\u95ee\u5c06\u8fb9\u96c6\u91cc\u6240\u6709\u65b0\u7684 $ c_i $ \u6ee1\u8db3 $ c_i \\le t $ \u7684\u8fb9\u52a0\u4e0a\uff0c\u7528\u5e76\u67e5\u96c6\u7ef4\u62a4\uff0c\u7136\u540e\u67e5\u8be2\u4e00\u4e0b $ x, y $ \u662f\u5426\u8fde\u901a\u5373\u53ef\uff0c\u8fd9\u4e2a\u590d\u6742\u5ea6\u662f $ O(mq) $ \u7684\uff0c\u5f53\u7136\u53d1\u73b0 $ t $ \u7b26\u5408\u5347\u5e8f\uff0c\u6240\u4ee5\u7ed9\u8fb9\u6392\u4e2a\u5e8f\u8dd1\u4e00\u8fb9\u5373\u53ef\uff0c\u6700\u7ec8\u590d\u6742\u5ea6\u5e94\u8be5\u662f\u5361\u5728\u6392\u5e8f\u548c Dijk \u4e0a\uff0c\u4e5f\u5c31\u662f $ O(n \\log n + m \\log m) $\u3002\n\n\u540c\u65f6\u4e0d\u96be\u60f3\u5230\u5373\u4f7f $ t $ \u4e0d\u7b26\u5408\u5347\u5e8f\u4e5f\u53ef\u4ee5\u79bb\u7ebf\u6392\u4e2a\u5e8f\u518d\u8dd1\uff0c\u590d\u6742\u5ea6\u591a\u4e2a $ O(q \\log q) $ \u800c\u5df2\u3002\u81f3\u6b64\u672c\u9898\u5df2\u7ecf\u7ed3\u675f\uff0c\u4e0b\u9762\u662f\u4e00\u9053\u52a0\u5f3a\u7248\u7684\u53cc\u500d\u7ecf\u9a8c\u3002\n\n\u5b58\u5728\u4e00\u9053\u53cc\u500d\u7ecf\u9a8c [CF1253F Cheap Robot](https://www.luogu.com.cn/problem/CF1253F)\uff0c\u7565\u6709\u533a\u522b\uff0c\u8fd9\u91cc\u7b80\u5355\u8bf4\u4e00\u4e0b\uff1a\u8fd9\u9053\u9898\u7684\u533a\u522b\u5c31\u5728\u4e8e\u8be2\u95ee\u7684\u662f\u6700\u5c0f\u7684 $ t $\uff0c\u8fd9\u6837\u7684\u8bdd\u5b9e\u9645\u4e0a\u662f\u4e0d\u592a\u597d\u7528\u521a\u624d\u7684\u601d\u8def\u79bb\u7ebf\u4e0b\u6765\u7ef4\u62a4\u7684\uff0c\u6709\u4e00\u4e2a\u590d\u6742\u5ea6\u4e0d\u592a\u6b63\u786e\u4f46\u80fd\u8fc7\u7684\u601d\u8def\uff0c\u5c31\u662f\u5c06\u6bcf\u4e2a\u8be2\u95ee\u7684 $ a, b $ \u5206\u522b\u6302\u5728\u4e24\u4e2a\u70b9\u4e0a\uff0c\u7136\u540e\u5c06 $ c_i $ \u6392\u5e8f\uff0c\u4ece\u5c0f\u5230\u5927\u4f9d\u6b21\u52a0\u8fb9\uff0c\u540c\u65f6\u66f4\u65b0\u6240\u6709\u6302\u5728\u8fde\u901a\u5757\u6839\u4e0a\u7684\u7b54\u6848\uff0c\u518d\u5bf9\u5e94\u7684\u628a\u8be2\u95ee\u5408\u4e0a\u53bb\u3002\u4f46\u662f\u8fd9\u4e2a\u7684\u5e76\u67e5\u96c6\u4e00\u5b9a\u9700\u8981\u6309\u79e9\u5408\u5e76\uff0c\u5426\u5219\u5982\u679c `clear()` \u4e4b\u540e `shrink_to_fit()` \u5c31\u4f1a TLE\uff0c\u5426\u5219\u4f1a MLE\uff0c\u6309\u79e9\u5408\u5e76\u4f1a\u4fdd\u8bc1\u5408\u5e76\u8be2\u95ee\u7684\u65f6\u5019\u4e0d\u4f1a\u590d\u5236\u592a\u591a\u6b21\u4ee5\u4fdd\u8bc1\u7a7a\u95f4\u3002\u8fd9\u4e2a\u4e1c\u897f\u7684\u590d\u6742\u5ea6\u7406\u8bba\u4e0a\u4f3c\u4e4e\u53ef\u4ee5\u88ab\u5361\u5230 $ O(mq) $\uff0c\u4f46\u662f\u672c\u9898\u6ca1\u5361\u3002\u5f53\u7136\u8fd8\u6709\u4e00\u4e2a\u6211\u53e3\u7cca\u7684\u526a\u679d\uff0c\u5c31\u662f\u6302\u5728\u70b9\u4e0a\u7684\u8be2\u95ee\u6211\u4eec\u7528\u94fe\u8868\u7ef4\u62a4\uff0c\u7136\u540e\u8d2a\u5fc3\u5730\u53d6\u7b2c\u4e00\u6b21\u66f4\u65b0\u8fd9\u4e2a\u70b9\u65f6\u7684\u7b54\u6848\uff0c\u663e\u7136\u4e0d\u52a3\uff0c\u4e8e\u662f\u66f4\u65b0\u540e $ O(1) $ \u5220\u9664\u5373\u53ef\uff0c\u4f46\u662f\u8fd9\u4e2a\u4e1c\u897f\u7406\u8bba\u4e0a\u4e5f\u80fd\u88ab\u5361\u5230 $ O(mq) $\uff0c\u4e0d\u8fc7\u9700\u8981\u7cbe\u7ec6\u8bbe\u8ba1\u6570\u636e\u3002\u5f53\u7136\u6b63\u786e\u7684\u505a\u6cd5\u6700\u540e\u5e94\u8be5\u662f\u5efa\u51fa\u6700\u5c0f\u751f\u6210\u6811\u7136\u540e\u6811\u5256\u6216\u8005\u500d\u589e\u4e4b\u7c7b\u7684\u5b9e\u73b0\u3002\n\n## Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW(arr) void* Edge::operator new(size_t){static Edge* P = arr; return P++;}\n\nusing namespace std;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\ntemplate < typename T = int >\ninline T read(void);\n\nstruct Edge{\n    Edge* nxt;\n    int to;\n    ll val;\n    OPNEW;\n}ed[410000];\nROPNEW(ed);\nEdge* head[210000];\n\nint N, M, K;\nbitset < 210000 > vis;\nll dis[210000];\npriority_queue < tuple < ll, int, int >, vector < tuple < ll, int, int > >, greater < tuple < ll, int, int > > > edgs;\n\nclass UnionFind{\nprivate:\n    int fa[210000];\npublic:\n    UnionFind(void){for(int i = 1; i <= 201000; ++i)fa[i] = i;}\n    int Find(int x){return x == fa[x] ? x : fa[x] = Find(fa[x]);}\n    void Union(int origin, int son){fa[Find(son)] = Find(origin);}\n}uf;\n\nvoid Dijk(void){\n    memset(dis, 0x3f, sizeof dis);\n    priority_queue < pair < ll, int >, vector < pair < ll, int > >, greater < pair < ll, int > > > cur;\n    for(int i = 1; i <= K; ++i)cur.push({dis[i] = 0, i});\n    while(!cur.empty()){\n        int p = cur.top().second; cur.pop();\n        if(vis[p])continue;\n        vis[p] = true;\n        for(auto i = head[p]; i; i = i->nxt)\n            if(dis[p] + i->val < dis[SON])\n                dis[SON] = dis[p] + i->val, cur.push({dis[SON], SON});\n    }\n}\nint main(){\n    N = read(), M = read(), K = read();\n    for(int i = 1; i <= M; ++i){\n        int s = read(), t = read(), v = read();\n        head[s] = new Edge{head[s], t, v};\n        head[t] = new Edge{head[t], s, v};\n    }Dijk();\n    for(int p = 1; p <= N; ++p)\n        for(auto i = head[p]; i; i = i->nxt)\n            edgs.push({i->val + dis[p] + dis[SON], p, SON});\n    int Q = read();\n    while(Q--){\n        int s = read(), t = read(); ll lim = read < ll >();\n        while(!edgs.empty() && get < 0 >(edgs.top()) <= lim)\n            uf.Union(get < 1 >(edgs.top()), get < 2 >(edgs.top())), edgs.pop();\n        printf(\"%s\\n\", uf.Find(s) == uf.Find(t) ? \"Yes\" : \"No\");\n    }\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n## UPD\n\nupdate-2022_12_20 \u521d\u7a3f",
        "postTime": 1671524558,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "[ABC250Ex] Trespassing Takahashi \u9898\u89e3"
    }
]