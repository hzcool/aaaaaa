[
    {
        "content": "~~\u7b2c\u4e00\u6b21\u89c1\u5230\u8fd9\u4e48\u7b80\u5355\u7684 ARC F~~\n\n\u9996\u5148\u8003\u8651\u7ed9\u5b9a\u70b9\u6743\u548c\u8fb9\u7684\u8fd0\u7b97\u7b26\u65f6\uff0c\u8be5\u600e\u4e48\u6837\u624d\u80fd\u591f\u4f7f\u5f97\u6700\u7ec8\u7684\u7b54\u6848\u4e3a 1\u3002\n\n**\u7ed3\u8bba**\uff1a\u5148\u7f29 `and` \u8fb9\uff0c\u518d\u7f29 `or` \u8fb9\u662f\u4e00\u79cd\u6700\u4f18\u65b9\u6848\u3002\u8fd9\u79cd\u65b9\u6848\u6700\u540e\u7b54\u6848\u4e3a 1 \u5f53\u524d\u4ec5\u5f53\u5c06\u6240\u6709 `or` \u8fb9\u5220\u6389\u4e4b\u540e\uff0c\u5269\u4e0b `and` \u8fb9\u6784\u6210\u7684\u8fde\u901a\u5757\u4e2d\u6709\u4e00\u4e2a\u7b54\u6848\u4e3a 1\u3002\n\n**\u8bc1\u660e**\uff1a\u9996\u5148\u5145\u5206\u6027\u6613\u8bc1\u3002\u5176\u6b21\u89c2\u5bdf\u5fc5\u8981\u6027\uff0c\u5982\u679c\u6bcf\u4e2a `and` \u8fde\u901a\u5757\u7684\u7b54\u6848\u4e3a\u96f6\uff0c\u90a3\u4e48\u7528 `or` \u64cd\u4f5c\u5c06\u4e24\u4e2a\u8fde\u901a\u5757\u8fde\u63a5\u8d77\u6765\u7684\u65f6\u5019\uff0c\u8fd9\u4e2a\u65b0\u8fde\u901a\u5757\u7684\u7b54\u6848\u4ecd\u7136\u4e3a\u96f6\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6700\u540e\u7684\u7b54\u6848\u4ecd\u4e3a\u96f6\u3002\n\n\u8bbe $f_{i,0/1,0/1}$ \u8868\u793a $i$ \u5b50\u6811\u5185\u8fde\u901a\u5757\u7684\u7b54\u6848\u4e3a $0/1$\uff0c\u4e14\u5176\u5b83\u8fde\u901a\u5757\u4e2d\u662f\u5426\u6709 1 \u7684\u65b9\u6848\u6570\uff0c\u80cc\u5305\u5373\u53ef\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define For(i,a,b) for(int i=(a);i<=(b);++i)\n#define Rof(i,a,b) for(int i=(a);i>=(b);--i)\nusing namespace std;\nconst int Maxn=2e5,Mod=998244353;\n\ninline int read()\n{\n    int x=0,f=1;\n    char ch=getchar();\n    while(ch<'0' || ch>'9')\n    {\n        if(ch=='-') f=-1;\n        ch=getchar();\n    }\n    while(ch>='0' && ch<='9')\n    {\n        x=x*10+ch-'0';\n        ch=getchar();\n    }\n    return x*f;\n}\n\nint n,f[Maxn+5][2][2],g[2][2];\nvector<int> v[Maxn+5];\n\ninline void add(int &x,int y) {x=(x+y)%Mod;}\ninline void dfs(int x,int fa)\n{\n    f[x][0][0]=f[x][1][0]=1;\n    for(auto y:v[x]) if(y!=fa) dfs(y,x);\n    for(auto y:v[x]) if(y!=fa)\n    {\n        memset(g,0,sizeof(g));\n        For(a,0,1) For(b,0,1) For(c,0,1) For(d,0,1)\n            add(g[a][b|c|d],1ll*f[x][a][b]*f[y][c][d]%Mod);\n        For(a,0,1) For(b,0,1) For(c,0,1) For(d,0,1)\n            add(g[a&c][b|d],1ll*f[x][a][b]*f[y][c][d]%Mod);\n        For(a,0,1) For(b,0,1) f[x][a][b]=g[a][b];\n    }\n}\n\nint main()\n{\n    n=read();\n    For(i,1,n-1)\n    {\n        int a=read(),b=read();\n        v[a].push_back(b),v[b].push_back(a);\n    }\n    int ans=0; dfs(1,0);\n    For(a,0,1) For(b,0,1) if(a|b) add(ans,f[1][a][b]);\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1676333919,
        "uid": 148913,
        "name": "Graphcity",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 ARC121F \u3010Logical Operations on Tree\u3011"
    },
    {
        "content": "\u7279\u5224 $n=1$ .\n\n\u8003\u8651\u786e\u5b9a\u6743\u503c\u4e4b\u540e\u600e\u4e48\u5224\u5b9a\u662f\u5426\u5408\u6cd5.\n\n\u8003\u8651\u4e00\u4e2a\u5ea6\u4e3a $1$ \u7684\u70b9, \u5bf9\u5176\u5206\u7c7b\u8ba8\u8bba:\n\n$1 \\lor$ , \u663e\u7136\u53ea\u8981\u6700\u540e\u9009\u8fd9\u6761\u8fb9\u5373\u53ef.\n\n$1 \\land$ \u6216 $0 \\lor$ , \u663e\u7136\u8fd9\u79cd\u8fb9\u6ca1\u610f\u4e49, \u53ef\u4ee5\u76f4\u63a5\u9009.\n\n$0 \\land$ , \u5c06\u6700\u7ec8\u7ed3\u679c\u53d8\u6210 $0$ , \u663e\u7136\u4e0d\u5982\u76f4\u63a5\u5c06\u521d\u59cb\u503c\u53d8\u4e3a $0$ , \u6240\u4ee5\u4e5f\u53ef\u4ee5\u76f4\u63a5\u9009.\n\n\u7efc\u4e0a, \u6709\u4ee5\u4e0b\u7b56\u7565, \u82e5\u5b58\u5728 $1 \\lor$ \u7684\u8fb9\u4e00\u5b9a\u5408\u6cd5, \u5426\u5219\u4e0d\u65ad\u9009\u5ea6\u6570\u4e3a $1$ \u7684\u8fb9\u5373\u53ef.\n\n\u7136\u540e\u5c31\u53ef\u4ee5 $dp$ \u4e86, \u4ee4 $f_{x,0/1/2}$ \u8868\u793a\u4ee5 $x$ \u4e3a\u6839\u7684\u5b50\u6811\u4e2d, \u6700\u7ec8\u7684\u6743\u503c\u4e3a $0/1$ , \u4e14\u4e3a\u51fa\u73b0 $1 \\lor$ \u7684\u65b9\u6848\u6570, \u548c\u51fa\u73b0 $1 \\lor$ \u7684\u65b9\u6848\u6570.\n$$\n\\begin{cases}\nf_{x,0} = f_{x,0}(2f_{son,0}+f_{son,1})+f_{x,1}f_{son,0} \\\\\nf_{x,1} = f_{x,1}(f_{son,0}+f_{son,1}) \\\\\nf_{x,2} = (f_{x,0}+f_{x,1})(f_{son,1}+2f_{son,2})+2f_{x,2}(f_{son,0}+f_{son,1}+f_{son,2})\n\\end{cases}\n$$\n\u521d\u59cb\u72b6\u6001\u4e3a $f_{x,0} = f_{x,1} = 1$ .\n\n```cpp\n/************************************************\n*Author        :  demonlover\n*Created Time  :  2022.01.15.15:58\n*Problem       :  ARC121F\n************************************************/\n#include <iostream>\n#include <cstdio>\n#include <cstring>\nusing namespace std;\ntypedef long long ll;\ntypedef pair <int,int> pii;\n#define DEBUG(x) cout << #x << \" = \" << x << \"\\n\"\ntemplate <typename T>\ninline bool read(T &x) {\n\tint f = 1,c = getchar();x = 0;\n\twhile (!isdigit(c)) {if (c == 45)f = -1;c = getchar();}\n\twhile (isdigit(c))x = (x<<3)+(x<<1)+(c^48),c = getchar();\n\treturn x *= f,true;\n}\ntemplate <typename T,typename... Args>\ninline bool read(T &x,Args &...args) {\n\treturn read(x) && read(args...);\n}\n\nnamespace run {\n\tconst int maxn = 1e5+10;\n\tconst int mod = 998244353;\n\tstruct Edge {int nxt,to;}edge[maxn<<1];\n\tint begn[maxn],e;\n\tinline void add(int x,int y) {\n\t\tedge[++e] = (Edge){begn[x],y};begn[x] = e;\n\t\treturn;\n\t}\n\tint f[maxn][3],g[maxn];\n\tinline void dfs(int x,int fa) {\n\t\tf[x][0] = f[x][1] = 1;\n\t\tfor (int i = begn[x];i;i = edge[i].nxt) {\n\t\t\tint y = edge[i].to;\n\t\t\tif (y ^ fa) {\n\t\t\t\tdfs(y,x);\n\t\t\t\tmemcpy(g,f[x],sizeof(g));\n\t\t\t\tf[x][0] = (1ll*g[0]*((2ll*f[y][0]%mod+f[y][1])%mod)%mod+1ll*g[1]*f[y][0]%mod)%mod;\n\t\t\t\tf[x][1] = 1ll*g[1]*((f[y][0]+f[y][1])%mod)%mod;\n\t\t\t\tf[x][2] = (1ll*(g[0]+g[1])%mod*((f[y][1]+2ll*f[y][2]%mod)%mod)%mod+2ll*g[2]*(((f[y][0]+f[y][1])%mod+f[y][2])%mod)%mod)%mod;\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n\tint n;\n\tinline bool main() {\n\t\tread(n);\n\t\tfor (int i = 1,x,y;i < n;++i)read(x,y),add(x,y),add(y,x);\n\t\tdfs(1,0);\n\t\tprintf(\"%d\\n\",(f[1][1]+f[1][2])%mod);\n\t\treturn 0;\n\t}\n}\n\nint main() {\n#ifdef demonlover\n\tfreopen(\"ARC121F.in\",\"r\",stdin);\n\tfreopen(\"ARC121F.out\",\"w\",stdout);\n#endif\n\treturn run :: main();\n}\n```",
        "postTime": 1666311681,
        "uid": 152997,
        "name": "demonlover923",
        "ccfLevel": 0,
        "title": "\u3010\u9898\u89e3\u3011[ARC121F]Logical Operations on Tree"
    },
    {
        "content": "\u9996\u5148\u663e\u7136\u4e00\u773c\u6811\u5f62 dp\u3002\n\n\u8fd9\u79cd\u590d\u6742\u4e9b\u7684\u6811\u5f62\u8ba1\u6570 dp \u53ef\u4ee5\u8003\u8651\u5148\u601d\u8003\u4e0b\u5408\u6cd5\u65b9\u6848\u7684\u6027\u8d28\u3002\n\n\u8003\u8651\u5bf9\u4e8e\u4e00\u79cd\u65b9\u6848\uff0c\u6309\u7167\u4ec0\u4e48\u987a\u5e8f\u7f29\u8fb9\u624d\u80fd\u4f7f\u5176\u5c3d\u53ef\u80fd\u6ee1\u8db3\u6700\u7ec8\u70b9\u6743\u4e3a $1$ \u5462\uff1f\n\n\u53ef\u4ee5\u53d1\u73b0\uff0c\u5bf9\u4e8e `&1` \u7684\u8282\u70b9\u548c `|0` \u7684\u8282\u70b9\uff0c\u662f\u6beb\u65e0\u7528\u5904\u7684\uff1b\u5bf9\u4e8e `&0` \u7684\u8282\u70b9\uff0c\u6211\u4eec\u5e94\u8be5\u5c3d\u53ef\u80fd\u5c06\u5176\u5f80\u524d\u653e\uff1b\u5bf9\u4e8e `|1` \u7684\u8282\u70b9\uff0c\u6211\u4eec\u5e94\u8be5\u5c3d\u53ef\u80fd\u5c06\u5176\u5f80\u540e\u653e\u3002\n\n\u6240\u4ee5\u5c31\u6709\u5982\u4e0b\u8d2a\u5fc3\u65b9\u5f0f\uff1a\u5148\u5c06\u6240\u6709 `&` \u8fb9\u5f62\u6210\u7684\u8fde\u901a\u5757\u7f29\u8fb9\uff0c\u6b64\u65f6\u5269\u4e0b\u7684\u6240\u6709\u8fb9\u7686\u4e3a `|`\uff0c\u7136\u540e\u5224\u65ad\u662f\u5426\u6709\u67d0\u4e00\u4e2a\u8fde\u901a\u5757\u503c\u4e3a $1$ \u5373\u53ef\u3002\n\n\u6240\u4ee5\u4f7f\u7528\u6811\u5f62 dp \u8ba1\u6570\u7684\u65f6\u5019\u4e5f\u53ef\u4ee5\u4f7f\u7528\u7c7b\u4f3c\u7684\u65b9\u5f0f\u8fdb\u884c\u8ba1\u6570\u3002\u663e\u7136\uff0c\u6211\u4eec\u4f1a\u6ce8\u610f\u4e24\u70b9\uff1a\u5f53\u524d `&` \u8fde\u901a\u5757\u7684\u503c\uff0c\u4ee5\u53ca\u5b50\u6811\u5185\u662f\u5426\u6709\u503c\u4e3a `1` \u7684\u8fde\u901a\u5757\u3002\n\n\u4e8e\u662f\u4e0d\u59a8\u8bbe $dp_{u,0/1,0/1}$ \u8868\u793a\u8fd9\u4e2a\uff0c\u7136\u540e\u8dd1\u6811\u5f62\u80cc\u5305\u8fdb\u884c\u8f6c\u79fb\u5373\u53ef\u3002\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n\u8f6c\u79fb\u65b9\u7a0b\u5f88\u957f\uff0c\u6709\u4e9b\u7ec6\u8282\uff0c\u5982\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/x32tjjg4.png)",
        "postTime": 1681460293,
        "uid": 257621,
        "name": "\u7ffc\u5fb7\u5929\u5c0a",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 [ARC121F] Logical Operations on Tree"
    },
    {
        "content": "\u4e0d\u59a8\u94a6\u5b9a $1$ \u4e3a\u6839\u3002\u8003\u8651\u4e00\u4e2a\u7279\u6b8a\u7684\u5c40\u90e8\uff1a\u5982\u679c\u5728\u64cd\u4f5c\u8fc7\u7a0b\u4e2d\uff0c\u51fa\u73b0\u4e86\u67d0\u4e2a\u53f6\u5b50\u7684\u503c\u4e3a $1$ \u4e14\u8fde\u63a5\u5b83\u7684\u8fb9\u4e3a $\\text{OR}$\uff0c\u90a3\u4e48\u53ea\u9700\u8981\u5c06\u5176\u653e\u5728\u6700\u540e\u64cd\u4f5c\uff0c\u5c31\u4e00\u5b9a\u80fd\u591f\u5f97\u5230 $1$\u3002\u6211\u4eec\u7528\u6709\u5e8f\u5bf9 $(1, \\text{OR})$ \u6765\u63cf\u8ff0\u8fd9\u4e2a\u53f6\u5b50\u7684\u72b6\u6001\u3002\n\n\u63a5\u7740\u6211\u4eec\u8003\u8651\u51fa\u73b0\u7684\u53f6\u5b50\u7684\u5176\u4ed6\u72b6\u6001\uff1a\n\n- $(1,\\text{AND})$ \u548c $(0,\\text{OR})$ \uff1a\u663e\u7136\u8fd9\u4e2a\u53f6\u5b50\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c\u56e0\u6b64\u539f\u6811\u5408\u6cd5\u7684\u5145\u8981\u6761\u4ef6\u662f\u4e0a\u9762\u7684\u90e8\u5206\u5408\u6cd5\u3002\n\n- $(0,\\text{AND})$\uff1a\u7531\u4e8e\u64cd\u4f5c\u4e4b\u540e\u5176\u7236\u4eb2\u7684\u6743\u4f1a\u53d8\u4e3a $0$\uff0c\u6211\u4eec\u4e0d\u59a8\u5728\u8fd9\u6837\u7684\u53f6\u5b50\u51fa\u73b0\u65f6\u5c31\u7acb\u523b\u5bf9\u5176\u8fdb\u884c\u64cd\u4f5c\uff0c\u8fd9\u6837\u80fd\u591f\u51cf\u5c0f\u5b83\u5bf9\u7b54\u6848\u7684\u8d1f\u9762\u5f71\u54cd\u3002\u56e0\u6b64\u539f\u6811\u5408\u6cd5\u7684\u5145\u8981\u6761\u4ef6\u8fd8\u662f\u4e0a\u9762\u7684\u90e8\u5206\u5408\u6cd5\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u67d0\u79cd\u64cd\u4f5c\u65b9\u5f0f\u4f7f\u5f97\u80fd\u591f\u51fa\u73b0 $(1, \\text{OR})$ \u8fd9\u6837\u7684\u53f6\u5b50\uff0c\u90a3\u4e48\u4f9d\u6b21\u5220\u6389\u53f6\u5b50\u4e00\u5b9a\u4e0d\u52a3\u3002\u6b64\u65f6\u5408\u6cd5\u7684\u5145\u8981\u6761\u4ef6\u662f\uff1a\u6839\u8282\u70b9\u6743\u4e3a $1$\uff0c\u4e14\u5176\u513f\u5b50\u5f62\u6210\u7684\u53f6\u5b50\u7684\u72b6\u6001\u90fd\u662f $(1,\\text{AND})$ \u6216 $(0,\\text{OR})$\u3002\u8fd9\u662f\u76f8\u5bf9\u5bb9\u6613\u8ba1\u6570\u7684\u3002\n\n\u8003\u8651\u5bb9\u65a5\uff0c\u6539\u4e3a\u8ba1\u7b97\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\u6570\u3002\u5982\u679c\u6211\u4eec\u80fd\u6c42\u51fa\u4e0d\u5b58\u5728 $(1,\\text{OR})$ \u7684\u65b9\u6848\u6570 $f$ \u548c\u5176\u4e2d\u5408\u6cd5\u7684\u65b9\u6848\u6570 $g$\uff0c\u90a3\u4e48 $f-g$ \u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u65b9\u6848\u6570\u3002\u8003\u8651\u6811\u5f62 DP\uff0c\u8bbe $f_u$ \u8868\u793a $u$ \u7684\u5b50\u6811\u4e2d\u4e0d\u5b58\u5728 $(1,\\text{OR})$ \u7684\u65b9\u6848\u6570\uff0c$g_u$ \u8868\u793a $u$ \u7684\u5b50\u6811\u4e2d\u4e0d\u5b58\u5728 $(1,\\text{OR})$ \u4e14\u5408\u6cd5\u7684\u65b9\u6848\u6570\u3002\u6839\u636e\u4e0a\u9762\u7684\u5206\u6790\uff0c\u521d\u59cb\u65f6 $f_u = 2,g_u = 1$\u3002\n\n\u5bf9\u4e8e $f$\uff0c\u6709\u8f6c\u79fb $f_u \\gets f_u \\times \\prod \\limits_{v \\in \\text{son}_u} (2 \\times f_v - g_v )$\u3002\u5176\u4e2d $2 \\times f_v$ \u662f\u56e0\u4e3a $(u,v)$ \u53ef\u4ee5\u662f $\\text{OR}$ \u6216 $\\text{AND}$\uff0c\u51cf\u53bb $g_v$ \u662f\u4e3a\u4e86\u6392\u9664 $v$ \u5b50\u6811\u5408\u6cd5\u4e14 $(u,v)$ \u4e3a $\\text{OR}$\uff0c\u5373\u51fa\u73b0 $(1,\\text{OR})$ \u7684\u60c5\u51b5\u3002\n\n\u5bf9\u4e8e $g$\uff0c\u6709\u8f6c\u79fb $g_u \\gets g_u \\times \\prod \\limits_{v \\in \\text{son}_u} f_v$\u3002\u6ce8\u610f\u65e0\u8bba $v$ \u5b50\u6811\u662f\u5426\u5408\u6cd5\uff0c\u7531\u4e8e\u5176\u6210\u4e3a\u53f6\u5b50\u65f6\u72b6\u6001\u53ea\u80fd\u662f $(1, \\text{AND})$ \u6216 $(0,\\text{OR})$\uff0c\u56e0\u6b64 $(u,v)$ \u5b9e\u9645\u4e0a\u662f\u786e\u5b9a\u7684\uff0c\u56e0\u6b64 $f_v$ \u7684\u7cfb\u6570\u4e3a $1$\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(n)$\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N = 1e5 + 5, mod = 998244353;\nint n, f[N], g[N];\nvector <int> e[N];\nint ksm(int a, int b) {\n    int ret = 1;\n    while (b) {\n        if (b & 1) ret = 1LL * ret * a % mod;\n        a = 1LL * a * a % mod, b >>= 1;\n    }\n    return ret;\n}\nvoid dfs(int u, int ff) {\n    f[u] = 2, g[u] = 1;\n    for (auto v : e[u]) {\n        if (v == ff) {\n            continue;\n        }\n        dfs(v, u);\n        f[u] = 1LL * f[u] * (1LL * f[v] * 2 % mod + mod - g[v]) % mod;\n        g[u] = 1LL * g[u] * f[v] % mod;\n    }\n}\nint main() {\n    ios :: sync_with_stdio(false);\n    cin.tie(nullptr);\n    cin >> n;\n    for (int i = 1, x, y; i < n; i++) {\n        cin >> x >> y;\n        e[x].push_back(y);\n        e[y].push_back(x);\n    }\n    dfs(1, 0);\n    int ans = (1LL * ksm(2, 2 * n - 1) + mod - f[1] + g[1]) % mod;\n    cout << ans << \"\\n\";\n    return 0;\n}\n```\n",
        "postTime": 1677074350,
        "uid": 246019,
        "name": "_came11ia_",
        "ccfLevel": 7,
        "title": "[ARC121F] Logical Operations on Tree"
    }
]