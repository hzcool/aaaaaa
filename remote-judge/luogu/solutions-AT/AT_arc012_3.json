[
    {
        "content": "## \u5bf9\u4e8e\u8fd9\u4efd\u4ee3\u7801\u7248\u6743\u95ee\u9898\u7684\u7b80\u8ff0\n\n\u8fd9\u4efd\u4ee3\u7801\u662f\u6211\u7684\u8001\u5e08 @\u697c\u697c223 \u4e0e\u6211\u5408\u4f5c\u5b8c\u6210\u7684\uff0c\u6211**\u88ab\u6388\u6743**\u53d1\u5e03\u8fd9\u7bc7\u9898\u89e3\u3002\u518d\u6b21\u611f\u8c22 @\u697c\u697c223 !\n\n\u8fd9\u9053\u9898\u7684\u5c0f\u7ec6\u8282\u6bd4\u8f83\u591a\uff0c\u6211\u4f1a\u5728\u4ee3\u7801\u524d\u4ecb\u7ecd\u4e3b\u8981\u601d\u8def\uff0c\u4e00\u4e9b\u7ec6\u8282\u4e0e\u7279\u5224\u5728\u4ee3\u7801\u5185\u5b8c\u6210\u3002\n\n\u597d\u4e86\uff0c\u5f00\u59cb\u5427\uff01\n\n## \u89e3\u9898\u601d\u8def\n\n#### \u4e00\u3001\u4e0a\u4e00\u624b\u68cb\u5b50\u989c\u8272\u7684\u5224\u65ad\n\n\u56e0\u4e3a\u9ed1\u5b50\u7ebf\u4e0b\uff0c\u4e00\u5b9a\u6709\u4ee5\u4e0b\u5224\u65ad\uff1a\n\n\u5982\u679c\u9ed1\u5b50\u6570\u91cf==\u767d\u5b50\u6570\u91cf\uff0c\u53ef\u4ee5\u8bf4\u660e\u521a\u521a\u4e0b\u7684\u662f\u767d\u5b50\u3002\uff08\u9ed1\u5b50\u548c\u767d\u5b50\u4e24\u4e24\u5bf9\u5e94\uff09\n\n\u5982\u679c\u9ed1\u5b50\u6570\u91cf-\u767d\u5b50\u6570\u91cf==1\uff0c\u521a\u521a\u4e0b\u7684\u662f\u9ed1\u5b50\u3002\uff08\u767d\u5b50\u4e0b\u5b8c\uff0c\u9ed1\u767d\u5b50\u6570\u91cf\u76f8\u7b49\u540e\u53c8\u591a\u4e86\u4e00\u624b\u9ed1\u5b50\uff09\n\n\u5982\u679c\u8fd9\u4e24\u79cd\u60c5\u51b5\u90fd\u4e0d\u662f\uff0c\u90a3\u4e48\u6709\u95ee\u9898\uff0c\u8f93\u51faNO\u3002\n\n\u8fd9\u4ef6\u4e8b\u60c5\u5f88\u6e05\u695a\uff0c\u4e0d\u5fc5\u8be6\u7ec6\u63cf\u8ff0\u4e86\u3002\n\n#### \u4e8c\u3001\u662f\u5426\u4f5c\u5f0a\u7684\u5224\u65ad\u65b9\u6cd5\n\n#### 1.\u4f5c\u5f0a\u8fc7\u7a0b\u7684\u63cf\u8ff0\n\n\u597d\u4e86\uff0c\u6765\u5230\u6838\u5fc3\u90e8\u5206\u3002\n\n\u5982\u4f55\u5224\u65ad\u8fd9\u4e2a\u4eba\u6709\u6ca1\u6709\u4f5c\u5f0a\u5462\uff1f\n\n\u8bbe\u60f3\u4e00\u4e2a\u60c5\u5f62\uff0c\u8fd9\u4e2a\u65f6\u5019\u4e24\u4e2a\u4eba\u90fd\u6ca1\u6709\u83b7\u80dc\u3002\u5e76\u4e14**\u521a\u521a\u4e0b\u7684\u662f\u9ed1\u5b50**\u3002\uff08\u5176\u5b9e\u767d\u5b50\u540c\u7406\uff0c\u4e3a\u65b9\u4fbf\u8d77\u89c1\u8fd9\u91cc\u5148\u53ea\u8bb2\u9ed1\u5b50\uff09\n\n\u8fd9\u65f6\uff0c\u4e00\u53ea~~\u90aa\u6076\u7684~~\u5c0f\u624b\u4f38\u8fc7\u6765\uff0c\u653e\u4e86\u4e00\u4e2a\u5b50\uff0c\u4f7f\u4ed6**\u83b7\u80dc\u4e86**\u3002\n\n\u90a3\u4e48\u8fd9\u4e2a\u65f6\u5019\uff0c\u5982\u679c**\u6bd4\u8d5b\u8fd8\u5728\u7ee7\u7eed**\uff0c\u4e5f\u5c31\u662f**\u53c8\u51fa\u73b0\u4e86\u4e0b\u4e00\u624b**\uff0c\u90a3\u4e48\u5c31\u8bf4\u660e\u4ed6\u4f5c\u5f0a\u4e86\u3002\n\n\u56e0\u4e3a\u83b7\u80dc\u4e86\uff0c\u6bd4\u8d5b\u5c31**\u7ed3\u675f\u4e86**\uff0c\u4e0d\u53ef\u80fd\u7ee7\u7eed\u4e86\u5440\uff01\n\n#### 2.\u6df1\u5165\u5206\u6790\u4f5c\u5f0a\u8fc7\u7a0b\n\n _\u597d\u4e86\uff0c\u73b0\u5728\u6211\u4eec\u7ec6\u54c1\u8fd9\u4e2a\u975e\u5e38\u975e\u5e38\u91cd\u8981\u7684\u8fc7\u7a0b\u3002_ \n\n\u8fd9\u4e2a\u4f5c\u5f0a\u8005\u53ef\u80fd\u653e\u4e86\u54ea\u4e00\u4e2a\u68cb\u5b50\u5462\uff1f\n\n**\u54ea\u4e00\u4e2a\u9ed1\u5b50\u90fd\u53ef\u80fd\u3002**\n\n\u6240\u4ee5\uff0c\u6211\u4eec\u8981**\u904d\u5386\u521a\u521a\u4e0b\u7684\u6bcf\u4e00\u4e2a\u9ed1\u5b50**\uff0c\u6765\u770b\u770b\u5982\u679c\u4ed6\u521a\u521a\u4e0b\u7684\u662f\u8fd9\u4e2a\u68cb\u5b50\uff0c\u662f\u4e0d\u662f\u5c5e\u4e8e\u4f5c\u5f0a\u3002\n\n\u5982\u679c\u6709**\u4e00\u79cd\u60c5\u51b5\u65e0\u6cd5\u5224\u65ad\u4f5c\u5f0a**\uff0c\u90a3\u521a\u521a\u4e0b\u7684\u6709\u53ef\u80fd\u5c31\u662f\u8fd9\u4e2a\u68cb\u5b50\uff0c\u4e0d\u80fd\u8bf4\u660e\u4ed6\u4f5c\u5f0a\uff0c\u76f4\u63a5\u8f93\u51fa$YES$\u5373\u53ef\u3002\n\n\u5982\u679c\u6bcf\u4e00\u79cd\u60c5\u51b5\u90fd\u8bf4\u660e\u4ed6\u4f5c\u5f0a\u4e86\uff0c\u90a3\u4ed6**\u80af\u5b9a\u4f5c\u5f0a\u4e86**\uff0c\u8f93\u51fa$NO$\u3002\n\n\u600e\u4e48\u904d\u5386\u5462\uff1f\u6211\u4eec\u53ef\u4ee5\u53cd\u5411\u6a21\u62df\u8fd9\u4e2a\u8fc7\u7a0b\u3002\u4e5f\u5c31\u662f**\u4f9d\u6b21**\u53bb\u6389\u6bcf\u4e00\u4e2a\u9ed1\u5b50\u3002\u6ce8\u610f\uff0c\u662f\u4f9d\u6b21\u53bb\u6389\uff0c\u4e5f\u5c31\u662f\u53bb\u6389\uff0c\u5224\u65ad\u5b8c\u4e4b\u540e\u8fd8\u8981\u518d**\u653e\u56de\u6765**\u3002\n\n\u90a3\u4e48**\u53bb\u6389\u540e\u68cb\u5b50\u7684\u60c5\u5f62\u4fbf\u662f\u4e0a\u4e00\u6b65\u7684\u60c5\u51b5**\u3002\u5982\u679c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5df2\u7ecf\u6709\u4eba\u83b7\u80dc\uff0c\u90a3\u4e48\u6bd4\u8d5b\u4e0d\u5e94\u7ee7\u7eed\u3002\n\n\u5982\u679c\u53bb\u6389\u6bcf\u4e00\u4e2a\u9ed1\u5b50\u540e\u90fd\u662f\u8fd9\u79cd\u60c5\u51b5\uff0c\u53ef\u4ee5\u8bf4\u660e\u4ed6\u4e00\u5b9a\u4f5c\u5f0a\u4e86\uff0c\u8f93\u51fa$NO$\u3002\n\n\u53cd\u4e4b\uff0c\u5982\u679c\u6709\u4e00\u4e2a\u9ed1\u5b50\u88ab\u53bb\u6389\u540e\u65e0\u4eba\u83b7\u80dc\uff0c\u90a3\u4e48\u5c31**\u65e0\u6cd5\u5224\u65ad\u4ed6\u4f5c\u5f0a\u4e86**\uff0c\u56e0\u4e3a\u4ed6\u521a\u521a\u4e0b\u7684\u53ef\u80fd\u5c31\u662f\u8fd9\u4e2a\u68cb\u5b50\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u4ed6\u6ca1\u6709\u4f5c\u5f0a\u3002\u56e0\u6b64\u8f93\u51fa$YES$\u3002\n\n\u5f53\u7136\uff0c\u5982\u679c\u539f\u6765\uff08\u6ca1\u6709\u53bb\u6389\u68cb\u5b50\uff09\u7684\u60c5\u51b5\u4e0b\u5c31\u65e0\u4eba\u83b7\u80dc\uff0c\u66f4\u6ca1\u6709\u95ee\u9898\u4e86\u3002\n\n#### \u4e09\u3001\u5bfb\u627e\u8fde\u7eed\u68cb\u5b50\u7684\u65b9\u6cd5\n\n\u518d\u6765\u4ecb\u7ecd\u5bfb\u627e\u4e00\u4e2a\u68cb\u5b50\u5468\u56f4\u5bfb\u627e\u8fde\u7eed\u68cb\u5b50\u7684\u65b9\u6cd5\u3002\n\n\u4e00\u4e2a\u68cb\u5b50\u5468\u56f4\u67098\u4e2a\u68cb\u5b50\uff0c\u7528\u4e24\u4e2a\u6570\u7ec4\u8bb0\u5f55\u4ed6\u4eec\u7684\u4f4d\u7f6e\uff1a\n\n```cpp\nconst int x[] = {1,1,1,-1,-1,-1,0,0};\nconst int y[] = {0,1,-1,0,1,-1,1,-1};\n```\n\u5176\u4e2d\uff0cx\u6570\u7ec4\u4e2d\uff0c1\u662f\u4e0b\u4e00\u884c\uff0c-1\u662f\u4e0a\u4e00\u884c\uff0c0\u662f\u672c\u884c\u3002\n\ny\u6570\u7ec4\u4e2d\uff0c1\u662f\u4e0b\u4e00\u5217\uff0c-1\u662f\u4e0a\u4e00\u5217\uff0c0\u662f\u672c\u5217\u3002\n\n\u6bd4\u5982\uff0c$x[0],y[0]$\u5bf9\u5e94\u7684\u662f\u672c\u5217\u4e0b\u4e00\u884c\uff0c\u4e5f\u5c31\u662f\u539f\u683c\u4e0b\u65b9\u7684\u4f4d\u7f6e\u3002\n\n\u8fd9\u6837\u8fd9\u4e24\u4e2a\u6570\u7ec4\u5c31\u53ef\u4ee5\u63cf\u8ff0\u6bcf\u4e00\u4e2a\u4f4d\u7f6e\u4e86\uff0c\u62ff\u7eb5\u6a2a\u5750\u6807\u5206\u522b\u52a0\u51cf\u5373\u53ef\u3002\n\n\u5176\u4ed6\u7684\u5c0f\u7ec6\u8282\uff0c\u4ee3\u7801\u4e2d\u89c1~\n\n## \u5b8c\u6574AC\u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int x[] = {1,1,1,-1,-1,-1,0,0};\nconst int y[] = {0,1,-1,0,1,-1,1,-1};\n//8\u4e2a\u4f4d\u7f6e\u7684\u8bb0\u5f55\nqueue < pair<int,int> > black,white;\n//\u4e24\u4e2a\u6574\u6570\u5206\u522b\u8868\u793a\u7eb5\u6a2a\u5750\u6807\uff0c\u65b9\u4fbf\u540e\u9762\u53d6\u7528\nchar board[20][20]; //\u8bb0\u5f55\u68cb\u76d8\nint o_len = 0, x_len = 0; //\u8bb0\u5f55\u6700\u5927\u957f\u5ea6\n\nvoid lf(int i, int j, char c, int len, int k)\n//ij\u662f\u7eb5\u6a2a\u5750\u6807\uff0cc\u8868\u793a\u662f\u9ed1\u5b50\u8fd8\u662f\u767d\u5b50\uff0clen\u662f\u5f53\u524d\u8fde\u7eed\u957f\u5ea6\uff0ck\u662f\u6570\u7ec4\u4e0b\u6807\uff0c\u8868\u793a\u65b9\u4f4d\n{\n    if (board[i][j]=='.') return; //\u6ca1\u6709\u68cb\u5b50\uff0c\u4e0d\u7528\u5224\u65ad\n    if (c == 'o' && len>o_len) o_len = len; //\u9ed1\u5b50\u8fde\u7eed\n    if (c == 'x' && len>x_len) x_len = len; //\u767d\u5b50\u8fde\u7eed\n    //\u64c2\u53f0\u6cd5\uff0c\u5bfb\u627e\u6700\u5927\n    if (board[i+x[k]][j+y[k]] == c)  \n    //\u5982\u679c\u548c\u4e2d\u5fc3\u68cb\u5b50\u662f\u4e00\u6837\u7684\uff0c\u5373\u8fde\u7eed\n    lf(i+x[k],j+y[k],c,len+1,k); //len\u522b\u5fd8\u4e86+1\uff0c\u8868\u793a\u53c8\u627e\u5230\u4e86\u4e00\u9897\u8fde\u7eed\u7684\u68cb\u5b50\n    //\u628a\u4e2d\u5fc3\u68cb\u5b50\u53d8\u4e3a\u627e\u5230\u7684\u76f8\u540c\u989c\u8272\u7684\u68cb\u5b50\u7ee7\u7eed\u641c\u7d22\uff0c\u770b\u770b\u6709\u6ca1\u6709\u8fdb\u4e00\u6b65\u8fde\u7eed\n }\n \nvoid search_max_length()\n{\n    for (int i = 1; i <= 19; i++)\n    {\n        for (int j = 1; j <= 19; j++) //\u904d\u5386\u68cb\u76d8\n        {\n            //\u516b\u79cd\u60c5\u51b5\n            if (board[i][j] == 'o') //\u662f\u9ed1\u5b50\n                for (int k = 0; k<=7; k++) lf(i,j,'o',1,k);\n                //8\u4e2a\u76f8\u90bb\u683c\n            if (board[i][j] == 'x') //\u662f\u767d\u5b50\n                for (int k = 0; k<=7; k++) lf(i,j,'x',1,k);\n        }\n    }\n}\n\nint main()\n{\n    int o = 0, x = 0; //\u8bb0\u5f55\u9ed1\u5b50\u767d\u5b50\u603b\u5171\u7684\u6570\u91cf\n    for (int i = 1; i <= 19; i++)\n    {\n        for (int j = 1; j <= 19; j++)\n        {\n            cin>>board[i][j]; //\u8f93\u5165\u68cb\u76d8\n            if (board[i][j] == 'o')  //\u662f\u9ed1\u68cb\n            {\n                black.push(make_pair(i,j)); //\u7eb5\u6a2a\u5750\u6807\u5165\u9ed1\u961f\n                o++;\n            }\n            if (board[i][j] == 'x')  //\u662f\u767d\u68cb\n            {\n                white.push(make_pair(i,j)); //\u7eb5\u6a2a\u5750\u6807\u5165\u767d\u961f\n                x++;\n            }\n        }\n    }\n\n    if (o - x >= 2 || x > o) //\u9ed1\u6bd4\u767d\u591a\u4e86\u8d85\u8fc71\u4e2a\u6216\u8005\u767d\u6bd4\u9ed1\u591a\n    {\n        cout<<\"NO\"<<endl;\n        return 0;\n    }\n    if (x == 0 && o == 0) //\u7279\u5224\uff1a\u68cb\u76d8\u662f\u7a7a\u7684\n    {\n        cout<<\"YES\"<<endl;\n        return 0;\n    }\n    if (o - x == 1)//\u4e0a\u4e00\u6b65\u662f\u9ed1\u5b50\u4e0b\u7684\n    {   \n    //\u53bb\u6389\u4e00\u9897\u9ed1\u5b50\n        while (black.size()) //\u5728\u5b50\u8fd8\u6ca1\u6709\u88ab\u5168\u90e8\u53bb\u6389\u65f6\n        {\n           int axis_x = black.front().first; \n           int axis_y = black.front().second;\n           //\u8981\u53bb\u6389\u7684\u68cb\u5b50\u7684\u7eb5\u6a2a\u5750\u6807\n           black.pop(); //\u8fd9\u4e00\u9897\u68cb\u5b50\u51fa\u961f\uff0c\u8868\u793a\u5df2\u7ecf\u53bb\u6389\u8fc7\n           board[axis_x][axis_y] = '.'; //\u6807\u8bb0\u6210\u6ca1\u6709\u68cb\u5b50\n           o_len = 0;\n           x_len = 0; //\u5148\u5f52\u96f6\n           search_max_length(); //\u641c\u7d22\u6700\u5927\u957f\u5ea6\n           board[axis_x][axis_y] = 'o'; //\u6807\u8bb0\u56de\u6765\n           if (o_len <= 4 && x_len <= 4) //\u90fd\u4e0d\u957f\u4e8e4\uff0c\u65e0\u4eba\u83b7\u80dc\n           {\n               //\u6709\u53ef\u80fd\u6ca1\u6709\u4f5c\u5f0a\uff0c\u8f93\u51faYES\n               cout<<\"YES\"<<endl;\n               return 0;\n           }\n        }\n        //\u6240\u6709\u60c5\u51b5\u53bb\u6389\u4e00\u4e2a\u9ed1\u5b50\u5747\u6709\u5927\u4e8e4\u7684\u8fde\u7eed\u68cb\u5b50\uff0c\u5373\u4e00\u5b9a\u6709\u4eba\u83b7\u80dc\n        cout<<\"NO\"<<endl;\n        return 0;\n    }\n    if (x == o) //\u4e0a\u4e00\u624b\u662f\u767d\u5b50\u4e0b\u7684\n    {\n    //\u53bb\u6389\u4e00\u9897\u767d\u5b50\uff0c\u4e0e\u4e0a\u65b9\u53bb\u6389\u9ed1\u5b50\u91cd\u590d\uff0c\u6b64\u5904\u4e0d\u518d\u8be6\u7ec6\u89e3\u91ca\u4e86\n        while (white.size())\n        {\n           int axis_x = white.front().first;\n           int axis_y = white.front().second;\n           white.pop();\n           board[axis_x][axis_y] = '.';\n           o_len = 0; \n           x_len = 0;\n           search_max_length();\n           board[axis_x][axis_y] = 'x';\n           if (o_len <= 4 && x_len <= 4)\n           {\n               cout<<\"YES\"<<endl;\n               return 0;\n           }\n        }\n        cout<<\"NO\"<<endl;\n        return 0;\n    }\n}\n```\n\u53e6\u5916\uff0c\u8fd9\u9053\u9898\u5f3a\u8c03\u4e86**\u8f93\u51fa\u9700\u8981\u6362\u884c**\uff0c\u4e0d\u8981\u5fd8\u4e86\uff01\n\n\u8981\u4e0d\u7136\u7206\u96f6~\n\n\u8fd9\u7bc7\u9898\u89e3\u5c31\u5230\u6b64\u4e3a\u6b62\u4e86\u3002\u5982\u679c\u5927\u5bb6\u6709\u4e0d\u7406\u89e3\u4e4b\u5904\uff0c**\u6b22\u8fce\u5728\u4e0b\u65b9\u7559\u4e0b\u8bc4\u8bba\uff0c\u6216\u662f\u79c1\u4fe1\u6211**\u3002\n\n\u522b\u5fd8\u4e86\u70b9\u4e2a\u8d5e\uff01\n\n~~\uff08\u611f\u89c9\u5199\u4e86\u4e00\u7bc7\u5c0f\u8bba\u6587\u54c8\u54c8\uff09~~\n\n### \u4fee\u6539\u8bb0\u5f55\n\n$2020/5/3$ \u53d1\u5e03\u9898\u89e3\n\n$2020/5/4$ \u5220\u53bb\u4ee3\u7801\u4e2d\u4e0d\u5fc5\u8981\u7684\u7a7a\u884c\uff08\u4e3a\u5206\u9694\u677f\u5757\u7684\u7a7a\u884c\u4ecd\u4fdd\u7559\uff09\n   \n   \u4fee\u6539\u4e86\u63cf\u8ff0\u4e0d\u6e05\u7684\u6ce8\u91ca\u3001\u5728\u4e0d\u5bb9\u6613\u7406\u89e3\u7684\u4f4d\u7f6e\u6dfb\u52a0\u6ce8\u91ca\n   \n$2020/5/8$ \u5bf9\u6d1b\u8c37\u9898\u89e3\u533a\u683c\u5f0f\u6539\u53d8\u800c\u8fdb\u884c\u90e8\u5206\u5b57\u8bcd\u7684\u4fee\u6539\n   \n   \u589e\u52a0\u4e3b\u8981\u601d\u8def\u90e8\u5206\u7684\u5e8f\u53f7\u6765\u6e05\u6670\u7ed3\u6784",
        "postTime": 1588475310,
        "uid": 339632,
        "name": "LucasXu80",
        "ccfLevel": 5,
        "title": "\u9898\u89e3 AT442 \u3010\u4e94\u76ee\u4e26\u3079\u30c1\u30a7\u30c3\u30ab\u30fc\u3011"
    }
]