[
    {
        "content": "\u5bb9\u6613\u53d1\u73b0\uff0c\u65e0\u8bba\u8d77\u70b9\u662f\u54ea\u4e2a\u683c\u5b50\uff0c\u6700\u540e\u90fd\u80fd\u5230\u8fbe\u5730\u56fe\u7684\u5de6\u4e0a\u89d2\uff0c\u56e0\u6b64\u53ea\u9700\u7edf\u8ba1\u4ece$(1, 1)$ \u51fa\u53d1\u60c5\u51b5\u4e0b\u7684\u7b54\u6848\u5373\u53ef\u3002\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6700\u4f18\u7684\u884c\u8fdb\u65b9\u6848\u4e00\u5b9a\u662f\u4ece\u6309\u884c\u8986\u76d6\u6216\u6309\u5217\u8986\u76d6\u4e8c\u8005\u4e4b\u4e00\uff0c\u4e8e\u662f\u8003\u8651\u5982\u4f55\u7edf\u8ba1\u4e00\u884c\uff08\u5217\uff09\u5df2\u7ecf\u88ab\u8986\u76d6\u3002\n\n\u7531\u4e8e\u8fb9\u754c\u7684\u5b58\u5728\uff0c\u8fb9\u754c\u7684\u4e24\u4e2a\u884c\uff08\u5217\uff09\u90fd\u662f\u53ef\u4ee5\u8986\u76d6\u7684\u3002\u800c\u5bf9\u4e8e\u5730\u9762\u683c\uff0c\u7531\u4e8e\u5728\u8be5\u683c\u9700\u8981\u505c\u4e0b\uff0c\u8be5\u683c\u6240\u5728\u884c\u7684\u8986\u76d6\u60c5\u51b5\u548c\u6240\u5728\u5217\u7684\u8986\u76d6\u60c5\u51b5\u7b49\u4ef7\u3002\n\n\u8003\u8651\u5efa\u7acb\u56fe\u8bba\u6a21\u578b\uff1a\u5982\u679c $(r, c)$ \u4e3a\u5730\u9762\u683c\uff0c\u5219\u4ece\u7b2c $r$ \u884c\u5411\u7b2c $c$ \u5217\u8fde\u8fb9\uff0c\u8868\u793a\u4e8c\u8005\u88ab\u8986\u76d6\u7684\u60c5\u51b5\u4e00\u81f4\u3002\u5982\u679c\u4e24\u884c\uff08\u5217\uff09\u4f4d\u4e8e\u540c\u4e00\u8fde\u901a\u5206\u91cf\u5185\uff0c\u5219\u53ea\u8981\u5176\u4e2d\u4e00\u884c\uff08\u5217\uff09\u88ab\u8986\u76d6\uff0c\u53e6\u5916\u4e00\u884c\uff08\u5217\uff09\u5373\u53ef\u540c\u6837\u88ab\u8986\u76d6\u3002\n\n\u5230\u8fd9\u91cc\uff0c\u6240\u6c42\u5c31\u7b49\u4ef7\u4e8e\uff0c\u6c42\u6700\u5c11\u6dfb\u52a0\u591a\u5c11\u6761\u8fb9\uff0c\u4f7f\u5f97\u6240\u6709\u884c\uff08\u5217\uff09\u5904\u5728\u540c\u4e00\u4e2a\u8fde\u901a\u5206\u91cf\u4e2d\u3002\n\n\u5e76\u67e5\u96c6\u7ef4\u62a4\u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(hw \\log hw)$\u3002\n\n```cpp\n// Problem: D - Skate\n// Contest: AtCoder - AtCoder Regular Contest 112\n// URL: https://atcoder.jp/contests/arc112/tasks/arc112_d\n// Author : StudyingFather\n// Site : https://studyingfather.com\n// Memory Limit: 1024 MB\n// Time Limit: 2000 ms\n//\n// Powered by CP Editor (https://cpeditor.org)\n\n#include <cstring>\n#include <iostream>\n#include <string>\nusing namespace std;\nstruct dsu {\n  int fa[2005];\n  void init(int n) {\n    for (int i = 0; i < n; i++) fa[i] = i;\n  }\n  int find(int x) { return fa[x] == x ? x : fa[x] = find(fa[x]); }\n  bool merge(int x, int y) {\n    x = find(x), y = find(y);\n    if (x == y) return false;\n    fa[x] = y;\n    return true;\n  }\n} ds;\nstring ma[1005];\nbool vis[2005];\nint main() {\n  int h, w;\n  cin >> h >> w;\n  for (int i = 0; i < h; i++) cin >> ma[i];\n  ds.init(h + w - 1);\n  // \u6240\u6709\u8fb9\u754c\u8986\u76d6\u60c5\u51b5\u4e00\u81f4\n  ds.merge(0, h);\n  ds.merge(0, h + w - 1);\n  ds.merge(h - 1, h);\n  ds.merge(h - 1, h + w - 1);\n  for (int i = 0; i < h; i++)\n    for (int j = 0; j < w; j++) {\n      if (ma[i][j] == '#') ds.merge(i, h + j);\n    }\n  int cnt1 = 0, cnt2 = 0;\n  memset(vis, 0, sizeof(vis));\n  for (int i = 0; i < h; i++) {\n    int x = ds.find(i);\n    if (!vis[x]) cnt1++, vis[x] = true;\n  }\n  memset(vis, 0, sizeof(vis));\n  for (int i = 0; i < w; i++) {\n    int x = ds.find(h + i);\n    if (!vis[x]) cnt2++, vis[x] = true;\n  }\n  cout << min(cnt1 - 1, cnt2 - 1) << endl;\n  return 0;\n}\n```",
        "postTime": 1667550918,
        "uid": 22030,
        "name": "StudyingFather",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 ARC112D \u3010Skate\u3011"
    }
]