[
    {
        "content": "\u89c9\u5f97 dp \u8fd8\u662f\u6bd4\u8f83\u663e\u7136\u7684\uff0c\u80af\u5b9a\u5f97\u6392\u4e00\u4e2a\u5e8f\uff0c\u7136\u540e\u5012\u7740\u3002\u56e0\u4e3a\u6211\u4eec\u80fd\u552f\u4e00\u80fd\u786e\u5b9a\u7684\u72b6\u6001\u5c31\u662f $n+1$ \u8fd9\u4e2a\u7f16\u53f7\uff0c\u6839\u672c\u6ca1\u6709\u673a\u5668\u4eba\uff0c\u65b9\u6848\u53ea\u6709 $1$\u3002\n\n$f_i$ \u8868\u793a\u540e $i$ \u4e2a\u7684\u65b9\u6848\u6570\u3002\u663e\u7136\u53ef\u4ee5 $f_i = f_{i+1} + f_{next}$, \u5176\u4e2d $next$ \u662f\u540e\u9762\u4e0d\u53d7\u5f71\u54cd\u7684\u3002\n\n\u95ee\u9898\u5728\u4e8e\u540e\u9762\u90a3\u4e2a\u600e\u4e48\u6c42\u3002 `next` \u5373\u540e\u9762\u7b2c\u4e00\u4e2a\u5927\u4e8e $x + d - 1$ \u7684\uff0c\u90a3\u4e0d\u5c31\u662f\u5355\u8c03\u6808\u7684\u6700\u57fa\u672c\u5e94\u7528\u5417\uff1f\n\n\u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <stack>\n#include <algorithm>\nconst int N = 200005, p = 998244353;\nint n, f[N];\nstd::pair<int, int> a[N];\nstd::stack<std::pair<int, int> > st;\nint main() {\n\tscanf(\"%d\", &n);\n\tfor(int i = 1; i <= n; i++) scanf(\"%d%d\", &a[i].first, &a[i].second);\n\tstd::sort(a+1, a+1+n);\n\tf[n+1] = 1;\n\tfor(int i = n; i >= 1; i--) {\n\t\tint t = a[i].first + a[i].second, next = i+1;\n\t\twhile(!st.empty() && t > a[st.top().first].first) {\n\t\t\tnext = st.top().second;\n\t\t\tst.pop();\n\t\t}\n\t\tst.push({i, next});\n\t\tf[i] = (f[i+1] + f[next]) % p;\n\t}\n\tprintf(\"%d\", f[1]);\n}\n```\t",
        "postTime": 1617334956,
        "uid": 40318,
        "name": "Acfboy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 ABC158F"
    },
    {
        "content": "\u4e00\u79cd\u5947\u602a\u7684\u5efa\u6a21\u65b9\u6cd5\u3002\n\n---\n\n\u5efa\u4e00\u4e2a DAG\uff0c$u\\rightarrow v$ \u8868\u793a\u5982\u679c $u$ \u88ab\u6fc0\u6d3b\u5219 $v$ \u4f1a\u6fc0\u6d3b\uff0c\u7136\u540e DP \u6c42\u89e3\u3002\u7136\u800c\u663e\u7136\u8fb9\u6570\u662f $n^2$ \u7ea7\u522b\u7684\u3002\n\n\u90a3\u4e48\u5b9a\u4e49 $fa_i$ \u8868\u793a\u6240\u6709\u80fd\u6fc0\u6d3b\u5b83\u7684\u70b9\u4e2d\u8d77\u59cb\u5750\u6807\u6700\u5927\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u8fd9\u5c31\u53d8\u6210\u4e00\u4e2a\u68ee\u6797\uff0c\u7136\u540e\u8dd1 DP \u5c31\u884c\u4e86\u3002\n\n\u6b63\u786e\u6027\uff1f\u663e\u7136 DAG \u7684\u505a\u6cd5\u662f\u6b63\u786e\u7684\uff0c\u800c\u5982\u679c $u_1,u_2$ \u90fd\u80fd\u6fc0\u6d3b $v$\uff0c\u4e14 $u_1$ \u7684\u8d77\u59cb\u5750\u6807\u5c0f\u4e8e $u_2$\uff0c\u5219\u56e0\u4e3a $u_2$ \u7684\u8d77\u59cb\u5750\u6807\u5c0f\u4e8e $v$\uff0c\u6240\u4ee5 $u_1$ \u5fc5\u7136\u80fd\u6fc0\u6d3b $u_2$\uff0c\u7ee7\u800c\u53ef\u4ee5\u95f4\u63a5\u5730\u6fc0\u6d3b $v$\uff0c\u6240\u4ee5\u8fd9\u6837\u6b63\u786e\u6027\u662f\u6ca1\u6709\u95ee\u9898\u7684\u3002\n\n\u5047\u8bbe\u6211\u4eec\u5efa\u597d\u4e86\u68ee\u6797\uff0c\u90a3\u4e48\u8bbe $dp[u]$ \u8868\u793a\u4ee5 $u$ \u4e3a\u6839\u7684\u5b50\u6811\u6fc0\u6d3b\u540e\u7ed3\u679c\u7684\u65b9\u6848\u6570\u3002\u9996\u5148\u6fc0\u6d3b\u5b83\u5219\u5b83\u7684\u5b50\u6811\u5c31\u5168\u90e8\u88ab\u6fc0\u6d3b\uff0c\u5171 $1$ \u79cd\u60c5\u51b5\uff1b\u63a5\u4e0b\u6765\u8003\u8651\u4e0d\u6fc0\u6d3b\u5b83\u7684\u505a\u6cd5\uff0c\u56e0\u4e3a\u6240\u6709\u5b50\u6811\u4e4b\u95f4\u662f\u76f8\u4e92\u72ec\u7acb\uff0c\u6240\u6709\u65b9\u6848\u6570\u5c31\u662f\u5b83\u7684\u6240\u6709\u5b50\u6811\u7684\u65b9\u6848\u6811\u4e4b\u79ef\u3002\n\n\u5373 $dp[u]=1+\\prod dp[v]$\uff0c\u5176\u4e2d $v$ \u4e3a $u$ \u7684\u5b50\u8282\u70b9\u3002\u800c\u7b54\u6848\u5c31\u662f\u6240\u6709\u68ee\u6797\u7684\u6839\u7684\u65b9\u6848\u6570\u4e4b\u79ef\u3002\n\n\u90a3\u4e48\u8003\u8651\u600e\u4e48\u5efa\u56fe\u3002\n\n```cpp\nfor(int i=1;i<=n;i++){\n\tint fa=getfa(i);\n\tif(fa)Add(fa,i);\t// \u5982\u679c\u6709\u7236\u4eb2\u5c31\u5efa\u8fb9\n\telse root[++cnt]=i;\t// \u6ca1\u6709\u5c31\u8bf4\u660e\u662f\u67d0\u68f5\u6811\u7684\u6839\n}\n```\n\n`fi` \u8868\u793a\u5f00\u59cb\u5750\u6807\uff0c`se` \u8868\u793a\u53ef\u4ee5\u79fb\u52a8\u7684\u8ddd\u79bb\u3002\u5148\u6309\u5f00\u59cb\u5750\u6807\u6392\u5e8f\u3002\n\n\u9996\u5148\u80fd\u7528\u8111\u5b50\u60f3\u5230\u4e00\u4e2a $n^2$ \u7684\u5efa\u56fe\uff1a\n\n```cpp\nint getfa(int x){\n\tfor(int i=x-1;i>=1;i--)\t\t// \u4ece x-1 \u5f00\u59cb\u662f\u56e0\u4e3a\u9700\u8981 a[i].fi<=a[x].fi\n\t\tif(a[x].fi<=a[i].fi+a[i].se-1)return i;\n\treturn 0;\n}\n```\n\n\u7136\u540e\u53d1\u73b0\u56e0\u4e3a $x$ \u4ece $1$ \u5230 $n$ \u679a\u4e3e\uff0c\u6240\u6709 `a[x].fi` \u662f\u9012\u589e\u7684\u3002\u4e5f\u5c31\u662f\u53ea\u8981\u6709\u7b2c\u4e00\u4e2a $x$ \u4f7f\u5f97 `a[x].fi>=a[i].fi+a[i].se` \u90a3\u4e48\u540e\u9762\u5c31\u4e00\u5b9a\u4e0d\u4f1a\u518d\u6709\u53ef\u80fd\u88ab\u4f5c\u4e3a\u7b54\u6848\u4e86\uff0c\u76f4\u63a5\u53bb\u6389\u5b83\u3002\n\n\u7528\u94fe\u8868\u52a0\u901f\u5efa\u56fe\uff0c\u53ef\u4ee5\u4f18\u5316\u5230 $O(n)$\u3002\n\n```cpp\nint getfa(int x){\n\tfor(int i=x-1;i>=1;i=nxt[i])\n\t\tif(a[x].fi>=a[i].fi+a[i].se)nxt[pre[i]]=nxt[i],pre[nxt[i]]=pre[i];\t// \u94fe\u8868\u6a21\u62df\u5220\u9664\n\t\telse return i;\n\treturn 0;\n}\n```\n\n\u8fd9\u91cc\u76f4\u63a5\u4ece $x-1$ \u5f00\u59cb\u800c\u4e0d\u662f\u4ece $nxt[x]$ \u662f\u56e0\u4e3a\u5728\u6b64\u4e4b\u524d\u4e0d\u53ef\u80fd\u5220\u9664 $x-1$\uff0c\u6240\u4ee5\u4e00\u5b9a\u6709 $nxt[x]=x-1$\u3002\n\n\u7136\u540e\u5c31\u505a\u5b8c\u4e86\uff0c\u74f6\u9888\u5728\u6392\u5e8f\uff0c\u590d\u6742\u5ea6 $O(n\\log n)$\u3002\n\n```cpp\n#include<algorithm>\n#include<iostream>\n#include<cstring>\n#include<cstdio>\n#include<cmath>\n#define pi pair<int,int>\n#define fi first\n#define se second\nusing namespace std;\n\ntypedef long long ll;\nconst int MAXN=2e5+5,MOD=998244353;\nint n,r[MAXN],nxt[MAXN],pre[MAXN];pi a[MAXN];\nint tot=0,head[MAXN];\nint cnt=0,root[MAXN];\nstruct Edge{\n\tint to,nxt;Edge():to(to),nxt(nxt){}\n\tEdge(int to,int nxt):to(to),nxt(nxt){}\n}edge[MAXN<<1];\nvoid Add(int u,int v){edge[++tot]=Edge(v,head[u]);head[u]=tot;}\ninline bool cmp(pi x,pi y){return x.fi<y.fi;}\nint getfa(int x){\n\tfor(int i=x-1;i>=1;i=nxt[i])\n\t\tif(a[x].fi>=a[i].fi+a[i].se)nxt[pre[i]]=nxt[i],pre[nxt[i]]=pre[i];\n\t\telse return i;\n\treturn 0;\n}\n\nll dp[MAXN];\nvoid dfs(int u){\t\t\t// \u6811\u5f62 DP\n\tdp[u]=1;\n\tfor(int i=head[u],v;i!=0;i=edge[i].nxt){\n\t\tv=edge[i].to;if(dp[v])continue;\n\t\tdfs(v);\n\t\tdp[u]=dp[u]*dp[v]%MOD;\n\t}dp[u]++;\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)scanf(\"%d%d\",&a[i].fi,&a[i].se);\n\tsort(a+1,a+n+1,cmp);\n\tfor(int i=1;i<=n;i++)nxt[i]=i-1,pre[i]=i+1;\n\tfor(int i=1;i<=n;i++){\t// \u5efa\u56fe\n\t\tint fa=getfa(i);\n\t\tif(fa)Add(fa,i);\n\t\telse root[++cnt]=i;\n\t}\n\tll mul=1;\n\tfor(int i=1;i<=cnt;i++)dfs(root[i]),mul=mul*dp[root[i]]%MOD;\n\tprintf(\"%lld\\n\",mul);\n\treturn 0;\n}\n```\n\n\u4e0d\u8fc7\u8fd9\u79cd\u5199\u6cd5\u597d\u50cf\u5df2\u7ecf\u6709\u4eba\u5199\u4e86\uff0c\u4f46\u8c8c\u4f3c\u6211\u4eec\u7684\u5efa\u6a21\u65b9\u5f0f\u662f\u4e0d\u4e00\u6837\u7684\u3002",
        "postTime": 1677161130,
        "uid": 350297,
        "name": "_maojun_",
        "ccfLevel": 6,
        "title": "ABC158F \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u6b63\u96be\u5219\u53cd\uff0c\u8ba1\u7b97\u51fa\u6709\u591a\u5c11\u4e2a\u6fc0\u6d3b\u96c6\u5408\u3002\n\n\u6bcf\u4e00\u4e2a\u6fc0\u6d3b\u96c6\u5408\u4f1a\u5bf9\u5e94\u4e00\u4e2a\u672a\u6fc0\u6d3b\u96c6\u5408\u3002\n\n\u7136\u540e\u53ef\u4ee5\u53d1\u73b0\uff0c\u5f53\u6fc0\u6d3b\u67d0\u4e00\u4e2a\u673a\u5668\u4eba\u65f6\uff0c\u4f1a\u6fc0\u6d3b\u5b83\u540e\u65b9\u7684\u4e00\u7cfb\u5217\u673a\u5668\u4eba\uff0c\u56e0\u6b64\u53ef\u4ee5\u8003\u8651\u628a\u5b83\u4eec\u7f29\u5728\u4e00\u8d77\u3002\n\n\u53ef\u4ee5\u7b80\u5355\u5730\u7528\u4e00\u4e2a\u52a8\u6001\u89c4\u5212\u6765\u5b9e\u73b0\uff1a\n\n\u5b9a\u4e49 $f(i,0)$ \u4e3a\u8003\u8651 $i$ \u4ee5\u540e\u7684\u6240\u6709\u673a\u5668\u4eba\uff0c\u4e0d\u6fc0\u6d3b $i$ \u65f6\u7684\u65b9\u6848\u6570\uff0c$f(i,1)$ \u4e3a\u6fc0\u6d3b $i$ \u65f6\u7684\u65b9\u6848\u6570\u3002\n\n\u6709\uff1a\n\n$$f(i,0) = f(i + 1,0) + f(i + 1,1)$$\n\n\u800c\u6fc0\u6d3b\u7684\u8bdd\uff0c\u5047\u5b9a\u6fc0\u6d3b $i$ \u540e\u533a\u95f4 $[i,to(i))$ \u90fd\u4f1a\u6fc0\u6d3b\uff0c\u90a3\u4e48\u4ece $to(i)$ \u8f6c\u79fb\u5373\u53ef\u3002\n\n$$f(i,1) = f(to(i),0) + f(to(i),1)$$\n\n\u53ea\u9700\u8981\u6c42\u51fa $to(i)$ \u5c31\u89e3\u51b3\u4e86\uff0c\u53ef\u4ee5\u7528\u4e8c\u5206\u6c42\u51fa $i$ \u70b9\u53ef\u4ee5\u76f4\u63a5\u6fc0\u6d3b\u7684\u8fb9\u754c\uff0c\u7136\u540e\u67e5\u8be2\u533a\u95f4\u6700\u503c\u5373\u53ef\u3002\n\n\u968f\u4fbf\u6253\u4e86\u4e2a\u7ebf\u6bb5\u6811\u3002\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <ctype.h>\nconst int bufSize = 1e6;\ninline char nc()\n{\n    #ifdef DEBUG\n    return getchar();\n    #endif\n    static char buf[bufSize], *p1 = buf, *p2 = buf;\n    return p1 == p2 && (p2 = (p1 = buf) + fread(buf, 1, bufSize, stdin), p1 == p2) ? EOF : *p1++;\n}\ntemplate<typename T>\ninline T read(T &r)\n{\n    static char c;\n    static int flag;\n    flag = 1, r = 0;\n    for (c = nc(); !isdigit(c); c = nc()) if (c == '-') flag = -1;\n    for (; isdigit(c); c = nc()) r = r * 10 + c - 48;\n    return r *= flag;\n}\nconst int maxn = 2e5 + 100;\nconst int mod = 998244353;\nint n, to[maxn], f[maxn][2];\nstruct node\n{\n    int pos, d;\n} A[maxn];\nbool cmp(const node& a, const node& b) { return a.pos < b.pos; }\nint maxx[maxn << 2];\n#define ls p << 1\n#define rs p << 1 | 1\ninline void pushup(int p) { maxx[p] = std::max(maxx[ls], maxx[rs]); }\nvoid modify(int l, int r, int p, int pos, int k)\n{\n    if(l == r) return (void)(maxx[p] = k);\n    int mid = l + r >> 1;\n    if (pos <= mid) modify(l, mid, ls, pos, k);\n    else modify(mid + 1, r, rs, pos, k);\n    pushup(p);\n}\nint ask(int l, int r, int p, int ll, int rr)\n{\n    if (ll > rr) return 0;\n    if (l >= ll && r <= rr) return maxx[p];\n    int mid = l + r >> 1, res = 0;\n    if (ll <= mid) res = ask(l, mid, ls, ll, rr);\n    if (rr > mid) res = std::max(res, ask(mid + 1, r, rs, ll, rr));\n    return res;\n}\nint main()\n{\n    read(n);\n    for (int i = 1; i <= n; ++i) read(A[i].pos), read(A[i].d);\n    std::sort(A + 1, A + 1 + n, cmp);\n    for (int i = n; i; --i)\n    {\n        int l = i, r = n, mid, ans = 0;\n        while (l <= r)\n        {\n            mid = l + r >> 1;\n            if (A[mid].pos < A[i].pos + A[i].d) ans = mid, l = mid + 1;\n            else r = mid - 1;\n        }\n        to[i] = std::max(r + 1, ask(1, n, 1, i + 1, ans));\n        modify(1, n, 1, i, to[i]);\n    }\n    f[n + 1][0] = 1;\n    for (int i = n; i; --i)\n    {\n        f[i][0] = (f[i + 1][0] + f[i + 1][1]) % mod;\n        f[i][1] = (f[to[i]][0] + f[to[i]][1]) % mod;\n    }\n    printf(\"%d\\n\", (f[1][0] + f[1][1]) % mod);\n    return 0;\n}\n```",
        "postTime": 1605492163,
        "uid": 220159,
        "name": "Clouder",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT5369 \u3010[ABC158F] Removing Robots\u3011"
    },
    {
        "content": "\u5927\u524d\u63d0\uff1a\u8fd9\u662f\u4e00\u9053\u7b80\u5355\u9898\uff0c\u96be\u5ea6\u53ea\u6709 2000\uff08\n\n> ### [AtC \u9898\u76ee\u9875\u9762\u4f20\u9001\u95e8]( https://atcoder.jp/contests/abc158/tasks/abc158_f )\n>\n> \u6709 $i$ \u4e2a\u673a\u5668\u4eba\uff0c\u7b2c $i$ \u4e2a\u5750\u6807\u4e3a $x_i$\uff0c\u6fc0\u6d3b\u540e\u79fb\u52a8\u8ddd\u79bb\u4e3a $d_i$\u3002\u4e00\u5f00\u59cb\u5168\u672a\u6fc0\u6d3b\uff0c\u4f60\u53ef\u4ee5\u6fc0\u6d3b\u82e5\u5e72\u4e2a\uff0c\u7b2c $i$ \u4e2a\u6fc0\u6d3b\u540e\uff0c\u6240\u6709\u5750\u6807\u5728 $[x_i,x_i+d_i)$ \u5185\u7684\u673a\u5668\u4eba\u90fd\u4f1a\u88ab\u6fc0\u6d3b\u3002\u95ee\u6709\u591a\u5c11\u79cd\u53ef\u80fd\u7684\u88ab\u6fc0\u6d3b\u7684\u673a\u5668\u4eba\u96c6\u5408\u3002\u7b54\u6848\u5bf9 $998244353$ \u53d6\u6a21\u3002\n>\n> $n\\in\\left[1,2\\times10^5\\right]$\u3002\n\n\u9996\u5148\u7b2c\u4e00\u53cd\u5e94\u662f\u5efa\u56fe\uff0c\u5c06\u6bcf\u4e2a\u673a\u5668\u4eba\u8fde\u5411\u5b83\u53ef\u4ee5\u6fc0\u6d3b\u7684\u6240\u6709\u673a\u5668\u4eba\u3002\u4f46\u662f\u8fd9\u6837\u5149\u5efa\u56fe\u66b4\u529b\u5c31\u5e73\u65b9\u4e86\u3002\u7136\u800c\u6211\u4eec\u53ef\u4ee5\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u3002\u4f46\u662f\u5efa\u51fa\u6765\u56fe\u4e4b\u540e\u8981\u6c42\u4f20\u9012\u95ed\u5305\uff0c\u4e0d\u53ef\u80fd\u884c\u3002\u6240\u4ee5\u5fc5\u987b\u907f\u5f00\u5efa\u56fe\u8fd9\u4e00\u60f3\u6cd5\u3002\n\n\u90a3\u663e\u7136\uff0c\u5efa\u56fe\u4e0d\u80fd\u505a\u90a3\u5b83\u80af\u5b9a\u6709\u7279\u6b8a\u6027\u8d28\u53ef\u4ee5\u7528\u66f4\u7b80\u5355\u7684\u65b9\u6cd5\u505a\u3002\u6ce8\u610f\u5230\u4e00\u4e2a\u663e\u7136\u4e14\u6709\u7528\u7684\u6027\u8d28\uff1a\u5c06\u673a\u5668\u4eba\u6309\u5750\u6807\u6392\u5e8f\u540e\uff0c\u6bcf\u4e2a\u673a\u5668\u4eba\u7684\u4f20\u9012\u95ed\u5305\u90fd\u662f\u4e2a\u533a\u95f4\u3002\u90a3\u6211\u4eec\u5c31\u53ef\u4ee5\u7528\u7c7b\u4f3c DP \u7684\u65b9\u6cd5\u6c42\u4e86\u3002\n\n\u8bbe $rit_i$ \u8868\u793a\u673a\u5668\u4eba $i$ \u7684\u4f20\u9012\u95ed\u5305\u7684\u53f3\u7aef\u70b9\uff08\u5de6\u7aef\u70b9\u663e\u7136\u662f $i$\uff09\uff0c\u90a3\u4e48\u5c31\u4e0e $i$ \u548c\u6240\u6709\u7684 $rit_j$\uff08$j$ \u80fd\u88ab $i$ \u5230\u8fbe\uff09\u53d6\u4e2a $\\max$\u3002\u53c8\u663e\u7136\uff0c$j$ \u7ec4\u6210\u7684\u4e5f\u662f\u533a\u95f4\uff0c\u4e8e\u662f\u6211\u4eec\u53ef\u4ee5\u52a8\u6001 RMQ\u3002\u6bd4\u8f83\u50bb\u7684\u65b9\u6cd5\u662f\u7ebf\u6bb5\u6811\uff0c\u7136\u800c hb \u8ba9\u6211\u4eec\u4e0d\u8981\u517b\u6210\u7ebf\u6bb5\u6811\u4f9d\u8d56\u75c7\u3002\u6ce8\u610f\u5230\u8fd9\u91cc\u662f\u6bcf\u6b21\u76f8\u5f53\u4e8e\u5728\u5e8f\u5217\u5f00\u5934\u52a0\u4e00\u4e2a\u6570\uff0c\u7136\u540e\u67e5\u8be2\u4e00\u6b21\uff0c\u4e0d\u96be\u60f3\u5230 ST \u8868\u662f\u53ef\u4ee5\u5728\u5f00\u5934\u7ed3\u5c3e push \u7684\uff0c\u4e8e\u662f\u5199\u4e2a\u52a8\u6001 ST \u8868\u53ef\u4ee5\u6709\u6548\u51cf\u5c11\u7801\u91cf\u3002\n\n\u7136\u800c\u8fd8\u6709\u66f4 nb \u7684\u65b9\u6cd5\u3002\u6ce8\u610f\u5230\u4ece\u53f3\u5f80\u5de6\u9012\u63a8\u7684\u8fc7\u7a0b\u4e2d\uff0c\u82e5\u4e00\u4e2a\u673a\u5668\u4eba\u88ab\u5b83\u5de6\u8fb9\u7684\u673a\u5668\u4eba\u7b97\u8fdb\u53bb\u4e86\uff0c\u90a3\u4e48\u6b64\u673a\u5668\u4eba\u5c31\u518d\u4e5f\u53d1\u6325\u4e0d\u4e86\u7528\u5904\u4e86\uff0c\u56e0\u4e3a\u7b97\u5b83\u8fdb\u53bb\u7684\u673a\u5668\u4eba\u5df2\u7ecf\u8986\u76d6\u5b83\u7684\u6240\u6709\u5f71\u54cd\u6548\u679c\u4e86\u3002\u6839\u636e\u8fd9\u4e2a\u6027\u8d28\u6211\u4eec\u53ef\u4ee5\u53ca\u65f6\u5220\u9664\u65e0\u7528\u51b3\u7b56\uff0c\u4f7f\u7528\u5355\u8c03\u6808\u3002\u5177\u4f53\u5c31\u662f\u6bcf\u6b21\u7b97\u7684\u65f6\u5019\u5f39\u51fa\u6240\u6709\u6808\u9876\u53ef\u4ee5\u8f6c\u79fb\u5230\u7684\u673a\u5668\u4eba\u8f6c\u79fb\uff0c\u7136\u540e pop \u6389\uff0c\u7136\u540e\u518d\u628a\u672c\u673a\u5668\u4eba push\u3002\u8fd9\u6837\u6bcf\u4e2a\u673a\u5668\u4eba\u8fdb\u51fa\u4e00\u6b21\uff0c\u7ebf\u6027\u3002\n\n\u7136\u540e\u5c31\u662f\u6c42\u51fa\u6765 $rit$ \u4e4b\u540e\u600e\u4e48\u6c42\u7b54\u6848\u4e86\u3002\u8fd9\u4e2a\u5c31\u5f02\u5e38\u7b80\u5355\u4e86\uff0c\u968f\u4fbf DP \u5c31\u884c\u4e86\u3002\u6ce8\u610f\u5230\u6700\u7ec8\u7684\u4e00\u79cd\u60c5\u51b5\u4e00\u5b9a\u53ef\u4ee5\u5206\u89e3\u6210\u82e5\u5e72\u4e2a\u9009\u7684\u533a\u95f4\u548c\u4e0d\u9009\u7684\u533a\u95f4\u9519\u843d\u6392\u5217\uff0c\u4e8e\u662f $dp_{i,0/1}$ \u8868\u793a\u524d $i$ \u4e2a\u4e2d\uff0c\u7b2c $i$ \u4e2a\u662f\u9009 / \u4e0d\u9009\u7684\u65b9\u6848\u6570\u3002\u8f6c\u79fb\u5c31\u968f\u4fbf\u524d\u7f00\u548c\u5373\u53ef\uff0c\u5de6\u7aef\u70b9\u968f\u4fbf\u5355\u8c03\u6808\u4e00\u4e0b\u3002\n\n\u603b\u590d\u6742\u5ea6\u80af\u5b9a\u662f\u7ebf\u6027\u5bf9\u6570\u7684\uff0c\u65e0\u8bba\u600e\u4e48\u4f18\u5316\u6392\u5e8f\u8fd8\u662f\u8981\u6392\u7684\u3002\n\n~~\u7531\u4e8e\u6211\u6bd4\u8f83\u65e0\u804a~~\u4e3a\u4e86\u7a0d\u5fae\u7ec3\u4e00\u4e0b\u4e0d\u5e38\u7528\u7684 DS\uff0c\u6211\u628a\u6c42 $rit$ \u7684\u4e09\u79cd\u65b9\u6cd5\u90fd\u5199\u4e86\u4e00\u904d\uff0c\u4ee3\u7801\u592a\u957f\u4e86\u5c31\u53ea\u653e\u94fe\u63a5\u4e86\u3002\n\n- \u7ebf\u6bb5\u6811\uff1a https://atcoder.jp/contests/abc158/submissions/17098557\n- ST \u8868\uff1a https://atcoder.jp/contests/abc158/submissions/17098727 \n- \u5355\u8c03\u6808\uff1a https://atcoder.jp/contests/abc158/submissions/17099115 ",
        "postTime": 1601382738,
        "uid": 138400,
        "name": "chenxia25",
        "ccfLevel": 9,
        "title": "AtCoder abc158_f - Removing Robots"
    },
    {
        "content": "\u53ef\u4ee5\u628a\u8fd9\u4e9b\u673a\u5668\u4eba\u60f3\u6210\u4e00\u4e2a DAG \u6027\u7ed3\u6784\uff1a\u5982\u679c\u673a\u5668\u4eba $i$ \u7ed9\u542f\u52a8\u4e86\uff0c\u80af\u5b9a\u4f1a\u5bfc\u81f4\u673a\u5668\u4eba $j$ \u542f\u52a8\uff0c\u90a3\u5c31\u8fde\u4e00\u4e2a $i$ \u5f80 $j$ \u7684\u8fb9\u3002\u4f46\u662f\u8fd9\u6837\u4e0d\u4ec5\u663e\u7136\u5b58\u50a8\u4e0d\u4e86\uff0c\u4f46\u662f\u4e5f\u5f88\u96be\u6765\u4ece\u8fd9\u4e2a\u7ed3\u6784\u8ba1\u7b97\u7b54\u6848\u3002\n\n\u6240\u4ee5\uff0c\u7b2c\u4e00\u4e2a\u60f3\u6cd5\u662f\u8ba9 DAG \u9000\u5316\u6210\u4e00\u68f5\u6811\u3002\u610f\u601d\u5c31\u662f\uff0c\u5982\u679c\u6709\u4e09\u4e2a\u70b9 $(a,b,c)$ \u6ee1\u8db3 $a$ \u5f80 $b$ \u6709\u8fb9\uff0c$b$ \u5f80 $c$ \u6709\u8fb9\uff0c\u548c $a$ \u5f80 $c$ \u6709\u8fb9\uff0c\u90a3\u53ef\u4ee5\u5220\u9664 $a$ \u5f80 $c$ \u7684\u8fb9\u3002\n\n\u600e\u4e48\u4fdd\u8bc1\u6700\u7ec8\u7684\u56fe\u662f\u4e00\u4e2a\u6709\u5411\u68ee\u6797\u5462\uff1f\u7b2c\u4e00\u4e2a\u53d1\u73b0\uff0c\u5982\u679c $a$ \u5f80 $b$ \u6709\u8fb9\uff0c\u5e76\u4e14 $b$ \u5f80 $c$ \u6709\u8fb9\uff0c\u90a3\u80af\u5b9a $a$ \u5f80 $c$ \u6216\u8005 $c$ \u5f80 $a$ \u6709\u8fb9\uff0c\u5e94\u4e3a\u5982\u679c\u628a\u673a\u5668\u4eba\u6309\u4f4d\u7f6e\u6392\u5e8f\uff0c\u90a3 $b$ \u5728 $a$ \u548c $c$ \u4e2d\u95f4\uff0c\u80af\u5b9a\u53ef\u4ee5\u5ffd\u7565\u81f3\u5c11\u4e00\u4e2a\u8fb9\u5728\u8fd9\u79cd\u60c5\u51b5\u3002\n\n\u4f46\u662f\u5982\u679c\u7528\u4e0a\u65b9\u7684\u65b9\u6cd5\u7f29 DAG\uff0c\u592a\u6162\u4e86\uff0c$O(n^3)$\u3002\u4f46\u662f\u5982\u679c\u9700\u8981\u5148\u6784\u9020 DAG \u7684\u8bdd\uff0c\u80af\u5b9a\u81f3\u5c11 $O(n^2)$\uff0c\u6240\u4ee5\u5fc5\u987b\u8df3\u8fc7\u5efa\u7acb\u5b8c\u5168 DAG \u7684\u6b65\u9aa4\u3002\n\n\u6765\u76f4\u63a5\u6784\u9020\u68ee\u6797\uff0c\u9700\u8981\u5148\u5b9a\u4e49\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u5e94\u8be5\u662f\u4ec0\u4e48\u3002\u5982\u679c\u7528 DAG \u5220\u8fb9\u5b8c\u7684\u68ee\u6797\uff0c\u90a3\u4e00\u4e2a\u8282\u70b9\u7684\u7236\u4eb2\u5c31\u662f\u5b83\u5de6\u65b9\u6700\u53f3\u8fb9\u7684\u673a\u5668\u4eba\u4f7f\u5f97\u8fd9\u4e2a\u673a\u5668\u4eba\u542f\u52a8\u5b83\u672c\u8eab\u80af\u5b9a\u4f1a\u542f\u52a8\u3002\u5e94\u4e3a\u8981\u6c42\u201d\u6700\u5de6\u8fb9\u201c\u8fd9\u4e2a\u6027\u8d28\uff0c\u8fd9\u6837\u80af\u5b9a\u662f\u76f4\u63a5\u542f\u52a8\uff0c\u800c\u4e0d\u662f\u4e00\u4e2a\u673a\u5668\u4eba\u78b0\u4e86\u53e6\u4e00\u4e2a\u673a\u5668\u4eba\u624d\u542f\u52a8\u5b83\u672c\u8eab\u3002\n\n\u8fd9\u6837\u660e\u663e\u53ef\u4ee5\u4f7f\u7528\u4e8c\u5206\u67e5\u627e\u505a\uff0c\u4f46\u662f\u6bd4\u8d5b\u65f6\u5173\u5fc3\u6700\u597d\u4e9b\u7684\u65b9\u6cd5\u3002\u4ece\u6700\u53f3\u8fb9\u7684\u673a\u5668\u4eba\u5f80\u5de6\u904d\u5386\uff0c\u5e76\u4e14\u7ef4\u62a4\u4e00\u4e2a\u5c0f\u6839\u5806\uff0c\u8fd9\u4e2a\u5c0f\u6839\u5806\u91cc\u5143\u7d20\u5c31\u662f\u8fd8\u6ca1\u6709\u914d\u5bf9\u4e00\u4e2a\u7236\u4eb2\u7684\u673a\u5668\u4eba\u3002\u5c0f\u6839\u5806\u5806\u9876\u5e94\u8be5\u662f\u6700\u9760\u5de6\u7684\u6ca1\u914d\u5bf9\u673a\u5668\u4eba\u3002\u904d\u5386\u5230\u673a\u5668\u4eba $i$\uff0c\u628a\u6240\u6709\u5806\u91cc\u5b83\u53ef\u4ee5\u76f4\u63a5\u8dd1\u5230\u7684\u673a\u5668\u4eba $j$ \u7236\u4eb2\u8bbe\u4e3a $i$ \u5e76\u4e14\u5f39\u51fa\u5806\uff0c\u6700\u540e\u5728\u628a $i$ \u672c\u8eab\u653e\u8fdb\u5806\u3002\n\n\u6700\u7ec8\u904d\u5386\u5b8c\u5806\u91cc\u7684\u5143\u7d20\u5c31\u662f\u8fd9\u4e2a\u68ee\u6797\u7684\u6839\u3002\u73b0\u5728\u95ee\u9898\u9000\u5316\u6210\u4e00\u4e2a\u6811\u5f62 DP\uff1a\u6709\u591a\u5c11\u4e2a\u67d3\u8272\u65b9\u6848\uff0c\u4f7f\u5f97\u6bcf\u4e2a\u8282\u70b9\u67d3\u9ed1\u767d\uff0c\u5e76\u4e14\u5982\u679c\u4e00\u4e2a\u8282\u70b9\u7236\u4eb2\u67d3\u9ed1\u8272\uff0c\u5b83\u5fc5\u987b\u67d3\u9ed1\u8272\uff1f\n\n\u8bbe $DP[u]$ \u4e3a\u67d3 $u$ \u5b50\u6811\u7684\u603b\u5171\u65b9\u6848\u3002\u5982\u679c\u8282\u70b9 $u$ \u67d3\u9ed1\u8272\uff0c\u90a3\u53ea\u6709\u4e00\u4e2a\u65b9\u6848\uff08\u6240\u6709\u5b50\u6811\u91cc\u8282\u70b9\u4e5f\u67d3\u9ed1\u8272\uff09\uff0c\u4f46\u662f\u5982\u679c\u67d3\u767d\u8272\uff0c\u90a3\u5b69\u5b50\u53ef\u4ee5\u968f\u4fbf\u67d3\u3002\u5e94\u4e3a\u5b69\u5b50\u7684\u67d3\u8272\u662f\u72ec\u7acb\u9009\u62e9\uff0c\u67d3\u767d\u8272\u7684\u65b9\u6848\u6570\u662f\u5b69\u5b50\u7684 $DP$ \u4e58\u79ef\u3002\n\n$$DP[u]=1+\\prod^v_{(u,v)\\in E}DP[v]$$\n\n\u6700\u540e\u7b54\u6848\u662f\u6240\u6709\u6839 $DP$ \u503c\u4e58\u79ef\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n// writer: w33z8kqrqk8zzzx33\n#include <bits/stdc++.h>\nusing namespace std;\n \n#define iter(i, a, b) for(int i=(a); i<(b); i++)\n#define rep(i, a) iter(i, 0, a)\n#define rep1(i, a) iter(i, 1, (a)+1)\n#define log(a) cerr<<\"\\033[32m[DEBUG] \"<<#a<<'='<<(a)<<\" @ line \"<<__LINE__<<\"\\033[0m\"<<endl\n#define all(a) a.begin(), a.end()\n#define fi first\n#define se second\n#define pb push_back\n#define mp make_pair\n \nusing ll=long long;\nusing pii=pair<int, int>;\n//#define int ll\nconst int MOD = 998244353;\n\nvector<int> elist[200005];\nint ans[200005]; bool pin[200005];\nvector<pii> rob;\npriority_queue<pair<pii, int>, vector<pair<pii, int>>, greater<pair<pii, int>>> pq;\n\nint dfs(int node) {\n    ans[node] = 1;\n    ll prod = 1;\n    for(int& i:elist[node]) prod = prod * dfs(i) % MOD;\n    ans[node] += prod;\n    if(ans[node] == MOD) ans[node]--;\n    return ans[node];\n}\n\nsigned main() {\n    ios_base::sync_with_stdio(false); cin.tie(0);\n    int n; cin >> n;\n    rep(i, n) {\n        int a, b; cin >> a >> b;\n        rob.pb({a, b});\n    }\n    sort(all(rob));\n    for(int i=n-1; i>=0; i--) {\n        while(pq.size() && rob[i].fi+rob[i].se > pq.top().fi.fi) {\n            elist[i].pb(pq.top().se);\n            pin[pq.top().se] = 1;\n            pq.pop();\n        }\n        pq.push({rob[i], i});\n    }\n    ll res = 1;\n    rep(i, n) if(!pin[i]) res = res * dfs(i) % MOD;\n    cout << res << endl;\n}\n\n```",
        "postTime": 1583642411,
        "uid": 220037,
        "name": "w33z8kqrqk8zzzx33",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT5369"
    }
]