[
    {
        "content": "\u5728\u535a\u5ba2\u56ed\u98df\u7528\u66f4\u4f73\uff1a[https://www.cnblogs.com/PinkRabbit/p/AGC018.html](https://www.cnblogs.com/PinkRabbit/p/AGC018.html)\u3002\n\n\u9996\u5148\u58f0\u660e $X$ \u503c\u53ea\u6709\u53ef\u80fd\u53d6\u5230 $\\{-1, 0, 1\\}$\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u6839\u636e\u5b69\u5b50\u4e2a\u6570\u786e\u5b9a $X_i$ \u7684\u5947\u5076\u6027\u3002\u5982\u679c\u4e24\u68f5\u6811\u786e\u5b9a\u7684\u67d0\u4e2a\u70b9\u7684\u5947\u5076\u6027\u4e0d\u540c\uff0c\u663e\u7136\u5c31\u8f93\u51fa `IMPOSSIBLE`\u3002\n\n\u63a5\u4e0b\u6765\u7684\u6784\u9020\u8bf4\u660e\u4e86\u9664\u4e86\u4e0a\u8ff0\u60c5\u51b5\u90fd\u662f `POSSIBLE` \u7684\u3002\n\n\u6784\u9020\u4e00\u5f20\u56fe\uff0c\u8fd9\u5f20\u56fe\u9996\u5148\u5305\u542b\u4e86\u539f\u5148\u7684\u4e24\u68f5\u6811\u3002\n\n\u52a0\u4e00\u4e2a\u8d85\u7ea7\u6839\uff0c\u8fde\u63a5\u4e24\u68f5\u6811\u7684\u6811\u6839\u3002\n\n\u90a3\u4e48\u6b64\u65f6\u6811\u4e0a\u7684\u6bcf\u4e2a\u70b9 $u$\uff0c$X_u$ \u7684\u5947\u5076\u6027\u662f\u4e0e\u6b64\u65f6\u8fd9\u4e2a\u70b9\u7684\u5ea6\u6570\u7684\u5947\u5076\u6027\u76f8\u540c\u7684\u3002\n\n\u5bf9\u4e8e\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\uff0c\u5728\u4e24\u68f5\u6811\u7684\u5bf9\u5e94\u8282\u70b9\u4e4b\u95f4\u8fde\u8fb9\u3002\n\n\u73b0\u5728\u6240\u6709\u70b9\u90fd\u662f\u5076\u6570\u5ea6\u6570\u7684\u4e86\uff0c\u800c\u4e14\u6574\u4e2a\u56fe\u8fde\u901a\uff0c\u90a3\u4e48\u5c31\u5b58\u5728\u6b27\u62c9\u56de\u8def\uff0c\u7ed9\u6b27\u62c9\u56de\u8def\u968f\u4fbf\u5b9a\u4e2a\u5411\u3002\n\n\u90a3\u4e48\u67d0\u4e2a\u8282\u70b9\u7684 $X_i$ \u662f $+1$ \u8fd8\u662f $-1$ \u5c31\u53d6\u51b3\u4e8e\u4e24\u68f5\u6811\u5bf9\u5e94\u8282\u70b9\u4e4b\u95f4\u7684\u8fde\u8fb9\u7684\u65b9\u5411\u4e86\u3002\n\n\u5bb9\u6613\u9a8c\u8bc1\u6b64\u65f6\u6bcf\u4e2a\u5b50\u6811\u90fd\u6ee1\u8db3\u6761\u4ef6\u3002\n\n```cpp\n#include <cstdio>\n#include <vector>\n\nconst int MN = 100005, ME = 300005;\n\nint N, A[MN], B[MN], R1, R2;\n\nint deg1[MN], deg2[MN];\nint E, eu[ME], ev[ME], dir[ME];\nstd::vector<int> G[MN * 2];\n\nvoid DFS(int u) {\n\twhile (!G[u].empty()) {\n\t\tint e = G[u].back();\n\t\tG[u].pop_back();\n\t\tif (!dir[e]) {\n\t\t\tint v = eu[e] ^ ev[e] ^ u;\n\t\t\tdir[e] = u == eu[e] ? 1 : 2;\n\t\t\tDFS(v);\n\t\t}\n\t}\n}\n\nint Ans[MN];\n\nint main() {\n\tscanf(\"%d\", &N);\n\tfor (int i = 1; i <= N; ++i) scanf(\"%d\", &A[i]);\n\tfor (int i = 1; i <= N; ++i) scanf(\"%d\", &B[i]);\n\tfor (int i = 1; i <= N; ++i) {\n\t\tif (A[i] != -1) {\n\t\t\t++deg1[A[i]], ++deg1[i];\n\t\t\t++E, eu[E] = A[i], ev[E] = i;\n\t\t\tG[A[i]].push_back(E);\n\t\t\tG[i].push_back(E);\n\t\t} else R1 = i;\n\t\tif (B[i] != -1) {\n\t\t\t++deg2[B[i]], ++deg2[i];\n\t\t\t++E, eu[E] = N + B[i], ev[E] = N + i;\n\t\t\tG[N + B[i]].push_back(E);\n\t\t\tG[N + i].push_back(E);\n\t\t} else R2 = i;\n\t}\n\t++deg1[R1], ++deg2[R2];\n\t++E, eu[E] = N + N + 1, ev[E] = R1;\n\tG[N + N + 1].push_back(E), G[R1].push_back(E);\n\t++E, eu[E] = N + N + 1, ev[E] = N + R2;\n\tG[N + N + 1].push_back(E), G[N + R2].push_back(E);\n\tfor (int i = 1; i <= N; ++i) if ((deg1[i] ^ deg2[i]) & 1) return puts(\"IMPOSSIBLE\"), 0;\n\tputs(\"POSSIBLE\");\n\tfor (int i = 1; i <= N; ++i) if (deg1[i] & 1) {\n\t\t++E, eu[E] = i, ev[E] = N + i;\n\t\tG[i].push_back(E), G[N + i].push_back(E);\n\t}\n\tDFS(N + N + 1);\n\tfor (int i = E; i > 2 * N; --i)\n\t\tAns[eu[i]] = dir[i] == 1 ? 1 : -1;\n\tfor (int i = 1; i <= N; ++i) printf(\"%d%c\", Ans[i], \" \\n\"[i == N]);\n\treturn 0;\n}\n```",
        "postTime": 1596998255,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 AT2675 \u3010[AGC018F] Two Trees\u3011"
    },
    {
        "content": "[AT2675 [AGC018F] Two Trees](https://www.luogu.com.cn/problem/AT2675)\u89e3\u9898\u62a5\u544a\uff1a\n\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://zybuluo.com/xiaoziyao/note/1760327)\n\n## \u9898\u610f\n- \u7ed9\u5b9a\u4e24\u9897\u6811\uff0c\u4f60\u9700\u8981\u7ed9\u4f4d\u7f6e$x$\u4e00\u4e2a\u503c$v_x$\uff0c\u4f7f\u5f97$x$\u5728\u4e24\u68f5\u6811\u4e0a\u7684\u5b50\u6811\u548c\u7684\u7edd\u5bf9\u503c\u5747\u4e3a$1$\uff1b\n- \u5982\u679c\u6ca1\u6709\u65b9\u6848\uff0c\u8f93\u51fa$\\text{IMPOSSIBLE}$\uff0c\u5426\u5219\u8f93\u51fa$\\text{POSSIBLE}$\uff0c\u5e76\u7ed9\u51fa\u65b9\u6848\u3002\n- \u6570\u636e\u8303\u56f4\uff1a$1\\leqslant n\\leqslant 10^5$\u3002\n\n## \u5206\u6790\n\u6b27\u62c9\u56de\u8def\u795e\u4ed9\u9898\u3002\n\n\u6ce8\uff1a\u4ee5\u4e0b\u79f0\u7b2c\u4e00\u68f5\u6811\u4e3a\u5de6\u6811\uff0c\u7b2c\u4e8c\u68f5\u6811\u4e3a\u53f3\u6811\u3002\n\n\u6211\u4eec\u5148\u8003\u8651\u5224\u65ad\u65e0\u89e3\uff1a\u56e0\u4e3a\u6bcf\u4e2a\u5b50\u6811\u7684\u6743\u503c\u548c\u4e3a$1/-1$\uff0c\u800c\u5b83\u4eec\u90fd\u662f\u5947\u6570\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u5224\u65ad\u4e00\u4e2a\u76f8\u540c\u7684\u70b9\u5728\u5de6\u6811\u548c\u53f3\u6811\u4e2d**\u513f\u5b50\u6570\u91cf\u7684\u5947\u5076\u6027**\u662f\u5426\u76f8\u540c\uff0c\u5982\u679c\u4e0d\u540c\uff0c\u90a3\u4e48\u65e0\u89e3\u3002\n\n\u7531\u4e8e\u7275\u626f\u5230\u4e86\u513f\u5b50\u4e2a\u6570\u7684\u5947\u5076\u6027\uff0c\u53ef\u4ee5\u8f6c\u5316\u4e3a\u5ea6\u6570\u7684\u5947\u5076\u6027\uff08\u5982\u679c\u8981\u7528\u5ea6\u6570\u7684\u5947\u5076\u6027\u5224\u65ad\u522b\u5fd8\u4e86\u628a\u6839\u7684\u5ea6\u6570\u52a0\u4e00\uff09\uff0c\u5982\u679c\u4f60\u89c1\u8fc7\u7684\u9898\u6bd4\u8f83\u591a\uff0c\u5e94\u8be5\u53ef\u4ee5\u8fc5\u901f\u60f3\u5230\u6784\u9020\u4e00\u4e2a\u56fe\u5728\u4e0a\u9762\u8dd1\u6b27\u62c9\u56de\u8def\u3002\n\n\u5177\u4f53\u5730\uff0c\u6211\u4eec\u5bf9\u4e8e\u5ea6\u6570\u4e3a\u5076\u6570\u7684\u70b9\u4e0d\u7ba1\u5b83\u4eec\uff0c\u5bf9\u4e8e\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\uff0c\u6211\u4eec\u5c06\u5b83\u4eec\u5bf9\u5e94\u5de6\u6811\u548c\u53f3\u6811\u7684\u4e24\u4e2a\u70b9\u8fde\u8fb9\uff08\u4e0b\u6587\u79f0\u4f5c\u6a2a\u53c9\u8fb9\uff09\uff0c\u540c\u6837\u628a\u4e24\u4e2a\u6839\u7ed3\u70b9\u8fde\u4e00\u6761\u8fb9\u3002\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u56fe\u91cc\u6240\u6709\u70b9\u7684\u5ea6\u6570\u90fd\u662f\u5076\u6570\uff0c\u5373\u5b83**\u5b58\u5728\u6b27\u62c9\u56de\u8def**\u3002\n\n\u6211\u4eec**\u8dd1\u4e00\u904d\u6b27\u62c9\u56de\u8def**\uff0c\u5bf9\u4e8e\u5ea6\u6570\u4e3a\u5076\u6570\u7684\u70b9\uff0c\u6211\u4eec\u8bbe\u5b9a\u5b83\u7684\u6743\u503c\u4e3a$0$\uff0c\u5bf9\u4e8e\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u70b9\uff0c\u5982\u679c\u5b83\u5bf9\u5e94\u7684\u6a2a\u53c9\u8fb9\u5728\u6b27\u62c9\u56de\u8def\u4e0a\u7684\u65b9\u5411\u662f\u4ece\u5de6\u5f80\u53f3\uff0c\u90a3\u4e48\u6211\u4eec\u8bbe\u5b9a\u5b83\u7684\u6743\u503c\u4e3a$1$\uff0c\u5426\u5219\u4e3a$-1$\u3002\n\n\u8003\u8651\u8bc1\u660e\u8fd9\u79cd\u6784\u9020\u65b9\u6cd5\u7684\u6b63\u786e\u6027\uff1a\n\n\u6211\u4eec\u628a\u6b27\u62c9\u56de\u8def\u62c6\u6210\u82e5\u5e72\u4e2a\u7b80\u5355\u73af\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u73af\u5bf9\u67d0\u4e2a\u7ed3\u70b9\u7684\u8d21\u732e\uff0c\u6211\u4eec\u5206\u4e09\u7c7b\u60c5\u51b5\u8ba8\u8bba\uff1a\n\n- \u67d0\u4e2a\u8282\u70b9\u5f80\u513f\u5b50\u8d70\uff0c\u7136\u540e\u4ece\u513f\u5b50\u6216\u81ea\u5df1\u7684\u6a2a\u53c9\u8fb9\u56de\u6765\uff1b\n- \u67d0\u4e2a\u8282\u70b9\u5f80\u513f\u5b50\u8d70\uff0c\u7136\u540e\u4ece\u7236\u4eb2\u56de\u6765\uff1b\n- \u67d0\u4e2a\u8282\u70b9\u5f80\u6a2a\u53c9\u8fb9/\u7236\u4eb2\u8d70\uff0c\u7136\u540e\u4ece\u7236\u4eb2/\u6a2a\u53c9\u8fb9\u56de\u6765\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u7c7b\u73af\uff0c\u6211\u4eec\u53d1\u73b0\u4ece\u4e00\u9897\u6811\u5230\u53e6\u4e00\u9897\u6811\u4f1a\u8d21\u732e\u4e00\u6b21$1$\u4e5f\u8d21\u732e\u4e00\u6b21$-1$\uff0c\u4e14\u8fd9\u4e24\u6b21\u8d21\u732e\u90fd\u5728\u8fd9\u4e2a\u7ed3\u70b9\u4e2d\uff0c\u6240\u4ee5\u8fd9\u4e2a\u73af\u5bf9\u8fd9\u4e2a\u7ed3\u70b9\u65e0\u8d21\u732e\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u7c7b\u73af\u548c\u7b2c\u4e09\u7c7b\u73af\uff0c\u6211\u4eec\u53d1\u73b0\u8fd9\u4e2a\u73af\u53ea\u4f1a\u5bf9\u8be5\u7ed3\u70b9\u9020\u6210$1/-1$\u7684\u8d21\u732e\u3002\n\n\u8003\u8651\u7b2c\u4e8c\u7c7b\u73af\u548c\u7b2c\u4e09\u7c7b\u73af\u90fd\u8981\u7ecf\u8fc7\u7236\u4eb2\uff0c\u800c\u7236\u4eb2\u5230\u8be5\u8282\u70b9\u7684\u8fb9\u53ea\u80fd\u4e5f\u5fc5\u987b\u7ecf\u8fc7\u4e00\u6b21\uff0c\u56e0\u6b64**\u7b2c\u4e8c\u7c7b\u73af\u548c\u7b2c\u4e09\u7c7b\u73af\u6709\u4e14\u4ec5\u6709\u4e00\u4e2a**\u3002\n\n\u5bf9\u4e8e\u4e24\u68f5\u6811\u7684\u6839\uff1a\u6211\u4eec\u5c06\u4e24\u4e2a\u6839\u8fde\u8fb9\u5176\u5b9e\u7b49\u4ef7\u4e8e**\u5efa\u7acb\u4e00\u4e2a\u865a\u62df\u6839\uff0c\u6210\u4e3a\u5de6\u6811\u548c\u53f3\u6811\u6839\u7684\u7236\u4eb2**\u3002\u8fd9\u6837\uff0c\u5bf9\u4e8e\u539f\u6811\u7684\u6839\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u770b\u6210\u4e0a\u8ff0\u60c5\u51b5\uff0c\u5bf9\u4e8e\u865a\u62df\u6839\u5219\u4e0d\u9700\u8981\u8fdb\u884c\u8ba8\u8bba\uff08\u5b83\u7684\u6743\u503c\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff09\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u6bcf\u9897\u5b50\u6811\u7684\u6743\u503c\u548c\u7684\u7edd\u5bf9\u503c\u4fbf\u662f$1$\u4e86\u3002\n\n## \u4ee3\u7801\n\u6ce8\u610f\u6b27\u62c9\u56de\u8def\u9700\u8981\u7528\u5f53\u524d\u5f27\u4f18\u5316\uff08\u5176\u5b9e\u5c31\u662f\u5728$\\text{vector}$\u91cc$\\text{pop_back}$\uff09\n```\n#include<stdio.h>\n#include<vector>\nusing namespace std;\nconst int maxn=800005,maxm=800005;\nint n,rt1,rt2,cnt,flg;\nint deg1[maxn],deg2[maxn],used[maxn],ans[maxn],f[maxm],xx[maxm],yy[maxm];\nvector<int>v[maxn];\ninline void add(int x,int y,int fl){\n\tcnt++,v[x].push_back(cnt),v[y].push_back(cnt),xx[cnt]=x,yy[cnt]=y,f[cnt]=fl;\n}\nvoid dfs(int x){\n\twhile(!v[x].empty()){\n\t\tint i=v[x].back();\n\t\tv[x].pop_back();\n\t\tif(used[i]==0){\n\t\t\tint y=xx[i]^yy[i]^x;\n\t\t\tused[i]=1;\n\t\t\tif(f[i]==1)\n\t\t\t\tans[min(x,y)]=x<y? 1:-1;\n\t\t\tdfs(y);\n\t\t}\n\t}\n}\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tif(x==-1)\n\t\t\trt1=i;\n\t\telse add(i,x,0),deg1[i]++,deg1[x]++;\n\t}\n\tfor(int i=1;i<=n;i++){\n\t\tint x;\n\t\tscanf(\"%d\",&x);\n\t\tif(x==-1)\n\t\t\trt2=i;\n\t\telse add(n+i,n+x,0),deg2[i]++,deg2[x]++;\n\t}\n\tdeg1[rt1]++,deg2[rt2]++,add(rt1,n+rt2,0);\n\tfor(int i=1;i<=n;i++)\n\t\tif(deg1[i]%2!=deg2[i]%2){\n\t\t\tflg=1;\n\t\t\tbreak;\n\t\t}\n\tif(flg){\n\t\tputs(\"IMPOSSIBLE\");\n\t\treturn 0;\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tif(deg1[i]%2)\n\t\t\tadd(i,n+i,1);\n\tdfs(1);\n\tputs(\"POSSIBLE\");\n\tfor(int i=1;i<=n;i++)\n\t\tprintf(\"%d%c\",ans[i],i==n? '\\n':' ');\n\treturn 0;\n}\n```",
        "postTime": 1608380712,
        "uid": 35754,
        "name": "Verdandi",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT2675 \u3010[AGC018F] Two Trees\u3011"
    },
    {
        "content": "[\u70b9\u51fb\u6b64\u5904\u4ee5\u83b7\u5f97\u66f4\u4f73\u9605\u8bfb\u4f53\u9a8c](https://www.macesuted.cn/article/agc018f/)\n\n---\n\n[\u9898\u9762](https://atcoder.jp/contests/agc018/tasks/agc018_f)\n\n## \u9898\u610f\n\n\u6709\u4e24\u68f5\u5927\u5c0f\u4e3a $n$ \u7684\u6811\uff0c\u4e24\u68f5\u6811\u4e0a\u7f16\u53f7\u76f8\u540c\u7684\u8282\u70b9\u62e5\u6709\u76f8\u540c\u7684\u70b9\u6743\u3002\u73b0\u5728\u9700\u8981\u627e\u5230\u4e00\u79cd\u70b9\u6743\u5206\u914d\u65b9\u5f0f\u4ee5\u4f7f\u5f97\u4e24\u68f5\u6811\u4e0a\u4ee5\u4efb\u610f\u4e00\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u5185\u7684\u70b9\u6743\u548c\u7684\u7edd\u5bf9\u503c\u5747\u4e3a $1$\u3002\n\n$n \\le 10^5$\n\n## \u5206\u6790\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u7ed3\u70b9\uff0c\u5176\u6bcf\u4e2a\u5b69\u5b50\u7ed3\u70b9\u5747\u6ee1\u8db3\u5b50\u6811\u5185\u6743\u503c\u548c\u7684\u7edd\u5bf9\u503c\u4e3a $1$\uff0c\u5373\u6a21 $2$ \u610f\u4e49\u4e0b\u6743\u503c\u548c\u5747\u4e3a $1$\u3002\u800c\u8be5\u7ed3\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u6743\u503c\u548c\u6a21 $2$ \u610f\u4e49\u4e0b\u4e5f\u4e3a $1$\uff0c\u53ef\u4ee5\u501f\u6b64\u5224\u65ad\u51fa\u6bcf\u4e2a\u8282\u70b9\u7684\u70b9\u6743\u7684\u5947\u5076\u6027\u3002\n\n\u5bb9\u6613\u53d1\u73b0\u82e5\u540c\u4e00\u7f16\u53f7\u7684\u7ed3\u70b9\u5728\u4e24\u68f5\u6811\u5185\u7684\u5947\u5076\u6027\u4e0d\u540c\uff0c\u5219\u663e\u7136\u65e0\u89e3\uff0c\u8f93\u51fa `IMPOSSIBLE` \u5373\u53ef\u3002\u5bf9\u4e8e\u6ee1\u8db3\u4e0a\u8ff0\u6761\u4ef6\u7684\u60c5\u51b5\uff0c\u4e0b\u9762\u7684\u6784\u9020\u65b9\u6cd5\u53ef\u4ee5\u4fdd\u8bc1\u4e00\u5b9a\u6709\u89e3\uff1a\n\n1. \u5c06\u4e24\u68f5\u6811\u653e\u81f3\u540c\u4e00\u4e2a\u56fe\u5185\uff0c\u5e76\u4f7f\u7528\u4e00\u4e2a\u7ed3\u70b9\u8fde\u63a5\u4e24\u68f5\u6811\u7684\u6839\u8282\u70b9\uff0c\u4f7f\u56fe\u8054\u901a\u3002\n2. \u5bf9\u4e8e\u56fe\u4e0a\u7684\u6bcf\u4e00\u4e2a\u5ea6\u6570\u4e3a\u5947\u6570\u7684\u7ed3\u70b9\uff0c\u5c06\u5176\u4e0e\u53e6\u4e00\u68f5\u6811\u4e0a\u7f16\u53f7\u76f8\u540c\u7684\u7ed3\u70b9\u8fde\u8fb9\u3002\u7531\u4e8e\u6b64\u65f6\u4e00\u5b9a\u6ee1\u8db3\u4e24\u68f5\u6811\u4e0a\u7f16\u53f7\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u5947\u5076\u6027\u76f8\u540c\uff0c\u5373\u4e24\u68f5\u6811\u4e0a\u7f16\u53f7\u76f8\u540c\u7684\u7ed3\u70b9\u7684\u5ea6\u6570\u76f8\u540c\uff0c\u6b64\u64cd\u4f5c\u53ef\u4ee5\u8ba9\u8fde\u8fb9\u4e24\u7aef\u7684\u70b9\u7684\u5ea6\u6570\u540c\u65f6\u53d8\u4e3a\u5076\u6570\u3002\u4e0b\u9762\u5c06\u6b64\u6b65\u9aa4\u6dfb\u52a0\u7684\u8fb9\u6210\u4e3a\u7279\u6b8a\u8fb9\u3002\n3. \u7ecf\u8fc7\u4e0a\u8ff0\u64cd\u4f5c\u540e\uff0c\u8be5\u56fe\u53d8\u4e3a\u6240\u6709\u8282\u70b9\u5ea6\u6570\u5747\u4e3a\u5076\u6570\u7684\u65e0\u5411\u8fde\u901a\u56fe\uff0c\u5176\u4e00\u5b9a\u5b58\u5728\u6b27\u62c9\u56de\u8def\u3002\u8003\u8651\u6c42\u51fa\u4e00\u6761\u6b27\u62c9\u56de\u8def\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u6761\u7279\u6b8a\u8fb9\uff0c\u6839\u636e\u5176\u5728\u6b27\u62c9\u56de\u8def\u4e2d\u7ecf\u8fc7\u6b64\u8fb9\u7684\u65b9\u5411\uff0c\u5224\u65ad\u51fa\u6539\u8fb9\u4e24\u7aef\u8282\u70b9\u7f16\u53f7\u5bf9\u5e94\u7684\u70b9\u6743\u3002\uff08\u6bd4\u5982\u53ef\u4ee5\u4ee4\u4ece\u7b2c\u4e00\u68f5\u6811\u5230\u7b2c\u4e8c\u68f5\u6811\u987a\u5e8f\u5bf9\u5e94\u7684\u503c\u4e3a $1$\uff0c\u4ece\u7b2c\u4e8c\u68f5\u6811\u5230\u7b2c\u4e00\u68f5\u6811\u987a\u5e8f\u5bf9\u5e94\u7684\u503c\u4e3a $-1$\uff09\n4. \u5bf9\u4e8e\u6ca1\u6709\u5728 3 \u64cd\u4f5c\u4e2d\u6307\u5b9a\u70b9\u6743\u7684\u70b9\uff0c\u5c06\u5176\u70b9\u6743\u8d4b\u4e3a $0$\u3002\n\n\u63a5\u4e0b\u6765\u8bc1\u660e\u4e0a\u8ff0\u6784\u9020\u65b9\u6cd5\u6784\u9020\u51fa\u6765\u7684\u65b9\u6848\u4e00\u5b9a\u5408\u6cd5\u3002\n\n\u5bf9\u4e8e\u6811\u4e0a\u4efb\u610f\u4e00\u4e2a\u7ed3\u70b9\uff0c\u6b27\u62c9\u8def\u5f84\u8fdb\u51fa\u5176\u5b50\u6811\u6b21\u6570\u4e3a\u5076\u6570\u6b21\uff0c\u5176\u4e2d\u4e00\u6b21\u7ecf\u8fc7\u4ece\u8be5\u8282\u70b9\u4e0e\u5176\u7236\u4eb2\u7ed3\u70b9\u7684\u8fde\u8fb9\uff0c\u5176\u4f59\u5947\u6570\u6b21\u7ecf\u8fc7\u8be5\u8282\u70b9\u5b50\u6811\u5185\u7684\u7279\u6b8a\u8fb9\u3002\u7531\u4e8e\u8fdb\u51fa\u7279\u6b8a\u8fb9\u7684\u6b21\u6570\u7684\u5dee\u4e0d\u8d85\u8fc7 $1$\uff0c\u6240\u4ee5\u8be5\u8282\u70b9\u5b50\u6811\u70b9\u6743\u548c\u7edd\u5bf9\u503c\u4e00\u5b9a\u4e3a $1$\u3002\n\n\u56e0\u6b64\u8be5\u6784\u9020\u65b9\u6cd5\u80fd\u591f\u5f97\u51fa\u6b63\u786e\u7684\u7b54\u6848\u3002\n\n## \u4ee3\u7801\n\n[View on Github](https://github.com/Macesuted/Code/blob/main/AtCoder/agc018_f.cpp)\n\n```cpp\nvoid dfs(int p) {\n    while (!graph[p].empty()) {\n        int t = *graph[p].begin();\n        graph[p].erase(t), graph[t].erase(p);\n        if (p + n == t) a[p] = 1;\n        if (t + n == p) a[t] = -1;\n        dfs(t);\n    }\n    return;\n}\n\nint main() {\n    n = read<int>();\n    graph.resize(n * 2 + 1);\n    for (register int i = 1; i <= n; i++) {\n        int fa = read<int>();\n        fa = (fa == -1 ? 0 : fa);\n        graph[fa].insert(i), graph[i].insert(fa);\n    }\n    for (register int i = 1; i <= n; i++) {\n        int fa = read<int>();\n        fa = (fa == -1 ? 0 : fa + n);\n        graph[fa].insert(i + n), graph[i + n].insert(fa);\n    }\n    for (register int i = 1; i <= n; i++)\n        if (graph[i].size() % 2 != graph[i + n].size() % 2)\n            return putstr(\"IMPOSSIBLE\\n\"), 0;\n    putstr(\"POSSIBLE\\n\");\n    for (register int i = 1; i <= n; i++)\n        if (graph[i].size() % 2) graph[i].insert(i + n), graph[i + n].insert(i);\n    dfs(1);\n    for (register int i = 1; i <= n; i++) write(a[i]), putch(\" \\n\"[i == n]);\n    return 0;\n}\n```",
        "postTime": 1626530295,
        "uid": 98482,
        "name": "Macesuted",
        "ccfLevel": 0,
        "title": "AT2675"
    },
    {
        "content": "\u540c\u6b65\u53d1\u5e03\u4e8e\u6211\u7684\u535a\u5ba2[Two Trees](https://www.skyofwar.net/2019/05/23/157.html)\n\n\u5bf9\u4e8e\u6bcf\u68f5\u6811\uff0c\u90fd\u6ee1\u8db3\u6bcf\u4e2a\u70b9\u7684\u5b50\u6811\u70b9\u6743\u548c\u5728$\\bmod 2$\u610f\u4e49\u4e0b\u662f$1$\uff0c\u6240\u4ee5\u53ef\u4ee5\u4ece\u4e0b\u5f80\u4e0a\u9012\u63a8\u51fa\u6bcf\u4e2a\u70b9\u6743\u7684\u5947\u5076\u6027\u3002\u9700\u8981\u6ee1\u8db3\u6bcf\u4e2a\u70b9\u5728\u4e24\u68f5\u6811\u4e2d\u5947\u5076\u6027\u76f8\u540c\uff0c\u5426\u5219\u65e0\u89e3\u3002\n\n\u66f4\u5177\u4f53\u5730\uff0c\u5f53\u4e00\u4e2a\u70b9\u6709\u5076\u6570\u4e2a\u513f\u5b50\u65f6\u70b9\u6743$\\bmod 2 = 1$\uff0c\u6709\u5947\u6570\u4e2a\u513f\u5b50\u65f6\u70b9\u6743$\\bmod 2 = 0$\n\n\u6709\u8fd9\u4e48\u4e00\u79cd\u6784\u9020\u65b9\u6cd5\uff0c\u53ea\u8981\u4ee4\u5076\u6570\u70b9\u6743$ = 0$\uff0c\u5947\u6570\u70b9\u6743$ = +1$\u6216$-1$\u5373\u53ef\u6784\u9020\u51fa\u89e3\u3002\u5177\u4f53\u5982\u4e0b\uff08\u79f0\u70b9\u6743$\\bmod 2 = 1$\u7684\u70b9\u4e3a**\u5947\u70b9**\uff09\uff1a\n\u9009\u62e9\u4efb\u610f\u4e00\u4e2a\u5947\u70b9\u4e3a\u7279\u6b8a\u70b9\u3002\u5bf9\u4e8e\u4e24\u68f5\u6811\uff0c\u9996\u5148\u4ece\u4e0b\u5f80\u4e0a\u8fdb\u884c\u5339\u914d\n\u5339\u914d\u5230\u70b9$u$\u65f6\uff0c\u6bcf\u4e2a\u5b50\u6811\u4e2d\u4f1a\u591a\u51fa\u4e00\u4e2a\u5947\u70b9\uff0c\u5305\u62ec$u$\u672c\u8eab\uff0c\u5982\u679c\u662f\u5947\u70b9\u4e5f\u7b97\u5728\u5185\uff0c\u4f1a\u6709$2k + 1$\u4e2a\u5947\u70b9\u3002\u8fd9\u4e9b\u70b9\u53bb\u6389\u4efb\u610f\u4e00\u4e2a\u70b9\u4e4b\u540e\u5bf9\u4e8e\u5269\u4e0b\u7684\u70b9\uff0c\u4efb\u610f\u4e24\u4e24\u5339\u914d\u3002\u5982\u679c\u5339\u914d\u4e86$x$\u548c$y$\uff0c\u5c31\u8fde\u4e00\u6761\u65e0\u5411\u8fb9$(x, y)$\u3002\u88ab\u53bb\u6389\u7684\u70b9\u5c31\u662f\u8be5\u5b50\u6811\u591a\u51fa\u6765\u7684\u70b9\n\n\u8fdb\u884c\u4e86\u8fd9\u6837\u7684\u5339\u914d\u64cd\u4f5c\u540e\uff0c\u663e\u7136\u6709\uff1a\n1. \u4efb\u610f$u$\u7684\u5b50\u6811\u4e2d\u6709$2k + 1$\u4e2a\u5947\u70b9\uff0c\u5176\u4e2d\u6709k\u5bf9\u5947\u70b9\u4e24\u4e24\u5339\u914d\uff0c\u88ab\u53bb\u6389\u7684\u70b9\u5c31\u662f\u5728$u$\u5904\u5339\u914d\u65f6\u88ab\u53bb\u6389\u7684\u70b9\n2. \u7279\u6b8a\u70b9\u5728\u4e24\u68f5\u6811\u4e2d\u90fd\u6ca1\u6709\u53c2\u4e0e\u5339\u914d\uff0c\u5ea6\u6570$ = 0$\n3. \u975e\u7279\u6b8a\u70b9\u7684\u5947\u70b9\u5728\u4e24\u68f5\u6811\u4e2d\u90fd\u6070\u597d\u53c2\u4e0e\u4e00\u6b21\u5339\u914d\uff0c\u5ea6\u6570$ = 2$\n\n\u56fe\u7531\u82e5\u5e72\u4e2a\u73af\u6784\u6210\uff0c\u540c\u65f6\u4e00\u4e2a\u70b9\u8fde\u63a5\u7684\u4e24\u6761\u8fb9\u662f\u5728\u4e0d\u540c\u7684\u6811\u4e2d\u7684\u5339\u914d\uff0c\u6240\u4ee5\u6bcf\u4e2a\u73af\u90fd\u662f\u5076\u73af\uff0c\u8be5\u56fe\u662f\u4e8c\u5206\u56fe\u3002\u4ee4\u9ed1\u70b9\u6743\u503c$ = +1$\uff0c\u767d\u70b9\u6743\u503c$ = -1$\uff0c\u8fdb\u884c\u8fd9\u6837\u7684\u64cd\u4f5c\u540e\uff0c\u6bcf\u4e00\u5bf9\u5339\u914d\u7684\u70b9\u6743\u548c\u662f$0$\uff0c\u6bcf\u4e2a\u5b50\u6811\u7684\u70b9\u6743\u548c\u7531\u8be5\u5b50\u6811\u4e2d\u591a\u51fa\u6765\u7684\u70b9\u51b3\u5b9a\u3002\u663e\u7136\u4e5f\u5c31\u5b8c\u6210\u4e86\u6784\u9020\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal O(n)$\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 1e5 + 10;\nint n, f[MAXN], dis[MAXN];\ntemplate <class T>\ninline void _read(T &x)\n{\n\tx = 0;\n\tchar t = getchar();\n\twhile(!isdigit(t) && t != '-') t = getchar();\n\tif(t == '-')\n\t{\n\t\t_read(x);\n\t\tx *= -1;\n\t\treturn ;\n\t}\n\twhile(isdigit(t))\n\t{\n\t\tx = x * 10 + t - '0';\n\t\tt = getchar();\n\t}\n}\ninline int getfa(int x)\n{\n\tif(f[x] == x)\n\t\treturn x;\n\tint fx = getfa(f[x]);\n\tdis[x] ^= dis[f[x]];\n\treturn f[x] = fx;\n}\ninline void merge(int u, int v)\n{\n\tint x = getfa(u), y = getfa(v);\n\tif(x == y) return;\n\tdis[y] = (dis[v] ^ dis[u] ^ 1), f[y] = x;\n}\nstruct T\n{\n\tint root, head[MAXN], cnt, to[MAXN], nxt[MAXN], son[MAXN];\n\tinline void ae(int u, int v)\n\t{\n\t\t++cnt, to[cnt] = v, nxt[cnt] = head[u], head[u] = cnt;\n\t}\n\tinline void init()\n\t{\n\t\tfor(int i = 1, fa; i <= n; ++i)\n\t\t{\n\t\t\t_read(fa);\n\t\t\tif(fa == -1)\n\t\t\t\troot = i;\n\t\t\telse\n\t\t\t\tae(fa, i), ++son[fa];\n\t\t}\n\t}\n\tinline int work(int u)\n\t{\n\t\tvector<int> tp;\n\t\tfor(int i = head[u]; i; i = nxt[i])\n\t\t\ttp.push_back(work(to[i]));\n\t\tif(!(son[u] & 1))\n\t\t\ttp.push_back(u);\n\t\tsort(tp.begin(), tp.end());\n\t\tfor(int i = 1; i < tp.size(); i += 2)\n\t\t\tmerge(tp[i], tp[i + 1]);\n\t\treturn tp[0];\n\t}\n};\nT A, B;\nint main()\n{\n\t_read(n);\n\tA.init(), B.init();\n\tfor(int i = 1; i <= n; ++i)\n\t{\n\t\tf[i] = i, dis[i] = 0;\n\t\tif((A.son[i] & 1) != (B.son[i] & 1))\n\t\t{\n\t\t\tputs(\"IMPOSSIBLE\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tputs(\"POSSIBLE\");\n\tA.work(A.root), B.work(B.root);\n\tfor(int i = 1; i <= n; ++i)\n\t\tif(!(A.son[i] & 1))\n\t\t\tprintf(\"%d \", (getfa(i), dis[i]) ? +1 : -1);\n\t\telse\n\t\t\tprintf(\"%d \", 0);\n\treturn 0;\n}\n```",
        "postTime": 1558584081,
        "uid": 13290,
        "name": "sky_of_war",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT2675 \u3010Two Trees\u3011"
    },
    {
        "content": "\u9898\u76ee\uff1a[Two Trees](https://www.luogu.com.cn/problem/AT2675)\n\n\u611f\u89c9\u4e8c\u5206\u56fe\u7684\u9898\u89e3\u7a0d\u5fae\u663e\u5f97\u6bd4\u8f83\u5c11\uff0c\u7531\u4e8e\u6700\u8fd1\u672c\u849f\u84bb\u5728\u5b66\u4e8c\u5206\u56fe\uff0c\u5c31\u51b3\u5b9a\u6765\u7528\u4e8c\u5206\u56fe\u5199\u4e00\u4e0b\u8fd9\u9053\u9898\u3002\n\n\u548c\u5927\u5bb6\u7684\u601d\u8def\u4e00\u6837\uff0c\u90fd\u662f\u5bf9\u6bcf\u4e2a\u8282\u70b9\u513f\u5b50\u6570\u91cf\u7684\u5947\u5076\u6027\u5206\u7c7b\u8ba8\u8bba\u8fdb\u884c\u6784\u9020\u3002\n\n\u672c\u849f\u84bb\u7b2c\u4e00\u773c\u770b\u5230\u8fd9\u9053\u9898\u7684\u65f6\u5019\uff0c\u89c9\u5f97\u8fd9\u9053\u9898\u771f\u7684\u592a\u96be\u4e86\u3002\u4e8e\u662f\uff0c\u672c\u849f\u84bb\u51b3\u5b9a\u628a\u5b83\u6539\u7684\u7b80\u5355\u4e00\u70b9\u3002\u8bf7\u770b\uff1a\n\n- \u5982\u679c\u53ea\u6709\u4e00\u68f5\u6811\u7684\u8bdd\uff0c\u90a3\u6216\u8bb8\u7b80\u5355\u4e86\u4e00\u70b9\uff0c\u4f46\u5bf9\u4e8e\u672c\u849f\u84bb\u6765\u8bf4\u8fd8\u662f\u592a\u96be\u4e86\u3002\n\n- \u4e8e\u662f\uff0c\u672c\u849f\u84bb\u51b3\u5b9a\u518d\u5c06\u5b83\u53d8\u5f97\u7b80\u5355\u4e00\u70b9\uff0c\u5982\u679c\u8fd9\u68f5\u6811\u7684\u6df1\u5ea6\u4e3a\u4e8c\u7684\u8bdd\uff0c\u90a3\u8fd9\u9053\u9898\u4f3c\u4e4e\u5c31\u6ca1\u6709\u90a3\u4e48\u96be\u4e86\u3002\n\n**\u90a3\u5c31\u8ba9\u6211\u4eec\u4ece\u6700\u7b80\u5355\u7684\u60c5\u51b5\u5f00\u59cb\u601d\u8003\u3002**\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6df1\u5ea6\u4e3a\u4e8c\u7684\u6811\uff0c\u6211\u4eec\u9700\u8981\u505a\u7684\u5c31\u662f\u628a\u6839\u7684\u513f\u5b50\u4eec\u4e24\u4e24\u914d\u5bf9\uff0c\u6bcf\u4e00\u5bf9\u513f\u5b50\u90fd\u662f\u4e00\u4e2a\u6743\u503c\u4e3a $1$ \uff0c\u4e00\u4e2a\u4e3a $-1$ \uff1b\u5982\u679c\u6700\u540e\u6ca1\u6709\u5269\u4e0b\u5b69\u5b50\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u628a\u6839\u8282\u70b9\u7684\u6743\u503c\u8d4b\u4e3a $1$ \uff08\u6216\u8005 $-1$ \u968f\u4fbf\uff09\uff1b\u5982\u679c\u8fd8\u5269\u4e00\u4e2a\u5b69\u5b50\u7684\u8bdd\uff0c\u90a3\u4e48\u5c31\u628a\u6839\u8282\u70b9\u7684\u6743\u503c\u8d4b\u4e3a $0$ \u3002\n\n**\u90a3\u4e48\u95ee\u9898\u6765\u4e86\uff0c\u5982\u4f55\u8868\u793a\u4e24\u4e2a\u8282\u70b9\u7684\u201c\u914d\u5bf9\u201d\u5173\u7cfb\u5462\uff1f**\n\n\u4f60\u60f3\u554a\uff0c\u6709\u4e00\u5bf9\u8282\u70b9\uff0c\u4e00\u4e2a\u662f $1$ \uff0c\u4e00\u4e2a\u662f $-1$ \uff0c\u4e0d\u5c31\u662f\u76f8\u5f53\u4e8e\u662f\u4e24\u7c7b\u8282\u70b9\u5417\u3002\u800c\u5728\u4e24\u7c7b\u8282\u70b9\u4e4b\u95f4\u5b58\u5728\u4e00\u4e2a\u5173\u7cfb\uff0c\u90a3\u80af\u5b9a\u4f1a\u60f3\u5230\u7528\u4e8c\u5206\u56fe\u3002\u4e8e\u662f\u5c31\u53ef\u4ee5~~\u5c0f\u9898\u5927\u505a\u5730~~\u628a\u201c\u4e00\u5bf9\u201d\u7684\u513f\u5b50\u8282\u70b9\u8fde\u8d77\u6765\u3002\n\n**\u89e3\u51b3\u4e86\u8fd9\u4e2a\u95ee\u9898\uff0c\u90a3\u5c31\u8ba9\u6211\u4eec\u5347\u7ea7\u96be\u5ea6\uff0c\u5982\u679c\u53ea\u6709\u4e00\u68f5\u6811\u7684\u8bdd\uff0c\u90a3\u5e94\u8be5\u5982\u4f55\u6784\u9020\u4e00\u4e2a\u5408\u6cd5\u89e3\u5462\uff1f**\n\n\u8003\u8651\u6bcf\u4e2a\u8282\u70b9\uff0c\u5b83\u5fc5\u7136\u4f1a\u6709\u8bb8\u8bb8\u591a\u591a\u7684\u513f\u5b50\uff0c\u4f60\u53ef\u4ee5\u53d1\u6325\u60f3\u8c61\u529b\uff0c\u628a\u4ee5\u5b83\u7684\u6bcf\u4e00\u4e2a\u513f\u5b50\u4e3a\u6839\u8282\u70b9\u7684\u5b50\u6811\u60f3\u8c61\u6210\u4e00\u4e2a\u5927\u5927\u7684\u8282\u70b9\uff0c\u800c\u9898\u76ee\u4e2d\u89c4\u5b9a\u4e86\uff0c\u8fd9\u4e2a\u5927\u5927\u7684\u8282\u70b9\u603b\u6743\u503c\u4e00\u5b9a\u662f $1$ \u6216 $-1$ \u3002\n\n**\u90a3\u4e0d\u5c31\u662f\u4e0a\u9762\u90a3\u4e2a\u95ee\u9898\u4e86\u5417\u3002** \n\u6211\u4eec\u4e5f\u53ef\u4ee5\u540c\u6837\u5730\uff0c\u6309\u7167\u8282\u70b9\u7684\u513f\u5b50\u6570\u91cf\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff0c\u5e76\u628a\u201c\u4e00\u5bf9\u201d\u7684\u513f\u5b50\u8fde\u8d77\u6765\u3002\n\n\u7b49\u7b49\uff0c\u521a\u624d\u6211\u4eec\u53ef\u4ee5\u8fde\u8d77\u6765\uff0c\u662f\u56e0\u4e3a\u5b83\u7684\u201c\u513f\u5b50\u201d\u662f\u4e00\u4e2a\u4e2a\u8282\u70b9\uff1b\u73b0\u5728\u5462\uff0c\u5b83\u7684\u201c\u513f\u5b50\u201d\u662f\u4e00\u68f5\u68f5\u5b50\u6811\uff0c\u800c\u6811\u548c\u6811\u662f\u6ca1\u6cd5\u8fde\u8d77\u6765\u7684\u3002\n\n\u600e\u4e48\u529e\u5462\uff1f\n\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c**\u6211\u4eec\u5f15\u5165\u201c\u51b3\u5b9a\u70b9\u201d\u7684\u6982\u5ff5\u3002**\n\n\u7531\u4e8e\u6211\u4eec\u8fde\u8fb9\u7684\u76ee\u7684\u662f\u628a\u4e00\u5bf9\u201c $1$ \u5b50\u6811\u201d\u548c\u201c $-1$ \u5b50\u6811\u201d\u8fde\u8d77\u6765\uff0c\u90a3\u4e48\u6211\u4eec\u8003\u8651\u662f\u5426\u53ef\u4ee5\u7528\u4e00\u4e2a\u8282\u70b9\u7684\u6743\u503c\u6765\u4ee3\u8868\u4e00\u68f5\u5b50\u6811\u7684\u6743\u503c\u5462\uff1f\u8fd9\u6837\u6211\u4eec\u5c31\u53ef\u4ee5\u901a\u8fc7\u8fde\u63a5\u4e24\u4e2a\u201c\u51b3\u5b9a\u70b9\u201d\u6765\u8fde\u63a5\u4e24\u68f5\u5b50\u6811\u4e86\u3002\n\n\u8fd9\u4e0d\u5c31\u597d\u4e86\u5417\uff0c\u63a5\u4e0b\u6765\u7684\u95ee\u9898\u5c31\u662f\n**\u5982\u4f55\u6c42\u51fa\u4e00\u68f5\u5b50\u6811\u7684\u201c\u51b3\u5b9a\u70b9\u201d\u3002**\n\n\u8fd8\u662f\u8003\u8651\u5bf9\u513f\u5b50\u6570\u8fdb\u884c\u5206\u7c7b\u8ba8\u8bba\uff1a\n\n- \u5982\u679c\u662f\u5076\u6570\u4e2a\u513f\u5b50\u7684\u8bdd\uff0c\u90a3\u4e48\u5b83\u7684\u513f\u5b50\u4eec\u53ef\u4ee5\u4e24\u4e24\u914d\u5bf9\uff0c\u5c31\u62b5\u6d88\u4e86\uff0c\u6240\u4ee5\u4ee5\u5b83\u4e3a\u6839\u7684\u5b50\u6811\u7684\u201c\u51b3\u5b9a\u70b9\u201d\u5c31\u662f\u5b83\u672c\u8eab\u3002\n\n- \u5982\u679c\u662f\u5947\u6570\u4e2a\u513f\u5b50\u7684\u8bdd\uff0c\u4f1a\u6709\u4e00\u4e2a\u843d\u5355\u7684\u513f\u5b50\uff0c\u7531\u4e8e\u8282\u70b9\u672c\u8eab\u6743\u503c\u662f $0$ \uff0c\u5b83\u7684\u6240\u6709\u513f\u5b50\u4e2d\u9664\u53bb\u843d\u5355\u513f\u5b50\u52a0\u8d77\u6765\u4e5f\u662f $0$\uff0c\u6240\u4ee5\u4ee5\u8fd9\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u201c\u51b3\u5b9a\u70b9\u201d\u5c31\u662f\u843d\u5355\u513f\u5b50\u5b50\u6811\u7684\u51b3\u5b9a\u70b9\u3002\n\n\u7136\u540e\u6b63\u5e38\u8fde\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u89e3\u51b3\u4e86\u8fd9\u4e9b\uff0c\u4e24\u68f5\u6811\u8fd9\u4e2a\u95ee\u9898\u5c31\u7b80\u5355\u4e86\uff0c\u5bf9\u4e8e\u4e24\u68f5\u6811\u90fd\u6309\u7167\u6cd5\u5219\u52a0\u4e00\u6b21\u8fb9\u5c31\u53ef\u4ee5\u4e86\u3002\n\n\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u5f62\u6210\u7684\u56fe\u4f1a\u662f\u4e8c\u5206\u56fe\uff1f~~\u62b1\u6b49\u8bc1\u660e\u4e0d\u662f\u672c\u849f\u84bb\u7684\u5f3a\u9879~~\uff0c~~\u611f\u6027\u5730~~\u89e3\u91ca\u4e00\u4e0b\u5c31\u662f\uff0c\u540c\u4e00\u68f5\u6811\u5185\uff0c\u7531\u4e8e\u4e00\u68f5\u5b50\u6811\u7684\u201c\u51b3\u5b9a\u70b9\u201d\u53ea\u4f1a\u88ab\u5f15\u7528\u4e00\u6b21\uff0c\u4e5f\u5c31\u662f\u8fde\u4e00\u6b21\u8fb9\uff0c\u6240\u4ee5\u4e00\u4e2a\u8282\u70b9\u7684\u5ea6\u6570\u4e00\u5b9a\u662f $1$ \uff1b\u589e\u52a0\u4e86\u4e00\u68f5\u6811\u4e86\u4e4b\u540e\uff0c\u8981\u5f62\u6210\u73af\u5c31\u53ea\u80fd\u4ece\u53e6\u4e00\u68f5\u6811\u4e0a\u7684\u4fe1\u606f\u8fde\u4e00\u6761\u8fb9\u8fc7\u6765\uff0c\u6240\u4ee5\u4e0d\u4f1a\u662f\u5947\u73af\uff0c\u6839\u636e\u4e8c\u5206\u56fe\u7684\u5224\u5b9a\uff0c\u8fd9\u4e2a\u56fe\u4e00\u5b9a\u4f1a\u662f\u4e8c\u5206\u56fe\u3002~~\u6211\u53ea\u80fd\u626f\u5230\u8fd9\u91cc\u4e86\u2026\u2026~~\n\n\u4e0a\u4ee3\u7801([AC\u8bb0\u5f55](https://www.luogu.com.cn/record/54991186))\n\n```cpp\n#include<cstdio>\n#include<cstring>\n//#define zczc\nusing namespace std;\nconst int N=100010;\ninline void read(int &wh){\n    wh=0;int f=1;char w=getchar();\n    while(w<'0'||w>'9'){if(w=='-')f=-1;w=getchar();}\n    while(w<='9'&&w>='0'){wh=wh*10+w-'0';w=getchar(); }\n    wh*=f;return;\n}\n\nint m;\nbool odd[N],odd2[N];//\u5728\u4e24\u68f5\u6811\u4e2d\u67d0\u4e2a\u8282\u70b9\u7684\u5b69\u5b50\u6570\u91cf\u662f\u5426\u4e3a\u5947\u6570 \n\n//graph\u4e2d\u662f\u4e8c\u5206\u56fe\u90e8\u5206 \nnamespace graph{\n\tstruct edge{\n\t\tint t,next;\n\t}e[N<<1];\n\tint head[N],esum;\n\tinline void add(int fr,int to){\n\t\tesum++;\n\t\te[esum].t=to;\n\t\te[esum].next=head[fr];\n\t\thead[fr]=esum;\n\t\treturn;\n\t}\n\tbool vis[N],black[N];\n\t//\u4e8c\u5206\u56fe\u6807\u8bb0\u989c\u8272 \n\tvoid dfs(int wh,bool color){\n\t\tvis[wh]=true;\n\t\tblack[wh]=color;\n\t\tfor(int i=head[wh],th;i;i=e[i].next){\n\t\t\tth=e[i].t;\n\t\t\tif(vis[th])continue;\n\t\t\tdfs(th,!color);\n\t\t}\n\t\treturn;\n\t}\n}\n//tree\u4e2d\u662f\u6811\u7684\u90e8\u5206\n//\u4e2a\u4eba\u611f\u89c9\u5206\u5f00\u6765\u5199\u8981\u6e05\u6670\u4e00\u4e9b \nnamespace tree{\n\tstruct edge{\n\t\tint t,next;\n\t}e[N];\n\tint head[N],esum;\n\tinline void add(int fr,int to){\n\t\tesum++;\n\t\te[esum].t=to;\n\t\te[esum].next=head[fr];\n\t\thead[fr]=esum;\n\t\treturn;\n\t}\n\tint decide[N];//\u6807\u8bb0\u6bcf\u4e2a\u8282\u70b9\u4e3a\u6839\u7684\u5b50\u6811\u7684\u201c\u51b3\u5b9a\u70b9\u201d \n\tbool second;\n\tvoid dfs(int wh){\n\t\tbool oddnum=false;//\u52a8\u6001\u663e\u793a\u5b69\u5b50\u6570\u91cf\u7684\u5947\u5076\u6027 \n\t\tint son=0,last=0;//son\u662f\u843d\u5355\u7684\u5b69\u5b50\uff0clast\u662f\u65b9\u4fbf\u201c\u914d\u5bf9\u201d\u5b69\u5b50\u7528\u7684 \n\t\tfor(int i=head[wh];i;i=e[i].next){\n\t\t\toddnum=!oddnum;\n\t\t\tdfs(e[i].t);\n\t\t\tson=e[i].t;\n\t\t\tif(last==0)last=e[i].t;\n\t\t\telse{\n\t\t\t\tgraph::add(decide[last],decide[e[i].t]);\n\t\t\t\tgraph::add(decide[e[i].t],decide[last]);\n\t\t\t\tlast=0;\n\t\t\t}\n\t\t}\n\t\tif(second)odd2[wh]=oddnum;\n\t\telse odd[wh]=oddnum;\n\t\t//\u5982\u679c\u6709\u5947\u6570\u4e2a\u5b69\u5b50\u5c31\u53d6\u51b3\u4e8e\u843d\u5355\u7684\u5b69\u5b50 \n\t\tif(oddnum)decide[wh]=decide[son];\n\t\t//\u5982\u679c\u6709\u5076\u6570\u4e2a\u5b69\u5b50\u5c31\u81ea\u5df1\u51b3\u5b9a \n\t\telse decide[wh]=wh;\n\t\treturn;\n\t}\n\tvoid solve(){\n\t\t//\u8f93\u5165\uff0c\u6ca1\u4ec0\u4e48\u597d\u8bf4\u7684 \n\t\tread(m);\n\t\tint s1,root;\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tread(s1);\n\t\t\tif(s1==-1)root=i;\n\t\t\telse add(s1,i);\n\t\t}\n\t\tdfs(root); \n\t\tmemset(head,0,sizeof(head));\n\t\tesum=0;\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tread(s1);\n\t\t\tif(s1==-1)root=i;\n\t\t\telse add(s1,i);\n\t\t}\n\t\tsecond=true;\n\t\tdfs(root);\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tif(odd[i]!=odd2[i]){\n\t\t\t\tprintf(\"IMPOSSIBLE\\n\");\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tprintf(\"POSSIBLE\\n\");\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tif(graph::vis[i])continue;\n\t\t\tgraph::dfs(i,true);\n\t\t}\n\t\tfor(int i=1;i<=m;i++){\n\t\t\tif(odd[i])printf(\"0 \");\n\t\t\telse{\n\t\t\t\tif(graph::black[i])printf(\"1 \");\n\t\t\t\telse printf(\"-1 \");\n\t\t\t}\n\t\t}\n\t\treturn;\n\t}\n}\n\nsigned main(){\n\t\n\t#ifdef zczc\n\tfreopen(\"in.txt\",\"r\",stdin);\n\t#endif\n\t\n\ttree::solve();\n\t\n\treturn 0;\n}\n```\n\n\u672c\u849f\u84bb\u5199\u4e86\u5dee\u4e0d\u591a\u4e00\u4e2a\u5c0f\u65f6\uff0c\u7ba1\u7406\u5458\u6c42\u8fc7\uff0c\u8c22\u8c22\u5566\u3002\n\n\u6ce8\uff1a\u5148\u524d\u6ca1\u6ce8\u610f $\\LaTeX$ \u7684\u4f7f\u7528\uff0c\u62b1\u6b49\u5566\uff0c\u672c\u849f\u84bb\u4e0b\u6b21\u4e00\u5b9a\u6ce8\u610f\u3002",
        "postTime": 1628083795,
        "uid": 302383,
        "name": "Feyn",
        "ccfLevel": 0,
        "title": "AT2675"
    },
    {
        "content": "\u8fd9\u4e2a\u662f\u4e00\u9053\u795e\u4ed9\u6b27\u62c9\u56de\u8def\u9898\n\n\u9996\u5148\u8003\u8651\u95ee\u9898\u662f\u5426\u6709\u89e3\uff0c\u6bcf\u79d1\u5b50\u6811\u7684\u6743\u503c\u7edd\u5bf9\u503c\u5747\u4e3a1\uff0c\u5229\u7528\u8fd9\u4e00\u70b9\u4fbf\u53ef\u4ee5\u6c42\u51fa\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\u7684\u5947\u5076\u6027\uff0c\u51fa\u73b0\u77db\u76fe\u5c31\u53ef\u4ee5\u5224impossible\u4e86\n\n\u5224\u65ad\u4e3a\u6709\u89e3\u4e4b\u540e\u5c31\u53ef\u4ee5\u8fdb\u884c\u6784\u9020\u4e86\n\n\u6b27\u62c9\u56de\u8def\u6709\u4e00\u4e2a\u6027\u8d28\uff0c\u5c31\u662f\u51fa\u8fb9\u4e0e\u5165\u8fb9\u6570\u76f8\u7b49\uff0c\u5229\u7528\u8fd9\u4e2a\u6027\u8d28\u8fdb\u884c\u6784\u9020\n\n\u5c06\u4e24\u9897\u6811\u7684\u6839\u8282\u70b9\u8fde\u63a5\u5230\u4e00\u4e2a\u865a\u8282\u70b9\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u5947\u70b9\uff0c\u5c06\u5176\u4ece\u5de6\u6811\u8fde\u5230\u53f3\u6811\n\n\u6240\u6709\u5076\u70b9\u8d4b\u503c\u4e3a0\uff1b\u81f3\u4e8e\u5947\u70b9\uff0c\u5982\u679c\u5728\u6b27\u62c9\u56de\u8def\u4e2d\u5982\u679c\u662f\u4ece\u5de6\u6811\u8d70\u5230\u53f3\u6811\uff0c\u5c31\u8d4b\u503c\u4e3a1\uff0c\u5426\u5219\u8d4b\u503c\u4e3a-1\n\n\u8fd9\u6837\u5b50\u5bf9\u4e8e\u5de6\u6811\u4e0a\u4e00\u4e2a\u70b9\u7684\u5b50\u6811\u7684\u70b9\u6743\u548c\uff0c\u9664\u4e86\u7236\u8fb9\u4e4b\u5916\uff0c\u6bcf\u4e00\u6761\u5165\u8fb9\u6709-1\u7684\u8d21\u732e\uff0c\u6bcf\u4e00\u6761\u51fa\u8fb9\u6709\u4e00\u4e2a1\u7684\u8d21\u732e\uff0c\u5b50\u6811\u548c\u4e3a1\u6216-1.\u53f3\u6811\u540c\u7406\n\nTalk is treap,show you the code\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nint read(){\n    int c=0,nx,sign=1;\n    do{\n        nx=getchar()-'0';\n        if(nx=='-'-'0')\n            sign=-1;\n    }while(nx<0 or nx>9);\n    while(nx>=0 and nx<=9){\n        c=c*10+nx;\n        nx=getchar()-'0';\n    }\n    return sign*c;\n}\ntemplate<typename T>\nvoid write(T x){\n\tif(x<0)\n\t\tputchar('-'),x=-x;\n\tif(x>9)\n\t\twrite(x/10);\n\tputchar(x%10+48);\n}\nconst int  N=5e5+100,M=6*N;\nint head[N],next[M],ver[M];\ninline void addEdge(int u,int v){\n    static int now=1;\n    ++now;\n    next[now]=head[u];\n    ver[now]=v;\n    head[u]=now;\n}\nint n;\nint cnt[N];\nint fa[N],vis[N];\nint ans[N];\nint c[M],top;\nint s[M][2],t;\n\n//dfs\u6c42\u6b27\u62c9\u8def\uff0c\u6ce8\u610f\u67094\u4e2a\u70b9\u4f1a\u9012\u5f52\u592a\u6df1\u7206\u6389\uff0c\u6240\u4ee5\u8981\u624b\u5199\u6808\nvoid dfs(int u){\n\ts[++t][0]=u;\n\ts[t][1]=1;\n\twhile(t){\n\t\tu=s[t][0];\n\t\tint flag=1;\n\t\tswitch(s[t][1]){\n\t\t\tcase 1:\n\t\t\t\tfor(int i=head[u];i;i=next[i]){\n\t\t\t        if(vis[i])\n\t\t\t            continue;\n\t\t\t        vis[i]=vis[i^1]=1;\n\t\t\t        head[u]=next[i];\n\t\t\t        flag=0;\n\t\t\t        s[++t][0]=ver[i];\n\t\t\t\t\ts[t][1]=1;\n\t\t\t        break;\n\t\t\t    }\n\t\t\t    if(flag)\n\t\t\t    \ts[t][1]=2;\n\t\t\t    break;\n\t\t\tcase 2:\n\t\t\t\tc[top++]=u;\n\t\t\t\t--t;\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nint main(){\n    n=read();\n    int u,v,s=2*n+1;\n    for(int i=1;i<=n;i++){\n        u=read();\n        if(u==-1)\n            u=s;\n        cnt[u]++;\n        addEdge(u,i);\n        addEdge(i,u);\n    }\n    for(int i=1;i<=n;i++){\n        u=read();\n        if(u==-1)\n            u=s;\n        else\n            u=s-u;\n        ++cnt[u];\n        v=s-i;\n        addEdge(u,v);\n        addEdge(v,u);\n    }\n    \n    for(int i=1;i<=2*n;i++)\n        cnt[i]=!(cnt[i]&1);\n    cnt[s]=0;\n    \n    for(int i=1;i<=n;i++){\n        if(cnt[i]^cnt[s-i]){\n            puts(\"IMPOSSIBLE\");\n            return 0;\n        }\n        if(cnt[i])\n            addEdge(i,s-i),addEdge(s-i,i);\n    }\n    \n    dfs(1);\n    for(int i=top-1;i>=1;i--){\n    \tif(c[i]==s-c[i-1]){\n    \t\tint u=c[i];\n    \t\tif(u<=n)\n    \t\t\tans[u]=1;\n    \t\telse\n    \t\t\tans[s-u]=-1;\n        }\n    }\n    \n    puts(\"POSSIBLE\");\n    for(int i=1;i<=n;i++)\n        write(ans[i]),putchar(' ');\n    putchar('\\n');\n}\n```\n",
        "postTime": 1564318044,
        "uid": 144732,
        "name": "Alear",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 AT2675 \u3010Two Trees\u3011"
    },
    {
        "content": "*tag:\u6784\u9020\uff0c\u6b27\u62c9\u56de\u8def*\n\n---\n### \u9898\u610f\n\n\u7ed9\u5b9a\u4e24\u4e2a\u70b9\u6570\u5747\u4e3a $n$ \u7684\u6709\u6839\u6811\uff0c\u7ed9\u6807\u53f7\u8d4b\u503c\u4f7f\u5f97\u4e24\u68f5\u6811\u4e0a\u4efb\u610f\u4e00\u4e2a\u5b50\u6811\u548c\u5747\u4e3a $1$ \u6216 $-1$\n\n---\n### \u4e00\u68f5\u6811\n\n\u9996\u5148\u53ea\u8003\u8651\u4e00\u68f5\u6811\uff0c\u663e\u7136\u53ef\u4ee5\u76f4\u63a5\u4ece\u53f6\u5b50\u5f80\u4e0a\u6784\u9020\u3002\u4f46\u662f\u4e3a\u4e86\u65b9\u4fbf\u63a8\u5e7f\u5230\u4e24\u68f5\u6811\uff0c\u8003\u8651\u627e\u51fa\u4e00\u4e2a\u7b49\u4ef7\u8fc7\u7a0b\u3002\n\n\u7531\u4e8e\u4e00\u4e2a\u5b50\u6811\u5bf9\u7236\u4eb2\u7684 $sz$ \u7684\u8d21\u732e\u53ea\u6709 $1,-1$\uff0c\u6240\u4ee5\u8003\u8651\u7ed9\u6811\u8fb9\u5b9a\u5411\u3002\u513f\u5b50\u6307\u5411\u7236\u4eb2\u4ee3\u8868\u8d21\u732e\u4e3a $1$\uff0c\u53cd\u8fc7\u6765\u4ee3\u8868\u8d21\u732e\u4e3a $-1$\u3002\n\n\u7531\u4e8e\u6574\u4e2a\u6811\u7684\u6743\u503c\u548c\u4e5f\u8981\u4e3a $1$ \u6216 $-1$\uff0c\u6240\u4ee5\u53ef\u4ee5\u65b0\u5efa\u4e00\u4e2a\u6839 $0$\uff0c\u7136\u540e $0$ \u8fde\u5411\u5f53\u524d\u6839\uff0c\u5bf9\u8fd9\u6761\u8fb9\u7684\u5b9a\u5411\u5c31\u5bf9\u5e94\u7740\u6574\u68f5\u6811\u7684\u8d21\u732e\u3002\n\n\u6240\u4ee5\u5148\u7ed9\u6240\u6709\u8fb9\u5b9a\u5411(\u53ef\u4ee5\u968f\u673a\u5b9a)\u3002\u5bf9\u4e8e\u4e00\u6761\u513f\u5b50\u6307\u5411\u7236\u4eb2\u7684\u8fb9\uff0c\u5c31\u628a\u513f\u5b50 $+1$\uff0c\u7236\u4eb2 $-1$\uff0c\u8fd9\u6837\u5b50\u6811\u5927\u5c0f\u6539\u53d8\u7684\u53ea\u6709\u4ee5\u513f\u5b50\u4e3a\u6839\u7684\u4e00\u4e2a\u5b50\u6811\uff0c\u53cd\u8fc7\u6765\u540c\u7406\u3002\n\n\u5b9e\u9645\u4e0a\u5c31\u662f\u5b9a\u5411\u5b8c\u540e\uff0c$a_i=$ \u51fa\u5ea6-\u5165\u5ea6\u3002\n\n---\n### \u4e24\u68f5\u6811\n\u5230\u4e86\u4e24\u68f5\u6811\u7684\u65f6\u5019\uff0c\u95ee\u9898\u6765\u4e86\uff0c\u5982\u4f55\u4fdd\u8bc1\u5bf9\u4e24\u68f5\u6811\u5b9a\u5411\u540e\u7684 $a_i=b_i$ \u5462\uff1f\u76f4\u63a5\u6784\u9020\u7684\u8bdd\u5b9e\u9645\u4e0a\u662f\u4e0d\u597d\u8003\u8651\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u518d\u52a0\u4e00\u4e9b\u8fb9\u3002\n\n\u9996\u5148\u5982\u679c\u4e24\u68f5\u6811\u4e0a\u67d0\u4e2a\u6807\u53f7\u5bf9\u5e94\u7684\u4e24\u4e2a\u70b9\uff0c\u5ea6\u6570\u7684\u5947\u5076\u6027\u4e0d\u4e00\u6837\uff0c\u90a3\u4e48\u4e00\u5b9a\u65e0\u89e3\u3002\n\n\u6240\u4ee5\u67d0\u4e2a\u6807\u53f7\u5bf9\u5e94\u7684\u4e24\u4e2a\u70b9\uff0c\u5ea6\u6570\u7684\u5947\u5076\u6027\u76f8\u540c\uff1b\u5982\u679c\u5ea6\u6570\u4e3a\u5947\u6570\uff0c\u5c31\u628a\u8fd9\u4e24\u4e2a\u70b9\u8fde\u8d77\u6765\u3002\n\n\u8fd9\u6837\u5f97\u5230\u7684\u65b0\u56fe\u6ee1\u8db3\uff0c\u8fde\u901a\uff08\u4e24\u4e2a $0$ \u8282\u70b9\u4e4b\u95f4\u4e00\u5b9a\u6709\u8fde\u8fb9\uff09\uff0c\u800c\u4e14\u6240\u6709\u70b9\u5ea6\u6570\u5747\u4e3a\u5076\u6570\uff0c\u4e5f\u5c31\u662f\u8bf4\u5b58\u5728\u6b27\u62c9\u56de\u8def\u3002\u800c\u6839\u636e\u6b27\u62c9\u56de\u8def\u7684\u6027\u8d28\uff0c\u6bcf\u4e2a\u70b9\u7684\u5165\u5ea6\u90fd\u7b49\u4e8e\u51fa\u5ea6\u3002\u4e8e\u662f\u5982\u679c\u6309\u7167\u6b27\u62c9\u56de\u8def\u53bb\u5b9a\u5411\uff0c\u6bcf\u4e2a\u70b9\u7684\u70b9\u6743\u5c31\u90fd\u4e3a $0$\uff0c\u81ea\u7136\u5c31\u6ee1\u8db3\u76f8\u7b49\u4e86\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n \ntemplate<typename T>\ninline void Read(T &n){\n    char ch; bool flag=false;\n    while(!isdigit(ch=getchar()))if(ch=='-')flag=true;\n    for(n=ch^48;isdigit(ch=getchar());n=(n<<1)+(n<<3)+(ch^48));\n    if(flag)n=-n;\n}\n\nenum{\n\tMAXN = 100005\n};\n\nint n;\n\nstruct road{int u, v;}e[MAXN*3];\nint ecnt;\n\nvector<int>to[MAXN<<1];\nint d[MAXN<<1];\n\ninline void Add_Edge(int u, int v){\n\te[++ecnt] = (road){u,v};\n\tto[u].push_back(ecnt);\n\tto[v].push_back(ecnt);\n\td[u]++; d[v]++;\n}\n\nchar vis[MAXN*3];\nint ans[MAXN];\nvoid dfs(int x){\n\twhile(!to[x].empty()){\n\t\tint u = to[x].back();\n\t\tto[x].pop_back();\n\t\tif(vis[u]) continue;\n\t\tvis[u] = true;\n\t\tint v = x==e[u].v?e[u].u:e[u].v;\n\t\tif(u>2*n)\n\t\t\tif(x>v) ans[v] = 1;\n\t\t\telse ans[x] = -1;\n\t\tdfs(v);\n\t}\n}\n\nint main(){\n\tRead(n);\n\tfor(register int i=1; i<=n; i++){\n\t\tint fa; Read(fa);\n\t\tif(fa==-1) Add_Edge(n+1,i);\n\t\telse Add_Edge(fa,i);\n\t}\n\tfor(register int i=1; i<=n; i++){\n\t\tint fa; Read(fa);\n\t\tif(fa==-1) Add_Edge(n+1+n+1,i+n+1);\n\t\telse Add_Edge(fa+n+1,i+n+1);\n\t}\n\tfor(register int i=1; i<=n+1; i++){\n\t\tif((d[i]^d[i+n+1])&1) return puts(\"IMPOSSIBLE\"), 0;\n\t\tif(d[i]&1) Add_Edge(i,i+n+1);\n\t}\n\tdfs(1);\n\tputs(\"POSSIBLE\");\n\tfor(register int i=1; i<=n; i++) printf(\"%d \",ans[i]);puts(\"\");\n\treturn 0;\n}\n```",
        "postTime": 1619768410,
        "uid": 56825,
        "name": "oisdoaiu",
        "ccfLevel": 9,
        "title": "[AGC018F] Two Trees"
    },
    {
        "content": "\u8c01\u80fd\u6559\u6211\u600e\u4e48\u505a\u6784\u9020\u9898\u554a/ll\n\n\u89c2\u5bdf\u9898\u76ee\u6027\u8d28\uff0c\u6bcf\u4e2a\u5b50\u6811\u548c\u662f $-1$ \u6216 $1$\uff0c\u8fd9\u4e24\u4e2a\u503c\u90fd\u662f\u5947\u6570\uff0c\u8fd9\u542f\u793a\u6211\u4eec\u4e00\u4e2a\u70b9\u7684\u6743\u503c\u7684\u5947\u5076\u6027\u53ea\u53d6\u51b3\u4e8e\u5b83\u7684\u513f\u5b50\u4e2a\u6570\uff0c\u90a3\u4e48\uff0c\u82e5\u4e24\u68f5\u6811\u4e2d\u6709\u4e00\u4e2a\u70b9\u6743\u503c\u7684\u5947\u5076\u6027\u4e0d\u540c\uff0c\u5c31\u53ef\u4ee5\u5224\u5b9a\u65e0\u89e3\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u5c31\u76f4\u63a5\u7528 $-1,0,1$ \u6784\u9020\u8bc1\u660e\u5b83\u5176\u4ed6\u60c5\u51b5\u4e0b\u90fd\u6709\u89e3\uff1a\uff08\u95ee\u9898\u6765\u4e86\uff0c\u8c01\u6559\u6211\u60f3\u5230\u8fd9\u79cd\u6784\u9020\u554a\uff09\n\n\u5982\u679c\u4e00\u4e2a\u70b9\u7684\u5ea6\u6570\u662f\u5947\u6570\uff0c\u90a3\u4e48\u6211\u4eec\u663e\u7136\u6700\u7ec8\u586b0\uff0c\u6240\u4ee5\u4e0d\u7528\u7ba1\u5b83\u3002\u4f46\u4e3a\u4e86\u8ba9\u5b50\u6811\u548c\u662f $1$ \u6216 $-1$\uff0c\u6211\u4eec\u5c06\u5b83\u5b50\u6811\u4e2d\u7684\u8fd8\u6ca1\u6709\u5339\u914d\u7684**\u6743\u503c\u4e3a\u5947\u6570**\u7684\u70b9\u5c3d\u91cf\u4e24\u4e24\u5339\u914d\uff08\u4e8b\u5b9e\u4e0a\uff0c\u5339\u914d\u7684\u610f\u601d\u5c31\u662f\u6700\u540e\u4e00\u4e2a\u586b $1$ \u4e00\u4e2a\u586b $-1$\uff09\uff0c\u663e\u7136\uff0c\u8fd9\u6837\u64cd\u4f5c\u4e4b\u540e\uff0c\u6bcf\u4e2a\u5b50\u6811\u6700\u591a\u5269\u4e0b $1$ \u4e2a\u672a\u5339\u914d\u7684\u70b9\u3002\n\n\u82e5\u4e00\u4e2a\u70b9\u7684\u5ea6\u6570\u662f\u5076\u6570\uff0c\u6211\u4eec\u5c31\u8ba9\u5b83\u5b50\u6811\u5185\uff08\u9664\u4e86\u5b83\u81ea\u5df1\uff09\u6743\u503c\u4e3a\u5947\u6570\u7684\u672a\u5339\u914d\u70b9\u4e24\u4e24\u5339\u914d\u3002\n\n\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6837\u6784\u9020\u7684\u8bdd\uff0c\u6bcf\u4e2a\u5b50\u6811\u90fd\u4f1a\u7559\u4e0b\u4e00\u4e2a\u672a\u5339\u914d\u7684\u70b9\u3002\n\n\u7136\u540e\uff0c\u6211\u4eec\u76f4\u63a5\u628a\u5339\u914d\u7684\u70b9\u8fde\u8fb9\uff0c\u628a\u4e24\u68f5\u6811\u7684\u56fe\u76f4\u63a5\u5408\u5e76\u540e\u9ed1\u767d\u67d3\u8272\u5373\u53ef\u3002\n\nwtf\uff0c\u4e3a\u5565\u80fd\u8fd9\u6837\uff1f\n\n\u8fd9\u5176\u5b9e\u662f\u8981\u6c42\u8bc1\u660e\u5408\u5e76\u540e\u7684\u56fe\u662f\u4e8c\u5206\u56fe\u3002\n\n\u4f60\u8003\u8651\u5728\u4e00\u68f5\u6811\u4e2d\uff0c\u4e00\u4e2a\u70b9\u53ea\u4f1a\u8fde\u4e00\u6761\u8fb9\u51fa\u53bb\uff0c\u90a3\u4e48\u5982\u679c\u6210\u73af\uff0c\u663e\u7136\u53ea\u80fd\u662f\u4ece\u53e6\u4e00\u68f5\u6811\u4e0a\u8fde\u56de\u6765\u3002\u8fd9\u6837\u7684\u8bdd\uff0c\u56fe\u5c31\u4e0d\u53ef\u80fd\u5b58\u5728\u5947\u73af\u4e86\uff0c\u6240\u4ee5\u5b83\u662f\u4e8c\u5206\u56fe\u3002\n\n\u4e8e\u662f\u8fd9\u9898\u5c31\u505a\u5b8c\u4e86\u3002\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define int long long\nint read(){\n\tint a=0,fh=1;char c=getchar();\n\twhile(c>'9'||c<'0'){if(c=='-')fh=-1;c=getchar();}\n\twhile('0'<=c&&c<='9'){\n\t\ta=a*10+c-48;\n\t\tc=getchar();\n\t}\n\treturn a*fh;\n}\n#define MN 200005\n#define pii pair<int,int>\n#define mp make_pair\n#define x first\n#define y second\n#define pb push_back\n#define vc vector\nint n,cnt,head[MN],nxt[MN<<1],to[MN<<1];;\nint a[MN];\nvoid ADD(int x,int y){\n\tto[++cnt]=y;nxt[cnt]=head[x];head[x]=cnt;\n}\nvoid add(int x,int y){\n//\tcerr<<\"edg: \"<<x<<\" \"<<y<<endl;\n\tADD(x,y);ADD(y,x);\n}\nstruct Tree{\n\tint rt,fa[MN];\n\tvc<int> e[MN];\n\tvc<int> st;\n\tvoid dfs(int x,int lst){\n\t//\tcerr<<\"dfs: \"<<x<<\" \"<<fa[x]<<\" \"<<e[x].size()<<endl;\n\t\tfor(int i=0;i<e[x].size();++i){\n\t\t\tint v=e[x][i];\n\t\t\tdfs(v,st.size());\n\t\t}\n\t\twhile(st.size()>=lst+2){\t\n\t\t\tint a=st.back();st.pop_back();\n\t\t\tint b=st.back();st.pop_back();\n\t\t\tadd(a,b);\n\t\t}\n\t\tif(e[x].size()%2==0)st.push_back(x);\n\t}\n}A,B;\nint vis[MN],col[MN];\nvoid dfs(int x,int lst=0){\n\tif(vis[x])return;\n\tvis[x]=1;col[x]=col[lst]^1;\n\tfor(int i=head[x];i;i=nxt[i]){\n\t\tint v=to[i];\n\t\tdfs(v,x);\n\t}\n}\nsigned main(){\n\tn=read();\n\tfor(int i=1;i<=n;++i){\n\t\tA.fa[i]=read();\n\t\tif(A.fa[i]!=-1)A.e[A.fa[i]].pb(i);\n\t\telse A.rt=i;\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tB.fa[i]=read();\n\t\tif(B.fa[i]!=-1)B.e[B.fa[i]].pb(i);\n\t\telse B.rt=i;\n\t}\n\tfor(int i=1;i<=n;++i){\n\t\tif(A.e[i].size()%2!=B.e[i].size()%2){\n\t\t\tputs(\"IMPOSSIBLE\");\n\t\t\treturn 0;\n\t\t}\n\t}\n\tA.dfs(A.rt,0);\n\tB.dfs(B.rt,0);\n//\tassert(A.st.size()<=1);assert(B.st.size()<=1);\n\tfor(int i=1;i<=n;++i)if(!vis[i])dfs(i);\n\tputs(\"POSSIBLE\");\n\tfor(int i=1;i<=n;++i)\n\t\tif(A.e[i].size()%2==0)printf(col[i]?\"1 \":\"-1 \");\n\t\telse printf(\"0 \");\n\treturn 0;\n}\n```",
        "postTime": 1611719345,
        "uid": 7480,
        "name": "skydogli",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 AT2675 \u3010[AGC018F] Two Trees\u3011"
    }
]