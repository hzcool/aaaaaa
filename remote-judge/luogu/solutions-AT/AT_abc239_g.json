[
    {
        "content": "# Perface\n\u6700\u5c0f\u5272\u6c42\u65b9\u6848\u677f\u5b50\u9898\u3002\n# Analysis\n\u9996\u5148\uff0c\u6211\u4eec\u62c6\u70b9\uff0c\u5c06\u70b9\u6743\u8f6c\u5316\u4e3a\u539f\u70b9\u548c\u865a\u70b9\u4e4b\u95f4\u7684\u4e00\u6761\u53ef\u5272\u8fb9\uff0c\u800c\u539f\u56fe\u4e2d\u7684\u6240\u6709\u8fb9\u90fd\u662f\u4e0d\u53ef\u5272\u8fb9\uff0c\u5373\u8fb9\u6743\u4e3a\u65e0\u7a77\u3002\n\n\u5f62\u5f0f\u5316\u5730\uff0c\u8bb0\u7f51\u7edc\u7684\u8fb9\u96c6\u4e3a $F$\uff0c\u539f\u56fe $G=(V,E)$\u3002\n\n$\\forall (u,v)\\in E:F \\gets F \\cup (u',v,+\\infty)\\cup(v,u',+\\infty)$\u3002\n\n$\\forall u\\in V:F \\gets F \\cup (u,u',c_u)\\cup(u',u,c_u)$\u3002\n\n\u8fd9\u6837\u6211\u4eec\u5c31\u5efa\u597d\u4e86\u56fe\uff0c\u7528 dinic \u6c42\u51fa\u6700\u5c0f\u5272\u5373\u53ef\u3002\n\n\u63a5\u7740\uff0c\u6211\u4eec\u9700\u8981\u6c42\u51fa\u65b9\u6848\u3002\n\n\u4e0d\u59a8\u8bb0\u6700\u7ec8\u56fe\u4e2d\u4e0e\u539f\u70b9\u8054\u901a\u7684\u70b9\u96c6\u4e3a $S$\uff0c\u4e0e\u6c47\u70b9\u8054\u901a\u7684\u70b9\u96c6\u4e3a $T$\u3002\n\n\u663e\u7136\uff0c\u6839\u636e\u6700\u5c0f\u5272\u7684\u5b9a\u4e49\uff0c\u65b9\u6848\u5373\u4e3a\u6240\u6709 $(u,v) \\in E$ \u6ee1\u8db3 $u\\in S, v \\in T$\u3002\n\n\u8003\u8651 dinic \u7684\u6700\u540e\u4e00\u6b21\u589e\u5e7f\uff0c\u6b64\u6b21\u589e\u5e7f\u7684\u7f51\u7edc\u5df2\u7136\u4e0d\u8fde\u901a\uff0c\u90a3\u4e48\u6240\u6709\u88ab\u589e\u5e7f\u5230\u7684\u70b9\u5373\u4e3a $S$ \u96c6\uff0c\u6ca1\u88ab\u589e\u5e7f\u5230\u7684\u5373\u4e3a $T$ \u96c6\u3002\n\n\u81f3\u6b64\uff0c\u95ee\u9898\u89e3\u51b3\u3002\n\n# CODE\n```cpp\n/**\n * \t  author: \t spoonjunxi\n * \t  created:   2022-12-24 14:05:02\n**/\n#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\n#ifdef LOCAL\n#include \"C:/algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nconst int V = 210, E = 11000;\ntemplate<typename T> \nstruct FlowGraph {\n    int s, t, vtot, etot, dis[V], cur[V], head[V];\n    struct edge {\n        int v, nxt;\n        T f; \n    } e[E * 2];\n\n    void addedge(int u, int v, T f, T f2 = 0) {\n        e[etot] = {v, head[u], f}; head[u] = etot++;\n        e[etot] = {u, head[v], f2}; head[v] = etot++;\n    }\n    \n    bool bfs() {\n        for (int i = 1; i <= vtot; i++) {\n            dis[i] = 0;\n            cur[i] = head[i];\n        }\n        queue<int> q;\n        q.push(s); dis[s]=1;\n        while (!q.empty()) {\n            int u = q.front(); q.pop();\n            for (int i = head[u]; ~i; i = e[i].nxt) {\n                int v = e[i].v;\n                if (e[i].f > 0 && !dis[v]) {\n                    dis[v] = dis[u] + 1;\n                    if (v == t) return true;\n                    q.push(v);\n                }\n            }\n        } \n        return false;\n    }\n\n    T dfs(int u, T m) {\n        if (u == t) return m;\n        T flow = 0;\n        for (int i = cur[u]; ~i; cur[u] = i = e[i].nxt) {\n            if (e[i].f && dis[e[i].v] == dis[u] + 1) {\n                T f = dfs(e[i].v, min(m, e[i].f));\n                e[i].f -= f;\n                e[i^1].f += f;\n                m -= f;\n                flow += f;\n                if (!m) break;\n            }\n        }\n        if (!flow) dis[u] = -1;\n        return flow;\n    }\n\n    T dinic() {\n        T flow = 0;\n        while (bfs()) flow += dfs(s, std::numeric_limits<T>::max());\n        return flow;\n    }\n\n    void init(int s_, int t_, int vtot_) {\n        vtot=vtot_; s=s_; t=t_;\n        for (int i = 1; i <= vtot; i++) head[i] = -1;\n    }\n};\n\nint n, m;\nFlowGraph<ll> g;\n\nint main() {\n    scanf(\"%d%d\", &n, &m);\n    g.init(n + 1, n, n + n);\n    for (int i = 0; i < m; i++) {\n        int u, v;\n        scanf(\"%d%d\", &u, &v);\n        g.addedge(u + n, v, 1ll << 60);\n        g.addedge(v + n, u, 1ll << 60);\n    }\n    for (int i = 1; i <= n; i++) {\n        int c;\n        scanf(\"%d\", &c);\n        g.addedge(i, i + n, c);\n        g.addedge(i + n, i, c);\n    }\n    printf(\"%lld\\n\", g.dinic());\n    vector<int> ans;\n    for (int i = 2; i < n; i++) if (g.dis[i] && !g.dis[i + n]) \n        ans.push_back(i);\n    printf(\"%d\\n\", (int)ans.size());\n    for (auto v : ans) printf(\"%d \", v);\n    puts(\"\");\n}\n```",
        "postTime": 1671864365,
        "uid": 551375,
        "name": "junxis",
        "ccfLevel": 5,
        "title": "[ABC239G] Builder Takahashi"
    }
]