[
    {
        "content": "# [Erasing Vertices 2](https://www.luogu.com.cn/problem/AT_abc267_e)\n\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u4e8c\u5206\u6216\u8d2a\u5fc3\u505a\u3002\n# \u601d\u8def\u5206\u6790\n\u7ed3\u8bba\uff1a\u6bcf\u6b21\u90fd\u9009\u4ee3\u4ef7\u6700\u5c0f\u7684\u5220\u9664\u3002\n\n\u56e0\u4e3a\u6bcf\u6b21\u5220\u9664\u4e00\u4e2a\u70b9\u53ea\u4f1a\u8ba9\u4e0e\u5176\u76f8\u8fde\u7684\u70b9\u4ee3\u4ef7\u53d8\u5c0f\uff0c\u6240\u4ee5\u5220\u9664\u4ee3\u4ef7\u5c0f\u7684\u70b9\u548c\u5220\u9664\u4ee3\u4ef7\u5927\u7684\u70b9\u5bf9\u5176\u4ed6\u70b9\u7684\u5f71\u54cd\u672c\u8d28\u4e0a\u4e00\u6837\u3002\u6240\u4ee5\u6211\u4eec\u4f18\u5148\u5220\u9664\u4ee3\u4ef7\u6700\u5c0f\u7684\u70b9\u3002\n\n\u5220\u9664\u4e00\u4e2a\u70b9\u7684\u4ee3\u4ef7\u53ef\u4ee5\u7528\u4f18\u5148\u961f\u5217\u7ef4\u62a4\uff0c\u6bcf\u6b21\u628a\u8fde\u63a5\u4e14\u8fd8\u672a\u5220\u9664\u7684\u70b9\u52a0\u5165\u5806\u4e2d\u5373\u53ef\u3002\n# \u4ee3\u7801\u5b9e\u73b0\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\n#define int long long\nint n,m,x,y,a[200005],sum[200005],d[200005],head[200005],tot,ans;\nbool bk[200005];\nstruct node\n{\n    int id,val;\n    bool operator < (const node &tmp) const\n\t{\n\t\treturn val>tmp.val;\n\t}\n};\npriority_queue<node>q;\nstruct edge\n{\n    int next,to;\n}e[400005];\nvoid add_edge(int u,int v)\n{\n    e[++tot].next=head[u];\n    e[tot].to=v;\n    head[u]=tot;\n}\nsigned main()\n{\n    scanf(\"%lld%lld\",&n,&m);\n    for(int i=1;i<=n;i++)\n    {\n        scanf(\"%lld\",&a[i]);\n    }\n    for(int i=1;i<=m;i++)\n    {\n        scanf(\"%lld%lld\",&x,&y);\n        add_edge(x,y);\n        add_edge(y,x);\n        sum[x]+=a[y];\n        sum[y]+=a[x];\n    }\n    for(int i=1;i<=n;i++)\n    {\n        d[i]=sum[i];\n        q.push({i,d[i]});\n    }\n    while(!q.empty())\n    {\n        int u=q.top().id;\n        q.pop();\n        if(bk[u])\n            continue;\n        ans=max(ans,d[u]);\n        bk[u]=1;\n        for(int i=head[u];i;i=e[i].next)\n        {\n            int v=e[i].to;\n            if(!bk[v])\n            {\n                d[v]-=a[u];\n                q.push({v,d[v]});\n            }\n        }\n    }\n    printf(\"%lld\",ans);\n}\n\n```",
        "postTime": 1679126651,
        "uid": 631576,
        "name": "cyz2010",
        "ccfLevel": 0,
        "title": "ABC267E \u9898\u89e3"
    },
    {
        "content": "# abc 267 e\n\n## \u9898\u610f\n\n\u7ed9\u5b9a\u4e00\u4e2a $N$ \u4e2a\u70b9 $M$ \u6761\u8fb9\u7684\u7b80\u5355\u65e0\u5411\u56fe\uff0c\u7b2c $i$ \u6761\u8fb9\u8fde\u63a5 $U_i, V_i$\uff0c\u70b9 $i$ \u7684\u70b9\u6743\u4e3a $A_i$\u3002\n\n\u91cd\u590d\u4ee5\u4e0b\u64cd\u4f5c $N$ \u6b21\uff1a\n\n- \u9009\u62e9\u4e00\u4e2a\u672a\u88ab\u79fb\u9664\u7684\u70b9 $x$\uff0c\u79fb\u9664 $x$ \u548c\u4e0e $x$ \u76f8\u8fde\u7684\u6240\u6709\u8fb9\u3002\u8fd9\u6b21\u64cd\u4f5c\u7684\u4ee3\u4ef7\u4e3a\u6240\u6709\u4e0e $x$ \u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u7684\u70b9\u6743\u4e4b\u548c\u3002\n\n\u8bf7\u4f60\u6c42\u51fa $N$ \u6b21\u64cd\u4f5c\u4ee3\u4ef7\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u53ef\u80fd\u503c\u3002\n\n## \u601d\u8def\n\n### \u4e8c\u5206\n\n\u6211\u4eec\u53ef\u4ee5\u53d1\u73b0\uff0c\u7b54\u6848\u8d8a\u5c0f\uff0c\u8d8a\u96be\u8fbe\u5230\uff0c\u6709\u5355\u8c03\u6027\uff0c\u53ef\u4ee5\u60f3\u5230 **\u4e8c\u5206**\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u5e94\u8be5\u5982\u4f55\u5224\u65ad\u6bcf\u4e2a\u503c\u662f\u5426\u53ef\u884c\u5462\uff1f\n\n\u8bbe\u6211\u4eec\u5f53\u524d\u8981\u5224\u65ad $X$ \u662f\u5426\u53ef\u884c\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u80af\u5b9a\u662f\u5148\u9009\u62e9\u4ea7\u751f\u4ee3\u4ef7 $\\le x$ \u7684\u70b9\u5220\u9664\u3002\n\n\u800c\u6bcf\u6b21\u5220\u9664\u70b9\uff0c\u90fd\u53ea\u4f1a\u4f7f\u5f97\u4e0e\u5b83\u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u6240\u4ea7\u751f\u7684\u4ee3\u4ef7\u53d8\u5c0f\uff0c\u6240\u4ee5\uff0c\u6bcf\u6b21\u53ea\u9700\u8981\u5224\u65ad\u90a3\u4e9b\u4e0e\u5b83\u76f4\u63a5\u76f8\u8fde\u7684\u70b9\u6240\u4ea7\u751f\u7684\u4ee3\u4ef7\u662f\u5426 $\\le X$ \u5373\u53ef\u3002\n\n\u4ee4 $V$ \u4e3a\u6240\u6709\u70b9\u6743\u4e4b\u548c\u3002\n\n\u6bcf\u6b21 `Check()` \u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(N + M)$\uff0c\u4e8c\u5206\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(\\log V)$\uff0c\u6240\u4ee5\u603b\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((N + M) \\times \\log V)$\u3002\n\n#### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n\nconst int N = 2e5 + 10;\n\nint n, m, a[N];\nbool f[N];\nvector<int> g[N];\nll s[N];\n\nbool Check(ll x) {\n  queue<int> que;\n  int c = 0; \n  for (int i = 1; i <= n; i++) {\n    s[i] = f[i] = 0;\n    for (int j : g[i]) {\n      s[i] += a[j];\n    }\n    if (s[i] <= x) {\n      que.push(i), f[i] = 1;\n    }\n  }\n  while (!que.empty()) {\n    int u = que.front();\n    que.pop(), c++;\n    for (int v : g[u]) {\n      s[v] -= a[u];\n      if (s[v] <= x && !f[v]) {\n        que.push(v), f[v] = 1;\n      }\n    }\n  }\n  return c == n;\n}\n\nint main() {\n  ios::sync_with_stdio(0), cin.tie(0);\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    cin >> a[i];\n  }\n  while (m--) {\n    int u, v;\n    cin >> u >> v;\n    g[u].push_back(v), g[v].push_back(u);\n  }\n  ll l = 0, r = 2e14;\n  while (l < r) {\n    ll mid = (l + r) >> 1;\n    if (Check(mid)) {\n      r = mid;\n    } else {\n      l = mid + 1;\n    }\n  }\n  cout << l;\n  return 0;\n}\n```\n\n### \u8d2a\u5fc3\n\n\u6bcf\u6b21\u9009\u62e9\u4ea7\u751f\u4ee3\u4ef7\u6700\u5c0f\u7684\u70b9\u5220\u9664\uff0c\u7528\u5806\u6216\u8005 `set` \u7ef4\u62a4\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O((N + M) \\times \\log (N + M))$\u3002\n\n#### \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int N = 2e5 + 10;\n\nint n, m, a[N];\nlong long sum[N], ans;\nbool f[N];\nvector<int> g[N];\n\nstruct Node {\n  long long s;\n  int id;\n  bool operator < (const Node &i) const {\n    return s > i.s;\n  }\n};\n\npriority_queue<Node> pq;\n\nint main() {\n  ios::sync_with_stdio(0), cin.tie(0);\n  cin >> n >> m;\n  for (int i = 1; i <= n; i++) {\n    cin >> a[i];\n  }\n  while (m--) {\n    int u, v;\n    cin >> u >> v;\n    g[u].push_back(v), g[v].push_back(u);\n  }\n  for (int i = 1; i <= n; i++) {\n    for (int j : g[i]) {\n      sum[i] += a[j];\n    }\n    pq.push({sum[i], i});\n  }\n  while (!pq.empty()) {\n    Node u = pq.top();\n    pq.pop();\n    if (!f[u.id]) {\n      f[u.id] = 1, ans = max(ans, u.s);\n      for (int v : g[u.id]) {\n        sum[v] -= a[u.id], pq.push({sum[v], v});\n      }\n    }\n  }\n  cout << ans;\n  return 0;\n}\n```",
        "postTime": 1685086019,
        "uid": 658291,
        "name": "chengning0909",
        "ccfLevel": 4,
        "title": "abc 267 e \u9898\u89e3"
    },
    {
        "content": "## [\u9898\u76ee\u4f20\u9001\u5668](https://www.luogu.com.cn/problem/at_abc267_e)\n## [\u66f4\u723d\u7684\u9605\u8bfb\u4f53\u9a8c](https://yaohaoyou.blog.luogu.org/solution-at-abc267-e)\n\n## \u9898\u610f\n\u7ffb\u8bd1\u9898\u9762\u5df2\u7ecf\u5f88\u6e05\u695a\u4e86\uff0c\u8fd9\u91cc\u5c31\u4e0d\u89e3\u91ca\u4e86\u3002\n## \u601d\u8def\n\u770b\u5230 $n \\le 2 \\times 10^5$ \u7684\u6570\u636e\u548c\u6c42``\u5355\u6b21\u64cd\u4f5c\u4ee3\u4ef7\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c``\u7684\u9898\u9762\u65f6\uff0c\u4f5c\u4e3a\u4e00\u4f4d\u62e5\u6709\u8bb8\u591a**\u6302\u5206**\u7ecf\u9a8c\u7684 Oier \u6765\u8bf4\uff0c\u7b2c\u4e00\u4e2a\u60f3\u7684\u601d\u8def\u5c31\u662f**\u4e8c\u5206\u7b54\u6848**\u3002\n\n\u60f3\u5230\u4e8c\u5206\u7b54\u6848\u5c31\u8981\u601d\u8003\u4e8c\u5206\u7684\u503c\u548c\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n) $ \u7684 check \u51fd\u6570\uff0c\u63a5\u4e0b\u6765\u5c31\u5206\u522b\u5206\u6790\u8fd9\u4e24\u90e8\u5206\u3002\n\n#### \u4e8c\u5206\u7684\u503c\n\u5f88\u660e\u663e\uff0c\u5c31\u662f\u6700\u540e\u8f93\u51fa\u7684\u5355\u6b21\u64cd\u4f5c\u4ee3\u4ef7\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u3002\n#### check \u51fd\u6570\n\u4ee4\u6bcf\u6b21\u64cd\u4f5c\u7684\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u4e3a $x$\uff0c\u7531\u9898\u610f\u5f97\u6bcf\u6b21\u5220\u70b9\u7684\u4ee3\u4ef7\u90fd\u8981 $\\le x$\uff0c\u90a3\u6b64\u65f6\u53ef\u4ee5\u5f00\u4e00\u4e2a\u961f\u5217\u6765\u5b58\u653e\u7b26\u5408\u6761\u4ef6\u7684\u70b9 $\\le x$\uff0c\u6bcf\u6b21\u5220\u8fb9\u65f6\u90fd\u8981\u5224\u65ad\u53e6\u4e00\u4e2a\u70b9\u662f\u5426\u53ef\u4ee5\u52a0\u5165\u961f\u5217\uff0c\u82e5\u8fd8\u6ca1\u6267\u884c $n$ \u6b21\u961f\u5217\u5c31\u4e3a\u7a7a\u5219\u8fd4\u56de false\uff0c\u53cd\u4e4b\u4e3a true\u3002\n\n\u53c2\u8003\u4ee3\u7801\uff1a\n```cpp\nbool check(int x)\n{\n    mem();\n    for (int i = 1; i <= n; i++)\n    {\n        if (point[i] <= x){\n            q.push(i);\n            inque[i]=1;\n        }\n    }\n    if (q.size() == 0)\n        return 0;\n    for (int i = 1; i <= n; i++)\n    {\n        if (q.empty())\n            return 0;\n        int id = q.front();\n        q.pop();\n        used[id] = 1;\n        inque[id] = 0;\n        for (int j = head[id]; j; j = e[j].nxt)\n        {\n            int t = e[j].to;\n            // printf(\"%d %d\\n\",id,t);\n            point[t] -= a[id];\n            if (point[t] <= x && !inque[t] && !used[t])\n            {\n                q.push(t);\n                inque[t] = 1;\n            }\n        }\n    }\n    return 1;\n}\n```\n## \u6ce8\u610f\u4e8b\u9879\n1. \u6700\u540e\u8f93\u51fa\u7684\u7b54\u6848\u4f1a\u7206 int\uff0c\u8981\u5f00 long long\uff08\u8003\u65f6\u4eb2\u8eab\u4f53\u4f1a\uff09\u3002\n2. \u8fb9\u6570\u7ec4\u8981\u5f00\u4e24\u500d\u7a7a\u95f4\u3002\n3. \u8fb9\u548c\u5165\u5ea6\u90fd\u8981\u521d\u59cb\u5316\u3002\n\n## \u603b\u7ed3\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\log_2n)$\u3002\n\n## AC Code\n```cpp\n#include <bits/stdc++.h>  // \u5f00\u59cb\u4e86\n#define int long long // \u5f00 long long\nusing namespace std;\nconst int maxn = 2e5 + 10;\nint n, m, l = 0, r, ans, a[maxn], point[maxn], point2[maxn];\nint cnt, head[maxn];\nqueue<int> q;\nbool inque[maxn], used[maxn];\nstruct edge\n{\n    int nxt, to;\n} e[maxn << 1];  // \u53cc\u500d\u7a7a\u95f4\nvoid add(int u, int v)  // \u5efa\u56fe\n{\n    e[++cnt] = {head[u], v};\n    head[u] = cnt;\n}\nvoid mem()  // \u521d\u59cb\u5316\n{\n    memcpy(point, point2, sizeof(point));\n    memset(used, 0, sizeof(used));\n}\nbool check(int x)  // check \u51fd\u6570\n{\n    mem();\n    for (int i = 1; i <= n; i++)\n    {\n        if (point[i] <= x){\n            q.push(i);\n            inque[i]=1;\n        }\n    }\n    if (q.size() == 0)\n        return 0;\n    for (int i = 1; i <= n; i++)\n    {\n        if (q.empty())\n            return 0;\n        int id = q.front();\n        q.pop();\n        used[id] = 1;\n        inque[id] = 0;\n        for (int j = head[id]; j; j = e[j].nxt)\n        {\n            int t = e[j].to;\n            // printf(\"%d %d\\n\",id,t);\n            point[t] -= a[id];\n            if (point[t] <= x && !inque[t] && !used[t])\n            {\n                q.push(t);\n                inque[t] = 1;\n            }\n        }\n    }\n    return 1;\n}\nsigned main()\n{\n    // freopen(\"ex_data1.in\",\"r\",stdin);\n    scanf(\"%lld%lld\", &n, &m);  // \u8f93\u5165\n    for (int i = 1; i <= n; i++)\n    {\n        scanf(\"%lld\", &a[i]);\n        r += a[i];\n    }\n    for (int i = 1; i <= m; i++)\n    {\n        int u, v;\n        scanf(\"%lld%lld\", &u, &v);\n        point[u] += a[v];\n        point[v] += a[u];\n        add(u, v);\n        add(v, u);\n    }\n    memcpy(point2, point, sizeof(point));\n    while (l <= r)  // \u4e8c\u5206\n    {\n        int mid = (l + r) >> 1;\n        if (check(mid))\n        {\n            ans = mid;\n            r = mid - 1;\n        }\n        else\n            l = mid + 1;\n    }\n    printf(\"%lld\", ans);  // \u8f93\u51fa\n}\n```\n",
        "postTime": 1682346391,
        "uid": 739274,
        "name": "yaohaoyou",
        "ccfLevel": 5,
        "title": "AT_abc267_e [ABC267E] Erasing Vertices 2 \u9898\u89e3"
    },
    {
        "content": "[AT_abc267_e](https://www.luogu.com.cn/problem/AT_abc267_e)\n\n[Erasing Vertices 2](https://atcoder.jp/contests/abc267/tasks/abc267_e)\n\n### \u601d\u8def\n\n\u6700\u5927\u7684\u6700\u5c0f\u4e00\u7c7b\u7684\u95ee\u9898\uff0c\u901a\u5e38\u7528\u4e8c\u5206\u7b54\u6848\u3002\n\n\u8bbe\u7b54\u6848\u503c\u57df\u4e3a $v$\uff0c\u590d\u6742\u5ea6 $O(\\log v)$\u3002\n\n```cpp\n\n\tl=0,r=inf;\n\twhile(l<=r){\n\t\tmid=l+r>>1;\n\t\tif(check(mid)){\n\t\t\tr=mid-1;\n\t\t\tans=mid;\n\t\t}\n\t\telse l=mid+1;\n\t}\n```\n\n\u6ce8\u610f\u6b64\u9898\u7b54\u6848\u503c\u53ef\u4ee5\u4e3a $0$\u3002\n\n\u9700\u8981 $O(n)$ \u5b9e\u73b0\u5224\u65ad \u7b54\u6848 $mid$ \u662f\u5426\u53ef\u884c\u7684 check \u51fd\u6570\u3002\n\n\u6570\u7ec4 $val_i$ \u8bb0\u5f55\u70b9 $i$ \u6700\u5f00\u59cb\u7684\u82b1\u8d39\u3002\u5bf9\u4e8e\u6bcf\u4e2a $val_u \\leq mid$ \u7684\u70b9\u53ef\u4ee5\u76f4\u63a5\u5220\u53bb\uff0c\u5e76\u4f7f\u5f97\u4e0e $u$ \u76f8\u90bb\u7684 $v$ \u7684 $val_v$ \u51cf\u53bb $a_u$\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u7b49\u540c\u4e8e\u6a21\u62df\u5220\u70b9\u3002\n\n\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u53ea\u6709\u4e0e\u88ab\u5220\u70b9\u76f8\u90bb\u7684\u70b9\u7684\u6743\u503c\u4f1a\u53d7\u5230\u5f71\u54cd\uff0c\u5e76\u6709\u53ef\u80fd\u8fdb\u4e00\u6b65\u88ab\u5220\u53bb\u3002\n\n\u5c06\u6bcf\u4e2a\u88ab\u5220\u70b9\u63a8\u5165\u961f\u5217\uff0c\u6539\u53d8\u5176\u90bb\u70b9\u540e\u518d\u5220\u53bb\u3002\u5982\u679c\u90bb\u70b9\u88ab\u6539\u53d8\u540e\u4e5f\u53ef\u4ee5\u88ab\u5220\u53bb\uff0c\u5219\u90bb\u70b9\u4e5f\u52a0\u5165\u961f\u5217\u3002\n\n\u7528\u8ba1\u6570\u5668\u8bb0\u5f55\u5220\u4e86\u51e0\u4e2a\u70b9\u3002\u5982\u679c\u5220\u4e86 $n$ \u4e2a\uff0c\u8bf4\u660e $mid$ \u53ef\u884c\u3002\n\n\u6bcf\u4e2a\u70b9\u6700\u591a\u4f1a\u88ab\u7ecf\u8fc7\u4e00\u6b21\uff0c\u6bcf\u6761\u8fb9\u6700\u591a\u88ab\u7ecf\u8fc7\u4e00\u6b21\uff0ccheck \u590d\u6742\u5ea6 $O(n+m)$\uff0c\u603b\u590d\u6742\u5ea6 $O(\\log v \\times n)$\u3002\n\n```cpp\n\nbool check(int x){\n\tint cnt=0;\n\tfor(int i=1;i<=n;i++)w[i]=val[i],vis[i]=0;\n\tfor(int i=1;i<=n;i++){\n\t\tif(w[i]<=x)q.push(i),++cnt,vis[i]=1;\n\t}\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(!vis[v]){\n\t\t\t\tw[v]-=a[u];\n\t\t\t\tif(w[v]<=x)q.push(v),++cnt,vis[v]=1;\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt==n;\n}\n```\n\n### code\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int maxn=200010;\nconst int inf=1e12;\ninline int read(){\n\tint x=0,f=1;\n\tchar c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<3)+(x<<1)+(c^48),c=getchar();}\n\treturn x*f;\n}\n\nint n,m,a[maxn];\nint l,r,mid,ans;\nstruct nd{\n\tint nxt,to;\n}e[maxn<<1];\nint head[maxn],tot;\nvoid add(int u,int v){\n\te[++tot].nxt=head[u];e[tot].to=v;\n\thead[u]=tot;\n}\nint val[maxn],w[maxn],vis[maxn];\nqueue<int> q;\nbool check(int x){\n\tint cnt=0;\n\tfor(int i=1;i<=n;i++)w[i]=val[i],vis[i]=0;\n\tfor(int i=1;i<=n;i++){\n\t\tif(w[i]<=x)q.push(i),++cnt,vis[i]=1;\n\t}\n\twhile(!q.empty()){\n\t\tint u=q.front();q.pop();\n\t\tfor(int i=head[u];i;i=e[i].nxt){\n\t\t\tint v=e[i].to;\n\t\t\tif(!vis[v]){\n\t\t\t\tw[v]-=a[u];\n\t\t\t\tif(w[v]<=x)q.push(v),++cnt,vis[v]=1;\n\t\t\t}\n\t\t}\n\t}\n\treturn cnt==n;\n}\nsigned main(){\n\tn=read();m=read();\n\tfor(int i=1;i<=n;i++)a[i]=read();\n\tfor(int i=1;i<=m;i++){\n\t\tint u,v;\n\t\tu=read();v=read();\n\t\tadd(u,v);add(v,u);\n\t\tval[u]+=a[v];val[v]+=a[u];\n\t}\n\tl=0,r=inf;\n\twhile(l<=r){\n\t\tmid=l+r>>1;\n\t\tif(check(mid)){\n\t\t\tr=mid-1;\n\t\t\tans=mid;\n\t\t}\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%lld\\n\",ans);\n}\n```\n",
        "postTime": 1679115393,
        "uid": 754153,
        "name": "gdf_yhm",
        "ccfLevel": 5,
        "title": "AT_abc267_e\u9898\u89e3"
    },
    {
        "content": "# ABC267E \u9898\u89e3\n\n## \u601d\u8def\u5206\u6790\n\n\u8003\u8651\u4e8c\u5206\u5220\u9664\u7684\u65f6\u5019\u7684\u6700\u5927\u82b1\u8d39 $w$\uff0ccheck \u7684\u65f6\u5019\u6bcf\u6b21\u628a\u5220\u9664\u70b9 $u$ \u7684\u82b1\u8d39 $\\le w$ \u7684\u6240\u6709\u70b9 $u$ \u52a0\u5165\u961f\u5217\uff0c\u5220\u9664\u4e4b\u540e\u4ef7\u5dee\u6240\u6709\u4e0e $u$ \u76f8\u90bb\u7684\u70b9\u662f\u5426\u82b1\u8d39 $\\le w$\uff0c\u505a\u4e00\u904d BFS \u5373\u53ef\uff0c\u6700\u7ec8\u68c0\u67e5\u6709\u6ca1\u6709\u6ca1\u6709\u5220\u9664\u7684\u70b9\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta((n+m)\\log w)$\u3002\n\n## \u4ee3\u7801\u5448\u73b0\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\nusing namespace std;\nconst int MAXN=2e5+1,INF=1e18;\nint a[MAXN],val[MAXN],cost[MAXN];\nint n,m;\nbool vis[MAXN];\nvector <int> edge[MAXN];\ninline bool check(int limit) {\n\tqueue <int> q;\n\tmemset(vis,false,sizeof(vis));\n\tmemcpy(cost,val,sizeof(cost));\n\tint cnt=0;\n\tfor(int i=1;i<=n;++i) {\n\t\tif(cost[i]>limit) continue;\n\t\tvis[i]=true;\n\t\t++cnt;\n\t\tq.push(i);\n\t}\n\twhile(!q.empty()) {\n\t\tint p=q.front();\n\t\tq.pop();\n\t\tfor(int v:edge[p]) {\n\t\t\tif(vis[v]) continue;\n\t\t\tcost[v]-=a[p];\n\t\t\tif(cost[v]>limit) continue;\n\t\t\tvis[v]=true;\n\t\t\t++cnt;\n\t\t\tq.push(v);\n\t\t}\n\t}\n\treturn cnt==n;\n}\nsigned main() {\n\tscanf(\"%lld%lld\",&n,&m);\n\tfor(int i=1;i<=n;++i) scanf(\"%lld\",&a[i]);\n\tfor(int i=1;i<=m;++i) {\n\t\tint u,v;\n\t\tscanf(\"%lld%lld\",&u,&v);\n\t\tval[u]+=a[v];\n\t\tval[v]+=a[u];\n\t\tedge[u].push_back(v);\n\t\tedge[v].push_back(u);\n\t}\n\tint l=0,r=INF,res=-1;\n\twhile(l<=r) {\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid)) res=mid,r=mid-1;\n\t\telse l=mid+1;\n\t}\n\tprintf(\"%lld\\n\",res);\n\treturn 0;\n}\n```",
        "postTime": 1669282448,
        "uid": 539618,
        "name": "DaiRuiChen007",
        "ccfLevel": 6,
        "title": "ABC267E \u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u53ef\u4ee5\u7528\u8d2a\u5fc3\u505a\uff0c\u5148\u8bf4\u7ed3\u8bba\uff0c\u6211\u4eec\u6bcf\u6b21\u90fd\u9009\u4ee3\u4ef7\u6700\u5c0f\u7684\u4e00\u9879\u3002\n\n\u5982\u4f55\u8bc1\u660e\uff1f\u8fd9\u9053\u9898\u8ba9\u6211\u4eec\u6c42\u7684\u662f\u6700\u5927\u503c\u6700\u5c0f\uff0c\u90a3\u4e48\u9009\u6700\u5c0f\u503c\u662f\u5c40\u90e8\u6700\u4f18\u7684\uff0c\u800c\u9009\u4e86\u6700\u5c0f\u503c\u4e4b\u540e\uff0c\u53ea\u53ef\u80fd\u4f7f\u522b\u7684\u503c\u53d8\u5c0f\uff0c\u4ece\u800c\u4f7f\u522b\u7684\u503c\u6027\u4ef7\u6bd4\u66f4\u9ad8\uff0c\u6240\u4ee5\u6700\u5c0f\u503c\u662f\u6700\u597d\u7684\u3002\n\n\u5982\u4f55\u7ef4\u62a4\u51fa\u6700\u5c0f\u503c\uff1f\u8fd9\u91cc\u6211\u7528\u7684\u662f `set`,\u5bf9\u4e8e\u6bcf\u6b21\u4fee\u6539\uff0c\u5148\u5220\u9664\u5bf9\u5e94\u7684\u503c\uff0c\u518d\u628a\u66f4\u65b0\u540e\u7684\u503c\u52a0\u8fdb\u53bb\u3002\u5f53\u7136\u4f18\u5148\u961f\u5217\u4e5f\u53ef\u4ee5\u7528\u4e00\u79cd\u5de7\u5999\u7684\u601d\u8def\u7ef4\u62a4\u3002\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nstruct node {\n    long long x, val;\n    bool operator<(const node y) const {\n        if (val == y.val) {\n            return x < y.x;\n        }\n        return val < y.val;\n    }\n};\nset<node> s;\nlong long n, m, x, y, a[200005], val[200005], mx;\nvector<long long> v[200005];\nint main() {\n    cin >> n >> m;\n    for (int i = 1; i <= n; i++) {\n        cin >> a[i];\n    }\n    for (int i = 1; i <= m; i++) {\n        cin >> x >> y;\n        v[x].push_back(y);\n        v[y].push_back(x);\n        val[x] += a[y];\n        val[y] += a[x];\n    }\n    for (int i = 1; i <= n; i++) {\n        s.insert({ i, val[i] });\n    }\n    while (!s.empty()) {\n        node t = *s.begin();\n        s.erase(s.begin());\n        mx = max(mx, t.val);\n        for (auto i : v[t.x]) {\n            auto p = s.find({ i, val[i] });\n            if (p != s.end()) {\n                s.erase(p);\n                val[i] -= a[t.x];\n                s.insert({ i, val[i] });\n            }\n        }\n    }\n    cout << mx << endl;\n    return 0;\n}\n```",
        "postTime": 1668324439,
        "uid": 501947,
        "name": "DengDuck",
        "ccfLevel": 6,
        "title": "ABC267E Erasing Vertices 2 \u9898\u89e3"
    },
    {
        "content": "#  [[ABC267E] Erasing Vertices 2](https://www.luogu.com.cn/problem/AT_abc267_e) Solution\n\n[TOC]\n\n## [\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\u6233\u6b64\u8fdb\u5165](http://blog.tsawke.com?t=ABC267E)\n\n## \u9898\u9762\n\n\u7ed9\u5b9a $ n $ \u4e2a\u70b9 $ m $ \u6761\u8fb9\u7684\u65e0\u5411\u56fe\uff0c\u7ed9\u5b9a\u70b9\u6743\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5220\u9664\u4e00\u4e2a\u70b9\uff0c\u5b9a\u4e49\u5176\u82b1\u8d39\u4e3a\u4e0e\u5176\u76f8\u8fde\u7684\u6240\u6709\u6ca1\u88ab\u5220\u9664\u7684\u70b9\u7684\u70b9\u6743\u548c\uff0c\u4f60\u9700\u8981\u5220\u9664\u6240\u6709\u70b9\u3002\u6700\u5c0f\u5316\u82b1\u8d39\u6700\u5927\u503c\uff0c\u8f93\u51fa\u6700\u5c0f\u7684\u6700\u5927\u503c\u3002\n\n## Solution\n\n\u7b2c\u4e00\u773c\u770b\u5b8c\u4ee5\u4e3a\u662f\u7ef4\u62a4\u5220\u9664\u80fd\u8282\u7701\u7684\u5bf9\u4e8e\u5176\u5b83\u70b9\u7684\u82b1\u8d39\uff08\u5373\u70b9\u6743\u4e58\u5ea6\u6570\uff09\u51cf\u53bb\u5220\u9664\u7684\u82b1\u8d39\uff0c\u6bcf\u6b21\u5220\u53bb\u6700\u5927\u7684\u5e76\u52a8\u6001\u7ef4\u62a4\u76f8\u8fde\u70b9\u7684\u8be5\u503c\uff0c\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u7ef4\u62a4\uff0c\u5f53\u7136\u5047\u4e86\uff0c\u56e0\u4e3a\u540e\u6765\u624d\u53d1\u73b0\u6700\u5c0f\u5316\u7684\u4e0d\u662f\u82b1\u8d39\u548c\uff0c\u800c\u662f\u6700\u5927\u503c\u3002\n\n\u7136\u540e\u60f3\u5230\u7684\u662f\u6bcf\u6b21\u5220\u82b1\u8d39\u6700\u5927\u7684\u70b9\u76f8\u8fde\u7684\u82b1\u8d39\u6700\u5c0f\u7684\u70b9\uff0c\u5373\u60f3\u529e\u6cd5\u964d\u4f4e\u6700\u5927\u70b9\u7684\u6700\u5927\u503c\uff0c\u5e76\u52a8\u6001\u7ef4\u62a4\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u7528\u5e73\u8861\u6811\uff0c\u4e0d\u8fc7\u8fd9\u4e2a\u4e1c\u897f\u4ed4\u7ec6\u60f3\u4e00\u4e0b\u5c31\u53d1\u73b0\u5047\u4e86\uff0c\u6700\u5927\u70b9\u8fde\u7ed3\u7684\u6700\u5c0f\u70b9\u6216\u8bb8\u53ef\u80fd\u53ef\u4ee5\u901a\u8fc7\u6700\u5c0f\u70b9\u8fde\u7ed3\u7684\u6b21\u5c0f\u70b9\u66f4\u65b0\uff0c\u4ee5\u6b64\u7c7b\u63a8\uff0c\u5982\u679c\u4e00\u76f4\u627e\u5230\u6700\u5c0f\u6ca1\u6709\u5206\u6790\uff0c\u4e0d\u8fc7\u590d\u6742\u5ea6\u57fa\u672c\u4e0a\u662f\u5b8c\u5168\u4e0d\u53ef\u63a5\u53d7\u7684\u3002\n\n\u4e8e\u662f\u5728\u6d6a\u8d39\u4e86\u4e0d\u5c11\u65f6\u95f4\u540e\u6211\u624d\u60f3\u5230\u4e86\u8fd9\u4e2a\u5341\u5206\u663e\u7136\u7684\u6b63\u89e3\uff0c\u5373\u663e\u7136\u6211\u4eec\u76f4\u63a5\u5220\u9664\u82b1\u8d39\u6700\u5c0f\u7684\u5373\u53ef\u3002\u56e0\u4e3a\u5982\u679c\u4f60\u5220\u9664\u5176\u5b83\u7684\u4efb\u610f\u70b9\u4e00\u5b9a\u4f1a\u4f7f\u6700\u5927\u82b1\u8d39\u53d8\u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u4e00\u5b9a\u53ef\u4ee5\u88ab\u5220\u9664\u4e14\u4e0d\u8d21\u732e\u82b1\u8d39\u3002\u4e8e\u662f\u6211\u4eec\u6bcf\u6b21\u627e\u5230\u82b1\u8d39\u6700\u5c0f\u7684\u70b9\uff0c\u5e76\u52a8\u6001\u7ef4\u62a4\u76f8\u8fde\u5176\u5b83\u70b9\u7684\u82b1\u8d39\u5373\u53ef\u3002\u8fd9\u4e2a\u8fc7\u7a0b\u6211\u4f7f\u7528\u4e86\u5e73\u8861\u6811\u7ef4\u62a4\uff0c\u5373\u652f\u6301\u63d2\u5165\uff0c\u5220\u9664\uff0c\u627e\u7b2c $ k $ \u5c0f\uff08\u5373\u627e\u6700\u5c0f\uff09\u3002\n\n\u53e6\u5916\u6b64\u9898\u4ecd\u7136\u5b58\u5728\u601d\u8def\uff0c\u5373\u4e8c\u5206\u7b54\u6848\uff0c\u7136\u540e $ O(n) $ \u9a8c\u8bc1\u5373\u53ef\uff0c\u8fd9\u4e2a\u601d\u8def\u4e5f\u4e0d\u96be\u60f3\u5230\u3002\n\nTips\uff1a\u540e\u6765\u88ab\u673a\u623f\u540c\u5b66\u63d0\u9192\u4e86\u4e00\u4e0b\u4e4b\u540e\u6211\u624d\u6115\u7136\u53d1\u73b0\u8fd9\u4e1c\u897f\u7528\u4e0d\u5230\u5e73\u8861\u6811\uff0c\u76f4\u63a5\u6b63\u5e38\u7ef4\u62a4\u4f18\u5148\u961f\u5217\uff0c\u8bb0\u5f55\u4e00\u4e0b $ idx $ \u7136\u540e\u4e0d\u7528\u5220\u9664\uff0c\u76f4\u63a5\u8bb0\u5f55\uff0c\u5982\u679c $ idx $ \u5bf9\u5e94\u503c\u4e8e\u4f18\u5148\u961f\u91cc\u91cc\u7684\u4e0d\u540c\u90a3\u4e48\u5c31\u4e22\u5f03\u5373\u53ef\u3002\n\nTips(again)\uff1a\u5982\u679c\u8981\u4f7f\u7528\u5e73\u8861\u6811\u7ef4\u62a4\u7684\u8bdd\uff0c\u6700\u666e\u901a\u7684\u4efb\u610f\u5e73\u8861\u6811\u5373\u53ef\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u7528\u5230\u7684\u771f\u7684\u5f88\u6d45\uff0c\u6240\u4ee5\u6211\u4eec\u4e0d\u96be\u60f3\u5230\u4e5f\u53ef\u4ee5\u76f4\u63a5\u7528 `__gnu_pbds::tree` \u7ef4\u62a4\uff0c\u8fd9\u91cc\u6211\u7528\u7684\u662f `tree < pair < ll, int >, null_type, less < pair < ll, int > >, rb_tree_tag, tree_order_statistics_node_update > tr;`\uff0c\u9700\u8981\u6ce8\u610f\u6211\u4eec\u8fd9\u91cc\u4e0d\u80fd\u7528\u9ed8\u8ba4\u7684\u53c2\u6570\uff0c\u9700\u8981\u624b\u52a8\u6539\u4e3a `tree_order_statistics_node_update`\uff0c\u5426\u5219\u5e73\u8861\u6811\u5c06\u4e0d\u518d\u652f\u6301 `find_by_order(x)` \u4ee5\u53ca `order_of_key(x)` \u7b49\u64cd\u4f5c\u3002\n\n## Code\n\n```cpp\n#define _USE_MATH_DEFINES\n#include <bits/stdc++.h>\n#include <bits/extc++.h>\n\n#define PI M_PI\n#define E M_E\n#define npt nullptr\n#define SON i->to\n#define OPNEW void* operator new(size_t)\n#define ROPNEW void* Edge::operator new(size_t){static Edge* P = ed; return P++;}\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\nmt19937 rnd(random_device{}());\nint rndd(int l, int r){return rnd() % (r - l + 1) + l;}\nbool rnddd(int x){return rndd(1, 100) <= x;}\n\ntypedef unsigned int uint;\ntypedef unsigned long long unll;\ntypedef long long ll;\ntypedef long double ld;\n\ntemplate < typename T = int >\ninline T read(void);\n\nint N, M;\nll A[210000];\nll cost[210000];\nll ans(LONG_LONG_MIN);\nbitset < 210000 > vis;\n\nstruct Edge{\n    Edge* nxt;\n    int to;\n    OPNEW;\n}ed[410000];\nROPNEW;\nEdge* head[210000];\n\ntree < pair < ll, int >, null_type, less < pair < ll, int > >, rb_tree_tag, tree_order_statistics_node_update > tr;\n\nint main(){\n    N = read(), M = read();\n    for(int i = 1; i <= N; ++i)A[i] = read();\n    for(int i = 1; i <= M; ++i){\n        int s = read(), t = read();\n        head[s] = new Edge{head[s], t};\n        head[t] = new Edge{head[t], s};\n        cost[s] += A[t], cost[t] += A[s];\n    }make_pair(cost[1], 1);\n    for(int i = 1; i <= N; ++i)tr.insert({cost[i], i});\n    for(int c = 1; c <= N; ++c){\n        auto it = tr.find_by_order(0);\n        ans = max(ans, it->first);\n        vis[it->second] = true;\n        for(auto i = head[it->second]; i; i = i->nxt)\n            if(!vis[SON])\n                tr.erase({cost[SON], SON}),\n                tr.insert({cost[SON] -= A[it->second], SON});\n        tr.erase({it->first, it->second});\n    }printf(\"%lld\\n\", ans);\n    fprintf(stderr, \"Time: %.6lf\\n\", (double)clock() / CLOCKS_PER_SEC);\n    return 0;\n}\n\ntemplate < typename T >\ninline T read(void){\n    T ret(0);\n    int flag(1);\n    char c = getchar();\n    while(c != '-' && !isdigit(c))c = getchar();\n    if(c == '-')flag = -1, c = getchar();\n    while(isdigit(c)){\n        ret *= 10;\n        ret += int(c - '0');\n        c = getchar();\n    }\n    ret *= flag;\n    return ret;\n}\n```\n\n## UPD\n\nupdate-2023_01_14 \u521d\u7a3f",
        "postTime": 1673665023,
        "uid": 362938,
        "name": "Tsawke",
        "ccfLevel": 6,
        "title": "[ABC267E] Erasing Vertices 2 \u9898\u89e3"
    }
]