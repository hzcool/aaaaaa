[
    {
        "content": "\u8fd9\u79cd\u5947\u602a\u7684\u6570\u636e\u8303\u56f4\u53ef\u4ee5\u60f3\u5230\u8d39\u7528\u6d41\u3002\n\n\u5148\u5047\u8bbe\u53ea\u6709\u4e00\u7ef4\u7684\u60c5\u51b5\u3002\n\n\u8003\u8651\u679a\u4e3e\u5077\u7684\u73e0\u5b9d\u7684\u4e2a\u6570$k$\uff0c\u4e14\u5047\u8bbe\u5b83\u4eec\u6309\u7167\u5750\u6807\u5927\u5c0f\u6392\u597d\u4e86\u5e8f\u3002\n\n\u90a3\u4e48\u53ef\u4ee5\u5c06\u6761\u4ef6\u8f6c\u5316\u4e00\u4e0b\uff0c\u5927\u4e8e\u7b49\u4e8e$a_i$\u7684\u6700\u591a\u53d6$b_i$\u4e2a\u53ef\u4ee5\u8f6c\u5316\u4e3a\u53d6\u7684\u524d$k-b_i$\u4e2a\u73e0\u5b9d\u7684\u5750\u6807\u8981\u5c0f\u4e8e$a_i$\u3002\u540c\u7406\uff0c\u5c0f\u4e8e\u7b49\u4e8e$a_i$\u7684\u6700\u591a\u53ef\u4ee5\u53d6$b_i$\u4e2a\u53ef\u4ee5\u8f6c\u5316\u4e3a\u53d6\u7684\u540e$k-b_i$\u4e2a\u73e0\u5b9d\u7684\u5750\u6807\u8981\u5927\u4e8e$a_i$\u3002\n\n\u90a3\u4e48\u8fd9\u6837\u7684\u8bdd\uff0c\u5c31\u53ef\u4ee5\u8ba1\u7b97\u51fa\u53d6\u7684\u6bcf\u4e2a\u73e0\u5b9d\u7684\u53d6\u503c\u8303\u56f4$[l,r]$\u3002\n\n\u5982\u679c\u662f\u4e24\u7ef4\u7684\u8bdd\u5c31\u7c7b\u4f3c\u53ef\u5f97\u3002\n\n\u90a3\u4e48\u5c31\u53ef\u4ee5\u5efa\u51fa\u8d39\u7528\u6d41\u7684\u56fe\u4e86\u3002\u5177\u4f53\u800c\u8a00\uff0c\u4ece\u6e90\u70b9\u5411\u5de6\u8fb9\u7684$k$\u4e2a\u70b9\u8fde$(1,0)$\u7684\u8fb9\uff0c\u4ece\u5de6\u8fb9\u7684$k$\u4e2a\u70b9\u5f80\u5b83\u4eec\u53f3\u8fb9\u76f8\u90bb\u7684$n$\u4e2a\u70b9\u6309\u7167\u7b97\u51fa\u6765\u7684\u53d6\u503c\u8303\u56f4\u8fde$(1,0)$\u7684\u8fb9\uff0c\u518d\u4ece\u8fd9$n$\u4e2a\u70b9\u5f80\u53f3\u8fb9\u7684$n$\u4e2a\u70b9\u4e00\u4e00\u5bf9\u5e94\u8fde$(1,v_i)$\u7684\u8fb9\uff0c\u7136\u540e\u518d\u4ece\u8fd9$n$\u4e2a\u70b9\u5411\u53f3\u8fb9\u7684$k$\u4e2a\u70b9\u6309\u7167\u7b97\u51fa\u6765\u7684\u53d6\u503c\u8303\u56f4\u8fde$(1,0)$\u7684\u8fb9\uff0c\u6700\u540e\u518d\u4ece\u8fd9$k$\u4e2a\u70b9\u5f80\u6c47\u70b9\u8fde$(1,0)$\u7684\u8fb9\u3002\n\n\u8fd9\u6837\u8dd1\u8d39\u7528\u6d41\u5373\u53ef\u3002\n\ncode\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define maxn 505\n#define inf 1000000007\nusing namespace std;\ntypedef long long ll;\nll read()\n{\n    ll x=0,f=1;\n    char ch=getchar();\n    while(ch-'0'<0||ch-'0'>9){if(ch=='-') f=-1;ch=getchar();}\n    while(ch-'0'>=0&&ch-'0'<=9){x=x*10+ch-'0';ch=getchar();}\n    return x*f;\n}\nint n,m,s,t;\nstruct P{\n    int x,y;\n    ll v;\n}p[85];\nstruct X{\n    char d;\n    int a,b;\n}co[325];\nint Lx[85],Rx[85],Ly[85],Ry[85];\nint head[325],nxt[140010],to[140010],c[140010],tot;\nll v[140010];\nvoid add(int x,int y,int z,ll u)\n{\n    tot++;\n    nxt[tot]=head[x];\n    head[x]=tot;\n    to[tot]=y;\n    c[tot]=z;\n    v[tot]=u;\n}\nvoid addx(int x,int y,int z,ll u)\n{\n    add(x,y,z,u);\n    add(y,x,0,-u);\n}\nll ans,res,dis[325];\nint vis[325],pre[325],pre_num[325];\nqueue<int>q;\nint spfa()\n{\n    for(int i=1;i<=t;i++)  dis[i]=-1e18;\n    dis[s]=0;q.push(s);vis[s]=1;\n    while(q.size())\n    {\n        int now=q.front();q.pop();vis[now]=0;\n        for(int i=head[now];i;i=nxt[i])\n        {\n            if(dis[to[i]]<dis[now]+v[i]&&c[i])\n            {\n                dis[to[i]]=dis[now]+v[i];\n                pre[to[i]]=now;\n                pre_num[to[i]]=i;\n                if(!vis[to[i]])  q.push(to[i]),vis[to[i]]=1;\n            }\n        }\n    }\n    if(dis[t]==-1e18)  return 0;\n    int di=inf;\n    for(int i=t;i!=s;i=pre[i])  di=min(di,c[pre_num[i]]);\n    for(int i=t;i!=s;i=pre[i])  c[pre_num[i]]-=di,c[pre_num[i]^1]+=di;\n    ans+=dis[t]*di;\n    return di;\n}\nint main()\n{\n    n=read();\n    for(int i=1;i<=n;i++)  p[i].x=read(),p[i].y=read(),p[i].v=read();\n    m=read();\n    for(int i=1;i<=m;i++)  co[i].d=getchar(),co[i].a=read(),co[i].b=read();\n    for(int k=1;k<=n;k++)\n    {\n        tot=1;memset(head,0,sizeof(head));\n        s=2*k+2*n+1;t=s+1;\n        for(int i=1;i<=k;i++)  addx(s,i,1,0);\n        for(int i=k+2*n+1;i<=2*n+2*k;i++)  addx(i,t,1,0);\n        for(int i=k+1;i<=k+n;i++)  addx(i,i+n,1,p[i-k].v);\n        for(int i=1;i<=k;i++)  Lx[i]=Ly[i]=0,Rx[i]=Ry[i]=inf;\n        for(int i=1;i<=m;i++)\n        {\n            if(co[i].d=='U')\n            {\n                for(int j=1;j<=k-co[i].b;j++)  Ry[j]=min(Ry[j],co[i].a-1);\n            }\n            if(co[i].d=='D')\n            {\n                for(int j=co[i].b+1;j<=k;j++)  Ly[j]=max(Ly[j],co[i].a+1);\n            }\n            if(co[i].d=='L')\n            {\n                for(int j=co[i].b+1;j<=k;j++)  Lx[j]=max(Lx[j],co[i].a+1);\n            }\n            if(co[i].d=='R')\n            {\n                for(int j=1;j<=k-co[i].b;j++)  Rx[j]=min(Rx[j],co[i].a-1);\n            }\n        }\n        for(int i=1;i<=k;i++)\n          for(int j=1;j<=n;j++)\n            if(Lx[i]<=p[j].x&&p[j].x<=Rx[i])  addx(i,k+j,1,0);\n        for(int i=1;i<=k;i++)\n          for(int j=1;j<=n;j++)\n            if(Ly[i]<=p[j].y&&p[j].y<=Ry[i])  addx(k+n+j,k+2*n+i,1,0);\n        ans=0;\n        while(spfa()){};\n        res=max(res,ans);   \n    }\n    cout<<res<<endl;\n    return 0;\n}\n```",
        "postTime": 1583287990,
        "uid": 46396,
        "name": "justin_cao",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 AT4695 \u3010[AGC031E] Snuke the Phantom Thief\u3011"
    },
    {
        "content": "\u9650\u5236\u5f88\u590d\u6742\uff0c\u6570\u636e\u8303\u56f4\u4e0d\u50cf\u6307\u6570\u7ea7\u522b\uff0c\u770b\u8d77\u6765\u4e0d\u50cf\u80fd\u8d2a\u5fc3\u3002\u8fd9\u4e09\u70b9\u52a0\u8d77\u6765\u4f1a\u60f3\u5230\u5c1d\u8bd5\u4f7f\u7528\u6d41\u6765\u89e3\u51b3\u3002\n\n\u5c1d\u8bd5\u5bf9\u539f\u95ee\u9898\u76f4\u63a5\u5efa\u6a21\u3002\u7136\u800c\uff0c\u5728\u539f\u95ee\u9898\u4e0a\u5efa\u51fa\u7684\u6a21\u578b\u5e94\u8be5\u90fd\u662f\u8fd9\u79cd\u5f62\u5f0f\u7684\uff1a\u6c42\u51fa\u6bcf\u4e2a\u65b9\u5411\u4e0a\u6700\u4e25\u7684\u9650\u5236\uff0c\u7136\u540e\u6bcf\u4e2a\u70b9\u5411\u56db\u4e2a\u65b9\u5411\u7684\u9650\u5236\u5206\u522b\u8fde\u8fb9\u3002\u8fd9\u6837\u5e76\u4e0d\u662f\u7f51\u7edc\u6d41\u53ef\u4ee5\u89e3\u51b3\u7684\u6a21\u578b\u3002\u8fd9\u662f\u56e0\u4e3a\uff0c\u5728\u7f51\u7edc\u6d41\u7684\u6a21\u578b\u4e2d\uff0c\u6211\u4eec\u4e0d\u80fd\u7ed9\u4e00\u6761\u6d41\u91cf\u975e\u5355\u4f4d\u6d41\u91cf\u7684\u8fb9\u52a0\u4e0a\u201c\u8981\u4e48\u4e0d\u6d41\uff0c\u8981\u4e48\u6d41\u6ee1\u201d\u7684\u9650\u5236\u3002\u6362\u8a00\u4e4b\uff0c\u6211\u4eec\u4e0d\u80fd\u4fdd\u8bc1\u6bcf\u4e00\u4e2a\u9009\u4e2d\u7684\u70b9\u5728\u56db\u4e2a\u65b9\u5411\u4e0a\u7684\u9650\u5236\u90fd\u88ab\u6ee1\u8db3\u3002\u4e00\u65e6\u53d1\u73b0\u81ea\u5df1\u7684\u6a21\u578b\u5b58\u5728\u4e0a\u8ff0\u9650\u5236\uff0c\u90a3\u4e48\u4e00\u5b9a\u662f\u627e\u9519\u4e86\u65b9\u5411\u3002\u6b64\u65f6\u6700\u597d\u7684\u9009\u62e9\u662f\u5c1d\u8bd5\u518d\u5bfb\u627e\u4e00\u4e0b\u9898\u76ee\u6027\u8d28\uff0c\u518d\u6b21\u8f6c\u5316\u9898\u76ee\uff1b\u5426\u5219\u5c31\u4f1a\u5728\u9519\u8bef\u7684\u65b9\u5411\u4e0a\u6d6a\u8d39\u5f88\u591a\u65f6\u95f4\u3002\n\n\u90a3\u4e48\u8003\u8651\u539f\u9898\u5e94\u8be5\u600e\u4e48\u8fdb\u4e00\u6b65\u8f6c\u5316\u3002\u89c2\u5bdf\u539f\u9898\u7684\u9650\u5236\uff08\u4ee5 `L` \u4e3a\u4f8b\uff09\uff1a\u5728 $a_i$ \u5de6\u4fa7\u9009\u4e2d\u70b9\u7684\u4e2a\u6570\u4e0d\u5927\u4e8e $b_i$\u3002\u6b64\u9650\u5236\u53ef\u4ee5\u5012\u8fc7\u6765\uff0c\u5373\u4ece\u5de6\u5f80\u53f3\u6570\uff0c\u7b2c $b_i$ \u4e2a\u9009\u4e2d\u70b9\u5728 $a_i$ \u53f3\u4fa7\u3002\u8fd9\u6837\uff0c\u6211\u4eec\u53ef\u4ee5\u6c42\u51fa\u7b2c $b_i$ \u4e2a\u70b9\u6a2a\u5750\u6807\u7684\u4e0b\u754c\u3002\u8003\u8651\u56db\u4e2a\u9650\u5236\u4e00\u8d77\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u6c42\u51fa\u4ece\u5de6\u5f80\u53f3\u6570\u7b2c $b_i$ \u4e2a\u9009\u4e2d\u70b9\u7684\u6a2a\u5750\u6807\u9650\u5236\u3001\u4ece\u53f3\u5f80\u5de6\u7684\u3001\u4ece\u4e0a\u5f80\u4e0b\u7684\u3001\u4ece\u4e0b\u5f80\u4e0a\u7684\uff0c\u8fd9\u6837\u56db\u79cd\u9650\u5236\u3002\n\n\u56db\u79cd\u9650\u5236\u8fd8\u662f\u6709\u4e9b\u9ebb\u70e6\uff0c\u4f46\u662f\u8fd9\u4e9b\u9650\u5236\u6709\u4e24\u4e2a\u662f\u5173\u4e8e\u6a2a\u5750\u6807\u7684\uff0c\u53e6\u4e24\u4e2a\u662f\u5173\u4e8e\u7eb5\u5750\u6807\u7684\u3002\u8003\u8651\u679a\u4e3e\u6211\u4eec\u603b\u5171\u9009\u7684\u70b9\u7684\u4e2a\u6570\uff0c\u8fd9\u6837\u53ef\u4ee5\u6c42\u51fa\u4ece\u5de6\u5f80\u53f3\u6bcf\u4e2a\u9009\u4e2d\u70b9\u7684\u6a2a\u5750\u6807\u8303\u56f4\uff0c\u4ece\u4e0a\u5f80\u4e0b\u6bcf\u4e2a\u9009\u4e2d\u70b9\u7684\u7eb5\u5750\u6807\u8303\u56f4\u3002\u6839\u636e\u8fd9\u4e2a\u53ef\u4ee5\u8fdb\u4e00\u6b65\u6c42\u51fa\u6bcf\u4e2a\u70b9\u80fd\u5426\u6210\u4e3a\u4ece\u5de6\u5f80\u53f3\u6570\u7b2c $i$ \u4e2a\u70b9\uff0c\u80fd\u5426\u6210\u4e3a\u4ece\u4e0a\u5f80\u4e0b\u6570\u7b2c $i$ \u4e2a\u70b9\u3002\n\n\u8fd9\u6837\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\u4e00\u4e2a\u7ecf\u5178\u7684\u8d39\u7528\u6d41\u6a21\u578b\u3002\u5373\u4e3a\u6bcf\u4e2a\u70b9\u5206\u914d\u4e24\u4e2a\u5750\u6807\uff0c\u4e24\u4e2a\u5750\u6807\u5206\u522b\u4e0d\u80fd\u91cd\u590d\uff0c\u8981\u4f7f\u88ab\u5206\u914d\u4e86\u5750\u6807\u7684\u70b9\u70b9\u6743\u548c\u6700\u5927\u3002\u8bbe\u5750\u6807\u6709 $k$ \u4e2a\uff0c\u70b9\u6709 $n$ \u4e2a\u3002\u5219\u5efa\u6a21\u65b9\u6cd5\u662f\uff1a\n\n-   \u4ece\u6e90\u70b9\u5411 $k$ \u4e2a\u6a2a\u5750\u6807\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a $1$\uff0c\u8fb9\u6743\u4e3a $0$\u3002\n-    $k$ \u4e2a\u7eb5\u5750\u6807\u5411\u6c47\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a $1$\uff0c\u8fb9\u6743\u4e3a $0$\u3002\n-   \u4e2d\u95f4\u7684\u70b9\u62c6\u6210\u5de6\u53f3\u4e24\u90e8\u5206\uff0c\u5de6\u4fa7\u70b9\u5411\u53f3\u4fa7\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a $1$\uff0c\u8fb9\u6743\u4e3a\u8be5\u70b9\u70b9\u6743\u3002\n-   \u82e5\u67d0\u4e2a\u70b9\u53ef\u4ee5\u53d6\u5230\u67d0\u4e2a\u6a2a\u5750\u6807\uff0c\u4ece\u8be5\u6a2a\u5750\u6807\u5411\u5176\u5de6\u4fa7\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a $1$\uff0c\u8fb9\u6743\u4e3a $0$\u3002\n-   \u82e5\u67d0\u4e2a\u70b9\u53ef\u4ee5\u53d6\u5230\u67d0\u4e2a\u7eb5\u5750\u6807\uff0c\u4ece\u8be5\u7eb5\u5750\u6807\u5411\u5176\u53f3\u4fa7\u70b9\u8fde\u8fb9\uff0c\u6d41\u91cf\u4e3a $1$\uff0c\u8fb9\u6743\u4e3a $0$\u3002\n\n\u8fd9\u6837\uff0c\u539f\u70b9\u5230\u6c47\u70b9\u7684\u4e00\u6761\u6d41\u7684\u542b\u4e49\u662f\u4e3a\u4e2d\u95f4\u6d41\u8fc7\u7684\u70b9\u5206\u914d\u4e86\u5de6\u53f3\u6d41\u8fc7\u7684\u5750\u6807\uff0c\u8d39\u7528\u4e3a\u4e2d\u95f4\u90a3\u4e2a\u70b9\u7684\u70b9\u6743\u3002\n\n\u4ee3\u7801\u4f7f\u7528\u9ad8\u8d35\u7684 AtCoder Library \u5199\u6210\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#include<atcoder/all>\n#define int long long\nconst int N=1000005,inf=2e15;\nusing namespace atcoder;\nusing namespace std;\n\narray<int,N> a,b,c,d,x,y,w,A,B,C,D;// A \u4ece\u5de6\u5f80\u53f3\uff0cB \u4ece\u53f3\u5f80\u5de6\uff0cC \u4ece\u4e0a\u5f80\u4e0b\uff0cD \u4ece\u4e0b\u5f80\u4e0a\nint n,m;\n\nint calc(int k){\n\tmcf_graph<int,int> e(2*k+2*n+2);\n\tint s=0,t=2*k+2*n+1;\n\tfor(int i=1;i<=k;i++)\n    \te.add_edge(s,i,1,0),\n\t\te.add_edge(i+2*n+k,t,1,0);\n\tfor(int i=1;i<=n;i++){\n\t\te.add_edge(i+k,i+k+n,1,-w[i]+inf);\n\t\tfor(int j=1;j<=k;j++){\n\t\t\tif(x[i]>=A[j]&&x[i]<=B[k-j+1])\n\t\t\t\te.add_edge(j,i+k,1,0);\n\t\t\tif(y[i]>=C[j]&&y[i]<=D[k-j+1])\n\t\t\t\te.add_edge(i+k+n,j+k+n*2,1,0);\n\t\t}\n\t}\n\tauto x=e.flow(s,t);\n\treturn -x.second+inf*x.first;\n}\n\nvoid solve(){\n\tcin>>n;\n\tfor(int i=1;i<=n;i++)\n\t\tcin>>x[i]>>y[i]>>w[i];\n\tfill(B.begin(),B.end(),inf);\n\tfill(D.begin(),D.end(),inf);\n\tcin>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tchar t;int x,y;cin>>t>>x>>y;++y;\n\t\tif(t=='L')A[y]=max(A[y],x+1); \n\t\tif(t=='R')B[y]=min(B[y],x-1); \n\t\tif(t=='D')C[y]=max(C[y],x+1); \n\t\tif(t=='U')D[y]=min(D[y],x-1);\n\t}\n\tfor(int i=1;i<=n;i++)\n\t\tA[i]=max(A[i],A[i-1]),B[i]=min(B[i],B[i-1]),\n\t\tC[i]=max(C[i],C[i-1]),D[i]=min(D[i],D[i-1]);\n\tint ans=0;\n\tfor(int i=1;i<=n;i++)\n\t\tans=max(ans,calc(i));\n\tcout<<ans<<endl;\n}\n\nmain(){\n\tsolve();\n}\n```\n\n",
        "postTime": 1641786373,
        "uid": 79067,
        "name": "dottle",
        "ccfLevel": 10,
        "title": "AT4695"
    },
    {
        "content": "\u672c\u6587\u5c06\u540c\u6b65\u53d1\u5e03\u4e8e\uff1a\n\n- [\u6d1b\u8c37\u535a\u5ba2](https://www.luogu.com.cn/blog/Lu-Anlai/solution-at4695)\uff1b\n- [csdn](https://blog.csdn.net/Lu_Anlai/article/details/117451605)\uff1b\n- [\u535a\u5ba2\u56ed](https://www.cnblogs.com/Lu-Anlai/p/14838752.html)\uff1b\n- [\u7b80\u4e66](https://www.jianshu.com/p/cd0a16672db3)\u3002\n\n## \u9898\u76ee\n\n\u9898\u76ee\u94fe\u63a5\uff1a[\u6d1b\u8c37 AT4695](https://www.luogu.com.cn/problem/AT4695)\u3001[AtCoder agc031_e](https://atcoder.jp/contests/agc031/tasks/agc031_e)\u3002\n\n### \u9898\u610f\u7b80\u8ff0\n\n\u5728\u4e8c\u7ef4\u5e73\u9762\u4e0a\uff0c\u6709 $n$ \u9897\u73e0\u5b9d\uff0c\u7b2c $i$ \u9897\u73e0\u5b9d\u5728 $(x_i,y_i)$ \u7684\u4f4d\u7f6e\uff0c\u4ef7\u503c\u4e3a $v_i$\u3002\n\n\u73b0\u5728\u6709\u4e00\u4e2a\u76d7\u8d3c\u60f3\u8981\u5077\u8fd9\u4e9b\u73e0\u5b9d\u3002\n\n\u73b0\u5728\u7ed9\u51fa $m$ \u4e2a\u9650\u5236\u7ea6\u675f\u5077\u7684\u73e0\u5b9d\uff0c\u7ea6\u675f\u6709\u4ee5\u4e0b\u56db\u79cd\uff1a\n\n- \u6a2a\u5750\u6807\u5c0f\u4e8e\u7b49\u4e8e $a_i$ \u7684\u73e0\u5b9d\u6700\u591a\u5077 $b_i$ \u9897\u3002\n- \u6a2a\u5750\u6807\u5927\u4e8e\u7b49\u4e8e $a_i$ \u7684\u73e0\u5b9d\u6700\u591a\u5077 $b_i$ \u9897\u3002\n- \u7eb5\u5750\u6807\u5c0f\u4e8e\u7b49\u4e8e $a_i$ \u7684\u73e0\u5b9d\u6700\u591a\u5077 $b_i$ \u9897\u3002\n- \u7eb5\u5750\u6807\u5927\u4e8e\u7b49\u4e8e $a_i$ \u7684\u73e0\u5b9d\u6700\u591a\u5077 $b_i$ \u9897\u3002\n\n\u73b0\u5728\u95ee\u4f60\u5728\u6ee1\u8db3\u8fd9\u4e9b\u7ea6\u675f\u7684\u6761\u4ef6\u4e0b\uff0c\u76d7\u8d3c\u5077\u7684\u73e0\u5b9d\u7684\u6700\u5927\u4ef7\u503c\u548c\u662f\u591a\u5c11\u3002\n\n## \u9898\u89e3\n\n### \u7ea6\u675f\u4e0e\u8f6c\u5316\n\n\u8fd9\u4e2a\u7ea6\u675f\u6709\u70b9\u96be\u529e\uff0c\u4f3c\u4e4e\u5e76\u6ca1\u6709\u53ef\u80fd\u5bf9\u5176\u8fdb\u884c\u52a8\u6001\u89c4\u5212\uff0c\u56e0\u6b64\u6211\u4eec\u8003\u8651\u989d\u5916\u6dfb\u52a0\u4fe1\u606f\u3002\n\n\u6211\u4eec\u6dfb\u52a0\u4ec0\u4e48\u4fe1\u606f\u5462\uff1f\u8003\u8651\u5230\u9650\u5236\u662f\u6709\u5173\u73e0\u5b9d\u6570\u91cf\u7684\uff0c\u6211\u4eec\u51b3\u5b9a\u6dfb\u52a0\u4e00\u4e2a **\u5077\u73e0\u5b9d\u7684\u603b\u6570** \u7684\u4fe1\u606f\u3002\n\n\u8bbe\u5077\u73e0\u5b9d $k$ \u9897\uff0c\u5e76\u4e14\u73e0\u5b9d\u6309\u7167\u7684\u6a2a\u5750\u6807\u6392\u5e8f\u88ab\u5077\u7684\u987a\u5e8f\u7f16\u53f7\u4e3a $1\\sim k$\uff0c\u90a3\u4e48\u524d\u4e24\u79cd\u9650\u5236\u6761\u4ef6\u8f6c\u5316\u5982\u4e0b\uff1a\n\n- \u6a2a\u5750\u6807\u5c0f\u4e8e\u7b49\u4e8e $a_i$ \u7684\u73e0\u5b9d\u6700\u591a\u5077 $b_i$ \u9897\uff1a  \n\u82e5\u4e00\u4e2a\u73e0\u5b9d\u7684\u7f16\u53f7 $\\texttt{id}\\in[b_i+1,k]$\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709 $x_{\\texttt{id}}>a_i$\u3002\n- \u6a2a\u5750\u6807\u5927\u4e8e\u7b49\u4e8e $a_i$ \u7684\u73e0\u5b9d\u6700\u591a\u5077 $b_i$ \u9897\uff1a  \n\u82e5\u4e00\u4e2a\u73e0\u5b9d\u7684\u7f16\u53f7 $\\texttt{id}\\in[1,k-b_i]$\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709 $x_{\\texttt{id}}<a_i$\u3002\n\n\u540c\u7406\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u51fa\u73e0\u5b9d\u6309\u7167\u7684\u7eb5\u5750\u6807\u6392\u5e8f\u88ab\u5077\u7684\u987a\u5e8f\u7f16\u53f7\u4e3a $1\\sim k$\uff0c\u90a3\u4e48\u540e\u4e24\u79cd\u9650\u5236\u6761\u4ef6\u8f6c\u5316\u5982\u4e0b\uff1a\n\n- \u7eb5\u5750\u6807\u5c0f\u4e8e\u7b49\u4e8e $a_i$ \u7684\u73e0\u5b9d\u6700\u591a\u5077 $b_i$ \u9897\uff1a  \n\u82e5\u4e00\u4e2a\u73e0\u5b9d\u7684\u7f16\u53f7 $\\texttt{id}\\in[b_i+1,k]$\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709 $y_{\\texttt{id}}>a_i$\u3002\n- \u7eb5\u5750\u6807\u5927\u4e8e\u7b49\u4e8e $a_i$ \u7684\u73e0\u5b9d\u6700\u591a\u5077 $b_i$ \u9897\uff1a  \n\u82e5\u4e00\u4e2a\u73e0\u5b9d\u7684\u7f16\u53f7 $\\texttt{id}\\in[1,k-b_i]$\uff0c\u90a3\u4e48\u4e00\u5b9a\u6709 $y_{\\texttt{id}}<a_i$\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5f97\u51fa\uff0c\u4e00\u4e2a\u73e0\u5b9d\u60f3\u8981\u5728\u6309\u6a2a\u5750\u6807\u6392\u5e8f\u4e3a\u7b2c $i$\uff0c\u7eb5\u5750\u6807\u6392\u5e8f\u4e3a\u7b2c $j$ \u65f6\u88ab\u5077\uff0c\u9700\u8981\u6ee1\u8db3\u7684\u5750\u6807\u8303\u56f4\u3002\n\n### \u5316\u8150\u673d\u4e3a\u795e\u5947\u7684\u7f51\u7edc\u6d41\n\n\u8003\u8651\u4e0a\u9762\u7684\u6761\u4ef6\u4e5f\u4e0d\u662f\u5f88\u597d\u52a8\u6001\u89c4\u5212\uff0c\u6211\u4eec\u9700\u8981\u60f3\u5230\u4e00\u79cd\u5316\u8150\u673d\u4e3a\u795e\u5947\u7684\u7b97\u6cd5\u2014\u2014\u7f51\u7edc\u6d41\u3002\n\n\u7531\u4e8e\u8fd9\u4e2a\u9898\u76ee\u6709\u591a\u4e2a\u4e92\u4e0d\u76f8\u5173\u7684\u9650\u5236\uff1a\n\n- \u73e0\u5b9d\u4e0d\u80fd\u540c\u65f6\u88ab\u5077\u4e24\u6b21\u53ca\u4ee5\u4e0a\uff1b\n- \u5077\u7684\u73e0\u5b9d\u4ef7\u503c\u8981\u6700\u5927\u5316\uff1b\n\n\u6211\u4eec\u8003\u8651\u8fd0\u7528\u8d39\u7528\u6d41\u5efa\u7acb\u7f51\u7edc\u6d41\u6a21\u578b\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u8981\u9650\u5236\u6a2a\u5750\u6807\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6709 $k$ \u4e2a\u6a2a\u5750\u6807\u7684\u9650\u5236\uff0c\u5bf9\u5e94 $s\\to p_{1\\sim k}$\uff0c\u6d41\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $0$\u3002\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u8981\u9650\u5236\u7eb5\u5750\u6807\uff0c\u6240\u4ee5\u5fc5\u987b\u8981\u6709 $k$ \u4e2a\u7eb5\u5750\u6807\u7684\u9650\u5236\uff0c\u5bf9\u5e94 $q_{1\\sim k}\\to t$\uff0c\u6d41\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $0$\u3002\n\n\u56e0\u4e3a\u6211\u4eec\u8981\u9650\u5236\u4e00\u4e2a\u70b9\u4e0d\u80fd\u88ab\u9009\u62e9\u591a\u6b21\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u62c6\u70b9\u9650\u6d41\uff0c\u5bf9\u5e94 $a_{1\\sim n}\\to b_{1\\sim n}$\uff0c\u6d41\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $v_i$\u3002\n\n\u8003\u8651\u5230\u6211\u4eec\u4e0a\u9762\u9700\u8981\u6ee1\u8db3\u7684\u9650\u5236\uff0c\u6309\u7167\u9650\u5236\u52a0\u8fb9 $p_i\\to a_j$ \u548c $b_j\\to q_i$ \u5373\u53ef\uff0c\u6d41\u91cf\u4e3a $1$\uff0c\u8d39\u7528\u4e3a $0$\u3002\n\n\u5982\u679c\u4e0a\u9762\u7684\u8bed\u8a00\u6709\u70b9\u62bd\u8c61\uff0c\u6211\u4eec\u4e0d\u59a8\u753b\u56fe\u7406\u89e3\u3002\n\n![graph.png](https://i.loli.net/2021/06/01/rysYW3S2LXlApqO.png)\n\n\u6574\u4e2a\u5efa\u56fe\u5982\u4e0a\u6240\u793a\uff0c\u70b9\u6570\u4e3a $\\Theta(n^2)$\uff0c\u8fb9\u6570 $\\Theta(n^2)$\u3002\n\n### \u53c2\u8003\u7a0b\u5e8f\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n#define reg register\ntypedef long long ll;\n#define getchar() (p1==p2&&(p2=(p1=buf)+fread(buf,1,1<<21,stdin),p1==p2)?EOF:*p1++)\nstatic char buf[1<<21],*p1=buf,*p2=buf;\ninline int read(void){\n\treg char ch=getchar();\n\treg int res=0;\n\twhile(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch))res=10*res+(ch^'0'),ch=getchar();\n\treturn res;\n}\n\ninline ll readll(void){\n\treg char ch=getchar();\n\treg ll res=0;\n\twhile(!isdigit(ch))ch=getchar();\n\twhile(isdigit(ch))res=10*res+(ch^'0'),ch=getchar();\n\treturn res;\n}\n\ninline int max(reg int a,reg int b){\n\treturn a>b?a:b;\n}\n\ninline int min(reg int a,reg int b){\n\treturn a<b?a:b;\n}\n\ninline ll max(reg ll a,reg ll b){\n\treturn a>b?a:b;\n}\n\nconst int MAXN=80+5;\nconst int MAXM=320+5;\nconst int inf=0x3f3f3f3f;\n\nnamespace Network{\n\tconst int MAXV=4*MAXN;\n\tconst int MAXE=(MAXN*MAXN*2+3*MAXN)*2;\n\tconst ll inf=0x3f3f3f3f3f3f3f3f;\n\tint cnt,head[MAXV],to[MAXE],w[MAXE],Next[MAXE];\n\tll p[MAXE];\n\tinline void Add_Edge(reg int u,reg int v,reg int len,reg ll val){\n\t\tNext[++cnt]=head[u];\n\t\tto[cnt]=v,w[cnt]=len,p[cnt]=val;\n\t\thead[u]=cnt;\n\t\treturn;\n\t}\n\tinline void Add_Tube(reg int u,reg int v,reg int len,reg ll val){\n\t\tAdd_Edge(u,v,len,val);\n\t\tAdd_Edge(v,u,0,-val);\n\t\treturn;\n\t}\n\tbool inque[MAXV];\n\tint cur[MAXV];\n\tll dis[MAXV];\n\tqueue<int> Q;\n\tinline bool spfa(int s,reg int t){\n\t\tfill(dis+s,dis+t+1,inf);\n\t\tinque[s]=true,dis[s]=0,Q.push(s);\n\t\twhile(!Q.empty()){\n\t\t\treg int u=Q.front();\n\t\t\tQ.pop();\n\t\t\tinque[u]=false;\n\t\t\tcur[u]=head[u];\n\t\t\tfor(reg int i=head[u];i;i=Next[i]){\n\t\t\t\tint v=to[i];\n\t\t\t\tif(dis[v]>dis[u]+p[i]&&w[i]){\n\t\t\t\t\tdis[v]=dis[u]+p[i];\n\t\t\t\t\tif(!inque[v]){\n\t\t\t\t\t\tinque[v]=true;\n\t\t\t\t\t\tQ.push(v);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dis[t]!=inf;\n\t}\n\tbool vis[MAXV];\n\tinline int dfs(reg int u,reg int t,reg ll lim){\n\t\tif(u==t)\n\t\t\treturn lim;\n\t\tvis[u]=true;\n\t\treg int flow=0;\n\t\tfor(reg int &i=cur[u];i;i=Next[i]){\n\t\t\treg int v=to[i];\n\t\t\tif(dis[v]==dis[u]+p[i]&&w[i]&&!vis[v]){\n\t\t\t\treg int f=dfs(v,t,min(lim-flow,w[i]));\n\t\t\t\tif(f){\n\t\t\t\t\tflow+=f;\n\t\t\t\t\tw[i]-=f,w[i^1]+=f;\n\t\t\t\t\tif(flow==lim)\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tvis[u]=false;\n\t\treturn flow;\n\t}\n\tinline pair<int,ll> dinic(reg int s,reg int t){\n\t\tint res=0;\n\t\tll cost=0;\n\t\twhile(spfa(s,t)){\n\t\t\treg int flow=dfs(s,t,inf);\n\t\t\tres+=flow,cost+=flow*dis[t];\n\t\t}\n\t\treturn make_pair(res,cost);\n\t}\n\tinline void init(reg int s,reg int t){\n\t\tcnt=1,fill(head+s,head+t+1,0);\n\t\treturn;\n\t}\n}\n\nstruct Point{\n\tint x,y;\n\tll v;\n};\n\nstruct Limits{\n\tchar ch;\n\tint a,b;\n};\n\nstruct Interval{\n\tint l,r;\n\tinline Interval(reg int l=0,reg int r=0):l(l),r(r){\n\t\treturn;\n\t}\n\tinline bool in(reg int x)const{\n\t\treturn l<=x&&x<=r;\n\t}\n};\n\ninline Interval cap(const Interval& a,const Interval& b){\n\treturn Interval(max(a.l,b.l),min(a.r,b.r));\n}\n\nint n,m;\nPoint a[MAXN];\nLimits b[MAXM];\n\nint main(void){\n\tn=read();\n\tfor(reg int i=1;i<=n;++i)\n\t\ta[i].x=read(),a[i].y=read(),a[i].v=readll();\n\tm=read();\n\tfor(reg int i=1;i<=m;++i){\n\t\tdo\n\t\t\tb[i].ch=getchar();\n\t\twhile(!isalpha(b[i].ch));\n\t\tb[i].a=read(),b[i].b=read();\n\t}\n\treg ll ans=0;\n\tfor(reg int k=1;k<=n;++k){\n\t\tstatic Interval invx[MAXN],invy[MAXN];\n\t\tfill(invx+1,invx+k+1,Interval(-inf,inf));\n\t\tfill(invy+1,invy+k+1,Interval(-inf,inf));\n\t\tfor(reg int i=1;i<=m;++i){\n\t\t\tswitch(b[i].ch){\n\t\t\t\tcase 'L':{\n\t\t\t\t\tfor(reg int j=b[i].b+1;j<=k;++j)\n\t\t\t\t\t\tinvx[j]=cap(invx[j],Interval(b[i].a+1,inf));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'R':{\n\t\t\t\t\tfor(reg int j=1;j<=k-b[i].b;++j)\n\t\t\t\t\t\tinvx[j]=cap(invx[j],Interval(-inf,b[i].a-1));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'D':{\n\t\t\t\t\tfor(reg int j=b[i].b+1;j<=k;++j)\n\t\t\t\t\t\tinvy[j]=cap(invy[j],Interval(b[i].a+1,inf));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'U':{\n\t\t\t\t\tfor(reg int j=1;j<=k-b[i].b;++j)\n\t\t\t\t\t\tinvy[j]=cap(invy[j],Interval(-inf,b[i].a-1));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treg int s=0,t=2*k+2*n+1;\n\t\tNetwork::init(s,t);\n\t\tfor(reg int i=1;i<=k;++i){\n\t\t\tNetwork::Add_Tube(s,i,1,0);\n\t\t\tNetwork::Add_Tube(k+n+n+i,t,1,0);\n\t\t}\n\t\tfor(reg int i=1;i<=n;++i)\n\t\t\tNetwork::Add_Tube(k+i,k+n+i,1,-a[i].v);\n\t\tfor(reg int i=1;i<=k;++i)\n\t\t\tfor(reg int j=1;j<=n;++j){\n\t\t\t\tif(invx[i].in(a[j].x))\n\t\t\t\t\tNetwork::Add_Tube(i,k+j,1,0);\n\t\t\t\tif(invy[i].in(a[j].y))\n\t\t\t\t\tNetwork::Add_Tube(k+n+j,k+n+n+i,1,0);\n\t\t\t}\n\t\tpair<int,ll> res=Network::dinic(s,t);\n\t\tif(res.first==k)\n\t\t\tans=max(ans,-res.second);\n\t}\n\tprintf(\"%lld\\n\",ans);\n\treturn 0;\n}\n```\n",
        "postTime": 1622471284,
        "uid": 38502,
        "name": "agicy",
        "ccfLevel": 9,
        "title": "\u300c\u9898\u89e3\u300dagc031_e Snuke the Phantom Thief"
    },
    {
        "content": "## AT4695 [AGC031E] Snuke the Phantom Thief \u9898\u89e3\n\n[\u9898\u9762](https://www.luogu.com.cn/problem/AT4695) [\u4ee3\u7801](https://atcoder.jp/contests/agc031/submissions/12968364)\n\n---\n\n\u8fd9\u4e48\u5947\u602a\u7684\u9650\u5236\u548c\u6bd4\u8f83\u5c0f\u7684\u6570\u636e\u8303\u56f4\uff0c\u4e0d\u96be\u60f3\u5230\u7f51\u7edc\u6d41\u5427\u3002\n\n\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u7528\u6d41\u91cf\u6765\u9650\u5236\u5c0f\u8d3c\u7684\u53d6\u820d\uff0c\u4f46\u8fd9\u6761\u8def\u663e\u7136\u662f\u4e0d\u901a\u7684\u3002\n\n---\n\n\u6211\u4eec\u5148\u8003\u8651\u4e00\u7ef4\u3002\u628a\u4eec\u6392\u597d\u5e8f\uff0c\u6211\u4eec\u8f6c\u5316\u4e00\u4e0b\u9650\u5236\uff1a**\u679a\u4e3e\u5077\u7a83\u73e0\u5b9d\u4e2a\u6570k**\n\n- \u6a2a\u5750\u6807\u5c0f\u4e8e\u7b49\u4e8e $a_i$\u7684\u73e0\u5b9d\u6700\u591a\u5077 $b_i$\u4e2a $\\Leftrightarrow$ \u5982\u679c$k>b_i$\uff0c\u90a3\u4e48\u73e0\u5b9d\u7f16\u53f7$\\ge b_i+1$\uff0c\u5176\u6a2a\u7eb5\u6807$>a_i$\n\n- \u6a2a\u5750\u6807\u5927\u4e8e\u7b49\u4e8e $a_i$\u7684\u73e0\u5b9d\u6700\u591a\u5077 $b_i$\u4e2a $\\Leftrightarrow$ \u5982\u679c$k>b_i$\uff0c \u90a3\u4e48\u73e0\u5b9d\u7f16\u53f7$\\le k-b_i$\uff0c\u5176\u6a2a\u7eb5\u6807$<a_i$\n\n\u6211\u4eec\u53ef\u4ee5\u7684\u5f97\u5230\u6bcf\u4e00\u4e2a\u73e0\u5b9d\u7684\u53d6\u503c\u8303\u56f4\uff0c\u90a3\u4e48\u5077\u73e0\u5b9d\u76f8\u5f53\u4e8e$k$\u4e2a\u53d6\u503c\u8303\u56f4\uff0c\u548c$n$\u4e2a\u73e0\u5b9d\u7684\u4ef7\u503c\u505a\u4e8c\u5206\u56fe\u6700\u5927\u6743\u5339\u914d\u3002$EK$\u8d39\u7528\u6d41\u5373\u53ef\u3002\n\n\u4e24\u7ef4\u60c5\u51b5\uff0c\u548c\u4e00\u7ef4\u60c5\u51b5\u5dee\u4e0d\u591a\u5427\u3002\n\n\u5efa\u51fa\u6765\u7684\u56fe\u5927\u6982\u957f\u8fd9\u6837\uff1a(\u5efa\u56fe\u662f\u7f51\u7edc\u6d41\u7684\u7075\u9b42)\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/d1zcd10r.png)\n\n\u56fe\u4f8b\u4e2d\u8868\u793a$N=4,K=3$\u7684\u60c5\u51b5\u3002\n\n$x,y$\u8868\u793a\u6a2a\u7eb5\u5750\u6807\u4e0a\u7684\u53d6\u503c\u8303\u56f4\u3002\n\n$(a,b)$\u8868\u793a\u6d41\u91cf$a$,\u8d39\u7528$b$\u3002$w_i$\u8868\u793a\u6bcf\u4e2a\u73e0\u5b9d\u7684\u4ef7\u503c\u3002\n\n\u5176\u4e2d$x->a$ $A->y$\u4f1a\u6839\u636e\u5750\u6807\u662f\u5426\u5339\u914d\u8fde\u4e00\u4e9b$(1,0)$\u7684\u8fb9\uff08\u6ca1\u753b\u51fa\u6765\uff09\u3002\n\n\u6700\u540e\u8dd1\u4eceS\u5230T\u7684\u6700\u5927\u8d39\u7528\u6700\u5927\u6d41\u5c31\u53ef\u4ee5\u4e86\uff0c\u6ce8\u610f\u6700\u5927\u6d41\u5fc5\u987b\u7b49\u4e8ek\u65f6\u624d\u66f4\u65b0\u7b54\u6848\u3002\n",
        "postTime": 1590067463,
        "uid": 138511,
        "name": "GreenDay",
        "ccfLevel": 8,
        "title": "AT4695 [AGC031E] Snuke the Phantom Thief \u9898\u89e3"
    },
    {
        "content": "\u6765\u4e00\u4e2a\u4e0a\u4e0b\u754c\u6700\u5927\u8d39\u7528\u53ef\u884c\u6d41\u5efa\u6a21\u3002~~\u6211\u8fb9\u6570\u5c11\uff0c\u6211\u4e86\u4e0d\u8d77~~\n\n\u9996\u5148\u679a\u4e3e\u603b\u5171\u5077\u7684\u5b9d\u77f3\u6570\uff0c\u8bb0\u4e3a $k$\u3002\n\n\u90a3\u4e48 $\\sum [x_i\\ge a_i] \\le b_i\\iff \\sum[x_i\\le a_i-1]\\ge k-b_i$\n\n\u8bbe $sx_j=\\sum [x_i\\le j]$\uff0c\u5219\u9650\u5236 $L,R$ \u88ab\u8f6c\u5316\u4e3a $sx_i\\in [lx_i,rx_i]$ \u7684\u5f62\u5f0f\u3002$U,D$ \u540c\u7406\u3002\n\n\u56e0\u4e3a $sx$ \u662f\u524d\u7f00\u548c\u7684\u5f62\u5f0f\uff0c\u53ef\u4ee5\u60f3\u5230\u8ba9\u5b9d\u77f3\u5bf9\u5e94\u8fb9\uff0c\u6d41\u91cf\u4ee3\u8868\u5077\u4e0d\u5077\uff0c\u7136\u540e\u8ba9\u4ed6\u4eec\u6c47\u5165\u4e00\u6839\u6709\u5411\u7684\u94fe\uff0c\u8fd9\u6837\u94fe\u4e0a\u6bcf\u4e2a\u4f4d\u7f6e\u7684\u6d41\u91cf\u5c31\u662f $sx$\u3002\n\n\u5177\u4f53\u5730\uff0c\u8fde\u8fb9 $X_{i+1}\\to X_i$\uff0c\u6d41\u91cf $[lx_i,rx_i]$\uff1b\u8fde\u8fb9 $Y_i\\to Y_{i+1}$\uff0c\u6d41\u91cf $[ly_i,r_i]$\u3002\u8fd9\u4e9b\u8fb9\u8d39\u7528\u90fd\u662f $0$\u3002\n\n\u5bf9\u4e8e\u5b9d\u77f3 $(x,y,v)$\uff0c\u8fde\u8fb9 $X_x\\to Y_y$\uff0c\u5bb9\u91cf $1$\uff0c\u8d39\u7528 $v$\u3002\n\n\u4ee4\u6e90\u4e3a $S=X_{101}$\uff0c\u6c47\u4e3a $T=Y_{101}$\uff0c\u8fde\u8fb9 $T\\to S$\uff0c\u6d41\u91cf $[k,k]$\uff0c\u8d39\u7528 $0$\uff0c\u8868\u793a\u5fc5\u987b\u6070\u597d\u5077 $k$ \u9897\u5b9d\u77f3\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\nconst int N = 310;\nint n, m;\nint x[N], y[N];\nll v[N];\nint typ[N], a[N], b[N];\nint lim[N][4];\nint deg[N];\n\nint main() {\n\tcin.tie(0)->sync_with_stdio(0);\n\tcin >> n;\n\tF(i, 1, n) cin >> x[i] >> y[i] >> v[i];\n\tmap<char, int> mbg;\n\tmbg['L'] = 0;\n\tmbg['R'] = 1;\n\tmbg['D'] = 2;\n\tmbg['U'] = 3;\n\tcin >> m;\n\tF(i, 1, m) {\n\t\tstring s;\n\t\tcin >> s >> a[i] >> b[i];\n\t\ttyp[i] = mbg[s[0]];\n\t}\n\tll ans = 0;\n\tF(i, 1, 101) F(j, 0, 3) lim[i][j] = n;\n\tF(i, 1, m) chkmn(lim[a[i]][typ[i]], b[i]);\n\n\tflow::s = 203, flow::t = flow::n = 204;\n\tusing flow::add;\n\tauto myadd = [](int u, int v, int l, int r, ll c) {\n\t\tif (l > r) throw 1;\n\t\tadd(u, v, c, r - l);\n\t\tdeg[u] += l, deg[v] -= l;\n\t};\n\tF(tot, 1, n) { try {\n\t\tif (tot > lim[1][1] || tot > lim[1][3]) throw 1;\n\t\tmemset(deg, 0, sizeof deg);\n\t\tflow::reset();\n\t\tF(i, 1, 100) {\n\t\t\tint lower = max(0, tot - lim[i + 1][1]), upper = lim[i][0];\n\t\t\tmyadd(i + 1, i, lower, upper, 0);\n\t\t}\n\t\tF(i, 1, 100) {\n\t\t\tint lower = max(0, tot - lim[i + 1][3]), upper = lim[i][2];\n\t\t\tmyadd(i + 101, i + 102, lower, upper, 0);\n\t\t}\n\t\tmyadd(202, 101, tot, tot, 0);\n\t\tF(i, 1, n) myadd(x[i], y[i] + 101, 0, 1, -v[i]);\n\t\tll sum = 0;\n\t\tF(i, 1, 202) if (deg[i]) {\n\t\t\tif (deg[i] < 0)\n\t\t\t\tadd(flow::s, i, 0, -deg[i]);\n\t\t\telse\n\t\t\t\tadd(i, flow::t, 0, deg[i]), sum += deg[i];\n\t\t}\n\t\tflow::mcmf();\n\t\tif (flow::flow == sum) {\n\t\t\tans = max(ans, -flow::cost);\n\t\t}\n\t} catch (...) { } }\n\tcout << ans << \"\\n\";\n}\n```",
        "postTime": 1683427122,
        "uid": 550235,
        "name": "Misaka14285",
        "ccfLevel": 0,
        "title": "solution-agc031-e"
    }
]