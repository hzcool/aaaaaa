[
    {
        "content": "\u57fa\u7840\u56fe\u8bba\u3002\n\n\u8003\u8651\u5feb\u901f\u6c42\u51fa $d(s, t)$\uff0c\u90a3\u4e48\u8fb9\u6743\u8981 $+1$ \u7684\u8fb9\u4ec5\u5f53\u8fb9\u6743\u7b49\u4e8e $d(s, t)$ \u65f6\u7b54\u6848\u53ef\u80fd\u4e3a $1$\u3002\u6c42 $d(s, t)$ \u53ef\u4ee5\u5efa\u51fa Kruskal \u91cd\u6784\u6811\uff0c\u67e5\u4e24\u70b9 $\\text{LCA}$ \u70b9\u6743\u5f97\u51fa\u3002\n\n\u8003\u8651\u628a\u8be2\u95ee\u79bb\u7ebf\uff0c\u628a\u76f8\u540c\u7684 $d(s, t)$ \u7684\u8be2\u95ee\u548c\u76f8\u540c\u8fb9\u6743\u7684\u8fb9\u653e\u5728\u4e00\u8d77\u8003\u8651\u3002\u8fb9\u6743 $< d(s, t)$ \u7684\u8fb9\u5728\u4e4b\u524d\u5408\u5e76\u3002\u73b0\u5728\u95ee\u9898\u53d8\u6210\u4e86\u6709\u4e00\u4e2a\u56fe\uff0c\u8be2\u95ee\u5047\u8bbe\u5220\u6389\u5176\u4e2d\u4e00\u6761\u8fb9\uff0c\u4f1a\u4e0d\u4f1a\u4f7f\u5f97\u4e24\u70b9\u4e0d\u8fde\u901a\u3002\u8fb9\u53cc\u7f29\u70b9\u540e\uff0c\u5982\u679c\u8fd9\u6761\u8fb9\u5728\u4e00\u4e2a\u8fb9\u53cc\u5185\uff0c\u6216\u8005\u4e24\u70b9\u5728\u540c\u4e00\u8fb9\u53cc\u5185\uff0c\u7b54\u6848\u663e\u7136\u4e3a $0$\uff0c\u5426\u5219\u67e5\u8fd9\u6761\u8fb9\u662f\u5426\u5728\u4e24\u70b9\u8def\u5f84\u4e0a\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $O(m \\log m)$\u3002\n\n[code](https://atcoder.jp/contests/abc301/submissions/41438878)",
        "postTime": 1684204860,
        "uid": 275273,
        "name": "zltqwq",
        "ccfLevel": 0,
        "title": "ABC301Ex \u9898\u89e3"
    },
    {
        "content": "\u5efa\u7acb\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u4e24\u70b9\u8def\u5f84\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u5373\u4e3a `MST` \u4e0a\u4e24\u70b9\u8def\u5f84\u6700\u5927\u8fb9\u6743\u3002\n\n\u8bbe\u4fee\u6539\u8fb9 $(x,y)$\uff0c\u539f\u6743\u503c\u4e3a $w$\u3002\n\n\u9996\u5148\u67e5\u8be2 $s$ \u5230 $t$ \u7684\u6700\u5c0f\u74f6\u9888\u662f\u5426\u662f $w$\uff0c\u5982\u679c\u4e0d\u662f\uff0c\u663e\u7136\u6ca1\u6709\u5f71\u54cd\u3002\n\n\u5426\u5219\u95ee\u9898\u8f6c\u5316\u4e3a\uff1a\u4ec5\u8003\u8651\u8fb9\u6743 $\\leq w$ \u7684\u8fb9\uff0c$(x,y)$ \u662f\u5426\u4e3a $s,t$ \u4e4b\u95f4\u7684\u5272\u8fb9\u3002\n\n\u5c06\u8be2\u95ee\u79bb\u7ebf\u4e0b\u6765\uff0c\u626b\u63cf\u7ebf\u6309\u8fb9\u6743\u6392\u5e8f\uff0c\u5c06\u8fb9\u6743 $\\leq w$ \u7684\u975e\u6811\u8fb9 $(u,v)$ \u52a0\u5165\uff0c\u5c06 $u$ \u5230 $v$ \u7684\u70b9\u5408\u5e76\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u3002\n\n\u6700\u540e\u67e5\u8be2 $s,t$ \u70b9\u662f\u5426\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e14 $(x,y)$ \u662f\u5426\u5728 $s,t$ \u5728 `MST` \u7684\u8def\u5f84\u4e0a\u5373\u53ef\uff0c\u56e0\u4e3a\u52a0\u7684\u662f\u975e\u6811\u8fb9\uff0c\u6240\u4ee5\u82e5 $s,t$ \u4e0d\u8fde\u901a\u5219\u65e0\u6cd5\u4ece $s$ \u901a\u8fc7\u975e\u6811\u8fb9\u5230\u8fbe $t$\uff0c\u6545\u6b64\u65f6 $(x,y)$ \u4e3a\u5272\u8fb9\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n \\log n)$\u3002",
        "postTime": 1684212884,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "[ABC301Ex] Difference of Distance \u9898\u89e3"
    },
    {
        "content": "\u8003\u8651\u6309\u8fb9\u6743\u5206\u5c42\uff0c\u4ece\u5c0f\u5f80\u5927\u52a0\u8fb9\u3002\n\n\u8003\u8651\u6bcf\u4e00\u5c42\u5728\u4e0a\u4e00\u5c42\u7684\u57fa\u7840\u4e0a\u7f29\u8fb9\u53cc\u3002\u5bf9\u4e8e\u6d89\u53ca\u5230\u5f53\u524d\u5c42\u8fb9\u7684\u8be2\u95ee\uff0c\u5176\u7b54\u6848\u4e3a $1$\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a\n\n- \u5728\u8fd9\u5c42\u7684\u8fb9\u52a0\u5165\u4e4b\u524d\uff0c$S$ \u4e0e $T$ \u4e0d\u8fde\u901a\u3002\n\n- \u8fb9 $A$ \u4e3a\u5f53\u524d\u5c42\u7684\u56fe\u7684\u5272\u8fb9\uff08\u5982\u679c\u4e0d\u662f\uff0c\u90a3\u4e48 $S$ \u53ef\u4ee5\u4ece\u5176\u4ed6\u8def\u5f84\u8d70\u5230 $T$\uff0c\u6700\u5927\u8fb9\u6743\u4e0d\u53d8\uff09\n\n- \u8fdb\u4e00\u6b65\u7684\uff0c$A$ \u5904\u4e8e\u8fb9\u53cc\u68ee\u6797\u4e2d $S$ \u4e0e $T$ \u7684\u8def\u5f84\u4e0a\u3002\n\n\u800c\u6811\u4e0a\u8fb9 $(u,v)$ \u5728 $s \\to t$ \u7684\u8def\u5f84\u4e0a\u7b49\u4ef7\u4e8e $dis(u,s)+dis(u,t)=dis(s,t)$ \u4e14 $dis(v,s)+dis(v,t)=dis(s,t)$\u3002\n\n\u5728\u5177\u4f53\u5b9e\u73b0\u65f6\uff0c\u6211\u4f7f\u7528\u4e86 set \u5224\u65ad\u5272\u8fb9\uff0c\u5e76\u67e5\u96c6\u7ef4\u62a4\u8054\u901a\u6027\uff0c\u518d\u5728\u8fb9\u53cc\u6811\u4e0a\u6811\u5256\uff0c\u590d\u6742\u5ea6\u4e3a $O(n \\log n)$\u3002\u5b9e\u73b0\u4ee3\u7801\u65f6\u7ec6\u8282\u8f83\u591a\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define pii pair<int,int>\n#define mp make_pair\nusing namespace std;\nconst int N=200005;\nint n,m,Q,idx,ru[N],rv[N],col[N],dfn[N],low[N],fa[N],fu[N],fv[N],ans[N];\nint tr[N],siz[N],dep[N],top[N],tfa[N],son[N];\nset<pii>cut; vector<int>b; vector<pii>e[N];\ninline int find(int x){ return fa[x]==x?fa[x]:fa[x]=find(fa[x]); }\nstruct O{ int u,v,w,id; }; vector<O>o[N],q[N];\ninline void tarjan(int u,int fa){\n    dfn[u]=low[u]=++idx;\n    for(int i=0;i<e[u].size();i++){\n        int v=e[u][i].first,w=e[u][i].second;\n        if(!dfn[v]){\n            tarjan(v,w);\n            low[u]=min(low[u],low[v]);\n            if(low[v]>dfn[u]) cut.insert(mp(u,v)),cut.insert(mp(v,u));\n        }\n        else if(w!=fa) low[u]=min(low[u],dfn[v]);\n    }\n}\ninline void dfs(int u){\n    col[u]=1;\n    for(int i=0;i<e[u].size();i++){\n        int v=e[u][i].first;\n        if(col[v]||cut.count(mp(u,v))) continue;\n        fa[find(v)]=find(u); dfs(v);\n    }\n}\ninline void dfs1(int u){\n\tsiz[u]=1;\n\tfor(int i=0;i<e[u].size();i++){\n        int v=e[u][i].first;\n\t\tif(v==tfa[u]) continue;\n\t\ttfa[v]=u; dep[v]=dep[u]+1; tr[v]=tr[u];\n\t\tdfs1(v); siz[u]+=siz[v];\n\t\tif(siz[v]>siz[son[u]]) son[u]=v;\n\t}\n}\ninline void dfs2(int u,int tp){\n\ttop[u]=tp;\n\tif(!son[u]) return;\n\tdfs2(son[u],tp);\n\tfor(int i=0;i<e[u].size();i++){\n        int v=e[u][i].first;\n\t\tif(v==tfa[u]||v==son[u]) continue;\n\t\tdfs2(v,v);\n\t}\n}\ninline int lca(int u,int v){\n\twhile(top[u]!=top[v]){\n\t\tif(dep[top[u]]<dep[top[v]]) swap(u,v);\n\t\tu=tfa[top[u]];\n\t}\treturn dep[u]<dep[v]?u:v;\n}\ninline int dist(int x,int y){\n\tif(!tr[x]||!tr[y]||tr[x]!=tr[y]) return inf;\n\treturn dep[x]+dep[y]-2*dep[lca(x,y)];\n}\nint main(){\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n    cin>>n>>m;\n    for(int i=1,u,v,w;i<=m;i++){\n        cin>>u>>v>>w; ru[i]=u; rv[i]=v;\n        o[w].emplace_back(O{u,v,w,i});\n    }\n    cin>>Q;\n    for(int i=1,x,s,t;i<=Q;i++){\n        cin>>x>>s>>t;\n        q[x].emplace_back(O{s,t,0,i});\n    }\n    for(int i=1;i<=n;i++) fa[i]=i;\n    for(int i=1;i<=m;i++){\n        for(int j=0;j<o[i].size();j++){\n            int u=find(o[i][j].u),v=find(o[i][j].v);\n            if(e[u].empty()) b.emplace_back(u);\n            if(e[v].empty()) b.emplace_back(v);\n            e[u].emplace_back(mp(v,j)); e[v].emplace_back(mp(u,j));\n            fu[j]=u; fv[j]=v;\n        }\n        for(int j=0;j<b.size();j++) if(!dfn[b[j]]) tarjan(b[j],-1);\n        for(int j=0;j<b.size();j++) if(!col[b[j]]) dfs(b[j]);\n        for(int j=0;j<b.size();j++) e[b[j]].clear();\n        for(int j=0;j<o[i].size();j++){\n            int y=o[i][j].id;\n            if(!cut.count(mp(fu[j],fv[j]))) continue;\n            int u=find(ru[y]),v=find(rv[y]);\n            e[u].emplace_back(mp(v,0));\n            e[v].emplace_back(mp(u,0));\n        }\n\t\tfor(int j=0;j<b.size();j++) if(find(b[j])==b[j]&&!tr[b[j]]){\n\t\t\ttr[b[j]]=++idx;\n\t\t\tdfs1(b[j]); dfs2(b[j],b[j]);\n\t\t}\n\t\tfor(int j=0;j<o[i].size();j++){\n            int y=o[i][j].id;\n            if(!cut.count(mp(fu[j],fv[j]))) continue;\n            int xu=find(ru[y]),xv=find(rv[y]);\n            for(int k=0;k<q[y].size();k++){\n                int u=find(q[y][k].u),v=find(q[y][k].v);\n                if(u!=v&&dist(xu,u)+dist(xu,v)==dist(u,v)&&dist(xv,u)+dist(xv,v)==dist(u,v))\n\t\t\t\t\tans[q[y][k].id]=1;\n            }\n        }\n        for(int j=0;j<o[i].size();j++) fa[find(o[i][j].u)]=find(o[i][j].v);\n        for(int j=0;j<b.size();j++)\n\t\t\tlow[b[j]]=dfn[b[j]]=col[b[j]]=dep[b[j]]=tr[b[j]]=tfa[b[j]]=son[b[j]]=top[b[j]]=siz[b[j]]=0,e[b[j]].clear();\n\t\tcut.clear(); b.clear();\n    }\n    for(int i=1;i<=Q;i++) cout<<ans[i]<<'\\n';\n    return 0;\n}\n```\n",
        "postTime": 1683988295,
        "uid": 236862,
        "name": "DitaMirika",
        "ccfLevel": 7,
        "title": "ABC301Ex"
    },
    {
        "content": "\u56e0\u4e3a\u672c\u9898\u8981\u6c42\u7684\u662f\u6700\u5c0f\u74f6\u9888\u8def\uff0c\u53ef\u4ee5\u8003\u8651\u5efa\u51fa\u539f\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u90a3\u4e48\u6700\u5c0f\u74f6\u9888\u4e00\u5b9a\u4e3a MST \u4e0a\u4e24\u70b9\u8def\u5f84\u8fb9\u6743\u7684\u6700\u5927\u503c\u3002\n\n\u8003\u8651\u4fee\u6539\u4e00\u6761\u8fb9\u4f1a\u6709\u4ec0\u4e48\u5f71\u54cd\uff0c\u53ef\u4ee5\u53d1\u73b0\uff0c\u9664\u975e\u4f60\u4fee\u6539\u7684\u8fd9\u6761\u8fb9\u6070\u4e3a s \u5230 t \u7684\u74f6\u9888\uff0c\u4f60\u7684\u4fee\u6539\u662f\u4e00\u5b9a\u6ca1\u6709\u8d21\u732e\u7684\u3002\u82e5\u5b83\u4e3a\u74f6\u9888\u8fb9\uff0c\u8bbe\u5176\u6743\u503c\u4e3a $w$\uff0c\u5219\u82e5\u52a0\u5165\u6240\u6709\u6743\u503c $\\le w$ \u7684\u975e\u6811\u8fb9\u8fdb\u53bb\u540e $(s,t)$ \u80fd\u8054\u901a\uff0c\u7b54\u6848\u4ecd\u4e0d\u53d8\u3002\n\n\u5177\u4f53\u7ef4\u62a4\u65f6\uff0c\u6211\u4eec\u53ef\u4ee5\u5c06\u6240\u6709\u8fb9\u6309 $w$ \u6392\u5e8f\uff0c\u6bcf\u6b21\u5c06\u975e\u6811\u8fb9\u7684 $(u,v)$ \u5728\u6811\u4e0a\u7684\u8def\u5f84\u4e0a\u7684\u6240\u6709\u70b9\u5408\u5e76\u8fdb\u4e00\u4e2a\u5e76\u67e5\u96c6\u4e2d\uff0c\u8fd9\u6837\uff0c\u6bcf\u6b21\u65ad\u5f00\u6811\u8fb9 $(x,y)$ \u65f6\uff08\u8bbe $x$ \u4e3a\u6df1\u5ea6\u8f83\u5927\u7684\u90a3\u4e2a\u70b9\uff09\uff0c\u6211\u4eec\u53ea\u9700\u67e5\u8be2 $x$ \u662f\u5426\u4e0e\u5b83\u7684\u7956\u5148\u4e2d\u4efb\u610f\u4e00\u4e2a\u5728\u540c\u4e00\u4e2a\u5e76\u67e5\u96c6\u5185\u5373\u53ef\u3002\n\n[Code](https://atcoder.jp/contests/abc301/submissions/41639401)",
        "postTime": 1684811849,
        "uid": 360977,
        "name": "541forever",
        "ccfLevel": 0,
        "title": "ABC301Ex"
    },
    {
        "content": "\u7b80\u5355\u9898\uff01\n\n\u6211\u4eec\u76f4\u63a5\u6765\u89e3\u51b3\u4efb\u610f\u4fee\u6539\u8fb9\u6743\u7684\u95ee\u9898\u3002\u5148\u5efa\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811\u51fa\u6765\u3002\n\n\u8003\u8651\u4fee\u6539\u4e00\u6761\u8fb9 $(u,v)$ \u540e\u6700\u5c0f\u751f\u6210\u6811\u4f1a\u53d1\u751f\u4ec0\u4e48\u53d8\u5316\uff1a\n\n- \u82e5 $(u,v)$ \u4e0d\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\uff0c\u81ea\u7136\u5730\uff0c\u6700\u5c0f\u751f\u6210\u6811\u4e0d\u4f1a\u53d1\u751f\u53d8\u5316\u3002\n- \u5426\u5219\uff0c\u8003\u8651\u8fd9\u68f5\u6811\u4e0a $(u,v)$ \u8fd9\u6761\u8fb9\u65ad\u5f00\u540e\u5f62\u6210\u7684\u4e24\u4e2a\u8fde\u901a\u5757\uff0c\u6b64\u65f6\u5e94\u5f53\u9009\u62e9\u4e24\u8fb9\u5206\u522b\u5728\u4e24\u8fde\u901a\u5757\u5185\u7684\u6700\u5c0f\u8fb9\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e8c\u79cd\u8fb9\uff0c\u5bb9\u6613\u60f3\u5230\u8f6c DFS \u5e8f\u6c42\u77e9\u5f62\u6700\u5c0f\u503c\uff0c\u53ef\u4ee5\u7b80\u5355\u505a\u5230 $O(N\\log^2N)$\uff1b\u4e0d\u8fc7\u5b9e\u9645\u4e0a\u6211\u4eec\u53ef\u4ee5\u5bf9\u6bcf\u6761\u975e\u6811\u8fb9 $(x,y,z)$\uff0c\u5728 $x,y$ \u7684\u7ebf\u6bb5\u6811\u4e0a\u5206\u522b\u5728 $\\text{DFN}(y),\\text{DFN}(x)$ \u5904\u63d2\u5165 $z$\u3002\u6700\u540e\u505a\u4e00\u904d\u7ebf\u6bb5\u6811\u5408\u5e76\u5373\u53ef\u5bf9\u6bcf\u4e2a\u70b9\u6c42\u51fa\u300c\u4e00\u7aef\u70b9\u5728\u8fd9\u4e2a\u5b50\u6811\u5185\uff0c\u4e00\u7aef\u70b9\u5728\u5b50\u6811\u5916\u300d\u7684\u6240\u6709\u975e\u6811\u8fb9\u7684\u8fb9\u6743\u6700\u5c0f\u503c\u3002\u8fd9\u6837\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(N\\log N)$\u3002\n\n\u8fd8\u9700\u8981\u5199\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\u7ef4\u62a4\u6811\u4e0a\u4e24\u70b9\u8fb9\u6743\u6700\u5c0f\u503c\u3002\u8fd9\u4e9b\u90fd\u53ef\u4ee5\u5728 $O(N\\log N)$ \u65f6\u95f4\u5185\u5b8c\u6210\uff0c\u4e8e\u662f\u5c31\u5f97\u5230\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(N\\log N)$ \u7684\u5728\u7ebf\u7b97\u6cd5\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\n#define ll long long\n\nusing namespace std;\n\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\tfor(;(c<'0'||c>'9');c=getchar()){if(c=='-')f=-1;}\n\tfor(;(c>='0'&&c<='9');c=getchar())x=x*10+(c&15);\n\treturn x*f;\n}\n\nconst int mod=1e9+7;\nint ksm(int x,int y,int p=mod){\n\tint ans=1;\n\tfor(int i=y;i;i>>=1,x=1ll*x*x%p)if(i&1)ans=1ll*ans*x%p;\n\treturn ans%p;\n}\nint inv(int x,int p=mod){return ksm(x,p-2,p)%p;}\nint randint(int l,int r){return rand()*rand()%(r-l+1)+l;}\nvoid add(int &x,int v){x+=v;if(x>=mod)x-=mod;}\nvoid Mod(int &x){if(x>=mod)x-=mod;}\n\nconst int N=2e5+5;\n\n#define fi first\n#define se second\n#define mk make_pair\n\nint st[N],ed[N],n,m,q,ww[N];\n\nstruct S{\n\tint u,v,w;\n\tS(int U,int V,int W):u(U),v(V),w(W){}\n\tS(){}\n};\nS op(S x,S y){\n\tif(x.w<y.w)return x;\n\telse return y;\n}\nconst int INF=1e9;\nS e(){return S(0ll,0ll,INF);}\nstruct Node{int ls,rs;S val;};\nint root[N];\nstruct SegTree{\n\tNode d[N<<5];int tot;\n\t#define ls(p) (d[p].ls)\n\t#define rs(p) (d[p].rs)\n\tvoid clear(){tot=0;for(int i=0;i<(N<<5);i++)d[i].ls=d[i].rs=0,d[i].val=e();}\n\tvoid pushup(int p){d[p].val=op(d[ls(p)].val,d[rs(p)].val);}\n\tvoid ins(int x,S k,int ql,int qr,int &p){\n\t\tif(!p)p=++tot;\n\t\tif(ql==qr){d[p].val=op(d[p].val,k);return ;}\n\t\tint mid=(ql+qr)>>1;\n\t\tif(x<=mid)ins(x,k,ql,mid,ls(p));\n\t\tif(x>mid)ins(x,k,mid+1,qr,rs(p));\n\t\tpushup(p);\n\t}\n\tS qmin(int l,int r,int ql,int qr,int p){\n\t\tif((!p)||l>r)return e();\n\t\tif(l<=ql&&qr<=r)return d[p].val;\n\t\tint mid=(ql+qr)>>1;S ans=e();\n\t\tif(l<=mid)ans=op(ans,qmin(l,r,ql,mid,ls(p)));\n\t\tif(r>mid)ans=op(ans,qmin(l,r,mid+1,qr,rs(p)));\n\t\treturn ans;\n\t}\n\tint merge(int p,int q,int l,int r){\n\t\tif(!p||!q)return p+q;\n\t\tif(l==r){d[p].val=op(d[p].val,d[q].val);return p;}\n\t\tint mid=(l+r)>>1;\n\t\td[p].ls=merge(ls(p),ls(q),l,mid),d[p].rs=merge(rs(p),rs(q),mid+1,r);\n\t\tpushup(p);return p;\n\t}\n}T;\n\nstruct Edge{\n\tint to,cost;\n\tEdge(int T,int C):to(T),cost(C){}\n\tEdge(){}\n};\nvector<Edge>G[N];\nvoid adde(int u,int v,int w){\n\tG[u].emplace_back(Edge(v,w));\n\tG[v].emplace_back(Edge(u,w));\n}\n\nstruct zkw{\n\tint d[N<<2],M,k;\n\tvoid build(int n){\n\t\tk=0,M=1;while(M<n)M<<=1,k++;\n\t\tfor(int i=1;i<=M+M-1;i++)d[i]=0;\n\t}\n\tvoid upd(int p){d[p]=max(d[p<<1],d[p<<1|1]);}\n\tvoid Set(int p,int x){\n\t\td[p+=M-1]=x;\n\t\tfor(int i=1;i<=k;i++)upd(p>>i);\n\t}\n\tint qmax(int l,int r){\n\t\tint res=0;\n\t\tfor(l+=M-1,r+=M;l<r;l>>=1,r>>=1){\n\t\t\tif(l&1)res=max(res,d[l++]);\n\t\t\tif(r&1)res=max(res,d[--r]);\n\t\t}\n\t\treturn res;\n\t}\n}Y;\n\nnamespace HLD{\n\tint dep[N],fa[N],sz[N],dfn[N],top[N],hson[N],dis[N],fval[N];\n\t\n\tvoid dfs1(int u,int de){\n\t\tdep[u]=de,sz[u]=1;\n\t\tfor(auto e:G[u]){\n\t\t\tint v=e.to,w=e.cost;\n\t\t\tif(v==fa[u])continue;\n\t\t\tfval[v]=w,fa[v]=u,dfs1(v,de+1),sz[u]+=sz[v];\n\t\t\tif(sz[v]>sz[hson[u]])hson[u]=v;\n\t\t}\n\t}\n\t\n\tint tot=0;\n\tvoid dfs2(int u,int tp){\n\t\ttop[u]=tp,dfn[u]=++tot;\n\t\tif(u==hson[fa[u]])dis[u]=max(dis[fa[u]],fval[u]);\n\t\telse dis[u]=fval[u];\n\t\tif(hson[u])dfs2(hson[u],tp);\n\t\tfor(auto e:G[u]){\n\t\t\tint v=e.to;\n\t\t\tif(v==fa[u]||v==hson[u])continue;\n\t\t\tdfs2(v,v);\n\t\t}\n\t}\n\t\n\tvoid DS_build(){\n\t\tY.build(n);\n\t\tfor(int i=2;i<=n;i++)Y.Set(dfn[i],fval[i]);\n\t}\n\t\n\tint dist(int u,int v){\n\t\tint res=0;\n\t\twhile(top[u]!=top[v]){\n\t\t\tif(dep[top[u]]<dep[top[v]])swap(u,v);\n\t\t\tres=max(res,dis[u]),u=fa[top[u]];\n\t\t}\n\t\tif(dep[u]>dep[v])swap(u,v);\n\t\tres=max(res,Y.qmax(dfn[u]+1,dfn[v]));\n\t\treturn res;\n\t}\n};\n\nusing HLD::dist;\nusing HLD::dfn;\nusing HLD::sz;\nS val[N];\n\nvoid dfs(int u,int fa){\n\tfor(auto e:G[u]){\n\t\tint v=e.to,w=e.cost;\n\t\tif(v==fa)continue;\n\t\tdfs(v,u),root[u]=T.merge(root[u],root[v],1,n);\n\t}\n\tval[u]=op(T.qmin(1,dfn[u]-1,1,n,root[u]),T.qmin(dfn[u]+sz[u],n,1,n,root[u]));\n}\n\nint fa[N];\nint find(int x){return x==fa[x]?x:fa[x]=find(fa[x]);}\n\nstruct Ed{int u,v,w,id;}E[N];\nbool intree[N];\n\nbool is_anc(int x,int y){\n\treturn dfn[y]<=dfn[x]+sz[x]-1&&dfn[y]>=dfn[x];\n}\n\nsigned main(void){\n\n#ifdef YUNQIAN\n\tfreopen(\"in.in\",\"r\",stdin);\n\tfreopen(\"out.out\",\"w\",stdout);\n#endif\n\n\tn=read(),m=read();\n\tfor(int i=1;i<=m;i++)st[i]=E[i].u=read(),ed[i]=E[i].v=read(),ww[i]=E[i].w=read(),E[i].id=i;\n\tsort(E+1,E+m+1,[](const Ed &x,const Ed &y){return x.w<y.w;});\n\tfor(int i=1;i<=n;i++)fa[i]=i;\n\tT.clear();\n\tfor(int i=1;i<=m;i++){\n\t\tint u=find(E[i].u),v=find(E[i].v),w=E[i].w;\n\t\tif(u!=v)fa[u]=v,adde(E[i].u,E[i].v,w),intree[E[i].id]=1;\n\t}\n\tHLD::dfs1(1,1),HLD::dfs2(1,1),HLD::DS_build();\n\tfor(int i=1;i<=m;i++)if(!intree[i]){\n\t\tT.ins(dfn[ed[i]],S(st[i],ed[i],ww[i]),1,n,root[st[i]]);\n\t\tT.ins(dfn[st[i]],S(st[i],ed[i],ww[i]),1,n,root[ed[i]]);\n\t}\n\tdfs(1,0);\n\tq=read();\n\twhile(q--){\n\t\tint id=read(),u=read(),v=read();\n\t\tif(!intree[id]){cout<<0<<'\\n';continue;}\n\t\tif(dfn[st[id]]>dfn[ed[id]])swap(st[id],ed[id]);\n\t\tassert(HLD::fa[ed[id]]==st[id]);int p=ed[id];\n\t\tif(is_anc(p,v)==is_anc(p,u)){cout<<0<<'\\n';continue;}\n\t\tif(!is_anc(p,u))swap(u,v);assert(is_anc(p,u));\n\t\tS edge=op(val[p],S(ed[id],st[id],ww[id]+1));\n\t\tif(!is_anc(p,edge.u))swap(edge.u,edge.v);assert(is_anc(p,edge.u));\n\t\tcout<<max(edge.w,max(dist(edge.u,u),dist(edge.v,v)))-dist(u,v)<<'\\n';\n\t}\n\n\treturn 0;\n}\n```",
        "postTime": 1684228716,
        "uid": 307453,
        "name": "\u4e91\u6d45\u77e5\u5904",
        "ccfLevel": 6,
        "title": "Difference of Distance"
    }
]