[
    {
        "content": "# [\u6d1b\u8c37\u9898\u9762](https://www.luogu.com.cn/problem/AT_keyence2021_c)\n\n## [Atcoder\u9898\u9762](https://atcoder.jp/contests/keyence2021/tasks/keyence2021_c)\n\n### [\u9898\u9762\u7ffb\u8bd1]\n\u6709 $H$ \u884c $W$ \u5217\u7684\u683c\u70b9\u3002\u4ece\u4e0a\u5230\u7b2c $i$ \u884c\uff0c\u4ece\u5de6\u5230\u7b2c $j$ \u5217\u7684\u683c\u5199\u4e3a ($i$\uff0c$j$)\u3002\u6bcf\u4e2a\u683c\u5b50\u90fd\u53ef\u4ee5\u5199\u5165 $R$\uff0c$D$\uff0c$X$ \u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u5b57\u7b26\u3002\u9996\u5148\uff0c\u6bcf\u4e2a\u683c\u5b50\u90fd\u6ca1\u6709\u5199\u6587\u5b57\u3002\n\n\u4f60\u53ef\u4ee5\u9009\u62e9\u4e86 $K$ \u4e2a\u683c\u5199\u4e86\u6587\u5b57\u3002\u7b2c $i$ \u4e2a\u5199\u5165\u6587\u5b57\u7684\u683c\uff08$H_i,W_i$\uff09,\u5199\u5165\u7684\u6587\u5b57\u662f $C_i$\u3002\u5728\u5269\u4f59\u7684\u683c\u4e0a\u5199\u6587\u5b57\u7684\u65b9\u6cd5\u6709 $3^{HW-K}$\u3002\n\n\u5bf9\u4e8e\u6bcf\u79cd\u60c5\u51b5\uff0c\u8bf7\u8ba1\u7b97\u4ee5\u4e0b\u95ee\u9898\u7684\u7b54\u6848\uff1a\n\n\u6c42\u51fa\u5176\u603b\u548c\u9664\u4ee5 $998244353$ \u7684\u4f59\u6570\u3002\n\n\u6709\u53ef\u5728\u4e0a\u8ff0\u7f51\u683c\u4e0a\u79fb\u52a8\u7684\u673a\u5668\u4eba\u3002\u673a\u5668\u4eba\u5728\uff08$i,j$\uff09\u65f6\uff0c\u53ef\u4ee5\u79fb\u52a8\u5230\uff08$i+1,j$\uff09\uff0c($i,j+1$\uff09\uff0c\uff08$i+1,j$\uff09\uff0c\uff08$i,j+1$\uff09\u4e2d\u7684\u4efb\u610f\u4e00\u4e2a\u3002\u4f46\u662f\uff0c\u5982\u679c\uff08$i,j$\uff09\u4e2d\u5199\u7740 $R$\uff0c\u5219\u53ea\u80fd\u5728\uff08$i,j+1$\uff09\u4e2d\u79fb\u52a8\uff0c\u5982\u679c\u5199\u7740 $D$\uff0c\u5219\u53ea\u80fd\u5728\uff08$i+1,j$\uff09\u4e2d\u79fb\u52a8\u3002\u5199\u7740 $X$ \u7684\u60c5\u51b5\u4e0b\u90fd\u53ef\u4ee5\u79fb\u52a8\u3002\n\n\u5f53\u673a\u5668\u4eba\u5728\uff08$1,1$\uff09\u65f6\uff0c\u673a\u5668\u4eba\u4e0d\u51fa\u7f51\u683c\u800c\u5230\u8fbe\uff08$H,W$\uff09\u7684\u79fb\u52a8\u8def\u5f84\u6709\u51e0\u79cd\uff1f\n\n\u6ce8\u610f\uff1a\u673a\u5668\u4eba\u5728\u5230\u8fbe\uff08$H,W$\uff09\u65f6\u505c\u6b62\u3002\n\n### [\u601d\u8def]\n\n\n\u5f88\u5bb9\u6613\u77e5\u9053\uff1a\n\n\u673a\u5668\u4eba\u5728\u6240\u6709\u5b57\u6bcd\u586b\u7a7a\u65b9\u5f0f\u4e2d\u4ece\uff08$1,1$\uff09\u5230\uff08$H,W$\uff09\u53ef\u91c7\u7528\u7684\u8def\u5f84\u6570\u4e4b\u548c\u7b49\u4e8e\u4ee5\u4e0b\u503c\uff1a\n\n\u5bf9\u4e8e\u4ece\uff08$1,1$\uff09\u5230\uff08$H,W$\uff09\u7684\u6240\u6709\u8def\u5f84\uff0c\u673a\u5668\u4eba\u53ef\u91c7\u7528\u7684\u5b57\u6bcd\u4e66\u5199\u65b9\u5f0f\u6570\u4e4b\u548c\u3002\n\n### \uff08\u8fd9\u91cc\u6709\u70b9\u7ed5\uff0c\u53ef\u4ee5\u5148\u7406\u89e3\u4e00\u4e0b\uff0c\u518d\u770b\u540e\u9762\u7684\uff09\n\n\u8ba9\u6211\u4eec\u8bd5\u7740\u627e\u5230\u540e\u8005\uff0c\u800c\u4e0d\u662f\u5904\u7406\u524d\u8005\u3002\u6211\u4eec\u5047\u8bbe\uff0c\u4ece\u4e00\u4e2a\u7a7a\u6b63\u65b9\u5f62\u5f00\u59cb\uff0c\u4e24\u79cd\u79fb\u52a8\u90fd\u53ef\u7528\uff1a\u5411\u53f3\u548c\u5411\u4e0b\u3002\n\n\u8bbe $dp[H][W][K]$ \u662f\u673a\u5668\u4eba\u53ef\u4ee5\u4ece\uff08$1,1$\uff09\u5230\uff08$H,W$\uff09\u7a7f\u8fc7 $K$ \u4e2a\u7a7a\u6b63\u65b9\u5f62\u7684\u8def\u5f84\u6570\uff0c\u6211\u4eec\u9700\u8981\u5199\u4e0b\u4e0e\u673a\u5668\u4eba\u4ece\u8be5\u65b9\u5757\u8d70\u7684\u65b9\u5411\u76f8\u5bf9\u5e94\u7684\u5b57\u6bcd\uff0c\u5bf9\u5e94\u673a\u5668\u4eba\u4ece\u8be5\u65b9\u683c\u8d70\u8fc7\u7684\u65b9\u5411\u3002\n\n#### \u5728\u5176\u4ed6\u65b9\u683c\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5199\u4efb\u4f55\u5b57\u6bcd\u3002\n\n\u56e0\u6b64\uff0c\u7b54\u6848\u662f\n $$\\sum_{1 \\leq k \\leq H+W} \\mathrm{dp}(H,W,k) 2^{k}3^{HW-K-k}$$ \n\u53ef\u4ee5\u53d1\u73b0\u662f\u679a\u4e3e $3$ \u4e2a\u7ef4\u5ea6\u3002\n\n\u6240\u4ee5\uff0c\u4e00\u773c\u5c31\u770b\u51fa\u53d1\u73b0\u65f6\u95f4\u4f1a\u70b8\uff0c\u4e8e\u662f\uff1a\n\n\u8003\u8651\u5c06 $3$ \u7ef4\u5316\u4e3a $2$ \u7ef4\u3002\n\n\u5728\u8fd9\u91cc\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8f6c\u6362\u4e2d\u5c06\u6570\u5b57\u4e58\u4ee5 $\\frac{1}{2}$\u3002\n\n\u800c\u4e0d\u662f\u5c06 $k$ \u4f5c\u4e3a\u72b6\u6001\u7684\u4e00\u90e8\u5206\u6700\u540e\uff0c\u6211\u4eec\u53ef\u4ee5\u5728 $O(H \\times W)$ \u65f6\u95f4\u5185\u627e\u5230\u5b83\u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u8fd9\u5bf9\u4e8e $H,W \\leq 5000$ \u5b8c\u5168\u8db3\u591f\u7684\u3002\n\n### \u7279\u6b8a\u7684\uff1a\n\n\u53ef\u4ee5\u5c1d\u8bd5\u4f7f\u7528\u5feb\u901f\u5e42\u4f18\u5316\uff0c\u518d\u52a0\u4e0a\u4e00\u70b9\u70b9\u7ec4\u5408\u6570\uff0c\u540c\u6837\u53ef\u4ee5 AC \u8fd9\u9053\u9898\u54e6\u3002\n\n------------\n\u8fd9\u91cc\u53ea\u8d34\u4e86\u4f7f\u7528\u5feb\u901f\u5e42\u4f18\u5316\u7684\u7248\u672c\u54e6\u3002\n\n\u5bf9\u4e8e\u524d\u9762\u63d0\u5230\u7684\u57fa\u7840\u7248\u7684\u4e8c\u7ef4\u6570\u7ec4\u5c31\u4ea4\u7ed9\u5404\u4f4d\u53bb\u5904\u7406\u4e86\u3002\n\n## $Code:$\n\n```cpp\n#include<bits/stdc++.h>\n#define ll long long\nusing namespace std;\nconst ll mod=998244353;\nll n,m,k,f[5010][5010],a[5010][5010];\nll ksm(ll x,ll y){\n\tll ans=1;\n\tfor(int i=y;i;i>>=1){\n\t\tif(i&1)ans=ans*x%mod;\n\t\tx=x*x%mod;\n\t}\n\treturn ans;\n}\nint main(){\n\tll i,j,x,y,op;\n\tchar s[10];\n\tscanf(\"%lld%lld%lld\",&n,&m,&k);\n\tfor(i=1;i<=k;i++){\n\t\tscanf(\"%lld%lld%s\",&x,&y,s);\n\t\tif(s[0]=='R')a[x][y]=1;\n\t\telse if(s[0]=='D')a[x][y]=2;\n\t\telse a[x][y]=3;\n\t}\n\tf[1][1]=ksm(3,n*m-k);\n\top=ksm(3,mod-2);\n\tfor(i=1;i<=n;i++){\n\t \tfor(j=1;j<=m;j++){\n\t\t \tif(i+j>2){\n\t\t\t \tif(i>1){\n\t\t\t \t\tif(!a[i-1][j])f[i][j]=(f[i][j]+f[i-1][j]*op%mod*2)%mod;\n\t\t\t \t\t else if(a[i-1][j]!=1)f[i][j]=(f[i][j]+f[i-1][j])%mod;\n\t\t\t \t}\n\t\t\t \tif(j>1){\n\t\t\t \t\tif(!a[i][j-1])f[i][j]=(f[i][j]+f[i][j-1]*op%mod*2)%mod;\n\t\t\t \t\t else if(a[i][j-1]!=2)f[i][j]=(f[i][j]+f[i][j-1])%mod;\n\t\t\t \t}\n\t\t \t}\n\t\t}\t \n\t}\n\t\n\tprintf(\"%lld\",f[n][m]);\n}\n```\n",
        "postTime": 1677314784,
        "uid": 701254,
        "name": "Mu_leaf",
        "ccfLevel": 4,
        "title": "AT_keyence2021_c [Robot on Grid] \u9898\u89e3"
    },
    {
        "content": "## Preface\n\n\u80fd\u4e0d\u80fd\u64a4\u4e0b\u73b0\u5728\u8fd9\u4e2a shabier \u673a\u7ffb\u9898\u89e3\u554a\uff1f\n\n## Solution\n\n**\u4e00\u4e9b\u4e60\u60ef\u6027\u8868\u8fbe** \u4e0b\u6587\u79f0\u81ea\u5df1\u8bbe\u5b9a\u7b26\u53f7\u7684\u672a\u6307\u5b9a\u683c\u5b50\u4e3a W\uff0c\u7528 $n, m, s$ \u5206\u522b\u66ff\u6362 $H, W, K$\u3002\n\n\u76f4\u63a5\u9b54\u6539\u4e00\u4e0b\u65b9\u683c\u53d6\u6570\u662f\u9519\u7684\uff0c\u56e0\u4e3a\u53ef\u80fd\u4e0d\u5728\u8def\u5f84\u4e0a\u7684 W \u548c\u5728\u8def\u5f84\u4e0a\u7684 W \u5747\u80fd\u4ea7\u751f\u4e00\u5b9a\u7684\u8d21\u732e\u7cfb\u6570\u3002\n\n\u5177\u4f53\u5730\uff0c\u8ba9 $f_{i,j,k}$ \u8868\u793a\u4ece $(1, 1)$ \u5230 $(i, j)$ \u7ecf\u8fc7\u4e86 $k$ \u4e2a W \u7684\u65b9\u6848\u6570\uff0c\u90a3\u4e48\u6700\u540e\u7684\u603b\u7b54\u6848\u662f $\\displaystyle \\sum_{k=1}^{n+m-1}f_{n,m,k}\\times 2^k \\times 3^{nm - s - k}$\uff0c\u56e0\u4e3a\u8003\u8651\u5728\u8def\u5f84\u4e0a\u7684 W \u8981\u4e48\u8bbe\u7f6e\u6210\u8def\u5f84\u65b9\u5411\u8981\u4e48\u8bbe\u7f6e\u6210 `X`\uff0c\u800c\u4e0d\u5728\u8def\u5f84\u4e0a\u7684 W \u662f\u53ef\u4ee5\u4efb\u610f\u8bbe\u7f6e\u7684\u3002\n\n\u66b4\u529b\u662f $\\mathcal O(nm(n+m))$ \u7684\u7acb\u65b9\uff0c\u8003\u8651\u4f18\u5316\u3002\u6211\u4eec\u53ef\u4ee5\u5728\u539f\u5f0f\u5b50\u91cc\u628a\u6240\u6709\u548c $k$ \u76f8\u5173\u7684\u9879\u5355\u72ec\u63d0\u51fa\u6765\uff0c\u4e5f\u5c31\u662f $3^{nm - s}\\times \\displaystyle \\sum_{k=1}^{n+m-1}f_{n,m,k}\\times (\\dfrac{2}{3})^k$\uff01\n\n\u8fd9\u6837\u8bbe $g_{i,j} = 3^{nm - s}\\times \\displaystyle \\sum_{k=1}^{n+m-1}f_{n,m,k}\\times (\\dfrac{2}{3})^k$\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6574\u4f53\u5730\u6bcf\u7ecf\u8fc7\u4e00\u4e2a W \u7ed9 $g_{i,j}$ \u4e58 $\\dfrac 23$ \u5373\u53ef\uff0c\u5373\u53ef\u505a\u5230 $\\mathcal O(nm)$\u3002\n\n## Code\n\n\u975e\u5e38\u7b80\u6d01\uff0c\u5982\u679c\u6211\u7684\u62bd\u8c61\u63cf\u8ff0\u770b\u4e0d\u61c2\u53ef\u4ee5\u7406\u89e3\u3002\n\n```cpp\n#include <bits/stdc++.h>\nnamespace FastIO {\n\ttemplate <typename T> inline T read() { T x = 0, w = 0; char ch = getchar(); while (ch < '0' || ch > '9') w |= ch == '-', ch = getchar(); while (ch >= '0' && ch <= '9') x = (x << 1) + (x << 3) + (ch ^ 48), ch = getchar(); return w ? ((~x) + 1) : x; }\n\ttemplate <typename T> inline void write(T x) { x && (write<T>(x / 10), putchar(x % 10 ^ '0')); }\n\ttemplate <typename T> inline void print(T x) { x || putchar('0'); x < 0 && (putchar('-'), x = (~x) + 1); write<T>(x); }\n\ttemplate <typename T> inline void print(T x, char end) { x || putchar('0'); x < 0 && (putchar('-'), x = (~x) + 1); write<T>(x), putchar(end); }\n};\nusing namespace FastIO;\n\nnamespace Maths {\n\tconst int MAXN = 1;\n\tconstexpr long long MOD = 998244353;\n\tlong long qpow(long long a, long long x) { long long ans = 1; while (x) (x & 1) && (ans = ans * a % MOD), a = a * a % MOD, x >>= 1; return ans; }\n\tlong long qpow(long long a, long long x, long long p) { long long ans = 1; while (x) (x & 1) && (ans = ans * a % p), a = a * a % p, x >>= 1; return ans; }\n\tlong long frac[MAXN], prac[MAXN];\n\tinline void inis(int V) {\n\t\tfrac[0] = prac[0] = 1; for (int i = 1; i <= V; ++i) frac[i] = frac[i - 1] * i % MOD;\n\t\tprac[V] = qpow(frac[V], MOD - 2); for (int i = V - 1; i; --i) prac[i] = prac[i + 1] * (i + 1) % MOD;\n\t}\n\tinline long long C(int N, int M) { return frac[N] * prac[M] % MOD * prac[N - M] % MOD; }\n\tinline long long gcd(long long x, long long y) { return y ? gcd(y, x % y) : x; }\n\tinline long long lcm(long long x, long long y) { return x / gcd(x, y) * y; }\n\tstd::pair<long long, long long> exgcd(long long x, long long y) {\n\t\tif (!y) return std::make_pair(1ll, 0ll);\n\t\tstd::pair<long long, long long> k = exgcd(y, x % y);\n\t\treturn std::make_pair(k.second, k.first - k.second * (x / y));\n\t}\n\tlong long inv(long long a, long long p) { return (exgcd(a, p).first % p + p) % p; }\n\tstruct modulo { long long p, v; modulo (long long P = 1, long long V = 0) : p(P), v(V) {} };\n\tmodulo merge(modulo a, modulo b) {\n\t\tif ((b.v - a.v) % gcd(a.p, b.p) != 0) return modulo(-1, -1);\n\t\tlong long d = (b.v - a.v) / gcd(a.p, b.p);\n\t\tstd::pair<long long, long long> k = exgcd(a.p, b.p);\n\t\tlong long q = (k.first * d * a.p + a.v) % lcm(a.p, b.p);\n\t\tq = (q + lcm(a.p, b.p)) % lcm(a.p, b.p);\n\t\treturn modulo(lcm(a.p, b.p), q);\n\t}\n};\ntemplate <typename T, const T p> class modint {\n\tprivate: T v;\n\tpublic:\n\t\tmodint () {} modint (const T& x) { v = x; }\n\t\tmodint operator - () const { return p - v; }\n\t\tmodint operator + (const modint& a) const { return v + a() < p ? v + a() : v + a() - p; }\n\t\tmodint operator - (const modint& a) const { return v - a() > 0 ? v - a() : v - a() + p; }\n\t\tmodint operator * (const modint& a) const { return 1ll * v * a() % p; }\n\t\tmodint operator / (const modint& a) const { return 1ll * v * Maths::inv(a(), p) % p; }\n\t\tmodint operator += (const modint& a) { (v += a()) >= p && (v -= p); return v; }\n\t\tmodint operator -= (const modint& a) { (v -= a()) < 0 && (v += p); return v; }\n\t\tmodint operator *= (const modint& a) { return (v = 1ll * v * a() % p); }\n\t\tmodint operator /= (const modint& a) { return (v = 1ll * v * Maths::inv(a(), p) % p); }\n\t\tT operator()(void) const { return v; }\n\t\tfriend std::istream &operator >> (std::istream &is, modint &a) { is >> a.v; return is; }\n\t\tfriend std::ostream &operator << (std::ostream &os, const modint &a) { return os << a(); }\n};\n\nusing mint = modint<int, 998244353>;\nconst mint P = 665496236; // 2 / 3\n// \u6bcf\u4e00\u6761\u8def\u5f84\u7684\u8d21\u732e\u4e3a 3^(NM - K) * P^s \u7684\u5f62\u5f0f\uff0c\u5176\u4e2d s \u662f\u7ecf\u8fc7\u7684 ? \u4e2a\u6570\u3002\n\n#define MAXN 5001\nmint dp[MAXN][MAXN];\nchar m[MAXN][MAXN];\nint main() {\n\tint N = read<int>(), M = read<int>(), K = read<int>();\n\tmemset(m, '?', sizeof m);\n\tfor (int i = 1, x, y; i <= K; ++i) x = read<int>(), y = read<int>(), m[x][y] = getchar();\n//\tfor (int i = 1; i <= N; ++i) for (int j = 1; j <= M; ++j) \n//\t\tputchar(m[i][j]), putchar(\" \\n\"[j == M]);\n\tfor (int i = 1; i <= N; ++i) for (int j = 1; j <= M; ++j) if (i != 1 || j != 1) {\n\t\tif (m[i][j - 1] != 'D') dp[i][j] += dp[i][j - 1];\n\t\tif (m[i - 1][j] != 'R') dp[i][j] += dp[i - 1][j];\n\t\tif (m[i][j] == '?') dp[i][j] *= P;\n\t} else dp[i][j] = Maths::qpow(3, N * M - K);\n//\tfor (int i = 1; i <= N; ++i) for (int j = 1; j <= M; ++j) \n//\t\tstd::cout << dp[i][j] << \" \\n\"[j == M];\n\treturn std::cout << dp[N][M], 0;\n}\n```",
        "postTime": 1685157629,
        "uid": 419487,
        "name": "irris",
        "ccfLevel": 7,
        "title": "AT_keyence2021_c Solution"
    }
]