[
    {
        "content": "\u9996\u5148\u6211\u4eec\u679a\u4e3e\u6240\u6709\u5408\u6cd5\u7684\u72b6\u6001\u4e0b\u7684\u751f\u6210\u6811\u3002\u6709\u4e00\u79cd\u679a\u4e3e\u65b9\u6cd5\u662f\u94a6\u5b9a\u4e00\u4e2a\u8fb9\u4e00\u5b9a\u88ab\u9009\uff0c\u7136\u540e\u518d\u6c42\u8fd9\u4e2a\u8fb9\u88ab\u9009\u7684\u60c5\u51b5\u4e0b\u7684\u6700\u5c0f\u751f\u6210\u6811\uff0c\u8fd9\u6837\u679a\u4e3e\u81f3\u5c11\u53ef\u4ee5\u4e0d\u6f0f\u5730\u679a\u4e3e\u51fa\u6240\u6709\u7684\u60c5\u51b5\uff08\u8003\u8651\u8fd9\u4e2a\u8fb9\u67d3\u9ed1\uff0c\u5176\u4ed6\u8fb9\u968f\u4fbf\uff09\u3002\n\n\u90a3\u4e48\u5982\u679c\u6ca1\u6709\u6743\u503c\u548c\u4e3a $X$ \u7684\u751f\u6210\u6811\u90a3\u5c31\u7b54\u6848\u4e3a $0$\uff0c\u4e0d\u7136\u7684\u8bdd\u5c31\u7ee7\u7eed\u7b97\u3002\n\n\u5982\u679c $X_i < X$\uff0c\u90a3\u4e48\u6ee1\u8db3\u6761\u4ef6\u7684\u8bdd\u8fd9\u6761\u8fb9\u4e00\u5b9a\u4e0d\u80fd\u751f\u6210\u5176\u5bf9\u5e94\u7684\u6240\u6709\u6700\u5c0f\u751f\u6210\u6811\u3002\u8981\u6ee1\u8db3\u8981\u6c42\u8fd8\u9700\u8981\u6ee1\u8db3\u81f3\u5c11\u5b58\u5728\u4e00\u6761\u8fb9 $\\langle u_i,v_i,w_i \\rangle$ \u4f7f\u5f97\u8fd9\u6761\u8fb9\u5bf9\u5e94\u7684\u6700\u5c0f\u751f\u6210\u6811\u4e3a $X$\u3002\n\n\u90a3\u4e48\u5982\u679c\u6574\u4e2a\u56fe\u7684\u6700\u5c0f\u751f\u6210\u6811\u7684\u6743\u503c\u5c31\u662f $X$\uff0c\u6bd4\u8f83\u597d\u529e\u3002\u8bb0\u6709 $p$ \u6761\u8fb9\u5f3a\u5236\u88ab\u9009\u540e\u6ee1\u8db3\u5176\u5bf9\u5e94\u7684\u6700\u5c0f\u751f\u6210\u6811\u6743\u503c\u548c\u4e3a $X$\u3002\u9996\u5148\u53e6\u5916 $m-p$ \u6761\u8fb9\u53ef\u4ee5\u968f\u4fbf\u9009\uff0c\u56e0\u4e3a\u5982\u679c\u9009\u5230\u5b83\u4eec\u80af\u5b9a\u4e0d\u4f18\u6240\u4ee5\u80af\u5b9a\u4e0d\u4f1a\u9009\u5230\uff1b\u5269\u4e0b\u7684 $p$ \u6761\u8fb9\uff08\u53ef\u4ee5\u6784\u6210\u82e5\u5e72\u6700\u5c0f\u751f\u6210\u6811\uff09\u6709\u989c\u8272\u4e0d\u80fd\u76f8\u540c\u7684\u9650\u5236\uff0c\u7b54\u6848\u662f $(2^p-2)2^{m-p}$\u3002\n\n\u4e0d\u7136\u5c31\u5b58\u5728\u751f\u6210\u6811\u6743\u503c\u5c0f\u4e8e $X$\u3002\u6211\u4eec\u627e\u5230\u90a3\u4e9b\u5f3a\u5236\u9009\u4e86\u4e4b\u540e\u4f1a\u8ba9\u6700\u5c0f\u751f\u6210\u6811\u6743\u503c\u5c0f\u4e8e $X$ \u7684\u8fb9\uff0c\u5047\u8bbe\u6709 $p$ \u6761\uff1b\u4f1a\u8ba9\u6700\u5c0f\u751f\u6210\u6811\u6743\u503c\u4e3a $X$ \u7684\u8fb9\u5047\u8bbe\u6709 $q$ \u6761\u3002\u9996\u5148\u4e0d\u80fd\u8ba9\u90a3\u4e9b\u8ba9\u6700\u5c0f\u751f\u6210\u6811\u6743\u503c\u4e0d\u8db3 $X$ \u7684\u8fb9\u5f62\u6210\u5408\u6cd5\u751f\u6210\u6811\uff0c\u5b83\u4eec\u7684\u989c\u8272\u5168\u90e8\u76f8\u540c\uff1b\u7136\u540e\u662f\u53e6\u5916\u7684 $m-p-q$ \u6761\u8fb9\u4ecd\u7136\u4efb\u610f\u9009\uff1b\u6700\u540e\u662f\u8fd9 $q$ \u6761\u8fb9\uff0c\u5728\u9898\u76ee\u8fb9\u4e24\u7aef\u70b9\u4e0d\u76f8\u540c\u7684\u60c5\u51b5\u4e0b\u4f1a\u81f3\u5c11\u9009\u5230\u4e00\u6761\u5c0f\u4e8e\u5f53\u524d\u6743\u503c\u7684\u8fb9\uff0c\u6839\u636e\u4e0a\u9762\u7684\u7ed3\u8bba\u8fd9 $q$ \u6761\u8fb9\u4e0d\u5e94\u8be5\u548c\u524d $p$ \u6761\u8fb9\u989c\u8272\u76f8\u540c\uff0c\u7b54\u6848\u662f $2(2^q-1)2^{m-p-q}$\u3002\n\n\u6211\u89c9\u5f97\u8fd9\u4e2a\u5206\u8ba8\u7b80\u5355\u81ea\u7136\u963f\uff01\n\n```cpp\nmap<LL,int> K;\nLL n,m,X;\nint main(){\n    scanf(\"%lld %lld %lld\",&n,&m,&X);\n    for(LL i=1;i<=m;++i)   scanf(\"%lld %lld %lld\",&ed[i].u,&ed[i].v,&ed[i].w);\n    sort(ed+1,ed+1+m);\n    for(LL i=1;i<=m;++i)\n    {\n        ufs.makeSet(n);\n        ufs.unionSet(ed[i].u,ed[i].v);\n        LL w=ed[i].w;\n        for(LL j=1;j<=m;++j)   if(ufs.unionSet(ed[j].u,ed[j].v))   w+=ed[j].w;\n        ++K[w];\n    }\n    if(!K[X])   return puts(\"0\")&0;\n    LL key=0;\n    for(auto st:K)\n    {\n        LL v=st.first,w=st.second;\n        if(v<X) key+=w;\n        else // (v=x)\n        {\n            LL ans=0;\n            if(!key)    ans=(QuickPow(2,w)+MOD-2)%MOD;\n            else    ans=(QuickPow(2,w+1)+MOD-2)%MOD;\n            ans=Mul(ans,QuickPow(2,m-w-key));\n            printf(\"%lld\\n\",ans);\n            break;\n        }\n    }\n    return 0;\n}\n```",
        "postTime": 1654848701,
        "uid": 184977,
        "name": "pomelo_nene",
        "ccfLevel": 9,
        "title": "\u55ef\u55ef\u55ef\u597d\u597d\u597d"
    },
    {
        "content": "\u6807\u7b7e: \u8ba1\u6570\n\n% xmy \u610f\u8bc6\u6d41\u5927\u738b.\n\n\u9996\u5148\u6c42\u51fa\u4efb\u610f\u4e00\u4e2a\u6700\u5c0f\u751f\u6210\u6811 $T$, \u8bb0\u6743\u503c\u548c\u4e3a $ans$ , \u663e\u7136\u82e5 $ans > x$ \u65b9\u6848\u4e66\u4e3a $0$ . \n\n#### Part 1\n\n\u82e5 $ans < x$ :\n\n$T$ \u7684\u989c\u8272\u5fc5\u5b9a\u8981\u67d3\u6210\u540c\u4e00\u79cd\u989c\u8272(\u4e0d\u59a8\u67d3\u4e3a\u767d\u8272, \u6700\u540e\u5c06\u65b9\u6848\u6570\u4e58 $2$), \u8bb0\u5f3a\u5236\u9009 $i$ \u7684\u6700\u5c0f\u751f\u6210\u6811\u6743\u503c\u4e3a $tans_i$.\n\n\u82e5 $tans_i< x$ , \u90a3\u4e48 $i$ \u8981\u4e0e\u6240\u5904\u7684\u6700\u5c0f\u751f\u6210\u6811\u540c\u8272. \u663e\u7136\u5f3a\u5236\u9009 $i$ \u7684\u6700\u5c0f\u751f\u6210\u6811\u53ef\u4ee5\u7531 $T$ \u5220\u53bb\u4e00\u6761\u8fb9\u518d\u52a0\u4e0a\u4e00\u6761\u8fb9\u6784\u9020\u5f97\u6765, \u6240\u4ee5 $i$ \u4e5f\u5fc5\u987b\u67d3\u6210\u767d\u8272.\n\n\u82e5 $tans_i>x$ , \u90a3\u4e48 $i$ \u4e0d\u7ba1\u600e\u4e48\u67d3\u90fd\u4e0d\u4f1a\u5f71\u54cd\u6700\u5c0f\u5f02\u8272\u751f\u6210\u6811.\n\n\u5bf9\u4e8e\u5269\u4f59 $tans_i=x$ \u7684\u8fb9, \u6211\u4eec**\u4f9d\u6b21\u679a\u4e3e\u8fd9\u4e9b\u8fb9**, \u8bb0\u88ab\u5f3a\u5236\u9009\u62e9\u67d0\u79cd\u989c\u8272\u7684\u8fb9\u6570\u4e3a $cnt$ (\u521d\u59cb $cnt$ \u4e3a $tans_i<x$ \u7684 $i$ \u7684\u6570\u91cf). \u9996\u5148\u5f3a\u5236\u679a\u4e3e\u5230\u7684\u8fb9 $j$ \u4e3a\u9ed1\u8272, \u90a3\u4e48\u672a\u88ab\u5f3a\u5236\u7684\u8fb9\u968f\u610f\u67d3, \u8d21\u732e\u4e3a $2^{m-cnt-1}$ , \u7136\u540e\u5f3a\u5236 $j$ \u4e3a\u767d\u8272, $++cnt$, \u679a\u4e3e\u4e0b\u4e00\u6761\u8fb9.\n\n\u4e0d\u96be\u53d1\u73b0(\u7b49\u6bd4\u6570\u5217\u6c42\u548c\u6216\u7ec4\u5408\u610f\u4e49)\u6700\u7ec8\u65b9\u6848\u6570\u4e3a $2\\times(2^c-1)\\times2^{m-n-z}$ , \u5176\u4e2d $c$ \u4e3a $tans_i=x$ \u7684 $i$ \u7684\u6570\u91cf.\n\n#### Part 2\n\n\u82e5 $ans=x$ .\n\n\u90a3\u4e48\u9996\u5148\u53ef\u4ee5\u8ba1\u7b97\u4ee5 $T$ \u4e3a\u6700\u5c0f\u5f02\u8272\u751f\u6210\u6811\u7684\u7b54\u6848, \u5f3a\u5236 $T$ \u5f02\u8272, \u8d21\u732e\u4e3a $(2^{n-1}-2)\\times2^{m-n+1}$ , \u7136\u540e\u5f3a\u5236 $T$ \u540c\u8272.\n\n\u53d1\u73b0\u8ba1\u7b97\u5b8c\u4e0a\u9762\u7684\u8d21\u732e\u540e\u95ee\u9898\u8f6c\u5316\u6210\u4e86 $ans<x$ \u7684\u60c5\u51b5, \u5957\u7528\u4e0a\u9762\u7684\u65b9\u6cd5\u5373\u53ef, \u6ce8\u610f\u4e0d\u80fd\u76f4\u63a5\u4f7f\u7528 $2\\times(2^c-1)\\times2^{m-n-z}$ \u8fd9\u4e2a\u516c\u5f0f, \u8981\u5148\u5c06 $c$ \u51cf\u53bb $T$ \u5305\u542b\u7684 $n-1$ \u6761\u8fb9\u540e\u518d\u505a\u8ba1\u7b97.\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(m^2)$ , \u53ef\u4ee5\u7528 LCT \u505a\u5230\u66f4\u4f18, \u4f46\u6ca1\u5fc5\u8981.\n\n```cpp\n#include <bits/stdc++.h>\n#define mod 1000000007\nusing namespace std;\nlong long read();\nvoid Add(int &x, int y) { (x += y) > mod ? x -= mod : x; }\nint fsp(long long bs, int p) {\n    int rt = 1;\n    while (p) {\n        if (p & 1) rt = bs * rt % mod;\n        bs = bs * bs % mod, p >>= 1;\n    }\n    return rt;\n}\nint n, m, res;\nlong long x, ans;\nstruct E {\n    int u, v, w;\n    void init() { u = read(), v = read(), w = read(); }\n} e[2003];\n\nbool cmp(E a, E b) { return a.w < b.w; }\n\nint fa[1003];\nint find(int x) { return x == fa[x] ? x : fa[x] = find(fa[x]); }\nvoid init_fa() {\n    for (int i = 1; i <= n; ++i) fa[i] = i;\n}\n\nlong long get_ans(int c) {\n    long long rt = 0;\n    for (int i = 1; i <= m; ++i) {\n        if (find(e[i].u) != find(e[i].v))\n            rt += e[i].w, ++c, fa[find(e[i].u)] = find(e[i].v);\n        if (c == n - 1) return rt;\n    }\n    return rt;\n}\n\nlong long tans[2003];\n\nint main() {\n    n = read(), m = read(), x = read();\n    for (int i = 1; i <= m; ++i) e[i].init();\n    sort(e + 1, e + 1 + m, cmp), init_fa(), ans = get_ans(0);\n    if (ans > x) return puts(\"0\"), 0;\n    if (ans == x) Add(res, 1ll * (fsp(2, n - 1) - 2) * fsp(2, m - n + 1) % mod);\n    int used = n - 1;\n    for (int i = 1; i <= m; ++i)\n        init_fa(), fa[e[i].u] = fa[e[i].v], tans[i] = get_ans(1) + e[i].w;\n    sort(tans + 1, tans + 1 + m);\n    for (int i = n; i <= m; ++i)\n        if (tans[i] == x) Add(res, fsp(2, m - i + 1));\n\n    printf(\"%d\\n\", res);\n    return 0;\n}\nconst int _SIZE = 1 << 22;\nchar ibuf[_SIZE], *iS = ibuf, *iT = ibuf;\n#define gc                                                         \\\n    (iS == iT ? iT = ((iS = ibuf) + fread(ibuf, 1, _SIZE, stdin)), \\\n     (iS == iT ? EOF : *iS++) : *iS++)\nlong long read() {\n    long long x = 0;\n    char c = gc;\n    while (!isdigit(c)) c = gc;\n    while (isdigit(c)) x = x * 10 + c - '0', c = gc;\n    return x;\n}\n```",
        "postTime": 1583146670,
        "uid": 51237,
        "name": "Kinandra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT3980 \u3010[ARC093C] Bichrome Spanning Tree\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n\u5728\u4e00\u5f20\u56fe\u4e0a\u9ed1\u767d\u67d3\u8272\uff0c\u4f7f\u5f97\u540c\u65f6\u5305\u542b\u6709\u9ed1\u8fb9\u548c\u767d\u8fb9\u7684\u6700\u5c0f\u751f\u6210\u6811\u6743\u503c\u6070\u597d\u4e3a $x$\u3002\u95ee\u6709\u591a\u5c11\u79cd\u67d3\u8272\u65b9\u6cd5\u3002\n\n## Sol\n\n\u611f\u8c22 Etherealdream \u63d0\u4f9b\u601d\u8def\u3002\n\n\u73b0\u5728\u4ec5\u6709\u7684\u4e24\u7bc7\u9898\u89e3\u4e00\u7bc7\u8868\u8ff0\u4e0d\u6e05\u5e76\u4e14\u6ca1\u6709\u4ee3\u7801\uff0c\u4e00\u7bc7\u4e0a\u6765\u5c31\u662f\u5927\u5206\u8ba8\uff0c\u65e2\u4e0d\u81ea\u7136\u53c8\u8bef\u4eba\u5b50\u5f1f\uff0c\u56e0\u6b64\uff0c\u6211\u6765\u53d1\u4e00\u7bc7\u4e0d\u9700\u8981\u7528\u5230 LCT \u5c31\u53ef\u4ee5\u505a\u5230\u76f8\u540c\u590d\u6742\u5ea6 $\\mathcal{O}{(m \\log m + m \\log n)}$ \u7684\u9898\u89e3\u3002\n\n\u9996\u5148\u80af\u5b9a\u662f\u8981\u5efa\u51fa\u4e00\u68f5 MST \u7684\uff0c\u6211\u4eec\u4e0d\u59a8\u601d\u8003\u4e00\u4e0b\u8fd9\u68f5 MST \u6709\u4f55\u4f5c\u7528\uff0c\u8003\u8651\u52a0\u5165\u4e00\u6761\u4e0d\u5b58\u5728\u4e8e MST \u4e2d\u7684\u65b0\u8fb9\u4f1a\u4ea7\u751f\u4ec0\u4e48\u5f71\u54cd\uff0c\u4e0d\u59a8\u8bbe\u8fd9\u6761\u8fb9\u7684\u8fb9\u6743\u4e3a $w$ \uff0c\u8fd9\u6761\u8fb9\u4e24\u7aef\u70b9\u5728\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u74f6\u9888\u4e3a $w_{\\min}$ \uff0c\u90a3\u4e48\u6b64\u65f6\u8fd9\u68f5 MST \u8fb9\u6743\u603b\u548c\u7684\u53d8\u5316\u91cf\u4e3a $w-w_{\\min}$\u3002\n\n\u8bbe\u8fd9\u68f5 MST \u539f\u6765\u7684\u8fb9\u6743\u603b\u548c\u4e3a $u$ \uff0c\u6211\u4eec\u5c06 $w-w_{\\min}$ \u4e0e $x-u$ \u8fdb\u884c\u6bd4\u8f83\u3002\n\n- \u82e5 $w-w_{\\min} < x-u$ \uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u4e0d\u4f1a\u5bf9\u7b54\u6848\u4ea7\u751f\u8d21\u732e\u3002\n\n- \u82e5 $w-w_{\\min} = x-u$ \uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u53ef\u4ee5\u88ab\u66ff\u6362\u5165\u7b54\u6848\u3002\n\n- \u82e5 $w-w_{\\min} > x-u$ \uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u53ef\u4ee5\u4efb\u610f\u67d3\u8272\uff0c\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\n\n\u4ee4 $w-w_{\\min} = x-u$ \u7684\u8fb9\u6570\u4e3a $e1$\uff0c$w-w_{\\min} > x-u$ \u7684\u8fb9\u6570\u4e3a $e2$ \uff0c\u4ece\u7ec4\u5408\u610f\u4e49\u7684\u89d2\u5ea6\u601d\u8003\uff1a\n\n- \u82e5 $u < x$ \uff0c\u90a3\u4e48\u6700\u5c0f\u751f\u6210\u6811\u4e0a\u7684\u8fb9\u53ef\u4ee5\u67d3\u6210\u4efb\u610f\u4e14\u76f8\u540c\u7684\u989c\u8272\uff0c $w-w_{\\min} = x-u$ \u7684\u8fb9\u53ef\u4ee5\u4efb\u610f\u67d3\u8272\uff0c\u4f46\u4e0d\u80fd\u5168\u67d3\u6210\u76f8\u540c\u7684\u989c\u8272\uff0c$w-w_{\\min} > x-u$ \u7684\u8fb9\u53ef\u4ee5\u4efb\u610f\u67d3\u8272\uff0c\u8fd9\u65f6\u7684\u65b9\u6848\u6570\u4e3a $2 \\times (2^{e1}-1)\\times 2^{e2}$\u3002\n\n- \u82e5 $u = x$ \uff0c\u90a3\u4e48\u9664\u4e86\u7d2f\u52a0\u4e0a $u<x$ \u65f6\u5df2\u7ecf\u6210\u7acb\u7684\u7b54\u6848\u4e4b\u5916\uff0c\u8fd8\u53ef\u4ee5\u5c06\u539f\u5148\u7684\u90a3\u4e00\u68f5 MST \u67d3\u6210\u4efb\u610f\u4e14\u4e0d\u5168\u76f8\u540c\u7684\u989c\u8272\uff0c\u6b64\u65f6\u5df2\u7ecf\u6709\u4e86\u4e00\u68f5\u6811\u4f5c\u4e3a\u7b54\u6848\uff0c\u90a3\u4e48\u4e0d\u9700\u8981\u5176\u4ed6\u7684\u5907\u9009\u9879\uff0c\u5176\u4f59\u7684\u8fb9\u4efb\u610f\u67d3\u8272\uff0c\u65b9\u6848\u6570\u8fd8\u5e94\u52a0\u5165 $(2^{n-1}-2)\\times 2^{m-n+1}$\u3002\n\n\u4ee3\u7801\u4e0d\u96be\u5199\uff0c\u53ea\u8981\u4e00\u4e2a\u500d\u589e\u548c\u4e00\u4e2a kruskal\u3002\n\n```cpp\n#include<bits/stdc++.h>\n#define int long long\n#define MOD 1000000007\n#define MAXN 1000000\nusing namespace std;\nint n,m,equ,upp,xi,fa[MAXN+5],hd[MAXN+5],cnt,f[MAXN+5][20],mx[MAXN+5][20],dep[MAXN+5],vis[MAXN+5];\nstruct Edge{int x,y,w;}E[MAXN+5];\nstruct node{int nxt,to,w;}G[MAXN+5];\nbool cmp(Edge p,Edge q){return p.w<q.w;}\nvoid addE(int x,int y,int w){\n\tG[++cnt].nxt=hd[x],G[cnt].w=w;\n\tG[cnt].to=y,hd[x]=cnt;\n}int Find(int x){\n\tif(x==fa[x]) return x;\n\treturn fa[x]=Find(fa[x]);\n}int Fast(int x,int y){\n\tint ret=1;\n\twhile(y){\n\t\tif(y&1) ret=ret*x%MOD;\n\t\tx=x*x%MOD,y>>=1;\n\t}return ret;\n}int calc(){\n\tint ret=0; for(int i=1;i<=n;i++) fa[i]=i;\t\n\tfor(int i=1;i<=m;i++){\n\t\tint nu=Find(E[i].x),nv=Find(E[i].y); if(nu==nv) continue; \n\t\taddE(E[i].x,E[i].y,E[i].w),addE(E[i].y,E[i].x,E[i].w);\n\t\tfa[nu]=nv,ret+=E[i].w,vis[i]=1;\n\t}return ret;\n}void dfs(int x,int father,int tow=1e9){\n\tf[x][0]=father,mx[x][0]=tow,dep[x]=dep[father]+1;\n\tfor(int i=1;i<20;i++) f[x][i]=f[f[x][i-1]][i-1],mx[x][i]=max(mx[x][i-1],mx[f[x][i-1]][i-1]);\n\tfor(int i=hd[x];i;i=G[i].nxt){\n\t\tint y=G[i].to; if(y==father) continue;\n\t\tdfs(y,x,G[i].w);\n\t}\n}int getmn(int x,int y){\n\tif(dep[x]<dep[y]) swap(x,y); int ret=0;\n\tfor(int i=19;~i;--i) if(dep[x]-(1<<i)>=dep[y]) ret=max(ret,mx[x][i]),x=f[x][i];\n\tif(x==y) return ret;\n\tfor(int i=19;~i;--i) if(f[x][i]!=f[y][i]) ret=max(ret,max(mx[x][i],mx[y][i])),x=f[x][i],y=f[y][i];\n\treturn max(ret,max(mx[x][0],mx[y][0]));\n}signed main(){\n\tscanf(\"%lld%lld%lld\",&n,&m,&xi);\n\tfor(int i=1;i<=m;i++) scanf(\"%lld%lld%lld\",&E[i].x,&E[i].y,&E[i].w);\n\tsort(E+1,E+m+1,cmp); \n\tint ansi=calc(); dfs(1,0);\n\tfor(int i=1,u;i<=m;i++){\n\t\tif(vis[i]) continue; int mn=getmn(E[i].x,E[i].y);\n\t\t//printf(\"%d %d %d\\n\",E[i].x,E[i].y,mn);\n\t\tif(E[i].w-mn>xi-ansi) ++upp;\n\t\tif(E[i].w-mn==xi-ansi) ++equ;\n\t}//printf(\"%d %d %d\\n\",upp,equ,ansi);\n\tint pi=2*(Fast(2,equ)-1+MOD)%MOD*Fast(2,upp)%MOD;\n\tint qi=(Fast(2,n-1)-2+MOD)%MOD*Fast(2,m-n+1)%MOD;\n\tif(ansi==xi) printf(\"%lld\\n\",(pi+qi)%MOD);\n\telse printf(\"%lld\\n\",pi);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1635817100,
        "uid": 132040,
        "name": "S00021",
        "ccfLevel": 0,
        "title": "AT3980"
    },
    {
        "content": "\u6211\u4eec\u53d1\u73b0\u8fd9\u9053\u9898\u6709\u4e00\u4e2a\u6700\u4e3b\u8981\u7684\u6027\u8d28\uff0c \u5f97\u5230\u7684\u751f\u6210\u6811\u6700\u591a\u53ea\u6709\u4e00\u6761\u8fb9\u4e0d\u662f$MST$\u4e0a\u7684\u8fb9\uff0c \u800c\u5b83\u53d6\u4ee3\u7684\u4e00\u5b9a\u662f\u5176\u6240\u8986\u76d6\u7684\u94fe\u4e0a\u6700\u5c0f\u7684\u8fb9\u3002 \n\n\u5b83\u8981\u4f7f\u5f97$MST - max(u,v) + w[i] = x$,\t\u4e8e\u662f\u6211\u4eec\u5c31\u53ef\u4ee5\u627e\u5230\u6240\u6709\u6ee1\u8db3\u8fd9\u4e2a\u6761\u4ef6\u7684\u8fb9\u3002\u5047\u8bbe\u8fd9\u79cd\u8fb9\u6709z\u6761\u3002\n\n\u90a3\u4e48\u6700\u540e\u7684\u7b54\u6848\u663e\u7136\u4e3a$2(2^z-1)2^{(m- n - z)}$,\u8fd9\u8868\u793a\u6240\u6709$mst$\u4e0a\u7684\u8fb9\u53ea\u53ef\u80fd\u662f\u540c\u4e00\u79cd\u989c\u8272\uff0c \u8fd9$z$\u6761\u8fb9\u7684\u65b9\u6848\u4e0d\u80fd\u5168\u4e0e\u524d\u9762\u4e00\u81f4\uff0c \u540e\u9762\u7684\u8fb9\u53ef\u4ee5\u968f\u610f\u67d3\u8272\u3002",
        "postTime": 1582947400,
        "uid": 97783,
        "name": "yyxmy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT3980 \u3010[ARC093C] Bichrome Spanning Tree\u3011"
    }
]