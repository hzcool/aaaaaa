[
    {
        "content": "\u8fd9\u4e2a\u9898\u53ef\u4ee5\u76f4\u63a5\u6839\u636e\u9898\u610f\u6a21\u62df\u5c31\u884c......\n\n\u8d2a\u5fc3\u4e00\u4e0b\uff0c\u53ef\u4ee5\u53d1\u73b0\u4e00\u5b9a\u662f\u5148\u751f\u6210\u5927\u7684\u518d\u751f\u6210\u5c0f\u7684\uff0c\u5e76\u4e14\u5927\u7684\u6570\u4e00\u5b9a\u53bb\u751f\u6210\u521a\u597d\u5c0f\u4e8e\u5b83\u7684\u90a3\u4e2a\u6570\u3002\u6211\u4eec\u5c31\u53ef\u4ee5\u6839\u636e\u8fd9\u4e2a\u8d2a\u5fc3\u6765\u6a21\u62df\u3002\n\n\u7136\u540e\u6a21\u62df\u8fc7\u7a0b\u5c31\u9700\u8981\u4e00\u4e9b\u4e71\u641e\u4e86......\u6bd4\u5982\u6211\u7528\u4e86\u4e24\u4e2a multiset \u548c\u4e00\u4e2a set\uff0c\u4e00\u4e2a multiset \u7528\u6765\u8bb0\u5f55\u7528\u6765\u5b58\u8fd8\u5269\u54ea\u4e9b\u6570\u6ca1\u751f\u6210\uff0c\u53e6\u4e00\u4e2a\u7528\u6765\u5b58\u5df2\u7ecf\u751f\u6210\u4e86\u54ea\u4e9b\u6570\uff0c\u7136\u540e\u540e\u9762\u653e\u6570\u7684\u65f6\u5019\u5c31\u679a\u4e3e\u7b2c\u4e8c\u4e2a multiset \u6765\u751f\u6210\u65b0\u7684\u6570\u3002\u4e24\u4e2a multiset \u90fd\u662f\u9ed8\u8ba4\u4ece\u5927\u5230\u5c0f\u6392\u5e8f\u7684\u3002\n\n\u7136\u540e\u6211\u90a3\u4e2a set \u5c31\u662f\u7528\u6765\u5b58\u8fd8\u6709\u54ea\u51e0\u79cd\u6570\u6ca1\u653e\uff0c\u56e0\u4e3a\u6839\u636e\u8d2a\u5fc3\uff0c\u6211\u4eec\u9700\u8981\u627e\u5230\u7b2c\u4e00\u4e2a\u521a\u597d\u5c0f\u4e8e\u5b83\u7684\u6570\u6765\u751f\u6210\uff0c\u5c31\u53ef\u4ee5\u5728 set \u4e0a\u9762\u4e8c\u5206\u4e00\u4e0b\u5373\u53ef\u3002\u7136\u540e\u5982\u679c\u8fd9\u4e2a\u6570\u5728\u7b2c\u4e00\u4e2a multiset \u5df2\u7ecf\u6ca1\u4e86\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u5728\u8fd9\u4e2a set \u4e2d\u628a\u8fd9\u4e2a\u6570\u5220\u6389\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u5927\u6982\u4e3a $\\mathcal{O}(n\\log^2n)$.\n\n\u6e23\u4ee3\u7801\u8f7b\u55b7QAQ\n```cpp\n#include <bits/stdc++.h>\n#define ll long long\n#define ls id << 1\n#define rs id << 1 | 1\n#define mem(array, value, size, type) memset(array, value, ((size) + 5) * sizeof(type))\n#define memarray(array, value) memset(array, value, sizeof(array))\n#define pb(x) push_back(x)\n#define st(x) (1LL << (x))\n#define pii pair<int, int>\n#define mp(a, b) make_pair((a), (b))\n#define Flush fflush(stdout)\nusing namespace std;\nconst int N = 1000050;\nconst int inf = 0x3f3f3f3f;\nconst ll mod = 998244353LL;\nclock_t TIME_START, TIME_END;\nvoid program_end()\n{\n#ifdef ONLINE\n    printf(\"\\nTime used: %.6lf(s)\\n\", ((double)TIME_END - TIME_START) / CLOCKS_PER_SEC);\n    system(\"pause\");\n#endif\n}\nint n;\nint s[N];\nmultiset<int, greater<int>> S1, S2;\nset<int> vis;\nint id[N];\nint tot;\n\ninline int Query(int x)\n{\n    auto it = vis.lower_bound(x);\n    if (it != vis.begin())\n    {\n        it--;\n        return *it;\n    }\n    return -1;\n}\n\nvoid solve()\n{\n    cin >> n;\n    for (int i = 1; i <= st(n); ++i)\n        scanf(\"%d\", &s[i]);\n    for (int i = 1; i <= st(n); ++i)\n        vis.insert(s[i]);\n    for (int i = 1; i <= st(n); ++i)\n        S1.insert(s[i]);\n    sort(s + 1, s + st(n) + 1, greater<int>());\n    S2.insert(s[1]);\n    S1.erase(S1.find(s[1]));\n    if (S1.count(s[1]) == 0)\n        vis.erase(s[1]);\n    int tim = 1;\n    vector<int> tmp;\n    while (tim <= n)\n    {\n        // puts(\"flag\");\n        tmp.clear();\n        for (auto &i : S2)\n        {\n            int x = Query(i);\n            if (S1.empty())\n                return puts(\"Yes\"), void();\n            if (x == -1 || S1.find(x) == S1.end())\n                return puts(\"No\"), void();\n            S1.erase(S1.find(x));\n            if (S1.find(x) == S1.end())\n                vis.erase(x);\n            if (S1.empty())\n                return puts(\"Yes\"), void();\n            tmp.push_back(x);\n        }\n        for (auto &i : tmp)\n            S2.insert(i);\n        tim++;\n    }\n    puts(\"No\");\n}\n\nint main()\n{\n    TIME_START = clock();\n    int Test = 1;\n    // cin >> Test;\n    while (Test--)\n        solve();\n    TIME_END = clock();\n    program_end();\n    return 0;\n}\n/*\n3\n5 4 4 4 3 3 2 1\n*/\n```\n",
        "postTime": 1587991473,
        "uid": 219480,
        "name": "krazy",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT5222 \u3010[ABC140F] Many Slimes\u3011"
    },
    {
        "content": "### \u9898\u5916\u8bdd\n\u7ed9\u51fa\u4e00\u79cd $O(n2^n)$ \u7684\u89e3\u6cd5 \u8dd1\u5f97\u98de\u5feb\n\n~~\u4e0d\u77e5\u9053\u6bd4 $\\sout{O(n^22^n)}$ \u7684\u89e3\u6cd5\u9ad8\u5230\u54ea\u91cc\u53bb\u4e86~~\n\n\u6682\u65f6\u62a2\u4e0b\u4e86[\u6700\u4f18\u89e3](https://www.luogu.com.cn/record/47978276) \n\u5728\u4e0d\u5438\u6c27\u4e0d\u5927\u529b\u5361\u5e38\u7684\u60c5\u51b5\u4e0b\u6bd4\u76ee\u524d\u6700\u5feb\u7684 ${O(n^22^n)}$\u89e3\u6cd5 ~~`+1s`~~ \u5feb\u4e00\u79d2\n\n### \u9898\u610f\n\n\u521d\u59cb\u65f6\u6709 $1$ \u4e2a\u4e1c\u4e1c\uff0c\u6bcf\u4e2a\u4e1c\u4e1c\u6bcf\u79d2\u90fd\u53ef\u4ee5\u751f\u51fa\u4e00\u4e2a\u5927\u5c0f\u5c0f\u4e8e\u81ea\u5df1\uff08\u6b63\u6574\u6570\uff09\u7684\u4e1c\u4e1c\uff0c\u95ee $n$ \u79d2\u540e\uff0c\u80fd\u5426\u5f97\u5230\u7ed9\u5b9a\u7684\u4e1c\u4e1c\u5e8f\u5217\uff08\u5e8f\u5217\u4e2d\u5171\u6709 $2^n$ \u4e2a\u4e1c\u4e1c \uff09\n\n### \u9898\u89e3\n\n\u53ef\u4ee5\u7528\u8d2a\u5fc3+\u5927\u529b\u6a21\u62df\u7684\u65b9\u6cd5\u89e3\u51b3\n\n\u5148\u786e\u5b9a\u521d\u59cb\u7684\u4e1c\u4e1c\uff0c\u521d\u59cb\u7684\u4e1c\u4e1c\u663e\u7136\u662f\u7ed9\u5b9a\u7684\u4e1c\u4e1c\u5e8f\u5217\u4e2d\u6700\u5927\u7684\u90a3\u4e00\u4e2a\n\n\u7136\u540e\u6309\u7167\u8d2a\u5fc3\u7b56\u7565\u6a21\u62df\uff1a\u4ece\u5927\u5230\u5c0f\u904d\u5386\u4e1c\u4e1c\u5e8f\u5217\uff0c\u5f53\u524d\u7684\u4e1c\u4e1c\u751f\u51fa\u4e86 \u5728\u6bd4\u4ed6\u5c0f\u7684\u4e1c\u4e1c\u4e2d \u524d ($n$\u51cf\u53bb\u5f53\u524d\u4e1c\u4e1c\u51fa\u751f\u65f6\u95f4) \u5927\u7684\u4e1c\u4e1c\n\n\u8fd9\u79cd\u8d2a\u5fc3\u7b56\u7565\u53ef\u4ee5\u62ff\u5230 $81$ \u5206\u7684\u9ad8\u5206 \u56e0\u4e3a\u4f1a\u88ab\u4e0b\u9762\u8fd9\u7ec4 `hack` \u6570\u636e\u5361\u6389\n```\nInput:\n3\n1 1 1 1 2 3 4 5\nOutput:\nYes\n```\n\n\u4e0b\u9762\u624d\u662f\u6b63\u786e\u7684\u8d2a\u5fc3\u7b56\u7565 ~~\u4e2a\u4eba\u611f\u89c9\u6b63\u786e\u6027\u633a\u663e\u7136\u7684~~\uff1a\n\n\u5728\u76ee\u524d\u5df2\u7ecf\u51fa\u751f\u7684\u4e1c\u4e1c\u4e2d\u4ece\u5927\u5230\u5c0f\u904d\u5386\uff0c\u6bcf\u4e2a\u4e1c\u4e1c\u90fd\u4f1a\u751f\u51fa \u76ee\u524d\u5c1a\u672a\u51fa\u751f\u7684 \u6bd4\u81ea\u5df1\u5c0f\u7684\u4e1c\u4e1c\u4e2d \u6700\u5927\u7684\u4e1c\u4e1c\n\n\u4ee5\u4e0a\u6b65\u9aa4\u8981\u6267\u884c $n$ \u904d\uff0c\u6700\u540e\u5224\u65ad\u751f\u51fa\u7684\u4e1c\u4e1c\u6570\u91cf\u662f\u5426\u4e3a $2^n$ \u5373\u53ef\n\n### \u4ee3\u7801\n\n\u56e0\u4e3a\u540c\u5b66\u90fd\u8bf4\u6211\u4ee3\u7801\u5199\u7684\u5f88\u602a \u6240\u4ee5\u4f1a\u7ed9\u51fa\u90e8\u5206\u6838\u5fc3\u4ee3\u7801\u7684\u89e3\u91ca ~~\u6307\u5168\u90e8\u6838\u5fc3\u4ee3\u7801\u90fd\u9700\u8981\u89e3\u91ca\u4e0d\u7136\u540c\u5b66\u90fd\u8bf4\u770b\u4e0d\u61c2orz~~\n\n```cpp\n//\u5bf9\u8f93\u5165\u6570\u636e\u6392\u5e8f\uff0c\u8fdb\u884c\u79bb\u6563\u5316\n//l,r\u4e2d\u5b58\u50a8\u7b2cnum\u5c0f\u7684\u6570\u7684\u533a\u95f4\u5de6\u7aef\u70b9\u548c\u533a\u95f4\u53f3\u7aef\u70b9\uff08\u5de6\u95ed\u53f3\u95ed\uff09\n//fa\u5b9e\u9645\u4e0a\u662f\u94fe\u8868\u7684\u6307\u9488\u6570\u7ec4 \u800c\u4e14\u8fd8\u662f\u5e26\u8def\u5f84\u538b\u7f29\u7684\u94fe\u8868\uff08\u5927\u96fe\uff09\nsort(x,x+n);\nfor(int i=0;i<n;i++)\n\tif(x[i]!=x[i+1])\n\t{\n\t\tfa[num]=num-1;\n\t\tr[num]=i;\n\t\tl[++num]=i+1;\n\t}\n```\n\n```cpp\n//find\u51fd\u6570\u4f1a\u8fd4\u56de\u8fd8\u672a\u51fa\u751f\u7684 \u6700\u5927\u7684 \u5927\u5c0f<=x\u7684\u4e1c\u4e1c \u7684\u5927\u5c0f\nint find(int x)\n{\n\tif(l[x]<=r[x])//\u5982\u679c\u5f53\u524d\u533a\u95f4\u975e\u7a7a\n\t\treturn x;\n\treturn fa[x]=find(fa[x]);//\u4f60\u8981\u7684\u8def\u5f84\u538b\u7f29\n}\n```\n\n```cpp\n//heap\u6307\u5411\u4e00\u4e2a\u5927\u6839\u5806\n//temp\u6307\u5411\u4e00\u4e2a\u5783\u573e\u6876 \u7528\u4e8e\u56de\u6536\u76ee\u524d\u5df2\u7ecf\u51fa\u751f\u7684\u4e1c\u4e1c\nheap=&a;temp=&b;\n(*heap).push_back(num-1);//\u628a\u521d\u59cb\u7684\u4e1c\u4e1c\u4e22\u8fdb\u5806\u91cc\nl[num-1]++;//\u56e0\u4e3a\u521d\u59cb\u7684\u4e1c\u4e1c\u88ab\u4e22\u8fdb\u5806\u91cc\uff08\u5220\u9664\uff09\u4e86 \u6240\u4ee5l++\uff08\u8be5\u533a\u95f4\u4e1c\u4e1c\u4e2a\u6570-=1\uff09 \ntot++;//tot\u662f\u5df2\u51fa\u751f\u7684\u4e1c\u4e1c\u4e2a\u6570\n```\n\n```cpp\nmake_heap((*heap).begin(),(*heap).end());//\u5efa\u5806 \u6ce8\u610fmake_heap\u7684\u590d\u6742\u5ea6\u662f\u7ebf\u6027\u7684\n(*temp).clear();//\u5012\u5149\u5783\u573e\u6876\n```\n\n```cpp\nint u=(*heap)[0];//\u53d6\u51fa\u5806\u4e2d\u6700\u5927\u5143\u7d20\npop_heap((*heap).begin(),(*heap).end()),(*heap).pop_back();//\u5220\u9664\u5806\u9876\n(*temp).push_back(u);//\u5728\u5783\u573e\u6876\u91cc\u5907\u4efd\n\nint v=find(u-1);//\u5bfb\u627e\u6bd4u\u5c0f\u7684\u672a\u51fa\u751f\u7684\u4e1c\u4e1c\nif(v!=0)//\u5b58\u5728\u6bd4u\u5c0f\u7684\u672a\u51fa\u751f\u7684\u4e1c\u4e1c\n{\n\tl[v]++;\n\ttot++;\n\t(*temp).push_back(v);//\u5728\u5783\u573e\u6876\u91cc\u5907\u4efd\n}\n```\n\n```cpp\n//\u6307\u9488\u7684\u821e\u8e48 \u4e2a\u4eba\u8ba4\u4e3a\u6700\u795e\u5947\u3001\u6700\u4f18\u7f8e\u7684\u4e00\u53e5\uff08\u4e5f\u662f\u540c\u5b66\u8ba4\u4e3a\u6700\u96be\u7406\u89e3\u7684\u4e00\u53e5orz\uff09\n//\u6267\u884c\u5b8c\u4e0a\u9762\u7684\u8bed\u53e5\u540e \u5783\u573e\u6876\u91cc\u5907\u4efd\u4e86\u6240\u6709\u5df2\u7ecf\u51fa\u751f\u7684\u4e1c\u4e1c\u5927\u5c0f\n//\u6240\u4ee5\u6211\u4eec\u73b0\u5728\u8ba9heap\u6307\u5411\u5783\u573e\u6876 temp\u6307\u5411\u539f\u6765\u7684\u5806\n//\u914d\u5408\u4e0a\u9762\u7684make_heap((*heap).begin(),(*heap).end())\u548c(*temp).clear()\u4e00\u8d77\u4f5c\u7528\n//\u5f00\u542f\u4e00\u6b21\u65b0\u7684\u8f6e\u56de\nswap(temp,heap);\n```\n\n```cpp\n//\u5b8c\u6574\u4ee3\u7801orz\n#include<queue>\n#include<cstdio>\n#include<vector>\n#include<algorithm>\nusing namespace std;\nint s,x[300001];\nint num=1,l[300001],r[300001],fa[300001];\nint tot;\nvector <int> *temp,*heap,a,b;\nvoid read(int &x)\n{\n\tint f=1;x=0;\n\tchar s=getchar();\n\twhile(s<'0'||s>'9')\n\t{\n\t\tif(s=='-')\n\t\t\tf=-1;\n\t\ts=getchar();\n\t}\n\twhile(s>='0'&&s<='9')\n\t{\n\t\tx=x*10+s-'0';\n\t\ts=getchar();\n\t}\n\tx*=f;\n}\nint find(int x)\n{\n\tif(l[x]<=r[x])\n\t\treturn x;\n\treturn fa[x]=find(fa[x]);\n}\nint main()\n{\n\tscanf(\"%d\",&s);\n\tint n=(1<<s);\n\tfor(int i=0;i<n;i++)\n\t\tread(x[i]);\n\tsort(x,x+n);\n\tfor(int i=0;i<n;i++)\n\t\tif(x[i]!=x[i+1])\n\t\t{\n\t\t\tfa[num]=num-1;\n\t\t\tr[num]=i;\n\t\t\tl[++num]=i+1;\n\t\t}\n\t//for(int i=0;i<n;i++)printf(\"%d \",x[i]);\n\t//for(int i=1;i<=num;i++)printf(\"\\n%d %d\",l[i],r[i]);\n\theap=&a;temp=&b;\n\t(*heap).push_back(num-1);\n\tl[num-1]++;\n\ttot++;\n\tfor(int i=0;i<s;i++)\n\t{\n\t\tmake_heap((*heap).begin(),(*heap).end());\n\t\t(*temp).clear();\n\t\twhile(!(*heap).empty())\n\t\t{\n\t\t\tint u=(*heap)[0];\n\t\t\tpop_heap((*heap).begin(),(*heap).end());\n\t\t\t(*heap).pop_back();\n\t\t\t(*temp).push_back(u);\n\n\t\t\tint v=find(u-1);\n\t\t\tif(v!=0)\n\t\t\t{\n\t\t\t\tl[v]++;\n\t\t\t\t(*temp).push_back(v);\n\t\t\t\ttot++;\n\t\t\t}\n\t\t}\n\t\tswap(temp,heap);\n\t}\n\tif(tot==n)\n\t\tputs(\"Yes\");\n\telse\n\t\tputs(\"No\");\n}\n```",
        "postTime": 1616050025,
        "uid": 87434,
        "name": "_Life_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT5222 \u3010ABC140F Many Slimes\u3011"
    }
]