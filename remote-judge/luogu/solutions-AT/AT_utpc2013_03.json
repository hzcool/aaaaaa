[
    {
        "content": "### \u5ba3\u4f20\u4e00\u4e0b\u67d0\u849f\u84bb\u7684blog\n[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](https://www.bmyjacks.cn/2021/at838/)\n\n# \u9996\u5148\u6765\u7406\u89e3\u9898\u76ee\u7684\u610f\u601d\n\n* \u8f93\u5165\u4e24\u5e45\u56fe $G_{1}$ \u4e0e $G_{2}$\uff0c\u5206\u522b\u62e5\u6709 $n_{1}$ \u4e0e $n_{2}$ \u4e2a\u70b9\uff0c$m_{1}$ \u4e0e $m_{2}$ \u6761\u8fb9\n* \u8981\u6c42\u5728\u4e24\u56fe\u4e2d\u95f4\u6dfb\u52a0\u4e00\u6761\u8fb9\u4f7f\u4e24\u56fe\u8054\u901a\u5e76\u6c42\u51fa\u6240\u5f97\u5230\u7684\u65b0\u56fe\u7684**\u6700\u5927\u76f4\u5f84**\u4e0e**\u6700\u5c0f\u76f4\u5f84**\n\n# \u601d\u8def\n\n## \u5b58\u56fe\n\n```cpp\nconst int MAX_N = 1005;\nclass Edge {\n public:\n  int from, to;\n};\nvector<Edge> G[MAX_N];\n```\n\n\n\n## \u76f4\u5f84\n\n### \u5b9a\u4e49\n\n\u5bf9\u4e8e**\u76f4\u5f84**\u7684\u5b9a\u4e49\u4e3a : **\u56fe\u4e0a\u4efb\u610f\u4e24\u70b9\u7684\u6700\u77ed\u8ddd\u79bb\u7684\u6700\u5927\u503c**\n\n\u4ee5\u4e0b\u65b9\u7684\u56fe\u4e3a\u4f8b\u5b50\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/m6mksmoo.png)\n\n\u5404\u70b9\u5230\u53e6\u5916\u7684\u70b9\u4e4b\u95f4\u7684**\u6700\u77ed\u8ddd\u79bb**\u4e3a\n\n$$\n1 \\stackrel{1}{\\rightleftharpoons} 2 \\quad\n1 \\stackrel{2}{\\rightleftharpoons} 3 \\quad\n1 \\stackrel{1}{\\rightleftharpoons} 4 \\quad\n1 \\stackrel{2}{\\rightleftharpoons} 5 \\\\\n2 \\stackrel{1}{\\rightleftharpoons} 3 \\quad\n2 \\stackrel{1}{\\rightleftharpoons} 4 \\quad\n2 \\stackrel{2}{\\rightleftharpoons} 5 \\\\\n3 \\stackrel{2}{\\rightleftharpoons} 4 \\quad\n3 \\stackrel{1}{\\rightleftharpoons} 5 \\\\\n4 \\stackrel{1}{\\rightleftharpoons} 5 \\\\\n$$\n\n\u5219\u8be5\u56fe\u7684**\u76f4\u5f84**\u4e3a $2$\u3002\n\n### \u76f4\u5f84\u7684\u6c42\u6cd5\n\n#### \u4e24\u904d BFS\n\n1. \u5148\u5728\u56fe\u4e0a\u968f\u4fbf\u9009\u53d6\u4e00\u4e2a\u70b9\uff0c\u5bf9\u4ed6\u8fdb\u884c BFS \u540e\uff0c\u627e\u5230\u79bb\u5b83\u6700\u8fdc\u7684\u70b9\u3002\uff08\u4e3a\u4e86\u5230\u8fbe\u56fe\u7684\u8fb9\u7f18\uff09\n2. \u5728\u6700\u8fdc\u7684\u70b9\u4e0a\u518d\u8fdb\u884c\u4e00\u6b21 BFS \uff0c\u6b64\u65f6\u5b83\u4e0e\u79bb\u5b83\u6700\u8fdc\u7684\u90a3\u4e2a\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8ddd\u79bb\u5373\u4e3a\u8be5\u56fe\u7684\u76f4\u5f84\u3002\n\n\u4f8b\u5b50\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/9btgnhd2.png)\n\n1. \u5047\u8bbe\u968f\u673a\u9009\u53d6\u7684\u70b9\u4e3a $5$\uff0c\u5219\u8fdb\u884c BFS \u540e\u9009\u53d6\u7684\u70b9\u4e3a $9$\u3002\n2. \u518d\u5728 $9$ \u8fdb\u884c\u4e00\u6b21 BFS \uff0c\u5f97\u5230\u7684\u70b9\u4e3a $8$\uff0c\u90a3\u4e48\u8be5\u56fe\u7684\u76f4\u5f84\u4e3a $9$ \u5230 $8$ \u7684\u8ddd\u79bb $6$\u3002\n\n\u4ee3\u7801\uff08C++11\uff09\n\n```cpp\nvoid bfs(const int from = 1) { // \u9ed8\u8ba4\u4ece1\u5f00\u59cb\u641c\u7d22\n  queue<Edge> que;\n  que.push(Edge{from, 0});  // \u8054\u8d5b\u4e2d\u4fee\u6539\u4e3a 'que.push((Edge) {from, 0})'\n\n  while (!que.empty()) {\n    Edge now = que.front();\n    que.pop();\n\n    for (int i = 0; i < G[now.from].size(); ++i) {\n      Edge edge = G[now.from][i];\n      if (dis[edge.to] > dis[edge.from] + 1) {\n        dis[edge.to] = dis[edge.from] + 1;\n        que.push(Edge{edge.to, 0});  //\u8054\u8d5b\u4e2d\u4fee\u6539\u4e3a 'que.push((Edge) {edge.to, 0})'\n      }\n    }\n  }\n}\n```\n\n\u8fdb\u884c\u4e00\u6b21 BFS \u4e4b\u540e\u518d\u6765\u4e00\u6b21\u5373\u53ef\n\n#### \u5355\u6e90\u6700\u77ed\u8def\n\n##### dijkstra\n\n\u76f4\u63a5\u5728\u56fe\u4e0a\u6bcf\u4e2a\u70b9\u90fd\u8dd1\u4e00\u904d dijkstra\uff0c\u518d\u53d6\u6700\u5927\u503c\u5373\u53ef\u3002\u4ee3\u7801\u76f8\u4f3c\u4e8e BFS\uff0c\u7531\u4e8e\u6bcf\u6761\u8fb9\u7684\u6743\u503c\u90fd\u4e00\u6837\uff0c\u8fd9\u9053\u9898\u53ef\u4e0d\u4f7f\u7528`priority_queue`\n\n##### SPFA\n\n\u5b83\u6b7b\u4e86\n\n# \u6c42\u89e3\n\n\u6211\u4eec\u53d1\u73b0\uff0c\u5bf9\u4e8e\u6dfb\u52a0\u4e00\u6761\u8fb9\u540e**\u65b0\u56fe**\u7684**\u76f4\u5f84** $d_{G_{new}}$ \u6ee1\u8db3\n$$\nd_{G_{new}} \\leq d_{G_{1}} + d_{G_{2}} + 1\n$$\n\n### \u6700\u957f\u76f4\u5f84\n\n\u5219**\u65b0\u56fe**\u7684\u6700\u957f\u76f4\u5f84\u4e3a\n$$\nd_{G_{new} \\ max} = d_{G_{1}} + d_{G_{2}} + 1\n$$\n\n### \u6700\u77ed\u76f4\u5f84\n\n* \u6784\u5efa\u6210\u7684\u65b0\u56fe\u7684**\u6700\u77ed**\u76f4\u5f84\u5fc5\u7136\u5927\u4e8e $d_{G_{1}}$ \u4e0e $d_{G_{2}}$\uff08\u6837\u4f8b3\uff09\n\n* \u800c\u6700\u77ed\u76f4\u5f84\u4e3a $G_{1}$ \u4e0e $G_{2}$ \u4e2d\u6700\u8fdc\u4e24\u70b9\u4e4b\u95f4\u8ddd\u79bb\uff08\u53ef\u5728 BFS \u6216 dijkstra \u65f6\u987a\u4fbf\u6c42\u51fa\uff09\u7684\u6700\u5c0f\u503c\u4e4b\u548c\u518d\u52a0\u4e00\n\n* $$\n  d_{G_{new} \\ min} = max(G_{1} \\ min + G_{2} \\ min + 1, \\ max(d_{G_{1}}, d_{G_{2}}))\n  $$\n\n\n\u7efc\u4e0a\uff0c\u53ef AC \u6b64\u9898\u3002\n\n\u849f\u84bb\u7b2c\u4e00\u6b21\u5199\u9898\u89e3\uff0c\u4e0d\u8db3\u4e4b\u5904\u8fd8\u8bf7\u5927\u5bb6\u63d0\u51fa\u5e76\u8c05\u89e3\u3002",
        "postTime": 1611913482,
        "uid": 384592,
        "name": "bmyjacks",
        "ccfLevel": 4,
        "title": "AT838-\u9898\u89e3"
    },
    {
        "content": "\u8fd9\u9053\u9898\u597d\u50cfBFS\u662f\u975e\u6b63\u89e3\u6765\u7740QAQ  \n\u8fd9\u91cc\u6765\u4e00\u9053BFS\u9898\u89e3\uff08\u826f\u5fc3BFS\u5165\u95e8\u9898\uff09  \n\u89c9\u5f97\u4ee3\u7801\u6bd4\u8f83\u7b80\u660eQwQ  \n\u7ec6\u8282\u4e0b\u89c1\u4ee3\u7801\u2193\n```c++\n#include<bits/stdc++.h>\n#define N 1005\nusing namespace std;\nvector <int> vec[N][2];\nint dist[N];\nint bfs(int x,int p){\n  queue <int> que;\n  memset(dist,-1,sizeof(dist));\n  dist[x]=0;que.push(x);int mx=0;\n  while(!que.empty()){\n    int v=que.front();que.pop();\n    mx=dist[v];\n    for(int i=0;i<vec[v][p].size();i++){\n      int to=vec[v][p][i];\n      if(dist[to]==-1){\n        dist[to]=dist[v]+1;\n        que.push(to);\n      }\n    }\n  }\n  return mx;\n}\nsigned main(){\n  int mn=1,mx=1;\n  int rmn=0;\n  for(int i=0;i<2;i++){\n    int n,m;\n    scanf(\"%d %d\",&n,&m);\n    for(int j=0;j<m;j++){\n      int a,b;scanf(\"%d %d\",&a,&b);\n      vec[a][i].push_back(b);\n      vec[b][i].push_back(a);\n    }\n    int nmn=N,nmx=0;\n    for(int j=0;j<n;j++){\n      int vl=bfs(j,i);\n      nmn=min(nmn,vl);\n      nmx=max(nmx,vl);\n    }\n    mn+=nmn;mx+=nmx;\n    rmn=max(rmn,nmx);\n  }\n  printf(\"%d %d\\n\",max(mn,rmn),mx);\n  return 0;\n}\n\n```",
        "postTime": 1557323130,
        "uid": 127191,
        "name": "Doveqise",
        "ccfLevel": 6,
        "title": "AT838 \u76f4\u5f84 \u9898\u89e3"
    },
    {
        "content": "### Solution\n\u9996\u5148\u8003\u8651\u8fd9\u6837\u4e00\u4e2a\u6837\u4f8b\uff1a\n![](https://cdn.luogu.com.cn/upload/image_hosting/utk8ihtd.png)\n\n\u5148\u60f3\u4e00\u4e0b\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u6837\u4f8b\uff0c\u6211\u4eec\u5982\u4f55\u6c42\u6dfb\u52a0\u8fb9\u4e4b\u540e\u7684\u6700\u5927\u76f4\u5f84\u3002\n\n\u5728\u6dfb\u8fb9\u4e4b\u524d\uff0c\u8ba9\u6211\u4eec\u5148\u5206\u522b\u6c42\u4e00\u4e0b\u4e24\u4e2a\u56fe\u7684\u76f4\u5f84\uff1a\uff08\u5982\u56fe\u7528\u7ea2\u7ebf\u6807\u793a\uff09\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ok7daaov.png)\n\n\u8fd9\u65f6\u6211\u4eec\u53d1\u73b0\uff1a**\u56e0\u4e3a\u6240\u6709\u8fb9\u7684\u957f\u5ea6\u90fd\u4e3a1\uff0c\u6dfb\u52a0\u7684\u8fb9\u4e5f\u662f\u8fd9\u6837\uff0c\u6240\u4ee5\u6dfb\u52a0\u8fb9\u7684\u4f4d\u7f6e\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\uff0c**\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u628a\u8fd9\u4e24\u6761\u6700\u957f\u7684\u8def\u5f84\u8fde\u63a5\u8d77\u6765\uff0c\u4e0d\u5c31\u662f\u6700\u7ec8\u7b54\u6848\u5417\uff1f\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/jd6rlj78.png)\n\n\u5f53\u7136\uff0c\u5982\u4e0b\u56fe\u6240\u793a\uff0c\u6240\u6709\u7684\u84dd\u8272\u865a\u7ebf\u90fd\u662f\u6700\u4f73\u65b9\u6848\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/w059qdsr.png)\n\n\u4e0d\u8fc7\u8fd9\u4e9b\u7ebf\u7684\u4f4d\u7f6e\u5e76\u4e0d\u91cd\u8981\uff0c\u6211\u4eec\u8981\u6c42\u7684\u662f\u7b54\u6848\uff0c\u800c\u7531\u4e0a\u6211\u4eec\u4e0d\u96be\u53d1\u73b0\uff1a**\u7b54\u6848=A\u56fe\u76f4\u5f84+B\u56fe\u76f4\u5f84+1**\u3002\n\n\u90a3\u4e48```A\u56fe\u76f4\u5f84```\u548c```B\u56fe\u76f4\u5f84```\u600e\u4e48\u6c42\u5462\uff1f\u5176\u5b9e\u5f88\u7b80\u5355\uff0c\u5c31\u662f\u4e00\u4e2a\u66b4\u529b\u7684\u6c42\u6cd5\uff1a\u5148\u6c42\u51fa\u56fe\u4e2d\u7684\u591a\u6e90\u6700\u77ed\u8def\uff0c\u7136\u540e\u627e\u51fa```dis[i][j]```\u6700\u5927\u503c\u5373\u53ef\u3002\n\n\u540c\u7406\u6700\u5c0f\u7684\u7b54\u6848\u4e5f\u662f\u4e00\u6837\u7684\uff0c\u4e0d\u8fc7\u6211\u4eec\u8981\u6c42\u7684\u4e0d\u662f```\u56fe\u7684\u76f4\u5f84```\uff0c\u800c\u662f```\u4ee5\u67d0\u4e2a\u70b9\u4e3a\u8d77\u70b9\uff0c\u6240\u80fd\u5230\u8fbe\u7684\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\u7684\u6700\u5c0f\u503c```\u3002\uff08\u524d\u9762\u8fd9\u53e5\u8bdd\u6709\u70b9\u7ed5\uff0c\u591a\u8bfb\u51e0\u904d\u5c31\u5f88\u5bb9\u6613\u7406\u89e3\uff09\n\n\u6700\u540e\uff0c\u6709\u51e0\u4e2a\u8981\u6ce8\u610f\u7684\u5751\u70b9\uff1a\n\n* \u70b9\u7684\u6743\u503c\u662f```0 ~ n-1```.\n\n* \u5982\u679c\u6c42\u51fa\u7684\u6700\u5c0f\u7b54\u6848\u6bd4\u67d0\u4e2a\u56fe\u7684\u76f4\u5f84\u8fd8\u8981\u5c0f\uff0c\u90a3\u4e48\u6700\u7ec8\u7b54\u6848\u662f\u8fd9\u4e2a\u56fe\u7684\u76f4\u5f84\u3002\uff08\u5176\u5b9e\u6837\u4f8b```#3```\u5df2\u7ecf\u63d0\u793a\u8fc7\u4e86\uff09\n\n* \u867d\u7136\u6570\u636e\u8303\u56f4 $n\\le10^3$\uff0c\u4f46\u662f\u7528Floyd\u7b97\u6cd5\u6c42\u6700\u77ed\u8def\u4ecd\u7136\u4f1aTLE\uff0c\uff08\u4e5f\u53ef\u80fd\u662f\u6211\u4ee3\u7801\u5e38\u6570\u8fc7\u5927\u7684\u7f18\u6545\uff1f\uff09\u603b\u4e4b\u56e0\u4e3a\u6bcf\u6761\u8fb9\u7684\u957f\u5ea6\u90fd\u4e3a1\uff0c\u6240\u4ee5\u5efa\u8bae\u4f7f\u7528BFS\u7b97\u6cd5\u6765\u6c42\u70b9\u4e0e\u70b9\u4e4b\u95f4\u7684\u6700\u77ed\u8def\u3002\n***\n### code\n```cpp\n#include <cstdio>\n#include <queue>\nusing namespace std;\n#define MAXN 2001\n#define MAXM 20001\n#define inf 1000000000\nstruct Edge\n{\n    int to, next;\n} bian[MAXM];\nint h[MAXN], dis[MAXN];\nint n, m, t;\nvoid csh()\n{\n    t = 0;\n    for (int i = 1; i <= n; i++)\n        h[i] = 0;\n}\nvoid add(int x, int y)\n{\n    t++;\n    bian[t].next = h[x];\n    bian[t].to = y;\n    h[x] = t;\n}\nvoid work(int start)\n{\n    queue<int> Q;\n    int i, k;\n    for (i = 1; i <= n; i++)\n        dis[i] = inf;\n    dis[start] = 0;\n    Q.push(start);\n    while (!Q.empty())\n    {\n        k = Q.front();\n        Q.pop();\n        for (i = h[k]; i; i = bian[i].next)\n        {\n            if (dis[k] + 1 < dis[bian[i].to])\n            {\n                dis[bian[i].to] = dis[k] + 1;\n                Q.push(bian[i].to);\n            }\n        }\n    }\n}\nint main()\n{\n    scanf(\"%d%d\", &n, &m);\n    int i, j, x, y;\n    int ans1_max = -1, ans1_min = inf, ans2_max = -1, ans2_min = inf, t;\n\n    csh();\n    for (i = 1; i <= m; i++)\n    {\n        scanf(\"%d%d\", &x, &y);\n        add(x + 1, y + 1);\n        add(y + 1, x + 1);\n    }\n    for (i = 1; i <= n; i++)\n    {\n        t = -1;\n        work(i);\n        for (j = 1; j <= n; j++)\n            t = max(t, dis[j]);\n        ans1_max = max(ans1_max, t);\n        ans1_min = min(ans1_min, t);\n    }\n\n    csh();\n    scanf(\"%d%d\", &n, &m);\n    for (i = 1; i <= m; i++)\n    {\n        scanf(\"%d%d\", &x, &y);\n        add(x + 1, y + 1);\n        add(y + 1, x + 1);\n    }\n    for (i = 1; i <= n; i++)\n    {\n        t = -1;\n        work(i);\n        for (j = 1; j <= n; j++)\n            t = max(t, dis[j]);\n        ans2_max = max(ans2_max, t);\n        ans2_min = min(ans2_min, t);\n    }\n    if (ans1_min + ans2_min + 1 < max(ans1_max, ans2_max))\n        printf(\"%d %d\\n\", max(ans1_max, ans2_max), ans1_max + ans2_max + 1);\n    else\n        printf(\"%d %d\\n\", ans1_min + ans2_min + 1, ans1_max + ans2_max + 1);\n    return 0;\n}\n```\n",
        "postTime": 1605260917,
        "uid": 125429,
        "name": "SfumatoCannon_",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT838 \u3010\u76f4\u5f84\u3011"
    },
    {
        "content": "# \u9898\u610f\uff1a\n\u7ed9\u51fa\u4e24\u4e2a**\u65e0\u5411\u56fe**\uff0c\u5728\u4e4b\u95f4\u52a0\u4e00\u6761\u8fb9\uff0c\u4f7f\u4e24\u4e2a\u56fe\u53d8\u4e3a\u4e00\u4e2a\u56fe\uff0c\u518d\u6c42\u51fa\u8fd9\u4e2a\u56fe\u7684\u6700\u5927\u3001\u6700\u5c0f\u76f4\u5f84\u3002\n\n\u6700\u5927\u76f4\u5f84\uff1a\u628a\u539f\u6765\u7684\u4e24\u4e2a\u56fe\u7684\u76f4\u5f84\u6c42\u51fa\uff0c\u76f8\u52a0\uff0c\u518d\u52a0\u4e0a\u8fde\u63a5\u7684\u90a3\u4e00\u6761\u8fb9\u3002\uff08$G_1$ \u76f4\u5f84 $+G_2$ \u76f4\u5f84 $+1$\uff09\u3002\n\n\u6700\u5c0f\u76f4\u5f84\uff1a\u548c\u6c42\u6700\u5927\u76f4\u5f84\u7c7b\u4f3c\uff0c\u53ea\u4e0d\u8fc7\u662f\u4ece\u6bcf\u4e00\u4e2a\u70b9\u51fa\u53d1\u5230\u8fbe\u7684\u6700\u8fdc\u7684\u70b9\u7684\u8ddd\u79bb\u7684\u6700\u5c0f\u503c\u3002\n\n###### ~~\u6240\u4ee5\u4f60\u770b\u4e0b\u9762~~\n\n### \u8ba9\u6211\u4eec\u628a\u6837\u4f8b\u62ff\u4e0a\u6765\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/29nu1knp.png?x-oss-process=image/resize,m_lfit,h_170,w_225)\n\n\u8fd9\u91cc\u7684 $7=3+3+1$\uff0c$3$ \u6c42\u7684\u662f\u6700\u5c0f\u76f4\u5f84\uff08\u4e0a\u9762\u90a3\u53e5\u957f\u8bdd\uff09\u3002\n\n\u56e0\u4e3a\u4e24\u4e2a\u56fe\u4e00\u6a21\u4e00\u6837\uff0c\u6240\u4ee5\u53ea\u53d6\u5176\u4e2d\u4e00\u4e2a\u56fe\u4e3e\u4f8b\uff1a\n\n| \u70b9 | \u6700\u5c0f\u76f4\u5f84 |\n| :----------: | :----------: |\n| $0$ | $0-5$\uff0c\u957f\u5ea6 $=5$ |\n| $1$ | $1-5$\uff0c\u957f\u5ea6 $=4$ |\n| $2$ | $2-5$\uff0c\u957f\u5ea6 $=3$ |\n| $3$ | $0-3$\uff0c\u957f\u5ea6 $=3$ |\n| $4$ | $0-4$\uff0c\u957f\u5ea6 $=4$ |\n| $5$ | $0-5$\uff0c\u957f\u5ea6 $=5$ |\n\n\u6700\u5c0f\u76f4\u5f84 $=\\min\\{5,4,3,3,4,5\\}=3$\u3002\n\n\u6700\u5927\u76f4\u5f84 $=\\max\\{5,4,3,3,4,5\\}=5$\u3002\n\n# \u65b9\u6cd5\uff1a\n\n\nDijkstra \u679a\u4e3e $1-n$ \u7684\u70b9\u7684\u5355\u6e90\u6700\u77ed\u8def\uff0c\u6bcf\u4e00\u6b21\u90fd\u6c42\u51fa```dis```\u6570\u7ec4\u7684\u6700\u5927\u503c\u3002\n\n\u518d\u6c42\u51fa\u8fd9\u4e9b\u6700\u5927\u503c\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\u3002\n\n\u53e6\u5916\uff0c\u6700\u7ec8\u56fe\u7684\u6700\u5c0f\u76f4\u5f84\u5fc5\u987b\u90fd\u5927\u4e8e\u4e24\u4e2a\u56fe\u7684\u76f4\u5f84\uff0c\u8f93\u51fa\u65f6\u52a0\u7279\u5224\uff0c\u5982\u679c\u5c0f\u4e8e\u5176\u4e2d\u4e00\u4e2a\uff0c\u8f93\u51fa\u4e24\u4e2a\u56fe\u7684\u76f4\u5f84\u4e2d\u5927\u7684\u90a3\u4e2a\u3002\n\n### \u6ce8\u610f\u70b9\uff1a\n\n1. \u52a0\u8fb9\u65f6\u70b9\u7684\u7f16\u53f7\u8981 $+1$\u3002\n\n2. \u8981\u8f93\u5165\u4e24\u4e2a\u56fe\uff0c\u6bcf\u4e00\u6b21\u90fd\u8981\u521d\u59cb\u5316```tot=0```\uff0c```head```\u6570\u7ec4\u521d\u59cb\u5316\u4e3a $0$\u3002\n3. **\u4e00\u5b9a\u8981\u52a0\u5806\u4f18\u5316**\uff0c\u4e0d\u7136 TLE\u3002\n\n```\n#include<bits/stdc++.h>\n#define N 1000005\nusing namespace std;\npriority_queue<pair<int,int> >q;\nint head[N],tot=0,vis[N],dis[N],minsn=2147483647,maxx=-1,minnn=2147483647,maxxx=-1;\nint n,m,s;\ninline int read(){\n    int m=0,f=1;\n    char c=getchar();\n    while(c>'9'||c<'0'){\n        if(c=='-')f=-1;\n        c=getchar();\n    }\n    while(c<='9'&&c>='0'){\n        m=m*10+c-'0';\n        c=getchar();\n    }\n    return m*f;\n}\nstruct Edge{\n    int s,val,Next;\n}edge[1000005];\nvoid add(int x,int y){\n\tedge[++tot].s=y;\n\tedge[tot].Next=head[x];\n\thead[x]=tot;\n}\nint Dijkstra(int s){\n    memset(vis,0,sizeof vis);\n    for(int i=1;i<=n;i++)dis[i]=2147483647;\n    dis[s]=0;\n\tq.push(make_pair(0,s));\n\twhile(q.size()){\n\t\tint sat=q.top().second;\n\t\tq.pop();\n\t\tfor(int i=head[sat];i!=0;i=edge[i].Next){\n\t\t\tif(!vis[edge[i].s]&&dis[edge[i].s]>dis[sat]+1){\n\t\t\t\tdis[edge[i].s]=dis[sat]+1;\n\t\t\t\tq.push(make_pair(-dis[edge[i].s],edge[i].s));\n\t\t\t}\n\t\t}\n\t}\n\tint maxdx=0;\n\tfor(int i=1;i<=n;i++){\n        if(dis[i]==2147483647)continue;\n        maxdx=max(maxdx,dis[i]);\n    }\n\treturn maxdx;\n}\nint main(){\n    n=read(),m=read();\n    for(int i=1;i<=m;i++){\n\t\tint a,b;\n\t\ta=read(),b=read();\n\t\tadd(a+1,b+1);\n        add(b+1,a+1);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t    int ss=Dijkstra(i);\n\t    minsn=min(minsn,ss);\n\t    maxx=max(maxx,ss);\n\t}\n\tn=read(),m=read();\n\tmemset(head,0,sizeof head);\n    tot=0;\n    for(int i=1;i<=m;i++){\n\t\tint a,b;\n\t\ta=read(),b=read();\n\t\tadd(a+1,b+1);\n        add(b+1,a+1);\n\t}\n\tfor(int i=1;i<=n;i++){\n\t    int ss=Dijkstra(i);\n\t    minnn=min(minnn,ss);\n\t    maxxx=max(maxxx,ss);\n\t}\n//    cout<<minnn<<\" \"<<minsn<<' '<<maxx<<' '<<maxxx<<endl;\n\tif(minsn+minnn+1<max(maxx,maxxx))cout<<max(maxx, maxxx)<<' '<<maxx+maxxx+1<<endl;\n    else cout<<minsn+minnn+1<<' '<<maxx+maxxx+1<<endl;\n\treturn 0;\n}\n```\n\n\u5b8c\u7ed3\u6492\u82b1~~~",
        "postTime": 1666258447,
        "uid": 707914,
        "name": "Assicd145",
        "ccfLevel": 0,
        "title": "Atcoder-UTPC2013C"
    }
]