[
    {
        "content": "\u8fd9\u9898\u8fd8\u662f\u633a\u6709\u610f\u601d\u7684\u3002\n\n\u9898\u76ee\u8981\u6c42\u7684\u662f\u54c8\u5bc6\u987f\u8def\u5f84\uff0c\u8fd9\u4e2a\u6709\u70b9\u4e0d\u597d\u5904\u7406\uff0c\u6211\u4eec\u5148\u8f6c\u5316\u6210\u6c42\u54c8\u5bc6\u987f\u56de\u8def\u540e\u51cf\u53bb\u4e00\u6761\u8def\u5f84\u3002  \n\n## 1.\u6c42\u56de\u8def\n\n\u8fd9\u5c31\u662f\u4e2a\u5957\u8def\u9898\u4e86\uff0c\u6211\u4eec\u4e0d\u8003\u8651\u6bcf\u6761\u8def\u5f84\uff0c\u800c\u8003\u8651\u6bcf\u4e00\u4e2a\u8fb9\u6700\u591a\u88ab\u5305\u542b\u5728\u51e0\u6761\u8def\u5f84\u5185\u3002  \n\u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u8fb9\uff0c\u5982\u679c\u628a\u5b83\u65ad\u5f00\u540e\u628a\u6811\u5206\u6210\u4e86\u4e24\u4e2a\u5927\u5c0f\u5206\u522b\u4e3a $x$ \u548c $y$ \u7684\u8fde\u901a\u5757\uff0c\u5219\u6709 $\\min(x,y)$ \u6761\u8def\u5f84\u901a\u8fc7\u5b83\uff0c\u4e5f\u5c31\u662f\u8bf4\u4ece\u5c0f\u8fde\u901a\u5757\u4e2d\u7684\u70b9\u51fa\u53d1\u7684\u8def\u5f84\u90fd\u4f1a\u7ecf\u8fc7\u8fd9\u6761\u8fb9\u4e00\u6b21\u3002  \n\u653e\u5f20\u56fe\uff1a  \n\n![](https://cdn.luogu.com.cn/upload/image_hosting/z6nujmip.png)\n\n\u5176\u5b83\u88ab\u8986\u76d6\u7684\u8def\u5f84**\u5b8c\u5168\u6ca1\u6709\u53d8\u5316**\uff0c\u800c\u88ab\u5708\u51fa\u7684\u8def\u5f84\u88ab\u7ecf\u8fc7\u6b21\u6570\u589e\u52a0\u4e86\uff0c\u6211\u4eec\u5b8c\u5168\u53ef\u4ee5\u968f\u4fbf\u6784\u9020\u4e00\u4e2a\u65b9\u6848\u7136\u540e\u4e0d\u505c\u50cf\u56fe\u4e2d\u8fd9\u4e48\u505a\u3002\n\n\u8fd9\u6837\u662f\u7b54\u6848\u7684\u7406\u8bba\u4e0a\u754c\uff0c\u800c\u6211\u4eec\u7684\u65b9\u6848\u4e5f\u8fbe\u5230\u4e86\u8fd9\u4e2a\u7406\u8bba\u4e0a\u754c\u3002\n\n\u653e\u9053\u7c7b\u4f3c\u7684[\u9898](https://www.luogu.com.cn/problem/CF1280C)\u3002  \n\n\u7136\u540e\u628a\u6bcf\u6761\u8fb9\u7684\u8d21\u732e\u52a0\u8d77\u6765\u5c31\u597d\u4e86\u3002\n\n## 2.\u51cf\u53bb\u4e00\u6761\u8def\u5f84\n\n**\u4e0b\u9762\u624d\u662f\u91cd\u70b9\u4e86**  \n\n\u63a5\u4e0b\u6765\u5728\u4e8e\u8981\u53bb\u6389\u54ea\u6761\u8def\u5f84\u3002  \n\n\u5982\u679c\u4f60\u89c9\u5f97\u968f\u4fbf\u53bb\u54ea\u4e00\u6761\u90fd\u884c\uff0c\u5c31\u53bb\u6700\u5c0f\u7684\u90a3\u6761\u5427\uff0c\u90a3\u4e48\u8fde\u6837\u4f8b\u90fd\u8fc7\u4e0d\u53bb\u3002  \n\n\u56e0\u4e3a\u53ef\u80fd\u8fd9\u6761\u8def\u5f84**\u4e0d\u5305\u542b\u5728\u4efb\u610f\u4e00\u4e2a\u6700\u4f18\u89e3\u4e2d**\u3002  \n\n\u4e8b\u5b9e\u4e0a\uff0c**\u4e0d\u7ecf\u8fc7\u91cd\u5fc3\u7684\u8def\u5f84\u90fd\u4e0d\u5305\u542b\u5728\u4efb\u4e00\u6700\u4f18\u89e3\u4e2d**\u3002  \n\u56e0\u4e3a\u5bf9\u4e8e\u6811\u7684\u91cd\u5fc3\uff0c\u628a\u5b83\u4f5c\u6839\uff0c\u5b83\u4e0d\u5b58\u5728 $siz> \\frac{n}{2}$ \u7684\u5b50\u6811\u3002\u53ef\u4ee5\u60f3\u8c61\u5982\u679c\u5b58\u5728 $siz> \\frac{n}{2}$ \u7684\u5b50\u6811\uff0c\u90a3\u4e48\u5fc5\u5b9a\u6709\u81f3\u5c11\u4e00\u6761\u8def\u5f84\u662f\u5728\u8fd9\u68f5\u5b50\u6811\u5185\u90e8\u7684\uff0c\u56e0\u4e3a\u5176\u5b83\u7684\u5b50\u6811\u5408\u8d77\u6765\u90fd\u4e0d\u591f\u548c\u8fd9\u68f5\u5b50\u6811\u914d\u5bf9\u51fa\u6765\u90a3\u4e48\u591a\u7ecf\u8fc7\u8fd9\u4e2a\u8282\u70b9\u7684\u8def\u5f84\u3002  \n\n\u6bcf\u4e00\u4e2a\u5b50\u6811\u90fd $siz\\leq \\frac{n}{2}$ \u7684\u5b50\u6811\u662f\u4e00\u5b9a\u53ef\u4ee5\u505a\u5230\u7684\u3002\u8fd9\u5f88\u663e\u7136\u4e86\uff0c\u4e0d\u6d6a\u8d39\u65f6\u95f4\u8bc1\u660e\u8fd9\u4e2a\u4e86\u3002\n\n**\u6811\u7684\u91cd\u5fc3\u7b26\u5408\u8fd9\u4e2a\u6027\u8d28\uff0c\u4e5f\u53ea\u6709\u6811\u7684\u91cd\u5fc3\u7b26\u5408\u8fd9\u4e2a\u6027\u8d28\u3002**\n\n\u8fd9\u5c31\u610f\u5473\u7740\u5982\u679c\u6211\u4eec\u53ef\u4ee5\u505a\u5230\u6bcf\u4e00\u6761\u8def\u5f84\uff0c\u90fd\u662f\u5728\u91cd\u5fc3\u7684\u4e24\u4e2a\u4e0d\u540c\u5b50\u6811\u4e2d\u5404\u53d6\u4e00\u70b9\u76f8\u8fde\u3002\n\n\u5c31\u50cf\u6700\u5f00\u59cb\u51fa\u793a\u7684\u90a3\u5f20\u56fe\u4e00\u6837\uff0c\u6211\u4eec\u8981\u662f\u8ba9\u4e24\u6761\u5728\u540c\u4e00\u4e2a\u5b50\u6811\u5185\u7684\u8def\u5f84\u4ea4\u53c9\u800c\u7ecf\u8fc7\u91cd\u5fc3\uff0c\u5219\u4e00\u5b9a\u66f4\u4f18\u3002\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/dvfbruqa.png)\n\n\u65e2\u7136\u6240\u6709\u7ecf\u8fc7\u91cd\u5fc3\u7684\u8def\u5f84\u90fd\u53ef\u884c\uff0c\u90a3\u5c31\u5220\u53bb\u6700\u77ed\u7684\u4e00\u6761\uff0c\u4e5f\u5c31\u662f\u4ee5\u4e2d\u5fc3\u4e3a\u4e00\u7aef\u7684\u8fb9\u4e2d\u6700\u77ed\u7684\u8fb9\u3002\n\n\u5982\u679c\u6811\u6709\u4e24\u4e2a\u91cd\u5fc3\uff0c\u90a3\u4e48\u51cf\u53bb\u4e24\u91cd\u5fc3\u4e4b\u95f4\u7684\u8fb9\u3002\u628a\u8fb9\u7b49\u6548\u4e3a\u4e0a\u6587\u7684\u91cd\u5fc3\u3002\n\n\u53ef\u4ee5\u8d34\u4ee3\u7801\u4e86  \n```cpp\nconst LL INF = 0x3f3f3f3f3f3f3f3f;\n\nLL ec = 0,hed[200005] = {0},to[400005],w[400005],nxt[400005];\nvoid add_edge(LL f,LL t,LL cst){\n\t++ ec; to[ec] = t; nxt[ec] = hed[f]; w[ec] = cst; hed[f] = ec;\n}\n\nLL siz[200005],mx[200005];\nLL ans = 0,n;\n\nvoid dfs(LL u,LL f){\n\tsiz[u] = 1;\n\tfor(LL i = hed[u];i;i = nxt[i]){\n\t\tLL v = to[i];\n\t\tif(v == f) continue;\n\t\tdfs(v,u);\n\t\tsiz[u] += siz[v]; mx[u] = max(mx[u],siz[v]);\n\t\tans += 2 * min(siz[v],n - siz[v]) * w[i];\n\t}\n\tmx[u] = max(mx[u],n - siz[u]);\n}\n\nint main(){\n\tios::sync_with_stdio(false);\n\tLL u,v,ww,g = INF,sub = INF,p1 = 0,p2 = 0;\n\tcin >> n;\n\tfor(LL i = 1;i < n;i ++){\n\t\tcin >> u >>\tv >> ww;\n\t\tadd_edge(u,v,ww);\n\t\tadd_edge(v,u,ww);\n\t}\n\tdfs(1,0);\n\tfor(LL i = 1;i <= n;i ++) g = min(g,mx[i]);\n\tfor(LL i = 1;i <= n;i ++){\n\t\tif(mx[i] != g) continue;\n\t\tif(!p1) p1 = i;\n\t\telse p2 = i;\n\t}\n\tfor(LL i = hed[p1];i;i = nxt[i]){\n\t\tLL v = to[i];\n\t\tif(p2 && v != p2) continue;\n\t\tsub = min(sub,w[i]);\n\t}\n\tcout << ans - sub << endl;\n\treturn 0;\n}\n```\n$\\sf{difficulty:\\color{red}2813}$  \n\u8981\u6c42\u8fd0\u7528\u91cd\u5fc3\u7684\u6027\u8d28\u4ee5\u53ca\u7528\u5230\u4e00\u4e2a\u5e38\u7528\u7684 trick\uff0c\u601d\u7ef4\u96be\u5ea6\u8fd8\u662f\u633a\u5927\u7684\uff08\u60f3\u4e0d\u5230\u662f\u91cd\u5fc3\uff09\uff0c\u4ee3\u7801\u5b9e\u73b0\u96be\u5ea6\u8fd8\u662f\u4e00\u5982\u65e2\u5f80\u7684\u5c0f\u3002",
        "postTime": 1585038501,
        "uid": 31440,
        "name": "installb",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 AT2673 \u3010[AGC018D] Tree and Hamilton Path\u3011"
    },
    {
        "content": "### \u601d\u8def\n\n\u8003\u8651\u53cd\u5411\u7edf\u8ba1\u8d21\u732e\u3002\n\n\u4e00\u4e2a\u663e\u7136\u7684\u4e0a\u754c\uff1a\u6bcf\u4e2a\u8fb9\u6700\u591a\u4f1a\u88ab\u8ba1\u7b97 $2\\min\\{siz_1,siz_2\\}-[siz_1=siz_2]$ \u6b21\uff08\u5047\u8bbe\u5176\u4e24\u8fb9\u70b9\u6570\u5206\u522b\u4e3a $siz_1,siz_2$\uff09\uff1b\u5177\u4f53\u5c31\u662f\u5de6\u53f3\u8282\u70b9\u4e4b\u95f4\u6a2a\u8df3\u7684\u8d21\u732e\uff0c\u5bb9\u6613\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a\u6bd4\u8f83\u7d27\u7684\u4e0a\u754c\u3002\n\n\u6211\u4eec\u5c1d\u8bd5\u6784\u9020\u65b9\u6848\u5c3d\u53ef\u80fd\u53d6\u5230\u8fd9\u4e2a\u4e0a\u754c\u3002\n\n\u6211\u4eec\u5148\u8003\u8651\u53cc\u91cd\u5fc3\u7684\u60c5\u51b5\uff0c\u5bb9\u6613\u53d1\u73b0\u4ece\u4e00\u4fa7\u91cd\u5fc3\u5f00\u59cb\uff0c\u5728\u5de6\u53f3\u5b50\u6811\u4efb\u610f\u4ea4\u66ff\u9009\u62e9\uff0c\u6700\u540e\u5230\u8fbe\u53e6\u4e00\u4fa7\u91cd\u5fc3\uff0c\u5373\u53ef\u53d6\u6ee1\u3002\n\n\u518d\u8003\u8651\u5355\u91cd\u5fc3\u7684\u60c5\u51b5\uff0c\u90a3\u4e48\u4efb\u4e00\u5b50\u6811\u5927\u5c0f\u5747 $<n/2$\u3002\n\n\u4f7f\u7528\u7ecf\u5178\u7ed3\u8bba\uff08[\u300cZJOI2018\u300d\u5386\u53f2](https://loj.ac/p/2434)\uff0c\u6216\u8005 [\u300cPOI2015\u300dLOG](https://www.luogu.com.cn/problem/P3586)\uff09\uff0c\u6211\u4eec\u53ef\u4ee5\u8bc1\u660e\uff0c\u4efb\u53d6\u91cd\u5fc3\u5916\u4e00\u70b9\u505a\u8d77\u70b9\uff0c\u4ee5\u91cd\u5fc3\u505a\u7ec8\u70b9\uff0c\u5b58\u5728\u904d\u5386\u6574\u4e2a\u56fe\u7684\u65b9\u6848\u4f7f\u5f97**\u6b65\u6b65\u8de8\u8fc7\u91cd\u5fc3**\u3002\n\n\u8fd9\u6837\u552f\u4e00\u4f1a\u88ab**\u7b97\u4e0d\u6ee1\u7684\u8d21\u732e**\u5c31\u662f\u8d77\u70b9\u548c\u91cd\u5fc3\u4e4b\u95f4\u7684\u8fb9\uff0c\u76f4\u63a5\u7edf\u8ba1\u8fd9\u6837\u7684\u8fb9\u4e2d\u6700\u5c0f\u503c\uff0c\u4ece\u7b54\u6848\u4e2d\u51cf\u53bb\u5373\u53ef\u3002\n\n\u81f3\u4e8e\u5355\u91cd\u5fc3\u65f6\u8fd9\u4e2a\u7b97\u6cd5\u7684\u6700\u4f18\u6027\uff0c\u6211\u4eec\u8003\u8651\u53ea\u7528\u8bc1\u660e\uff0c**\u65e0\u8bba\u5982\u4f55\u53d6\uff0c\u81f3\u5c11\u4f1a\u6709\u4e00\u6761\u548c\u91cd\u5fc3\u76f8\u8fde\u7684\u8fb9\u4e0d\u88ab\u53d6\u6ee1**\u3002\n\n\u5bb9\u6613\u53d1\u73b0\uff0c\u5047\u8bbe\u8d77\u70b9\u5728\u91cd\u5fc3\u4e3a\u6839\u7684\u6811\u4e0a\u7684\u67d0\u4e2a\u5b50\u6811\u5185\uff0c\u90a3\u4e48\u5176\u5230\u6839\u7684\u8def\u5f84\u4e0a\u7684\u8fb9\uff0c**\u603b\u4e0d\u53ef\u80fd\u53d6\u6ee1\u8d21\u732e\u3002**\n\n\u56e0\u6b64\u51cf\u53bb\u6743\u503c\u6700\u5c0f\u7684\u548c\u91cd\u5fc3\u76f8\u8fde\u7684\u8fb9\u7684\u8d21\u732e\u5373\u53ef\u3002\n\n\u603b\u590d\u6742\u5ea6 $O(n)$\u3002\n\n### Code\n\n\u6838\u5fc3\u4ee3\u7801\u5f88\u77ed\u3002\n\n```cpp\nuint n;ullt ans;\nstd::vector<uint>P;\nstd::vector<std::pair<uint,uint> >Way[100005];\nuint dfs(uint p,uint f){\n    uint siz=1,t=0,user;\n    for(auto s:Way[p])if(s.first!=f)\n        siz+=user=dfs(s.first,p),_max(t,user);\n    if(n-siz<=n/2&&t<=n/2)\n        P.push_back(p);\n    for(auto s:Way[p])if(s.first==f)\n        ans+=2llu*std::min(siz,n-siz)*s.second;\n    return siz;\n}\nint main()\n{\n#ifdef MYEE\n    freopen(\"QAQ.in\",\"r\",stdin);\n    // freopen(\"QAQ.out\",\"w\",stdout);\n#endif\n    scanf(\"%u\",&n);\n    for(uint i=1,u,v,w;i<n;i++)\n        scanf(\"%u%u%u\",&u,&v,&w),\n        Way[--u].push_back({--v,w}),Way[v].push_back({u,w});\n    dfs(0,-1);\n    if(P.size()==2){\n        for(auto s:Way[P[0]])if(s.first==P[1])ans-=s.second;\n    }else{\n        uint v=-1;\n        for(auto s:Way[P[0]])_min(v,s.second);\n        ans-=v;\n    }\n    printf(\"%llu\\n\",ans);\n    return 0;\n}\n```\n",
        "postTime": 1677895072,
        "uid": 105050,
        "name": "myee",
        "ccfLevel": 7,
        "title": "agc018_d"
    },
    {
        "content": "\u524d\u8a00\uff1a\n\n\u6211\uff1a\u539f\u6765\u54c8\u5bc6\u5c14\u987f\u8def\u5f84\u662f\u4e00\u6761\u94fe\n\njuju\uff1a\u8fd9\u771f\u662f\u6211\u542c\u5230\u7684\u6700\u5e9f\u8bdd\u7684\u5e9f\u8bdd\n\n\u505a\u6cd5\uff1a\n\n\u8003\u8651\u4e00\u4e2a\u7ecf\u5178\u7684\u6784\u9020\uff0c\u6211\u4eec\u5047\u8bbe\u8981\u6c42\u7684\u662f\u54c8\u5bc6\u5c14\u987f\u56de\u8def\u3002\n\n\u90a3\u4e48\u663e\u7136\u5bf9\u4e8e\u6bcf\u4e00\u6761\u8fb9\uff0c\u90fd\u53ef\u4ee5\u7ecf\u8fc7\u4e24\u500d\u4e24\u8fb9\u7684\u6700\u5c0f\u503c\u6b21\uff0c\u663e\u7136\u5b58\u5728\u8fd9\u6837\u7684\u6784\u9020\u65b9\u6848\u3002\n\n\u90a3\u4e48\u6211\u4eec\u73b0\u5728\u8981\u5220\u4e00\u6761\u8fb9\uff0c\u8003\u8651\u600e\u6837\u8fd9\u79cd\u6784\u9020\u5c31\u4e0d\u5408\u6cd5\u4e86\u3002\n\n\u663e\u7136\u5982\u679c\u5220\u6389\u4e86\u4e24\u70b9\uff0c\u5207\u4ed6\u4eec\u7684 $lca$ \u7684\u5b50\u6811\u5927\u5c0f\u4e0d\u8d85\u8fc7 $n$ \u9664 $2$\uff0c\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u3002\n\n\u6362\u53e5\u8bdd\u8bf4\uff0c\u4e24\u70b9\u8def\u5f84\u4e0d\u7ecf\u8fc7\u91cd\u5fc3\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u3002\n\n\u53cd\u5411\u601d\u8003\uff0c\u8fd9\u4e5f\u610f\u5473\u7740\u53ea\u8981\u6bcf\u4e00\u6761\u8def\u5f84\u90fd\u7ecf\u8fc7\u91cd\u5fc3\uff0c\u90a3\u65b9\u6848\u5c31\u662f\u5408\u6cd5\u7684\u3002\u6240\u4ee5\u53ea\u8981\u5220\u53bb\u8fc7\u91cd\u5fc3\u7684\u6700\u5c0f\u7684\u8fb9\u5373\u53ef\u3002\n\n\u6ce8\u610f\u4e00\u4e2a\u7ec6\u8282\uff0c\u5f53\u6709\u4e24\u4e2a\u91cd\u5fc3\u65f6\u5220\u53bb\u91cd\u5fc3\u4e4b\u95f4\u7684\u8fb9\u3002\n\n```\n#include<bits/stdc++.h>\nusing namespace std;\ninline int read(){\n\tint x=0,f=1;char c=getchar();\n\twhile(c<'0'||c>'9'){if(c=='-')f=-1;c=getchar();}\n\twhile(c>='0'&&c<='9'){x=(x<<1)+(x<<3)+c-'0';c=getchar();}\n\treturn x*f;\n}\nconst int maxn=2e5+10;\nint beg[maxn],nex[maxn],to[maxn],w[maxn],e;\ninline void add(int x,int y,int z){\n\te++;nex[e]=beg[x];beg[x]=e;to[e]=y;w[e]=z;\n\te++;nex[e]=beg[y];beg[y]=e;to[e]=x;w[e]=z;\n}\n#define ll long long\nint n,siz[maxn],mx[maxn];ll ans;\ninline void dfs(int x,int fa){\n\tsiz[x]=1;\n\tfor(int i=beg[x];i;i=nex[i]){\n\t\tint t=to[i];\n\t\tif(t==fa)continue;\n\t\tdfs(t,x);siz[x]+=siz[t];\n\t\tans+=2ll*min(siz[t],n-siz[t])*w[i];\n\t\tmx[x]=max(mx[x],siz[t]);\n\t}mx[x]=max(mx[x],n-siz[x]);\n}\nint main(){\n\tn=read();\n\tfor(int i=1,x,y,z;i<n;i++)\n\t\tx=read(),y=read(),z=read(),add(x,y,z);\n\tdfs(1,0);int p1=0,p2=0;mx[0]=n+1;\n\tfor(int i=1;i<=n;i++)\n\t\tif(mx[i]<mx[p1])p2=p1,p1=i;\n\t\telse if(mx[i]<mx[p2])p2=i;\n\tint tmp=1000000000;\n\tfor(int i=beg[p1];i;i=nex[i]){\n\t\tint t=to[i];\n\t\tif(t==p2&&mx[p1]==mx[p2]){tmp=w[i];break;}\n\t\ttmp=min(tmp,w[i]);\n\t}printf(\"%lld\\n\",ans-tmp);\n\treturn 0;\n}\n```\n\n\u540e\u8bb0\uff1a\n\nxzy\uff1a\u8fd9\u4e0d\u662f\u5927\u7ecf\u5178\u9898\uff0c\u4f60\u600e\u4e48\u8fd9\u90fd\u4e0d\u4f1a\uff1f\n\n\u6211\uff1a\u2026\u2026\n\n\u6df1\u6df1\u5730\u611f\u5230\u81ea\u5df1\u7684\u5f31\u5c0f",
        "postTime": 1636371987,
        "uid": 140876,
        "name": "syzf2222",
        "ccfLevel": 9,
        "title": "AGC018D"
    },
    {
        "content": "\u8fd9\u9053\u9898\u76f4\u63a5\u8ba1\u7b97\u4e0d\u597d\u7b97\uff0c\u6211\u4eec\u8003\u8651\u6bcf\u6761\u8fb9\u7684\u8d21\u732e\uff0c\u57fa\u4e8e\u4e00\u79cd\u8d2a\u5fc3\u7684\u601d\u60f3\uff0c\u6211\u4eec\u53d1\u73b0\u53ea\u8981\u56f4\u7740\u6811\u7684\u91cd\u5fc3\u8dd1\uff0c\u5c31\u53ef\u4ee5\u4f7f\u6bcf\u6761\u8fb9\u5f97\u5230\u5145\u5206\u5229\u7528\n\n\u8003\u8651\u8fb9i\u7684\u8d21\u732e\uff0c\u6211\u4eec\u5047\u5b9a\u8fb9i\u5272\u6389\u540e\u5206\u6210\u4e24\u4e2a\u5927\u5c0f\u4e3ax\uff0cy\u7684\u8054\u901a\u5757\uff0c\u90a3\u4e48\u8d21\u732e\u5219\u4e3a$2*v[i]*min(x,y)$\n\n\u56e0\u4e3a\u6211\u4eec\u8d70\u7684\u4e0d\u662f\u56de\u8def\uff0c\u56e0\u6b64\u6709\u4e00\u6761\u8fb9\u4e0d\u4f1a\u88ab\u7b97\u4e24\u6b21\u3002\u5982\u679c\u6811\u7684\u91cd\u5fc3\u53ea\u6709\u4e00\u4e2a\uff0c\u90a3\u4e48\u5fc5\u7136\u51cf\u53bb\u4e0e\u91cd\u5fc3\u76f8\u8fde\u7684\u8fb9\u6743\u6700\u5c0f\u7684\u8fb9\uff1b\u5982\u679c\u6811\u7684\u91cd\u5fc3\u6709\u4e24\u4e2a\uff0c\u51cf\u53bb\u4e24\u91cd\u5fc3\u76f8\u8fde\u7684\u8fb9\u5373\u53ef\n\n``` cpp\n/*program from Wolfycz*/\n#include<cmath>\n#include<cstdio>\n#include<cstring>\n#include<iostream>\n#include<algorithm>\n#define inf 0x7f7f7f7f\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned int ui;\ntypedef unsigned long long ull;\ninline char gc(){\n\tstatic char buf[1000000],*p1=buf,*p2=buf;\n\treturn p1==p2&&(p2=(p1=buf)+fread(buf,1,1000000,stdin),p1==p2)?EOF:*p1++;\n}\ninline int frd(){\n\tint x=0,f=1;char ch=gc();\n\tfor (;ch<'0'||ch>'9';ch=gc())\tif (ch=='-')    f=-1;\n\tfor (;ch>='0'&&ch<='9';ch=gc())\tx=(x<<1)+(x<<3)+ch-'0';\n\treturn x*f;\n}\ninline int read(){\n\tint x=0,f=1;char ch=getchar();\n\tfor (;ch<'0'||ch>'9';ch=getchar())\tif (ch=='-')\tf=-1;\n\tfor (;ch>='0'&&ch<='9';ch=getchar())\tx=(x<<1)+(x<<3)+ch-'0';\n\treturn x*f;\n}\ninline void print(int x){\n\tif (x<0)    putchar('-'),x=-x;\n\tif (x>9)\tprint(x/10);\n\tputchar(x%10+'0');\n}\nconst int N=2e5;\nint pre[(N<<1)+10],now[N+10],child[(N<<1)+10],val[(N<<1)+10];\nint size[N+10],Msize[N+10];\nint n,tot,rize,root;\nll Ans;\nvoid join(int x,int y,int z){pre[++tot]=now[x],now[x]=tot,child[tot]=y,val[tot]=z;}\nvoid insert(int x,int y,int z){join(x,y,z),join(y,x,z);}\nvoid dfs(int x,int fa,int v){\n\tint Max=0; size[x]=1;\n\tfor (int p=now[x],son=child[p];p;p=pre[p],son=child[p]){\n\t\tif (son==fa)\tcontinue;\n\t\tdfs(son,x,val[p]),size[x]+=size[son];\n\t\tMax=max(Max,size[son]);\n\t}\n\tAns+=1ll*min(size[x],n-size[x])*v*2;\n\tMax=max(Max,n-size[x]);\n\tMsize[x]=Max;\n\tif (Max<rize){\n\t\trize=Max;\n\t\troot=x;\n\t}\n}\nint main(){\n\tn=read(),rize=inf;\n\tfor (int i=1;i<n;i++){\n\t\tint x=read(),y=read(),z=read();\n\t\tinsert(x,y,z);\n\t}\n\tdfs(1,0,0);\n\tint tmp=inf;\n\tfor (int p=now[root],son=child[p];p;p=pre[p],son=child[p]){\n\t\ttmp=min(tmp,val[p]);\n\t\tif (Msize[root]==Msize[son]){\n\t\t\tAns-=val[p];\n\t\t\tprintf(\"%lld\\n\",Ans);\n\t\t\treturn 0;\n\t\t}\n\t}\n\tprintf(\"%lld\\n\",Ans-tmp);\n\treturn 0;\n}\n```",
        "postTime": 1544276741,
        "uid": 21633,
        "name": "Wolfycz",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT2673 \u3010Tree and Hamilton Path\u3011"
    },
    {
        "content": "\u76f4\u63a5\u505a\u4e0d\u592a\u597d\u505a\uff0c\u8003\u8651\u5148\u6784\u9020\u54c8\u5bc6\u987f\u56de\u8def\uff0c\u518d\u5220\u6389\u4e00\u6761\u8fb9\u5f97\u5230\u7b54\u6848\u3002\n\n\u8003\u8651\u5982\u4f55\u6784\u9020\u54c8\u5bc6\u987f\u56de\u8def\u3002\u5bf9\u4e8e\u6811\u4e0a\u7684\u4e00\u6761\u8fb9\uff0c\u5982\u679c\u5b83\u4e24\u8fb9\u7684\u8fde\u901a\u5757\u5927\u5c0f\u5206\u522b\u4e3a $x$\uff0c$y$\uff0c\u90a3\u4e48\u8fd9\u6761\u8fb9\u6700\u591a\u4f1a\u88ab\u8d21\u732e $2\\times\\min(x,y)$ \u6b21\uff0c\u8fd9\u4e5f\u5c31\u662f\u54c8\u5bc6\u987f\u56de\u8def\u957f\u5ea6\u7684\u4e0a\u754c\u3002\u8bc1\u660e\u53ef\u4ee5\u81ea\u884c\u753b\u56fe\u611f\u6027\u7406\u89e3\u3002\n\n\u63a5\u7740\u6211\u4eec\u8003\u8651\u5220\u6389\u4e00\u6761\u6811\u4e0a\u7684\u8def\u5f84\u3002\u4f46\u662f\u6709\u7684\u8def\u5f84\u5728\u6700\u957f\u54c8\u5bc6\u987f\u56de\u8def\u4e2d\u4e0d\u4e00\u5b9a\u4f1a\u51fa\u73b0\uff0c\u6211\u4eec\u8003\u8651\u4ec0\u4e48\u6837\u7684\u8def\u5f84\u662f\u4e00\u5b9a\u4f1a\u51fa\u73b0\u7684\u3002\u6211\u4eec\u62ff\u51fa\u6811\u7684\u91cd\u5fc3\u5f53\u4f5c\u6839\uff0c\u6b64\u65f6\u4e3a\u4e86\u8ba9\u4ece\u5b83\u8fde\u51fa\u7684\u51e0\u6761\u8fb9\u8d21\u732e\u90fd\u8fbe\u5230\u4e0a\u754c\uff0c\u54c8\u5bc6\u987f\u56de\u8def\u4e2d\u7684\u6bcf\u4e00\u6761\u8def\u5f84\u90fd\u4f1a\u6a2a\u8de8\u91cd\u5fc3\u7684\u4e24\u4e2a\u5b50\u6811\uff0c\u56e0\u6b64\u7ecf\u8fc7\u91cd\u5fc3\u7684\u8def\u5f84\u4e00\u5b9a\u4f1a\u51fa\u73b0\u3002\n\n\u540c\u65f6\u6211\u4eec\u5047\u8bbe\u5b58\u5728\u4e00\u6761\u5728\u6700\u4f18\u89e3\u4e2d\u7684\u8def\u5f84\uff0c\u4f7f\u5f97\u5b83\u4e0d\u7ecf\u8fc7\u91cd\u5fc3\uff0c\u5047\u8bbe\u5b83\u5728\u91cd\u5fc3\u7684\u5b50\u6811 $x$ \u4e2d\u3002\u6839\u636e\u91cd\u5fc3\u7684\u6027\u8d28\uff0c$sz_x\\le \\lfloor\\dfrac{n}{2}\\rfloor$\uff0c\u56e0\u6b64 $\\min(sz_x,n-sz_x)=sz_x$\uff0c\u56e0\u4e3a\u8fd9\u6761\u8def\u5f84\u5728\u5b50\u6811\u5185\u90e8\uff0c\u4f7f\u5f97\u6839\u8fde\u5230 $x$ \u7684\u8fb9\u6700\u591a\u53ea\u80fd\u88ab\u8d21\u732e $2\\times sz_x-1$ \u6b21\uff0c\u4e0e\u524d\u9762\u7684\u63a8\u5bfc\u4e0d\u7b26\u3002\u81f3\u6b64\uff0c\u6211\u4eec\u8bc1\u660e\u4e86\uff1a**\u4e00\u6761\u8def\u5f84\u5728\u6700\u4f18\u89e3\u4e2d\u51fa\u73b0\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b83\u7ecf\u8fc7\u91cd\u5fc3\u3002**\n\n\u6240\u4ee5\u6211\u4eec\u53ea\u8981\u5220\u6389\u7ecf\u8fc7\u91cd\u5fc3\u7684\u6700\u77ed\u8def\u5f84\u5373\u53ef\u3002\u6362\u53e5\u8bdd\u8bf4\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u91cd\u5fc3\u7684\u60c5\u51b5\uff0c\u53ea\u8981\u5220\u6389\u91cd\u5fc3\u8fde\u51fa\u7684\u6700\u77ed\u8fb9\uff0c\u5bf9\u4e8e\u4e24\u4e2a\u91cd\u5fc3\u7684\u60c5\u51b5\uff0c\u5220\u6389\u5b83\u4eec\u4e2d\u95f4\u7684\u70b9\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n)$\u3002\n\nCode:\n\n```cpp\n#include <cstdio>\n#include <cstring>\n#include <algorithm>\nusing namespace std ;\nconst int MAXN = 1e5 + 10 , INF = 0x3f3f3f3f ;\ntypedef long long ll ;\nll ans ;\nint n , fir[MAXN] , tot , sz[MAXN] , mx[MAXN] , mn = INF , rt[5] , cnt ;\nstruct edge {int to , nxt , w ;} e[MAXN << 1] ;\nvoid add (int u , int v , int w) {e[++tot].to = v ; e[tot].nxt = fir[u] ; fir[u] = tot ; e[tot].w = w ;} \nvoid dfs (int x , int fa) {\n\tsz[x] = 1 ;\n\tfor (int i = fir[x] ; i ; i = e[i].nxt) {\n\t\tint v = e[i].to , w = e[i].w ;\n\t\tif (v == fa) continue ;\n\t\tdfs (v , x) , sz[x] += sz[v] , mx[x] = max (mx[x] , sz[v]) ;\n\t\tans += (ll)w * 2LL * min (sz[v] , n - sz[v]) ;\n\t}\n\tmx[x] = max (mx[x] , n - sz[x]) ; mn = min (mn , mx[x]) ;\n} \nint main () {\n\tscanf (\"%d\" , &n) ;\n\tfor (int i = 1 , u , v , w ; i < n ; i++)\n\t\tscanf (\"%d%d%d\" , &u , &v , &w) , add (u , v , w) , add (v , u , w) ;\n\tdfs (1 , 0) ;\n\tfor (int i = 1 ; i <= n ; i++)\n\t\tif (mx[i] == mn) rt[++cnt] = i ;\n\tint ret = INF ;\n\tfor (int i = fir[rt[1]] ; i ; i = e[i].nxt) {\n\t\tint v = e[i].to , w = e[i].w ;\n\t\tif (cnt == 2 && v != rt[2]) continue ;\n\t\tret = min (ret , w) ;\n\t}\n\tprintf (\"%lld\\n\" , ans - ret) ;\n\treturn 0 ;\n}\n```",
        "postTime": 1667871010,
        "uid": 122641,
        "name": "GIFBMP",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AGC018D\u3010Tree and Hamilton Path\u3011"
    }
]