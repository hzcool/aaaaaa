[
    {
        "content": "\u4e8c\u5206\u7b54\u6848\uff0c\u5e76\u75282-sat\u5224\u5b9a\u3002\n\n\u5927\u81f4\u601d\u8def\uff1a\n1. \u4e8c\u5206\u4e00\u4e2a\u8ddd\u79bbmid\uff0c\u4f5c\u4e3a\u6700\u5927\u8ddd\u79bb\u3002\n2. \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u8ba9\u6bcf\u4e2a\u65d7\u5b50\u4e4b\u95f4\u7684\u8ddd\u79bb\u90fd\u5c0f\u4e8e\u7b49\u4e8emid\u3002\u5982\u679c\u53ef\u4ee5\uff0c\u66f4\u65b0\u7b54\u6848\uff0c\u5c1d\u8bd5\u589e\u5927mid\uff1b\u5982\u679c\u4e0d\u53ef\u4ee5\uff0c\u7f29\u5c0fmid\u5e76\u91cd\u65b0\u5224\u65ad\u3002\n\n\u672c\u9898\u6700\u5927\u8303\u56f4\u5982\u679c$O(n^2)$\u5efa\u8fb9\u662f\u65e0\u6cd5\u901a\u8fc7\u7684\uff0c\u7531\u4e8e\u6bcf\u6b21\u90fd\u662f\u5411\u5de6\u53f3\u4e00\u4e2a\u533a\u95f4\u5185\u5efa\u8fb9\uff0c\u6240\u4ee5\u7528\u7ebf\u6bb5\u6811\u8f85\u52a9\u5efa\u56fe\u3002\n\n\u7528$x_i$\u8868\u793a\u65d7\u5e1c$i$\u7684\u4e00\u4e2a\u4f4d\u7f6e\uff0c\u5bf9\u5e94\u7684\u53e6\u4e00\u4e2a\u4f4d\u7f6e\u4e3a$x'_i$\uff0c\u90a3\u4e48\u6211\u4eec\u9700\u8981\u5efa\u7684\u8fb9\u5c31\u662f$x_i->\\{x'_j||x_i-x_j|>mid\\}$\uff08\u6b64\u5904\u7684$x_j$\u53ef\u4ee5\u662f\u9898\u4e2d\u7684$x$\uff0c\u4e5f\u53ef\u4ee5\u662f\u9898\u4e2d\u7684$y$\uff09\u3002\n\n\u53ef\u4ee5\u770b\u51fa\uff0c\u4ece$x_i$\u5230\u5de6\u53f3$mid$\u8303\u56f4\u5185\u9700\u8981\u5efa\u8fb9\u3002\n\n\u56e0\u6b64\uff0c\u6211\u4eec\u5c06\u9898\u4e2d$x$\u3001$y$\u653e\u5728\u4e00\u8d77\u6392\u5e8f\uff0c\u5e76\u5728\u6b64\u4e4b\u4e0a\u5efa\u7acb\u4e00\u9897\u7ebf\u6bb5\u6811\u3002\n\n\u6709\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u5f0f\u53ef\u4ee5\u5b9e\u73b0\u8fd9\u4e00\u76ee\u7684\uff0c\u6211\u91c7\u7528\u7684\u662f\u4ee5\u4e0b\u8fd9\u79cd\uff1a\n\n\u5bf9\u4e8e\u6392\u5e8f\u540e\u7684\u6bcf\u4e2a\u70b9\u5efa\u7acb\u4e00\u4e2a\u201c\u5360\u4f4d\u7b26\u201d\u4f5c\u4e3a\u7ebf\u6bb5\u6811\u7684\u53f6\u5b50\uff0c\u7531\u5360\u4f4d\u7b26\u5411\u5bf9\u7acb\u7684\u70b9\u79bb\u5cb8\u8fb9\uff1b\u7ebf\u6bb5\u6811\u4e2d\u7236\u4eb2\u5411\u513f\u5b50\u8fde\u8fb9\u3002\n\u8fd9\u6837\uff0c\u5411\u4e00\u4e2a\u8303\u56f4\u5185\u7684\u5bf9\u7acb\u70b9\u8fde\u8fb9\u5c31\u8f6c\u6362\u6210\u4e86\u7ebf\u6bb5\u6811\u4e0a\u7684\u533a\u95f4\u64cd\u4f5c\u3002\n\n\u53ef\u4ee5\u770b\u56fe\uff1a\n\n\u5efa\u51fa\u7684\u7ebf\u6bb5\u6811\uff1a\n![1](https://cdn.luogu.com.cn/upload/image_hosting/vhfrsv7z.png)\n\n\u7531$x_2$\u5411\u84dd\u8272\u7ebf\u6807\u6ce8\u533a\u95f4\u5185\u8fde\u8fb9\uff1a\n\n\uff08\u7ea2\u8272\u4e3a\u5b9e\u9645\u8fde\u8fb9\uff0c\u7c89\u8272\u4e3a\u8fbe\u5230\u7684\u6548\u679c\uff0c\u5373\uff1a\u4f7f\u5f97$x_2$\u4e0e\u533a\u95f4\u5185\u70b9\u90fd\u8054\u901a\uff09\n![2](https://cdn.luogu.com.cn/upload/image_hosting/wdocex65.png)\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <cstring>\nusing namespace std;\n\n#define clear(x) memset(x, 0, sizeof(x))\n#define op(x) ((x) <= n ? (x) + n : (x) - n)\n// op\u53ef\u4ee5\u6c42\u51fa\u4e00\u4e2a\u70b9x\u7684\u5bf9\u7acb\u70b9\n#define mid ((l + r) / 2)\n#define ls now * 2\n#define rs now * 2 + 1\n\nconst int N = 4e4 + 10, M = N * 20;\n\nint hd[N * 5], nxt[M], t[M], ec;\nvoid addEdge(int u, int v) {\n    t[++ec] = v;\n    nxt[ec] = hd[u];\n    hd[u] = ec;\n}\nstruct Flag {\n    int pos, id;\n    bool operator<(const Flag& f) const { return pos < f.pos; }\n    Flag(int pos = 0): pos(pos) {}\n} flgs[N * 2];\n\nint n;\nint cnt;\nint id[N * 5];\n\nvoid build(int now, int l, int r) {\n    id[now] = ++cnt;\n    if (l == r) {\n        addEdge(id[now], op(flgs[l].id));\n        // \u7531\u201c\u5360\u4f4d\u7b26\u201d\u5411\u771f\u5b9e\u70b9\u7684\u5bf9\u7acb\u70b9\u8fde\u8fb9\n        return;\n    }\n    build(ls, l, mid);\n    build(rs, mid + 1, r);\n    addEdge(id[now], id[ls]);\n    addEdge(id[now], id[rs]);\n    // \u7531\u7236\u4eb2\u5411\u513f\u5b50\u8fde\u8fb9\n}\n\nvoid link(int now, int l, int r, int x, int y, int point) {\n    // \u7531point\u5411\u533a\u95f4[x,y]\u8fde\u8fb9\n    if (y < x) return;\n    if (l == x && y == r) addEdge(point, id[now]);\n    else if (y <= mid) link(ls, l, mid, x, y, point);\n    else if(x > mid) link(rs, mid + 1, r, x, y, point);\n    else link(ls, l, mid, x, mid, point), link(rs, mid + 1, r, mid + 1, y, point);\n}\n\n#undef mid\n\nint dfn[N * 5], low[N * 5], tim;\nint stk[N * 5], tp;\nint scc[N * 5], sc;\nbool in[N * 5];\n\nvoid dfs(int u) { // Tarjan\u7b97\u6cd5 \u5f3a\u8fde\u901a\u5206\u91cf\n    in[u] = 1;\n    dfn[u] = low[u] = ++tim;\n    stk[++tp] = u;\n    int v;\n    for (int i = hd[u]; i; i = nxt[i]) {\n        if (!dfn[v = t[i]]) dfs(v), low[u] = min(low[u], low[v]);\n        else if (in[v]) low[u] = min(low[u], dfn[v]);\n    }\n    if (dfn[u] == low[u]) {\n        ++sc;\n        do {\n            scc[v = stk[tp--]] = sc;\n            in[v] = 0;\n        } while (v != u);\n    }\n}\n\nbool check(int v) {\n    tp = tim = ec = 0;\n    clear(hd), clear(dfn), clear(low);\n    build(1, 1, cnt = 2 * n);\n    int l, r;\n    for (int i = 1; i <= 2 * n; i++) {\n        l = upper_bound(flgs + 1, flgs + 1 + 2 * n, Flag(flgs[i].pos - v)) - flgs;\n        r = upper_bound(flgs + 1, flgs + 1 + 2 * n, Flag(flgs[i].pos + v - 1)) - flgs - 1;\n        link(1, 1, 2 * n, l, i - 1, flgs[i].id), link(1, 1, 2 * n, i + 1, r, flgs[i].id);\n    }\n    for (int i = 1; i <= 2 * n; i++) if (!dfn[i]) dfs(i);\n    for (int i = 1; i <= n; i++) if(scc[i] == scc[i + n]) return 0;\n    // \u5224\u65adx\u4e0ey\u662f\u5426\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u5185\n    return 1;\n}\n\nint main() {\n    scanf(\"%d\", &n);\n    for (int i = 1; i <= n; i++) {\n        scanf(\"%d%d\", &flgs[i].pos, &flgs[i + n].pos);\n        flgs[i].id = i, flgs[i + n].id = i + n;\n    }\n\n    sort(flgs + 1, flgs + n * 2 + 1);\n    \n    int l = 0, r = flgs[2 * n].pos - flgs[1].pos + 1, mid, ans;\n    while (l <= r) { // \u4e8c\u5206\n        mid = (l + r) / 2;\n        if (check(mid)) l = mid + 1, ans = mid;\n        else r = mid - 1;\n    }\n\n    printf(\"%d\", ans);\n}\n```",
        "postTime": 1572363152,
        "uid": 149392,
        "name": "w1049",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT2336 \u3010Flags\u3011"
    },
    {
        "content": "# \u3010ARC069F\u3011Flags  \u9898\u89e3\n\n\u9996\u5148\u6211\u4eec\u4e8c\u5206\u7b54\u6848\n\n\u4e8c\u5206\u7b54\u6848\u4e4b\u540e\uff0c\u5c31\u53d8\u6210\u4e86\u7ecf\u5178\u76842-SAT\u95ee\u9898\u3002\u5373\uff1a\u6bcf\u4e2a\u96c6\u5408\u6709\u4e24\u4e2a\u5143\u7d20\uff0c\u6bcf\u4e2a\u96c6\u5408\u9700\u8981\u9009\u51fa\u4e00\u4e2a\u5143\u7d20\uff0c\u5e76\u4e14\u6ee1\u8db3\u4e00\u4e9b\u6761\u4ef6\u5f62\u5982\u201c\u9009\u4e86\u96c6\u5408A\u7684x\u5c31\u4e0d\u80fd\u9009\u96c6\u5408B\u7684x\u201d\uff0c\u8fd9\u6837\u7684\u6761\u4ef6\u53ef\u4ee5\u8f6c\u6362\u4e3a\u201c\u9009\u4e86\u96c6\u5408A\u7684x\u5c31\u5fc5\u987b\u9009\u96c6\u5408B\u7684y\u201d\uff0c\u7136\u540e\u96c6\u5408A\u7684x\u5411\u96c6\u5408B\u7684y\u8fde\u8fb9\uff0c\u8dd1\u4e00\u904dTarjan\u7f29\u70b9\uff0c\u5982\u679c\u67d0\u4e2a\u96c6\u5408\u7684\u4e24\u4e2a\u5143\u7d20\u5728\u540c\u4e00\u4e2a\u5f3a\u8fde\u901a\u5206\u91cf\u4e2d\uff0c\u8bf4\u660e\u65e0\u89e3\n\n\u590d\u6742\u5ea6\u74f6\u9888\u5728\u4e8e\u5efa\u8fb9\uff0c\u8fd9\u4e2a\u90e8\u5206\u7684\u590d\u6742\u5ea6\u662fO(n\u00b2)\n\n\u4e8e\u662f\u6211\u4eec\u5c31\u6709\u4e86\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u8fb9\u8fd9\u4e2a\u795e\u5947\u7684\u4e1c\u897f\u3002\u5177\u4f53\u5730\uff0c\u5148\u5c06\u6240\u6709\u70b9\u6392\u5e8f\uff0c\u7ebf\u6bb5\u6811\u4e2d\u7684\u4e00\u4e2a\u53f6\u5b50\u7ed3\u70b9[l,l]\uff0c\u5b58\u6392\u5e8f\u540e\u7b2cl\u4e2a\u70b9\u5728\u6392\u5e8f\u524d\u7684**\u53cd\u70b9\u7684\u7f16\u53f7**\uff08\u53cd\u70b9\u5b9a\u4e49\u4e3a\u96c6\u5408\u4e2d\u7684\u53e6\u4e00\u4e2a\u70b9\uff09\u3002\u7136\u540e\u7ebf\u6bb5\u6811\u7684\u4e00\u4e2a\u975e\u53f6\u5b50\u7ed3\u70b9\u4f5c\u4e3a\u56fe\u4e2d\u7684\u8f85\u52a9\u8282\u70b9\uff0c\u5411\u4e24\u4e2a\u5b50\u8282\u70b9\u8fde\u8fb9\u3002\u6b64\u65f6\u6211\u4eec\u5411[l,r]\u8fde\u8fb9\uff0c\u5c31\u76f8\u5f53\u4e8e\u5411\u6392\u5e8f\u540e\u7b2cl\u5230\u7b2cr\u7684\u6240\u6709\u70b9\u7684\u53cd\u70b9\u8fde\u8fb9\u3002\u5bb9\u6613\u53d1\u73b0\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9u\uff0c\u4ed6\u8981\u8fde\u51fa\u7684\u8fb9\u5728\u7ebf\u6bb5\u6811\u4e0a\u662f\u8fde\u7eed\u7684\uff0c\u4e8e\u662f\u5c31\u53ef\u4ee5\u91c7\u7528\u7ecf\u5178\u7684\u533a\u95f4\u8be2\u95ee\u65b9\u5f0f\u53bb\u8fde\u8fb9\u3002\n\n\u7531\u4e8e\u4e0d\u80fd\u5411\u81ea\u5df1\u7684\u53cd\u70b9\u8fde\u8fb9\uff0c\u8fde\u8fb9\u8981\u62c6\u6210\u4e24\u6b21\uff0c\u5373[x-mid,x-1]\u3001[x+1,x+mid]\uff0c\u5176\u4e2dx\u8868\u793a\u6b63\u5728\u8003\u8651\u7684\u70b9\uff0cmid\u8868\u793a\u5f53\u524d\u4e8c\u5206\u51fa\u6765\u7684\u7b54\u6848\u3002\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\ntypedef pair<int,int> pii;\nconst int N=40010;\nstruct Edge{int from,to,next;} e[N<<5];\nint h[N<<2],sum=0;\nint low[N<<2],pre[N<<2];\nint scc[N<<2],dfn,cnt;\nint a[2][N],n;\npii Hash[N<<1];\nstack<int> stk;\nint node[N<<4],tot;\n\nvoid add_edge(int u,int v)\n{\n\tif(u==v) return;\n\te[++sum].to=v;\n\te[sum].from=u;\n\te[sum].next=h[u];\n\th[u]=sum;\n}\n\nvoid Build(int o,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tnode[o]=Hash[l].second;\n\t\treturn;\n\t}\n\tnode[o]=++tot;\n\tint mid=(l+r)/2;\n\tBuild(o<<1,l,mid);\n\tBuild(o<<1|1,mid+1,r);\n\tadd_edge(node[o],node[o<<1]);\n\tadd_edge(node[o],node[o<<1|1]);\n}\n\nvoid link(int o,int l,int r,int nl,int nr,int u)\n{\n\tif(nl>nr) return;\n\tif(l>=nl&&r<=nr)\n\t{\n\t\tadd_edge(u,node[o]);\n\t\treturn;\n\t}\n\tint mid=(l+r)/2;\n\tif(nl<=mid) link(o<<1,l,mid,nl,nr,u);\n\tif(nr>mid) link(o<<1|1,mid+1,r,nl,nr,u);\n}\n\nvoid Init()\n{\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tHash[2*i-1].first=a[0][i];\n\t\tHash[2*i-1].second=i+n;\n\t\tHash[2*i].first=a[1][i];\n\t\tHash[2*i].second=i;\n\t}\n\tsort(Hash+1,Hash+1+2*n);\n}\n\nvoid Tarjan(int u)\n{\n\tstk.push(u);\n\tlow[u]=pre[u]=++dfn;\n\tfor(int tmp=h[u];tmp;tmp=e[tmp].next)\n\t\tif(!pre[e[tmp].to])\n\t\t{\n\t\t\tTarjan(e[tmp].to);\n\t\t\tlow[u]=min(low[u],low[e[tmp].to]);\n\t\t}\n\t\telse if(!scc[e[tmp].to]) low[u]=min(low[u],pre[e[tmp].to]);\n\tif(pre[u]==low[u])\n\t{\n\t\tint o;cnt++;\n\t\tdo{\n\t\t\to=stk.top();\n\t\t\tstk.pop();\n\t\t\tscc[o]=cnt;\n\t\t}while(o!=u);\n\t}\n}\n\nbool check(int x)\n{\n\tsum=dfn=cnt=0;tot=2*n;\n\tmemset(h,0,sizeof(h));\n\tBuild(1,1,2*n);\n\tfor(int i=1;i<=n;i++)\n\t\tfor(int k=0;k<2;k++)\n\t\t{\n\t\t\tint l=lower_bound(Hash+1,Hash+1+2*n,pii(a[k][i]-x+1,0))-Hash;\n\t\t\tint r=upper_bound(Hash+1,Hash+1+2*n,pii(a[k][i]+x-1,2*n+1))-Hash-1;\n\t\t\tint m=lower_bound(Hash+1,Hash+1+2*n,pii(a[k][i],(k^1)*n+i))-Hash;\n\t\t\tlink(1,1,2*n,l,m-1,k*n+i);\n\t\t\tlink(1,1,2*n,m+1,r,k*n+i);\n\t\t}\n\twhile(!stk.empty()) stk.pop();\n\tmemset(pre,0,sizeof(pre));\n\tmemset(low,0,sizeof(low));\n\tmemset(scc,0,sizeof(scc));\n\tfor(int i=1;i<=tot;i++)\n\t\tif(!pre[i]) Tarjan(i);\n\tfor(int i=1;i<=n;i++)\n\t\tif(scc[i]==scc[i+n]) return 0;\n\treturn 1;\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t\tscanf(\"%d%d\",&a[0][i],&a[1][i]);\n\tInit();\n\tint l=0,r=int(1e9),mid;\n\twhile(l<r)\n\t{\n\t\tmid=(l+r)/2;\n\t\tif(check(mid)) l=mid+1;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\\n\",check(l)?l:l-1);\n\treturn 0;\n}\n```\n\n",
        "postTime": 1535185193,
        "uid": 20158,
        "name": "Ebola",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 AT2336 \u3010Flags\u3011"
    },
    {
        "content": "\u86ee\u795e\u4ed9\u7684\u4e00\u9053\u9898 \n\n\u601d\u8def \uff1a \n\n\u4e8c\u5206\u7b54\u6848 \u4e24\u65d7\u4e4b\u95f4\u7684\u6700\u5c0f\u8ddd\u79bb \n\n\u8f6c\u5316\u4e3a 2 \u2014 SAT \u95ee\u9898 \u7528tarjan\u6c42\u89e3 \n\n\u5206\u5757\u4f18\u5316\u5efa\u8fb9 \n\n\u5256\u6790\u4e00\u4e0b\u601d\u8def \n\n\u6bcf\u4e2a\u65d7\u5b50\u53ea\u6709\u4e24\u79cd\u9009\u62e9 \n\n\u8981\u4e48\u5728 $x_{i}$ \u8981\u4e48\u5728 $y_{i}$ \n\n\n\u8003\u8651\u8fd9\u79cd\u60c5\u51b5  \n\n\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014 @ \u2014\u2014\u2014\u2014\u2014\u2014 @ \u2014\u2014\u2014\u2014 \n\n                            ^ \n                          \n\uff08 @ \u4e3a\u63d2\u65d7\u5b50\u7684\u70b9 \uff0c \u5047\u5982\u6211\u9009\u4e86 ^ \u6307\u7684\u65d7\u5b50 \uff09  \n \n\u5f53\u6211\u4eec\u628a \u4e24\u65d7\u4e4b\u95f4\u7684\u6700\u5c0f\u8ddd\u79bb \u4e8c\u5206\u51fa\u6765\u65f6 \n\n\u6211\u53ef\u4ee5\u5224\u65ad\u51fa \u524d\u9762\u90a3\u9762\u65d7\u5b50\u662f\u5426\u53ef\u9009 \n\n\u5047\u5982\u53ef\u9009 \u5c31\u4e0d\u7ba1\u4ed6 \n\n\u5047\u5982\u4e0d\u53ef\u9009 \u90a3\u4e48\u524d\u9762\u90a3\u9762\u65d7\u5b50\u53ea\u80fd\u6362\u4e2a\u5730\u65b9\u63d2\u4e86 \n\n\u56e0\u4e3a\u4e00\u9762\u65d7\u5b50\u53ea\u6709\u4e24\u79cd\u9009\u62e9 \n\n\u6211\u53ef\u4ee5\u65ad\u5b9a\u524d\u9762\u90a3\u9762\u65d7\u5b50\u63d2\u5728\u54ea\u91cc \n\n2 \u2014 SAT \u6a21\u578b\u5230\u6b64\u5e94\u8be5\u975e\u5e38\u663e\u773c\u4e86 \n\n\u4f46\u662f\u5efa\u56fe\u6709\u4e2a\u95ee\u9898 \u66b4\u529b\u662f n \u65b9\u7684 ~~\u66b4\u529b\u51fa\u5947\u8ff9~~ \n\n\u6211\u4eec\u53ef\u4ee5\u7528\u4e2a\u6570\u636e\u7ed3\u6784\u4f18\u5316\u5efa\u8fb9 \u8fd9\u91cc\u662f\u5206\u5757 \n\ncode : \n\n```cpp\n#include <bits/stdc++.h> \n#define Rg register \n#define IL inline  \nusing namespace std ; \nconst int N = 3e4 + 5 ;  \nint n , tot , sum , col[N] , dfn[N] , low[N] , top , sta[N] , pos[N] , block ; \nvector <int> v[N] ; bool In[N] ; \nstruct node { int whe , id ; } a[N] ; \nbool cmp ( node A , node B ) { return A.whe < B.whe ; } \nIL void add( Rg int x , Rg int y ) { v[x].push_back(y) ; } \nIL int op ( Rg int x ) { return x % 2 == 0 ? x-1 : x+1 ; }   \nIL int Sch ( Rg int Val ) { \n    Rg int l = 1 , r = (n<<1) , mid , Ans = 0 ; \n    if( Val <= a[l].whe ) return l ;  \n    if( Val >= a[r].whe ) return r ; \n    while( l <= r ) { \n    \tmid = l+r >> 1 ; \n    \tif( Val <= a[mid].whe ) Ans = mid , r = mid - 1 ; \n\t\t  else l = mid+1 ;  \n\t} \n\treturn Ans ; \n} \nIL void tarjan( Rg int x ) { \n\tIn[x] = 1 ; dfn[x] = low[x] = ++ tot ; sta[++top] = x ;  \n\tfor(Rg int i=0 ; i<v[x].size(); i++) { \n\t\tint u = v[x][i] ; \n\t\tif( !dfn[u] ) tarjan( u ) , low[x] = min( low[x] , low[u] ) ; \n\t\t  else if( In[u] ) low[x] = min( low[x] , dfn[u] ) ;  \n\t} \n\tif( dfn[x] == low[x] ) { \n\t     sum ++ ; int per = sta[top] ;  \n\t     while( per != x ) \n\t         col[per] = sum , In[per] = 0 , per = sta[--top] ; \n\t\t col[x] = sum , In[x] = 0 , top -- ;  \n\t} \n} \nvoid Build( int fro , int x , int y ) { \n    if( x > y ) return ; int l = pos[x] , r = pos[y] ; \n\tif( l == r ) { for(Rg int i=x; i<=y; i++) add( fro , op(a[i].id) ) ; return ; } \n\tfor(Rg int i=x; i<=l*block; i++) add( fro , op(a[i].id) ) ; \n\tfor(Rg int i=l+1; i<r; i++) add( fro , i+(n<<1) ) ;  \n\tfor(Rg int i=(r-1)*block+1 ; i<=y; i++) add( fro , op(a[i].id) )  ; \n} \nbool check( int H ) { \n    for(Rg int i=1; i<=(n<<1)+pos[n] ; i++) col[i] = dfn[i] = low[i] = 0 ; \n    for(Rg int i=1; i<=(n<<1)+pos[n] ; i++) v[i].clear( ) ; \n    for(Rg int i=1; i<=(n<<1) ; i++) v[(n<<1)+pos[i]].push_back(op(a[i].id)) ; \n    tot = sum = top = 0 ; int l , r ; \n    for(Rg int i=1; i<=(n<<1) ; i++) {  \n        l = Sch( a[i].whe-H+1 ) ; r = Sch( a[i].whe+H ) ; \n        Build( a[i].id , l , i-1 ) ; Build( a[i].id , i+1 , r-1 ) ; \n\t} \n\tfor(Rg int i=1; i<=(n<<1); i++) if( !dfn[i] ) tarjan(i) ; \n\tfor(Rg int i=1; i<=n; i++) if( col[a[i].id] == col[op(a[i].id)] ) return 0 ; \n\treturn 1 ; \n} \nsigned main() { \n    ios::sync_with_stdio(false) ; \n    cin.tie(0) ; cout.tie(0) ; \n    cin >> n ; \n    for(Rg int i=1; i<=n; i++) \n      cin >> a[(i<<1)-1].whe >> a[i<<1].whe , \n       a[(i<<1)-1].id = (i<<1) - 1 , a[i<<1].id = ( i<<1 ) ; \n    sort( a+1 , a+(n<<1)+1 , cmp ) ; \n    block = sqrt( n << 1 ) ; \n    for(Rg int i=1; i<=(n<<1); i++) pos[i] = (i-1)/block+1 ; \n    Rg int l = 1 , r = a[n<<1].whe - a[1].whe , mid , Ans = 0  ;  \n    while( l <= r ) { \n    \tmid = l+r >> 1 ; \n    \tif( check(mid) ) Ans = mid , l = mid+1 ; \n    \t  else r = mid-1 ; \n\t}  \n\tcout << Ans << '\\n' ;\n\treturn 0 ; \n} \n```\nop \u662f\u76f8\u5bf9\u5e94\u7684\u90a3\u4e2a\u70b9 \n\n\u5176\u4ed6\u7ec6\u8282\u4e0d\u61c2\u6b22\u8fce\u6765\u95ee\n\nlower_bound \u4e0d\u4f1a\u7528\u624b\u6253\u4e8c\u5206 \n\n\u95f2\u8bdd \uff1a \n\n\u5176\u5b9e\u9898\u89e3\u6211\u770b\u4e0d\u592a\u61c2 \u6253\u51fa\u6765\u6ca1\u4fe1\u5fc3\n\n\u4f46\u662f\u6253\u7740\u6253\u7740\u5c31\u6253\u5b8c\u4e86 \u6311\u7740\u6311\u7740\u5c31AC\u4e86 \n\n\u6240\u4ee5\u8fd8\u662f\u8981\u81ea\u5df1\u6478\u7d22 \u9898\u89e3\u53ea\u662f\u4e00\u4e2a\u601d\u8def\u7684\u63d0\u793a ",
        "postTime": 1580008549,
        "uid": 100114,
        "name": "hater",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT2336 \u3010Flags\u3011"
    },
    {
        "content": "\u94fe\u63a5\uff1a[AT2336 Flags](https://www.luogu.org/problemnew/show/AT2336)\n\uff08\u9898\u610f\u4e0d\u89e3\u91ca\u4e86\uff09\n\n#### \u89e3\u6cd5\uff1a2-sat + tarjan-scc + \u7ebf\u6bb5\u6811/\u5206\u5757####\n\n\uff08\u8bdd\u8bf42-sat\u8fd9\u4e1c\u897f\u6211\u8bfb\u6210\u4e8c\u5750\uff0czh\u5927\u4f6c\u6bcf\u6b21\u90fd\u8981\u7ea0\u6b63\u6211233333\uff09\n\n\u4f7f\u75282-sat\u5efa\u6a21\uff0c\u5c06\u6bcf\u4e2a\u70b9$i$\u62c6\u4e3a$i$\u4e0e$i'$\uff0c\u9898\u76ee\u8f6c\u5316\u4e3a\u9009\u70b9\u95ee\u9898\u3002\u4e00\u6761\u8fb9$(u,v)$\u8868\u793a\u82e5\u9009\u62e9\u4e86$u$\uff0c\u5219$v$\u5fc5\u987b\u88ab\u9009\u62e9\u3002\u8fd9\u4e1c\u897f\u6709\u5565\u7528\u5462\uff1f\u7531\u4e8e\u8f93\u5165\u7684\u6bcf\u5bf9\u6570\u8981\u4e48\u5fc5\u987b\u9009$x$\uff0c\u8981\u4e48\u5fc5\u987b\u9009$y$\uff0c\u4e5f\u5c31\u662f\u8bf4\u82e5\u6211\u4eec\u80fd\u75282-sat\u63a8\u51fa\u201c\u9009$u$\u5fc5\u987b\u9009$u'$\u201d\u90a3\u4e48\u95ee\u9898\u89e3\u51b3\u3002\n\n\u8003\u8651\u5982\u4f55\u8fde\u8fb9\u3002\u9996\u5148\u4e8c\u5206\u7b54\u6848\uff0c\u8bbe\u7b54\u6848\u4e3a$m$\uff0c\u90a3\u4e48\u6211\u4eec\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u8fde\u8fb9\uff08\u6216\u4f7f\u7528\u5206\u5757\u4f18\u5316\u8fde\u8fb9\uff09\uff0c\u5c06\u6240\u6709\u8bfb\u5165\u7684\u503c\u6392\u5e8f\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u70b9$u$\uff0c\u5728\u6392\u5e8f\u7684\u503c\u4e2d\u4e8c\u5206\u67e5\u627e\u533a\u95f4$[l,r]$\uff0c\u8ba9$[l,r]$\u4e0a\u7684\u6bcf\u4e2a\u6570\u4e0e$u$\u7684\u76f8\u5bf9\u5dee\u5747\u5c0f\u4e8e$m$\uff0c\u7136\u540e\u7531\u4e8e\u4e8c\u5206\u51fa\u7684\u7b54\u6848\u4e3a$m$\uff0c\u6240\u4ee5\u82e5$[l,r]$\u533a\u95f4\u4e0a\u7684\u9009\u4e86\uff0c\u5219$u$\u4e0d\u80fd\u9009\uff0c\u4ece\u800c$u'$\u5fc5\u987b\u9009\uff0c\u4e8e\u662f\u5c06$[l,r]$\u533a\u95f4\u4e0a\u7684\u6bcf\u4e2a\u70b9\u5411$u'$\u8fde\u8fb9\u3002\n\n\u5224\u65ad\u65f6\uff0c\u5148\u6c42\u51fa\u6240\u6709\u5f3a\u8fde\u901a\u5206\u91cf\uff0c\u82e5\u67d0\u4e2a\u70b9$u$\u4e0e$u'$\u5904\u4e8e\u540c\u4e00\u5f3a\u8fde\u901a\u5206\u91cf\u5185\uff0c\u90a3\u4e48\u5373\u662f\u8bf4\uff1a\u82e5$u$\u9009\u4e86\uff0c\u5219$u'$\u5fc5\u987b\u9009\uff0c\u4e0e\u9898\u8bbe\u77db\u76fe\uff0c\u9a8c\u8bc1\u8fd4\u56de\u4f2a\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\uff1a\u7ebf\u6bb5\u6811\u8fde\u8fb9$O(N\\log^2N)$\uff0c\u5206\u5757\u8fde\u8fb9$O(N\\sqrt{N}\\log N)$\uff0c\u5747\u53ef\u8fc7\u3002\n\n#### \u4ee3\u7801\uff08\u53ea\u6709\u7ebf\u6bb5\u6811\u7248\u672c\u7684\uff0c\u6211\u592a\u61d2\u4e86QAQ\uff09#### \n```cpp\n#include<iostream>\n#include<cstdio>\n#include<vector>\n#include<cstring>\n#include<stack>\n#include<algorithm>\n\nusing namespace std;\n\nstruct data{\n\tint x,i;\n\tdata():x(0),i(0){}\n\tdata(int y,int j):x(y),i(j){}\n\tfriend bool operator<(const data &dt1,const data &dt2){return dt1.x<dt2.x;}\n};\n\nstack<int> s;\nint n,x[80001],idx,tot,id[80001],low[80001],dfn[80001],scc,cid[80001];\nvector<data> vec;\nvector<int> point[80001];\n\nvoid build(int o,int l,int r){\n\tid[o]=++tot;\n\tif(o>1)point[id[o>>1]].push_back(tot);\n\tif(l==r){int v=vec[l-1].i;point[id[o]].push_back(v<=n?v+n:v-n);return;}\n\tint m=l+r>>1;\n\tbuild(o<<1,l,m),build(o<<1|1,m+1,r);\n}\n\nvoid update(int o,int l,int r,int a,int b,int x){\n\tif(a>b)return;\n\tif(l==a&&r==b){point[x].push_back(id[o]);return;}\n\tint m=l+r>>1;\n\tif(m>=b)update(o<<1,l,m,a,b,x);else if(m<a)update(o<<1|1,m+1,r,a,b,x);else update(o<<1,l,m,a,m,x),update(o<<1|1,m+1,r,m+1,b,x);\n}\n\npair<int,int> get(int i,int m){\n\tpair<int,int> res;int l=1,r=i,mid;\n\twhile(l<=r)if(vec[i-1].x-vec[(mid=l+r>>1)-1].x>=m)l=mid+1;else r=mid-1;\n\tres.first=r+1,l=i,r=n<<1;\n\twhile(l<=r)if(vec[(mid=l+r>>1)-1].x-vec[i-1].x<m)l=mid+1;else r=mid-1;\n\tres.second=l-1;\n\treturn res;\n}\n\nvoid dfs(int u){\n\tlow[u]=dfn[u]=++idx;s.push(u);\n\tfor(int v:point[u])if(!dfn[v]){dfs(v);low[u]=min(low[u],low[v]);}else if(dfn[v]>0)low[u]=min(low[u],dfn[v]);\n\tif(low[u]==dfn[u]){int x;++scc;while(x!=u)x=s.top(),s.pop(),dfn[x]=-dfn[x],cid[x]=scc;}\n}\n\nbool check(int m){\n\tmemset(low,scc=idx=0,sizeof(low)),memset(dfn,0,sizeof(dfn));for(int i=1;i<=80000;++i)point[i].clear();\n\tbuild(1,1,tot=n<<1);\n\tfor(int i=1;i<=n<<1;++i){int r=vec[i-1].i;pair<int,int> pr=get(i,m);update(1,1,n<<1,pr.first,i-1,r),update(1,1,n<<1,i+1,pr.second,r);}\n\tfor(int i=1;i<=n<<1;++i)if(!dfn[i])dfs(i);\n\tfor(int i=1;i<=n;++i)if(cid[i]==cid[i+n])return false;\n\treturn true;\n}\n\nint main(){\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;++i)scanf(\"%d%d\",x+i,x+n+i),vec.push_back(data(x[i],i)),vec.push_back(data(x[i+n],i+n));\n\tsort(vec.begin(),vec.end());\n\tint l=0,r=1000000000,m;while(l<=r)if(check(m=l+r>>1))l=m+1;else r=m-1;\n\tprintf(\"%d\",l-1);\n}\n```",
        "postTime": 1533727376,
        "uid": 30719,
        "name": "ezoixx174",
        "ccfLevel": 0,
        "title": "\u3010AT2336\u3011Flags"
    },
    {
        "content": "\u5178\u4e2d\u5178\u9898\uff0c\u4f46\u662f\u522b\u5199\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u4e86\uff0c\u5e38\u6570\u5f88\u5927\u3002\n\n\u5148\u4e8c\u5206\u7b54\u6848\uff0c\u90a3\u4e48\u5c31\u53d8\u6210\u4e86 2-SAT \u95ee\u9898\uff0c\u4f46\u662f\u8fb9\u6570\u662f $O(n^2)$ \u7684\u3002\u5efa\u8fb9\u89c4\u5219\u662f\u6bcf\u4e2a\u70b9\u5411\u4e00\u4e2a\u533a\u95f4\u5185\u7684\u70b9\u8fde\u8fb9\u3002\n\n\u76f4\u63a5 kosaraju\uff0c\u53ea\u9700\u8981\u5728\u539f\u56fe\u548c\u53cd\u56fe\u4e0a\u5b9e\u73b0 DFS \u8fc7\u7a0b\u5c31\u884c\u3002\u66b4\u529b DFS \u590d\u6742\u5ea6\u8fd8\u662f\u4e0d\u5bf9\uff0c\u8003\u8651\u600e\u4e48\u4e0d\u8bbf\u95ee\u5230\u5df2\u7ecf\u8bbf\u95ee\u7684\u70b9\uff0c\u7528\u4e00\u4e2a\u5e76\u67e5\u96c6\u7ef4\u62a4\u6bcf\u4e2a\u70b9\u662f\u5426\u88ab\u8bbf\u95ee\uff0c\u90a3\u4e48\u5bb9\u6613\u627e\u5230\u533a\u95f4\u5185\u7b2c\u4e00\u4e2a\u6ca1\u88ab\u8bbf\u95ee\u7684\u70b9\u3002\n\n\u590d\u6742\u5ea6\u662f $O(n\\log n\\log v)$\uff0c\u5176\u4e2d $\\log n$ \u662f\u533a\u95f4\u4e0a\u5e76\u67e5\u96c6\u7684\u590d\u6742\u5ea6\uff0c\u4e5f\u53ef\u4ee5\u52a0\u4e2a\u542f\u53d1\u5f0f\u5408\u5e76\u5f97\u5230 $\\alpha(n)$\u3002\u8fd9\u6837\u5e38\u6570\u5f88\u5c0f\uff0c\u5728 AT \u4e0a\u53ef\u4ee5\u5f97\u5230\u6b21\u4f18\u89e3\uff0c\u6bd4\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u548c\u5206\u5757\u4f18\u5316\u5efa\u56fe\u9ad8\u660e\u591a\u4e86\u3002",
        "postTime": 1685021860,
        "uid": 151475,
        "name": "Little09",
        "ccfLevel": 8,
        "title": "[ARC069F] Flags"
    },
    {
        "content": "[\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](http://www.cmsblog.top/archives/arc069dflags)\n\n## \u9898\u76ee\u63cf\u8ff0\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://www.luogu.com.cn/problem/AT2336)\n\n## \u601d\u8def\n\n\u9996\u5148\u770b\u5230\u6700\u5c0f\u8ddd\u79bb\u6700\u5927\uff0c\u679c\u65ad\u4e8c\u5206\u7b54\u6848\u3002\n\n\u7136\u540e\u95ee\u9898\u5c31\u8f6c\u5316\u4e3a\u7b2c $i$ \u4e2a\u6807\u5fd7\u53ef\u4ee5\u653e\u7f6e\u5728\u5750\u6807 $x_i$ \u6216\u5750\u6807 $y_i$ \u4e0a\u7684\u6700\u5c0f\u8ddd\u79bb\u662f\u5426\u53ef\u4ee5\u6bd4 $x$ \u5927\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u662f\u4e0d\u662f\u83ab\u540d\u719f\u6089\uff0c\u6709\u4e00\u4e2a\u53d8\u91cf\u6709\u4e24\u79cd\u53d6\u503c\uff0c\u5e76\u4e14\u6709\u4e00\u5b9a\u7684\u7ea6\u675f\u5173\u7cfb\uff08\u56e0\u4e3a\u8ddd\u79bb\u9650\u5236\uff09\uff0c\u7136\u540e\u627e\u6709\u6ca1\u6709\u53ef\u884c\u89e3\u3002\u4e8e\u662f\u4f60\u5c31\u60f3\u5230\u4e86 2-SAT\uff0c\u7136\u540e\u5f00\u5fc3\u7684\u5199\u4e86\u4e00\u53d1\uff0cTLE \u4e86\u3002\n\n\u8fd9\u91cc\u6709\u4e00\u4e2a\u95ee\u9898\uff0c\u50cf\u8fd9\u6837\u8fde\u8fb9\u7684\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n^2)$ \u7684\uff0c\u8fc7\u4e0d\u4e86\u6700\u5927\u7684\u6570\u636e\u70b9\uff0c\u8003\u8651\u4f18\u5316\u3002\u8fd9\u65f6\u4f60\u9700\u8981\u7528\u5230\u4e00\u4e2a trick \u53eb\u505a\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u3002\u9996\u5148\u5148\u5bf9\u6240\u6709\u53ef\u80fd\u653e\u65d7\u5b50\u7684\u70b9\u6392\u5e8f\uff0c\u7136\u540e\u4f60\u4f1a\u53d1\u73b0\u4e00\u4e2a\u70b9\u9700\u8981\u8fde\u7684\u70b9\u662f\u8fde\u7eed\u7684\u3002\u53ef\u4ee5\u5efa\u4e00\u68f5\u7ebf\u6bb5\u6811\uff0c\u56e0\u4e3a\u6709\u7236\u5b50\u5173\u7cfb\uff0c\u6240\u6709\u7684\u7236\u4eb2\u50cf\u513f\u5b50\u8fde\u8fb9\u3002\u4e3a\u4e86\u65b9\u4fbf\u5199\u4ee3\u7801\uff0c\u6211\u4eec\u53ef\u4ee5\u5f3a\u884c\u8981\u6c42\u53f6\u5b50\u8282\u70b9\u7684\u4e0b\u8868\u4e3a $1 \\sim 2n$\u3002\u63a5\u4e0b\u6765\u5c31\u975e\u5e38\u7c7b\u4f3c\u4e8e\u533a\u95f4\u8be2\u95ee\u4e86\uff0c\u76f4\u63a5\u9012\u5f52\u5c31\u884c\u4e86\uff0c\u603b\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n\\log^2 n)$\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int MAXN = 4e4 * 5 + 10;\n\nint Head[MAXN], Next[MAXN << 2], To[MAXN << 2], ToT;\nvoid Add(int u, int v) {\n    To[++ToT] = v;\n    Next[ToT] = Head[u];\n    Head[u] = ToT;\n}\n\nint Dfn[MAXN], Low[MAXN];\nbool In_Stack[MAXN];\nint Stack[MAXN], Top;\nint Index, SCC, N;\nint Belong[MAXN];\n\nvoid Tarjan(int u) {\n    Stack[++Top] = u;\n    In_Stack[u] = true;\n    Dfn[u] = Low[u] = ++Index;\n    for (int i = Head[u]; i; i = Next[i]) {\n        int v = To[i];\n        if (!Dfn[v]) {\n            Tarjan(v);\n            Low[u] = min(Low[u], Low[v]);\n        } else if (In_Stack[v]) {\n            Low[u] = min(Low[u], Dfn[v]);\n        }\n    }\n\n    if (Dfn[u] == Low[u]) {\n        ++SCC;\n        int v;\n        do {\n            v = Stack[Top--];\n            Belong[v] = SCC;\n            In_Stack[v] = false;\n        } while (v != u);\n    }\n}\n\nint GetOpposite(int x) {\n    if (x <= N)\n        return x + N;\n    else\n        return x - N;\n}\n\npair<int, int> Flags[MAXN << 1];\n\nint SegmentTree[MAXN << 2], Cnt;\nvoid Build(int p, int l, int r) {\n    SegmentTree[p] = ++Cnt;\n    if (l == r) {\n        Add(SegmentTree[p], GetOpposite(Flags[l].second));\n        return;\n    }\n    int mid = l + r >> 1;\n    Build(p << 1, l, mid);\n    Build(p << 1 | 1, mid + 1, r);\n    Add(SegmentTree[p], SegmentTree[p << 1]);\n    Add(SegmentTree[p], SegmentTree[p << 1 | 1]);\n}\n\nvoid Link(int p, int L, int R, int l, int r, int x) {\n    if (l > r) return;\n    int mid = L + R >> 1;\n    if (L == l && R == r)\n    \tAdd(x, SegmentTree[p]);\n    else if (r <= mid)\n        Link(p << 1, L, mid, l, r, x);\n    else if (l > mid)\n        Link(p << 1 | 1, mid + 1, R, l, r, x);\n    else {\n        Link(p << 1, L, mid, l, mid, x);\n        Link(p << 1 | 1, mid + 1, R, mid + 1, r, x);\n    }\n}\n\nbool Check(int x) {\n    ToT = Top = Index = SCC = 0;\n    memset(Head, 0, sizeof Head);\n    memset(Dfn, 0, sizeof Dfn);\n    memset(Low, 0, sizeof Low);\n    memset(In_Stack, 0, sizeof In_Stack);\n    Build(1, 1, Cnt = 2 * N);\n    for (int i = 1; i <= 2 * N; i++) {\n        static int l, r;\n        l = upper_bound(Flags + 1, Flags + 1 + 2 * N, make_pair(Flags[i].first - x, 0x3f3f3f3f)) - Flags;\n        r = upper_bound(Flags + 1, Flags + 1 + 2 * N, make_pair(Flags[i].first + x - 1, 0x3f3f3f3f)) - Flags - 1;\n        Link(1, 1, 2 * N, l, i - 1, Flags[i].second);\n        Link(1, 1, 2 * N, i + 1, r, Flags[i].second);\n    }\n    for (int i = 1;\n         i <= 2 * N; i++) {\n        if (!Dfn[i]) Tarjan(i);\n    }\n    for (int i = 1; i <= N; i++) {\n        if (Belong[i] == Belong[i + N]) {\n            return false;\n        }\n    }\n    return true;\n}\n\nint main() {\n    ios::sync_with_stdio(false);\n    cin.tie(0);\n    cout.tie(0);\n\n    cin >> N;\n    for (int i = 1; i <= N; i++) {\n        cin >> Flags[i].first >> Flags[i + N].first;\n        Flags[i].second = i;\n        Flags[i + N].second = i + N;\n    }\n\n    sort(Flags + 1, Flags + 1 + 2 * N);\n\n    int l = 0, r = Flags[2 * N].first - Flags[1].first + 1, mid, Ans = -1;\n\n    while (l <= r) {\n        mid = l + r >> 1;\n        if (Check(mid)) {\n            l = mid + 1;\n            Ans = mid;\n        } else {\n            r = mid - 1;\n        }\n    }\n\n    cout << Ans << endl;\n    return 0;\n}\n```",
        "postTime": 1664075073,
        "uid": 461426,
        "name": "CmsMartin",
        "ccfLevel": 6,
        "title": "[ARC069D] Flags"
    },
    {
        "content": "### AT2336 [ARC069D] Flags\n\n\u4e8c\u5206\u7b54\u6848\uff0c`2-sat` \u5224\u5b9a\uff0c\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u8fb9\u3002\n\n\u7ebf\u6bb5\u6811\u4e0a\u7236\u4eb2\u5411\u513f\u5b50\u8fde\u8fb9\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $x$\uff0c\u8fde\u5411\u4e0e\u4ed6\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $mid$ \u7684\u70b9\u7684\u53cd\u70b9\uff0c\u8868\u793a\u9009 $x$ \u5c31\u53ea\u80fd\u9009\u4e0e\u4ed6\u8ddd\u79bb\u4e0d\u8d85\u8fc7 $mid$ \u7684\u70b9\u3002\n\n\u6700\u540e\u8dd1 `tarjan` \u5224\u5b9a\u5373\u53ef\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\log ^2n)$\u3002\n\n```cpp\n#include<bits/stdc++.h>\n\nusing namespace std;\n\n//#define int long long\ntypedef long long ll;\n\n#define ha putchar(' ')\n#define he putchar('\\n')\n\ninline int read() {\n\tint x = 0, f = 1;\n\tchar c = getchar();\n\twhile (c < '0' || c > '9') {\n\t\tif (c == '-')\n\t\t\tf = -1;\n\t\tc = getchar();\n\t}\n\twhile (c >= '0' && c <= '9')\n\t\tx = x * 10 + c - '0', c = getchar();\n\treturn x * f;\n}\n\ninline void write(int x) {\n\tif (x < 0) {\n\t\tputchar('-');\n\t\tx = -x;\n\t}\n\tif (x > 9)\n\t\twrite(x / 10);\n\tputchar(x % 10 + '0');\n}\n\nconst int _ = 8e4 + 10;\n\nint n, cnt, idx, scc, low[_], dfn[_], id[_], Id[_];\n\nstack<int> s;\n\nvector<pair<int, int>> d;\n\nvector<int> e[_];\n\nvoid build(int o, int l, int r) {\n\tid[o] = ++cnt;\n\tif (o > 1) e[id[o >> 1]].emplace_back(cnt);\n\tif (l == r) {\n\t\tint v = d[l - 1].second;\n\t\te[id[o]].push_back(v <= n ? v + n : v - n);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(o << 1, l, mid), build(o << 1 | 1, mid + 1, r);\n}\n\nvoid upd(int o, int l, int r, int L, int R, int x) {\n\tif(L > R) return;\n\tif (L <= l && r <= R) {\n\t\te[x].emplace_back(id[o]);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif (L <= mid) upd(o << 1, l, mid, L, R, x);\n\tif (R > mid) upd(o << 1 | 1, mid + 1, r, L, R, x);\n}\n\npair<int, int> get(int i, int m) {\n\tpair<int, int> ret;\n\tint l = 1, r = i, mid;\n\twhile (l <= r) {\n\t\tmid = (l + r) >> 1;\n\t\tif (d[i - 1].first - d[mid - 1].first >= m) l = mid + 1;\n\t\telse r = mid - 1;\n\t}\n\tret.first = r + 1, l = i, r = n << 1;\n\twhile (l <= r) {\n\t\tmid = (l + r) >> 1;\n\t\tif (d[mid - 1].first - d[i - 1].first < m) l = mid + 1;\n\t\telse r = mid - 1;\n\t}\n\tret.second = l - 1;\n\treturn ret;\n}\n\nvoid tarjan(int u) {\n\tlow[u] = dfn[u] = ++idx;\n\ts.push(u);\n\tfor (int v : e[u])\n\t\tif (!dfn[v]) {\n\t\t\ttarjan(v);\n\t\t\tlow[u] = min(low[u], low[v]);\n\t\t} else if (!Id[v]) low[u] = min(low[u], dfn[v]);\n\tif (low[u] == dfn[u]) {\n\t\t++scc;\n\t\twhile (1) {\n\t\t\tint nw = s.top();\n\t\t\ts.pop();\n\t\t\tId[nw] = scc;\n\t\t\tif (nw == u) break;\n\t\t}\n\t}\n}\n\nbool check(int lim) {\n\tscc = idx = 0;\n\tmemset(low, 0, sizeof low);\n\tmemset(dfn, 0, sizeof dfn);\n\tmemset(Id, 0, sizeof Id);\n\tfor (int i = 0; i < _; ++i) e[i].clear();\n\tbuild(1, 1, cnt = n << 1);\n\tfor (int i = 1; i <= n << 1; ++i) {\n\t\tint r = d[i - 1].second;\n\t\tpair<int, int> p = get(i, lim);\n\t\tupd(1, 1, n << 1, p.first, i - 1, r);\n\t\tupd(1, 1, n << 1, i + 1, p.second, r);\n\t}\n\tfor (int i = 1; i <= n << 1; ++i)\n\t\tif (!dfn[i]) tarjan(i);\n\tfor (int i = 1; i <= n; ++i)\n\t\tif (Id[i] == Id[i + n]) return 0;\n\treturn 1;\n}\n\nsigned main() {\n\tn = read();\n\tfor (int i = 1, x, y; i <= n; ++i) {\n\t\tx = read(), y = read();\n\t\td.emplace_back(make_pair(x, i));\n\t\td.emplace_back(make_pair(y, i + n));\n\t}\n\tsort(d.begin(), d.end());\n\tint l = 0, r = 1e9, mid;\n\twhile (l <= r) {\n\t\tmid = (l + r) >> 1;\n\t\tif (check(mid)) l = mid + 1;\n\t\telse r = mid - 1;\n\t}\n\twrite(l - 1), he;\n\treturn 0;\n}\n```\n\n",
        "postTime": 1658030623,
        "uid": 257146,
        "name": "orz_z",
        "ccfLevel": 0,
        "title": "AT2336 [ARC069D] Flags"
    },
    {
        "content": "### Preface  \n\n\u4e00\u9053\u7ec6\u8282\u6781\u5176\u4e4b\u591a\u7684\u6076\u5fc3\u7684 2-SAT \u9898\u76ee\u53d8\u79cd\u3002\u849f\u84bb\u521a whk \u56de\u6765\u590d\u5065\u4e0d\u592a\u9002\u5e94\u3002  \n\n### [Problem](https://atcoder.jp/contests/arc069/tasks/arc069_d)\n\n### Solution  \n\n\u770b\u5230\u9898\u76ee\u8981\u6c42\u6700\u5c0f\u5dee\u95f4\u6700\u5927\u9a6c\u4e0a\u4fbf\u60f3\u5230\u4e86\u4e8c\u5206\uff0c\u9a8c\u8bc1\u7b54\u6848\u7684\u8bdd\u8d2a\u5fc3\u4e0d\u6613\u9a8c\u8bc1\uff0c\u5e76\u4e14\u4e0d\u652f\u6301 $O(n^2)$ \u7684\u9ad8\u590d\u6742\u5ea6\u9a8c\u8bc1\u3002\u770b\u5230\u4e24\u4e2a\u9009\u4e00\u4e2a\u4fbf\u60f3\u5230\u4e86\u4f7f\u7528 2-SAT \u8fdb\u884c\u6c42\u89e3\u3002\u663e\u7136\u9009\u62e9\u4e00\u4e2a\u70b9\u540e\u5468\u56f4 $d$ \u8ddd\u79bb\u5185\u7684\u70b9\u90fd\u4e0d\u5e94\u88ab\u9009\u4e2d\u800c\u5e94\u9009\u4e2d\u5176\u7684\u53e6\u5916\u70b9\u3002  \n\u8fd9\u4e2a\u6761\u4ef6\u4fbf\u53ef\u4ee5\u8f6c\u5316\u4e3a\uff1a\u8981\u4e48\u8fd9\u4e2a\u70b9\u6240\u4ee3\u8868\u7684\u5143\u7d20\u662f\u53e6\u4e00\u4e2a\u72b6\u6001\uff0c\u8981\u4e48 $d$ \u8ddd\u79bb\u5185\u7684\u5176\u5b83\u70b9\u662f\u53e6\u4e00\u4e2a\u72b6\u6001\u3002  \n\u4fbf\u53ef\u4ee5\u8f7b\u6613\u7528 2-SAT \u9a8c\u8bc1\u3002   \n\u89c2\u5bdf\u5230\u8fd9\u4e2a\u9898\u7684\u6570\u636e\u8303\u56f4\u4e0d\u5927\u4e0d\u5c0f\uff0c\u6211\u4eec\u62ff\u4e00\u4e2a\u5206\u5757\u4f18\u5316\u5efa\u56fe\u5373\u53ef\u3002\u5177\u4f53\u6765\u8bf4\uff0c\u6211\u4eec\u62ff\u51fa\u4e24\u4e2a\u5206\u5757\uff0c\u4e00\u4e2a\u5206\u51fa\u6765\u7684\u5757\u548c\u7b2c\u4e00\u4e2a\u72b6\u6001\u8d34\u8d34\uff08\u7531\u5757\u8fde\u5411\u7b2c\u4e00\u4e2a\u72b6\u6001\uff09 \u3002\u53e6\u4e00\u4e2a\u548c\u7b2c\u4e8c\u4e2a\u72b6\u6001\uff08\u5757\u5185\u5143\u7d20\u7684\u53e6\u4e00\u4e2a\u72b6\u6001\uff09\u8d34\u8d34\uff08\u7531\u7b2c\u4e8c\u4e2a\u72b6\u6001\u8fde\u5411\u5757\uff09\u3002\u7136\u540e\u9700\u8981\u8fdb\u884c\u64cd\u4f5c\u7684\u65f6\u5019\u4e24\u4e2a\u5757\u4ea4\u53c9\u5bf9\u9700\u8981\u8fde\u8fb9\u7684\u70b9\u7684\u4e24\u4e2a\u72b6\u6001\u8fdb\u884c\u64cd\u4f5c\u5373\u53ef\u3002 \n\n------------\n\n\u63a5\u4e0b\u6765\u9488\u5bf9\u6bd4\u8f83\u6076\u5fc3\u7684\u51e0\u4e2a\u70b9\u8fdb\u884c\u8bb2\u89e3\uff1a  \n\n1. \u4e8c\u5206\u5230\u7684\u7b54\u6848\u4e3a $d$ \u65f6\uff0c\u6211\u4eec\u5bf9\u4e8e\u6bcf\u4e2a\u70b9 $x$ \u5c06 $|x-y|\\leq d-1$ \u7684 $y$ \u70b9\u8fdb\u884c\u8fde\u8fb9\u5904\u7406\uff0c\u56e0\u4e3a\u521a\u521a\u597d $d$ \u8ddd\u79bb\u4e5f\u662f\u6ee1\u8db3\u9898\u76ee\u6761\u4ef6\u7684\u3002  \n\n2. \u6700\u540e\u9a8c\u8bc1\u7b54\u6848\u65f6\u4e0d\u5e94\u4e3a\uff1a$in_i = in_{i+n}$\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u5e8f\u5217\u5df2\u88ab\u79bb\u6563\u5316\u4e86\uff0c\u6240\u4ee5\u5e94\u8be5\u8bb0\u5f55\u6bcf\u4e2a\u70b9\u7684\u53e6\u4e00\u4e2a\u72b6\u6001\u5728\u54ea\u8bb0\u4e3a $oth_i$\uff0c\u5230\u65f6\u5019\u9a8c\u8bc1 $in_i=in_{oth_i}$\u3002 \n\n3. `upper_bound` \u51fd\u6570\u5e94\u8be5\u989d\u5916 `-1`\u3002\u849f\u84bb\u7b2c\u4e00\u6b21\u7528\u4e0d\u77e5\u9053\u5b83\u5728\u627e\u4e0d\u5230\u7684\u65f6\u5019\u4f1a\u8fd4\u56de `end()+1`\u3002  \n\n4. \u65f6\u523b\u94ed\u8bb0\u6211\u4eec\u8fde\u8fb9\u7684\u610f\u4e49\uff01\u8bb0\u5f97\u521d\u59cb\u5316\uff01\n\n   ### code\uff1a  \n\n```cpp\n#include <bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+10;\nstruct node{int d,id,tpe,oth;}h[N];int a[N],b[N];\nbool cmp(node a,node b){return a.d<b.d;};int c[N];\nint n;node h2;int block;int p[N];int bcnt;\nvector <int> edge[N];int Size;int Stack[N];\nint low[N];int dfn[N];bool vis[N];int tot;\nint in[N];int cnt;\nvoid tarjan(int x){\n\tStack[++Size]=x;\n\tvis[x]=true;++cnt;\n\tlow[x]=dfn[x]=cnt;\n\tfor(int i=0;i<edge[x].size();i++){\n\t\tif(!dfn[edge[x][i]]){\n\t\t\ttarjan(edge[x][i]);\n\t\t\tlow[x]=min(low[x],low[edge[x][i]]);\n\t\t}else{\n\t\t\tif(vis[edge[x][i]])\n\t\t\t\tlow[x]=min(low[x],dfn[edge[x][i]]);\n\t\t}\t\n\t}\n\tif(dfn[x]==low[x]){\n\t\t++tot;int k=0;\n\t\tdo{k=Stack[Size];--Size;\n\t\t\tvis[k]=false;\n\t\t\tin[k]=tot;\n\t\t}while(k!=x);\n\t}\n}\nvoid modify(int l,int r,int x){\n\tif(l>r)return;\n\twhile(l<=r&&p[l-1]==p[l]){\n\t\tedge[x].push_back(h[l].oth);\n\t\tedge[l].push_back(h[x].oth);\n\t\tl++;\n\t}\n\twhile(l+block<=r){\n\t\tedge[x].push_back(p[l]+2*n);\n\t\tedge[p[l]+bcnt+2*n].push_back(h[x].oth);\n\t\tl+=block;\n\t}\n\twhile(l<=r){\n\t\tedge[x].push_back(h[l].oth);\n\t\tedge[l].push_back(h[x].oth);\n\t\tl++;\n\t}\n}\nbool check(int x){\n\tcnt=tot=Size=0;\n\tmemset(dfn,0,sizeof(dfn));\n\tmemset(vis,false,sizeof(vis));\n\tmemset(Stack,0,sizeof(Stack));\n\tmemset(in,0,sizeof(in));\n\tmemset(low,0,sizeof(low));\n\tfor(int i=1;i<=2*n+2*bcnt;i++)edge[i].clear();\n\tfor(int i=1;i<=2*n;i++){\n\t\tedge[p[i]+2*n].push_back(h[i].oth);\n\t}\n\tfor(int i=1;i<=2*n;i++){\n\t\tedge[i].push_back(p[i]+2*n+bcnt);\n\t}\n\t//cout<<x<<endl;\n\tfor(int i=1;i<=2*n;i++){\n\t\tint l=lower_bound(c+1,c+2*n+1,h[i].d-x+1)-c;\n\t\tint r=upper_bound(c+1,c+2*n+1,h[i].d+x-1)-c-1;\n\t//\tcout<<h[i].oth<<\" \"<<l<<\" \"<<r<<endl;\n\t\tmodify(l,i-1,i);modify(i+1,r,i);\n\t}\n\t//for(int i=1;i<=2*n+2*bcnt;i++){\n\t//\tcout<<i<<\":\"<<endl;\n\t//\tfor(int j=0;j<edge[i].size();j++){\n\t//\t\tcout<<edge[i][j]<<\" \";\n\t//\t}\n\t//\tcout<<endl;\n\t//}\n\tfor(int i=1;i<=2*n+2*bcnt;i++){\n\t\tif(!dfn[i])tarjan(i);\n\t}\n\t//for(int i=1;i<=n;i++)cout<<in[i]<<\" \"<<in[i+n]<<endl;\n\t//cout<<endl;\n\tfor(int i=1;i<=n;i++)\n\t\tif(in[i]==in[h[i].oth])return false;\n\treturn true;\n}\nint bucket[N];\nint main(){\n\tios::sync_with_stdio(0);cin.tie(0);cout.tie(0);\n\tcin>>n;block=sqrt(2*n);\n\tif((2*n)%block==0)bcnt=(2*n)/block;\n\telse bcnt=(2*n)/block+1;\n\tfor(int i=1;i<=n;i++){\n\t\tcin>>a[i]>>b[i];\n\t\th[i]=(node){a[i],i,0,0};\n\t\th[i+n]=(node){b[i],i,1,0};\n\t\tif(i%block==0)p[i]=i/block;\n\t\telse p[i]=i/block+1;\n\t}\n\tfor(int i=n+1;i<=2*n;i++){\n\t\tif(i%block==0)p[i]=i/block;\n\t\telse p[i]=i/block+1;\n\t}\n\tsort(h+1,h+2*n+1,cmp);\n\tsort(a+1,a+1+n);sort(b+1,b+1+n);\n\tfor(int i=1;i<=2*n;i++){\n\t\tc[i]=h[i].d;\n\t\tif(bucket[h[i].id]){\n\t\t\th[i].oth=bucket[h[i].id];\n\t\t\th[bucket[h[i].id]].oth=i;\n\t\t}bucket[h[i].id]=i;\n\t}\n\tint l=0;int r=1e9;\n\twhile(l<r){\n\t\tint mid=(l+r+1)/2;\n\t\tif(check(mid))l=mid;\n\t\telse r=mid-1;\n\t}\n\tcout<<l;\n\treturn 0;\n}\n```",
        "postTime": 1657381894,
        "uid": 213173,
        "name": "\u5c0f\u6728\u866b",
        "ccfLevel": 4,
        "title": "\u3010Atcoder\u601d\u7ef4\u8bad\u7ec3\u3011[ARC069D] Flags"
    },
    {
        "content": "\u524d\u7f6e\u829d\u58eb\uff1a[2-SAT](https://oi-wiki.org/graph/2-sat/)\u3001[\u5206\u5757](https://oi-wiki.org/ds/decompose/)\n\n\u663e\u7136\u4e8c\u5206\u7b54\u6848\uff0c\u5219\u8003\u8651 check\uff1b\u663e\u7136 2-SAT\uff0c\u5219\u8003\u8651\u5efa\u56fe\u3002\n\n\u5c06\u6240\u6709 $x_i$ \u548c $y_i$ \u6392\u5e8f\uff0c\u8bbe\u5408\u5728\u4e00\u8d77\u6392\u5e8f\u540e\u5f97\u5230\u7684\u6570\u7ec4\u4e3a $a$\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a $i$\uff0c\u62c6\u51fa\u4e24\u4e2a\u70b9 $i$ \u548c $i'$\uff0c\u5206\u522b\u8868\u793a\u9009\u62e9 $x_i$ \u548c $y_i$\u3002\n\n\u8bbe\u4e8c\u5206\u7b54\u6848\u7684\u503c\u4e3a $mid$\uff0c\u5bf9\u4e8e\u4e00\u4e2a $i$\uff0c$pos_i$ \u5411\u6ee1\u8db3 $j \\neq i$ \u4e14 $|a_i - a_j| < mid$ \u7684 $pos_j$ \u8fde\u8fb9\uff0c\u5176\u4e2d $pos_i$ \u8868\u793a $a_i$ \u5728\u539f\u6765\u7684 $x$ \u4e2d\u7684\u7f16\u53f7\u6216 $y$ \u4e2d\u7684\u7f16\u53f7 $+ n$\u3002\n\n\u76f4\u63a5\u5206\u5757\u4f18\u5316\u5efa\u56fe\u5373\u53ef\u3002\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n \\sqrt{n} \\log w)$\u3002\n\n~~\u4e0d\u8981\u95ee\u6211\u4e3a\u4ec0\u4e48\u4e0d\u5199\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u56e0\u4e3a\u6211\u7231\u5206\u5757\u3002~~\n\n\u4ee3\u7801\uff1a\n```cpp\n#include <iostream>\n#include <algorithm>\n#include <stack>\n#include <cmath>\n\nusing namespace std;\n\ntypedef struct Node_tag {\n\tint val;\n\tint pos;\n\tint type;\n\tNode_tag(){}\n\tNode_tag(int val_, int pos_, int type_){\n\t\tval = val_;\n\t\tpos = pos_;\n\t\ttype = type_;\n\t}\n} Node;\n\ntypedef struct {\n\tint nxt;\n\tint end;\n} Edge;\n\nint cnt;\nint x[10007], y[10007], bel[20007], id1[20007], id2[20007], lft[147], rt[147], id3[147], head[20147], dfn[20147], low[20147], belong[20147];\nbool vis1[20147], vis2[20147];\nNode a[20007];\nEdge edge[16840007];\nstack<int> s;\n\nbool operator <(const Node a, const Node b){\n\treturn a.val < b.val;\n}\n\ninline void init(int n){\n\tcnt = 0;\n\tfor (register int i = 1; i <= n; i++){\n\t\thead[i] = 0;\n\t\tvis1[i] = false;\n\t}\n}\n\ninline void add_edge(int start, int end){\n\tcnt++;\n\tedge[cnt].nxt = head[start];\n\thead[start] = cnt;\n\tedge[cnt].end = end;\n}\n\ninline void tarjan(int u, int &id1, int &scc_cnt){\n\tdfn[u] = low[u] = ++id1;\n\tvis1[u] = vis2[u] = true;\n\ts.push(u);\n\tfor (register int i = head[u]; i != 0; i = edge[i].nxt){\n\t\tint x = edge[i].end;\n\t\tif (!vis1[x]){\n\t\t\ttarjan(x, id1, scc_cnt);\n\t\t\tlow[u] = min(low[u], low[x]);\n\t\t} else if (vis2[x]){\n\t\t\tlow[u] = min(low[u], dfn[x]);\n\t\t}\n\t}\n\tif (dfn[u] == low[u]){\n\t\tint cur;\n\t\tscc_cnt++;\n\t\tdo {\n\t\t\tcur = s.top();\n\t\t\ts.pop();\n\t\t\tvis2[cur] = false;\n\t\t\tbelong[cur] = scc_cnt;\n\t\t} while (cur != u);\n\t}\n}\n\ninline void connect(int x, int l, int r){\n\tif (bel[l] == bel[r]){\n\t\tfor (register int i = l; i <= r; i++){\n\t\t\tadd_edge(x, id2[i]);\n\t\t}\n\t\treturn;\n\t}\n\tfor (register int i = l; i <= rt[bel[l]]; i++){\n\t\tadd_edge(x, id2[i]);\n\t}\n\tfor (register int i = lft[bel[r]]; i <= r; i++){\n\t\tadd_edge(x, id2[i]);\n\t}\n\tfor (register int i = bel[l] + 1; i < bel[r]; i++){\n\t\tadd_edge(x, id3[i]);\n\t}\n}\n\ninline bool check(int n, int m, int k){\n\tint x = n * 2, dfn_id = 0, scc_cnt = 0;\n\tinit(id3[k]);\n\tfor (register int i = 1; i <= k; i++){\n\t\tadd_edge(id3[bel[i]], id2[i]);\n\t}\n\tfor (register int i = 1; i <= x; i++){\n\t\tint l = 1, r = i, pos = i;\n\t\twhile (l <= r){\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tif (a[i].val - a[mid].val < m){\n\t\t\t\tr = mid - 1;\n\t\t\t\tpos = mid;\n\t\t\t} else {\n\t\t\t\tl = mid + 1;\n\t\t\t}\n\t\t}\n\t\tif (pos < i) connect(id1[i], pos, i - 1);\n\t\tl = i;\n\t\tr = x;\n\t\tpos = i;\n\t\twhile (l <= r){\n\t\t\tint mid = (l + r) >> 1;\n\t\t\tif (a[mid].val - a[i].val < m){\n\t\t\t\tl = mid + 1;\n\t\t\t\tpos = mid;\n\t\t\t} else {\n\t\t\t\tr = mid - 1;\n\t\t\t}\n\t\t}\n\t\tif (i < pos) connect(id1[i], i + 1, pos);\n\t}\n\tfor (register int i = 1; i <= id3[k]; i++){\n\t\tif (!vis1[i]) tarjan(i, dfn_id, scc_cnt);\n\t}\n\tfor (register int i = 1; i <= n; i++){\n\t\tif (belong[i] == belong[i + n]) return false;\n\t}\n\treturn true;\n}\n\nint main(){\n\tint n, m, block, k, l = 0, r, ans;\n\tcin >> n;\n\tm = n * 2;\n\tblock = sqrt(m);\n\tk = (m - 1) / block + 1;\n\tfor (register int i = 1, j = 0; i <= n; i++){\n\t\tcin >> x[i] >> y[i];\n\t\ta[++j] = Node(x[i], i, 0);\n\t\ta[++j] = Node(y[i], i, 1);\n\t}\n\tsort(a + 1, a + m + 1);\n\tr = a[m].val - a[1].val;\n\tfor (register int i = 1; i <= m; i++){\n\t\tbel[i] = (i - 1) / block + 1;\n\t\tif (a[i].type == 0){\n\t\t\tid1[i] = a[i].pos;\n\t\t\tid2[i] = a[i].pos + n;\n\t\t} else {\n\t\t\tid1[i] = a[i].pos + n;\n\t\t\tid2[i] = a[i].pos;\n\t\t}\n\t}\n\tfor (register int i = 1; i <= k; i++){\n\t\tlft[i] = block * (i - 1) + 1;\n\t\trt[i] = min(i * block, m);\n\t\tid3[i] = i + m;\n\t}\n\twhile (l <= r){\n\t\tint mid = (l + r) >> 1;\n\t\tif (check(n, mid, k)){\n\t\t\tl = mid + 1;\n\t\t\tans = mid;\n\t\t} else {\n\t\t\tr = mid - 1;\n\t\t}\n\t}\n\tcout << ans;\n\treturn 0;\n}\n```",
        "postTime": 1645260335,
        "uid": 201007,
        "name": "Leasier",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 AT2336 \u3010[ARC069D] Flags\u3011"
    },
    {
        "content": "\u9996\u5148\u5148\u4e8c\u5206\u7b54\u6848\u3002\n\n\u7136\u540e\u5224\u65ad\u80fd\u5426\u4f7f\u5f97\u4e24\u4e24\u65d7\u5b50\u4e4b\u95f4\u7684\u8ddd\u79bb\u90fd\u5927\u4e8e $mid$\u3002\n\n\u7136\u540e\u53d1\u73b0\u8fd9\u662f\u4e00\u4e2a 2-SAT \u95ee\u9898\u3002\n\n2-SAT \u95ee\u9898\uff1a\u901a\u4fd7\u5730\u8bf4\uff0c\u6709 $n$ \u4e2a bool \u53d8\u91cf $a_i$\uff0c\u5e76\u7ed9\u51fa\u4e00\u4e9b\u5f62\u5982 $a_i\\oplus a_j=0/1$ \u7684\u6761\u4ef6\uff08\u5176\u4e2d $\\oplus$ \u53ef\u4ee5\u662f $\\operatorname{and}$\u3001$\\operatorname{or}$ \u6216 $\\operatorname{xor}$\uff09\uff0c\u7136\u540e\u8be2\u95ee\u6ee1\u8db3\u8fd9\u7ec4\u65b9\u7a0b\u7684\u4e00\u7ec4\u89e3 $a_i$\u3002\n\n\u8fd9\u9898\u540c\u6837\u4e5f\u7ed9\u51fa\u4e86\u4e00\u4e9b\u6761\u4ef6\uff0c\u6bd4\u5982\u8bf4\u5bf9\u4e8e\u6240\u6709\u7684 $i$\uff0c$x_i$ \u548c $y_i$ \u4e2d\u5fc5\u987b\u9009\u4e00\u4e2a\u4f46\u662f\u4e0d\u80fd\u540c\u65f6\u9009\u3002\u540c\u65f6\u5728 $mid$ \u7684\u7ea6\u675f\u4e0b\uff0c\u4e5f\u6709\u4e00\u4e9b\u6570\u4e0d\u80fd\u540c\u65f6\u9009\u3002\n\n\u90a3\u6211\u4eec\u53ef\u4ee5\u8bbe bool \u53d8\u91cf $a_i$ \u8868\u793a\u53d6\u4e0d\u53d6 $x_i$\uff0cbool \u53d8\u91cf $b_i$ \u8868\u793a\u53d6\u4e0d\u53d6 $y_i$\u3002\u90a3\u4e48 $a_i$ \u548c $b_i$ \u4e0d\u80fd\u540c\u65f6\u7b49\u4e8e $\\text{true}$\uff0c\u4e14\u4e24\u8005\u4e2d\u80af\u5b9a\u6709\u4e00\u8005\u4e3a $\\text{true}$\uff0c\u8fd9\u5c31\u53ef\u4ee5\u7528 $a_i\\operatorname{xor}b_i=1$ \u6765\u8868\u793a\u3002\n\n\u90a3\u4e48\u8fd9\u5c31\u53d8\u6210\u4e86\u4e00\u4e2a 2-SAT \u95ee\u9898\u4e86\u3002\n\n\u4f46\u662f\u8fd9\u9053\u9898\u53ea\u7528\u5224\u65ad\u662f\u5426\u6709\u89e3\uff0c\u4e5f\u5c31\u662f\u53ef\u884c\u6027\u3002\u8fd9\u65f6\u53ef\u4ee5\u7528 Tarjan \u6c42\u89e3\uff1a\n\n\u9996\u5148\u628a\u6bcf\u4e00\u4e2a bool \u53d8\u91cf $x$ \u62c6\u6210\u4e24\u4e2a\u547d\u9898\uff1a\u547d\u9898 $x_0$ \u8868\u793a $x=\\text{false}$\uff0c\u547d\u9898 $x_1$ \u8868\u793a $x=\\text{true}$\u3002\u8bbe\u547d\u9898 $y$ \u7684\u53cd\u9762\u662f $y'$\uff0c\u663e\u7136 $x_0'$ \u5c31\u662f $x_1$\u3002\n\n\u90a3\u4e48\u663e\u7136\u5f53 $x_0$ \u6210\u7acb\u65f6\uff0c$x_1$ \u4e0d\u6210\u7acb\uff1b\u5f53 $x_1$ \u6210\u7acb\u65f6\uff0c$x_0$ \u4e0d\u6210\u7acb\u3002\u800c\u4e14 $x_0$ \u548c $x_1$ \u4e4b\u95f4\u80af\u5b9a\u6709\u4e00\u8005\u6210\u7acb\u3002\n\n\u90a3\u4e48 $a_i\\operatorname{xor}b_i=1$ \u5c31\u7b49\u4ef7\u4e8e\uff1a\n\n\u5f53 $a_{i,0}$ \u6210\u7acb\u65f6\uff0c$b_{i,1}$ \u6210\u7acb\uff1b\u5f53 $b_{i,1}$ \u6210\u7acb\u65f6\uff0c$a_{i,0}$ \u6210\u7acb\u3002\n\n\u5f53 $a_{i,1}$ \u6210\u7acb\u65f6\uff0c$b_{i,0}$ \u6210\u7acb\uff1b\u5f53 $b_{i,0}$ \u6210\u7acb\u65f6\uff0c$a_{i,1}$ \u6210\u7acb\u3002\n\n\u8003\u8651\u7528\u56fe\u8bba\u7684\u65b9\u5f0f\u6765\u8868\u8fbe\u8fd9\u79cd\u5173\u7cfb\u3002\n\n\u8bbe\u5355\u5411\u8fb9 $(u,v)$ \u8868\u793a\u5f53\u547d\u9898 $u$ \u6210\u7acb\u65f6\uff0c\u547d\u9898 $v$ \u4e5f\u5fc5\u5b9a\u6210\u7acb\u3002\n\n\u90a3\u4e48\u4e0a\u8ff0\u5173\u7cfb\u5c31\u53ef\u4ee5\u8868\u793a\u6210\u5355\u5411\u8fb9 $(a_{i,0},b_{i,1})$\u3001$(b_{i,1},a_{i,0})$\u3001$(a_{i,1},b_{i,0})$\u3001$(b_{i,0},a_{i,1})$\u3002\n\n\u7136\u540e\u9898\u76ee\u4e2d\u8fd8\u6709\u4e00\u4e9b\u6761\u4ef6\uff1a\u67d0\u4e24\u4e2a\u6570\u4e0d\u80fd\u540c\u65f6\u53d6\uff0c\u5373\u67d0\u4e24\u4e2a bool \u53d8\u91cf $a$\u3001$b$ \u4e0d\u80fd\u540c\u65f6\u4e3a $1$\uff0c\u5373 $a\\operatorname{and} b=0$\uff0c\u8003\u8651\u4e5f\u7528\u56fe\u8bba\u6765\u8868\u793a\u8fd9\u4e2a\u3002\n\n\u53d1\u73b0\u53ef\u4ee5\u7528\u6709\u5411\u8fb9 $(a_1,b_0)$\u3001$(b_1,a_0)$ \u6765\u8868\u793a\u3002\n\n\u90a3\u4e48\u6211\u4eec\u5c31\u80fd\u628a\u6240\u6709\u7684\u6761\u4ef6\u90fd\u7528\u56fe\u6765\u8868\u793a\u4e86\u3002\n\n\u81f3\u4e8e\u5982\u4f55\u5224\u65ad\u89e3\u7684\u53ef\u884c\u6027\uff1a\n\n\u6211\u4eec\u53ef\u4ee5\u5148\u5bf9\u8fd9\u4e2a\u56fe\u505a\u4e00\u904d Tarjan\uff0c\u7136\u540e\u770b\u662f\u5426\u5b58\u5728\u4e24\u4e2a\u53cd\u547d\u9898\u5728\u4e00\u4e2a\u73af\u4e2d\uff08\u5373\u51fa\u73b0 \u201c\u5f53\u547d\u9898 $x$ \u6210\u7acb\u65f6\uff0c\u53ef\u5f97\u547d\u9898 $x'$ \u6210\u7acb\uff0c\u5f53 $x'$ \u6210\u7acb\u65f6\uff0c\u4e5f\u53ef\u5f97 $x$ \u6210\u7acb\uff0c\u4f46 $x$\u3001$x'$ \u4e3a\u76f8\u53cd\u7684\u547d\u9898\u201d \u8fd9\u79cd\u60c5\u51b5\uff09\u3002\u5982\u679c\u5b58\u5728\uff0c\u90a3\u4e48\u539f\u65b9\u7a0b\u65e0\u89e3\uff0c\u5426\u5219\u6709\u89e3\u3002\n\n\u7136\u540e\u8fd9\u9053\u9898\u9700\u8981\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\u624d\u80fd\u8fc7\uff0c\u8fd9\u90e8\u5206\u5176\u4ed6\u5de8\u4f6c\u5df2\u7ecf\u8bb2\u5f97\u5f88\u8be6\u7ec6\u4e86\uff0c\u6211\u5c31\u4e0d\u591a\u8bb2\u4e86\u3002\n\n\u4ee3\u7801\u5982\u4e0b\uff1a\n\n```cpp\n//1~n \u53d6x[i]\n//n+1~2n \u53d6y[i]\n//2n+1~3n \u4e0d\u53d6x[i]\n//3n=1~4n \u4e0d\u53d6y[i] \n#include<bits/stdc++.h>\n\n#define N 20010\n\nusing namespace std;\n\nstruct data\n{\n\tint val,id;\n\tdata(){};\n\tdata(int a,int b){val=a,id=b;} \n}a[N<<1];\n\nint n;\nint node,id[N<<3];\nint idx,dfn[N*12],low[N*12];\nint top,sta[N*12];\nint tot,num[N*12];\nint cnt,head[N*12],to[N*44],nxt[N*44];\nbool ins[N*12];\n\nbool cmp(data a,data b)\n{\n\treturn a.val<b.val;\n}\n\nvoid adde(int u,int v)\n{\n\tto[++cnt]=v;\n\tnxt[cnt]=head[u];\n\thead[u]=cnt;\n}\n\nvoid build(int k,int l,int r)\n{\n\tif(l==r)\n\t{\n\t\tid[k]=(n<<1)+a[l].id;\n\t\treturn;\n\t}\n\tid[k]=++node;\n\tint mid=(l+r)>>1;\n\tbuild(k<<1,l,mid);\n\tbuild(k<<1|1,mid+1,r);\n\tadde(id[k],id[k<<1]);\n\tadde(id[k],id[k<<1|1]);\n}\n\nvoid link(int k,int l,int r,int ql,int qr,int rt)\n{\n\tif(ql<=l&&r<=qr)\n\t{\n\t\tadde(rt,id[k]);\n\t\treturn;\n\t}\n\tint mid=(l+r)>>1;\n\tif(ql<=mid) link(k<<1,l,mid,ql,qr,rt);\n\tif(qr>mid) link(k<<1|1,mid+1,r,ql,qr,rt);\n}\n\nvoid Tarjan(int u)\n{\n\tdfn[u]=low[u]=++idx;\n\tsta[++top]=u;\n\tins[u]=true;\n\tfor(int i=head[u];i;i=nxt[i])\n\t{\n\t\tint v=to[i];\n\t\tif(!dfn[v])\n\t\t{\n\t\t\tTarjan(v);\n\t\t\tlow[u]=min(low[u],low[v]);\n\t\t}\n\t\telse if(!num[v])\n\t\t\tlow[u]=min(low[u],dfn[v]);\n\t}\n\tif(low[u]==dfn[u])\n\t{\n\t\ttot++;\n\t\tint v;\n\t\tdo\n\t\t{\n\t\t\tv=sta[top];\n\t\t\ttop--;\n\t\t\tins[v]=false;\n\t\t\tnum[v]=tot;\n\t\t}while(u!=v);\n\t}\n}\n\nbool check(int mid)\n{\n\tcnt=idx=tot=0,node=n<<2;\n\tmemset(head,0,sizeof(head));\n\tmemset(dfn,0,sizeof(dfn));\n\tmemset(low,0,sizeof(low));\n\tmemset(num,0,sizeof(num));\n\tbuild(1,1,n<<1);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tadde(i,n+(n<<1)+i);//\u53d6x[i]\u5219\u4e0d\u53d6y[i] \n\t\tadde(n+(n<<1)+i,i);//\u4e0d\u53d6y[i]\u5219\u53d6x[i] \n\t\tadde(n+i,(n<<1)+i);//\u53d6y[i]\u5219\u4e0d\u53d6x[i]\n\t\tadde((n<<1)+i,n+i); //\u4e0d\u53d6x[i]\u5219\u53d6y[i]\n\t}\n\tint nowl=1,nowr=1;\n\tfor(int i=1;i<=(n<<1);i++)\n\t{\n\t\twhile(nowl<i&&a[i].val-a[nowl].val>=mid) nowl++;\n\t\twhile(nowr<(n<<1)&&a[nowr+1].val-a[i].val<mid) nowr++;\n\t\tif(nowl<i) link(1,1,n<<1,nowl,i-1,a[i].id);\n\t\tif(nowr>i) link(1,1,n<<1,i+1,nowr,a[i].id);\n\t}\n\tfor(int i=1;i<=(n<<1);i++)\n\t\tif(!dfn[i])\n\t\t\tTarjan(i);\n\tfor(int i=1;i<=(n<<1);i++)\n\t\tif(num[i]==num[i+(n<<1)])\n\t\t\treturn false;\n\treturn true;\n}\n\nint main()\n{\n\tscanf(\"%d\",&n);\n\tfor(int i=1;i<=n;i++)\n\t{\n\t\tscanf(\"%d%d\",&a[i].val,&a[n+i].val);\n\t\ta[i].id=i,a[n+i].id=n+i;\n\t}\n\tsort(a+1,a+(n<<1)+1,cmp);\n\tint l=0,r=1e9,ans;\n\twhile(l<=r)\n\t{\n\t\tint mid=(l+r)>>1;\n\t\tif(check(mid)) ans=mid,l=mid+1;\n\t\telse r=mid-1;\n\t}\n\tprintf(\"%d\\n\",ans);\n\treturn 0;\n}\n```",
        "postTime": 1601714076,
        "uid": 118318,
        "name": "ez_lcw",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT2336 \u3010[ARC069D] Flags\u3011"
    },
    {
        "content": "\u849f\u84bb\u7684\u53c8\u4e00\u7bc7\u9898\u89e3\n\n\u6211\u7684\u4e00\u5230\u8003\u8bd5\u9898\uff0c\u5f53\u65f6\u4e00\u773c\u5c31\u770b\u51fa\u6765\u662f\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u6b7b\u6d3b\u4e0d\u4f1a\u505a\uff0c\u542c\u5230\u6b63\u89e3\u662f\n\n## \u5916\u9762\u4e8c\u5206\uff0c\u91cc\u9762\u7528\u7ebf\u6bb5\u6811\u5957$2-SAT$\uff0c\u518d\u8dd1\u4e2a$tarjan$\u6c42\u5f3a\u8054\u901a\u5206\u91cf$check$\u4e00\u904d\n\n\u3002\u3002\u3002\u3002\u3002\u3002\n\n\u8fd9TMD\u662f\u4ec0\u4e48\u73a9\u610f\uff0c\u4e8e\u662f\u6211\u5c31\u53bb\u5b66\u4e86\u5b66$2-SAT$\uff0c\u7b80\u5355\u6765\u8bf4\uff0c\u5c31\u662f\u6709\u4e24\u6392\u70b9\uff0c\u5b83\u4eec\u4e24\u4e24\u4e92\u76f8\u9650\u5236\uff0c\u5047\u5982\u7b2c\u4e00\u5217\u70b9\uff0c\u9009\u4e86A\u5c31\u4e0d\u80fd\u9009B\u90a3\u5c31\u5411B\u7684\u7b2c\u4e8c\u4e2a\u70b9\u8fde\u8fb9\uff0cB\u540c\u7406\uff0c\u5047\u5982\u9009\u4e86B\u5c31\u5fc5\u987b\u9009A\u90a3\u5c31\u5982\u7b2c\u4e09\u5217\u90a3\u6837\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/sfs1q0qz.png)\n\n\u5efa\u8bae\u5148\u53bb\u770b\u770b$2-SAT$\u7684\u6a21\u677f\uff0c\u6211\u53ef\u80fd\u8bb2\u4e0d\u6e05\u3002\u3002\u3002\uff08~~\u56e0\u4e3a\u592a\u5f31\u5566~~\uff09\u9898\n\n\u53f7[P4782](https://www.luogu.org/problem/P4782)\u5bf9\u4e8e\u8fd9\u9053\u9898\uff0c\u663e\u7136\u7b54\u6848\n\n\u53ef\u4ee5\u4e8c\u5206\u51fa\u6765\uff0c\u5982\u679c\u6709\u4e0d\u6ee1\u8db3\u6761\u4ef6\u7684A,B(\u5373A,B\u7684\u5dee\u503c\u5927\u4e8e\u4e8c\u5206\u7684$x$)\uff0c\u6211\n\n\u4eec\u4eceA\u5411B\u8fde\u8fb9\uff0c\u8868\u793a\u9009\u4e86A\u5c31\u4e0d\u80fd\u9009B\uff0c\u7136\u540e\u8dd1$tarjan$\uff0c\u6c42\u51fa\u5f3a\u8054\u901a\u5206\u91cf\uff0c\n\n\u5047\u5982\u6709\u540c\u4e00\u5217\u7684\u4e24\u4e2aA,B\u5728\u540c\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\uff0c\u90a3\u4e48\u5176\u542b\u4e49\u5c31\u4e3a\u65e2\u4e0d\u80fd\u9009A\uff0c\n\n\u53c8\u4e0d\u80fd\u9009B\uff0c\u8fd9\u5c31\u662f\u4e0d\u5408\u6cd5\u7684\u60c5\u51b5\uff0c\u8bf4\u660e\u5f53\u524d\u4e8c\u5206\u7684\u503c\u592a\u5c0f\uff0c\u4e0d\u80fd\u6ee1\u8db3\u6240\u6709\n\n\u7684\u9650\u5236\uff0c\u9700\u8981\u66f4\u5927\u7684\u7b54\u6848\uff0c\u53cd\u6b63\u5219\u9700\u8981\u66f4\u5c0f\u7684\u7b54\u6848\u3002\n\n\u90a3\u7ebf\u6bb5\u6811\u662f\u5e72\u5565\u7684\u5462\uff1f\u5982\u679c\u4f60\u662f\u66b4\u529b\u5efa\u56fe\u7684\u8bdd\uff0c\u65f6\u95f4\u590d\u6742\u5ea6\u662f\n\n$O(n^{2})$\u7684\uff0c\u5bf9\u4e8e\u6b64\u9898\u663e\u7136\u4e0d\u884c\uff0c\u6240\u4ee5\u7ebf\u6bb5\u6811\u4f7f\u7528\u6765\u4f18\u5316\u5efa\u56fe\u7684\uff0c\u5177\u4f53\u64cd\u4f5c\u5982\u4e0b\uff1a\n\n$1.$\u5c06\u6bcf\u4e2a\u70b9\u7684\u6743\u503c\u4e0e\u7f16\u53f7\u6253\u5305\u5230\u4e00\u4e2a\u7ed3\u6784\u4f53\u91cc\uff0c\u7b2c\u4e00\u6392\u7684\u7f16\u53f7\u4e3a$1->n$\uff0c\n\u7b2c\u4e8c\n\n\u6392\u7684\u7f16\u53f7\u4e3a$n+1->2n$\uff0c\u628a\u5b83\u4eec\u6309\u7167\u7f16\u53f7\u4ece\u5c0f\u5230\u5927\u6392\u5e8f\n\n$2.$\u4e8c\u5206\u51fa\u4e00\u4e2a\u7b54\u6848\uff0c\u5728$check$\u51fd\u6570\u4e2d\uff0c\u9996\u5148\u7528\u7ebf\u6bb5\u6811\u4f18\u5316\u5efa\u56fe\uff0c\u5efa\u56fe\u65f6\uff0c\u5bf9\u4e8e\u6bcf\n\n\u4e00\u4e2a\u70b9\uff0c\u627e\u5230\u4e00\u4e2a$l,r$\uff0c\u6ee1\u8db3$v_i-v_r<x$\uff0c$v_l-v_i<x$\uff0c\u518d\u5728$r-i$\u4e0e$i-l$\u8fd9\n\n\u4e24\u6bb5\u533a\u95f4\u5185\u5bfb\u627e\u4e0d\u5408\u6cd5\u7684\u70b9\uff0c\u7531\u8fd9\u4e9b\u70b9\u5411$l,r,i$\u8fde\u8fb9\uff0c\u8868\u793a\u4ed6\u4eec\u4e92\u76f8\u9650\u5236\n\n$3.$\u7528$tarjan$\u6c42\u51fa\u8054\u901a\u5206\u91cf\uff0c\u5982\u679c\u6709\u540c\u4e00\u5217\u4e24\u4e2a\u70b9\u5728\u540c\u4e00\u4e2a\u5f3a\u8054\u901a\u5206\u91cf\u4e2d\uff0c\u8fd4\u56de\n\n$false$\u5426\u5219\u4e3a$true$\n\n\u7b97\u6cd5\u8bb2\u8ff0\u5b8c\u6bd5\uff0c\u63a5\u4e0b\u6765\u662f\u4ee3\u7801\n\n## code\n```cpp\n//\u53d8\u91cf\u540d\u4e0e\u6570\u7ec4\u540d\u4e3a\u4e2a\u4eba\u4e60\u60ef\u4e0e\u504f\u597d\n//\u8bf7\u5148\u4ece\u4e3b\u51fd\u6570\u770b\u8d77\n#include <stack>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n#define inf 1e9+7\n#define LL (k << 1)\n#define RR (k << 1 | 1)\n\nusing namespace std;\nconst int N = 200005;\nconst int P = N + (N << 2);\nconst int M = N + P + N * 20;\nint n, pos[N];\nint scc[P], dfn[P], low[P];\nstruct saber {\n\tint nxt, to;\n}rin[M];\nint head[P], cnt, tot, Index, violet;\nstack<int> s;\nstruct SIN {\n\tint v, p;\n\tbool operator < (const SIN &o) const {\n\t\treturn v < o.v;\n\t}\n}shana[N];//shana\u6570\u7ec4\u7528\u6765\u5b58\u50a8\u70b9\u7684\u4fe1\u606f\nbool vis[P];\n\ninline void add(int from, int to) {\n\trin[++cnt].to = to;\n\trin[cnt].nxt = head[from];\n\thead[from] = cnt;\n}\n\nvoid tarjan(int x) {//\u666e\u901a\u7684tarjan\u6c42\u5f3a\u8054\u901a\u5206\u91cf\n\tdfn[x] = low[x] = ++ Index;\n\ts.push(x), vis[x] = true;\n\tfor(int i = head[x]; i ;i = rin[i].nxt) {\n\t\tint vc = rin[i].to;\n\t\tif(!dfn[vc]) {\n\t\t\ttarjan(vc);\n\t\t\tlow[x] = min(low[x], low[vc]);\n\t\t}\n\t\telse if(vis[vc]) low[x] = min(low[x], dfn[vc]);\n\t}\n\tif(dfn[x] == low[x]) {\n\t\t++ tot; int k = 0;\n\t\tdo {\n\t\t\tk = s.top();\n\t\t\ts.pop();\n\t\t\tscc[k] = tot;\n\t\t\tvis[k] = false;\n\t\t}while(k != x);\n\t}\n}\n\nvoid build(int k, int l, int r) {\n\tif(l == r) {\n    \t//violet\u4e3a\u70b9\u7684\u603b\u4e2a\u6570\uff0c\u5979\u7b49\u4e8en<<1\n        //p<=n\u8bf4\u660e\u662f\u7b2c\u4e00\u6392\u70b9\uff0c\u5426\u5219\u662f\u7b2c\u4e8c\u6392\u70b9\uff0c\u7531\u53f6\u5b50\u8282\u70b9\u8fde\u8fb9\n\t\tadd(k + violet, \n\t\t\tshana[l].p <= n ? shana[l].p + n : shana[l].p - n);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tbuild(LL, l, mid), build(RR, mid + 1, r);\n    //\u76f8\u5f53\u4e8epushup\n\tadd(k + violet, LL + violet);\n\tadd(k + violet, RR + violet);\n}\n\nvoid insert(int k, int l, int r, int x, int y, int v) {\n\tif(l >= x && r <= y) {\n    \t//\u5728\u7ebf\u6bb5\u6811\u7684\u533a\u95f4\u4e0a\u7531v\u70b9\u5411k+violet\u8fde\u8fb9\n\t\tadd(v, k + violet);\n\t\treturn;\n\t}\n\tint mid = (l + r) >> 1;\n\tif(x <= mid) insert(LL, l, mid, x, y, v);\n\tif(y > mid) insert(RR, mid + 1, r, x, y, v);\n}\n\ninline bool check(int x) {\n\t//\u6838\u5fc3\u90e8\u5206\n\tcnt = Index = tot = 0;\n\twhile(!s.empty()) s.pop();\n\tmemset(head, 0, sizeof(head));\n\tmemset(dfn, 0, sizeof(dfn));\n\tbuild(1, 1, violet);\n\tint l = 1, r = 1;\n\tfor(int i = 1;i <= violet;++ i) {\n\t\tint op, p = shana[i].p;\n        //op\u70b9\u4e3a\u4e2d\u95f4\u70b9\n\t\tif(p <= n) op = pos[p + n];\n\t\telse op = pos[p - n];\n        //\u627e\u5230\u5408\u6cd5\u7684\u533a\u95f4\uff0c\u5728\u8be5\u533a\u95f4\u5185\u5bfb\u627e\u4e0d\u5408\u6cd5\u7684\u70b9\n\t\twhile(r <= i && shana[r].v + x < shana[i].v) r ++;\n        //\u73b0\u5728\u6709r\u4e0d\u7b26\u5408\u8981\u6c42\n\t\tif(r < i  && r >= 1 && shana[r].v + x > shana[i].v) {\n\t\t\tif(r <= op && op < i) {//op\u5230i\u6216r\u70b9\u4e0d\u5408\u6cd5\uff0c\u8fde\u8fb9\n\t\t\t\tif(r < op) insert(1, 1, violet, r, op - 1, shana[i].p);\n\t\t\t\tif(op < i - 1) insert(1, 1, violet, op + 1, i - 1, shana[i].p);\n\t\t\t}//\u5426\u5219\u76f4\u63a5\u7531r\u5411i\u8fde\u8fb9\n\t\t\telse insert(1, 1, violet, r, i - 1, shana[i].p);\n\t\t}//l\u540c\u7406\n\t\twhile(l <= violet && shana[l].v - x < shana[i].v) l ++;\n\t\tl --;\n\t\tif(l <= violet && l > i && shana[l].v - x < shana[i].v) {\n\t\t\tif(i + 1 <= op && op <= l) {\n\t\t\t\tif(i + 1 < op) insert(1, 1, violet, i + 1, op - 1, shana[i].p);\n\t\t\t\tif(op < l) insert(1, 1, violet, op + 1, l, shana[i].p);\n\t\t\t}\n\t\t\telse insert(1, 1, violet, i + 1, l, shana[i].p);\n\t\t}\n\t}\n    //\u6c42\u5b8c\u5f3a\u8054\u901a\u5206\u91cf\uff0ci\u548ci+n\u662f\u540c\u4e00\u5217\u7684\u70b9\uff0c\u5728\u540c\u4e00\u4e2a\u73af\u91cc\u5219\u4e0d\u5408\u6cd5\n\tfor(int i = 1;i <= violet;++ i) \n\t\tif(!dfn[i]) tarjan(i);\n\tfor(int i = 1;i <= n;++ i)\n\t\tif(scc[i] == scc[i + n])\n\t\t\treturn 0;\n\treturn 1;\n}\n\nint main() {\n\t// freopen(\"disaster.in\", \"r\", stdin);\n\t// freopen(\"disaster.out\", \"w\", stdout);\n\tscanf(\"%d\", &n);\n\tint ans, maxn = -1e9, minn = 1e9;\n\tfor(int i = 1, u, v;i <= n;++ i) {\n\t\tscanf(\"%d%d\", &u, &v);\n\t\tminn = min(minn, min(u, v));\n\t\tmaxn = max(maxn, max(u, v));\n\t\tshana[++violet] = (SIN) {u, i};\n\t\tshana[++violet] = (SIN) {v, i + n};\n\t}\n    //\u7279\u5224\uff0c\u5982\u679c\u6700\u5927\u503c\u51cf\u53bb\u6700\u5c0f\u503c\u6bd4n\u8fd8\u5c0f\uff0c\u76f4\u63a5\u8f93\u51fa0\n\tif(maxn - minn + 1 < n) { printf(\"0\\n\"); return 0; }\n\tsort(shana + 1, shana + violet + 1);\n\tfor(int i = 1;i <= violet;++ i) pos[shana[i].p] = i;\n\tint l = 0, r = maxn;\n\twhile(l < r) {\n\t\tint mid = (l + r) >> 1;\n\t\tif(check(mid)) ans = mid, l = mid + 1;\n\t\telse r = mid;\n\t}\n\tprintf(\"%d\\n\", ans);\n\tfclose(stdin);\n\tfclose(stdout);\n\treturn 0;\n}\n```\n",
        "postTime": 1571008995,
        "uid": 160654,
        "name": "\u707c\u773c\u7684\u590f\u5a1c",
        "ccfLevel": 4,
        "title": "\u9898\u89e3 AT2336 \u3010Flags\u3011"
    }
]