[
    {
        "content": "\u53ef\u4ee5\u53d1\u73b0\uff0c\u9009\u62e9\u4e00\u90e8\u5206\u7ed9\u5b9a\u7684 $E_i$\uff0c\u5373\u9009\u51fa $\\mathcal{E} = \\{E_1, E_2, \\ldots , E_{N - 1}\\}$ \u7684\u4e00\u4e2a\u5b50\u96c6 $\\mathcal{S} \\subseteq \\mathcal{E}$\u3002\n\n\u8003\u8651 $\\mathcal{S}$ \u80fd\u591f\u8fde\u901a\u7684\u6240\u6709\u70b9\uff0c\u4ee4\u5b83\u4eec\u4e3a $f(\\mathcal{S})$\uff0c\u5373 $f(\\mathcal{S}) = \\{u \\mid u \\in E_i \\in \\mathcal{S}\\}$\u3002\n\n\u5982\u679c $\\mathcal{S}$ \u975e\u7a7a\u4e14 $|f(\\mathcal{S})| \\le |\\mathcal{S}|$\uff0c\u90a3\u5c31\u5b8c\u86cb\u4e86\uff0c\u56e0\u4e3a\u4e0d\u7ba1\u600e\u4e48\u4f7f\u7528\u8fd9 $|\\mathcal{S}|$ \u6761\u8fb9\uff0c\u90fd\u4f1a\u8fde\u51fa\u73af\u6765\uff0c\u9020\u4e0d\u6210\u6811\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4efb\u610f $\\mathcal{S} \\ne \\varnothing$\uff0c\u90fd\u5fc5\u987b\u8981\u6709 $|f(\\mathcal{S})| \\ge \\mathcal{S} + 1$\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u6709\u89e3\u7684**\u5fc5\u8981\u6761\u4ef6**\uff0c\u4e4b\u540e\u7684\u6784\u9020\u663e\u793a\u4e86\u5b83\u4e5f\u662f**\u5145\u5206\u6761\u4ef6**\u3002\n\n\u770b\u8d77\u6765\u5f88 Hall \u5b9a\u7406\uff0c\u5148\u6574\u4e2a\u4e8c\u5206\u56fe\u5339\u914d\u518d\u8bf4\u5427\u3002\n\n\u4e8c\u5206\u56fe\u5de6\u8fb9\u4e3a $N$ \u4e2a\u70b9\uff0c\u53f3\u8fb9\u4e3a $(N - 1)$ \u4e2a\u70b9\u96c6\uff0c\u5982\u679c $u \\in E_i$\uff0c\u5219\u5de6\u8fb9\u7684 $u$ \u5bf9\u5e94\u7684\u70b9\u4e0e\u53f3\u8fb9\u7684 $E_i$ \u5bf9\u5e94\u7684\u70b9\u4e4b\u95f4\u8fde\u8fb9\u3002\n\n\u8fd9\u6837\u5fc5\u987b\u8981\u6709\u53f3\u4fa7\u7684 $(N - 1)$ \u4e2a\u70b9\u7684\u5b8c\u5907\u5339\u914d\uff0c\u5982\u679c\u6c42\u4e0d\u51fa\u6765\u4e00\u5b9a\u65e0\u89e3\uff0c\u53ef\u4ee5\u4f7f\u7528 Dinic \u5b9e\u73b0\u3002\n\n\u90a3\u4e48\u5de6\u8fb9\u5c31\u4f1a\u6709\u6070\u597d $1$ \u4e2a\u70b9\u6ca1\u88ab\u5339\u914d\u5230\uff0c\u4ee4\u5b83\u4e3a $r$\u3002\n\n\u8003\u8651\u4ece $r$ \u5f00\u59cb DFS\uff0c\u968f\u4fbf\u627e\u5230\u4e00\u4e2a\u4e0e $r$ \u76f8\u90bb\u7684\uff0c\u4e14\u672a\u88ab\u7ecf\u8fc7\u7684\u53f3\u4fa7\u7684\u70b9 $i$\uff0c\u628a\u5b83\u6807\u8bb0\u4e3a\u88ab\u7ecf\u8fc7\u4e86\uff0c\u4ee4\u8fd9\u4e2a\u70b9\u5728\u5de6\u4fa7\u7684\u5339\u914d\u4e3a $u$\uff0c\u7136\u540e\u5c31\u80fd\u786e\u5b9a $E_i$ \u4e2d\u9009\u62e9\u7684\u4e24\u4e2a\u70b9\u662f $r$ \u548c $u$\u3002\u7136\u540e DFS \u9012\u5f52\u8fdb $u$\uff0c\u8fd9\u6837\u4e00\u76f4\u4e0b\u53bb\u76f4\u5230\u628a\u6240\u6709\u70b9\u90fd\u7ecf\u8fc7\u4e3a\u6b62\u3002\n\n\u5982\u679c\u8fd8\u6ca1\u6709\u7ecf\u8fc7\u6240\u6709\u70b9\uff0c\u5c31\u65e0\u6cd5\u62d3\u5c55\u65b0\u70b9\u800c\u8fd4\u56de\u4e86\uff0c\u90a3\u5c31\u662f\u65e0\u89e3\u3002\n\n\u8fd9\u4e2a\u8fc7\u7a0b\u6709\u6ca1\u6709\u53ef\u80fd\u628a\u6709\u89e3\u5224\u6210\u65e0\u89e3\u5462\uff1f\n\n\u5982\u679c\u8fc7\u7a0b\u4e2d\u9014\u505c\u6b62\u4e86\u7684\u8bdd\uff0c\u5f53\u4e14\u4ec5\u5f53\uff1a\u5bf9\u4e8e\u6240\u6709\u7684\u5de6\u4fa7\u88ab\u7ecf\u8fc7\u7684\u70b9\uff0c\u4e0e\u5b83\u4eec\u76f8\u90bb\u7684\u53f3\u4fa7\u7684\u70b9\u90fd\u88ab\u7ecf\u8fc7\u4e86\uff0c\u65e0\u6cd5\u62d3\u5c55\u65b0\u70b9\u3002\n\n\u663e\u7136\u5de6\u4fa7\u88ab\u7ecf\u8fc7\u7684\u70b9\u6570\u5728\u4efb\u610f\u65f6\u523b\u90fd\u7b49\u4e8e\u53f3\u4fa7\u88ab\u7ecf\u8fc7\u7684\u70b9\u6570 $+ 1$\uff0c\u56e0\u4e3a\u591a\u4e86\u4e00\u4e2a $r$\u3002\n\n\u8003\u8651\u4ee4 $\\mathcal{S}$ \u4e3a\u53f3\u4fa7**\u672a\u88ab\u7ecf\u8fc7**\u7684\u70b9\uff0c\u5b83\u4eec\u5728\u5de6\u4fa7\u5bf9\u5e94\u7684\u70b9\u4e5f\u662f\u672a\u88ab\u7ecf\u8fc7\u7684\uff0c\u90a3\u4e48 $|f(\\mathcal{S})| \\le |\\mathcal{S}|$\uff0c\u4e5f\u5c31\u662f\u65e0\u89e3\uff0c\u4e0e\u5047\u8bbe\u77db\u76fe\u3002\n\n\u6240\u4ee5\u4e00\u5b9a\u4e0d\u4f1a\u628a\u6709\u89e3\u5224\u6210\u65e0\u89e3\uff0c\u5982\u679c\u65e0\u89e3\u4e00\u5b9a\u662f $f(\\mathcal{S})| \\le |\\mathcal{S}|$ \u7684\u60c5\u51b5\u51fa\u73b0\u4e86\u3002\u6240\u4ee5 $|f(\\mathcal{S})| \\ge \\mathcal{S} + 1$ \u662f\u5145\u5206\u5fc5\u8981\u6761\u4ef6\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $\\mathcal O (N + M \\sqrt{N})$\uff0c[\u8bc4\u6d4b\u94fe\u63a5](https://atcoder.jp/contests/agc029/submissions/10423134)\u3002",
        "postTime": 1583136419,
        "uid": 10703,
        "name": "\u5c0f\u7c89\u5154",
        "ccfLevel": 10,
        "title": "\u9898\u89e3 AT4505 \u3010[AGC029F] Construction of a tree\u3011"
    },
    {
        "content": "### AGC 029F\n#### Solution\n\u795e\u4ed9\u6784\u9020\u9898\u3002\n\n\u8003\u8651\u5982\u4f55\u624d\u80fd\u6784\u6210\u4e00\u9897\u6811\uff0c\u663e\u7136\u6709\u4e00\u4e2a\u5fc5\u8981\u6761\u4ef6\u662f\u5bf9\u4e8e\u6bcf\u4e2a\u70b9$u$\uff0c\u6574\u5f20\u56fe\u9664\u53bb$u$\u4e4b\u5916\u7684\u6240\u6709\u70b9\u548c\u70b9\u96c6\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff0c\u5177\u4f53\u6765\u8bf4\u5c31\u662f\u8003\u8651\u4ee5$u$\u4e3a\u6839\uff0c\u53bb\u6389$u$\u4e4b\u540e\u5269\u4f59\u6bcf\u4e2a\u70b9\u548c\u4ed6\u7684\u7236\u4eb2\u5bf9\u5e94\u7684\u90a3\u6761\u8fb9\u53ef\u4ee5\u521a\u597d\u6784\u6210\u5b8c\u7f8e\u5339\u914d\uff08\u5373\u8003\u8651\u4e00\u5f20\u4e8c\u5206\u56fe\u5de6\u8fb9\u662f\u9664\u4e86$u$\u4e4b\u5916\u7684\u70b9\uff0c\u53f3\u8fb9\u662f$E_i$\uff0c$u$\u548c$E_i$\u8fde\u8fb9\u5f53\u4e14\u4ec5\u5f53$u\\in E_i$\uff0c\u8be5\u56fe\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff09\u3002\u7528$Hall$\u5b9a\u7406\u6765\u8868\u8fbe\u5c31\u662f\uff0c\u8bbe$S$\u4e3a$\\{E_1,E_2\\cdots E_n\\}$\u7684\u4efb\u610f\u4e00\u4e2a\u5b50\u96c6\uff0c$N(S)$\u8868\u793a\u8fd9\u4e9b$E_i$\u4e2d\u7684\u70b9\u7684\u5e76\u96c6\uff0c\u5219$|N(S)|\\geq |S|+1$\u3002\n\n\u5b9e\u9645\u4e0a\u8fd9\u4e2a\u6761\u4ef6\u4e5f\u662f\u5145\u5206\u7684\uff0c\u8bc1\u660e\u8003\u8651\u5982\u4e0b\u7684\u6784\u9020\u7b97\u6cd5\uff1a\u9996\u5148\u5c06$1$\u53bb\u9664\u540e\u6c42\u51fa\u5b8c\u7f8e\u5339\u914d\uff0c\u7136\u540e\u4ece$1$\u5f00\u59cbBFS\uff0c\u6bcf\u6b21\u9009\u62e9\u4e00\u6761\u5de6\u8fb9\u70b9$u$\u5230\u53f3\u8fb9\u70b9$v$\u7684\u8fb9\uff0c\u7136\u540e\u627e\u5230$v$\u7684\u5339\u914d\u70b9$p_v$\uff0c\u82e5\u8fd9\u4e24\u4e2a\u70b9\u90fd\u6ca1\u6709\u88ab\u8bbf\u95ee\u8fc7\uff0c\u5219\u6dfb\u52a0\u4e00\u6761\u6811\u8fb9$(u,p_v)$\u3002\u4e8e\u662f\u4e0a\u9762\u7684\u547d\u9898\u7b49\u4ef7\u4e8e\u8fd9\u6837\u641c\u7d22\u80fd\u591f\u904d\u5386\u6240\u6709\u7684\u70b9\u3002\u56e0\u4e3a\u5982\u679c\u67d0\u4e00\u4e2a\u65f6\u523b\u4e0d\u80fd\u8d70\u5230\u672a\u8d70\u8fc7\u7684\u70b9\uff0c\u90a3\u4e48\u8d70\u8fc7\u7684\u5de6\u8fb9\u70b9\u4e2a\u6570\u6bd4\u53f3\u8fb9\u70b9\u4e2a\u6570\u591a$1$\uff0c\u6240\u4ee5\u5de6\u8fb9\u70b9\u603b\u4e2a\u6570\u6bd4\u53f3\u8fb9\u70b9\u603b\u4e2a\u6570\u591a$1$\uff0c\u6545\u73b0\u5728\u672a\u904d\u5386\u7684\u53f3\u8fb9\u7684\u70b9\u7684\u96c6\u5408$T$\u6ee1\u8db3$N(T)\\leq T$\uff0c\u4e0e\u4e0a\u9762$Hall$\u5b9a\u7406\u77db\u76fe\u3002\u800c\u5982\u679c\u4e0a\u9762\u7684\u547d\u9898\u4e0d\u6210\u7acb\uff0c\u663e\u7136\u65e0\u6cd5\u641c\u51fa\u5408\u6cd5\u7684\u65b9\u6848\uff0c\u800c\u8fd9\u6837\u641c\u7d22\u80fd\u904d\u5386\u6240\u6709\u7684\u70b9\u7b49\u4ef7\u4e8e\u539f\u95ee\u9898\u6709\u89e3\uff0c\u6545\u539f\u547d\u9898\u7b49\u4ef7\u4e8e\u539f\u95ee\u9898\u6709\u89e3\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6$\\mathcal O(\\sum|E_i|\\sqrt n)$\n#### Code\n```cpp\nint n,tot,S,T;\nint p[MAXN];\npii ans[MAXN];\nvector<int> G[MAXN];\n\nnamespace NetWorkFlow{\n    int len,maxFlow;\n    int head[MAXN],cur[MAXN],dep[MAXN],vis[MAXN];\n    queue<int> q;\n\n    struct Edge{\n        int to,next,flow;\n    } e[MAXM];\n    \n    void Init(){\n        memset(head,-1,sizeof(head));\n        len = 1;\n    }\n\n    void add_edge(int u,int v,int flow){\n        e[++len] = (Edge){v,head[u],flow};\n        head[u] = len;\n        e[++len] = (Edge){u,head[v],0};\n        head[v] = len;\n    }\n\n    int bfs(){\n        for(int i = 0;i <= tot;i++){\n            cur[i] = head[i];\n            dep[i] = -1;\n        }\n        dep[S] = 0;\n        q.push(S);\n        while(!q.empty()){\n            int u = q.front();\n            q.pop();\n            for(int i = head[u];i != -1;i = e[i].next){\n                int v = e[i].to;\n                if(dep[v] == -1 && e[i].flow){\n                    dep[v] = dep[u] + 1;\n                    q.push(v);\n                }\n            }\n        }\n        return dep[T] != -1;\n    }\n\n    int dfs(int u,int flow){\n        if(u == T){\n            maxFlow += flow;\n            return flow;\n        }\n        int used = 0,low;\n        for(int i = cur[u];i != -1;i = e[i].next){\n            cur[u] = i;\n            int v = e[i].to;\n            if(dep[v] == dep[u] + 1 && e[i].flow){\n                if(low = dfs(v,min(flow - used,e[i].flow))){\n                    e[i].flow -= low;\n                    e[i ^ 1].flow += low;\n                    used += low;\n                    if(used == flow)\n                        break;\n                }\n            }\n        }\n        return used;\n    }\n\n    int Dinic(){\n        while(bfs()) dfs(S,INF);\n        return maxFlow;\n    }\n\n    bool GetAns(){\n        for(int u = 2;u <= n;u++){\n            for(int i = head[u];i != -1;i = e[i].next){\n                int v = e[i].to;\n                if(v != S && !e[i].flow) p[v - n] = u;\n            }\n        }\n        q.push(1);\n        int cnt = 0;\n        while(!q.empty()){\n            int u = q.front();\n            q.pop();\n            for(int v : G[u]){\n                if(!vis[v]){\n                    ans[v] = make_pair(u,p[v]);\n                    cnt += 1;\n                    q.push(p[v]);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return cnt == n - 1;\n    }\n}\n\nint main(){\n    NetWorkFlow::Init();\n    scanf(\"%d\",&n);\n    S = 1;\n    for(int i = 2;i <= n;i++)\n        NetWorkFlow::add_edge(S,i,1);\n    for(int i = 1,x,y;i < n;i++){\n        scanf(\"%d\",&x);\n        while(x--){\n            scanf(\"%d\",&y);\n            if(y != 1) NetWorkFlow::add_edge(y,i + n,1);\n            G[y].push_back(i);\n        }\n    }\n    tot = T = n + n;\n    for(int i = 1;i < n;i++)\n        NetWorkFlow::add_edge(i + n,T,1);\n    if(NetWorkFlow::Dinic() < n - 1){\n        puts(\"-1\");\n        return 0;\n    }\n    if(!NetWorkFlow::GetAns()){\n        puts(\"-1\");\n        return 0;\n    }\n    for(int i = 1;i < n;i++)\n        printf(\"%d %d\\n\",ans[i].first,ans[i].second);\n    return 0;\n}\n```",
        "postTime": 1607670971,
        "uid": 108894,
        "name": "\u5173\u6000\u4ed6\u4eba",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT4505 \u3010[AGC029F] Construction of a tree\u3011"
    },
    {
        "content": "\u8003\u8651\u6784\u9020\uff0c\u513f\u5b50\u5411\u7236\u4eb2\u8fde\u8fb9\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6bcf\u4e2a\u96c6\u5408\u6700\u540e\u90fd\u662f\u513f\u5b50 $\\to$ \u7236\u4eb2\u7684\u4e00\u6761\u8fb9\uff0c\u90a3\u4e48\u6211\u4eec\u53ef\u4ee5\u968f\u4fbf\u9009\u4e00\u4e2a\u70b9\u4f5c\u4e3a\u8ddf\uff0c\u5176\u4f59\u70b9\u80af\u5b9a\u5bf9\u5e94\u4e00\u4e2a\u96c6\u5408\uff0c\u8868\u793a\u8fd9\u4e2a\u96c6\u5408\u6240\u5bf9\u5e94\u7684\u8fb9\uff0c\u4e00\u7aef\u662f\u4ed6\uff0c\u53e6\u4e00\u7aef\u662f\u4ed6\u7236\u4eb2\u3002\u5176\u5b9e\u4e5f\u5c31\u662f\u4e00\u4e2a\u5339\u914d\uff0c\u5de6\u8fb9\u662f\u9664\u4e86\u6839\u8282\u70b9\u4ee5\u5916\u7684\u6240\u6709\u70b9\uff0c\u53f3\u8fb9\u662f\u6240\u6709\u70b9\u96c6\u3002\u70b9\u4e0e\u70b9\u96c6\u6709\u8fb9\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e2a\u70b9\u5728\u70b9\u96c6\u4e2d\u51fa\u73b0\u3002\n\n\u663e\u7136\u5730\uff0c\u5982\u679c\u8fd9\u4e2a\u5339\u914d\u65e0\u89e3\u90a3\u4e48\u6700\u7ec8\u80af\u5b9a\u65e0\u89e3\uff0c\u56e0\u4e3a\u6839\u672c\u627e\u4e0d\u5230\u4e00\u4e2a\u5b8c\u7f8e\u7684\u513f\u5b50 $\\to$ \u7236\u4eb2\u7684\u6620\u5c04\u3002\u627e\u5230\u5339\u914d\u4e4b\u540e\u6211\u4eec\u628a\u6839\u52a0\u4e0a\u53bb\uff0c\u8ddf\u524d\u9762\u7684\u8fde\u6cd5\u4e00\u6837\u3002\u5982\u679c\u8fde\u4e0a\u4e4b\u540e\u8fd9\u5f20\u56fe\u4ecd\u7136\u4e0d\u8fde\u901a\uff0c\u90a3\u4e48\u663e\u7136\u65e0\u89e3\uff0c\u56e0\u4e3a\u4e24\u4e2a\u72ec\u7acb\u7684\u8fde\u901a\u5757\u663e\u7136\u6ca1\u6709\u751f\u6210\u6811\u3002\n\n\u90a3\u5982\u679c\u4e0a\u9762\u7684\u5224\u6389\u4e4b\u540e\u662f\u5426\u5c31\u4e00\u5b9a\u6709\u89e3\u4e86\u5462\uff1f\u6211\u4eec\u8003\u8651\u6784\u9020\u89e3\u3002\u6211\u4eec\u4ece\u6839\u8282\u70b9\u5f00\u59cb `bfs`\uff0c\u6211\u4eec\u8003\u8651\u6839\u8282\u70b9\u6240\u6709\u8fde\u51fa\u53bb\u7684\u96c6\u5408\uff0c\u8fd9\u4e9b\u96c6\u5408\u7684\u5339\u914d\u70b9\u7684\u7236\u4eb2\u90fd\u5b9a\u4f5c\u662f\u8fd9\u4e2a\u6839\uff0c\u7136\u540e\u8fd9\u6837\u9012\u5f52\u4e0b\u53bb\u3002\u4e0d\u96be\u53d1\u73b0\uff0c\u8fd9\u6837\u505a\u662f\u80af\u5b9a\u6709\u89e3\u7684\u3002\n\n\u8003\u8651\u590d\u6742\u5ea6\uff0c\u8fb9\u6570 $m$ \u662f\u96c6\u5408\u7684\u603b\u5927\u5c0f\uff0c\u7528 `Dinic` \u505a\u4e8c\u5206\u56fe\u5339\u914d\uff0c\u590d\u6742\u5ea6 $\\mathcal{O}(m\\sqrt{n})$\uff0c\u4e4b\u540e\u7684\u6784\u9020\u89e3\u590d\u6742\u5ea6 $\\mathcal{O}(m)$\uff0c\u6240\u4ee5\u603b\u590d\u6742\u5ea6 $\\mathcal{O}(m\\sqrt{n})$\u3002",
        "postTime": 1582429035,
        "uid": 84088,
        "name": "pufanyi",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT4505 \u3010[AGC029F] Construction of a tree\u3011"
    },
    {
        "content": "## AGC029F \u9898\u89e3\n\n\u8fd9\u7bc7\u9898\u89e3\u7684\u76ee\u7684\uff0c\u662f\u7ed9\u51fa\u4e00\u79cd\u4e0d\u7528\u970d\u5c14\u5b9a\u7406\u7684\u65b9\u6cd5\u7684\u8f83\u4e3a\u4e25\u8c28\u7684\u8bc1\u660e\uff0c\n\n\uff08\u867d\u7136\u672c\u8d28\u8fd8\u662f\u970d\u5c14\u5b9a\u7406\uff0c\u4f46\u53ef\u4ee5\u4e0d\u7528\u970d\u5c14\u5b9a\u7406\u9610\u8ff0\uff09\n\n\u6545\u4ee5\u4e0b\u7684\u8bb2\u89e3\u57fa\u4e8e\u60a8\u5df2\u7ecf\u4e86\u89e3\u4e86\u9898\u4e2d\u4e8c\u5206\u56fe\u7684\u5efa\u6cd5\uff0c\n\n\u6240\u4ee5\u5982\u679c\u60a8\u60f3\u5b66\u4e60\u5982\u4f55\u505a\u8fd9\u9053\u9898\uff0c\u5efa\u8bae\u5148\u770b\u5176\u4ed6\u7684\u9898\u89e3\u3002\n\n\u90a3\u4e48\uff0c\u63a5\u4e0b\u6765\uff0c\u662f\u5bf9\u4e0d\u7528\u970d\u5c14\u5b9a\u7406\u7684\u505a\u6cd5\u7684\u6b63\u786e\u6027\u7684\u8bc1\u660e\u3002\n\n\u9996\u5148\uff0c\u5982\u679c\u5b58\u5728\u82e5\u5e72\u4e2a\u70b9\u96c6 $E_{1},E_2,\\cdots E_k$\uff0c\u6ee1\u8db3\uff1a\n\n$|E_1\\cup E_2\\cup\\cdots\\cup E_k|\\le k$\uff0c\u5373\u6240\u6709\u70b9\u96c6\u7684\u5e76\u6240\u5305\u542b\u7684\u70b9\u6570\u4e0d\u8d85\u8fc7\u70b9\u96c6\u672c\u8eab\u7684\u6570\u91cf\uff0c\u5219\u95ee\u9898\u4e00\u5b9a\u65e0\u89e3\uff0c\n\n\u56e0\u4e3a\u8fd9\u4e9b\u70b9\u96c6\u4e2d\u7684\u6bcf\u4e00\u4e2a\u90fd\u4f1a\u63d0\u4f9b\u4e00\u6761\u8fb9\uff0c\u800c\u4e0d\u8d85\u8fc7 $k$ \u4e2a\u70b9\u95f4\u5b58\u5728\u5171 $k$ \u6761\u8fb9\uff0c\u5c31\u4e00\u5b9a\u4f1a\u51fa\u73b0\u73af\u3002\n\n\u90a3\u4e48\uff0c\u95ee\u9898\u6709\u89e3\u7684\u5fc5\u8981\u6761\u4ef6\u5c31\u662f\uff0c\u5bf9\u4efb\u610f\u82e5\u5e72\u4e2a\u70b9\u96c6\uff0c\u90fd\u6709 $|E_1\\cup E_2\\cup\\cdots\\cup E_k|>k$\u3002\n\n\u800c\u6211\u4eec\u65ad\u8a00\uff0c\u5982\u679c\u6211\u4eec\u8dd1\u51fa\u7684\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u662f\u5b8c\u7f8e\u5339\u914d\uff0c\u5219\u8fd9\u4e2a\u5fc5\u8981\u6761\u4ef6\u5c31\u662f\u5145\u8981\u6761\u4ef6\u3002\n\n\uff08\u5f53\u7136\uff0c\u5982\u679c\u60a8\u5b66\u8fc7\u970d\u5c14\u5b9a\u7406\u7684\u8bdd\uff0c\u5c31\u4f1a\u77e5\u9053\uff0c\u6ee1\u8db3\u4e86\u8fd9\u4e2a\u5fc5\u8981\u6761\u4ef6\u540e\uff0c\u4e8c\u5206\u56fe\u4e00\u5b9a\u5b58\u5728\u5b8c\u7f8e\u5339\u914d\uff09\n\n\u5bf9\u4e0a\u9762\u7684\u65ad\u8a00\uff0c\u6211\u4eec\u8003\u8651\u7ed9\u51fa\u4e00\u7ec4\u6784\u9020\u6027\u8bc1\u660e\u3002\n\n\u9996\u5148\uff0c\u6211\u4eec\u627e\u5230\u8fd9\u68f5\u6811\u7684\u6839\uff0c\u5c31\u662f\u90a3\u4e2a\u5728\u4e8c\u5206\u56fe\u4e2d\u6ca1\u6709\u88ab\u5339\u914d\u5230\u7684\u70b9 $u$\uff0c\n\n\u5219\u5fc5\u7136\u5b58\u5728\u4e00\u70b9\u96c6 $E$ \u5305\u542b $u$\uff0c\u5426\u5219\u4f1a\u6709 $n-1$ \u4e2a\u70b9\u96c6\u5305\u542b\u5171 $n-1$ \u4e2a\u70b9\uff0c\u8fd9\u4e0e\u4e0a\u9762\u7684\u5fc5\u8981\u6761\u4ef6\u77db\u76fe\u3002\n\n\u6211\u4eec\u627e\u5230\u5728\u4e8c\u5206\u56fe\u4e2d\u4e0e $E$ \u7ec4\u6210\u5339\u914d\u7684\u70b9 $u_2$\uff0c\u6613\u77e5 $u_2\\ne u$\uff0c\u6211\u4eec\u5728\u6811\u4e2d\u628a $u_2$ \u7684\u7236\u4eb2\u8bbe\u7f6e\u6210 $u$ \u663e\u7136\u5408\u6cd5\u3002\n\n\u6b64\u65f6\uff0c\u5fc5\u7136\u5b58\u5728\u4e00\u70b9\u96c6 $E_2$ \u4e0e\u96c6\u5408 $\\left\\{u,u_2\\right\\}$ \u6709\u4ea4\uff0c\u5426\u5219\u4f1a\u6709 $n-2$ \u4e2a\u70b9\u96c6\u5305\u542b $n-2$ \u4e2a\u70b9\uff0c\u51fa\u73b0\u77db\u76fe\u3002\n\n\u90a3\u4e48\uff0c\u6211\u4eec\u518d\u6b21\u627e\u5230\u4e8c\u5206\u56fe\u4e2d\u4e0e $E_2$ \u5339\u914d\u7684\u70b9 $u_3$\uff0c\u5219\u56e0\u4e3a $E_2\\cap\\left\\{u,u_2\\right\\}\\ne\\varnothing$\uff0c\n\n\u6545\u6211\u4eec\u4e00\u5b9a\u80fd\u5728 $\\left\\{u,u_2\\right\\}$ \u4e2d\u627e\u5230\u4e00\u70b9\uff0c\u4f5c\u4e3a\u6811\u4e0a $u_3$ \u7684\u7236\u4eb2\u4e14\u5408\u6cd5\u3002 \n\n\u6211\u4eec\u518d\u4f9d\u6cd5\u70ae\u5236\uff0c\u4e0d\u505c\u7684\u505a\u4ee5\u524d\u7684\u64cd\u4f5c\uff0c\n\n\u5373\u901a\u8fc7\u4e0a\u9762\u7684\u5fc5\u8981\u6761\u4ef6\u6765\u8bf4\u660e\uff0c\u5b58\u5728\u65b0\u7684\u70b9\u96c6 $E_i$ \u4e0e $\\left\\{u,u_2,\\cdots u_{i}\\right\\}$ \u6709\u4ea4\uff0c\n\n\u6211\u4eec\u627e\u5230\u4e0e $E_i$ \u5339\u914d\u7684\u70b9 $u_{i+1}$\uff0c\u5e76\u7531 $E_i\\cap\\left\\{u,u_2,\\cdots u_{i}\\right\\}\\ne\\varnothing$ \u7684\u524d\u63d0\uff0c\n\n\u5fc5\u5b9a\u5b58\u5728 $v\\in\\left\\{u,u_2,\\cdots u_{i}\\right\\}$\uff0c\u6ee1\u8db3\uff1a\u5c06 $v$ \u4f5c\u4e3a $u_{i+1}$ \u5728\u6811\u4e0a\u7684\u7236\u4eb2\uff0c\u662f\u5408\u6cd5\u7684\u3002\n\n\u5982\u679c\u6b64\u65f6 $i=n$\uff0c\u5219\u6211\u4eec\u5c31\u6784\u9020\u51fa\u4e86\u4e00\u68f5\u5408\u6cd5\u7684\u6811\uff0c\u5426\u5219\u6211\u4eec\u5bf9 $\\left\\{u,u_2,\\cdots u_{i+1}\\right\\}$ \u7ee7\u7eed\u505a\u4ee5\u4e0a\u64cd\u4f5c\u3002\n\n\u8fd9\u6837\uff0c\u6211\u4eec\u5c31\u8bf4\u660e\u4e86\uff0c\u5982\u679c\u5efa\u51fa\u7684\u4e8c\u5206\u56fe\u7684\u6700\u5927\u5339\u914d\u662f\u5b8c\u7f8e\u5339\u914d\uff0c\n\n\u4e14\u7ed9\u51fa\u7684 $n-1$ \u4e2a\u70b9\u96c6\u6ee1\u8db3\uff0c\u5bf9\u4efb\u610f\u82e5\u5e72\u4e2a\u70b9\u96c6 $E_1,E_2,\\cdots E_k$\uff0c\u90fd\u6709 $|E_1\\cup E_2\\cup\\cdots\\cup E_k|>k$\uff0c\n\n\u5219\u4e00\u5b9a\u5b58\u5728\u4e00\u68f5\u5408\u6cd5\u7684\u6811\uff0c\u4e0e\u4e8c\u5206\u56fe\u7684\u5339\u914d\u5bf9\u5e94\u3002\n\n\u4e5f\u5c31\u662f\u8bf4\uff0c\u6b64\u65f6\u5b8c\u7f8e\u5339\u914d\u7684\u5177\u4f53\u5f62\u72b6\u5c31\u4e0d\u91cd\u8981\u4e86\uff0c\u5373\u4efb\u610f\u4e00\u7ec4\u5b8c\u7f8e\u5339\u914d\u90fd\u6709\u5bf9\u5e94\u7684\u5408\u6cd5\u89e3\u3002\n\n\u81f3\u6b64\uff0c\u6211\u4eec\u5bf9\u4e0d\u7528\u970d\u5c14\u5b9a\u7406\u7684\u505a\u6cd5\u7684\u6b63\u786e\u6027\u7684\u8bc1\u660e\u4e5f\u5c31\u7ed3\u675f\u4e86\u3002",
        "postTime": 1646191719,
        "uid": 100091,
        "name": "GaryH",
        "ccfLevel": 6,
        "title": "AGC029F \u9898\u89e3"
    },
    {
        "content": "\u6807\u7b7e: \u7f51\u7edc\u6d41, \u4e8c\u5206\u56fe\u5339\u914d.\n\n\u5bb9\u6613\u53d1\u73b0\u4e00\u4e2a\u6709\u89e3\u7684\u5fc5\u8981\u6761\u4ef6: \u53bb\u6389\u4efb\u610f\u4e00\u4e2a\u70b9, \u5269\u4e0b\u7684\u70b9\u548c\u8fb9\u53ef\u4ee5\u6784\u6210\u4e00\u4e2a\u5b8c\u7f8e\u5339\u914d, \u5e76\u4e14\u6bcf\u4e2a\u70b9\u5339\u914d\u7684\u8fb9\u90fd\u662f\u8fde\u7740\u8fd9\u4e2a\u70b9\u7684.\n\n\u6240\u4ee5\u6211\u4eec\u53bb\u6389\u67d0\u4e2a\u70b9(\u4e0d\u59a8\u53bb\u6389\u70b9 $n$ ), \u7528\u5269\u4e0b\u7684\u70b9\u548c**\u96c6\u5408**\u8dd1\u4e00\u4e2a\u4e8c\u5206\u56fe\u5339\u914d. \u6839\u636e\u7ed3\u679c\u7528\u4e00\u4e0b\u65b9\u5f0f\u6784\u9020: \u4ece $n$ \u5f00\u59cb bfs , \u679a\u4e3e\u6240\u6709\u4e0e\u5305\u542b\u5f53\u524d\u70b9 $u$ \u7684\u96c6\u5408\u4e14**\u672a\u4f7f\u7528\u8fc7**\u7684 $s$ , \u8fde\u63a5 $u$ \u548c $s$ \u5339\u914d\u7684\u70b9 $v$, \u6807\u8bb0 $s$ \u4e3a**\u4f7f\u7528\u8fc7**, \u5e76\u5c06 $v$ \u653e\u5165\u961f\u5217\u4e2d\u5373\u53ef.\n\n\u65f6\u95f4\u590d\u6742\u5ea6 $\\mathcal O(n\\sqrt n)$.\n\n```cpp \n#include <bits/stdc++.h>\nusing namespace std;\nint read();\nint n, s, t;\nint hd[400005], nx[1000006], to[1000006], c[1000006], cnt;\nvoid add(int f, int t, int cap) {\n    nx[++cnt] = hd[f], hd[f] = cnt, to[cnt] = t, c[cnt] = cap;\n}\nvoid fadd(int f, int t, int c) { add(f, t, c), add(t, f, 0); }\n\nint dep[400005];\nqueue<int> q;\nbool bfs() {\n    for (int i = 1; i <= t; ++i) dep[i] = 0;\n    dep[s] = 1, q.push(s);\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int i = hd[u], v; i; i = nx[i]) {\n            if (!c[i] || dep[v = to[i]]) continue;\n            dep[v] = dep[u] + 1, q.push(v);\n        }\n    }\n    return dep[t];\n}\n\nint iter[400005];\nint dfs(int u, int dist) {\n    if (u == t) return dist;\n    for (int &i = iter[u], v, d; i; i = nx[i]) {\n        if (!c[i] || dep[v = to[i]] != dep[u] + 1) continue;\n        if (d = dfs(v, min(dist, c[i]))) return c[i] -= d, c[i ^ 1] += d, d;\n    }\n    return 0;\n}\nint Dinic() {\n    int rt = 0, d;\n    while (bfs()) {\n        for (int i = 1; i <= t; ++i) iter[i] = hd[i];\n        while (d = dfs(s, 10000000)) rt += d;\n    }\n    return rt;\n}\n\nvector<int> e[400005];\nint p[400005];\nstruct Res {\n    int u, v;\n} res[400005];\nbool get_res() {\n    for (int u = 1; u < n; ++u)\n        for (int i = hd[u]; i; i = nx[i])\n            if (to[i] != s && c[i] == 0) p[u] = to[i] - n + 1;\n\n    int sum = 0;\n    q.push(n);\n    while (!q.empty()) {\n        int u = q.front();\n        ++sum, q.pop();\n        for (int i = 0, v; i < e[u].size(); ++i)\n            if (p[v = e[u][i]]) res[v] = (Res){u, p[v]}, q.push(p[v]), p[v] = 0;\n    }\n    return sum == n;\n}\n\nint main() {\n    n = read(), s = 2 * n - 1, t = 2 * n, cnt = 1;\n    for (int i = 1; i < n; ++i) fadd(i + n - 1, t, 1);\n    for (int i = 1, c, u; i < n; ++i) {\n        c = read(), fadd(s, i, 1);\n        while (c--) {\n            if ((u = read()) != n) fadd(i, u + n - 1, 1);\n            e[u].push_back(i);\n        }\n    }\n    if (Dinic() < n - 1) return puts(\"-1\"), 0;\n    if (!get_res()) return puts(\"-1\"), 0;\n\n    for (int i = 1; i < n; ++i) printf(\"%d %d\\n\", res[i].u, res[i].v);\n\n    return 0;\n}\nconst int _SIZE = 1 << 22;\nchar ibuf[_SIZE], *iS = ibuf, *iT = ibuf;\n#define gc                                                         \\\n    (iS == iT ? iT = ((iS = ibuf) + fread(ibuf, 1, _SIZE, stdin)), \\\n     (iS == iT ? EOF : *iS++) : *iS++)\nint read() {\n    int x = 0, f = 1;\n    char c = gc;\n    while (!isdigit(c)) f = (c == '-') ? -1 : f, c = gc;\n    while (isdigit(c)) x = x * 10 + c - '0', c = gc;\n    return x * f;\n}\n```\n\n",
        "postTime": 1582119130,
        "uid": 51237,
        "name": "Kinandra",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT4505 \u3010[AGC029F] Construction of a tree\u3011"
    },
    {
        "content": "\u795e\u9898\u554a\u2026\n\n\u5148\u641e\u6389\u4e00\u4e2a\u70b9\u3002\n\n\u8003\u8651\u7b80\u5355\u7684\u7f51\u7edc\u6d41\u5efa\u4e2a\u6a21\u578b\u3002\n\n$S \\to i \\to nodes \\in set(i) \\to T$\u3002\n\n\u8dd1\u4e00\u904d\u7f51\u7edc\u6d41\uff0c\u5982\u679c\u6d41\u91cf\u4e0d\u662f $n - 1$\uff0c\u90a3\u4e48\u65e0\u89e3\u3002\n\n\u8fd9\u4e2a\u663e\u7136\u3002\n\n\u7136\u540e\u63a5\u4e0b\u6765\u662f\u5f04\u4e00\u4e2a\u89e3\u7684\u60c5\u51b5\u3002\n\n\u6211\u4eec\u5df2\u7ecf\u77e5\u9053\u600e\u4e48\u9009\u53ef\u4ee5\u9009\u51fa\u6765\u82e5\u5e72\u4e2a\u70b9\u4e86\uff0c\u4e14\u5206\u5e03\u4e8e\u6bcf\u4e00\u4e2a\u96c6\u5408\u4e86\u3002\n\n\u7136\u540e\u6211\u4eec\u4ece $n$ \u51fa\u53d1\uff0c\u987a\u7740\u8fd9\u4e2a\u70b9\u4e00\u76f4 bfs \u5c31\u53ef\u4ee5\u5f04\u51fa\u4e00\u4e2a\u89e3\u4e86\u3002\n\n\u53ef\u4ee5\u8bc1\u660e\u5176\u6b63\u786e\u6027\u3002\n\n```cpp\n/*\n _      _  _ _ _ _ _   _      _\n\\_\\   /_/ \\_\\_\\_\\_\\_\\ \\_\\   /_/\n \\_\\ /_/      \\_\\      \\_\\ /_/\n  \\_\\_/       \\_\\       \\_\\_/\n   \\_\\         \\_\\       \\_\\\n   \\_\\     \\_\\ \\_\\       \\_\\\n   \\_\\      \\_\\\\_\\       \\_\\\n*/\n#include <bits/stdc++.h>\n#define rep(i,x,y) for(int i=x;i<=y;i++)\n#define rp(i,y) for(int i=1;i<=y;i++)\n#define per(i,x,y) for(int i=x;i>=y;i--)\n#define pr(i,y) for(int i=y;i>=1;i--)\n#define sz(v) (int)v.size()\nusing namespace std;\nconst int SIZE=1<<26;\nchar gc[SIZE],*pgc=gc;\nchar pc[SIZE],*ppc=pc;\nclock_t clk=clock();\nstruct flusher{\n\tflusher(){\n#ifdef WHX_TXDY\n\t\tfreopen(\"fuck.in\",\"r\",stdin);\n#endif\n\t\tfread(gc,true,SIZE,stdin);\n\t}\n\t~flusher(){\n\t\tfwrite(pc,true,ppc-pc,stdout);\n#ifdef WHX_TXDY\n\t\tstd::cerr<<\"TIME:\"<<(clock()-clk)/1000.<<\"s\\n\";\n#endif\n\t}\n}Flusher;\nint _Neg=0;\ntemplate<class T>\nvoid rd(T&x){\n\tx=_Neg=0;\n\twhile(!isdigit(*pgc)){\n\t\tif((*pgc++)=='-'){\n\t\t\t_Neg=1;\n\t\t}\n\t}\n\twhile(isdigit(*pgc)){\n\t\tx=x*10+*pgc++-48;\n\t}\n\tif(_Neg){\n\t\tx=-x;\n\t}\n}\nint _Stk[233],_Top=0;\ntemplate<class T>\nvoid pt(T x,char c='\\n'){\n\tif(x<0){\n\t\t*ppc++='-';\n\t\tx=-x;\n\t}\n\tdo{\n\t\t_Stk[++_Top]=x%10;\n\t\tx/=10;\n\t}while(x);\n\twhile(_Top){\n\t\t*ppc++=_Stk[_Top--]+48;\n\t}\n\t*ppc++=c;\n}\nvoid pts(const string&str){\n\tint len=sz(str);\n\trep(i,0,len-1){\n\t\t*ppc++=str[i];\n\t}\n\t*ppc++='\\n';\n}\ntemplate<class T>\nvoid cmax(T&x,const T&y){\n\tx=(x>y)?x:y;\n}\ntemplate<class T>\nvoid cmin(T&x,const T&y){\n\tx=(x<y)?x:y;\n}\n\nstruct edge{\n\tint v, nxt, w;\n\t\n\tedge() {\n\t\tv = 0;\n\t\tnxt = 0;\n\t\tw = 0;\n\t}\n\t\n\tedge(int _, int __, int ___) {\n\t\tv = _;\n\t\tnxt = __;\n\t\tw = ___;\n\t}\n};\n\nconst int N = 2e5 + 5;\nconst int M = 4e5 + 5;\nedge e[M << 1];\nint head[N];\n\nvoid add(int u, int v, int w) {\n\tstatic int cnt = 1;\n\te[++cnt] = edge(v, head[u], w); head[u] = cnt;\n}\nvoid addedge(int u, int v) { add(u, v, 1); add(v, u, 0); }\nint s, t;\nint d[N];\nbool bfs() {\n\tmemset(d, 0, sizeof d);\n\tqueue<int> q; q.push(s); d[s] = 1;\n\twhile (!q.empty()) {\n\t\tint u = q.front(); q.pop();\n\t\tif (u == t) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (int i = head[u]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].v;\n\t\t\tif (!d[v] && e[i].w) {\n\t\t\t\td[v] = d[u] + 1; q.push(v);\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n}\nint cur[N];\nint dfs(int u, int flow) {\n\tif (u == t) {\n\t\treturn flow;\n\t}\n\tint s = 0;\n\tfor (int &i = cur[u]; i; i = e[i].nxt) {\n\t\tint v = e[i].v;\n\t\tif (d[v] == d[u] + 1) {\n\t\t\tint gt = dfs(v, std::min(flow, e[i].w));\n\t\t\te[i].w -= gt; e[i ^ 1].w += gt;\n\t\t\tflow -= gt; s += gt;\n\t\t\tif (!flow) {\n\t\t\t\treturn s;\n\t\t\t}\n\t\t}\n\t}\n\treturn s;\n}\nint dinic() {\n\tint ans = 0;\n\twhile (bfs()) {\n\t\tmemcpy(cur, head, sizeof cur);\n\t\tans += dfs(s, 1 << 30);\n\t}\n\treturn ans;\n}\nint n;\nvector<unordered_set<int> > g;\nint p[N];\npair<int, int> ans[N];\nvoid link(int cl, int u, int v) { ans[cl] = std::make_pair(u, v); }\nbool get() {\n\trp (u, n - 1) {\n\t\tfor (int i = head[u]; i; i = e[i].nxt) {\n\t\t\tint v = e[i].v;\n\t\t\tif (v != s && e[i].w == 0) { p[u] = v - n + 1; }\n\t\t}\n\t}\n\tint node_cnt = 0; queue<int> q; q.push(n);\n\twhile (!q.empty()) {\n\t\tint u = q.front(); q.pop(); ++node_cnt;\n\t\tfor (auto v : g[u]) {\n\t\t\tif (p[v]) { link(v, u, p[v]); q.push(p[v]); p[v] = 0; }\n\t\t}\n\t}\n\treturn node_cnt == n;\n}\nint main() {\n\trd(n);\n\ts = n * 2 - 1, t = n * 2; g.resize(n + 1);\n\trp (i, n - 1) { addedge(i + n - 1, t); }\n\trp (i, n - 1) {\n\t\tint c; rd(c); addedge(s, i);\n\t\twhile (c--) {\n\t\t\tint x; rd(x);\n\t\t\tif (x != n) { addedge(i, x + n - 1); }\n\t\t\tg[x].emplace(i);\n\t\t}\n\t}\n\tif (dinic() < n - 1) { pts(\"-1\"); exit(0); }\n\tif (!get()) { pts(\"-1\"); exit(0); }\n\trp (i, n - 1) {\n\t\tint u, v; u = ans[i].first; v = ans[i].second;\n\t\tpt(u, ' '), pt(v);\n\t}\n\treturn 0;\n}\n```",
        "postTime": 1605871421,
        "uid": 96580,
        "name": "SXNhdW5veWE",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT4505 \u3010[AGC029F] Construction of a tree\u3011"
    }
]