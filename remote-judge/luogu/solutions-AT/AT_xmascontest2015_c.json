[
    {
        "content": "[Blog \u98df\u7528\u6548\u679c\u66f4\u4f73](https://autumnkite.github.io/atcoder-xmas15C-sol/)\n\n\n[\u9898\u76ee\u4f20\u9001\u95e8](https://atcoder.jp/contests/xmascontest2015noon/tasks/xmascontest2015_c)\n\n## \u9898\u610f\n\n\u8fd9\u662f\u4e00\u9053\u4ea4\u4e92\u9898\u3002\n\n\u4ea4\u4e92\u5e93\u4e2d\u751f\u6210\u4e86\u4e00\u4e2a $n\\times m$ \u7684\u6bcf\u4e2a\u683c\u5b50\u6709\u989c\u8272\u7684\u77e9\u9635\u3002\u989c\u8272\u53ef\u4ee5\u6709\u4efb\u610f\u591a\u79cd\u3002\u7ed9\u5b9a\u7684\u662f $n,m$\u3002\u8bb0\u77e9\u9635\u4e2d\u7b2c $x$ \u884c\u7b2c $y$ \u5217\u7684\u989c\u8272\u4e3a $col(x,y)$\uff08\u77e9\u9635\u7684\u884c\u5217\u4e0b\u6807\u4ece $1$ \u5f00\u59cb\uff09\u3002\n\n\u4f60\u53ef\u4ee5\u8fdb\u884c\u8be2\u95ee\uff0c\u8be2\u95ee\u7684\u683c\u5f0f\u662f `? x1 y1 x2 y2`\uff0c\u4ea4\u4e92\u5e93\u4f1a\u544a\u8bc9\u4f60 $col(x1,y1)=col(x2,y2)$ **\u5e76\u4e14** $col(x1,y2)=col(x2,y1)$ \u662f\u5426\u6210\u7acb\u3002\u8be2\u95ee\u6b21\u6570\u4e0d\u80fd\u8d85\u8fc7 $4\\,500$\u3002\n\n\u6700\u540e\u4f60\u5e94\u8be5\u8f93\u51fa `! ans`\uff0c$ans$ \u8868\u793a\u4e2d\u5fc3\u5bf9\u79f0\u7684\u5b50\u77e9\u9635\u7684\u6570\u91cf\u3002\n\n$n\\le 5,m\\le 100$\n\n## \u9898\u89e3\n\n![](https://autumnkite.github.io/files/at-xmas15c-pic1.png)\n\n\u4e0a\u56fe\u8fd9\u4e2a\u77e9\u9635\u5982\u679c\u662f\u4e2d\u5fc3\u5bf9\u79f0\u7684\uff0c\u90a3\u4e48 $A$ \u53cd\u8f6c\u4e00\u4e0b\u4e00\u5b9a\u4e0e $B$ \u76f8\u7b49\uff0c\u4e14 $C$ \u4e5f\u662f\u4e2d\u5fc3\u5bf9\u79f0\u7684\u3002\n\n\u90a3\u4e48\u8003\u8651 $A,B$ \u4e24\u884c\uff0c\u8bbe\u4ed6\u4eec\u7684\u884c\u53f7\u5206\u522b\u4e3a $i,j$\uff0c\u4e2d\u95f4\u4f4d\u7f6e\u4e3a $k$\uff0c\u4e24\u8fb9\u4e3a $l,r$\uff0c\u90a3\u4e48 $A$ \u53cd\u8f6c\u4e00\u4e0b\u4e0e $B$ \u76f8\u7b49\u53ef\u4ee5\u8f6c\u5316\u6210 $\\forall 0\\le x\\le k-l,col(i,k-x)=col(j,k+x)\\text{ and }col(i,k+x)=col(j,k-x)$\u3002\u8fd9\u4e2a\u4e0e\u8be2\u95ee\u7684\u683c\u5f0f\u5c31\u4e00\u6837\u4e86\u3002\n\n\u5e76\u4e14\u53ef\u4ee5\u53d1\u73b0\uff0c\u8fd9\u662f\u4e00\u4e2a\u201c\u7c7b\u56de\u6587\u201d\u7684\u5f62\u5f0f\uff0c\u6240\u4ee5\u53ef\u4ee5\u7528 manacher \u89e3\u51b3\uff0c\u8fd9\u6837\u5c31\u53ef\u4ee5\u51cf\u5c11\u8be2\u95ee\u6b21\u6570\u3002\u4e3a\u4e86\u89e3\u51b3\u5947\u5076\u6027\u95ee\u9898\uff0c\u53ef\u4ee5\u5f53\u4f5c\u628a\u6bcf\u884c\u6269\u5c55\u4e00\u500d\uff0c\u5728\u76f8\u90bb\u4e24\u4e2a\u683c\u5b50\u4e4b\u95f4\u63d2\u5165\u5176\u4ed6\u5b57\u7b26\uff0c\u6ce8\u610f\u8be2\u95ee\u65f6\u5019\u8981\u53d8\u56de\u539f\u6765\u7684\u4e0b\u6807\u3002\n\n\u5c31\u662f\u8bf4\uff0c\u5bf9\u4e8e\u4efb\u610f\u4e24\u884c $i,j(1\\le i\\le j\\le n)$\uff0c\u6c42\u51fa\u6bcf\u5217\u5411\u5de6\u53f3\u53ef\u4ee5\u6269\u5c55\u7684\u6700\u591a\u7684\u5217\u6570\u3002\u7136\u540e\u679a\u4e3e\u77e9\u9635\u7684\u4e0a\u4e0b\u4e24\u884c\u548c\u5bf9\u79f0\u4e2d\u5fc3\u6240\u5728\u7684\u5217\u6570\uff0c\u6c42\u51fa\u5728\u8be5\u6761\u4ef6\u4e0b\u7684\u6781\u5927\u4e2d\u5fc3\u5bf9\u79f0\u7684\u77e9\u9635\u7684\u5217\u6570\uff0c\u7136\u540e\u76f4\u63a5\u7edf\u8ba1\u3002\n\n\u53ef\u4ee5\u7528 map \u51cf\u5c11\u4e00\u5b9a\u91cf\u7684\u8be2\u95ee\u6b21\u6570\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <cstdio>\n#include <algorithm>\n#include <map>\nint n, m, len[6][6][205];\nstruct node{\n\tint a, b, c, d;\n\tbool operator < (const node &res) const {\n\t\treturn a < res.a || (a == res.a && b < res.b) || (a == res.a && b == res.b && c < res.c) || (a == res.a && b == res.b && c == res.c && d < res.d);\n\t}\n};\nstd :: map<node, int> M;\nbool check(int x1, int y1, int x2, int y2){\n\tif (x1 > x2 || y1 > y2 || x1 < 1 || x2 > n || y1 < 1 || y2 > (m >> 1)) return 0;\n\tif (x1 == x2 && y1 == y2) return 1;\n\tif (M.count((node){x1, y1, x2, y2})) return M[(node){x1, y1, x2, y2}];\n\tprintf(\"? %d %d %d %d\\n\", x1, y1, x2, y2), fflush(stdout);\n\tchar opt[5];\n\tscanf(\"%s\", opt);\n\treturn M[(node){x1, y1, x2, y2}] = (opt[0] == 'y');\n}\nvoid manacher(int x, int y, int *hw){\n\tint mr = 0, mid = 0, n = m;\n\thw[0] = 1;\n\tfor (register int i = 1; i <= n; ++i){\n\t\thw[i] = i <= mr ? std :: min(hw[(mid << 1) - i], mr - i + 1) : 0;\n\t\tif (i + hw[i] <= mr) continue;\n\t\twhile ((i - hw[i]) % 2 == 0 || check(x, (i - hw[i] + 1) / 2, y, (i + hw[i] + 1) / 2)) ++hw[i];\n\t\tif (i + hw[i] - 1 > mr) mid = i, mr = i + hw[i] - 1;\n\t}\n}\nint main(){\n\tscanf(\"%d%d\", &n, &m);\n\tm <<= 1;\n\tfor (register int i = 1; i <= n; ++i)\n\t\tfor (register int j = i; j <= n; ++j)\n\t\t\tmanacher(i, j, len[i][j]);\n\tint ans = 0;\n\tfor (register int i = 1; i <= n; ++i)\n\t\tfor (register int j = i; j <= n; ++j)\n\t\t\tfor (register int k = 1; k <= m; ++k){\n\t\t\t\tint s = 1e9;\n\t\t\t\tfor (register int l = i, r = j; l <= r; ++l, --r)\n\t\t\t\t\ts = std :: min(s, len[l][r][k]);\n\t\t\t\tans += s >> 1;\n\t\t\t}\n\tprintf(\"! %d\\n\", ans), fflush(stdout);\n}\n```\n",
        "postTime": 1558187923,
        "uid": 20561,
        "name": "AutumnKite",
        "ccfLevel": 10,
        "title": "\u300cAT1735\u300d\u300cXmas Contest 2015\u300dColored Tiles"
    }
]