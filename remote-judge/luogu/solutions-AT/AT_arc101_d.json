[
    {
        "content": "\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c\uff1a<https://www.cnblogs.com/DreamsChaser/p/15272849.html>\n\n$\\large\\mathcal{Description}$\n\n\u5728\u4e00\u4e2a\u6570\u8f74\u4e0a\u6709 $n$ \u4e2a $\\texttt{robot}$ \u548c $m$ \u4e2a $\\texttt{exit}$.\n\n\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u628a\u6240\u6709 $\\texttt{robot}$ \u540c\u65f6\u5411\u5de6\u6216\u5411\u53f3\u79fb\u52a8 $1$ \u4e2a\u5355\u4f4d\u957f\u5ea6\uff0c\u5f53\u4e00\u4e2a $\\texttt{robot}$ \u9047\u5230\u4e86\u4e00\u4e2a $\\texttt{exit}$, \u5b83\u5c31\u4f1a\u6e9c\u8d70\u3002\u6240\u6709 $\\texttt{robot}$ \u6e9c\u8d70\u4e4b\u540e\u505c\u6b62\u64cd\u4f5c\u3002\n\n\u6c42 $\\texttt{robot}$ \u4ece $\\texttt{exit}$ \u6e9c\u8d70\u7684\u65b9\u6848\u6570\u3002\u4e24\u4e2a\u65b9\u6848\u4e0d\u540c\uff0c\u5f53\u4e14\u4ec5\u5f53\u5b58\u5728\u81f3\u5c11\u4e00\u4e2a $\\texttt{robot}$ \u4ece\u4e0d\u540c\u7684 $\\texttt{exit}$ \u6e9c\u8d70\u3002\n\n\u7b54\u6848\u5bf9 $10^9+7$ \u53d6\u6a21\uff0c$n, m\\le 10^5.$\n\n$\\large\\mathcal{Solution}$\n\n\u9996\u5148\u6211\u4eec\u53ef\u4ee5\u4e0d\u7ba1\u6bd4\u6700\u5de6\u8fb9 $\\texttt{exit}$ \u8fd8\u5de6\u8fb9\u7684 $\\texttt{robot}$, \u56e0\u4e3a\u5b83\u4e00\u5b9a\u4ece\u6700\u5de6\u8fb9 $\\texttt{exit}$ \u6e9c\u8d70\uff0c\u5bf9\u7b54\u6848\u6ca1\u6709\u5f71\u54cd\u3002\u540c\u7406\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4e0d\u7ba1\u6bd4\u6700\u53f3\u8fb9 $\\texttt{exit}$ \u8fd8\u53f3\u8fb9\u7684 $\\texttt{robot}$.\n\n\u6211\u4eec\u73b0\u5728\u5355\u72ec\u62ce\u51fa\u4e00\u4e2a $\\texttt{robot}$ \u8fdb\u884c\u7814\u7a76\u3002\u6211\u4eec\u53d1\u73b0\u53ea\u6709\u6539\u53d8\u4ed6\u5411\u5de6\u6216\u5411\u53f3\u7684\u6700\u5927\u503c\u7684\u64cd\u4f5c\u624d\u5bf9\u8fd9\u4e2a $\\texttt{robot}$ \u6709\u6548\u679c\u3002\u6240\u4ee5\u6211\u4eec\u5982\u679c\u628a\u8fd9\u4e2a $\\texttt{robot}$ \u5411\u5de6\u548c\u5411\u53f3\u7684\u6700\u5927\u503c\u4f5c\u4e3a\u4e00\u4e2a\u5e73\u9762\u5750\u6807\u7684\u4e24\u7ef4\u7684\u8bdd\uff0c\u5b83\u7684\u521d\u59cb\u503c\u662f $(0, 0)$, \u7136\u540e\u4e0d\u65ad\u5730\u5411\u4e0a\u3001\u5411\u53f3\u5ef6\u4f38\u3002\n\n\u5176\u5b9e\u6240\u6709 $\\texttt{robot}$ \u7684\u66f2\u7ebf\u90fd\u957f\u4e00\u4e2a\u6837\u5bf9\u5427\u3002\n\n\u90a3\u4e00\u4e2a $\\texttt{robot}$ \u4f55\u65f6\u6e9c\u8d70\u5462\uff1f\u662f\u4e0d\u662f\u5f53\u4ed6\u78b0\u5230\u4e86\u4e00\u4e2a $\\texttt{exit}$ \u7684\u65f6\u5019\u3002\u4e5f\u5c31\u662f\u8bf4\uff0c\u6211\u4eec\u8bbe\u521d\u59cb\u65f6\u7b2c $i$ \u4e2a $\\texttt{robot}$ \u8ddd\u79bb\u79bb\u5b83\u6700\u8fd1\u7684\u4e24\u8fb9\u7684 $\\texttt{exit}$ \u7684\u8ddd\u79bb\u5206\u522b\u662f $a_i, b_i$. \u7136\u540e\u8fd9\u6761\u66f2\u7ebf\u78b0\u5230 $x=a_i$ \u6216 $y=b_i$ \u7684\u65f6\u5019\u5b83\u5c31\u63a8\u51fa\u5386\u53f2\u7684\u821e\u53f0\u4e86\u3002\n\n\u800c\u4e14\u7b54\u6848\u53ea\u53d6\u51b3\u4e8e\u66f2\u7ebf\u5148\u78b0\u5230 $x=a_i$ \u8fd8\u662f $y=b_i$.\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/ywuv040u.png)\n\n\u5982\u679c\u5c06 $\\texttt{robot}$ \u7684\u5de6\u6807\u5b9a\u4e49\u4e3a $(a_i-0.5, b_i-0.5)$. \u90a3\u4e48\u6240\u6709\u5728\u66f2\u7ebf\u5de6\u4e0a\u65b9\u7684 $\\texttt{robot}$ \u90fd\u4f1a\u4ece\u5de6\u4fa7\u7684 $\\texttt{exit}$ \u6e9c\u8d70\uff0c\u5728\u66f2\u7ebf\u53f3\u4e0b\u65b9\u7684 $\\texttt{robot}$ \u90fd\u4f1a\u4ece\u53f3\u4fa7\u7684 $\\texttt{exit}$ \u6e9c\u8d70\u3002\n\n\u5bf9\u4e8e\u6bcf\u4e2a\u4ece\u53f3\u4fa7 $\\texttt{exit}$ \u6e9c\u8d70\u7684 $\\texttt{robot}$ \u7684\u96c6\u5408, \u5bb9\u6613\u6784\u9020\u51fa\u4e0e\u4e4b\u552f\u4e00\u5bf9\u5e94\u7684\u6298\u7ebf\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5zungbtb.png)\n\n\u611f\u6027\u7406\u89e3\u4e00\u4e0b\uff0c\u5c31\u662f\u5361\u5728\u6bcf\u4e2a $\\texttt{robot}$ \uff08\u79f0\u4e3a $\\texttt{BR}$\uff09\u7684\u76f4\u7ebf\u3002\u53cd\u4e4b\u5982\u679c\u4e0d\u80fd\u8fd9\u6837\u6784\u9020\u76f4\u7ebf\uff0c\u6211\u4eec\u4e5f\u53ef\u4ee5\u4fdd\u8bc1\u4e0d\u5b58\u5728\u76f4\u7ebf\u4f7f\u5f97\u8fd9\u4e9b $\\texttt{robot}$ \u90fd\u5728\u53f3\u4e0b\u65b9\u3002\n\n\u90a3\u4e48\u65b9\u6848\u6570\u5c31\u7b49\u4e8e\u8fd9\u6837\u7684\u76f4\u7ebf\u7684\u4e2a\u6570\u3002\u4ee4 $f_i$ \u8868\u793a\u5ef6\u4f38\u5230\u7b2c $i$ \u4e2a\u673a\u5668\u4eba\u4e14\u8fd9\u662f\u4e2a $\\texttt{BR}$. \u8f6c\u79fb\u65b9\u7a0b\u663e\u7136\uff1a\n\n$$f_i=\\sum_{a_j<a_i,\\ b_j<b_i}f_j+1$$\n\n\u7136\u540e\u8fd9\u662f\u4e00\u4e2a $\\mathcal{O}(n^2)$ \u7684\u8f6c\u79fb\u5f0f\uff0c\u663e\u7136\u662f\u4e2a\u4e8c\u7ef4\u504f\u5e8f\u95ee\u9898\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u5c06\u5176\u4f18\u5316\u6210 $\\mathcal{O}(n\\log n)$.\n\n$\\large\\mathcal{Code}$\n\n```cpp\nconst int N = 100010, mod = 1000000007;\n\nint n, m, a[N], b[N], Max, dc[N];\npair<int, int> node[N];\n\nstruct BIT // \u6811\u72b6\u6570\u7ec4\n{\n    int c[N];\n    void add(reg int x, reg int d) {for (; x <= Max; x += (x & (-x))) c[x] = (c[x] + d) % mod;}\n    int ask(reg int x) {reg int sum = 0; for (; x; x -= (x & (-x))) sum = (sum + c[x]) % mod; return sum;}\n} S;\n\nint main()\n{\n    scanf(\"%d %d\", &n, &m);\n    for (reg int i = 1; i <= n; ++ i) scanf(\"%d\", &a[i]);\n    for (reg int i = 1; i <= m; ++ i) scanf(\"%d\", &b[i]);\n    \n    reg int tot = 0;\n    for (reg int i = 1; i <= n; ++ i)\n    {\n        reg int pos = lower_bound(b + 1, b + m + 1, a[i]) - b;\n        if (pos == 1 || pos > m) continue;\n        node[ ++ tot] = make_pair(a[i] - b[pos - 1], - (b[pos] - a[i]));\n        dc[tot] = -node[tot].second;\n    }\n\n    // \u79bb\u6563\u5316\n    \n    sort(node + 1, node + tot + 1);\n    for (reg int i = 1; i <= n; ++ i) node[i].second *= -1;\n    sort(dc + 1, dc + tot + 1);\n    Max = unique(dc + 1, dc + tot + 1) - dc;\n    for (reg int i = 1; i <= tot; ++ i) node[i].second = lower_bound(dc + 1, dc + Max, node[i].second) - dc + 1;\n\n    // DP\n    \n    S.add(1, 1);\n    for (reg int i = 1; i <= tot; ++ i)\n    {\n        if (node[i].first == node[i - 1].first && node[i].second == node[i - 1].second) continue;\n        reg int t = S.ask(node[i].second - 1);\n        S.add(node[i].second, t);\n    }\n    \n    printf(\"%d\\n\", S.ask(Max));\n    \n    return 0;\n}\n",
        "postTime": 1633006505,
        "uid": 425646,
        "name": "DreamsChaser",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 \u3010AT4353 [ARC101D] Robots and Exits\u3011"
    },
    {
        "content": "\u76f4\u89c2\u611f\u53d7\u662f\uff0c\u8003\u8651\u5939\u5728 $[L,R]$ \u4e24\u6d1e\u5185\u90e8\u7684\u70b9\uff0c\u663e\u7136\u5728\u5de6\u8fb9\u7684\u70b9\u5982\u679c\u8981\u4ece\u53f3\u8fb9\u7684\u6d1e\u51fa\u53bb\uff0c\u90a3\u4e48\u5728\u5176\u53f3\u8fb9\u7684\u5176\u4ed6\u70b9\u4e5f\u5fc5\u987b\u4ece\u53f3\u8fb9\u7684\u6d1e\u51fa\u53bb\u3002\n\n\u6b63\u786e\u63cf\u8ff0\u51fa\u6765\u662f\uff0c\u6ee1\u8db3 $[L<i<j<R]$ \u7684\u70b9\u5bf9 $(i,j)$\uff0c\u5982\u679c $i$ \u4ece R \u51fa\u6765\uff0c\u90a3\u4e48 $j$ \u4ece R \u5904\u51fa\u6765\u3002\n\n\u6211\u4eec\u53d1\u73b0\u8fd9\u4f3c\u4e4e\u610f\u5473\u7740\u5982\u679c $j$ \u5230 R \u7684\u8ddd\u79bb\u6bd4 $i$ \u5c0f\uff0c\u4e14 $j$ \u5230 L \u7684\u8ddd\u79bb\u6bd4 $i$ \u5927\u90a3\u4e48 $i$ \u4ece R \u51fa\u6765\u610f\u5473\u7740 $j$ \u4ece R \u51fa\u6765\u3002\n\n\u7528 $l_i,r_i$ \u5206\u522b\u8868\u793a\u70b9 $i$ \u5230\u4e24\u8fb9\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u4e00\u4e2a\u70b9\u53ef\u4ee5\u88ab\u4e00\u4e2a\u4e8c\u5143\u7ec4 $(l_i,r_i)$ \u63cf\u8ff0\u3002\n\n\u6ce8\u610f\u5230\u6211\u4eec\u5b9e\u9645\u4e0a\u53ea\u5173\u6ce8\u5411\u5de6/\u5411\u53f3\u8d70\u8fc7\u7684\u5386\u53f2\u6700\u8fdc\u8ddd\u79bb\uff0c\u6240\u4ee5\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u770b\u4f5c\u662f\u7ed9\u5386\u53f2\u6700\u8fdc\u8ddd\u79bb$+1$\uff08\u5426\u5219\u64cd\u4f5c\u65e0\u6548\uff09\u7136\u540e\u5982\u679c\u6ee1\u8db3\u5f53\u524d $(L,R)$ \u6709\u4e00\u4e2a\u6bd4 $(l_i,r_i)$ \u5927\uff0c\u90a3\u4e48\u8fd9\u4e2a\u70b9\u5c31\u4f1a\u4ece\u90a3\u4e2a\u65b9\u5411\u7684\u6d1e\u51fa\u53bb\u3002\n\n\u5c06\u6240\u6709\u4e8c\u5143\u7ec4\u6309\u7167 $l_i$ \u6392\u5e8f\uff0c\u7136\u540e\u4ee4 0 \u8868\u793a\u8fd9\u4e2a\u70b9\u4ece $l_i$ \u51fa\u53bb\uff0c1 \u8868\u793a\u8fd9\u4e2a\u70b9\u4ece $r_i$ \u51fa\u53bb\uff0c\u6211\u4eec\u53d1\u73b0\u6211\u4eec\u5b9e\u9645\u4e0a\u662f\u8981\u6c42\u6709\u591a\u5c11\u4e2a 01 \u5e8f\u5217\u5408\u6cd5\uff0c\u800c\u5408\u6cd5\u7684\u552f\u4e00\u5224\u5b9a\u6761\u4ef6\u4e3a\uff1a\n\n- \u82e5 $l_i\\le l_j$\uff0c\u4e14 $r_i\\ge r_j$\uff0c\u90a3\u4e48\u5982\u679c $i$ \u4e3a $1$ \uff0c\u5219 $j$ \u4e3a $1$\u3002\u53e6\u4e00\u9762\u7c7b\u4f3c\u3002\n\n\u7531\u4e8e\u6211\u4eec\u6309\u7167\u4e86 $l_i$ \u8fdb\u884c\u6392\u5e8f\uff0c\u6240\u4ee5\u6211\u4eec\u76f8\u5f53\u4e8e\u6d88\u9664\u4e86\u4e00\u4e2a\u9650\u5236\uff0c\u5bf9\u4e8e $l$ \u76f8\u540c\u7684\u70b9\u6211\u4eec\u6309\u7167 $r_i$ \u8fdb\u884c\u6392\u5e8f\uff0c\u90a3\u4e48\u95ee\u9898\u7b49\u4ef7\u4e8e\u5982\u679c $i<j$ \u4e14 $r_i>r_j$ \u5219\u82e5 $i$ \u4e3a $1$ \u5219 $j$ \u4e3a $1$\uff0c\u6c42\u5408\u6cd5\u7684 01 \u5e8f\u5217\u6570\u3002\n\n\u6211\u4eec\u8003\u8651\u628a\u672a\u88ab\u9650\u5236\u800c\u81ea\u4e3b\u9009\u62e9\u4e86 1 \u7684\u70b9\u62ce\u51fa\u6765\uff0c\u8fd9\u6837\u53ef\u4ee5\u770b\u4f5c\u662f\u9009\u62e9\u4e00\u4e2a\u539f\u5e8f\u5217\u7684\u5b50\u5e8f\u5217\u4e14\u5176\u5408\u6cd5\uff0c\u800c\u5408\u6cd5\u7b49\u4ef7\u4e8e $r_i$ \u5355\u8c03\u9012\u589e\u3002\n\n\u6240\u4ee5\u5bf9\u8fd9\u4e2a\u95ee\u9898\u8fdb\u884c dp \u5c31\u53ef\u4ee5\u4e86\uff0c\u7531\u4e8e\u6211\u6bd4\u8f83\u83dc\uff0c\u4e0d\u4f1a\u79bb\u6563\u5316\uff0c\u6240\u4ee5\u5199\u4e86\u4e00\u4e2a\u52a8\u6001\u5f00\u70b9\u7684\u7ebf\u6bb5\u6811\u3002\n\n\u503c\u5f97\u6ce8\u610f\u7684\u662f\u7a7a\u5e8f\u5217\u4e5f\u7b97\u4e00\u4e2a\u5408\u6cd5\u7684\u65b9\u6848\u3002\n\n$Code:$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std ;\n#define Next( i, x ) for( register int i = head[x]; i; i = e[i].next )\n#define rep( i, s, t ) for( register int i = (s); i <= (t); ++ i )\n#define drep( i, s, t ) for( register int i = (t); i >= (s); -- i )\n#define re register\n#define int long long\n#define ls(x) tr[x].l\n#define rs(x) tr[x].r\nint gi() {\n\tchar cc = getchar() ; int cn = 0, flus = 1 ;\n\twhile( cc < '0' || cc > '9' ) {  if( cc == '-' ) flus = - flus ; cc = getchar() ; }\n\twhile( cc >= '0' && cc <= '9' )  cn = cn * 10 + cc - '0', cc = getchar() ;\n\treturn cn * flus ;\n}\nconst int P = 1e9 + 7 ; \nconst int N = 2e5 + 5 ; \nint n, m, cnt, num, Rt, M, lef[N], ref[N], dp[N] ;\nstruct node { int p, f ; } a[N << 1] ;\nstruct Px { int x, y ; } c[N] ; \nbool cmp( node x, node y ) { return x.p < y.p ; }\nbool cmp2( Px a, Px b ) { return ( a.x == b.x ) ? ( a.y > b.y ) : a.x < b.x ; }\nstruct Tr { int l, r, w ; } tr[N * 20] ;\nvoid insert( int &x, int l, int r, int wh, int val ) {\n\tif( !x ) x = ++ num ; tr[x].w += val, tr[x].w %= P ; \n\tif( l == r ) return ; \n\tint mid = ( l + r ) >> 1 ; \n\tif( mid >= wh ) insert( ls(x), l, mid, wh, val ) ;\n\telse insert( rs(x), mid + 1, r, wh, val ) ;\n}\nint query( int x, int l, int r, int wh ) {\n\tif( l == r ) return tr[x].w ; \n\tint mid = ( l + r ) >> 1 ; \n\tif( mid >= wh ) return query( ls(x), l, mid, wh ) ;\n\telse return ( query( rs(x), mid + 1, r, wh ) + tr[ls(x)].w ) % P ; \n}\nsigned main()\n{\n\tn = gi(), m = gi() ; int maxn = 0 ;\n\trep( i, 1, n ) a[i].p = gi(), maxn = max( maxn, a[i].p ), a[i].f = 1 ; \n\trep( i, 1, m ) a[i + n].p = gi(), maxn = max( maxn, a[i + n].p ) ; \n\tM = n + m, ++ maxn ; \n\tsort( a + 1, a + M + 1, cmp ) ;\n\trep( i, 1, M ) lef[i] = ( a[i].f ) ? lef[i - 1] : a[i].p ; \n\tdrep( i, 1, M ) ref[i] = ( a[i].f ) ? ref[i + 1] : a[i].p ; \n\trep( i, 1, M ) {\n\t\tif( (!lef[i]) || (!ref[i]) || (!a[i].f) ) continue ; \n\t\t++ cnt, c[cnt].x = a[i].p - lef[i], c[cnt].y = ref[i] - a[i].p ; \n\t}\n\tsort( c + 1, c + cnt + 1, cmp2 ) ; int Ans = 1 ; \n\trep( i, 1, cnt ) {\t\n\t\tif( c[i].x == c[i - 1].x && c[i].y == c[i - 1].y ) continue ; \n\t\tdp[i] = 1 + query( 1, 1, maxn, c[i].y + 1 ) ;\n\t\tinsert( Rt, 1, maxn, c[i].y + 2, dp[i] ) ;\n\t\tAns = ( Ans + dp[i] ) % P ; \n\t}\n\tcout << Ans << endl ; \n\treturn 0 ;\n}\n```",
        "postTime": 1587650345,
        "uid": 30036,
        "name": "Soulist",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 AT4353 \u3010[ARC101D] Robots and Exits\u3011"
    },
    {
        "content": "[\u53ef\u80fd\u66f4\u597d\u7684\u9605\u8bfb\u4f53\u9a8c](http://m-sea-blog.com/archives/3254/)\n\n---\n\n\u795e\u4ed9\u9898...\n\n\u6211\u4eec\u5148\u628a\u6240\u6709\u53ea\u6709\u53ea\u4f1a\u4ece\u4e00\u4e2a\u51fa\u53e3\u51fa\u53bb\u7684\u673a\u5668\u4eba\u5220\u6389\uff0c\u8fd9\u4e9b\u673a\u5668\u4eba\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\n\n\u5bf9\u4e8e\u5269\u4e0b\u7684\u673a\u5668\u4eba\uff0c\u8bb0\u5b83\u5230\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u51fa\u53e3\u7684\u8ddd\u79bb\u4e3a $a$ \uff0c\u5230\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u51fa\u53e3\u7684\u8ddd\u79bb\u4e3a $b$ \u3002\u90a3\u4e48\u6bcf\u4e2a\u673a\u5668\u4eba\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u70b9 $(a,b)$ \u3002\n\n\u8bbe $x$ \u4e3a\u6240\u6709\u673a\u5668\u4eba\u5f80\u5de6\u79fb\u52a8\u7684\u6700\u8fdc\u70b9\u5230\u521d\u59cb\u4f4d\u7f6e\u7684\u8ddd\u79bb\uff0c $y$ \u4e3a\u6240\u6709\u673a\u5668\u4eba\u5f80\u53f3\u79fb\u52a8\u7684\u6700\u8fdc\u70b9\u5230\u521d\u59cb\u4f4d\u7f6e\u7684\u8ddd\u79bb\u3002\n\n\u90a3\u4e48\u6bcf\u6b21\u76f8\u5f53\u4e8e\u628a $(x,y)$ \u53d8\u6210 $(x+1,y)$ \u6216\u8005 $(x,y+1)$ \u3002\n\n\u53ef\u4ee5\u53d1\u73b0\u5f53 $x=a_i$ \u65f6\uff0c\u673a\u5668\u4eba $i$ \u4f1a\u8d70\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u51fa\u53e3\u51fa\u53bb\uff1b\u5f53 $y=b_i$ \u65f6\uff0c\u673a\u5668\u4eba $i$ \u4f1a\u8d70\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u51fa\u53e3\u51fa\u53bb\u3002\n\n\u4e8e\u662f\u53ef\u4ee5\u770b\u6210\u4ece\u539f\u70b9\u5f00\u59cb\u8d70\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5f80\u4e0a\u6216\u8005\u5f80\u53f3\u8d70\uff0c\u90a3\u4e48\u6700\u540e\u8d70\u7684\u6298\u7ebf\u7684\u4e0a\u4e0b\u4e24\u8fb9\u5206\u522b\u4ee3\u8868\u8d70\u5de6\u8fb9\u7684\u548c\u8d70\u53f3\u8fb9\u7684\u96c6\u5408\u3002\n\n\u53ef\u4ee5\u628a\u6298\u7ebf\u5e73\u79fb\uff0c\u7136\u540e\u5c31\u53ef\u4ee5\u7528\u7ecf\u8fc7\u7684\u70b9\u6765\u8868\u793a\u6298\u7ebf\u4e86\u3002\n\n\u8bbe $f[i]$ \u8868\u793a\u6298\u7ebf\u6700\u540e\u7ecf\u8fc7\u7684\u70b9\u662f $i$ \u7684\u65b9\u6848\u6570\u3002\u90a3\u4e48\u6709 $\\displaystyle f[i]=1+\\sum_{x_j<x_i,y_j<y_i}f[j]$ \u3002\n\n\u76f4\u63a5\u7528\u6811\u72b6\u6570\u7ec4\u4f18\u5316 DP \u5373\u53ef\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $O(n\\log n)$ \u3002\n\n```cpp\n// ===================================\n//   author: M_sea\n//   website: http://m-sea-blog.com/\n// ===================================\n#include <algorithm>\n#include <iostream>\n#include <cstdlib>\n#include <cstring>\n#include <cstdio>\n#include <cmath>\n#define re register\nusing namespace std;\n\ninline int read() {\n    int X=0,w=1; char c=getchar();\n    while (c<'0'||c>'9') { if (c=='-') w=-1; c=getchar(); }\n    while (c>='0'&&c<='9') X=X*10+c-'0',c=getchar();\n    return X*w;\n}\n\nconst int N=100000+10;\nconst int mod=1e9+7;\n\nint n,m,cnt,top;\nint a[N],b[N],S[N];\npair<int,int> p[N];\nint f[N];\n\ninline int cmp(pair<int,int> a,pair<int,int> b) {\n    if (a.first!=b.first) return a.first<b.first;\n    else return a.second>b.second;\n}\n\nint c[N];\ninline int lowbit(int x) { return x&-x; }\ninline int query(int x) { int res=0;\n    for (;x;x-=lowbit(x)) res=(res+c[x])%mod;\n    return res;\n}\ninline void add(int x,int y) {\n    for (;x<=top;x+=lowbit(x)) c[x]=(c[x]+y)%mod;\n}\n\nint main() {\n    n=read(),m=read();\n    for (re int i=1;i<=n;++i) a[i]=read();\n    for (re int i=1;i<=m;++i) b[i]=read();\n    for (re int i=1;i<=n;++i) {\n        if (a[i]<=b[1]||a[i]>=b[m]) continue;\n        int x=lower_bound(b+1,b+m+1,a[i])-b;\n        if (b[x]==a[i]) continue;\n        p[++cnt]=make_pair(a[i]-b[x-1],b[x]-a[i]);\n        S[++top]=b[x]-a[i];\n    }\n    sort(S+1,S+top+1); top=unique(S+1,S+top+1)-S-1;\n    for (re int i=1;i<=cnt;++i)\n        p[i].second=lower_bound(S+1,S+top+1,p[i].second)-S;\n    sort(p+1,p+cnt+1,cmp); cnt=unique(p+1,p+cnt+1)-p-1;\n    f[0]=1;\n    for (re int i=1;i<=cnt;++i)\n        f[i]=query(p[i].second-1)+1,add(p[i].second,f[i]);\n    int ans=0;\n    for (re int i=0;i<=cnt;++i) ans=(ans+f[i])%mod;\n    printf(\"%d\\n\",ans);\n    return 0;\n}\n```",
        "postTime": 1581467887,
        "uid": 38370,
        "name": "M_sea",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT4353 \u3010[ARC101D] Robots and Exits\u3011"
    },
    {
        "content": "\u5bf9\u4e8e\u8fd9\u9898,\u6211\u4eec\u9996\u5148\u53d1\u73b0\u5bf9\u4e8e\u4e00\u4e2a\u673a\u5668\u4eba\u6765\u8bf4,\u4ed6\u80fd\u591f\u8bbf\u95ee\u7684\u4f4d\u7f6e\u80af\u5b9a\u53ea\u6709\u5de6\u53f3\u4e24\u4e2a\u51fa\u53e3(\u5982\u679c\u5de6\u8fb9\u6216\u53f3\u8fb9\u6ca1\u6709\u51fa\u53e3\u53ef\u4ee5\u76f4\u63a5\u5220\u6389),\u90a3\u4e48\u6211\u4eec\u5c31\u53ef\u4ee5\u5bf9\u4e8e\u6bcf\u4e2a\u70b9\u9884\u5904\u7406\u51fa\u6765\u4e00\u4e2a $l_i$ \u548c $r_i$ \u8868\u793a\u5230\u5de6\u8fb9/\u53f3\u8fb9\u7684\u51fa\u53e3\u8ddd\u79bb\u662f\u591a\u5c11\n\n\u63a5\u7740\u6211\u4eec\u8003\u8651\u4e00\u4e0b\u9650\u5236\u6761\u4ef6,\u53d1\u73b0\u5982\u679c\u6709\u4e00\u4e2a $i$ ,\u5982\u679c\u5b58\u5728 $j$ \u6ee1\u8db3 $l_i \\le  l_j$ \u4e14 $r_i>r_j$ \u90a3\u4e48 $j$ \u9009\u62e9\u5de6\u8fb9\u65f6, $i$ \u4e5f\u8981\u5fc5\u987b\u9009\u62e9\u5de6\u8fb9\n\n\u53d1\u73b0\u5bf9\u4e8e\u8fd9\u4e2a\u9650\u5236\u6211\u4eec\u53ef\u4ee5\u62bd\u8c61\u6210\u4e00\u4e2a\u7f51\u683c\u56fe,\u6bcf\u4e2a\u70b9\u7684\u5de6\u8fb9\u4e3a $(l_i,r_i)$ ,\u6bcf\u6b21\u4ece $(0,0)$ \u5f00\u59cb\u9009\u62e9\u5411\u4e0a\u6216\u5411\u53f3\u8d70,\u4e00\u4e2a\u70b9\u7684\u9009\u62e9\u53ef\u4ee5\u770b\u505a\u6700\u5148\u78b0\u5230 $y=l_i$ \u8fd8\u662f $x=r_i$ ,\u6211\u4eec\u53d1\u73b0\u8fd9\u6837\u8f6c\u6362\u95ee\u9898\u662f\u53ef\u4ee5\u6ee1\u8db3\u4e0a\u9762\u7684\u9650\u5236\u7684\n\n\u5148\u628a\u6a2a\u7eb5\u5750\u6807\u79bb\u6563\u5316,\u6211\u4eec\u53ef\u4ee5\u8003\u8651\u7528 $dp$ \u6765\u6c42\u65b9\u6848\u6570,\u8bbe $f_{i,j}$ \u8868\u793a\u5f53\u524d\u5230\u4e86 $(i,j)$ \u7684\u65b9\u6848\u6570,\u7136\u540e\u6211\u4eec\u6839\u636e\u524d\u9762\u7684\u9650\u5236\u53ef\u4ee5\u53d1\u73b0,\u4e00\u4e2a\u70b9\u53ef\u4ee5\u7531\u524d\u9762 $r_j\\le r_i$ \u7684\u5730\u65b9\u8f6c\u79fb\u8fc7\u6765,\u7528\u6811\u72b6\u6570\u7ec4\u7ef4\u62a4\u5373\u53ef\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\nconst int N=1e5+5;\nconst int P=1e9+7;\nint n,m,cnt,num,a[N],b[N],d[N],f[N];\nstruct each{\n\tint l,r;\n\tbool operator == (each k){\n\t\treturn l==k.l&&r==k.r;\n\t}\n}c[N];\nbool com(each x,each y){\n\tif(x.l==y.l)\treturn x.r>y.r;\n\treturn x.l<y.l;\n}\nvoid add(int x,int y){\n\twhile(x<=num){\n\t\tf[x]=(f[x]+y)%P;\n\t\tx+=x&-x;\n\t}\n}\nint query(int x){\n\tint ans=0;\n\twhile(x){\n\t\tans=(ans+f[x])%P;\n\t\tx-=x&-x;\n\t}\n\treturn ans;\n}\nint main(){\n\tfreopen(\"1.out\",\"w\",stdout);\n\tfreopen(\"1.in\",\"r\",stdin);\n\tscanf(\"%d%d\",&n,&m);\n\tfor(int i=1;i<=n;i++)\tscanf(\"%d\",&a[i]);\n\tfor(int i=1;i<=m;i++)\tscanf(\"%d\",&b[i]);\n\tsort(a+1,a+n+1),sort(b+1,b+m+1);\n\tn=unique(a+1,a+n+1)-a-1;\n\tm=unique(b+1,b+m+1)-b-1;\n\tfor(int i=1;i<=n;i++){\n\t\tif(a[i]<b[1]||a[i]>b[m])\tcontinue;\n\t\tint k=lower_bound(b+1,b+m+1,a[i])-b;\n\t\tif(b[k]==a[i])\tcontinue;\n\t\tc[++cnt].l=a[i]-b[k-1];\n\t\td[cnt]=c[cnt].r=b[k]-a[i];\n\t}\n\td[cnt+1]=0;\n\tsort(d+1,d+cnt+2);\n\tsort(c+1,c+cnt+1,com);\n\tnum=unique(d+1,d+cnt+2)-d-1;\n\tadd(1,1);\n\tfor(int i=1;i<=n;i++){\n\t\tif(c[i]==c[i-1])\tcontinue;\n\t\tint k=lower_bound(d+1,d+num+1,c[i].r)-d;\n\t\tadd(k,query(k-1));\n\t}\n\tprintf(\"%d\\n\",query(num));\n\treturn 0;\n}\n\n```",
        "postTime": 1582606906,
        "uid": 88567,
        "name": "lzk5627",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT4353 \u3010[ARC101D] Robots and Exits\u3011"
    },
    {
        "content": "## \u9898\u610f\n\n\u73b0\u5728\u6709 $n$ \u4e2a\u673a\u5668\u4eba\u548c $m$ \u4e2a\u51fa\u53e3\u5728\u4e00\u4e2a\u6570\u8f74\u4e0a\uff0c\u6bcf\u4e2a\u673a\u5668\u4eba\u548c\u51fa\u53e3\u90fd\u6709\u4e00\u4e2a\u6b63\u6574\u6570\u5750\u6807\uff0c\u5e76\u4e14\u8fd9 $n+m$ \u4e2a\u5750\u6807\u90fd\u4e92\u4e0d\u76f8\u540c\u3002\n\n\u73b0\u5728\u6267\u884c\u82e5\u5e72\u6b21\u64cd\u4f5c\uff0c\u6bcf\u6b21\u64cd\u4f5c\u53ef\u4ee5\u662f\uff1a\n\n1. \u5c06\u6240\u6709\u673a\u5668\u4eba\u7684\u5750\u6807\u51cf\u4e00\u3002\n2. \u5c06\u6240\u6709\u673a\u5668\u4eba\u7684\u5750\u6807\u52a0\u4e00\u3002\n\n\u5f53\u4e00\u4e2a\u673a\u5668\u4eba\u79fb\u5230\u51fa\u53e3\u7684\u7684\u65f6\u5019\u5c31\u4f1a\u6d88\u5931\uff0c\u6c42\u6709\u591a\u5c11\u79cd\u6240\u6709\u673a\u5668\u4eba\u4ece\u51fa\u53e3\u51fa\u6765\u7684\u65b9\u6848\u3002\n\n## \u5206\u6790\n\n\u53d1\u73b0\u6bcf\u4e2a\u673a\u5668\u4eba\u53ea\u4f1a\u6700\u591a\u6709\u4e24\u4e2a\u4e0d\u540c\u7684\u51fa\u53e3\u53ef\u4ee5\u9009\u62e9\u3002\u5148\u628a\u53ea\u6709\u4e00\u79cd\u9009\u62e9\u7684\u673a\u5668\u4eba\u5220\u9664\uff0c\u56e0\u4e3a\u8fd9\u4e0d\u5f71\u54cd\u7b54\u6848\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u6709\u4e24\u4e2a\u51fa\u53e3\u65b9\u6848\u7684\u673a\u5668\u4eba\uff0c\u4ee4\u5b83\u5230\u5de6\u8fb9\u51fa\u53e3\u7684\u8ddd\u79bb\u4e3a $a$ \uff0c\u5230\u53f3\u8fb9\u51fa\u53e3\u7684\u8ddd\u79bb\u4e3a $b$\u3002\u90a3\u4e48\u6bcf\u4e2a\u673a\u5668\u4eba\u53ef\u4ee5\u770b\u6210\u4e00\u4e2a\u70b9 $(a, b)$\u3002\n\n\u4ee4 $x$ \u4e3a\u6240\u6709\u673a\u5668\u4eba\u5f80\u5de6\u79fb\u52a8\u6700\u8fdc\u65f6\u79fb\u52a8\u7684\u8ddd\u79bb\uff0c $y$ \u4e3a\u6240\u6709\u673a\u5668\u4eba\u5f80\u53f3\u79fb\u52a8\u6700\u8fdc\u65f6\u79fb\u52a8\u7684\u8ddd\u79bb\uff0c\u90a3\u4e48\u6bcf\u6b21\u64cd\u4f5c\u76f8\u5f53\u4e8e\u628a $(x,y)$ \u53d8\u6210 $(x+1,y)$ \u6216\u8005 $(x,y+1)$\u3002\n\n\u56e0\u4e3a\u5f53 $x=a_i$ \u65f6\uff0c\u673a\u5668\u4eba $i$ \u4f1a\u8d70\u5de6\u8fb9\u51fa\u53e3\uff0c\u800c\u5f53 $y=b_i$ \u65f6\uff0c\u673a\u5668\u4eba $i$ \u4f1a\u8d70\u53f3\u8fb9\u51fa\u53e3\u3002\u6240\u4ee5\u53ef\u4ee5\u628a\u95ee\u9898\u8fd9\u6837\u8f6c\u5316\uff1a\u4ece\u539f\u70b9\u5f00\u59cb\u79fb\u52a8\uff0c\u6bcf\u6b21\u53ef\u4ee5\u5f80\u4e0a\u6216\u8005\u5f80\u53f3\u8d70\uff0c\u770b\u5148\u4e0e $x = a_i$ \u548c $y = b_i$ \u7684\u54ea\u4e00\u6761\u76f4\u7ebf\u5148\u76f8\u4ea4\u3002\n\n\u8fd9\u65f6\u5019\u8003\u8651 `dp`\u3002\u8bbe $f_i$ \u8868\u793a\u6298\u7ebf\u6700\u540e\u7ecf\u8fc7\u7684\u70b9\u662f $i$ \u7684\u65b9\u6848\u6570\uff0c\u90a3\u4e48\u5c31\u6709\u8f6c\u79fb\u5f0f \n\n$$f_i=1+\\sum\\limits_{x_j<x_i,y_j<y_i}f_j$$\n\n\u4f7f\u7528\u6811\u72b6\u6570\u7ec4\u4f18\u5316 `dp`\uff0c\u65f6\u95f4\u590d\u6742\u5ea6 $\\Theta(n\\log n)$\u3002\n\n## \u4ee3\u7801\n\n```cpp\n#include <stdio.h>\n#include <string.h>\n#include <algorithm>\n#define lld long long\nusing namespace std;\ninline int min(const int &x, const int &y) { return x < y ? x : y; }\ninline int max(const int &x, const int &y) { return x > y ? x : y; }\nconst int N = 100010;\nconst int mod = 1e9 + 7;\nint n, m;\nint cnt, tot;\nint a[N], b[N], d[N];\nstruct node { int l, r; } c[N];\ninline bool operator == (const node &x, const node &y) {\n\treturn x.l == y.l && x.r == y.r;\n}\ninline bool operator < (const node &x, const node &y) {\n\treturn (x.l == y.l) ? (x.r > y.r) : (x.l < y.l);\n}\nint C[N];\ninline void modify(int p, int x) {\n\tfor (; p <= tot; p += p & -p)\n\t\tC[p] = (C[p] + x) % mod;\n}\ninline int query(int p) {\n\tint ret = 0;\n\tfor (; p; p &= p - 1)\n\t\tret = (ret + C[p]) % mod;\n\treturn ret;\n}\nint main() {\n\tscanf(\"%d%d\", &n, &m);\n\tfor (int i = 1; i <= n; ++ i) scanf(\"%d\", a + i);\n\tfor (int i = 1; i <= m; ++ i) scanf(\"%d\", b + i);\n\tsort(a + 1, a + n + 1), sort(b + 1, b + m + 1);\n\tn = unique(a + 1, a + n + 1) - a - 1;\n\tm = unique(b + 1, b + m + 1) - b - 1;\n\tfor (int i = 1; i <= n; ++ i) {\n\t\tif (a[i] < b[1] || a[i] > b[m]) continue;\n\t\tint k = lower_bound(b + 1, b + m + 1, a[i]) - b;\n\t\tif (b[k] == a[i]) continue;\n\t\tc[++ cnt] = (node){a[i] - b[k - 1], b[k] - a[i]};\n\t\td[cnt] = b[k] - a[i];\n\t}\n\td[cnt + 1] = 0;\n\tsort(c + 1, c + cnt + 1);\n\tsort(d + 1, d + cnt + 2);\n\ttot = unique(d + 1, d + cnt + 2) - d - 1;\n\tmodify(1, 1);\n\tfor (int i = 1; i <= n; ++ i) {\n\t\tif (c[i] == c[i - 1]) continue;\n\t\tint k = lower_bound(d + 1, d + tot + 1, c[i].r) - d;\n\t\tmodify(k, query(k - 1));\n\t}\n\tprintf(\"%d\\n\", query(tot));\n}\n\n```",
        "postTime": 1664114597,
        "uid": 228486,
        "name": "SunsetSamsara",
        "ccfLevel": 7,
        "title": "AT4353 [ARC101D] Robots and Exits \u9898\u89e3"
    },
    {
        "content": "\u7edd\u5999\u9898\n\n\u6211\u4eec\u628a\u673a\u5668\u4eba\u89c6\u4e3a\u7403\uff0c\u628a\u51fa\u53e3\u89c6\u4e3a\u6d1e\n\n\u9996\u5148\u53bb\u6389\u5728\u6d1e\u4e24\u8fb9\u7684\u7403\u548c\u4e00\u5f00\u59cb\u5c31\u5728\u6d1e\u91cc\u7684\u7403\uff0c\u6ce8\u610f\u5230\u65e0\u8bba\u600e\u4e48\u79fb\u52a8\u90fd\u4f1a\u4f7f\u5b83\u4eec\u8fdb\u5165\u786e\u5b9a\u7684\u6d1e\n\n\u73b0\u5728\u8003\u8651\u4e2d\u95f4\u7684\u6bcf\u4e2a\u7403\uff0c\u5b83\u4eec\u4e00\u5b9a\u4f1a\u8fdb\u5230\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6216\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u6d1e\u5185\uff0c\u5bf9\u4e8e\u7b2c $i$ \u4e2a\u7403\uff0c\u4ee4\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u6d1e\u8ddd\u79bb\u5176 $A_i$\uff0c\u53f3\u8fb9\u7b2c\u4e00\u4e2a\u6d1e\u8ddd\u79bb\u5176 $B_i$ \n\n\u6211\u4eec\u53d1\u73b0\uff0c\u7531\u4e8e\u5e76\u4e0d\u5173\u5fc3\u6bcf\u4e2a\u7403\u5177\u4f53\u7684\u79fb\u52a8\u8fc7\u7a0b\uff0c\u800c\u53ea\u5173\u5fc3\u8fd9\u4e2a\u7403\u6700\u7ec8\u8fdb\u5165\u54ea\u4e2a\u6d1e\uff0c\u6211\u4eec\u5e76\u4e0d\u9700\u8981\u8003\u8651\u5177\u4f53\u7684\u79fb\u52a8\u8fc7\u7a0b\uff0c\u53ea\u9700\u8981\u8003\u8651\u5176\u5f53\u524d\u6700\u5de6\u8d70\u4e86\u591a\u5c11\uff0c\u6700\u53f3\u8d70\u4e86\u591a\u5c11\n\n\u6211\u4eec\u53ea\u5206\u6790\u6539\u53d8\u4e86\u8fd9\u4e24\u4e2a\u503c\u7684\u64cd\u4f5c\n\n\u53d1\u73b0\u6bcf\u4e2a\u7403\uff0c\u53ea\u8981\u5b83\u5f53\u524d\u6ca1\u6709\u6389\u4e0b\u53bb\uff0c\u90a3\u4e48\u5bf9\u4e8e\u8fd9\u6240\u6709\u7403\uff0c\u5b83\u4eec\u7684\u8fd9\u4e24\u4e2a\u503c\u90fd\u662f\u4e00\u6837\u7684\n\n\u5c06\u8fd9\u6837\u7684\u4e00\u4e2a\u4e8c\u7ef4\u7684\u4e1c\u897f\u653e\u5230\u5e73\u9762\u4e0a\uff0c\u8003\u8651\u4e00\u4e2a\u70b9 $(x,y)$ \u8868\u793a\u6700\u5de6\u8d70\u4e86 $x$\uff0c\u6700\u53f3\u8d70\u4e86 $y$\n\n\u90a3\u4e48\u6211\u4eec\u53ea\u5206\u6790\u6539\u53d8\u8fd9\u4e24\u4e2a\u503c\u7684\u64cd\u4f5c\uff0c\u76f8\u5f53\u4e8e\u4f7f $x+1$ \u6216\u4f7f $y+1$\n\n\u5373\u5728\u5e73\u9762\u4e0a\u7684\u4e00\u6761\u6298\u7ebf\n\n\u53d1\u73b0\u8fd9\u6761\u6298\u7ebf\u82e5\u5148\u78b0\u5230 $x=A_i$\uff0c\u5219 $i$ \u4ece\u5de6\u4fa7\u51fa\uff0c\u5426\u5219\u5148\u78b0\u5230 $y=B_i$ \u4ece\u53f3\u4fa7\u51fa\n\n\u7531\u4e8e\u6211\u4eec\u53ea\u5173\u5fc3\u6bcf\u4e2a\u70b9\u4ece\u54ea\u51fa\uff0c\u6240\u4ee5\u5e76\u4e0d\u5173\u7cfb\u6298\u7ebf\u5177\u4f53\u600e\u4e48\u8d70\n\n\u8003\u8651\u4ee4 $f_i$ \u8868\u793a\u6700\u540e\u51fa\u7684\u70b9\u662f $i$ \u65f6\u7684\u65b9\u6848\u6570\n\n\u6709 $f_i=1+\\sum \\limits_{A_j<A_i,B_j<B_i} f_j$\n\n\u6811\u72b6\u6570\u7ec4\u4f18\u5316\u4e8c\u7ef4\u504f\u5e8f\u5373\u53ef\n\n\u6ce8\u610f\u7531\u4e8e\u5750\u6807\u503c\u57df $10^9$\uff0c\u9700\u8981\u79bb\u6563\u5316\n\n\u590d\u6742\u5ea6 $O(n\\log n)$\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\ntemplate <typename T> inline void read(T &x)\n{\n\tx=0;short f=1;char c=getchar();\n\tfor(;c<'0'||c>'9';c=getchar()) if(c=='-') f=-1;\n\tfor(;c>='0'&&c<='9';c=getchar()) x=(x<<1)+(x<<3)+(c^48);\n\tx*=f;return;\n}\nconst int N=1e6+5,mod=1e9+7;\nint a[N],b[N];\nint n,m;\nint c[N];\nusing PII=pair<int,int>;\nint lowbit(int x){return x&(-x);}\nvoid add(int x,int v){for(int i=x;i<=n;i+=lowbit(i)) c[i]=(c[i]+v)%mod;}\nint query(int x)\n{\n\tint res=0;\n\tfor(int i=x;i;i-=lowbit(i)) res=(res+c[i])%mod;\n\treturn res;\n}\nvector<PII>p;\nint main()\n{\n\tread(n);read(m);\n\tfor(int i=1;i<=n;++i) read(a[i]);\n\tfor(int i=1;i<=m;++i) read(b[i]);\n\tvector<int>ve;\n\tfor(int i=1;i<=n;++i)\n\t{\n\t\tif(a[i]<=b[1]||a[i]>=b[m]) continue;\n\t\tint pos=lower_bound(b+1,b+m+1,a[i])-b;\n\t\tif(a[i]==b[pos]) continue;\n\t\tp.push_back({a[i]-b[pos-1],b[pos]-a[i]});\n\t\tve.push_back(b[pos]-a[i]);\n\t}\n\tsort(ve.begin(),ve.end());\n\tve.erase(unique(ve.begin(),ve.end()),ve.end());\n\tfor(int i=0;i<p.size();++i) p[i].second=lower_bound(ve.begin(),ve.end(),p[i].second)-ve.begin()+1;\n\tsort(p.begin(),p.end(),[&](PII a,PII b){return (a.first!=b.first)?(a.first<b.first):(a.second>b.second);});\n\tp.erase(unique(p.begin(),p.end()),p.end());\n\tint ans=0;\n\tfor(int i=0;i<p.size();++i) \n\t{\n\t\tint x=query(p[i].second-1)+1;\n\t\tadd(p[i].second,x);\n\t\tans=(ans+x)%mod;\n\t}\n\tprintf(\"%d\\n\",ans+1);\n}\n```",
        "postTime": 1638586888,
        "uid": 231600,
        "name": "zhangboju",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 ARC101D \u3010Robots and Exits\u3011"
    },
    {
        "content": "\u5bb9\u6613\u53d1\u73b0\uff0c\u8fd9 $m$ \u4e2a\u51fa\u53e3\u4f1a\u628a $n$ \u4e2a\u673a\u5668\u4eba\u5206\u6210\u82e5\u5e72\u6bb5\n\n\u5bf9\u4e8e\u67d0\u4e00\u6bb5\u7684\u8fd9\u4e9b\u673a\u5668\u4eba\uff0c\u8981\u4e48\u4ece\u5de6\u8fb9\u6700\u8fd1\u7684\u51fa\u53e3\u6d88\u5931\uff0c\u8981\u4e48\u4ece\u53f3\u8fb9\u6700\u8fd1\u7684\u51fa\u53e3\u6d88\u5931\uff0c\u4ece\u800c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u6bcf\u4e2a\u673a\u5668\u4eba\u5230\u5de6\u8fb9\u7684\u8ddd\u79bb $x$\uff0c\u5230\u53f3\u8fb9\u7684\u8ddd\u79bb $y$\uff0c\u5f62\u6210\u4e86\u82e5\u5e72\u4e2a\u8fd9\u6837\u7684\u70b9\u5bf9 $(x,y)$\n\n\u6211\u4eec\u8003\u8651\u4e24\u4e2a\u673a\u5668\u4eba $(x_0,y_0),(x_1,y_1)$\uff0c\u5982\u679c $x_0<x_1$\uff0c\u90a3\u4e48\u53ea\u8981\u673a\u5668\u4eba $1$ \u4ece\u5de6\u8fb9\u6d88\u5931\u4e86\uff0c\u90a3\u4e48\u673a\u5668\u4eba $0$ \u4e5f\u4e00\u5b9a\u662f\u4ece\u5de6\u8fb9\u6d88\u5931\u7684\n\n\u628a\u8fd9\u4e9b\u70b9\u5bf9\u653e\u5230\u5750\u6807\u7cfb\u4e0a\uff0c\u95ee\u9898\u5176\u5b9e\u5c31\u662f\u6bcf\u6b21\u5c06 $x$ \u8f74\u5f80\u4e0a\u79fb\uff0c\u6216\u8005\u5c06 $y$ \u8f74\u5f80\u53f3\u79fb\uff0c\u5148\u88ab $x$ \u8f74\u8986\u76d6\u6389\u7684\u4e3a\u767d\u8272\uff0c\u5148\u88ab $y$ \u8f74\u8986\u76d6\u6389\u7684\u4e3a\u9ed1\u8272\n\n\u6211\u4eec\u53ef\u4ee5\u5c06\u8986\u76d6\u6389\u7684\u70b9\u6309\u987a\u5e8f\u8f6c\u5316\u6210\u4e00\u6761\u8def\u5f84\uff0c\u8def\u5f84\u4e0a\u7684\u70b9\u6ee1\u8db3 $x_{i-1}<x_i\\wedge y_{i-1}<y_i$\uff0c\u6211\u4eec\u8981\u6c42\u7684\u5c31\u662f\u4e0d\u540c\u7684\u8def\u5f84\u6761\u6570\n\n\u5177\u4f53\u64cd\u4f5c\u65f6\uff0c\u5148\u5c06\u5de6\u8fb9\u548c\u53f3\u8fb9\u53ea\u6709\u53ef\u80fd\u6d88\u5931\u5728\u4e00\u4e2a\u51fa\u53e3\u7684\u673a\u5668\u4eba\u53bb\u6389\uff0c\u7136\u540e\u6c42\u51fa\u5269\u4e0b\u6bcf\u4e2a\u673a\u5668\u4eba\u7684 $(x,y)$\uff0c\u6309\u7167 $x_i$ \u6392\u5e8f\uff0c\u56e0\u4e3a\u662f\u4e25\u683c\u5c0f\u4e8e\uff0c\u6240\u4ee5 $x_i$ \u76f8\u540c\u7684\u6309\u7167 $y_i$ \u4ece\u5927\u5230\u5c0f\u6392\u5e8f\n\n\u6700\u540e\u505a\u4e00\u904d\u6700\u957f\u4e0a\u5347\u5b50\u5e8f\u5217\u5373\u53ef\uff0c\u7528\u6811\u72b6\u6570\u7ec4\u4f18\u5316\u4e00\u4e0b\u53ef\u4ee5\u505a\u5230 $\\mathcal O({n\\log n})$ \u7684\u590d\u6742\u5ea6\n\n$\\mathcal{Code:}$\n\n```c++\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <algorithm>\n\nusing namespace std;\n\nconst int maxn = 1e5 + 50, INF = 0x3f3f3f3f, mod = 1e9 + 7;\n\ninline int read () {\n\tregister int x = 0, w = 1;\n\tregister char ch = getchar ();\n\tfor (; ch < '0' || ch > '9'; ch = getchar ()) if (ch == '-') w = -1;\n\tfor (; ch >= '0' && ch <= '9'; ch = getchar ()) x = x * 10 + ch - '0';\n\treturn x * w;\n}\n\ninline int addmod (register int a, register int b) {\n\treturn a += b, a >= mod ? a - mod : a;\n}\n\nint n, m, num, ans, lenx, leny, x[maxn], y[maxn], bx[maxn], by[maxn], tree[maxn];\n\nstruct Node {\n\tint x, y;\n\tinline friend bool operator < (register const Node &a, register const Node &b) { return a.x == b.x ? a.y > b.y : a.x < b.x; }\n} a[maxn];\n\ninline void Insert (register int x, register int val) {\n\tfor (; x <= leny; x += x & -x) tree[x] = addmod (tree[x], val);\n}\n\ninline int Query (register int x, register int ans = 0) {\n\tfor (; x; x -= x & -x) ans = addmod (ans, tree[x]);\n\treturn ans;\n}\n\nint main () {\n\tn = read(), m = read();\n\tfor (register int i = 1; i <= n; i ++) x[i] = read();\n\tfor (register int i = 1; i <= m; i ++) y[i] = read();\n\tfor (register int i = 1, res; i <= n; i ++) {\n\t\tres = upper_bound (y + 1, y + m + 1, x[i]) - y;\n\t\tif (res - 1 >= 1 && res <= m) num ++, a[num].x = bx[++ lenx] = x[i] - y[res - 1], a[num].y = by[++ leny] = y[res] - x[i];\n\t}\n\tsort (bx + 1, bx + lenx + 1), lenx = unique (bx + 1, bx + lenx + 1) - bx - 1;\n\tsort (by + 1, by + leny + 1), leny = unique (by + 1, by + leny + 1) - by - 1;\n\tfor (register int i = 1; i <= num; i ++)\n\t\ta[i].x = lower_bound (bx + 1, bx + lenx + 1, a[i].x) - bx, a[i].y = lower_bound (by + 1, by + leny + 1, a[i].y) - by;\n\tsort (a + 1, a + num + 1);\n\tfor (register int i = 1, res; i <= num; i ++) {\n\t\tif (a[i].x == a[i - 1].x && a[i].y == a[i - 1].y) continue;\n\t\tres = Query (a[i].y) + 1, Insert (a[i].y + 1, res), ans = addmod (ans, res);\n\t}\n\treturn printf (\"%d\\n\", addmod (ans, 1)), 0;\n}\n```",
        "postTime": 1624020451,
        "uid": 335193,
        "name": "Rubyonly",
        "ccfLevel": 8,
        "title": "ARC101D \u9898\u89e3"
    }
]