[
    {
        "content": "\u90e8\u5206\u5185\u5bb9\u53c2\u8003\u81ea\u5b98\u65b9\u9898\u89e3\u3002\n\n\u524d\u7f6e\u77e5\u8bc6\uff1aSA\u3002\n\n\u9996\u5148\u5bf9\u539f\u6570\u7ec4\u8dd1\u4e00\u904d SA\uff0c\u8ba1\u7b97\u51fa $ sa $ \u6570\u7ec4\uff0c$ h $ \u6570\u7ec4\u548c $ rnk $ \u6570\u7ec4\u3002\n\n\u4f17\u6240\u5468\u77e5\uff0cLCP \u6709\u4e00\u4e2a\u91cd\u8981\u6027\u8d28\uff1a$ \\operatorname{LCP}(suf_i,suf_j)(rnk_i<rnk_j)=\\min\\limits_{k=i}^j \\{h_{rnk_k} \\} $\u3002\n\n\u4e8e\u662f\u6309 $ rnk $ \u6392\u5e8f\u540e\uff0c\u95ee\u9898\u8f6c\u5316\u4e3a\u4e86\uff1a\n\n\u7ed9\u5b9a\u6570\u7ec4 $ a $\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $ i $\uff0c\u6c42\u51fa\u6240\u6709\u4ee5 $ i $ \u4e3a\u4e00\u4e2a\u7aef\u70b9\u7684\u533a\u95f4\u5185\u6700\u5c0f\u503c\u4e4b\u548c\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u7ecf\u5178\u95ee\u9898\uff0c\u5f00\u6808\u5373\u53ef\uff0c\u7ebf\u6027\u65f6\u95f4\u590d\u6742\u5ea6\u89e3\u51b3\u95ee\u9898\u3002\n\n\u5177\u4f53\u6d41\u7a0b\u5982\u4e0b\uff1a\n\n\u9996\u5148\u8bbe $ B_k=\\sum_{i=1}^{k-1} g(i,k) $\uff0c\u5176\u4e2d $ g(i,k) $ \u8868\u793a\u533a\u95f4 $ [i,k] $ \u5185\u7684\u6700\u5c0f\u503c\uff0c\u7136\u540e\u5206\u6790 $ B_k $ \u4e0e $ B_{k+1} $ \u4e4b\u95f4\u7684\u5173\u7cfb\uff1a\n\n$ B_{k+1}=A_k+\\sum_{i=1}^{k-1} \\min (A_k,g(i,k)) $\uff0c\u8fd9\u6b65\u662f\u663e\u7136\u7684\uff0c\u5bf9\u6bcf\u4e2a\u5143\u7d20\u5206\u7c7b\u8ba8\u8bba\u4e0d\u96be\u5f97\u5230\u3002\n\n\u4e8e\u662f $ B_k $ \u4e0d\u96be\u8ba1\u7b97\uff0c\u8003\u8651\u66b4\u529b\uff1a\n\n\u8bbe $ X $ \u4e3a\u521d\u59cb\u96c6\u5408\uff0c\u5bf9\u4e8e\u6bcf\u4e2a $ k $\uff0c\u9996\u5148\u5c06 $ X $ \u91cc\u6240\u6709\u96c6\u5408\u4e0e $ A_{k-1} $ \u53d6 $ \\min $\uff0c\u7136\u540e\u5c06 $ A_{k-1} $ \u585e\u5165\u96c6\u5408\uff0c\u4e4b\u540e\u6c42\u51fa\u96c6\u5408\u5185\u5143\u7d20\u4e4b\u548c\u4f5c\u4e3a\u7b54\u6848\u3002\u6734\u7d20\u5b9e\u73b0\u662f $ \\mathcal{O}(n^2) $\uff0c\u8003\u8651\u4f18\u5316\u3002\n\n\u4f46\u5b9e\u9645\u4e0a\uff0c\u6ce8\u610f\u5230\u6bcf\u6b21\u7b2c\u4e00\u6b65\u64cd\u4f5c\u90fd\u4f1a\u51cf\u5c11\u4e0d\u540c\u7684\u6570\u5b57\u4e2a\u6570\uff0c\u6240\u4ee5\u4e0d\u96be\u53d1\u73b0\u64cd\u4f5c\u6b21\u6570\u7684\u4e0a\u9650\u662f $ \\mathcal{O}(n) $ \u7ea7\u522b\u7684\uff0c\u4e8e\u662f\u53ef\u4ee5\u7528\u5e73\u8861\u6811\u5b9e\u73b0\u3002\u73b0\u5728\u6211\u4eec\u4f01\u56fe\u4f18\u5316\u8fd9\u4e2a\u8fc7\u7a0b\u3002\n\n\u53d1\u73b0\u7531\u4e8e\u5728\u7b2c\u4e8c\u6b65\u64cd\u4f5c\u4e2d\u52a0\u5165\u7684\u6570\u663e\u7136\u4e0d\u5c0f\u4e8e $ X $ \u4e2d\u7684\u6700\u5927\u503c\uff0c\u6240\u4ee5\u53ef\u4ee5\u76f4\u63a5\u5f00\u6808\u6765\u7ef4\u62a4\u96c6\u5408 $ X $\uff0c\u4e8e\u662f\u505a\u5230\u4e86\u7ebf\u6027\u590d\u6742\u5ea6\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u6c42\u540e\u7f00\u6570\u7ec4\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002\n\n\u4ee3\u7801\u5b9e\u73b0\u4e0a\u4f7f\u7528\u4e86 Atcoder \u81ea\u5e26\u7684\u5b57\u7b26\u4e32\u5e93\u91cc\u7684\u540e\u7f00\u6570\u7ec4\u51fd\u6570\uff0c\u5f53\u7136\u4e5f\u53ef\u4ee5\u624b\u5199\u3002\n\n\u4ee3\u7801\uff1a\n\n```cpp\n#import <atcoder/string.hpp>\n#import <bits/stdc++.h>\nusing namespace std;\nint main() \n{\n    ios::sync_with_stdio(0);\n    int n;\n    string s;\n    cin >> n >> s;\n    auto sa = atcoder::suffix_array(s);\n    auto lcp = atcoder::lcp_array(s, sa);\n    lcp.insert(lcp.begin(), 0);\n    vector<long long> pre(n + 5), suf(n + 5), stk(n << 1);\n    int top = 0;\n    stk[top = 0] = -1;\n    for (int i = 0; i < n; ++i) \n    {\n        if (i > 0)\n            pre[i] = pre[i - 1];\n        while (top && lcp[stk[top]] > lcp[i]) \n        {\n            pre[i] -= (stk[top] - stk[top - 1]) * lcp[stk[top]];\n            --top;\n        }\n        pre[i] += (i - stk[top]) * lcp[i];\n        stk[++top] = i;\n    }\n    top=0;\n    stk[top] = n;\n    for (int i = n - 1; i >= 0; --i) \n    {\n        if (i < n - 1)\n            suf[i] = suf[i + 1];\n        while (top && lcp[stk[top]] > lcp[i]) \n        {\n            suf[i] -= (stk[top - 1] - stk[top]) * lcp[stk[top]];\n            --top;\n        }\n        suf[i] += (stk[top] - i) * lcp[i];\n        stk[++top] = i;\n    }\n    vector<int> rk(n);\n    for (int i = 0; i < n; ++i)\n        rk[sa[i]] = i;\n    for (int i = 0; i < n; ++i) \n        cout << pre[rk[i]] + suf[rk[i] + 1] + n - i << '\\n';\n}\n```\n",
        "postTime": 1673531129,
        "uid": 714821,
        "name": "loser_seele",
        "ccfLevel": 4,
        "title": "ABC213F\u9898\u89e3"
    }
]