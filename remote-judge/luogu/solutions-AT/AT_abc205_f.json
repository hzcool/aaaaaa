[
    {
        "content": "[Grid and Tokens](https://www.luogu.com.cn/problem/AT_abc205_f)\n\n### \u9898\u76ee\u5927\u610f\n\n\u7ed9\u5b9a $n$ \u4e2a\u70b9\u548c\u4e00\u4e2a $H\\times W$ \u7684\u7f51\u683c\uff0c\u6bcf\u4e2a\u70b9\u53ef\u4ee5\u653e\u7f6e\u5728 $(A_i,B_i)$ \u5230 $(C_i,D_i)$ \u7684\u77e9\u5f62\u4e2d\u6216\u4e0d\u653e\uff0c\u6bcf\u4e00\u884c\u6216\u4e00\u5217\u53ea\u80fd\u653e\u7f6e\u4e00\u4e2a\u70b9\uff0c\u6c42\u6700\u591a\u80fd\u653e\u591a\u5c11\u4e2a\u70b9\u3002\n\n### \u601d\u8def\u5206\u6790\n\n\u9996\u5148\u770b\u6570\u636e\u8303\u56f4\uff0c\u518d\u7ed3\u5408\u9898\u76ee\u7ed9\u7684\u9650\u5236\u6761\u4ef6\uff0c\u5bb9\u6613\u53d1\u73b0\u8fd9\u662f\u4e00\u9053\u7f51\u7edc\u6d41\u3002\n\n\u8003\u8651\u5efa\u56fe\uff0c\u56e0\u4e3a\u884c\u548c\u5217\u5b58\u5728\u9650\u5236\u6761\u4ef6\u800c\u7f51\u683c\u4e2d\u7684\u70b9\u4e0d\u5b58\u5728\uff0c\u6240\u4ee5\u53ef\u4ee5\u8003\u8651\u5c06\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u5206\u522b\u5efa\u6210\u4e00\u4e2a\u70b9\u3002\u518d\u5efa\u7acb\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u548c\u8d85\u7ea7\u6c47\u70b9\uff0c\u6e90\u70b9\u5411\u884c\u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u5217\u5411\u6c47\u70b9\u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\u3002 \u8868\u793a\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u53ea\u80fd\u653e\u4e00\u4e2a\u70b9\u7684\u9650\u5236\u6761\u4ef6\u3002\n\n\u5bf9\u4e8e\u4e00\u4e2a\u70b9\u7684\u77e9\u5f62\u653e\u7f6e\u8303\u56f4\uff0c\u53ef\u4ee5\u8f6c\u6362\u4e3a\u884c $A_i\\sim C_i$ \u5411\u8be5\u70b9\u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u8be5\u70b9\u5411\u5217 $B_i\\sim D_i$ \u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u8868\u793a\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u5bf9\u4e8e\u70b9\u7684\u5339\u914d\u3002\n\n\u540c\u65f6\uff0c\u70b9\u5b58\u5728\u5bb9\u91cf\u7684\u9650\u5236\uff0c\u6240\u4ee5\u8981\u5c06\u70b9\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u518d\u8fde\u8fb9\u3002\n\n\u7efc\u4e0a\u6240\u8ff0\uff0c\u5efa\u56fe\u8fc7\u7a0b\u5982\u4e0b\uff1a\n\n- \u5efa\u7acb\u6e90\u70b9\uff0c\u6c47\u70b9\u3002\n\n- \u5bf9\u4e8e\u6bcf\u4e00\u884c\u548c\u6bcf\u4e00\u5217\u5efa\u7acb\u4e00\u4e2a\u70b9\uff0c\u6e90\u70b9\u5411\u884c\u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u5217\u5411\u6c47\u70b9\u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\u3002\n\n- \u5bf9\u4e8e\u6bcf\u4e00\u4e2a\u70b9\uff0c\u5efa\u7acb\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u5165\u70b9\u5411\u51fa\u70b9\u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u884c $A_i\\sim C_i$ \u5411\u5165\u70b9\u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\uff0c\u51fa\u70b9\u5411\u5217 $B_i\\sim D_i$ \u8fde\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\u3002\n\n![](https://i.imgloc.com/2023/05/30/VtQDwL.png)\n\n\u56e0\u4e3a\u6d41\u7f51\u7edc\u662f\u5355\u4f4d\u7f51\u7edc\uff0c\u6240\u4ee5\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a $O(n^3)$\u3002($n,H,W$ \u540c\u9636)\n\n### \u4ee3\u7801\n\n```\n#include <iostream>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n#include <cstdio>\n#include <queue>\n\nusing namespace std;\nconst int N=200100;\n#define inf 0x3f3f3f3f\n\nint n,m,k,idx=1,S,T,in1,in2,in3,in4,cnt;\nint to[N],nxt[N],head[N],w[N];\nint cur[N],d[N];\n\nqueue <int> q;\n\nvoid add(int u,int v,int c){\n    idx++;to[idx]=v;nxt[idx]=head[u];head[u]=idx;w[idx]=c;\n    idx++;to[idx]=u;nxt[idx]=head[v];head[v]=idx;w[idx]=0;\n}\n\nbool bfs(){\n    memset(d,-1,sizeof d);\n    while(!q.empty()) q.pop();\n    cur[S]=head[S];\n    q.push(S);d[S]=0;\n    while(!q.empty()){\n        int now=q.front();q.pop();\n        for(int i=head[now];i;i=nxt[i]){\n            int v=to[i];\n            if(~d[v]||!w[i]) continue;\n            d[v]=d[now]+1;\n            cur[v]=head[v];\n            if(v==T) return 1;\n            q.push(v);\n        }\n    }\n    return 0;\n}\n\nint dfs(int s,int lim){\n    if(s==T) return lim;\n    int flow=0;\n    for(int i=cur[s];i&&flow<lim;i=nxt[i]){\n        int v=to[i];cur[s]=i;\n        if(d[v]!=d[s]+1||!w[i]) continue;\n        int t=dfs(v,min(w[i],lim-flow));\n        if(!t) d[v]=-1;\n        w[i]-=t;w[i^1]+=t;flow+=t;\n    }\n    return flow;\n}\n\nint dinic(){\n    int ans=0,flow=0;\n    while(bfs()) while(flow=dfs(S,inf)) ans+=flow;\n    return ans;\n}\n\nint main(){\n    scanf(\"%d%d%d\",&n,&m,&k);\n    S=N-5;T=N-6;cnt=n+m+1;\n    for(int i=1;i<=n;i++) add(S,i,1);//\u6e90\u70b9->\u884c\n    for(int i=n+1;i<=n+m;i++) add(i,T,1);//\u5217->\u6c47\u70b9\n    for(int i=1;i<=k;i++){\n        scanf(\"%d%d%d%d\",&in1,&in2,&in3,&in4);\n        for(int i=in1;i<=in3;i++) add(i,cnt,1);//\u884c->\u5165\u70b9\n        for(int i=n+in2;i<=n+in4;i++) add(cnt+1,i,1);//\u51fa\u70b9->\u5217\n        add(cnt,cnt+1,1);//\u5165\u70b9->\u51fa\u70b9\n        cnt+=2;\n    }\n    cout<<dinic()<<'\\n';\n    return 0;\n}\n```",
        "postTime": 1685456859,
        "uid": 986683,
        "name": "_Ponder_",
        "ccfLevel": 0,
        "title": "[ABC205F] Grid and Tokens \u9898\u89e3"
    },
    {
        "content": "\u672c\u6587\u540c\u6b65\u53d1\u8868\u4e8e\u81ea\u5efa\u535a\u5ba2\uff1a<https://shyblog.rotriw.com/index.php/archives/68/>\n\n\u9898\u76ee\u7684\u5185\u5bb9\u548c\u8303\u56f4\u975e\u5e38\u6697\u793a\u8fd9\u662f\u4e00\u9053\u7f51\u7edc\u6d41\u9898\u76ee\uff0c\u56e0\u800c\u8003\u8651\u5efa\u6a21\u3002\n\n\u5bf9\u4e8e\u7f51\u683c\u7684\u7f51\u7edc\u6d41\u5efa\u6a21\uff0c\u901a\u5e38\u662f\u8003\u8651\u884c\u5217\u5206\u5f00\u3002\u6211\u4eec\u53ef\u4ee5\u8ba4\u4e3a\u6bcf\u4e2a\u884c\u548c\u5217\u4ee3\u8868\u7684\u70b9\u5206\u522b\u662f\u70b9\u5bb9\u91cf\u9650\u5236\u4e3a $1$ \u7684\u6e90\u70b9\u548c\u6c47\u70b9\uff0c\u56e0\u6b64\u8fd9\u662f\u4e00\u4e2a $h$ \u4e2a\u6e90\u70b9\u548c $w$ \u4e2a\u6c47\u70b9\u7684\u6a21\u578b\u3002\u63a5\u4e0b\u6765\u6211\u4eec\u53ea\u9700\u8981\u8003\u8651\u68cb\u5b50\u5982\u4f55\u5728\u6a21\u578b\u4e2d\u4f53\u73b0\u3002\u4e0d\u96be\u60f3\u5230\uff0c\u68cb\u5b50\u5176\u5b9e\u662f\u4e00\u4e2a\u70b9\u5bb9\u91cf\u9650\u5236\u4e3a $1$ \u7684\u70b9\uff0c\u5b83\u5141\u8bb8\u8303\u56f4\u5185\uff08$[A_i,C_i]$\uff09\u7684\u4ee3\u8868\u884c\u7684\u70b9\u6d41\u5165\uff0c\u6d41\u51fa\u5230\u8303\u56f4\u5185\uff08$[B_i,D_i]$\uff09\u7684\u7684\u4ee3\u8868\u5217\u7684\u70b9\u3002\n\n\u8fd9\u662f\u4e00\u4e2a\u591a\u6e90\u591a\u6c47\u5e26\u70b9\u5bb9\u91cf\u7684\u7f51\u7edc\uff0c\u6211\u4eec\u91c7\u53d6\u4ee5\u4e0b\u7684\u65b9\u6cd5\uff1a\n\n* \u5bf9\u4e8e\u591a\u6e90\u70b9\uff0c\u8bbe\u7f6e\u4e00\u4e2a\u8d85\u7ea7\u6e90\u70b9\u6d41\u5411\u4ed6\u4eec\uff0c\u6bcf\u6761\u5f27\u7684\u5bb9\u91cf\u9650\u5236\u90fd\u662f\u6e90\u70b9\u7684\u70b9\u5bb9\u91cf\uff08\u8fd9\u9053\u9898\u91cc\u662f $1$\uff09\uff1b\n* \u591a\u6c47\u70b9\u540c\u7406\u6dfb\u52a0\u8d85\u7ea7\u6c47\u70b9\uff1b\n* \u5bf9\u5e26\u70b9\u6743\u7684\u70b9\u62c6\u5f00\uff0c\u62c6\u6210\u5165\u70b9\u548c\u51fa\u70b9\uff0c\u6240\u6709\u5165\u8fb9\u8fde\u5411\u5165\u70b9\uff0c\u51fa\u8fb9\u4ece\u51fa\u70b9\u8fde\u51fa\uff0c\u5165\u70b9\u548c\u51fa\u70b9\u4e2d\u5bb9\u91cf\u4e3a\u8fd9\u4e2a\u70b9\u7684\u70b9\u5bb9\u91cf\u9650\u5236\uff08\u8fd9\u9053\u9898\u91cc\u662f $1$\uff09\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e00\u4e2a\u6837\u4f8b\u7684\u60c5\u51b5\uff0c\u6211\u4eec\u7684\u6a21\u578b\u5982\u4e0b\uff08\u56fe\u7247\u6765\u81ea\u5b98\u65b9\u9898\u89e3\uff09\uff1a\n\n![image](https://img.atcoder.jp/ghi/abc205_f_editorial.jpg)\n\n\u63a5\u4e0b\u6765\u8003\u8651\u5206\u6790\u590d\u6742\u5ea6\u3002\u4e0d\u96be\u53d1\u73b0\u6a21\u578b\u7684\u70b9\u6570\u662f $O(N+W+H)$ \u7684\uff0c\u800c\u8fb9\u6570\u662f $O((W+H)\\cdot n)$ \u7684\u3002\n\n\u8fd9\u5b9e\u9645\u4e0a\u662f\u4e00\u4e2a\u5355\u4f4d\u7f51\u7edc\uff0c\u53ef\u4ee5\u8bc1\u660e\uff0c\u5728\u5355\u4f4d\u7f51\u7edc\u4e0a\u7684 Dinic \u7b97\u6cd5\u7684\u590d\u6742\u5ea6\u662f $O(\\sqrt m\\cdot n)$ \u7684\uff0c\u53ef\u4ee5\u901a\u8fc7\u672c\u9898\u3002\n\n\u4e0b\u9762\u662f\u793a\u4f8b\u4ee3\u7801\uff1a\n\n```cpp\n//\n// Problem: [ABC205F] Grid and Tokens\n// Contest: Luogu\n// URL: https://www.luogu.com.cn/problem/AT_abc205_f\n// Memory Limit: 1 MB\n// Time Limit: 2000 ms\n\n#include <cstring>\n#include <iostream>\n#include <queue>\n#include <vector>\nusing namespace std;\n#define maxn 500\n#define INF 0x3f3f3f3f\n\nstruct Edge\n{\n    int from, to, cap, flow;\n\n    Edge( int u, int v, int c, int f ) : from( u ), to( v ), cap( c ), flow( f )\n    {\n    }\n};\n\nstruct Dinic\n{\n    int n, m, s, t;\n    vector< Edge > edges;\n    vector< int > G[ maxn ];\n    int d[ maxn ], cur[ maxn ];\n    bool vis[ maxn ];\n\n    void init( int n )\n    {\n        for ( int i = 0; i < n; i++ )\n            G[ i ].clear();\n        edges.clear();\n    }\n\n    void AddEdge( int from, int to, int cap )\n    {\n        // cerr << from << \" \" << to << \" \" << cap << endl;\n        edges.push_back( Edge( from, to, cap, 0 ) );\n        edges.push_back( Edge( to, from, 0, 0 ) );\n        m = edges.size();\n        G[ from ].push_back( m - 2 );\n        G[ to ].push_back( m - 1 );\n    }\n\n    bool BFS()\n    {\n        memset( vis, 0, sizeof( vis ) );\n        queue< int > Q;\n        Q.push( s );\n        d[ s ] = 0;\n        vis[ s ] = 1;\n        while ( !Q.empty() )\n        {\n            int x = Q.front();\n            Q.pop();\n            for ( int i = 0; i < G[ x ].size(); i++ )\n            {\n                Edge& e = edges[ G[ x ][ i ] ];\n                if ( !vis[ e.to ] && e.cap > e.flow )\n                {\n                    vis[ e.to ] = 1;\n                    d[ e.to ] = d[ x ] + 1;\n                    Q.push( e.to );\n                }\n            }\n        }\n        return vis[ t ];\n    }\n\n    int DFS( int x, int a )\n    {\n        if ( x == t || a == 0 )\n            return a;\n        int flow = 0, f;\n        for ( int& i = cur[ x ]; i < G[ x ].size(); i++ )\n        {\n            Edge& e = edges[ G[ x ][ i ] ];\n            if ( d[ x ] + 1 == d[ e.to ]\n                 && ( f = DFS( e.to, min( a, e.cap - e.flow ) ) ) > 0 )\n            {\n                e.flow += f;\n                edges[ G[ x ][ i ] ^ 1 ].flow -= f;\n                flow += f;\n                a -= f;\n                if ( a == 0 )\n                    break;\n            }\n        }\n        return flow;\n    }\n\n    int Maxflow( int s, int t )\n    {\n        this->s = s;\n        this->t = t;\n        int flow = 0;\n        while ( BFS() )\n        {\n            memset( cur, 0, sizeof( cur ) );\n            flow += DFS( s, INF );\n        }\n        return flow;\n    }\n} G;\nint main()\n{\n    cin.tie( 0 );\n    int n, w, h;\n    cin >> h >> w >> n;\n    int S = 0, T = 2 * n + w + h + 1;\n    for ( int i = 1; i <= h; i++ )\n    {\n        G.AddEdge( S, i, 1 );\n    }\n    for ( int i = 1; i <= w; i++ )\n    {\n        G.AddEdge( h + 2 * n + i, T, 1 );\n    }\n    for ( int i = 1; i <= n; i++ )\n    {\n        int a, b, c, d;\n        cin >> a >> b >> c >> d;\n        for ( int j = a; j <= c; j++ )\n        {\n            G.AddEdge( j, h + i, 1 );\n        }\n        for ( int j = b; j <= d; j++ )\n        {\n            G.AddEdge( h + n + i, h + 2 * n + j, 1 );\n        }\n        G.AddEdge( h + i, h + n + i, 1 );\n    }\n    cout << G.Maxflow( S, T ) << endl;\n}\n```\n\n",
        "postTime": 1671805460,
        "uid": 122079,
        "name": "songhongyi",
        "ccfLevel": 6,
        "title": "ABC 205 F \u9898\u89e3"
    }
]