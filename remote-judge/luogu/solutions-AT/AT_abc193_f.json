[
    {
        "content": "\u592a\u597d\u4e86\uff0c\u76f4\u63a5\u6765\u62a2\u4e00\u6ce2\u9898\u89e3\u9996\u6740\u3002\n\n\u770b\u4e0a\u53bb\u6ca1\u6709\u4ec0\u4e48\u5f88\u76f4\u89c2\u7684\u89e3\u6cd5\uff0c\u4e8e\u662f\u8003\u8651\u7f51\u7edc\u6d41\u3002\n\n**\u6211\u4eec\u6765\u4fee\u6539\u4e00\u4e0b\u9898\u76ee\u6761\u4ef6**\u3002\u5982\u679c\u8fd9\u4e2a\u9898\u662f\u201c\u76f8\u90bb\u4e24\u4e2a**\u540c\u8272**\u683c\u5b50\u8d21\u732e\u4e3a $1$\u201d\uff0c\u5c31\u53ef\u4ee5\u5957\u7528\u4e00\u4e2a\u5f88\u5178\u7684\u6700\u5c0f\u5272\u6a21\u578b\uff1a[P4313 \u6587\u7406\u5206\u79d1](https://www.luogu.com.cn/problem/P4313)\u3002\n\n\u4e3a\u4e86\u9632\u6b62\u6709\u4e9b\u540c\u5b66\u4e0d\u77e5\u9053\uff0c\u8fd8\u662f\u8bb2\u4e00\u4e0b\u8fd9\u4e2a\u6a21\u578b\uff1a\n\n\u628a\u6bcf\u4e2a\u683c\u5b50\u770b\u4f5c\u70b9\uff0c\u5212\u5206\u5230 $S$ \u96c6\u5408\u8868\u793a\u767d\u8272\uff0c\u5212\u5206\u5230 $T$ \u96c6\u5408\u8868\u793a\u9ed1\u8272\u3002\n\n- \u683c\u5b50\u662f ```?```\uff1a\u4e0d\u7528\u8fde\u8fb9\u3002\u6216\u8005\u7406\u89e3\u6210\u548c $S$ \u548c $T$ \u5404\u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $0$ \u7684\u8fb9\u4e5f\u884c\u3002\n\n- \u683c\u5b50\u662f ```B```\uff1a\u548c $T$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $inf$ \u7684\u8fb9\u3002\n\n- \u683c\u5b50\u662f ```W```\uff1a\u548c $S$ \u8fde\u4e00\u6761\u8fb9\u6743\u4e3a $inf$ \u7684\u8fb9\u3002\n\n\u5bf9\u4e8e\u6bcf\u5bf9**\u76f8\u90bb**\u683c\u5b50 $X,Y$\uff0c\u65b0\u5efa\u4e24\u4e2a\u865a\u70b9 $A,B$\uff0c\u8fde\u8fb9\u5982\u4e0b\uff1a\n\n![](https://cdn.luogu.com.cn/upload/image_hosting/5hq7nv62.png)\n\n\u8fd9\u91cc\uff0c\u4fdd\u7559 $S$ \u5230 $A$ \u7684\u8fb9\u4ee3\u8868 $X,Y$ \u90fd\u4e3a\u767d\u8272\uff0c\u4ea7\u751f $1$ \u8d21\u732e\uff1b\u4fdd\u7559 $B$ \u5230 $T$ \u7684\u8fb9\u4ee3\u8868 $X,Y$ \u90fd\u4e3a\u9ed1\u8272\uff0c\u4ea7\u751f $1$ \u8d21\u732e\u3002\n\n\u4e3a\u4ec0\u4e48\u5462\uff1f\u5047\u5982\u4fdd\u7559 $S$ \u5230 $A$ \u7684\u8fb9\uff0c\u800c $X,Y$ \u4e2d\u67d0\u4e2a\u70b9\u9009\u4e86\u9ed1\u8272\uff0c\u7531\u4e8e $inf$ \u8fb9\u4e0d\u80fd\u88ab\u5272\uff0c\u6b64\u65f6 $S,T$ \u4e00\u5b9a\u8054\u901a\uff0c\u4e0d\u6ee1\u8db3\u6761\u4ef6\u3002\u56e0\u6b64\uff0c\u8fd9\u6761\u8fb9\u4fdd\u7559\u5f53\u4e14\u4ec5\u5f53 $X,Y$ \u90fd\u9009\u767d\u8272\u3002$B$ \u4e5f\u662f\u540c\u7406\u3002\n\n\u6b64\u65f6\u7684\u7b54\u6848\u5c31\u662f\u201c\u8fb9\u6743\u4e3a $1$ \u7684\u8fb9\u6570-\u6700\u5c0f\u5272\u201d\u3002\n\n\u7136\u540e\u4f60\u4f1a\u8bf4\uff1a\u5c31\u8fd9\uff0c\u4f60\u628a\u9898\u76ee\u6761\u4ef6\u90fd\u6539\u4e86\uff0c\u7136\u540e\u505a\u51fa\u6765\u4e86\uff0c\u597d\u68d2\u68d2\u54e6\u3002\n\n\u55ef\u4f60\u8bf4\u7684\u4e0d\u65e0\u9053\u7406\uff0c\u5982\u679c\u6309\u539f\u9898\u6761\u4ef6\u6765\u505a\u7684\u8bdd\uff0c\u4e0a\u9762\u7684\u6a21\u578b\u5c31\u5931\u6548\u4e86\uff0c\u4f60\u65e0\u6cd5\u4fdd\u8bc1\u4e24\u4e2a\u683c\u5b50\u5f02\u8272\u65f6\u4ea7\u751f\u8d21\u732e $1$\u3002\n\n\u8fd9\u4e2a\u95ee\u9898\u5f88\u597d\u89e3\u51b3\uff1a\u6211\u4eec\u4ee4\u6240\u6709\u201c\u884c\u7f16\u53f7+\u5217\u7f16\u53f7\u4e3a\u5947\u6570\u201d\u7684\u683c\u5b50\u53cd\u8272\uff0c\u6bd4\u5982 $s[1][2]=B$\uff0c\u5c31\u6539\u6210 $s[1][2]=W$\uff0c\u800c $s[2][2]$ \u7684\u989c\u8272\u4e0d\u6539\u53d8\u3002\u8fd9\u6837\u5c31\u8f6c\u5316\u6210\u4e4b\u524d\u90a3\u4e2a\u53ef\u4ee5\u89e3\u51b3\u7684\u95ee\u9898\u4e86\u3002\u7531\u4e8e\u8d21\u732e\u53ea\u548c\u76f8\u90bb\u683c\u5b50\u989c\u8272\u6709\u5173\uff0c\u662f\u4e0d\u4f1a\u4ea7\u751f\u4ec0\u4e48\u989d\u5916\u5f71\u54cd\u7684\u3002\n\n\u505a\u5b8c\u5566\uff0c\u4e0a Code\n\n```cpp\n#include<bits/stdc++.h>\n#define p(x,y) (((x)-1)*n+(y))\nusing namespace std;\nconst int maxn=5e4,inf=0x3f3f3f3f;\nint n,tot,N;\nchar s[103][103];\nnamespace Edge{\n\tint head[maxn+5],flag=1;\n\tstruct star{int to,nxt,val;}edge[3000005];\n\tinline void add(int u,int v,int val){\n\t\tedge[++flag]=(star){v,head[u],val},head[u]=flag;\n\t}\n\tinline void exadd(int u,int v,int val){add(u,v,val),add(v,u,0);}\n}using namespace Edge;\nnamespace min_cut{\n\tconst int S=0,T=maxn+1;\n\tint depth[maxn+5],now[maxn+5];\n\tinline bool bfs(){\n\t\tmemcpy(now,head,sizeof(now));\n\t\tmemset(depth,0,sizeof(depth));\n\t\tqueue<int>q;\n\t\tq.emplace(S),depth[S]=1;\n\t\twhile(q.size()){\n\t\t\tint h=q.front();q.pop();\n\t\t\tfor(int i=head[h];i;i=edge[i].nxt){\n\t\t\t\tint v=edge[i].to;\n\t\t\t\tif(depth[v]||!edge[i].val)continue;\n\t\t\t\tdepth[v]=depth[h]+1,q.emplace(v);\n\t\t\t\tif(v==T)return 1;\n\t\t\t}\n\t\t}return 0;\n\t}\n\tint dfs(int id,int flow){\n\t\tif(id==T||!flow)return flow;\n\t\tint tot=0;\n\t\tfor(int &i=now[id];i;i=edge[i].nxt){\n\t\t\tint v=edge[i].to;\n\t\t\tif(depth[v]!=depth[id]+1||!edge[i].val)continue;\n\t\t\tint res=dfs(v,min(flow,edge[i].val));\n\t\t\tedge[i].val-=res,edge[i^1].val+=res;\n\t\t\ttot+=res,flow-=res;\n\t\t}return tot;\n\t}\n\tinline int Dinic(){\n\t\tint res=0;\n\t\twhile(bfs())res+=dfs(S,inf);\n\t\treturn res;\n\t}\n}using namespace min_cut;\nint main(){\n\tscanf(\"%d\",&n),N=p(n,n);\n\tfor(int i=1;i<=n;i++)scanf(\"%s\",s[i]+1);\n\tfor(int i=1;i<=n;i++)\n\tfor(int j=1;j<=n;j++){\n\t\tif(s[i][j]=='B')((i+j)&1)?exadd(S,p(i,j),inf):exadd(p(i,j),T,inf);\n\t\tif(s[i][j]=='W')((i+j)&1)?exadd(p(i,j),T,inf):exadd(S,p(i,j),inf);\n\t\tif(i<n){\n\t\t\t++N,exadd(S,N,1);\n\t\t\texadd(N,p(i,j),inf),exadd(N,p(i+1,j),inf);\n\t\t\t++N,exadd(N,T,1);\n\t\t\texadd(p(i,j),N,inf),exadd(p(i+1,j),N,inf);\n\t\t}\n\t\tif(j<n){\n\t\t\t++N,exadd(S,N,1);\n\t\t\texadd(N,p(i,j),inf),exadd(N,p(i,j+1),inf);\n\t\t\t++N,exadd(N,T,1);\n\t\t\texadd(p(i,j),N,inf),exadd(p(i,j+1),N,inf);\n\t\t}\n\t}printf(\"%d\",N-p(n,n)-Dinic());return 0;\n}\n```\n",
        "postTime": 1676378494,
        "uid": 148226,
        "name": "Fan_sheng",
        "ccfLevel": 6,
        "title": "AT_abc193_f Zebraness"
    }
]