[
    {
        "content": "\u9898\u610f\uff1a\u7ed9\u51fam\u4e2a\u533a\u95f4\uff0c\u6c42\u6709\u591a\u5c11\u4e2a\u533a\u95f4\u80fd\u88ab\u5176\u4ed6\u533a\u95f4\u5b8c\u5168\u8986\u76d6\n\n\u5c06\u6240\u6709\u533a\u95f4\u6309\u7167\u5de6\u7aef\u70b9\u6392\u5e8f\uff0c\u4ee5\u8d2a\u5fc3\u7684\u65b9\u6cd5\u626b\u4e00\u904d\uff0c\u5c31\u80fd\u627e\u5230\u6ca1\u6709\u88ab\u5176\u4ed6\u533a\u95f4\u5b8c\u5168\u8986\u76d6\u7684\u533a\u95f4\u4e86\n\n\u65e2\u7136\u4f60\u80fd\u627e\u5230\u8fd9\u9898\uff0c\u6211\u76f8\u4fe1\u4f60\u80fd\u77ac\u95f4\u505a\u51fa\u6765\u7684\n\n$Code:$\n\n```cpp\n#include<iostream>\n#include<cstdio>\n#include<algorithm>\nusing namespace std;\nstruct w{int id,l,r;}e[100010];\nbool cmp(w a,w b){return a.l<b.l;}\nint a[300010],n,m,cpr,cpr_l,sum;\nbool vis[100010];\nint main(){\n\tscanf(\"%d%d\",&n,&m);\n    for(int i=1;i<=m;i++){\n        scanf(\"%d%d\",&e[i].l,&e[i].r);\n        e[i].id=i;\n    }\n    sort(e+1,e+m+1,cmp);\n    cpr=1,cpr_l=e[1].l;\n    for(int i=2;i<=m;i++){\n        if(e[i].l>cpr_l) if(!vis[e[cpr].id]){sum++;vis[e[cpr].id]=1;}\n        if(e[i].r>e[cpr].r){\n            cpr_l=max(cpr_l,e[cpr].r+1);\n            cpr=i;\n        }\n        else cpr_l=max(cpr_l,e[i].r+1);\n    }\n    if(cpr_l<=e[cpr].r) if(!vis[e[cpr].id]){sum++;vis[e[cpr].id]=1;}\n    printf(\"%d\\n\",m-sum);\n    for(int i=1;i<=m;i++) if(!vis[i]) printf(\"%d\\n\",i);\n    return 0;\n}\n\n```",
        "postTime": 1541407641,
        "uid": 64261,
        "name": "\u7d2b\u9898",
        "ccfLevel": 8,
        "title": "\u9898\u89e3 AT1504 \u3010\u30c9\u30ad\u30c9\u30ad\u30c7\u30fc\u30c8\u5927\u4f5c\u6226\u9ad8\u6a4b\u541b\u3011"
    },
    {
        "content": "\u770b\u5230\u6ca1\u6709\u7528\u6253\u6807\u8bb0\u7684\u5c31\u6765\u53d1\u9898\u89e3\u4e86\n\n _AC 1.24s_ \n\n------------\n\n\u672c\u9898\u5927\u610f\u662f\u5feb\u901f\u67e5\u8be2\u533a\u95f4\u662f\u5426\u8986\u76d6\u4e00\u4e2a**\u4e0d\u88ab\u5176\u4ed6\u533a\u95f4\u8986\u76d6\u7684\u6559\u5ba4**\uff0c\n\n\u9996\u5148\u4f7f\u7528\u533a\u95f4\u6807\u8bb0\u53ef\u4ee5\u5feb\u901f\u627e\u5230\u8fd9\u6837\u7684\u72ec\u7acb\u7684\u6559\u5ba4\u3002\u4ece\u9996\u5230\u5c3e\u626b\u4e00\u904d\u6807\u8bb0\uff0c\u5f53\u7edf\u8ba1\u7684\u8986\u76d6\u533a\u95f4\u4e2a\u6570\u4e3a1\u65f6\u628a\u6559\u5ba4\u6807\u8bb0\u4e0b\u6765\u3002\n\n\u90a3\u4e48\u5982\u4f55\u67e5\u8be2\u533a\u95f4\u662f\u5426\u8986\u76d6\u8fd9\u4e9b\u6559\u5ba4\u5462\uff1f\u663e\u7136\uff0c\u5982\u679c\u533a\u95f4\u5de6\u7aef\u5728\u6559\u5ba4\u5de6\u8fb9\uff0c\u533a\u95f4\u53f3\u7aef\u5728\u6559\u5ba4\u53f3\u8fb9\uff0c\u5fc5\u7136\u8986\u76d6\u8be5\u6559\u5ba4\u3002\u6211\u4eec\u5982\u679c\u80fd\u5c06\u6bcf\u4e2a\u4f4d\u7f6e\u5bf9\u5e94\u7684\u524d\u4e00\u4e2a\u72ec\u7acb\u6559\u5ba4\u4f4d\u7f6e\u6807\u8bb0\u4e0b\u6765\uff0c\u5c31\u80fd\u5728O(1)\u5185\u786e\u5b9a\u662f\u5426\u8986\u76d6\u4e86\u3002\n\n\u4e8e\u662f\u6211\u4eec\u5728\u626b\u6807\u8bb0\u65f6\uff0c\u6bcf\u6b21\u5f53\u78b0\u5230\u6ee1\u8db3\u6761\u4ef6\u7684\u6559\u5ba4\u65f6\u5c06\u524d\u4e00\u4e2a\u6559\u5ba4\u7684\u4f4d\u7f6e\u66f4\u65b0\uff0c\u5e76\u8bb0\u5f55\u5728\u8be5\u6559\u5ba4\u5bf9\u5e94\u7684\u6570\u7ec4\u4f4d\u7f6e\u4e0a\u3002\uff08\u53ef\u4ee5\u4e0d\u7528bool\u4e86\uff09\n\n\u6700\u540e\u786e\u5b9a\u533a\u95f4\u5de6\u7aef\u7684\u4f4d\u7f6e\u662f\u5426\u5927\u4e8e\u533a\u95f4\u53f3\u7aef\u6307\u5411\u7684\u524d\u4e00\u4e2a\u6559\u5ba4\uff0c\u5c06\u5176\u7edf\u8ba1\u540e\u4e22\u8fdb\u8f93\u51fa\u5e8f\u5217\u91cc\u3002\n\n\u65f6\u95f4\u590d\u6742\u5ea6O(n+m).\n\n```cpp\n#include<iostream>\n#include<cstring> \n#include<queue>\nusing namespace std;\nint n,m,room[300100];\nstruct bet{\n\tint l,r;\n} zone[100100];\nqueue <int> ansq;\nint main()\n{\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;i++){\n\t\tcin>>zone[i].l>>zone[i].r;\n\t\troom[zone[i].l]++;\n\t\troom[zone[i].r+1]--;\n\t}\n\tint cnt=0,pos=0,ans=0;\t//\u67e5\u627e\u4ec5\u88ab\u4e00\u4e2a\u533a\u95f4\u8986\u76d6\u7684\u6559\u5ba4,\u540c\u65f6\u6807\u8bb0\u8be5\u4f4d\u7f6e\u5bf9\u5e94\u7684\u524d\u4e00\u4e2a\u6ee1\u8db3\u6761\u4ef6\u7684\u6559\u5ba4 \n\tfor(int i=1;i<=n;i++){\n\t\tcnt+=room[i];\n\t\tif(cnt==1)\tpos=i;\n\t\troom[i]=pos;\t//\u4f7f\u7528\u5b8c\u6807\u8bb0\u540e\u53ef\u4ee5\u5faa\u73af\u4f7f\u7528\uff08\u53ef\u56de\u6536\u5783\u573e\uff09 \n\t}\n\tfor(int i=1;i<=m;i++)\n\t\tif(room[zone[i].r]<zone[i].l)\t//\u662f\u5426\u8986\u76d6\u524d\u4e00\u4e2a\u6559\u5ba4 \n\t\t{\n\t\t\tans++;ansq.push(i);\t\t//\u653e\u8fdb\u8f93\u51fa\u961f\u5217 \n\t\t}\n\tcout<<ans<<endl;\n\twhile(ansq.size()){\n\t\tcout<<ansq.front()<<endl;\n\t\tansq.pop();\n\t}\n\treturn 0;\n}\n```\n",
        "postTime": 1571913553,
        "uid": 137422,
        "name": "JasonL",
        "ccfLevel": 9,
        "title": "\u9898\u89e3 AT1504 \u3010\u30c9\u30ad\u30c9\u30ad\u30c7\u30fc\u30c8\u5927\u4f5c\u6226\u9ad8\u6a4b\u541b\u3011"
    },
    {
        "content": "## \u8eab\u8d25\u540d\u88c2\n\n\u8fd9\u4e48\u4e00\u9053\u9898\u76ee\u6211\u7adf\u7136\u8fd8\u4ea4\u4e86\u4e24\u53d1\u2026\u2026\n\n\u4e0d\u60f3\u5199\u6b63\u5e38\u89e3\u6cd5\n\n\u4e8e\u662f\u5c31\u6781\u5176\u65e0\u804a\u5730\u5199\u4e86\u4e2a\u7ebf\u6bb5\u6811\n\n\uff08\u8fde\u6211\u81ea\u5df1\u90fd\u611f\u53f9\u6211\u4e3a\u4ec0\u4e48\u8fd9\u4e48\u5927\u6750\u5c0f\u7528\uff09\n\n~~\uff08\u53ef\u80fd\u5c31\u9002\u5408\u6211\u8fd9\u79cd\u5934\u8111\u7b80\u5355\u7684\u65e0\u8111\u9009\u624b\u5427QwQ\uff09~~\n\n\u663e\u7136\uff0c\u6211\u4eec\u53ea\u9700\u8981\u5199\u4e00\u68f5\u8d44\u74f7\u533a\u95f4\u4fee\u6539\u4e0e\u533a\u95f4\u6700\u5c0f\u503c\u7684\u7ebf\u6bb5\u6811\u5c31\u884c\u4e86\n\n\u6211\u4eec\u9996\u5148\u628a\u6bcf\u4e2a\u533a\u95f4\u5728\u7ebf\u6bb5\u6811\u4e0a\u90fd+1\n\n\u7136\u540e\u6211\u4eec\u5728\u67e5\u8be2\u4e00\u4e2a\u626b\u9664\u533a\u95f4\u662f\u5426\u5408\u6cd5\u7684\u65f6\u5019\uff0c\u6211\u4eec\u53ea\u9700\u5c06\u8fd9\u4e2a\u533a\u95f4\u96c6\u4f53-1\uff0c\u5982\u679c\u8fd9\u4e2a\u533a\u95f4\u7684$\\min$\u503c\u4e3a0\uff0c\u90a3\u4e48\u4ee3\u8868\u8fd9\u4e2a\u533a\u95f4\u4e0d\u5408\u6cd5\uff0c\u5426\u5219\u5219\u5408\u6cd5QwQ\n\n\u4e0a\u4ee3\u7801\n\n```cpp\n#include<bits/stdc++.h>\n\n#define ll long long\n#define INF 2147483647\n#define lc(a) (a << 1)\n#define rc(a) (a << 1 | 1)\n\nint inp(){\n    char c = getchar();\n    while(c < '0' || c > '9')\n        c = getchar();\n    int sum = 0;\n    while(c >= '0' && c <= '9'){\n        sum = sum * 10 + c - '0';\n        c = getchar();\n    }\n    return sum;\n}\n\nstruct SEG_Tree{\n    struct SEG{\n        int l;\n        int r;\n        int min;\n        int lazy;\n    }t[10000000];\n\n    void push_up(int cur){\n        t[cur].min = std::min(t[lc(cur)].min, t[rc(cur)].min);\n    }\n\n    void push_down(int cur){\n        t[lc(cur)].min += t[cur].lazy;\n        t[rc(cur)].min += t[cur].lazy;\n        t[lc(cur)].lazy += t[cur].lazy;\n        t[rc(cur)].lazy += t[cur].lazy;\n        t[cur].lazy = 0;\n    }\n\n    void build(int cur, int l, int r){\n        t[cur].l = l;\n        t[cur].r = r;\n        t[cur].lazy = 0;\n        t[cur].min = 0;\n        if(l == r)\n            return ;\n        int mid = (l + r) >> 1;\n        build(lc(cur), l, mid);\n        build(rc(cur), mid + 1, r);\n    }\n\n    void modify(int cur, int l, int r, int c){\n        // printf(\"%d \", cur);\n        push_down(cur);\n        if(t[cur].r < l || t[cur].l > r)\n            return ;\n        if(t[cur].l >= l && t[cur].r <= r){\n            t[cur].min += c;\n            t[cur].lazy += c;\n            return ;\n        }\n        modify(lc(cur), l, r, c);\n        modify(rc(cur), l, r, c);\n        push_up(cur);\n    }\n\n    int query(int cur, int l, int r){\n        push_down(cur);\n        if(t[cur].r < l || t[cur].l > r)\n            return INF;\n        if(t[cur].l >= l && t[cur].r <= r)\n            return t[cur].min;\n        return std::min(query(lc(cur), l, r), query(rc(cur), l, r));\n    }\n}t;\n\nint ans[300010];\nint l[300010];\nint r[300010];\nint cnt = 0;\n\nint main(){\n    int n = inp();\n    int m = inp();\n    for(int i = 1; i <= m; i++){\n        l[i] = inp();\n        r[i] = inp();\n    } \n    t.build(1, 1, n);\n    for(int i = 1; i <= m; i++)\n        t.modify(1, l[i], r[i], 1);\n    for(int i = 1; i <= m; i++){\n        t.modify(1, l[i], r[i], -1);\n        if(t.query(1, l[i], r[i]) != 0)\n            ans[++cnt] = i;\n        t.modify(1, l[i], r[i], 1);\n    }\n    printf(\"%d\\n\", cnt);\n    for(int i = 1; i <= cnt; i++)\n        printf(\"%d\\n\", ans[i]);\n}\n```\n\n",
        "postTime": 1543298901,
        "uid": 36362,
        "name": "Dilute",
        "ccfLevel": 7,
        "title": "\u9898\u89e3 AT1504 \u3010\u30c9\u30ad\u30c9\u30ad\u30c7\u30fc\u30c8\u5927\u4f5c\u6226\u9ad8\u6a4b\u541b\u3011"
    },
    {
        "content": "\u7528\u5dee\u5206\u5904\u7406\u51fa\u6bcf\u4e2a\u6559\u5ba4\u6253\u626b\u7684\u4eba\u6570\uff0c\u90a3\u4e48\uff0c\u201c\u80fd\u7fd8\u6389\u201d\u5c31\u7b49\u4ef7\u4e8e\u6240\u6709\u8981\u6253\u626b\u7684\u6559\u5ba4\u90fd\u6709\u81f3\u5c11\u4e24\u4eba\u6253\u626b\uff0c\u5373 $\\min_{l\\le i\\le r}a_i\\ge2$\uff0c\u6240\u4ee5\u76f4\u63a5 ST \u8868\u5c31\u597d\u4e86\n\ncode:\n\n```cpp\n#include<bits/stdc++.h>\nusing namespace std;\n\nint a[300005],lgs[300005];\nint l[100005],r[100005];\nint st[300005][20];\nint n,m,ans=0;\ninline int min(int x,int y){return x<y?x:y;}\ninline int ask(int x,int y){return min(st[x][lgs[y-x+1]],st[y-(1<<lgs[y-x+1])+1][lgs[y-x+1]]);} \nint main(){\n\tcin>>n>>m;\n\tfor(int i=1;i<=m;++i){\n\t\tcin>>l[i]>>r[i];\n\t\t++a[l[i]],--a[r[i]+1];//\u5dee\u5206\n\t}\n\tlgs[0]=-1;\n\tfor(int i=1;i<=n;++i)a[i]+=a[i-1],lgs[i]=lgs[i/2]+1,st[i][0]=a[i];\n\tfor(int j=1;j<=19;++j){//ST\u677f\u677f\n\t\tfor(int i=1;i+(1<<j)-1<=n;++i){\n\t\t\tst[i][j]=min(st[i][j-1],st[i+(1<<j-1)][j-1]);\n\t\t}\n\t}\n\tfor(int i=1;i<=m;++i)ans+=ask(l[i],r[i])>1;cout<<ans<<endl;//\u8f93\u51fa\n\tfor(int i=1;i<=m;++i){\n\t\tif(ask(l[i],r[i])>1){\n\t\t\tcout<<i<<endl;\n\t\t}\n\t}\n}\n```",
        "postTime": 1639460465,
        "uid": 383785,
        "name": "Hagasei",
        "ccfLevel": 6,
        "title": "AT1504 \u9898\u89e3"
    },
    {
        "content": "### AT1504 \u30c9\u30ad\u30c9\u30ad\u30c7\u30fc\u30c8\u5927\u4f5c\u6226\u9ad8\u6a4b\u541b\n\n>\u9898\u76ee\u5927\u610f\uff1a\u7ed9\u5b9a $m$ \u4e2a\u533a\u95f4\uff0c\u6c42\u5f53 $1$ \u4e2a\u533a\u95f4\u6d88\u5931\u65f6\uff0c\u5b83\u6240\u5305\u542b\u7684\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u4ecd\u88ab\u5176\u4ed6\u533a\u95f4\u5305\u542b\u7684\u533a\u95f4\u7684\u4e2a\u6570\u3002\n\n\u5176\u5b9e\u8fd9\u4e00\u9898\u5e76\u4e0d\u96be\uff0c\u7531\u9898\u53ef\u4ee5\u77e5\u9053\uff0c\u5f53\u4e00\u4e2a\u533a\u95f4\u6ee1\u8db3\u8981\u6c42\uff0c\u5f53\u4e14\u4ec5\u5f53\u8fd9\u4e00\u4e2a\u533a\u95f4\u7684\u6bcf\u4e00\u4e2a\u5143\u7d20\u81f3\u5c11\u88ab\u4e24\u4e2a\u533a\u95f4\u8986\u76d6\uff0c\u7531\u6b64\uff0c\u6211\u4eec\u53ef\u4ee5\u60f3\u5230\u5c06\u533a\u95f4\u5185\u7684\u5143\u7d20\u90fd\u52a0 $1$ \uff0c\u7528\u7ebf\u6bb5\u6811\u7ef4\u62a4\u533a\u95f4\u52a0\uff0c\u6c42\u533a\u95f4\u6700\u5c0f\u503c\uff0c\u82e5\u8be5\u533a\u95f4\u6700\u5c0f\u503c\u4e3a $1$ \uff0c\u5219\u8bf4\u660e\u8be5\u533a\u95f4\u5185\u6709\u5143\u7d20\u53ea\u88ab\u8fd9\u4e00\u533a\u95f4\u6240\u8986\u76d6\uff0c\u4e0d\u6ee1\u8db3\u6761\u4ef6\uff0c\u53cd\u4e4b\uff0c\u5219\u7edf\u8ba1\u7b54\u6848\u3002\n\n\u518d\u770b\u9898\u9762\uff0c\u6211\u4eec\u53c8\u53ef\u4ee5\u53d1\u73b0\uff0c\u8be5\u9898\u7684\u533a\u95f4\u4fee\u6539\u662f\u653e\u5728\u4e00\u8d77\u7684\uff0c\u6240\u4ee5\u6211\u4eec\u53c8\u53ef\u4ee5\u60f3\u5230\u7528\u5dee\u5206 $O(1)$ \u7684\u4fee\u6539\uff0c\u5728\u4e00\u6b21\u6c42\u51fa\u539f\u5e8f\u5217\uff0c\u518d\u7528 $ST$ \u8868\u53bb\u7ef4\u62a4\u533a\u95f4\u6700\u5c0f\u503c\u5373\u53ef\uff0c\u672c\u8d28\u548c\u7ebf\u6bb5\u6811\u662f\u4e00\u6837\u7684\u3002\n\n\u53e6\u5916\uff0c\u8fd9\u4e00\u9898\u7684\u6837\u4f8b\u4e09\u6709\u8bef\uff0c\u8f93\u51fa\u5e94\u4e3a ```0``` \uff0c\u5e76\u975e\u65e0\u8f93\u51fa\uff0c\u5426\u5219\u4f1a\u5728\u7b2c\u4e09\u4e2a\u70b9\u7b54\u6848\u9519\u8bef\u3002\n\n#### \u8f93\u5165 #3\n```\n10 3\n1 4\n2 6\n6 10\n```\n#### \u8f93\u51fa #3\n```\n0\n```\n\n#### \u7ebf\u6bb5\u6811\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define INF 0x3f3f3f3f\n#define inf 0x7FFFFFFF\n#define LL long long\n#define endl '\\n'\nusing namespace std;\nlong long read(){\n\tlong long q=0,w=1;\n\tchar ch=getchar();\n\twhile(ch>'9' || ch<'0'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){q=q*10+(ch-'0');ch=getchar();}\n\treturn q*w;\n} //\u5feb\u8bfb\nnamespace Seg_tree{ //\u7ebf\u6bb5\u6811\n\tconst long long N = 3e5+95;\n\tstruct Node{\n\t\tLL l,r,dat;\n\t\tLL lazybag;\n\t}s[N<<3];\n\tvoid Build(LL p,LL l,LL r){\n\t\ts[p].l=l;s[p].r=r;s[p].dat=0;\n\t\tif(l==r)return ;\n\t\tLL mid=((l+r)>>1);\n\t\tBuild(p*2,l,mid);\n\t\tBuild(p*2+1,mid+1,r);\n\t\treturn ;\n\t}\n\tvoid Pushdown(LL p){\n\t\tif(s[p].l==s[p].r){\n\t\t\ts[p].lazybag=0;\n\t\t\treturn ;\n\t\t}\n\t\ts[p*2].lazybag+=s[p].lazybag;\n\t\ts[p*2].dat+=s[p].lazybag;\n\t\ts[p*2+1].lazybag+=s[p].lazybag;\n\t\ts[p*2+1].dat+=s[p].lazybag;\n\t\ts[p].lazybag=0;\n\t\treturn ;\n\t}\n\tvoid Updata(LL p,LL l,LL r,LL x){\n\t\tPushdown(p);\n\t\tif(l<=s[p].l && s[p].r<=r){\n\t\t\ts[p].dat+=x;\n\t\t\ts[p].lazybag+=x;\n\t\t\treturn ;\n\t\t}\n\t\tLL mid=((s[p].l+s[p].r)>>1);\n\t\tif(l<=mid)Updata(p*2,l,r,x);\n\t\tif(mid<r)Updata(p*2+1,l,r,x);\n\t\ts[p].dat=min(s[p*2].dat,s[p*2+1].dat);\n\t\treturn ;\n\t}\n\tLL Query(LL p,LL l,LL r){\n\t\tPushdown(p);\n\t\tif(s[p].r<l || r<s[p].l)return inf;\n\t\tif(l<=s[p].l && s[p].r<=r)return s[p].dat;\n\t\tLL mid=((s[p].l+s[p].r)>>1);\n\t\treturn min(Query(p*2,l,r),Query(p*2+1,l,r));\n\t}\n}\nconst long long N = 3e5+95;\nlong long n,m,l[N],r[N],cnt;\nvector<long long>ans;\nint main(){\n\tn=read();m=read();\n\tSeg_tree::Build(1,1,n); //\u6784\u5efa\u7ebf\u6bb5\u6811\n\tfor(LL i=1;i<=m;i++){\n\t\tl[i]=read();r[i]=read();\n\t\tSeg_tree::Updata(1,l[i],r[i],1); //\u533a\u95f4\u4fee\u6539\n\t}\n\tfor(LL i=1;i<=m;i++){\n\t\tLL step=Seg_tree::Query(1,l[i],r[i]); //\u533a\u95f4\u6c42\u6700\u5c0f\u503c\n\t\tif(step!=1){ //\u6ee1\u8db3\u6761\u4ef6\n\t\t\tcnt++;ans.push_back(i);\n\t\t}\n\t}\n//\tif(cnt==0)return 0; \n\tcout<<cnt<<endl; //\u4e00\u5b9a\u8981\u8f93\u51fa\u624d\u53ef\u4ee5\n\tfor(LL i=0;i<cnt;i++)\n\t\tcout<<ans[i]<<endl; //\u8f93\u51fa\u6240\u6709\u5408\u6cd5\u7b54\u6848\n\treturn 0;\n}\n```\n#### \u5dee\u5206 $+$ ST\u8868\u4ee3\u7801\uff1a\n```cpp\n#include<bits/stdc++.h>\n#define INF 0x3f3f3f3f\n#define inf 0x7FFFFFFF\n#define LL long long\n#define endl '\\n'\nusing namespace std;\nlong long read(){\n\tlong long q=0,w=1;\n\tchar ch=getchar();\n\twhile(ch>'9' || ch<'0'){if(ch=='-')w=-1;ch=getchar();}\n\twhile(ch>='0'&&ch<='9'){q=q*10+(ch-'0');ch=getchar();}\n\treturn q*w;\n}//\u5feb\u8bfb\nconst long long N = 3e5+95;\nlong long n,m,l[N],r[N],cnt;\nvector<long long>ans;\nlong long cha[N],s[N];\nstruct ST{ //ST\u8868\n\tlong long dp[N][21];\n\tvoid Init(LL n){ //\u9884\u5904\u7406\n\t\tLL len=log(n)/log(2);\n\t\tfor(LL i=1;i<=n;i++)dp[i][0]=s[i];\n\t\tfor(LL i=1;i<=len;i++)\n\t\t\tfor(LL j=1;j<=n-(1<<i)+1;j++)\n\t\t\t\tdp[j][i]=min(dp[j][i-1],dp[j+(1<<(i-1))][i-1]);\n\t\treturn ;\n\t}\n\tLL Ask(LL l,LL r){//\u67e5\u8be2\u6700\u5c0f\u503c\n\t\tLL len=log((r-l+1))/log(2);\n\t\treturn min(dp[l][len],dp[r-(1<<len)+1][len]);\n\t}\n}st;\nint main(){\n\tn=read();m=read();\n\tfor(LL i=1;i<=m;i++){\n\t\tl[i]=read();r[i]=read();\n\t\tcha[l[i]]++;cha[r[i]+1]--; //\u5dee\u5206\u64cd\u4f5c\n\t}\n\tfor(LL i=1;i<=n;i++)s[i]=(s[i-1]+cha[i]); //\u6c42\u51fa\u539f\u5e8f\u5217\n\tst.Init(n); //ST\u8868\u63d0\u524d\u9884\u5904\u7406\u6700\u5c0f\u503c\n\tfor(LL i=1;i<=m;i++){\n\t\tif(st.Ask(l[i],r[i])>=2){ //\u6ee1\u8db3\u6761\u4ef6\n\t\t\tcnt++;ans.push_back(i);\n\t\t}\n\t}\n\tcout<<cnt<<endl;\n\tfor(LL i=0;i<cnt;i++)\n\t\tcout<<ans[i]<<endl; //\u8f93\u51fa\u6240\u6709\u5408\u6cd5\u7b54\u6848\n\treturn 0;\n}\n```",
        "postTime": 1613953751,
        "uid": 229378,
        "name": "\u6731\u5c79\u5e06",
        "ccfLevel": 0,
        "title": "\u9898\u89e3 AT1504 \u3010\u30c9\u30ad\u30c9\u30ad\u30c7\u30fc\u30c8\u5927\u4f5c\u6226\u9ad8\u6a4b\u541b\u3011"
    }
]