
<% this.title = user.username + ' - 用户'; %>
<% include header %>

<link href="<%- lib('element-plus/2.2.28/index.min.css') %>" rel="stylesheet">
<script src="<%- lib('vue/3.2.36/vue.global.min.js') %>"></script>
<script src="<%- lib('element-plus/2.2.28/index.full.min.js') %>"></script>
<script src="<%- lib('echarts/echarts.js') %>"></script>

<div class="padding">
    <div id="app">
        <h1 style="margin-bottom: 20px"> 比赛统计分析  </h1>

        <a href="/contest/<%= contest.id%>"> <h2> 比赛 <%= contest.title%> </h2> </a>
        <h2> 参数总人数 <%= player_num%> </h2>

        <el-divider content-position="left" style="margin-top: 50px;"><h3 style="color: #0053A1">补题统计</h3></el-divider>
        <div style="display: flex; justify-content:center; margin-top: 50px;">
            <div ref="passBarChartRef" style="width: 1000px; height: 480px"> </div>
        </div>



        <el-divider content-position="left" ><h3 style="color: #0053A1">测试点统计</h3></el-divider>
        <div style="margin-top: 20px">
            <el-radio-group v-model="radio" @change="handle()">
                <el-radio v-for="(item, idx) in problems" :label="idx" size="large"> {{"ABCDEFGHIJKLMNOPQRSTUVWXYZ"[idx] + ". " + item.title }} </el-radio>
            </el-radio-group>
        </div>

        <div style="display: flex; justify-content:center; margin-top: 50px;">
            <div ref="BarChartRef" style="width: 1000px; height: 480px"> </div>
        </div>

    </div>
</div>


<script>
    const {createApp, ref, onMounted, reactive} = Vue;


    const contest = <%- serializejs(contest) %>
    const problems = <%- serializejs(problems) %>
    const player_num = <%= player_num%>
    const user_pass_category = <%- serializejs(user_pass_category)%>

    const barChartRef = ref(null)
    let barChart = undefined
    const radio = ref(0)
    const show = ref(false)
    // 指定图表的配置项和数据
    const barOpt = {
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'shadow'
            }
        },
        legend: {},
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'value',
        },
        yAxis: {
            type: 'category',
            data: []
        },
        series: [
            {
                name: '',
                type: 'bar',
                data: [],
                label: {
                    show: true,
                    position: 'inside'
                },
            },
        ]
    }

    const passBarChartRef = ref(null)
    let passBarChart = undefined
    const passBarOpt = {
        tooltip: {
            trigger: 'axis',
            axisPointer: {
                type: 'shadow'
            }
        },
        legend: {},
        grid: {
            left: '3%',
            right: '4%',
            bottom: '3%',
            containLabel: true
        },
        xAxis: {
            type: 'value',
        },
        yAxis: {
            type: 'category',
            data: []
        },
        series: [
            {
                name: '',
                type: 'bar',
                data: [],
                label: {
                    show: true,
                    position: 'inside'
                },
            },
        ]
    }

    const handleUserPassCategory = () => {
        passBarOpt.yAxis.data = []
        passBarOpt.series[0].data = []
        passBarOpt.series[0].name = "补题统计"
        let n = user_pass_category.length
        let sum = 0
        for(let i = n - 1; i >= 1; i--) {
            sum += user_pass_category[i]
            passBarOpt.yAxis.data.push(`补题数量 >= ${i}`)
            passBarOpt.series[0].data.push(sum)
        }
        passBarChart.setOption(passBarOpt)
        passBarChart.resize({height: (n <= 20 ? 80 : 60) * n })
    }

    const handle = ()=> {
        let problem = problems[radio.value]
        barOpt.yAxis.data = []
        barOpt.series[0].data = []
        barOpt.series[0].name =  "ABCDEFGHIJKLMNOPQRSTUVWXYZ"[radio.value] + ". " + problem.title
        let cases = problem.cases

        let keys = Object.keys(cases).sort((a, b) => parseInt(b) - parseInt(a))
        for(let key of keys) {
            let str = '测试点 ' + (parseInt(key) + 1);
            if(player_num > 0) str += ' (' +  (cases[key].length / player_num * 100).toFixed(2) + '%)'
            barOpt.yAxis.data.push(str)
            barOpt.series[0].data.push(cases[key].length)
        }
        // barChart.clear()
        barChart.setOption(barOpt)
        let n = barOpt.yAxis.data.length
        barChart.resize({height: (n <= 20 ? 80 : 60) * n })
    }
    const App = {
        setup() {
            onMounted(() => {

                passBarChart = echarts.init(passBarChartRef.value);
                handleUserPassCategory()

                barChart = echarts.init(barChartRef.value);
                handle()
            })
            return {contest, problems, radio, handle, barChartRef, show, passBarChartRef}
        },
    }
    createApp(App).use(ElementPlus).mount('#app')
</script>